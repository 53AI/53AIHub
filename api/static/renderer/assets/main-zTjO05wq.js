/**
* @vue/shared v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function makeMap(str) {
  const map = /* @__PURE__ */ Object.create(null);
  for (const key of str.split(","))
    map[key] = 1;
  return (val) => val in map;
}
const EMPTY_OBJ = {};
const EMPTY_ARR = [];
const NOOP = () => {
};
const NO = () => false;
const isOn = (key) => key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 && // uppercase letter
(key.charCodeAt(2) > 122 || key.charCodeAt(2) < 97);
const isModelListener = (key) => key.startsWith("onUpdate:");
const extend$1 = Object.assign;
const remove = (arr, el2) => {
  const i2 = arr.indexOf(el2);
  if (i2 > -1) {
    arr.splice(i2, 1);
  }
};
const hasOwnProperty$d = Object.prototype.hasOwnProperty;
const hasOwn$1 = (val, key) => hasOwnProperty$d.call(val, key);
const isArray$4 = Array.isArray;
const isMap$1 = (val) => toTypeString$1(val) === "[object Map]";
const isSet$1 = (val) => toTypeString$1(val) === "[object Set]";
const isDate$2 = (val) => toTypeString$1(val) === "[object Date]";
const isFunction$3 = (val) => typeof val === "function";
const isString$3 = (val) => typeof val === "string";
const isSymbol$1 = (val) => typeof val === "symbol";
const isObject$3 = (val) => val !== null && typeof val === "object";
const isPromise$1 = (val) => {
  return (isObject$3(val) || isFunction$3(val)) && isFunction$3(val.then) && isFunction$3(val.catch);
};
const objectToString$2 = Object.prototype.toString;
const toTypeString$1 = (value) => objectToString$2.call(value);
const toRawType = (value) => {
  return toTypeString$1(value).slice(8, -1);
};
const isPlainObject$3 = (val) => toTypeString$1(val) === "[object Object]";
const isIntegerKey = (key) => isString$3(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /* @__PURE__ */ makeMap(
  // the leading comma is intentional so empty string "" is also included
  ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
);
const cacheStringFunction = (fn2) => {
  const cache2 = /* @__PURE__ */ Object.create(null);
  return (str) => {
    const hit = cache2[str];
    return hit || (cache2[str] = fn2(str));
  };
};
const camelizeRE = /-(\w)/g;
const camelize = cacheStringFunction(
  (str) => {
    return str.replace(camelizeRE, (_, c2) => c2 ? c2.toUpperCase() : "");
  }
);
const hyphenateRE = /\B([A-Z])/g;
const hyphenate = cacheStringFunction(
  (str) => str.replace(hyphenateRE, "-$1").toLowerCase()
);
const capitalize$1 = cacheStringFunction((str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
const toHandlerKey = cacheStringFunction(
  (str) => {
    const s2 = str ? `on${capitalize$1(str)}` : ``;
    return s2;
  }
);
const hasChanged = (value, oldValue) => !Object.is(value, oldValue);
const invokeArrayFns = (fns, ...arg) => {
  for (let i2 = 0; i2 < fns.length; i2++) {
    fns[i2](...arg);
  }
};
const def = (obj, key, value, writable = false) => {
  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    writable,
    value
  });
};
const looseToNumber = (val) => {
  const n = parseFloat(val);
  return isNaN(n) ? val : n;
};
const toNumber = (val) => {
  const n = isString$3(val) ? Number(val) : NaN;
  return isNaN(n) ? val : n;
};
let _globalThis$1;
const getGlobalThis$1 = () => {
  return _globalThis$1 || (_globalThis$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
function normalizeStyle(value) {
  if (isArray$4(value)) {
    const res = {};
    for (let i2 = 0; i2 < value.length; i2++) {
      const item = value[i2];
      const normalized = isString$3(item) ? parseStringStyle(item) : normalizeStyle(item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isString$3(value) || isObject$3(value)) {
    return value;
  }
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:([^]+)/;
const styleCommentRE = /\/\*[^]*?\*\//g;
function parseStringStyle(cssText) {
  const ret = {};
  cssText.replace(styleCommentRE, "").split(listDelimiterRE).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function normalizeClass(value) {
  let res = "";
  if (isString$3(value)) {
    res = value;
  } else if (isArray$4(value)) {
    for (let i2 = 0; i2 < value.length; i2++) {
      const normalized = normalizeClass(value[i2]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject$3(value)) {
    for (const name in value) {
      if (value[name]) {
        res += name + " ";
      }
    }
  }
  return res.trim();
}
function normalizeProps(props) {
  if (!props)
    return null;
  let { class: klass, style } = props;
  if (klass && !isString$3(klass)) {
    props.class = normalizeClass(klass);
  }
  if (style) {
    props.style = normalizeStyle(style);
  }
  return props;
}
const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
function includeBooleanAttr(value) {
  return !!value || value === "";
}
function looseCompareArrays(a2, b) {
  if (a2.length !== b.length)
    return false;
  let equal = true;
  for (let i2 = 0; equal && i2 < a2.length; i2++) {
    equal = looseEqual(a2[i2], b[i2]);
  }
  return equal;
}
function looseEqual(a2, b) {
  if (a2 === b)
    return true;
  let aValidType = isDate$2(a2);
  let bValidType = isDate$2(b);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? a2.getTime() === b.getTime() : false;
  }
  aValidType = isSymbol$1(a2);
  bValidType = isSymbol$1(b);
  if (aValidType || bValidType) {
    return a2 === b;
  }
  aValidType = isArray$4(a2);
  bValidType = isArray$4(b);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? looseCompareArrays(a2, b) : false;
  }
  aValidType = isObject$3(a2);
  bValidType = isObject$3(b);
  if (aValidType || bValidType) {
    if (!aValidType || !bValidType) {
      return false;
    }
    const aKeysCount = Object.keys(a2).length;
    const bKeysCount = Object.keys(b).length;
    if (aKeysCount !== bKeysCount) {
      return false;
    }
    for (const key in a2) {
      const aHasKey = a2.hasOwnProperty(key);
      const bHasKey = b.hasOwnProperty(key);
      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a2[key], b[key])) {
        return false;
      }
    }
  }
  return String(a2) === String(b);
}
const isRef$1 = (val) => {
  return !!(val && val["__v_isRef"] === true);
};
const toDisplayString$1 = (val) => {
  return isString$3(val) ? val : val == null ? "" : isArray$4(val) || isObject$3(val) && (val.toString === objectToString$2 || !isFunction$3(val.toString)) ? isRef$1(val) ? toDisplayString$1(val.value) : JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val) => {
  if (isRef$1(val)) {
    return replacer(_key, val.value);
  } else if (isMap$1(val)) {
    return {
      [`Map(${val.size})`]: [...val.entries()].reduce(
        (entries, [key, val2], i2) => {
          entries[stringifySymbol(key, i2) + " =>"] = val2;
          return entries;
        },
        {}
      )
    };
  } else if (isSet$1(val)) {
    return {
      [`Set(${val.size})`]: [...val.values()].map((v2) => stringifySymbol(v2))
    };
  } else if (isSymbol$1(val)) {
    return stringifySymbol(val);
  } else if (isObject$3(val) && !isArray$4(val) && !isPlainObject$3(val)) {
    return String(val);
  }
  return val;
};
const stringifySymbol = (v2, i2 = "") => {
  var _a2;
  return (
    // Symbol.description in es2019+ so we need to cast here to pass
    // the lib: es2016 check
    isSymbol$1(v2) ? `Symbol(${(_a2 = v2.description) != null ? _a2 : i2})` : v2
  );
};
/**
* @vue/reactivity v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
let activeEffectScope;
class EffectScope {
  constructor(detached = false) {
    this.detached = detached;
    this._active = true;
    this.effects = [];
    this.cleanups = [];
    this._isPaused = false;
    this.parent = activeEffectScope;
    if (!detached && activeEffectScope) {
      this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(
        this
      ) - 1;
    }
  }
  get active() {
    return this._active;
  }
  pause() {
    if (this._active) {
      this._isPaused = true;
      let i2, l2;
      if (this.scopes) {
        for (i2 = 0, l2 = this.scopes.length; i2 < l2; i2++) {
          this.scopes[i2].pause();
        }
      }
      for (i2 = 0, l2 = this.effects.length; i2 < l2; i2++) {
        this.effects[i2].pause();
      }
    }
  }
  /**
   * Resumes the effect scope, including all child scopes and effects.
   */
  resume() {
    if (this._active) {
      if (this._isPaused) {
        this._isPaused = false;
        let i2, l2;
        if (this.scopes) {
          for (i2 = 0, l2 = this.scopes.length; i2 < l2; i2++) {
            this.scopes[i2].resume();
          }
        }
        for (i2 = 0, l2 = this.effects.length; i2 < l2; i2++) {
          this.effects[i2].resume();
        }
      }
    }
  }
  run(fn2) {
    if (this._active) {
      const currentEffectScope = activeEffectScope;
      try {
        activeEffectScope = this;
        return fn2();
      } finally {
        activeEffectScope = currentEffectScope;
      }
    }
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  on() {
    activeEffectScope = this;
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  off() {
    activeEffectScope = this.parent;
  }
  stop(fromParent) {
    if (this._active) {
      this._active = false;
      let i2, l2;
      for (i2 = 0, l2 = this.effects.length; i2 < l2; i2++) {
        this.effects[i2].stop();
      }
      this.effects.length = 0;
      for (i2 = 0, l2 = this.cleanups.length; i2 < l2; i2++) {
        this.cleanups[i2]();
      }
      this.cleanups.length = 0;
      if (this.scopes) {
        for (i2 = 0, l2 = this.scopes.length; i2 < l2; i2++) {
          this.scopes[i2].stop(true);
        }
        this.scopes.length = 0;
      }
      if (!this.detached && this.parent && !fromParent) {
        const last = this.parent.scopes.pop();
        if (last && last !== this) {
          this.parent.scopes[this.index] = last;
          last.index = this.index;
        }
      }
      this.parent = void 0;
    }
  }
}
function effectScope(detached) {
  return new EffectScope(detached);
}
function getCurrentScope() {
  return activeEffectScope;
}
function onScopeDispose(fn2, failSilently = false) {
  if (activeEffectScope) {
    activeEffectScope.cleanups.push(fn2);
  }
}
let activeSub;
const pausedQueueEffects = /* @__PURE__ */ new WeakSet();
class ReactiveEffect {
  constructor(fn2) {
    this.fn = fn2;
    this.deps = void 0;
    this.depsTail = void 0;
    this.flags = 1 | 4;
    this.next = void 0;
    this.cleanup = void 0;
    this.scheduler = void 0;
    if (activeEffectScope && activeEffectScope.active) {
      activeEffectScope.effects.push(this);
    }
  }
  pause() {
    this.flags |= 64;
  }
  resume() {
    if (this.flags & 64) {
      this.flags &= ~64;
      if (pausedQueueEffects.has(this)) {
        pausedQueueEffects.delete(this);
        this.trigger();
      }
    }
  }
  /**
   * @internal
   */
  notify() {
    if (this.flags & 2 && !(this.flags & 32)) {
      return;
    }
    if (!(this.flags & 8)) {
      batch(this);
    }
  }
  run() {
    if (!(this.flags & 1)) {
      return this.fn();
    }
    this.flags |= 2;
    cleanupEffect(this);
    prepareDeps(this);
    const prevEffect = activeSub;
    const prevShouldTrack = shouldTrack;
    activeSub = this;
    shouldTrack = true;
    try {
      return this.fn();
    } finally {
      cleanupDeps(this);
      activeSub = prevEffect;
      shouldTrack = prevShouldTrack;
      this.flags &= ~2;
    }
  }
  stop() {
    if (this.flags & 1) {
      for (let link = this.deps; link; link = link.nextDep) {
        removeSub(link);
      }
      this.deps = this.depsTail = void 0;
      cleanupEffect(this);
      this.onStop && this.onStop();
      this.flags &= ~1;
    }
  }
  trigger() {
    if (this.flags & 64) {
      pausedQueueEffects.add(this);
    } else if (this.scheduler) {
      this.scheduler();
    } else {
      this.runIfDirty();
    }
  }
  /**
   * @internal
   */
  runIfDirty() {
    if (isDirty(this)) {
      this.run();
    }
  }
  get dirty() {
    return isDirty(this);
  }
}
let batchDepth = 0;
let batchedSub;
let batchedComputed;
function batch(sub, isComputed2 = false) {
  sub.flags |= 8;
  if (isComputed2) {
    sub.next = batchedComputed;
    batchedComputed = sub;
    return;
  }
  sub.next = batchedSub;
  batchedSub = sub;
}
function startBatch() {
  batchDepth++;
}
function endBatch() {
  if (--batchDepth > 0) {
    return;
  }
  if (batchedComputed) {
    let e2 = batchedComputed;
    batchedComputed = void 0;
    while (e2) {
      const next = e2.next;
      e2.next = void 0;
      e2.flags &= ~8;
      e2 = next;
    }
  }
  let error;
  while (batchedSub) {
    let e2 = batchedSub;
    batchedSub = void 0;
    while (e2) {
      const next = e2.next;
      e2.next = void 0;
      e2.flags &= ~8;
      if (e2.flags & 1) {
        try {
          ;
          e2.trigger();
        } catch (err) {
          if (!error)
            error = err;
        }
      }
      e2 = next;
    }
  }
  if (error)
    throw error;
}
function prepareDeps(sub) {
  for (let link = sub.deps; link; link = link.nextDep) {
    link.version = -1;
    link.prevActiveLink = link.dep.activeLink;
    link.dep.activeLink = link;
  }
}
function cleanupDeps(sub) {
  let head;
  let tail = sub.depsTail;
  let link = tail;
  while (link) {
    const prev = link.prevDep;
    if (link.version === -1) {
      if (link === tail)
        tail = prev;
      removeSub(link);
      removeDep(link);
    } else {
      head = link;
    }
    link.dep.activeLink = link.prevActiveLink;
    link.prevActiveLink = void 0;
    link = prev;
  }
  sub.deps = head;
  sub.depsTail = tail;
}
function isDirty(sub) {
  for (let link = sub.deps; link; link = link.nextDep) {
    if (link.dep.version !== link.version || link.dep.computed && (refreshComputed(link.dep.computed) || link.dep.version !== link.version)) {
      return true;
    }
  }
  if (sub._dirty) {
    return true;
  }
  return false;
}
function refreshComputed(computed2) {
  if (computed2.flags & 4 && !(computed2.flags & 16)) {
    return;
  }
  computed2.flags &= ~16;
  if (computed2.globalVersion === globalVersion) {
    return;
  }
  computed2.globalVersion = globalVersion;
  const dep = computed2.dep;
  computed2.flags |= 2;
  if (dep.version > 0 && !computed2.isSSR && computed2.deps && !isDirty(computed2)) {
    computed2.flags &= ~2;
    return;
  }
  const prevSub = activeSub;
  const prevShouldTrack = shouldTrack;
  activeSub = computed2;
  shouldTrack = true;
  try {
    prepareDeps(computed2);
    const value = computed2.fn(computed2._value);
    if (dep.version === 0 || hasChanged(value, computed2._value)) {
      computed2._value = value;
      dep.version++;
    }
  } catch (err) {
    dep.version++;
    throw err;
  } finally {
    activeSub = prevSub;
    shouldTrack = prevShouldTrack;
    cleanupDeps(computed2);
    computed2.flags &= ~2;
  }
}
function removeSub(link, soft = false) {
  const { dep, prevSub, nextSub } = link;
  if (prevSub) {
    prevSub.nextSub = nextSub;
    link.prevSub = void 0;
  }
  if (nextSub) {
    nextSub.prevSub = prevSub;
    link.nextSub = void 0;
  }
  if (dep.subs === link) {
    dep.subs = prevSub;
    if (!prevSub && dep.computed) {
      dep.computed.flags &= ~4;
      for (let l2 = dep.computed.deps; l2; l2 = l2.nextDep) {
        removeSub(l2, true);
      }
    }
  }
  if (!soft && !--dep.sc && dep.map) {
    dep.map.delete(dep.key);
  }
}
function removeDep(link) {
  const { prevDep, nextDep } = link;
  if (prevDep) {
    prevDep.nextDep = nextDep;
    link.prevDep = void 0;
  }
  if (nextDep) {
    nextDep.prevDep = prevDep;
    link.nextDep = void 0;
  }
}
let shouldTrack = true;
const trackStack = [];
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function resetTracking() {
  const last = trackStack.pop();
  shouldTrack = last === void 0 ? true : last;
}
function cleanupEffect(e2) {
  const { cleanup } = e2;
  e2.cleanup = void 0;
  if (cleanup) {
    const prevSub = activeSub;
    activeSub = void 0;
    try {
      cleanup();
    } finally {
      activeSub = prevSub;
    }
  }
}
let globalVersion = 0;
class Link {
  constructor(sub, dep) {
    this.sub = sub;
    this.dep = dep;
    this.version = dep.version;
    this.nextDep = this.prevDep = this.nextSub = this.prevSub = this.prevActiveLink = void 0;
  }
}
class Dep {
  constructor(computed2) {
    this.computed = computed2;
    this.version = 0;
    this.activeLink = void 0;
    this.subs = void 0;
    this.map = void 0;
    this.key = void 0;
    this.sc = 0;
  }
  track(debugInfo) {
    if (!activeSub || !shouldTrack || activeSub === this.computed) {
      return;
    }
    let link = this.activeLink;
    if (link === void 0 || link.sub !== activeSub) {
      link = this.activeLink = new Link(activeSub, this);
      if (!activeSub.deps) {
        activeSub.deps = activeSub.depsTail = link;
      } else {
        link.prevDep = activeSub.depsTail;
        activeSub.depsTail.nextDep = link;
        activeSub.depsTail = link;
      }
      addSub(link);
    } else if (link.version === -1) {
      link.version = this.version;
      if (link.nextDep) {
        const next = link.nextDep;
        next.prevDep = link.prevDep;
        if (link.prevDep) {
          link.prevDep.nextDep = next;
        }
        link.prevDep = activeSub.depsTail;
        link.nextDep = void 0;
        activeSub.depsTail.nextDep = link;
        activeSub.depsTail = link;
        if (activeSub.deps === link) {
          activeSub.deps = next;
        }
      }
    }
    return link;
  }
  trigger(debugInfo) {
    this.version++;
    globalVersion++;
    this.notify(debugInfo);
  }
  notify(debugInfo) {
    startBatch();
    try {
      if (false)
        ;
      for (let link = this.subs; link; link = link.prevSub) {
        if (link.sub.notify()) {
          ;
          link.sub.dep.notify();
        }
      }
    } finally {
      endBatch();
    }
  }
}
function addSub(link) {
  link.dep.sc++;
  if (link.sub.flags & 4) {
    const computed2 = link.dep.computed;
    if (computed2 && !link.dep.subs) {
      computed2.flags |= 4 | 16;
      for (let l2 = computed2.deps; l2; l2 = l2.nextDep) {
        addSub(l2);
      }
    }
    const currentTail = link.dep.subs;
    if (currentTail !== link) {
      link.prevSub = currentTail;
      if (currentTail)
        currentTail.nextSub = link;
    }
    link.dep.subs = link;
  }
}
const targetMap = /* @__PURE__ */ new WeakMap();
const ITERATE_KEY = Symbol(
  ""
);
const MAP_KEY_ITERATE_KEY = Symbol(
  ""
);
const ARRAY_ITERATE_KEY = Symbol(
  ""
);
function track(target, type4, key) {
  if (shouldTrack && activeSub) {
    let depsMap = targetMap.get(target);
    if (!depsMap) {
      targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
    }
    let dep = depsMap.get(key);
    if (!dep) {
      depsMap.set(key, dep = new Dep());
      dep.map = depsMap;
      dep.key = key;
    }
    {
      dep.track();
    }
  }
}
function trigger(target, type4, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target);
  if (!depsMap) {
    globalVersion++;
    return;
  }
  const run = (dep) => {
    if (dep) {
      {
        dep.trigger();
      }
    }
  };
  startBatch();
  if (type4 === "clear") {
    depsMap.forEach(run);
  } else {
    const targetIsArray = isArray$4(target);
    const isArrayIndex = targetIsArray && isIntegerKey(key);
    if (targetIsArray && key === "length") {
      const newLength = Number(newValue);
      depsMap.forEach((dep, key2) => {
        if (key2 === "length" || key2 === ARRAY_ITERATE_KEY || !isSymbol$1(key2) && key2 >= newLength) {
          run(dep);
        }
      });
    } else {
      if (key !== void 0 || depsMap.has(void 0)) {
        run(depsMap.get(key));
      }
      if (isArrayIndex) {
        run(depsMap.get(ARRAY_ITERATE_KEY));
      }
      switch (type4) {
        case "add":
          if (!targetIsArray) {
            run(depsMap.get(ITERATE_KEY));
            if (isMap$1(target)) {
              run(depsMap.get(MAP_KEY_ITERATE_KEY));
            }
          } else if (isArrayIndex) {
            run(depsMap.get("length"));
          }
          break;
        case "delete":
          if (!targetIsArray) {
            run(depsMap.get(ITERATE_KEY));
            if (isMap$1(target)) {
              run(depsMap.get(MAP_KEY_ITERATE_KEY));
            }
          }
          break;
        case "set":
          if (isMap$1(target)) {
            run(depsMap.get(ITERATE_KEY));
          }
          break;
      }
    }
  }
  endBatch();
}
function getDepFromReactive(object4, key) {
  const depMap = targetMap.get(object4);
  return depMap && depMap.get(key);
}
function reactiveReadArray(array4) {
  const raw = toRaw(array4);
  if (raw === array4)
    return raw;
  track(raw, "iterate", ARRAY_ITERATE_KEY);
  return isShallow(array4) ? raw : raw.map(toReactive);
}
function shallowReadArray(arr) {
  track(arr = toRaw(arr), "iterate", ARRAY_ITERATE_KEY);
  return arr;
}
const arrayInstrumentations = {
  __proto__: null,
  [Symbol.iterator]() {
    return iterator(this, Symbol.iterator, toReactive);
  },
  concat(...args) {
    return reactiveReadArray(this).concat(
      ...args.map((x) => isArray$4(x) ? reactiveReadArray(x) : x)
    );
  },
  entries() {
    return iterator(this, "entries", (value) => {
      value[1] = toReactive(value[1]);
      return value;
    });
  },
  every(fn2, thisArg) {
    return apply$2(this, "every", fn2, thisArg, void 0, arguments);
  },
  filter(fn2, thisArg) {
    return apply$2(this, "filter", fn2, thisArg, (v2) => v2.map(toReactive), arguments);
  },
  find(fn2, thisArg) {
    return apply$2(this, "find", fn2, thisArg, toReactive, arguments);
  },
  findIndex(fn2, thisArg) {
    return apply$2(this, "findIndex", fn2, thisArg, void 0, arguments);
  },
  findLast(fn2, thisArg) {
    return apply$2(this, "findLast", fn2, thisArg, toReactive, arguments);
  },
  findLastIndex(fn2, thisArg) {
    return apply$2(this, "findLastIndex", fn2, thisArg, void 0, arguments);
  },
  // flat, flatMap could benefit from ARRAY_ITERATE but are not straight-forward to implement
  forEach(fn2, thisArg) {
    return apply$2(this, "forEach", fn2, thisArg, void 0, arguments);
  },
  includes(...args) {
    return searchProxy(this, "includes", args);
  },
  indexOf(...args) {
    return searchProxy(this, "indexOf", args);
  },
  join(separator) {
    return reactiveReadArray(this).join(separator);
  },
  // keys() iterator only reads `length`, no optimisation required
  lastIndexOf(...args) {
    return searchProxy(this, "lastIndexOf", args);
  },
  map(fn2, thisArg) {
    return apply$2(this, "map", fn2, thisArg, void 0, arguments);
  },
  pop() {
    return noTracking(this, "pop");
  },
  push(...args) {
    return noTracking(this, "push", args);
  },
  reduce(fn2, ...args) {
    return reduce(this, "reduce", fn2, args);
  },
  reduceRight(fn2, ...args) {
    return reduce(this, "reduceRight", fn2, args);
  },
  shift() {
    return noTracking(this, "shift");
  },
  // slice could use ARRAY_ITERATE but also seems to beg for range tracking
  some(fn2, thisArg) {
    return apply$2(this, "some", fn2, thisArg, void 0, arguments);
  },
  splice(...args) {
    return noTracking(this, "splice", args);
  },
  toReversed() {
    return reactiveReadArray(this).toReversed();
  },
  toSorted(comparer) {
    return reactiveReadArray(this).toSorted(comparer);
  },
  toSpliced(...args) {
    return reactiveReadArray(this).toSpliced(...args);
  },
  unshift(...args) {
    return noTracking(this, "unshift", args);
  },
  values() {
    return iterator(this, "values", toReactive);
  }
};
function iterator(self2, method4, wrapValue) {
  const arr = shallowReadArray(self2);
  const iter = arr[method4]();
  if (arr !== self2 && !isShallow(self2)) {
    iter._next = iter.next;
    iter.next = () => {
      const result = iter._next();
      if (result.value) {
        result.value = wrapValue(result.value);
      }
      return result;
    };
  }
  return iter;
}
const arrayProto$1 = Array.prototype;
function apply$2(self2, method4, fn2, thisArg, wrappedRetFn, args) {
  const arr = shallowReadArray(self2);
  const needsWrap = arr !== self2 && !isShallow(self2);
  const methodFn = arr[method4];
  if (methodFn !== arrayProto$1[method4]) {
    const result2 = methodFn.apply(self2, args);
    return needsWrap ? toReactive(result2) : result2;
  }
  let wrappedFn = fn2;
  if (arr !== self2) {
    if (needsWrap) {
      wrappedFn = function(item, index) {
        return fn2.call(this, toReactive(item), index, self2);
      };
    } else if (fn2.length > 2) {
      wrappedFn = function(item, index) {
        return fn2.call(this, item, index, self2);
      };
    }
  }
  const result = methodFn.call(arr, wrappedFn, thisArg);
  return needsWrap && wrappedRetFn ? wrappedRetFn(result) : result;
}
function reduce(self2, method4, fn2, args) {
  const arr = shallowReadArray(self2);
  let wrappedFn = fn2;
  if (arr !== self2) {
    if (!isShallow(self2)) {
      wrappedFn = function(acc, item, index) {
        return fn2.call(this, acc, toReactive(item), index, self2);
      };
    } else if (fn2.length > 3) {
      wrappedFn = function(acc, item, index) {
        return fn2.call(this, acc, item, index, self2);
      };
    }
  }
  return arr[method4](wrappedFn, ...args);
}
function searchProxy(self2, method4, args) {
  const arr = toRaw(self2);
  track(arr, "iterate", ARRAY_ITERATE_KEY);
  const res = arr[method4](...args);
  if ((res === -1 || res === false) && isProxy(args[0])) {
    args[0] = toRaw(args[0]);
    return arr[method4](...args);
  }
  return res;
}
function noTracking(self2, method4, args = []) {
  pauseTracking();
  startBatch();
  const res = toRaw(self2)[method4].apply(self2, args);
  endBatch();
  resetTracking();
  return res;
}
const isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(
  /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(isSymbol$1)
);
function hasOwnProperty$c(key) {
  if (!isSymbol$1(key))
    key = String(key);
  const obj = toRaw(this);
  track(obj, "has", key);
  return obj.hasOwnProperty(key);
}
class BaseReactiveHandler {
  constructor(_isReadonly = false, _isShallow = false) {
    this._isReadonly = _isReadonly;
    this._isShallow = _isShallow;
  }
  get(target, key, receiver) {
    if (key === "__v_skip")
      return target["__v_skip"];
    const isReadonly2 = this._isReadonly, isShallow2 = this._isShallow;
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_isShallow") {
      return isShallow2;
    } else if (key === "__v_raw") {
      if (receiver === (isReadonly2 ? isShallow2 ? shallowReadonlyMap : readonlyMap : isShallow2 ? shallowReactiveMap : reactiveMap).get(target) || // receiver is not the reactive proxy, but has the same prototype
      // this means the receiver is a user proxy of the reactive proxy
      Object.getPrototypeOf(target) === Object.getPrototypeOf(receiver)) {
        return target;
      }
      return;
    }
    const targetIsArray = isArray$4(target);
    if (!isReadonly2) {
      let fn2;
      if (targetIsArray && (fn2 = arrayInstrumentations[key])) {
        return fn2;
      }
      if (key === "hasOwnProperty") {
        return hasOwnProperty$c;
      }
    }
    const res = Reflect.get(
      target,
      key,
      // if this is a proxy wrapping a ref, return methods using the raw ref
      // as receiver so that we don't have to call `toRaw` on the ref in all
      // its class methods
      isRef(target) ? target : receiver
    );
    if (isSymbol$1(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
      return res;
    }
    if (!isReadonly2) {
      track(target, "get", key);
    }
    if (isShallow2) {
      return res;
    }
    if (isRef(res)) {
      return targetIsArray && isIntegerKey(key) ? res : res.value;
    }
    if (isObject$3(res)) {
      return isReadonly2 ? readonly(res) : reactive(res);
    }
    return res;
  }
}
class MutableReactiveHandler extends BaseReactiveHandler {
  constructor(isShallow2 = false) {
    super(false, isShallow2);
  }
  set(target, key, value, receiver) {
    let oldValue = target[key];
    if (!this._isShallow) {
      const isOldValueReadonly = isReadonly(oldValue);
      if (!isShallow(value) && !isReadonly(value)) {
        oldValue = toRaw(oldValue);
        value = toRaw(value);
      }
      if (!isArray$4(target) && isRef(oldValue) && !isRef(value)) {
        if (isOldValueReadonly) {
          return false;
        } else {
          oldValue.value = value;
          return true;
        }
      }
    }
    const hadKey = isArray$4(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn$1(target, key);
    const result = Reflect.set(
      target,
      key,
      value,
      isRef(target) ? target : receiver
    );
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger(target, "add", key, value);
      } else if (hasChanged(value, oldValue)) {
        trigger(target, "set", key, value);
      }
    }
    return result;
  }
  deleteProperty(target, key) {
    const hadKey = hasOwn$1(target, key);
    target[key];
    const result = Reflect.deleteProperty(target, key);
    if (result && hadKey) {
      trigger(target, "delete", key, void 0);
    }
    return result;
  }
  has(target, key) {
    const result = Reflect.has(target, key);
    if (!isSymbol$1(key) || !builtInSymbols.has(key)) {
      track(target, "has", key);
    }
    return result;
  }
  ownKeys(target) {
    track(
      target,
      "iterate",
      isArray$4(target) ? "length" : ITERATE_KEY
    );
    return Reflect.ownKeys(target);
  }
}
class ReadonlyReactiveHandler extends BaseReactiveHandler {
  constructor(isShallow2 = false) {
    super(true, isShallow2);
  }
  set(target, key) {
    return true;
  }
  deleteProperty(target, key) {
    return true;
  }
}
const mutableHandlers = /* @__PURE__ */ new MutableReactiveHandler();
const readonlyHandlers = /* @__PURE__ */ new ReadonlyReactiveHandler();
const shallowReactiveHandlers = /* @__PURE__ */ new MutableReactiveHandler(true);
const shallowReadonlyHandlers = /* @__PURE__ */ new ReadonlyReactiveHandler(true);
const toShallow = (value) => value;
const getProto = (v2) => Reflect.getPrototypeOf(v2);
function createIterableMethod(method4, isReadonly2, isShallow2) {
  return function(...args) {
    const target = this["__v_raw"];
    const rawTarget = toRaw(target);
    const targetIsMap = isMap$1(rawTarget);
    const isPair = method4 === "entries" || method4 === Symbol.iterator && targetIsMap;
    const isKeyOnly = method4 === "keys" && targetIsMap;
    const innerIterator = target[method4](...args);
    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(
      rawTarget,
      "iterate",
      isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY
    );
    return {
      // iterator protocol
      next() {
        const { value, done } = innerIterator.next();
        return done ? { value, done } : {
          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
          done
        };
      },
      // iterable protocol
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type4) {
  return function(...args) {
    return type4 === "delete" ? false : type4 === "clear" ? void 0 : this;
  };
}
function createInstrumentations(readonly2, shallow) {
  const instrumentations = {
    get(key) {
      const target = this["__v_raw"];
      const rawTarget = toRaw(target);
      const rawKey = toRaw(key);
      if (!readonly2) {
        if (hasChanged(key, rawKey)) {
          track(rawTarget, "get", key);
        }
        track(rawTarget, "get", rawKey);
      }
      const { has } = getProto(rawTarget);
      const wrap = shallow ? toShallow : readonly2 ? toReadonly : toReactive;
      if (has.call(rawTarget, key)) {
        return wrap(target.get(key));
      } else if (has.call(rawTarget, rawKey)) {
        return wrap(target.get(rawKey));
      } else if (target !== rawTarget) {
        target.get(key);
      }
    },
    get size() {
      const target = this["__v_raw"];
      !readonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
      return Reflect.get(target, "size", target);
    },
    has(key) {
      const target = this["__v_raw"];
      const rawTarget = toRaw(target);
      const rawKey = toRaw(key);
      if (!readonly2) {
        if (hasChanged(key, rawKey)) {
          track(rawTarget, "has", key);
        }
        track(rawTarget, "has", rawKey);
      }
      return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
    },
    forEach(callback, thisArg) {
      const observed = this;
      const target = observed["__v_raw"];
      const rawTarget = toRaw(target);
      const wrap = shallow ? toShallow : readonly2 ? toReadonly : toReactive;
      !readonly2 && track(rawTarget, "iterate", ITERATE_KEY);
      return target.forEach((value, key) => {
        return callback.call(thisArg, wrap(value), wrap(key), observed);
      });
    }
  };
  extend$1(
    instrumentations,
    readonly2 ? {
      add: createReadonlyMethod("add"),
      set: createReadonlyMethod("set"),
      delete: createReadonlyMethod("delete"),
      clear: createReadonlyMethod("clear")
    } : {
      add(value) {
        if (!shallow && !isShallow(value) && !isReadonly(value)) {
          value = toRaw(value);
        }
        const target = toRaw(this);
        const proto = getProto(target);
        const hadKey = proto.has.call(target, value);
        if (!hadKey) {
          target.add(value);
          trigger(target, "add", value, value);
        }
        return this;
      },
      set(key, value) {
        if (!shallow && !isShallow(value) && !isReadonly(value)) {
          value = toRaw(value);
        }
        const target = toRaw(this);
        const { has, get: get2 } = getProto(target);
        let hadKey = has.call(target, key);
        if (!hadKey) {
          key = toRaw(key);
          hadKey = has.call(target, key);
        }
        const oldValue = get2.call(target, key);
        target.set(key, value);
        if (!hadKey) {
          trigger(target, "add", key, value);
        } else if (hasChanged(value, oldValue)) {
          trigger(target, "set", key, value);
        }
        return this;
      },
      delete(key) {
        const target = toRaw(this);
        const { has, get: get2 } = getProto(target);
        let hadKey = has.call(target, key);
        if (!hadKey) {
          key = toRaw(key);
          hadKey = has.call(target, key);
        }
        get2 ? get2.call(target, key) : void 0;
        const result = target.delete(key);
        if (hadKey) {
          trigger(target, "delete", key, void 0);
        }
        return result;
      },
      clear() {
        const target = toRaw(this);
        const hadItems = target.size !== 0;
        const result = target.clear();
        if (hadItems) {
          trigger(
            target,
            "clear",
            void 0,
            void 0
          );
        }
        return result;
      }
    }
  );
  const iteratorMethods = [
    "keys",
    "values",
    "entries",
    Symbol.iterator
  ];
  iteratorMethods.forEach((method4) => {
    instrumentations[method4] = createIterableMethod(method4, readonly2, shallow);
  });
  return instrumentations;
}
function createInstrumentationGetter(isReadonly2, shallow) {
  const instrumentations = createInstrumentations(isReadonly2, shallow);
  return (target, key, receiver) => {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_raw") {
      return target;
    }
    return Reflect.get(
      hasOwn$1(instrumentations, key) && key in target ? instrumentations : target,
      key,
      receiver
    );
  };
}
const mutableCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, false)
};
const shallowReadonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, true)
};
const reactiveMap = /* @__PURE__ */ new WeakMap();
const shallowReactiveMap = /* @__PURE__ */ new WeakMap();
const readonlyMap = /* @__PURE__ */ new WeakMap();
const shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
function targetTypeMap(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function getTargetType(value) {
  return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
}
function reactive(target) {
  if (isReadonly(target)) {
    return target;
  }
  return createReactiveObject(
    target,
    false,
    mutableHandlers,
    mutableCollectionHandlers,
    reactiveMap
  );
}
function shallowReactive(target) {
  return createReactiveObject(
    target,
    false,
    shallowReactiveHandlers,
    shallowCollectionHandlers,
    shallowReactiveMap
  );
}
function readonly(target) {
  return createReactiveObject(
    target,
    true,
    readonlyHandlers,
    readonlyCollectionHandlers,
    readonlyMap
  );
}
function shallowReadonly(target) {
  return createReactiveObject(
    target,
    true,
    shallowReadonlyHandlers,
    shallowReadonlyCollectionHandlers,
    shallowReadonlyMap
  );
}
function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!isObject$3(target)) {
    return target;
  }
  if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType(target);
  if (targetType === 0) {
    return target;
  }
  const proxy = new Proxy(
    target,
    targetType === 2 ? collectionHandlers : baseHandlers
  );
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive(value) {
  if (isReadonly(value)) {
    return isReactive(value["__v_raw"]);
  }
  return !!(value && value["__v_isReactive"]);
}
function isReadonly(value) {
  return !!(value && value["__v_isReadonly"]);
}
function isShallow(value) {
  return !!(value && value["__v_isShallow"]);
}
function isProxy(value) {
  return value ? !!value["__v_raw"] : false;
}
function toRaw(observed) {
  const raw = observed && observed["__v_raw"];
  return raw ? toRaw(raw) : observed;
}
function markRaw(value) {
  if (!hasOwn$1(value, "__v_skip") && Object.isExtensible(value)) {
    def(value, "__v_skip", true);
  }
  return value;
}
const toReactive = (value) => isObject$3(value) ? reactive(value) : value;
const toReadonly = (value) => isObject$3(value) ? readonly(value) : value;
function isRef(r2) {
  return r2 ? r2["__v_isRef"] === true : false;
}
function ref(value) {
  return createRef(value, false);
}
function shallowRef(value) {
  return createRef(value, true);
}
function createRef(rawValue, shallow) {
  if (isRef(rawValue)) {
    return rawValue;
  }
  return new RefImpl(rawValue, shallow);
}
class RefImpl {
  constructor(value, isShallow2) {
    this.dep = new Dep();
    this["__v_isRef"] = true;
    this["__v_isShallow"] = false;
    this._rawValue = isShallow2 ? value : toRaw(value);
    this._value = isShallow2 ? value : toReactive(value);
    this["__v_isShallow"] = isShallow2;
  }
  get value() {
    {
      this.dep.track();
    }
    return this._value;
  }
  set value(newValue) {
    const oldValue = this._rawValue;
    const useDirectValue = this["__v_isShallow"] || isShallow(newValue) || isReadonly(newValue);
    newValue = useDirectValue ? newValue : toRaw(newValue);
    if (hasChanged(newValue, oldValue)) {
      this._rawValue = newValue;
      this._value = useDirectValue ? newValue : toReactive(newValue);
      {
        this.dep.trigger();
      }
    }
  }
}
function unref(ref2) {
  return isRef(ref2) ? ref2.value : ref2;
}
const shallowUnwrapHandlers = {
  get: (target, key, receiver) => key === "__v_raw" ? target : unref(Reflect.get(target, key, receiver)),
  set: (target, key, value, receiver) => {
    const oldValue = target[key];
    if (isRef(oldValue) && !isRef(value)) {
      oldValue.value = value;
      return true;
    } else {
      return Reflect.set(target, key, value, receiver);
    }
  }
};
function proxyRefs(objectWithRefs) {
  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
function toRefs(object4) {
  const ret = isArray$4(object4) ? new Array(object4.length) : {};
  for (const key in object4) {
    ret[key] = propertyToRef(object4, key);
  }
  return ret;
}
class ObjectRefImpl {
  constructor(_object, _key, _defaultValue) {
    this._object = _object;
    this._key = _key;
    this._defaultValue = _defaultValue;
    this["__v_isRef"] = true;
    this._value = void 0;
  }
  get value() {
    const val = this._object[this._key];
    return this._value = val === void 0 ? this._defaultValue : val;
  }
  set value(newVal) {
    this._object[this._key] = newVal;
  }
  get dep() {
    return getDepFromReactive(toRaw(this._object), this._key);
  }
}
class GetterRefImpl {
  constructor(_getter) {
    this._getter = _getter;
    this["__v_isRef"] = true;
    this["__v_isReadonly"] = true;
    this._value = void 0;
  }
  get value() {
    return this._value = this._getter();
  }
}
function toRef(source, key, defaultValue) {
  if (isRef(source)) {
    return source;
  } else if (isFunction$3(source)) {
    return new GetterRefImpl(source);
  } else if (isObject$3(source) && arguments.length > 1) {
    return propertyToRef(source, key, defaultValue);
  } else {
    return ref(source);
  }
}
function propertyToRef(source, key, defaultValue) {
  const val = source[key];
  return isRef(val) ? val : new ObjectRefImpl(source, key, defaultValue);
}
class ComputedRefImpl {
  constructor(fn2, setter, isSSR) {
    this.fn = fn2;
    this.setter = setter;
    this._value = void 0;
    this.dep = new Dep(this);
    this.__v_isRef = true;
    this.deps = void 0;
    this.depsTail = void 0;
    this.flags = 16;
    this.globalVersion = globalVersion - 1;
    this.next = void 0;
    this.effect = this;
    this["__v_isReadonly"] = !setter;
    this.isSSR = isSSR;
  }
  /**
   * @internal
   */
  notify() {
    this.flags |= 16;
    if (!(this.flags & 8) && // avoid infinite self recursion
    activeSub !== this) {
      batch(this, true);
      return true;
    }
  }
  get value() {
    const link = this.dep.track();
    refreshComputed(this);
    if (link) {
      link.version = this.dep.version;
    }
    return this._value;
  }
  set value(newValue) {
    if (this.setter) {
      this.setter(newValue);
    }
  }
}
function computed$1(getterOrOptions, debugOptions, isSSR = false) {
  let getter;
  let setter;
  if (isFunction$3(getterOrOptions)) {
    getter = getterOrOptions;
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  const cRef = new ComputedRefImpl(getter, setter, isSSR);
  return cRef;
}
const INITIAL_WATCHER_VALUE = {};
const cleanupMap = /* @__PURE__ */ new WeakMap();
let activeWatcher = void 0;
function onWatcherCleanup(cleanupFn, failSilently = false, owner = activeWatcher) {
  if (owner) {
    let cleanups = cleanupMap.get(owner);
    if (!cleanups)
      cleanupMap.set(owner, cleanups = []);
    cleanups.push(cleanupFn);
  }
}
function watch$1(source, cb2, options = EMPTY_OBJ) {
  const { immediate, deep, once, scheduler, augmentJob, call } = options;
  const reactiveGetter = (source2) => {
    if (deep)
      return source2;
    if (isShallow(source2) || deep === false || deep === 0)
      return traverse(source2, 1);
    return traverse(source2);
  };
  let effect2;
  let getter;
  let cleanup;
  let boundCleanup;
  let forceTrigger = false;
  let isMultiSource = false;
  if (isRef(source)) {
    getter = () => source.value;
    forceTrigger = isShallow(source);
  } else if (isReactive(source)) {
    getter = () => reactiveGetter(source);
    forceTrigger = true;
  } else if (isArray$4(source)) {
    isMultiSource = true;
    forceTrigger = source.some((s2) => isReactive(s2) || isShallow(s2));
    getter = () => source.map((s2) => {
      if (isRef(s2)) {
        return s2.value;
      } else if (isReactive(s2)) {
        return reactiveGetter(s2);
      } else if (isFunction$3(s2)) {
        return call ? call(s2, 2) : s2();
      } else
        ;
    });
  } else if (isFunction$3(source)) {
    if (cb2) {
      getter = call ? () => call(source, 2) : source;
    } else {
      getter = () => {
        if (cleanup) {
          pauseTracking();
          try {
            cleanup();
          } finally {
            resetTracking();
          }
        }
        const currentEffect = activeWatcher;
        activeWatcher = effect2;
        try {
          return call ? call(source, 3, [boundCleanup]) : source(boundCleanup);
        } finally {
          activeWatcher = currentEffect;
        }
      };
    }
  } else {
    getter = NOOP;
  }
  if (cb2 && deep) {
    const baseGetter = getter;
    const depth = deep === true ? Infinity : deep;
    getter = () => traverse(baseGetter(), depth);
  }
  const scope = getCurrentScope();
  const watchHandle = () => {
    effect2.stop();
    if (scope && scope.active) {
      remove(scope.effects, effect2);
    }
  };
  if (once && cb2) {
    const _cb = cb2;
    cb2 = (...args) => {
      _cb(...args);
      watchHandle();
    };
  }
  let oldValue = isMultiSource ? new Array(source.length).fill(INITIAL_WATCHER_VALUE) : INITIAL_WATCHER_VALUE;
  const job = (immediateFirstRun) => {
    if (!(effect2.flags & 1) || !effect2.dirty && !immediateFirstRun) {
      return;
    }
    if (cb2) {
      const newValue = effect2.run();
      if (deep || forceTrigger || (isMultiSource ? newValue.some((v2, i2) => hasChanged(v2, oldValue[i2])) : hasChanged(newValue, oldValue))) {
        if (cleanup) {
          cleanup();
        }
        const currentWatcher = activeWatcher;
        activeWatcher = effect2;
        try {
          const args = [
            newValue,
            // pass undefined as the old value when it's changed for the first time
            oldValue === INITIAL_WATCHER_VALUE ? void 0 : isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE ? [] : oldValue,
            boundCleanup
          ];
          call ? call(cb2, 3, args) : (
            // @ts-expect-error
            cb2(...args)
          );
          oldValue = newValue;
        } finally {
          activeWatcher = currentWatcher;
        }
      }
    } else {
      effect2.run();
    }
  };
  if (augmentJob) {
    augmentJob(job);
  }
  effect2 = new ReactiveEffect(getter);
  effect2.scheduler = scheduler ? () => scheduler(job, false) : job;
  boundCleanup = (fn2) => onWatcherCleanup(fn2, false, effect2);
  cleanup = effect2.onStop = () => {
    const cleanups = cleanupMap.get(effect2);
    if (cleanups) {
      if (call) {
        call(cleanups, 4);
      } else {
        for (const cleanup2 of cleanups)
          cleanup2();
      }
      cleanupMap.delete(effect2);
    }
  };
  if (cb2) {
    if (immediate) {
      job(true);
    } else {
      oldValue = effect2.run();
    }
  } else if (scheduler) {
    scheduler(job.bind(null, true), true);
  } else {
    effect2.run();
  }
  watchHandle.pause = effect2.pause.bind(effect2);
  watchHandle.resume = effect2.resume.bind(effect2);
  watchHandle.stop = watchHandle;
  return watchHandle;
}
function traverse(value, depth = Infinity, seen2) {
  if (depth <= 0 || !isObject$3(value) || value["__v_skip"]) {
    return value;
  }
  seen2 = seen2 || /* @__PURE__ */ new Set();
  if (seen2.has(value)) {
    return value;
  }
  seen2.add(value);
  depth--;
  if (isRef(value)) {
    traverse(value.value, depth, seen2);
  } else if (isArray$4(value)) {
    for (let i2 = 0; i2 < value.length; i2++) {
      traverse(value[i2], depth, seen2);
    }
  } else if (isSet$1(value) || isMap$1(value)) {
    value.forEach((v2) => {
      traverse(v2, depth, seen2);
    });
  } else if (isPlainObject$3(value)) {
    for (const key in value) {
      traverse(value[key], depth, seen2);
    }
    for (const key of Object.getOwnPropertySymbols(value)) {
      if (Object.prototype.propertyIsEnumerable.call(value, key)) {
        traverse(value[key], depth, seen2);
      }
    }
  }
  return value;
}
/**
* @vue/runtime-core v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
const stack = [];
let isWarning = false;
function warn$1(msg, ...args) {
  if (isWarning)
    return;
  isWarning = true;
  pauseTracking();
  const instance = stack.length ? stack[stack.length - 1].component : null;
  const appWarnHandler = instance && instance.appContext.config.warnHandler;
  const trace = getComponentTrace();
  if (appWarnHandler) {
    callWithErrorHandling(
      appWarnHandler,
      instance,
      11,
      [
        // eslint-disable-next-line no-restricted-syntax
        msg + args.map((a2) => {
          var _a2, _b2;
          return (_b2 = (_a2 = a2.toString) == null ? void 0 : _a2.call(a2)) != null ? _b2 : JSON.stringify(a2);
        }).join(""),
        instance && instance.proxy,
        trace.map(
          ({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`
        ).join("\n"),
        trace
      ]
    );
  } else {
    const warnArgs = [`[Vue warn]: ${msg}`, ...args];
    if (trace.length && // avoid spamming console during tests
    true) {
      warnArgs.push(`
`, ...formatTrace(trace));
    }
    console.warn(...warnArgs);
  }
  resetTracking();
  isWarning = false;
}
function getComponentTrace() {
  let currentVNode = stack[stack.length - 1];
  if (!currentVNode) {
    return [];
  }
  const normalizedStack = [];
  while (currentVNode) {
    const last = normalizedStack[0];
    if (last && last.vnode === currentVNode) {
      last.recurseCount++;
    } else {
      normalizedStack.push({
        vnode: currentVNode,
        recurseCount: 0
      });
    }
    const parentInstance = currentVNode.component && currentVNode.component.parent;
    currentVNode = parentInstance && parentInstance.vnode;
  }
  return normalizedStack;
}
function formatTrace(trace) {
  const logs = [];
  trace.forEach((entry, i2) => {
    logs.push(...i2 === 0 ? [] : [`
`], ...formatTraceEntry(entry));
  });
  return logs;
}
function formatTraceEntry({ vnode, recurseCount }) {
  const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
  const isRoot = vnode.component ? vnode.component.parent == null : false;
  const open = ` at <${formatComponentName(
    vnode.component,
    vnode.type,
    isRoot
  )}`;
  const close = `>` + postfix;
  return vnode.props ? [open, ...formatProps(vnode.props), close] : [open + close];
}
function formatProps(props) {
  const res = [];
  const keys2 = Object.keys(props);
  keys2.slice(0, 3).forEach((key) => {
    res.push(...formatProp(key, props[key]));
  });
  if (keys2.length > 3) {
    res.push(` ...`);
  }
  return res;
}
function formatProp(key, value, raw) {
  if (isString$3(value)) {
    value = JSON.stringify(value);
    return raw ? value : [`${key}=${value}`];
  } else if (typeof value === "number" || typeof value === "boolean" || value == null) {
    return raw ? value : [`${key}=${value}`];
  } else if (isRef(value)) {
    value = formatProp(key, toRaw(value.value), true);
    return raw ? value : [`${key}=Ref<`, value, `>`];
  } else if (isFunction$3(value)) {
    return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
  } else {
    value = toRaw(value);
    return raw ? value : [`${key}=`, value];
  }
}
function callWithErrorHandling(fn2, instance, type4, args) {
  try {
    return args ? fn2(...args) : fn2();
  } catch (err) {
    handleError$1(err, instance, type4);
  }
}
function callWithAsyncErrorHandling(fn2, instance, type4, args) {
  if (isFunction$3(fn2)) {
    const res = callWithErrorHandling(fn2, instance, type4, args);
    if (res && isPromise$1(res)) {
      res.catch((err) => {
        handleError$1(err, instance, type4);
      });
    }
    return res;
  }
  if (isArray$4(fn2)) {
    const values = [];
    for (let i2 = 0; i2 < fn2.length; i2++) {
      values.push(callWithAsyncErrorHandling(fn2[i2], instance, type4, args));
    }
    return values;
  }
}
function handleError$1(err, instance, type4, throwInDev = true) {
  const contextVNode = instance ? instance.vnode : null;
  const { errorHandler, throwUnhandledErrorInProduction } = instance && instance.appContext.config || EMPTY_OBJ;
  if (instance) {
    let cur = instance.parent;
    const exposedInstance = instance.proxy;
    const errorInfo = `https://vuejs.org/error-reference/#runtime-${type4}`;
    while (cur) {
      const errorCapturedHooks = cur.ec;
      if (errorCapturedHooks) {
        for (let i2 = 0; i2 < errorCapturedHooks.length; i2++) {
          if (errorCapturedHooks[i2](err, exposedInstance, errorInfo) === false) {
            return;
          }
        }
      }
      cur = cur.parent;
    }
    if (errorHandler) {
      pauseTracking();
      callWithErrorHandling(errorHandler, null, 10, [
        err,
        exposedInstance,
        errorInfo
      ]);
      resetTracking();
      return;
    }
  }
  logError(err, type4, contextVNode, throwInDev, throwUnhandledErrorInProduction);
}
function logError(err, type4, contextVNode, throwInDev = true, throwInProd = false) {
  if (throwInProd) {
    throw err;
  } else {
    console.error(err);
  }
}
const queue = [];
let flushIndex = -1;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = /* @__PURE__ */ Promise.resolve();
let currentFlushPromise = null;
function nextTick(fn2) {
  const p2 = currentFlushPromise || resolvedPromise;
  return fn2 ? p2.then(this ? fn2.bind(this) : fn2) : p2;
}
function findInsertionIndex$1(id2) {
  let start = flushIndex + 1;
  let end = queue.length;
  while (start < end) {
    const middle = start + end >>> 1;
    const middleJob = queue[middle];
    const middleJobId = getId(middleJob);
    if (middleJobId < id2 || middleJobId === id2 && middleJob.flags & 2) {
      start = middle + 1;
    } else {
      end = middle;
    }
  }
  return start;
}
function queueJob(job) {
  if (!(job.flags & 1)) {
    const jobId = getId(job);
    const lastJob = queue[queue.length - 1];
    if (!lastJob || // fast path when the job id is larger than the tail
    !(job.flags & 2) && jobId >= getId(lastJob)) {
      queue.push(job);
    } else {
      queue.splice(findInsertionIndex$1(jobId), 0, job);
    }
    job.flags |= 1;
    queueFlush();
  }
}
function queueFlush() {
  if (!currentFlushPromise) {
    currentFlushPromise = resolvedPromise.then(flushJobs);
  }
}
function queuePostFlushCb(cb2) {
  if (!isArray$4(cb2)) {
    if (activePostFlushCbs && cb2.id === -1) {
      activePostFlushCbs.splice(postFlushIndex + 1, 0, cb2);
    } else if (!(cb2.flags & 1)) {
      pendingPostFlushCbs.push(cb2);
      cb2.flags |= 1;
    }
  } else {
    pendingPostFlushCbs.push(...cb2);
  }
  queueFlush();
}
function flushPreFlushCbs(instance, seen2, i2 = flushIndex + 1) {
  for (; i2 < queue.length; i2++) {
    const cb2 = queue[i2];
    if (cb2 && cb2.flags & 2) {
      if (instance && cb2.id !== instance.uid) {
        continue;
      }
      queue.splice(i2, 1);
      i2--;
      if (cb2.flags & 4) {
        cb2.flags &= ~1;
      }
      cb2();
      if (!(cb2.flags & 4)) {
        cb2.flags &= ~1;
      }
    }
  }
}
function flushPostFlushCbs(seen2) {
  if (pendingPostFlushCbs.length) {
    const deduped = [...new Set(pendingPostFlushCbs)].sort(
      (a2, b) => getId(a2) - getId(b)
    );
    pendingPostFlushCbs.length = 0;
    if (activePostFlushCbs) {
      activePostFlushCbs.push(...deduped);
      return;
    }
    activePostFlushCbs = deduped;
    for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
      const cb2 = activePostFlushCbs[postFlushIndex];
      if (cb2.flags & 4) {
        cb2.flags &= ~1;
      }
      if (!(cb2.flags & 8))
        cb2();
      cb2.flags &= ~1;
    }
    activePostFlushCbs = null;
    postFlushIndex = 0;
  }
}
const getId = (job) => job.id == null ? job.flags & 2 ? -1 : Infinity : job.id;
function flushJobs(seen2) {
  try {
    for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
      const job = queue[flushIndex];
      if (job && !(job.flags & 8)) {
        if (false)
          ;
        if (job.flags & 4) {
          job.flags &= ~1;
        }
        callWithErrorHandling(
          job,
          job.i,
          job.i ? 15 : 14
        );
        if (!(job.flags & 4)) {
          job.flags &= ~1;
        }
      }
    }
  } finally {
    for (; flushIndex < queue.length; flushIndex++) {
      const job = queue[flushIndex];
      if (job) {
        job.flags &= ~1;
      }
    }
    flushIndex = -1;
    queue.length = 0;
    flushPostFlushCbs();
    currentFlushPromise = null;
    if (queue.length || pendingPostFlushCbs.length) {
      flushJobs();
    }
  }
}
let currentRenderingInstance = null;
let currentScopeId = null;
function setCurrentRenderingInstance(instance) {
  const prev = currentRenderingInstance;
  currentRenderingInstance = instance;
  currentScopeId = instance && instance.type.__scopeId || null;
  return prev;
}
function withCtx(fn2, ctx = currentRenderingInstance, isNonScopedSlot) {
  if (!ctx)
    return fn2;
  if (fn2._n) {
    return fn2;
  }
  const renderFnWithContext = (...args) => {
    if (renderFnWithContext._d) {
      setBlockTracking(-1);
    }
    const prevInstance = setCurrentRenderingInstance(ctx);
    let res;
    try {
      res = fn2(...args);
    } finally {
      setCurrentRenderingInstance(prevInstance);
      if (renderFnWithContext._d) {
        setBlockTracking(1);
      }
    }
    return res;
  };
  renderFnWithContext._n = true;
  renderFnWithContext._c = true;
  renderFnWithContext._d = true;
  return renderFnWithContext;
}
function withDirectives(vnode, directives) {
  if (currentRenderingInstance === null) {
    return vnode;
  }
  const instance = getComponentPublicInstance(currentRenderingInstance);
  const bindings = vnode.dirs || (vnode.dirs = []);
  for (let i2 = 0; i2 < directives.length; i2++) {
    let [dir, value, arg, modifiers = EMPTY_OBJ] = directives[i2];
    if (dir) {
      if (isFunction$3(dir)) {
        dir = {
          mounted: dir,
          updated: dir
        };
      }
      if (dir.deep) {
        traverse(value);
      }
      bindings.push({
        dir,
        instance,
        value,
        oldValue: void 0,
        arg,
        modifiers
      });
    }
  }
  return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name) {
  const bindings = vnode.dirs;
  const oldBindings = prevVNode && prevVNode.dirs;
  for (let i2 = 0; i2 < bindings.length; i2++) {
    const binding = bindings[i2];
    if (oldBindings) {
      binding.oldValue = oldBindings[i2].value;
    }
    let hook = binding.dir[name];
    if (hook) {
      pauseTracking();
      callWithAsyncErrorHandling(hook, instance, 8, [
        vnode.el,
        binding,
        vnode,
        prevVNode
      ]);
      resetTracking();
    }
  }
}
const TeleportEndKey = Symbol("_vte");
const isTeleport = (type4) => type4.__isTeleport;
const isTeleportDisabled = (props) => props && (props.disabled || props.disabled === "");
const isTeleportDeferred = (props) => props && (props.defer || props.defer === "");
const isTargetSVG = (target) => typeof SVGElement !== "undefined" && target instanceof SVGElement;
const isTargetMathML = (target) => typeof MathMLElement === "function" && target instanceof MathMLElement;
const resolveTarget = (props, select) => {
  const targetSelector = props && props.to;
  if (isString$3(targetSelector)) {
    if (!select) {
      return null;
    } else {
      const target = select(targetSelector);
      return target;
    }
  } else {
    return targetSelector;
  }
};
const TeleportImpl = {
  name: "Teleport",
  __isTeleport: true,
  process(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, internals) {
    const {
      mc: mountChildren,
      pc: patchChildren,
      pbc: patchBlockChildren,
      o: { insert, querySelector, createText, createComment }
    } = internals;
    const disabled = isTeleportDisabled(n2.props);
    let { shapeFlag, children, dynamicChildren } = n2;
    if (n1 == null) {
      const placeholder = n2.el = createText("");
      const mainAnchor = n2.anchor = createText("");
      insert(placeholder, container, anchor);
      insert(mainAnchor, container, anchor);
      const mount = (container2, anchor2) => {
        if (shapeFlag & 16) {
          if (parentComponent && parentComponent.isCE) {
            parentComponent.ce._teleportTarget = container2;
          }
          mountChildren(
            children,
            container2,
            anchor2,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        }
      };
      const mountToTarget = () => {
        const target = n2.target = resolveTarget(n2.props, querySelector);
        const targetAnchor = prepareAnchor(target, n2, createText, insert);
        if (target) {
          if (namespace !== "svg" && isTargetSVG(target)) {
            namespace = "svg";
          } else if (namespace !== "mathml" && isTargetMathML(target)) {
            namespace = "mathml";
          }
          if (!disabled) {
            mount(target, targetAnchor);
            updateCssVars(n2, false);
          }
        }
      };
      if (disabled) {
        mount(container, mainAnchor);
        updateCssVars(n2, true);
      }
      if (isTeleportDeferred(n2.props)) {
        queuePostRenderEffect(() => {
          mountToTarget();
          n2.el.__isMounted = true;
        }, parentSuspense);
      } else {
        mountToTarget();
      }
    } else {
      if (isTeleportDeferred(n2.props) && !n1.el.__isMounted) {
        queuePostRenderEffect(() => {
          TeleportImpl.process(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized,
            internals
          );
          delete n1.el.__isMounted;
        }, parentSuspense);
        return;
      }
      n2.el = n1.el;
      n2.targetStart = n1.targetStart;
      const mainAnchor = n2.anchor = n1.anchor;
      const target = n2.target = n1.target;
      const targetAnchor = n2.targetAnchor = n1.targetAnchor;
      const wasDisabled = isTeleportDisabled(n1.props);
      const currentContainer = wasDisabled ? container : target;
      const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
      if (namespace === "svg" || isTargetSVG(target)) {
        namespace = "svg";
      } else if (namespace === "mathml" || isTargetMathML(target)) {
        namespace = "mathml";
      }
      if (dynamicChildren) {
        patchBlockChildren(
          n1.dynamicChildren,
          dynamicChildren,
          currentContainer,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds
        );
        traverseStaticChildren(n1, n2, true);
      } else if (!optimized) {
        patchChildren(
          n1,
          n2,
          currentContainer,
          currentAnchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          false
        );
      }
      if (disabled) {
        if (!wasDisabled) {
          moveTeleport(
            n2,
            container,
            mainAnchor,
            internals,
            1
          );
        } else {
          if (n2.props && n1.props && n2.props.to !== n1.props.to) {
            n2.props.to = n1.props.to;
          }
        }
      } else {
        if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
          const nextTarget = n2.target = resolveTarget(
            n2.props,
            querySelector
          );
          if (nextTarget) {
            moveTeleport(
              n2,
              nextTarget,
              null,
              internals,
              0
            );
          }
        } else if (wasDisabled) {
          moveTeleport(
            n2,
            target,
            targetAnchor,
            internals,
            1
          );
        }
      }
      updateCssVars(n2, disabled);
    }
  },
  remove(vnode, parentComponent, parentSuspense, { um: unmount, o: { remove: hostRemove } }, doRemove) {
    const {
      shapeFlag,
      children,
      anchor,
      targetStart,
      targetAnchor,
      target,
      props
    } = vnode;
    if (target) {
      hostRemove(targetStart);
      hostRemove(targetAnchor);
    }
    doRemove && hostRemove(anchor);
    if (shapeFlag & 16) {
      const shouldRemove = doRemove || !isTeleportDisabled(props);
      for (let i2 = 0; i2 < children.length; i2++) {
        const child = children[i2];
        unmount(
          child,
          parentComponent,
          parentSuspense,
          shouldRemove,
          !!child.dynamicChildren
        );
      }
    }
  },
  move: moveTeleport,
  hydrate: hydrateTeleport
};
function moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2) {
  if (moveType === 0) {
    insert(vnode.targetAnchor, container, parentAnchor);
  }
  const { el: el2, anchor, shapeFlag, children, props } = vnode;
  const isReorder = moveType === 2;
  if (isReorder) {
    insert(el2, container, parentAnchor);
  }
  if (!isReorder || isTeleportDisabled(props)) {
    if (shapeFlag & 16) {
      for (let i2 = 0; i2 < children.length; i2++) {
        move(
          children[i2],
          container,
          parentAnchor,
          2
        );
      }
    }
  }
  if (isReorder) {
    insert(anchor, container, parentAnchor);
  }
}
function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, {
  o: { nextSibling, parentNode, querySelector, insert, createText }
}, hydrateChildren) {
  const target = vnode.target = resolveTarget(
    vnode.props,
    querySelector
  );
  if (target) {
    const disabled = isTeleportDisabled(vnode.props);
    const targetNode = target._lpa || target.firstChild;
    if (vnode.shapeFlag & 16) {
      if (disabled) {
        vnode.anchor = hydrateChildren(
          nextSibling(node),
          vnode,
          parentNode(node),
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
        vnode.targetStart = targetNode;
        vnode.targetAnchor = targetNode && nextSibling(targetNode);
      } else {
        vnode.anchor = nextSibling(node);
        let targetAnchor = targetNode;
        while (targetAnchor) {
          if (targetAnchor && targetAnchor.nodeType === 8) {
            if (targetAnchor.data === "teleport start anchor") {
              vnode.targetStart = targetAnchor;
            } else if (targetAnchor.data === "teleport anchor") {
              vnode.targetAnchor = targetAnchor;
              target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
              break;
            }
          }
          targetAnchor = nextSibling(targetAnchor);
        }
        if (!vnode.targetAnchor) {
          prepareAnchor(target, vnode, createText, insert);
        }
        hydrateChildren(
          targetNode && nextSibling(targetNode),
          vnode,
          target,
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
      }
    }
    updateCssVars(vnode, disabled);
  }
  return vnode.anchor && nextSibling(vnode.anchor);
}
const Teleport$1 = TeleportImpl;
function updateCssVars(vnode, isDisabled) {
  const ctx = vnode.ctx;
  if (ctx && ctx.ut) {
    let node, anchor;
    if (isDisabled) {
      node = vnode.el;
      anchor = vnode.anchor;
    } else {
      node = vnode.targetStart;
      anchor = vnode.targetAnchor;
    }
    while (node && node !== anchor) {
      if (node.nodeType === 1)
        node.setAttribute("data-v-owner", ctx.uid);
      node = node.nextSibling;
    }
    ctx.ut();
  }
}
function prepareAnchor(target, vnode, createText, insert) {
  const targetStart = vnode.targetStart = createText("");
  const targetAnchor = vnode.targetAnchor = createText("");
  targetStart[TeleportEndKey] = targetAnchor;
  if (target) {
    insert(targetStart, target);
    insert(targetAnchor, target);
  }
  return targetAnchor;
}
const leaveCbKey = Symbol("_leaveCb");
const enterCbKey$1 = Symbol("_enterCb");
function useTransitionState() {
  const state = {
    isMounted: false,
    isLeaving: false,
    isUnmounting: false,
    leavingVNodes: /* @__PURE__ */ new Map()
  };
  onMounted(() => {
    state.isMounted = true;
  });
  onBeforeUnmount(() => {
    state.isUnmounting = true;
  });
  return state;
}
const TransitionHookValidator = [Function, Array];
const BaseTransitionPropsValidators = {
  mode: String,
  appear: Boolean,
  persisted: Boolean,
  // enter
  onBeforeEnter: TransitionHookValidator,
  onEnter: TransitionHookValidator,
  onAfterEnter: TransitionHookValidator,
  onEnterCancelled: TransitionHookValidator,
  // leave
  onBeforeLeave: TransitionHookValidator,
  onLeave: TransitionHookValidator,
  onAfterLeave: TransitionHookValidator,
  onLeaveCancelled: TransitionHookValidator,
  // appear
  onBeforeAppear: TransitionHookValidator,
  onAppear: TransitionHookValidator,
  onAfterAppear: TransitionHookValidator,
  onAppearCancelled: TransitionHookValidator
};
const recursiveGetSubtree = (instance) => {
  const subTree = instance.subTree;
  return subTree.component ? recursiveGetSubtree(subTree.component) : subTree;
};
const BaseTransitionImpl = {
  name: `BaseTransition`,
  props: BaseTransitionPropsValidators,
  setup(props, { slots }) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    return () => {
      const children = slots.default && getTransitionRawChildren(slots.default(), true);
      if (!children || !children.length) {
        return;
      }
      const child = findNonCommentChild(children);
      const rawProps = toRaw(props);
      const { mode } = rawProps;
      if (state.isLeaving) {
        return emptyPlaceholder(child);
      }
      const innerChild = getInnerChild$1(child);
      if (!innerChild) {
        return emptyPlaceholder(child);
      }
      let enterHooks = resolveTransitionHooks(
        innerChild,
        rawProps,
        state,
        instance,
        // #11061, ensure enterHooks is fresh after clone
        (hooks) => enterHooks = hooks
      );
      if (innerChild.type !== Comment) {
        setTransitionHooks(innerChild, enterHooks);
      }
      let oldInnerChild = instance.subTree && getInnerChild$1(instance.subTree);
      if (oldInnerChild && oldInnerChild.type !== Comment && !isSameVNodeType(innerChild, oldInnerChild) && recursiveGetSubtree(instance).type !== Comment) {
        let leavingHooks = resolveTransitionHooks(
          oldInnerChild,
          rawProps,
          state,
          instance
        );
        setTransitionHooks(oldInnerChild, leavingHooks);
        if (mode === "out-in" && innerChild.type !== Comment) {
          state.isLeaving = true;
          leavingHooks.afterLeave = () => {
            state.isLeaving = false;
            if (!(instance.job.flags & 8)) {
              instance.update();
            }
            delete leavingHooks.afterLeave;
            oldInnerChild = void 0;
          };
          return emptyPlaceholder(child);
        } else if (mode === "in-out" && innerChild.type !== Comment) {
          leavingHooks.delayLeave = (el2, earlyRemove, delayedLeave) => {
            const leavingVNodesCache = getLeavingNodesForType(
              state,
              oldInnerChild
            );
            leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
            el2[leaveCbKey] = () => {
              earlyRemove();
              el2[leaveCbKey] = void 0;
              delete enterHooks.delayedLeave;
              oldInnerChild = void 0;
            };
            enterHooks.delayedLeave = () => {
              delayedLeave();
              delete enterHooks.delayedLeave;
              oldInnerChild = void 0;
            };
          };
        } else {
          oldInnerChild = void 0;
        }
      } else if (oldInnerChild) {
        oldInnerChild = void 0;
      }
      return child;
    };
  }
};
function findNonCommentChild(children) {
  let child = children[0];
  if (children.length > 1) {
    for (const c2 of children) {
      if (c2.type !== Comment) {
        child = c2;
        break;
      }
    }
  }
  return child;
}
const BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(state, vnode) {
  const { leavingVNodes } = state;
  let leavingVNodesCache = leavingVNodes.get(vnode.type);
  if (!leavingVNodesCache) {
    leavingVNodesCache = /* @__PURE__ */ Object.create(null);
    leavingVNodes.set(vnode.type, leavingVNodesCache);
  }
  return leavingVNodesCache;
}
function resolveTransitionHooks(vnode, props, state, instance, postClone) {
  const {
    appear,
    mode,
    persisted = false,
    onBeforeEnter,
    onEnter,
    onAfterEnter,
    onEnterCancelled,
    onBeforeLeave,
    onLeave,
    onAfterLeave,
    onLeaveCancelled,
    onBeforeAppear,
    onAppear,
    onAfterAppear,
    onAppearCancelled
  } = props;
  const key = String(vnode.key);
  const leavingVNodesCache = getLeavingNodesForType(state, vnode);
  const callHook2 = (hook, args) => {
    hook && callWithAsyncErrorHandling(
      hook,
      instance,
      9,
      args
    );
  };
  const callAsyncHook = (hook, args) => {
    const done = args[1];
    callHook2(hook, args);
    if (isArray$4(hook)) {
      if (hook.every((hook2) => hook2.length <= 1))
        done();
    } else if (hook.length <= 1) {
      done();
    }
  };
  const hooks = {
    mode,
    persisted,
    beforeEnter(el2) {
      let hook = onBeforeEnter;
      if (!state.isMounted) {
        if (appear) {
          hook = onBeforeAppear || onBeforeEnter;
        } else {
          return;
        }
      }
      if (el2[leaveCbKey]) {
        el2[leaveCbKey](
          true
          /* cancelled */
        );
      }
      const leavingVNode = leavingVNodesCache[key];
      if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el[leaveCbKey]) {
        leavingVNode.el[leaveCbKey]();
      }
      callHook2(hook, [el2]);
    },
    enter(el2) {
      let hook = onEnter;
      let afterHook = onAfterEnter;
      let cancelHook = onEnterCancelled;
      if (!state.isMounted) {
        if (appear) {
          hook = onAppear || onEnter;
          afterHook = onAfterAppear || onAfterEnter;
          cancelHook = onAppearCancelled || onEnterCancelled;
        } else {
          return;
        }
      }
      let called = false;
      const done = el2[enterCbKey$1] = (cancelled) => {
        if (called)
          return;
        called = true;
        if (cancelled) {
          callHook2(cancelHook, [el2]);
        } else {
          callHook2(afterHook, [el2]);
        }
        if (hooks.delayedLeave) {
          hooks.delayedLeave();
        }
        el2[enterCbKey$1] = void 0;
      };
      if (hook) {
        callAsyncHook(hook, [el2, done]);
      } else {
        done();
      }
    },
    leave(el2, remove2) {
      const key2 = String(vnode.key);
      if (el2[enterCbKey$1]) {
        el2[enterCbKey$1](
          true
          /* cancelled */
        );
      }
      if (state.isUnmounting) {
        return remove2();
      }
      callHook2(onBeforeLeave, [el2]);
      let called = false;
      const done = el2[leaveCbKey] = (cancelled) => {
        if (called)
          return;
        called = true;
        remove2();
        if (cancelled) {
          callHook2(onLeaveCancelled, [el2]);
        } else {
          callHook2(onAfterLeave, [el2]);
        }
        el2[leaveCbKey] = void 0;
        if (leavingVNodesCache[key2] === vnode) {
          delete leavingVNodesCache[key2];
        }
      };
      leavingVNodesCache[key2] = vnode;
      if (onLeave) {
        callAsyncHook(onLeave, [el2, done]);
      } else {
        done();
      }
    },
    clone(vnode2) {
      const hooks2 = resolveTransitionHooks(
        vnode2,
        props,
        state,
        instance,
        postClone
      );
      if (postClone)
        postClone(hooks2);
      return hooks2;
    }
  };
  return hooks;
}
function emptyPlaceholder(vnode) {
  if (isKeepAlive(vnode)) {
    vnode = cloneVNode(vnode);
    vnode.children = null;
    return vnode;
  }
}
function getInnerChild$1(vnode) {
  if (!isKeepAlive(vnode)) {
    if (isTeleport(vnode.type) && vnode.children) {
      return findNonCommentChild(vnode.children);
    }
    return vnode;
  }
  const { shapeFlag, children } = vnode;
  if (children) {
    if (shapeFlag & 16) {
      return children[0];
    }
    if (shapeFlag & 32 && isFunction$3(children.default)) {
      return children.default();
    }
  }
}
function setTransitionHooks(vnode, hooks) {
  if (vnode.shapeFlag & 6 && vnode.component) {
    vnode.transition = hooks;
    setTransitionHooks(vnode.component.subTree, hooks);
  } else if (vnode.shapeFlag & 128) {
    vnode.ssContent.transition = hooks.clone(vnode.ssContent);
    vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
  } else {
    vnode.transition = hooks;
  }
}
function getTransitionRawChildren(children, keepComment = false, parentKey) {
  let ret = [];
  let keyedFragmentCount = 0;
  for (let i2 = 0; i2 < children.length; i2++) {
    let child = children[i2];
    const key = parentKey == null ? child.key : String(parentKey) + String(child.key != null ? child.key : i2);
    if (child.type === Fragment) {
      if (child.patchFlag & 128)
        keyedFragmentCount++;
      ret = ret.concat(
        getTransitionRawChildren(child.children, keepComment, key)
      );
    } else if (keepComment || child.type !== Comment) {
      ret.push(key != null ? cloneVNode(child, { key }) : child);
    }
  }
  if (keyedFragmentCount > 1) {
    for (let i2 = 0; i2 < ret.length; i2++) {
      ret[i2].patchFlag = -2;
    }
  }
  return ret;
}
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function defineComponent(options, extraOptions) {
  return isFunction$3(options) ? (
    // #8236: extend call and options.name access are considered side-effects
    // by Rollup, so we have to wrap it in a pure-annotated IIFE.
    /* @__PURE__ */ (() => extend$1({ name: options.name }, extraOptions, { setup: options }))()
  ) : options;
}
function markAsyncBoundary(instance) {
  instance.ids = [instance.ids[0] + instance.ids[2]++ + "-", 0, 0];
}
function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
  if (isArray$4(rawRef)) {
    rawRef.forEach(
      (r2, i2) => setRef(
        r2,
        oldRawRef && (isArray$4(oldRawRef) ? oldRawRef[i2] : oldRawRef),
        parentSuspense,
        vnode,
        isUnmount
      )
    );
    return;
  }
  if (isAsyncWrapper(vnode) && !isUnmount) {
    if (vnode.shapeFlag & 512 && vnode.type.__asyncResolved && vnode.component.subTree.component) {
      setRef(rawRef, oldRawRef, parentSuspense, vnode.component.subTree);
    }
    return;
  }
  const refValue = vnode.shapeFlag & 4 ? getComponentPublicInstance(vnode.component) : vnode.el;
  const value = isUnmount ? null : refValue;
  const { i: owner, r: ref3 } = rawRef;
  const oldRef = oldRawRef && oldRawRef.r;
  const refs = owner.refs === EMPTY_OBJ ? owner.refs = {} : owner.refs;
  const setupState = owner.setupState;
  const rawSetupState = toRaw(setupState);
  const canSetSetupRef = setupState === EMPTY_OBJ ? () => false : (key) => {
    return hasOwn$1(rawSetupState, key);
  };
  if (oldRef != null && oldRef !== ref3) {
    if (isString$3(oldRef)) {
      refs[oldRef] = null;
      if (canSetSetupRef(oldRef)) {
        setupState[oldRef] = null;
      }
    } else if (isRef(oldRef)) {
      oldRef.value = null;
    }
  }
  if (isFunction$3(ref3)) {
    callWithErrorHandling(ref3, owner, 12, [value, refs]);
  } else {
    const _isString = isString$3(ref3);
    const _isRef = isRef(ref3);
    if (_isString || _isRef) {
      const doSet = () => {
        if (rawRef.f) {
          const existing = _isString ? canSetSetupRef(ref3) ? setupState[ref3] : refs[ref3] : ref3.value;
          if (isUnmount) {
            isArray$4(existing) && remove(existing, refValue);
          } else {
            if (!isArray$4(existing)) {
              if (_isString) {
                refs[ref3] = [refValue];
                if (canSetSetupRef(ref3)) {
                  setupState[ref3] = refs[ref3];
                }
              } else {
                ref3.value = [refValue];
                if (rawRef.k)
                  refs[rawRef.k] = ref3.value;
              }
            } else if (!existing.includes(refValue)) {
              existing.push(refValue);
            }
          }
        } else if (_isString) {
          refs[ref3] = value;
          if (canSetSetupRef(ref3)) {
            setupState[ref3] = value;
          }
        } else if (_isRef) {
          ref3.value = value;
          if (rawRef.k)
            refs[rawRef.k] = value;
        } else
          ;
      };
      if (value) {
        doSet.id = -1;
        queuePostRenderEffect(doSet, parentSuspense);
      } else {
        doSet();
      }
    }
  }
}
const isComment = (node) => node.nodeType === 8;
getGlobalThis$1().requestIdleCallback || ((cb2) => setTimeout(cb2, 1));
getGlobalThis$1().cancelIdleCallback || ((id2) => clearTimeout(id2));
function forEachElement(node, cb2) {
  if (isComment(node) && node.data === "[") {
    let depth = 1;
    let next = node.nextSibling;
    while (next) {
      if (next.nodeType === 1) {
        const result = cb2(next);
        if (result === false) {
          break;
        }
      } else if (isComment(next)) {
        if (next.data === "]") {
          if (--depth === 0)
            break;
        } else if (next.data === "[") {
          depth++;
        }
      }
      next = next.nextSibling;
    }
  } else {
    cb2(node);
  }
}
const isAsyncWrapper = (i2) => !!i2.type.__asyncLoader;
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function defineAsyncComponent(source) {
  if (isFunction$3(source)) {
    source = { loader: source };
  }
  const {
    loader,
    loadingComponent,
    errorComponent,
    delay = 200,
    hydrate: hydrateStrategy,
    timeout,
    // undefined = never times out
    suspensible = true,
    onError: userOnError
  } = source;
  let pendingRequest = null;
  let resolvedComp;
  let retries = 0;
  const retry = () => {
    retries++;
    pendingRequest = null;
    return load();
  };
  const load = () => {
    let thisRequest;
    return pendingRequest || (thisRequest = pendingRequest = loader().catch((err) => {
      err = err instanceof Error ? err : new Error(String(err));
      if (userOnError) {
        return new Promise((resolve2, reject) => {
          const userRetry = () => resolve2(retry());
          const userFail = () => reject(err);
          userOnError(err, userRetry, userFail, retries + 1);
        });
      } else {
        throw err;
      }
    }).then((comp) => {
      if (thisRequest !== pendingRequest && pendingRequest) {
        return pendingRequest;
      }
      if (comp && (comp.__esModule || comp[Symbol.toStringTag] === "Module")) {
        comp = comp.default;
      }
      resolvedComp = comp;
      return comp;
    }));
  };
  return /* @__PURE__ */ defineComponent({
    name: "AsyncComponentWrapper",
    __asyncLoader: load,
    __asyncHydrate(el2, instance, hydrate) {
      const doHydrate = hydrateStrategy ? () => {
        const teardown = hydrateStrategy(
          hydrate,
          (cb2) => forEachElement(el2, cb2)
        );
        if (teardown) {
          (instance.bum || (instance.bum = [])).push(teardown);
        }
      } : hydrate;
      if (resolvedComp) {
        doHydrate();
      } else {
        load().then(() => !instance.isUnmounted && doHydrate());
      }
    },
    get __asyncResolved() {
      return resolvedComp;
    },
    setup() {
      const instance = currentInstance;
      markAsyncBoundary(instance);
      if (resolvedComp) {
        return () => createInnerComp(resolvedComp, instance);
      }
      const onError = (err) => {
        pendingRequest = null;
        handleError$1(
          err,
          instance,
          13,
          !errorComponent
        );
      };
      if (suspensible && instance.suspense || isInSSRComponentSetup) {
        return load().then((comp) => {
          return () => createInnerComp(comp, instance);
        }).catch((err) => {
          onError(err);
          return () => errorComponent ? createVNode(errorComponent, {
            error: err
          }) : null;
        });
      }
      const loaded = ref(false);
      const error = ref();
      const delayed = ref(!!delay);
      if (delay) {
        setTimeout(() => {
          delayed.value = false;
        }, delay);
      }
      if (timeout != null) {
        setTimeout(() => {
          if (!loaded.value && !error.value) {
            const err = new Error(
              `Async component timed out after ${timeout}ms.`
            );
            onError(err);
            error.value = err;
          }
        }, timeout);
      }
      load().then(() => {
        loaded.value = true;
        if (instance.parent && isKeepAlive(instance.parent.vnode)) {
          instance.parent.update();
        }
      }).catch((err) => {
        onError(err);
        error.value = err;
      });
      return () => {
        if (loaded.value && resolvedComp) {
          return createInnerComp(resolvedComp, instance);
        } else if (error.value && errorComponent) {
          return createVNode(errorComponent, {
            error: error.value
          });
        } else if (loadingComponent && !delayed.value) {
          return createVNode(loadingComponent);
        }
      };
    }
  });
}
function createInnerComp(comp, parent) {
  const { ref: ref22, props, children, ce: ce2 } = parent.vnode;
  const vnode = createVNode(comp, props, children);
  vnode.ref = ref22;
  vnode.ce = ce2;
  delete parent.vnode.ce;
  return vnode;
}
const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
function onActivated(hook, target) {
  registerKeepAliveHook(hook, "a", target);
}
function onDeactivated(hook, target) {
  registerKeepAliveHook(hook, "da", target);
}
function registerKeepAliveHook(hook, type4, target = currentInstance) {
  const wrappedHook = hook.__wdc || (hook.__wdc = () => {
    let current = target;
    while (current) {
      if (current.isDeactivated) {
        return;
      }
      current = current.parent;
    }
    return hook();
  });
  injectHook(type4, wrappedHook, target);
  if (target) {
    let current = target.parent;
    while (current && current.parent) {
      if (isKeepAlive(current.parent.vnode)) {
        injectToKeepAliveRoot(wrappedHook, type4, target, current);
      }
      current = current.parent;
    }
  }
}
function injectToKeepAliveRoot(hook, type4, target, keepAliveRoot) {
  const injected = injectHook(
    type4,
    hook,
    keepAliveRoot,
    true
    /* prepend */
  );
  onUnmounted(() => {
    remove(keepAliveRoot[type4], injected);
  }, target);
}
function injectHook(type4, hook, target = currentInstance, prepend = false) {
  if (target) {
    const hooks = target[type4] || (target[type4] = []);
    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
      pauseTracking();
      const reset = setCurrentInstance(target);
      const res = callWithAsyncErrorHandling(hook, target, type4, args);
      reset();
      resetTracking();
      return res;
    });
    if (prepend) {
      hooks.unshift(wrappedHook);
    } else {
      hooks.push(wrappedHook);
    }
    return wrappedHook;
  }
}
const createHook = (lifecycle) => (hook, target = currentInstance) => {
  if (!isInSSRComponentSetup || lifecycle === "sp") {
    injectHook(lifecycle, (...args) => hook(...args), target);
  }
};
const onBeforeMount = createHook("bm");
const onMounted = createHook("m");
const onBeforeUpdate = createHook(
  "bu"
);
const onUpdated = createHook("u");
const onBeforeUnmount = createHook(
  "bum"
);
const onUnmounted = createHook("um");
const onServerPrefetch = createHook(
  "sp"
);
const onRenderTriggered = createHook("rtg");
const onRenderTracked = createHook("rtc");
function onErrorCaptured(hook, target = currentInstance) {
  injectHook("ec", hook, target);
}
const COMPONENTS = "components";
const DIRECTIVES = "directives";
function resolveComponent(name, maybeSelfReference) {
  return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
}
const NULL_DYNAMIC_COMPONENT = Symbol.for("v-ndc");
function resolveDynamicComponent(component) {
  if (isString$3(component)) {
    return resolveAsset(COMPONENTS, component, false) || component;
  } else {
    return component || NULL_DYNAMIC_COMPONENT;
  }
}
function resolveDirective(name) {
  return resolveAsset(DIRECTIVES, name);
}
function resolveAsset(type4, name, warnMissing = true, maybeSelfReference = false) {
  const instance = currentRenderingInstance || currentInstance;
  if (instance) {
    const Component = instance.type;
    if (type4 === COMPONENTS) {
      const selfName = getComponentName(
        Component,
        false
      );
      if (selfName && (selfName === name || selfName === camelize(name) || selfName === capitalize$1(camelize(name)))) {
        return Component;
      }
    }
    const res = (
      // local registration
      // check instance[type] first which is resolved for options API
      resolve(instance[type4] || Component[type4], name) || // global registration
      resolve(instance.appContext[type4], name)
    );
    if (!res && maybeSelfReference) {
      return Component;
    }
    return res;
  }
}
function resolve(registry, name) {
  return registry && (registry[name] || registry[camelize(name)] || registry[capitalize$1(camelize(name))]);
}
function renderList(source, renderItem, cache2, index) {
  let ret;
  const cached = cache2 && cache2[index];
  const sourceIsArray = isArray$4(source);
  if (sourceIsArray || isString$3(source)) {
    const sourceIsReactiveArray = sourceIsArray && isReactive(source);
    let needsWrap = false;
    if (sourceIsReactiveArray) {
      needsWrap = !isShallow(source);
      source = shallowReadArray(source);
    }
    ret = new Array(source.length);
    for (let i2 = 0, l2 = source.length; i2 < l2; i2++) {
      ret[i2] = renderItem(
        needsWrap ? toReactive(source[i2]) : source[i2],
        i2,
        void 0,
        cached && cached[i2]
      );
    }
  } else if (typeof source === "number") {
    ret = new Array(source);
    for (let i2 = 0; i2 < source; i2++) {
      ret[i2] = renderItem(i2 + 1, i2, void 0, cached && cached[i2]);
    }
  } else if (isObject$3(source)) {
    if (source[Symbol.iterator]) {
      ret = Array.from(
        source,
        (item, i2) => renderItem(item, i2, void 0, cached && cached[i2])
      );
    } else {
      const keys2 = Object.keys(source);
      ret = new Array(keys2.length);
      for (let i2 = 0, l2 = keys2.length; i2 < l2; i2++) {
        const key = keys2[i2];
        ret[i2] = renderItem(source[key], key, i2, cached && cached[i2]);
      }
    }
  } else {
    ret = [];
  }
  if (cache2) {
    cache2[index] = ret;
  }
  return ret;
}
function createSlots(slots, dynamicSlots) {
  for (let i2 = 0; i2 < dynamicSlots.length; i2++) {
    const slot = dynamicSlots[i2];
    if (isArray$4(slot)) {
      for (let j = 0; j < slot.length; j++) {
        slots[slot[j].name] = slot[j].fn;
      }
    } else if (slot) {
      slots[slot.name] = slot.key ? (...args) => {
        const res = slot.fn(...args);
        if (res)
          res.key = slot.key;
        return res;
      } : slot.fn;
    }
  }
  return slots;
}
function renderSlot(slots, name, props = {}, fallback, noSlotted) {
  if (currentRenderingInstance.ce || currentRenderingInstance.parent && isAsyncWrapper(currentRenderingInstance.parent) && currentRenderingInstance.parent.ce) {
    if (name !== "default")
      props.name = name;
    return openBlock(), createBlock(
      Fragment,
      null,
      [createVNode("slot", props, fallback && fallback())],
      64
    );
  }
  let slot = slots[name];
  if (slot && slot._c) {
    slot._d = false;
  }
  openBlock();
  const validSlotContent = slot && ensureValidVNode(slot(props));
  const slotKey = props.key || // slot content array of a dynamic conditional slot may have a branch
  // key attached in the `createSlots` helper, respect that
  validSlotContent && validSlotContent.key;
  const rendered = createBlock(
    Fragment,
    {
      key: (slotKey && !isSymbol$1(slotKey) ? slotKey : `_${name}`) + // #7256 force differentiate fallback content from actual content
      (!validSlotContent && fallback ? "_fb" : "")
    },
    validSlotContent || (fallback ? fallback() : []),
    validSlotContent && slots._ === 1 ? 64 : -2
  );
  if (!noSlotted && rendered.scopeId) {
    rendered.slotScopeIds = [rendered.scopeId + "-s"];
  }
  if (slot && slot._c) {
    slot._d = true;
  }
  return rendered;
}
function ensureValidVNode(vnodes) {
  return vnodes.some((child) => {
    if (!isVNode$1(child))
      return true;
    if (child.type === Comment)
      return false;
    if (child.type === Fragment && !ensureValidVNode(child.children))
      return false;
    return true;
  }) ? vnodes : null;
}
function toHandlers(obj, preserveCaseIfNecessary) {
  const ret = {};
  for (const key in obj) {
    ret[preserveCaseIfNecessary && /[A-Z]/.test(key) ? `on:${key}` : toHandlerKey(key)] = obj[key];
  }
  return ret;
}
const getPublicInstance = (i2) => {
  if (!i2)
    return null;
  if (isStatefulComponent(i2))
    return getComponentPublicInstance(i2);
  return getPublicInstance(i2.parent);
};
const publicPropertiesMap = (
  // Move PURE marker to new line to workaround compiler discarding it
  // due to type annotation
  /* @__PURE__ */ extend$1(/* @__PURE__ */ Object.create(null), {
    $: (i2) => i2,
    $el: (i2) => i2.vnode.el,
    $data: (i2) => i2.data,
    $props: (i2) => i2.props,
    $attrs: (i2) => i2.attrs,
    $slots: (i2) => i2.slots,
    $refs: (i2) => i2.refs,
    $parent: (i2) => getPublicInstance(i2.parent),
    $root: (i2) => getPublicInstance(i2.root),
    $host: (i2) => i2.ce,
    $emit: (i2) => i2.emit,
    $options: (i2) => resolveMergedOptions(i2),
    $forceUpdate: (i2) => i2.f || (i2.f = () => {
      queueJob(i2.update);
    }),
    $nextTick: (i2) => i2.n || (i2.n = nextTick.bind(i2.proxy)),
    $watch: (i2) => instanceWatch.bind(i2)
  })
);
const hasSetupBinding = (state, key) => state !== EMPTY_OBJ && !state.__isScriptSetup && hasOwn$1(state, key);
const PublicInstanceProxyHandlers = {
  get({ _: instance }, key) {
    if (key === "__v_skip") {
      return true;
    }
    const { ctx, setupState, data, props, accessCache, type: type4, appContext } = instance;
    let normalizedProps;
    if (key[0] !== "$") {
      const n = accessCache[key];
      if (n !== void 0) {
        switch (n) {
          case 1:
            return setupState[key];
          case 2:
            return data[key];
          case 4:
            return ctx[key];
          case 3:
            return props[key];
        }
      } else if (hasSetupBinding(setupState, key)) {
        accessCache[key] = 1;
        return setupState[key];
      } else if (data !== EMPTY_OBJ && hasOwn$1(data, key)) {
        accessCache[key] = 2;
        return data[key];
      } else if (
        // only cache other properties when instance has declared (thus stable)
        // props
        (normalizedProps = instance.propsOptions[0]) && hasOwn$1(normalizedProps, key)
      ) {
        accessCache[key] = 3;
        return props[key];
      } else if (ctx !== EMPTY_OBJ && hasOwn$1(ctx, key)) {
        accessCache[key] = 4;
        return ctx[key];
      } else if (shouldCacheAccess) {
        accessCache[key] = 0;
      }
    }
    const publicGetter = publicPropertiesMap[key];
    let cssModule, globalProperties;
    if (publicGetter) {
      if (key === "$attrs") {
        track(instance.attrs, "get", "");
      }
      return publicGetter(instance);
    } else if (
      // css module (injected by vue-loader)
      (cssModule = type4.__cssModules) && (cssModule = cssModule[key])
    ) {
      return cssModule;
    } else if (ctx !== EMPTY_OBJ && hasOwn$1(ctx, key)) {
      accessCache[key] = 4;
      return ctx[key];
    } else if (
      // global properties
      globalProperties = appContext.config.globalProperties, hasOwn$1(globalProperties, key)
    ) {
      {
        return globalProperties[key];
      }
    } else
      ;
  },
  set({ _: instance }, key, value) {
    const { data, setupState, ctx } = instance;
    if (hasSetupBinding(setupState, key)) {
      setupState[key] = value;
      return true;
    } else if (data !== EMPTY_OBJ && hasOwn$1(data, key)) {
      data[key] = value;
      return true;
    } else if (hasOwn$1(instance.props, key)) {
      return false;
    }
    if (key[0] === "$" && key.slice(1) in instance) {
      return false;
    } else {
      {
        ctx[key] = value;
      }
    }
    return true;
  },
  has({
    _: { data, setupState, accessCache, ctx, appContext, propsOptions }
  }, key) {
    let normalizedProps;
    return !!accessCache[key] || data !== EMPTY_OBJ && hasOwn$1(data, key) || hasSetupBinding(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn$1(normalizedProps, key) || hasOwn$1(ctx, key) || hasOwn$1(publicPropertiesMap, key) || hasOwn$1(appContext.config.globalProperties, key);
  },
  defineProperty(target, key, descriptor) {
    if (descriptor.get != null) {
      target._.accessCache[key] = 0;
    } else if (hasOwn$1(descriptor, "value")) {
      this.set(target, key, descriptor.value, null);
    }
    return Reflect.defineProperty(target, key, descriptor);
  }
};
function useSlots() {
  return getContext().slots;
}
function useAttrs$1() {
  return getContext().attrs;
}
function getContext() {
  const i2 = getCurrentInstance();
  return i2.setupContext || (i2.setupContext = createSetupContext(i2));
}
function normalizePropsOrEmits(props) {
  return isArray$4(props) ? props.reduce(
    (normalized, p2) => (normalized[p2] = null, normalized),
    {}
  ) : props;
}
let shouldCacheAccess = true;
function applyOptions(instance) {
  const options = resolveMergedOptions(instance);
  const publicThis = instance.proxy;
  const ctx = instance.ctx;
  shouldCacheAccess = false;
  if (options.beforeCreate) {
    callHook$1(options.beforeCreate, instance, "bc");
  }
  const {
    // state
    data: dataOptions,
    computed: computedOptions,
    methods,
    watch: watchOptions,
    provide: provideOptions,
    inject: injectOptions,
    // lifecycle
    created,
    beforeMount,
    mounted,
    beforeUpdate,
    updated,
    activated,
    deactivated,
    beforeDestroy,
    beforeUnmount,
    destroyed,
    unmounted,
    render: render2,
    renderTracked,
    renderTriggered,
    errorCaptured,
    serverPrefetch,
    // public API
    expose,
    inheritAttrs,
    // assets
    components,
    directives,
    filters
  } = options;
  const checkDuplicateProperties = null;
  if (injectOptions) {
    resolveInjections(injectOptions, ctx, checkDuplicateProperties);
  }
  if (methods) {
    for (const key in methods) {
      const methodHandler = methods[key];
      if (isFunction$3(methodHandler)) {
        {
          ctx[key] = methodHandler.bind(publicThis);
        }
      }
    }
  }
  if (dataOptions) {
    const data = dataOptions.call(publicThis, publicThis);
    if (!isObject$3(data))
      ;
    else {
      instance.data = reactive(data);
    }
  }
  shouldCacheAccess = true;
  if (computedOptions) {
    for (const key in computedOptions) {
      const opt = computedOptions[key];
      const get2 = isFunction$3(opt) ? opt.bind(publicThis, publicThis) : isFunction$3(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP;
      const set2 = !isFunction$3(opt) && isFunction$3(opt.set) ? opt.set.bind(publicThis) : NOOP;
      const c2 = computed({
        get: get2,
        set: set2
      });
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => c2.value,
        set: (v2) => c2.value = v2
      });
    }
  }
  if (watchOptions) {
    for (const key in watchOptions) {
      createWatcher(watchOptions[key], ctx, publicThis, key);
    }
  }
  if (provideOptions) {
    const provides = isFunction$3(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
    Reflect.ownKeys(provides).forEach((key) => {
      provide(key, provides[key]);
    });
  }
  if (created) {
    callHook$1(created, instance, "c");
  }
  function registerLifecycleHook(register2, hook) {
    if (isArray$4(hook)) {
      hook.forEach((_hook) => register2(_hook.bind(publicThis)));
    } else if (hook) {
      register2(hook.bind(publicThis));
    }
  }
  registerLifecycleHook(onBeforeMount, beforeMount);
  registerLifecycleHook(onMounted, mounted);
  registerLifecycleHook(onBeforeUpdate, beforeUpdate);
  registerLifecycleHook(onUpdated, updated);
  registerLifecycleHook(onActivated, activated);
  registerLifecycleHook(onDeactivated, deactivated);
  registerLifecycleHook(onErrorCaptured, errorCaptured);
  registerLifecycleHook(onRenderTracked, renderTracked);
  registerLifecycleHook(onRenderTriggered, renderTriggered);
  registerLifecycleHook(onBeforeUnmount, beforeUnmount);
  registerLifecycleHook(onUnmounted, unmounted);
  registerLifecycleHook(onServerPrefetch, serverPrefetch);
  if (isArray$4(expose)) {
    if (expose.length) {
      const exposed = instance.exposed || (instance.exposed = {});
      expose.forEach((key) => {
        Object.defineProperty(exposed, key, {
          get: () => publicThis[key],
          set: (val) => publicThis[key] = val
        });
      });
    } else if (!instance.exposed) {
      instance.exposed = {};
    }
  }
  if (render2 && instance.render === NOOP) {
    instance.render = render2;
  }
  if (inheritAttrs != null) {
    instance.inheritAttrs = inheritAttrs;
  }
  if (components)
    instance.components = components;
  if (directives)
    instance.directives = directives;
  if (serverPrefetch) {
    markAsyncBoundary(instance);
  }
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP) {
  if (isArray$4(injectOptions)) {
    injectOptions = normalizeInject(injectOptions);
  }
  for (const key in injectOptions) {
    const opt = injectOptions[key];
    let injected;
    if (isObject$3(opt)) {
      if ("default" in opt) {
        injected = inject(
          opt.from || key,
          opt.default,
          true
        );
      } else {
        injected = inject(opt.from || key);
      }
    } else {
      injected = inject(opt);
    }
    if (isRef(injected)) {
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => injected.value,
        set: (v2) => injected.value = v2
      });
    } else {
      ctx[key] = injected;
    }
  }
}
function callHook$1(hook, instance, type4) {
  callWithAsyncErrorHandling(
    isArray$4(hook) ? hook.map((h2) => h2.bind(instance.proxy)) : hook.bind(instance.proxy),
    instance,
    type4
  );
}
function createWatcher(raw, ctx, publicThis, key) {
  let getter = key.includes(".") ? createPathGetter(publicThis, key) : () => publicThis[key];
  if (isString$3(raw)) {
    const handler2 = ctx[raw];
    if (isFunction$3(handler2)) {
      {
        watch(getter, handler2);
      }
    }
  } else if (isFunction$3(raw)) {
    {
      watch(getter, raw.bind(publicThis));
    }
  } else if (isObject$3(raw)) {
    if (isArray$4(raw)) {
      raw.forEach((r2) => createWatcher(r2, ctx, publicThis, key));
    } else {
      const handler2 = isFunction$3(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
      if (isFunction$3(handler2)) {
        watch(getter, handler2, raw);
      }
    }
  } else
    ;
}
function resolveMergedOptions(instance) {
  const base = instance.type;
  const { mixins, extends: extendsOptions } = base;
  const {
    mixins: globalMixins,
    optionsCache: cache2,
    config: { optionMergeStrategies }
  } = instance.appContext;
  const cached = cache2.get(base);
  let resolved;
  if (cached) {
    resolved = cached;
  } else if (!globalMixins.length && !mixins && !extendsOptions) {
    {
      resolved = base;
    }
  } else {
    resolved = {};
    if (globalMixins.length) {
      globalMixins.forEach(
        (m2) => mergeOptions$1(resolved, m2, optionMergeStrategies, true)
      );
    }
    mergeOptions$1(resolved, base, optionMergeStrategies);
  }
  if (isObject$3(base)) {
    cache2.set(base, resolved);
  }
  return resolved;
}
function mergeOptions$1(to2, from, strats, asMixin = false) {
  const { mixins, extends: extendsOptions } = from;
  if (extendsOptions) {
    mergeOptions$1(to2, extendsOptions, strats, true);
  }
  if (mixins) {
    mixins.forEach(
      (m2) => mergeOptions$1(to2, m2, strats, true)
    );
  }
  for (const key in from) {
    if (asMixin && key === "expose")
      ;
    else {
      const strat = internalOptionMergeStrats[key] || strats && strats[key];
      to2[key] = strat ? strat(to2[key], from[key]) : from[key];
    }
  }
  return to2;
}
const internalOptionMergeStrats = {
  data: mergeDataFn,
  props: mergeEmitsOrPropsOptions,
  emits: mergeEmitsOrPropsOptions,
  // objects
  methods: mergeObjectOptions,
  computed: mergeObjectOptions,
  // lifecycle
  beforeCreate: mergeAsArray,
  created: mergeAsArray,
  beforeMount: mergeAsArray,
  mounted: mergeAsArray,
  beforeUpdate: mergeAsArray,
  updated: mergeAsArray,
  beforeDestroy: mergeAsArray,
  beforeUnmount: mergeAsArray,
  destroyed: mergeAsArray,
  unmounted: mergeAsArray,
  activated: mergeAsArray,
  deactivated: mergeAsArray,
  errorCaptured: mergeAsArray,
  serverPrefetch: mergeAsArray,
  // assets
  components: mergeObjectOptions,
  directives: mergeObjectOptions,
  // watch
  watch: mergeWatchOptions,
  // provide / inject
  provide: mergeDataFn,
  inject: mergeInject
};
function mergeDataFn(to2, from) {
  if (!from) {
    return to2;
  }
  if (!to2) {
    return from;
  }
  return function mergedDataFn() {
    return extend$1(
      isFunction$3(to2) ? to2.call(this, this) : to2,
      isFunction$3(from) ? from.call(this, this) : from
    );
  };
}
function mergeInject(to2, from) {
  return mergeObjectOptions(normalizeInject(to2), normalizeInject(from));
}
function normalizeInject(raw) {
  if (isArray$4(raw)) {
    const res = {};
    for (let i2 = 0; i2 < raw.length; i2++) {
      res[raw[i2]] = raw[i2];
    }
    return res;
  }
  return raw;
}
function mergeAsArray(to2, from) {
  return to2 ? [...new Set([].concat(to2, from))] : from;
}
function mergeObjectOptions(to2, from) {
  return to2 ? extend$1(/* @__PURE__ */ Object.create(null), to2, from) : from;
}
function mergeEmitsOrPropsOptions(to2, from) {
  if (to2) {
    if (isArray$4(to2) && isArray$4(from)) {
      return [.../* @__PURE__ */ new Set([...to2, ...from])];
    }
    return extend$1(
      /* @__PURE__ */ Object.create(null),
      normalizePropsOrEmits(to2),
      normalizePropsOrEmits(from != null ? from : {})
    );
  } else {
    return from;
  }
}
function mergeWatchOptions(to2, from) {
  if (!to2)
    return from;
  if (!from)
    return to2;
  const merged = extend$1(/* @__PURE__ */ Object.create(null), to2);
  for (const key in from) {
    merged[key] = mergeAsArray(to2[key], from[key]);
  }
  return merged;
}
function createAppContext() {
  return {
    app: null,
    config: {
      isNativeTag: NO,
      performance: false,
      globalProperties: {},
      optionMergeStrategies: {},
      errorHandler: void 0,
      warnHandler: void 0,
      compilerOptions: {}
    },
    mixins: [],
    components: {},
    directives: {},
    provides: /* @__PURE__ */ Object.create(null),
    optionsCache: /* @__PURE__ */ new WeakMap(),
    propsCache: /* @__PURE__ */ new WeakMap(),
    emitsCache: /* @__PURE__ */ new WeakMap()
  };
}
let uid$1 = 0;
function createAppAPI(render2, hydrate) {
  return function createApp2(rootComponent, rootProps = null) {
    if (!isFunction$3(rootComponent)) {
      rootComponent = extend$1({}, rootComponent);
    }
    if (rootProps != null && !isObject$3(rootProps)) {
      rootProps = null;
    }
    const context = createAppContext();
    const installedPlugins = /* @__PURE__ */ new WeakSet();
    const pluginCleanupFns = [];
    let isMounted = false;
    const app = context.app = {
      _uid: uid$1++,
      _component: rootComponent,
      _props: rootProps,
      _container: null,
      _context: context,
      _instance: null,
      version,
      get config() {
        return context.config;
      },
      set config(v2) {
      },
      use(plugin, ...options) {
        if (installedPlugins.has(plugin))
          ;
        else if (plugin && isFunction$3(plugin.install)) {
          installedPlugins.add(plugin);
          plugin.install(app, ...options);
        } else if (isFunction$3(plugin)) {
          installedPlugins.add(plugin);
          plugin(app, ...options);
        } else
          ;
        return app;
      },
      mixin(mixin) {
        {
          if (!context.mixins.includes(mixin)) {
            context.mixins.push(mixin);
          }
        }
        return app;
      },
      component(name, component) {
        if (!component) {
          return context.components[name];
        }
        context.components[name] = component;
        return app;
      },
      directive(name, directive) {
        if (!directive) {
          return context.directives[name];
        }
        context.directives[name] = directive;
        return app;
      },
      mount(rootContainer, isHydrate, namespace) {
        if (!isMounted) {
          const vnode = app._ceVNode || createVNode(rootComponent, rootProps);
          vnode.appContext = context;
          if (namespace === true) {
            namespace = "svg";
          } else if (namespace === false) {
            namespace = void 0;
          }
          if (isHydrate && hydrate) {
            hydrate(vnode, rootContainer);
          } else {
            render2(vnode, rootContainer, namespace);
          }
          isMounted = true;
          app._container = rootContainer;
          rootContainer.__vue_app__ = app;
          return getComponentPublicInstance(vnode.component);
        }
      },
      onUnmount(cleanupFn) {
        pluginCleanupFns.push(cleanupFn);
      },
      unmount() {
        if (isMounted) {
          callWithAsyncErrorHandling(
            pluginCleanupFns,
            app._instance,
            16
          );
          render2(null, app._container);
          delete app._container.__vue_app__;
        }
      },
      provide(key, value) {
        context.provides[key] = value;
        return app;
      },
      runWithContext(fn2) {
        const lastApp = currentApp;
        currentApp = app;
        try {
          return fn2();
        } finally {
          currentApp = lastApp;
        }
      }
    };
    return app;
  };
}
let currentApp = null;
function provide(key, value) {
  if (!currentInstance)
    ;
  else {
    let provides = currentInstance.provides;
    const parentProvides = currentInstance.parent && currentInstance.parent.provides;
    if (parentProvides === provides) {
      provides = currentInstance.provides = Object.create(parentProvides);
    }
    provides[key] = value;
  }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
  const instance = currentInstance || currentRenderingInstance;
  if (instance || currentApp) {
    const provides = currentApp ? currentApp._context.provides : instance ? instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides : void 0;
    if (provides && key in provides) {
      return provides[key];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && isFunction$3(defaultValue) ? defaultValue.call(instance && instance.proxy) : defaultValue;
    } else
      ;
  }
}
function hasInjectionContext() {
  return !!(currentInstance || currentRenderingInstance || currentApp);
}
const internalObjectProto = {};
const createInternalObject = () => Object.create(internalObjectProto);
const isInternalObject = (obj) => Object.getPrototypeOf(obj) === internalObjectProto;
function initProps(instance, rawProps, isStateful, isSSR = false) {
  const props = {};
  const attrs = createInternalObject();
  instance.propsDefaults = /* @__PURE__ */ Object.create(null);
  setFullProps(instance, rawProps, props, attrs);
  for (const key in instance.propsOptions[0]) {
    if (!(key in props)) {
      props[key] = void 0;
    }
  }
  if (isStateful) {
    instance.props = isSSR ? props : shallowReactive(props);
  } else {
    if (!instance.type.props) {
      instance.props = attrs;
    } else {
      instance.props = props;
    }
  }
  instance.attrs = attrs;
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
  const {
    props,
    attrs,
    vnode: { patchFlag }
  } = instance;
  const rawCurrentProps = toRaw(props);
  const [options] = instance.propsOptions;
  let hasAttrsChanged = false;
  if (
    // always force full diff in dev
    // - #1942 if hmr is enabled with sfc component
    // - vite#872 non-sfc component used by sfc component
    (optimized || patchFlag > 0) && !(patchFlag & 16)
  ) {
    if (patchFlag & 8) {
      const propsToUpdate = instance.vnode.dynamicProps;
      for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
        let key = propsToUpdate[i2];
        if (isEmitListener(instance.emitsOptions, key)) {
          continue;
        }
        const value = rawProps[key];
        if (options) {
          if (hasOwn$1(attrs, key)) {
            if (value !== attrs[key]) {
              attrs[key] = value;
              hasAttrsChanged = true;
            }
          } else {
            const camelizedKey = camelize(key);
            props[camelizedKey] = resolvePropValue(
              options,
              rawCurrentProps,
              camelizedKey,
              value,
              instance,
              false
            );
          }
        } else {
          if (value !== attrs[key]) {
            attrs[key] = value;
            hasAttrsChanged = true;
          }
        }
      }
    }
  } else {
    if (setFullProps(instance, rawProps, props, attrs)) {
      hasAttrsChanged = true;
    }
    let kebabKey;
    for (const key in rawCurrentProps) {
      if (!rawProps || // for camelCase
      !hasOwn$1(rawProps, key) && // it's possible the original props was passed in as kebab-case
      // and converted to camelCase (#955)
      ((kebabKey = hyphenate(key)) === key || !hasOwn$1(rawProps, kebabKey))) {
        if (options) {
          if (rawPrevProps && // for camelCase
          (rawPrevProps[key] !== void 0 || // for kebab-case
          rawPrevProps[kebabKey] !== void 0)) {
            props[key] = resolvePropValue(
              options,
              rawCurrentProps,
              key,
              void 0,
              instance,
              true
            );
          }
        } else {
          delete props[key];
        }
      }
    }
    if (attrs !== rawCurrentProps) {
      for (const key in attrs) {
        if (!rawProps || !hasOwn$1(rawProps, key) && true) {
          delete attrs[key];
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (hasAttrsChanged) {
    trigger(instance.attrs, "set", "");
  }
}
function setFullProps(instance, rawProps, props, attrs) {
  const [options, needCastKeys] = instance.propsOptions;
  let hasAttrsChanged = false;
  let rawCastValues;
  if (rawProps) {
    for (let key in rawProps) {
      if (isReservedProp(key)) {
        continue;
      }
      const value = rawProps[key];
      let camelKey;
      if (options && hasOwn$1(options, camelKey = camelize(key))) {
        if (!needCastKeys || !needCastKeys.includes(camelKey)) {
          props[camelKey] = value;
        } else {
          (rawCastValues || (rawCastValues = {}))[camelKey] = value;
        }
      } else if (!isEmitListener(instance.emitsOptions, key)) {
        if (!(key in attrs) || value !== attrs[key]) {
          attrs[key] = value;
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (needCastKeys) {
    const rawCurrentProps = toRaw(props);
    const castValues = rawCastValues || EMPTY_OBJ;
    for (let i2 = 0; i2 < needCastKeys.length; i2++) {
      const key = needCastKeys[i2];
      props[key] = resolvePropValue(
        options,
        rawCurrentProps,
        key,
        castValues[key],
        instance,
        !hasOwn$1(castValues, key)
      );
    }
  }
  return hasAttrsChanged;
}
function resolvePropValue(options, props, key, value, instance, isAbsent) {
  const opt = options[key];
  if (opt != null) {
    const hasDefault = hasOwn$1(opt, "default");
    if (hasDefault && value === void 0) {
      const defaultValue = opt.default;
      if (opt.type !== Function && !opt.skipFactory && isFunction$3(defaultValue)) {
        const { propsDefaults } = instance;
        if (key in propsDefaults) {
          value = propsDefaults[key];
        } else {
          const reset = setCurrentInstance(instance);
          value = propsDefaults[key] = defaultValue.call(
            null,
            props
          );
          reset();
        }
      } else {
        value = defaultValue;
      }
      if (instance.ce) {
        instance.ce._setProp(key, value);
      }
    }
    if (opt[
      0
      /* shouldCast */
    ]) {
      if (isAbsent && !hasDefault) {
        value = false;
      } else if (opt[
        1
        /* shouldCastTrue */
      ] && (value === "" || value === hyphenate(key))) {
        value = true;
      }
    }
  }
  return value;
}
const mixinPropsCache = /* @__PURE__ */ new WeakMap();
function normalizePropsOptions(comp, appContext, asMixin = false) {
  const cache2 = asMixin ? mixinPropsCache : appContext.propsCache;
  const cached = cache2.get(comp);
  if (cached) {
    return cached;
  }
  const raw = comp.props;
  const normalized = {};
  const needCastKeys = [];
  let hasExtends = false;
  if (!isFunction$3(comp)) {
    const extendProps = (raw2) => {
      hasExtends = true;
      const [props, keys2] = normalizePropsOptions(raw2, appContext, true);
      extend$1(normalized, props);
      if (keys2)
        needCastKeys.push(...keys2);
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendProps);
    }
    if (comp.extends) {
      extendProps(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendProps);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject$3(comp)) {
      cache2.set(comp, EMPTY_ARR);
    }
    return EMPTY_ARR;
  }
  if (isArray$4(raw)) {
    for (let i2 = 0; i2 < raw.length; i2++) {
      const normalizedKey = camelize(raw[i2]);
      if (validatePropName(normalizedKey)) {
        normalized[normalizedKey] = EMPTY_OBJ;
      }
    }
  } else if (raw) {
    for (const key in raw) {
      const normalizedKey = camelize(key);
      if (validatePropName(normalizedKey)) {
        const opt = raw[key];
        const prop = normalized[normalizedKey] = isArray$4(opt) || isFunction$3(opt) ? { type: opt } : extend$1({}, opt);
        const propType = prop.type;
        let shouldCast = false;
        let shouldCastTrue = true;
        if (isArray$4(propType)) {
          for (let index = 0; index < propType.length; ++index) {
            const type4 = propType[index];
            const typeName = isFunction$3(type4) && type4.name;
            if (typeName === "Boolean") {
              shouldCast = true;
              break;
            } else if (typeName === "String") {
              shouldCastTrue = false;
            }
          }
        } else {
          shouldCast = isFunction$3(propType) && propType.name === "Boolean";
        }
        prop[
          0
          /* shouldCast */
        ] = shouldCast;
        prop[
          1
          /* shouldCastTrue */
        ] = shouldCastTrue;
        if (shouldCast || hasOwn$1(prop, "default")) {
          needCastKeys.push(normalizedKey);
        }
      }
    }
  }
  const res = [normalized, needCastKeys];
  if (isObject$3(comp)) {
    cache2.set(comp, res);
  }
  return res;
}
function validatePropName(key) {
  if (key[0] !== "$" && !isReservedProp(key)) {
    return true;
  }
  return false;
}
const isInternalKey = (key) => key[0] === "_" || key === "$stable";
const normalizeSlotValue = (value) => isArray$4(value) ? value.map(normalizeVNode) : [normalizeVNode(value)];
const normalizeSlot$1 = (key, rawSlot, ctx) => {
  if (rawSlot._n) {
    return rawSlot;
  }
  const normalized = withCtx((...args) => {
    if (false)
      ;
    return normalizeSlotValue(rawSlot(...args));
  }, ctx);
  normalized._c = false;
  return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance) => {
  const ctx = rawSlots._ctx;
  for (const key in rawSlots) {
    if (isInternalKey(key))
      continue;
    const value = rawSlots[key];
    if (isFunction$3(value)) {
      slots[key] = normalizeSlot$1(key, value, ctx);
    } else if (value != null) {
      const normalized = normalizeSlotValue(value);
      slots[key] = () => normalized;
    }
  }
};
const normalizeVNodeSlots = (instance, children) => {
  const normalized = normalizeSlotValue(children);
  instance.slots.default = () => normalized;
};
const assignSlots = (slots, children, optimized) => {
  for (const key in children) {
    if (optimized || key !== "_") {
      slots[key] = children[key];
    }
  }
};
const initSlots = (instance, children, optimized) => {
  const slots = instance.slots = createInternalObject();
  if (instance.vnode.shapeFlag & 32) {
    const type4 = children._;
    if (type4) {
      assignSlots(slots, children, optimized);
      if (optimized) {
        def(slots, "_", type4, true);
      }
    } else {
      normalizeObjectSlots(children, slots);
    }
  } else if (children) {
    normalizeVNodeSlots(instance, children);
  }
};
const updateSlots = (instance, children, optimized) => {
  const { vnode, slots } = instance;
  let needDeletionCheck = true;
  let deletionComparisonTarget = EMPTY_OBJ;
  if (vnode.shapeFlag & 32) {
    const type4 = children._;
    if (type4) {
      if (optimized && type4 === 1) {
        needDeletionCheck = false;
      } else {
        assignSlots(slots, children, optimized);
      }
    } else {
      needDeletionCheck = !children.$stable;
      normalizeObjectSlots(children, slots);
    }
    deletionComparisonTarget = children;
  } else if (children) {
    normalizeVNodeSlots(instance, children);
    deletionComparisonTarget = { default: 1 };
  }
  if (needDeletionCheck) {
    for (const key in slots) {
      if (!isInternalKey(key) && deletionComparisonTarget[key] == null) {
        delete slots[key];
      }
    }
  }
};
const queuePostRenderEffect = queueEffectWithSuspense;
function createRenderer(options) {
  return baseCreateRenderer(options);
}
function baseCreateRenderer(options, createHydrationFns) {
  const target = getGlobalThis$1();
  target.__VUE__ = true;
  const {
    insert: hostInsert,
    remove: hostRemove,
    patchProp: hostPatchProp,
    createElement: hostCreateElement,
    createText: hostCreateText,
    createComment: hostCreateComment,
    setText: hostSetText,
    setElementText: hostSetElementText,
    parentNode: hostParentNode,
    nextSibling: hostNextSibling,
    setScopeId: hostSetScopeId = NOOP,
    insertStaticContent: hostInsertStaticContent
  } = options;
  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, namespace = void 0, slotScopeIds = null, optimized = !!n2.dynamicChildren) => {
    if (n1 === n2) {
      return;
    }
    if (n1 && !isSameVNodeType(n1, n2)) {
      anchor = getNextHostNode(n1);
      unmount(n1, parentComponent, parentSuspense, true);
      n1 = null;
    }
    if (n2.patchFlag === -2) {
      optimized = false;
      n2.dynamicChildren = null;
    }
    const { type: type4, ref: ref3, shapeFlag } = n2;
    switch (type4) {
      case Text:
        processText(n1, n2, container, anchor);
        break;
      case Comment:
        processCommentNode(n1, n2, container, anchor);
        break;
      case Static:
        if (n1 == null) {
          mountStaticNode(n2, container, anchor, namespace);
        }
        break;
      case Fragment:
        processFragment(
          n1,
          n2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
        break;
      default:
        if (shapeFlag & 1) {
          processElement(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else if (shapeFlag & 6) {
          processComponent(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else if (shapeFlag & 64) {
          type4.process(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized,
            internals
          );
        } else if (shapeFlag & 128) {
          type4.process(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized,
            internals
          );
        } else
          ;
    }
    if (ref3 != null && parentComponent) {
      setRef(ref3, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    }
  };
  const processText = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(
        n2.el = hostCreateText(n2.children),
        container,
        anchor
      );
    } else {
      const el2 = n2.el = n1.el;
      if (n2.children !== n1.children) {
        hostSetText(el2, n2.children);
      }
    }
  };
  const processCommentNode = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(
        n2.el = hostCreateComment(n2.children || ""),
        container,
        anchor
      );
    } else {
      n2.el = n1.el;
    }
  };
  const mountStaticNode = (n2, container, anchor, namespace) => {
    [n2.el, n2.anchor] = hostInsertStaticContent(
      n2.children,
      container,
      anchor,
      namespace,
      n2.el,
      n2.anchor
    );
  };
  const moveStaticNode = ({ el: el2, anchor }, container, nextSibling) => {
    let next;
    while (el2 && el2 !== anchor) {
      next = hostNextSibling(el2);
      hostInsert(el2, container, nextSibling);
      el2 = next;
    }
    hostInsert(anchor, container, nextSibling);
  };
  const removeStaticNode = ({ el: el2, anchor }) => {
    let next;
    while (el2 && el2 !== anchor) {
      next = hostNextSibling(el2);
      hostRemove(el2);
      el2 = next;
    }
    hostRemove(anchor);
  };
  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    if (n2.type === "svg") {
      namespace = "svg";
    } else if (n2.type === "math") {
      namespace = "mathml";
    }
    if (n1 == null) {
      mountElement(
        n2,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    } else {
      patchElement(
        n1,
        n2,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    }
  };
  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    let el2;
    let vnodeHook;
    const { props, shapeFlag, transition, dirs } = vnode;
    el2 = vnode.el = hostCreateElement(
      vnode.type,
      namespace,
      props && props.is,
      props
    );
    if (shapeFlag & 8) {
      hostSetElementText(el2, vnode.children);
    } else if (shapeFlag & 16) {
      mountChildren(
        vnode.children,
        el2,
        null,
        parentComponent,
        parentSuspense,
        resolveChildrenNamespace(vnode, namespace),
        slotScopeIds,
        optimized
      );
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "created");
    }
    setScopeId(el2, vnode, vnode.scopeId, slotScopeIds, parentComponent);
    if (props) {
      for (const key in props) {
        if (key !== "value" && !isReservedProp(key)) {
          hostPatchProp(el2, key, null, props[key], namespace, parentComponent);
        }
      }
      if ("value" in props) {
        hostPatchProp(el2, "value", null, props.value, namespace);
      }
      if (vnodeHook = props.onVnodeBeforeMount) {
        invokeVNodeHook(vnodeHook, parentComponent, vnode);
      }
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
    }
    const needCallTransitionHooks = needTransition(parentSuspense, transition);
    if (needCallTransitionHooks) {
      transition.beforeEnter(el2);
    }
    hostInsert(el2, container, anchor);
    if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        needCallTransitionHooks && transition.enter(el2);
        dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
      }, parentSuspense);
    }
  };
  const setScopeId = (el2, vnode, scopeId, slotScopeIds, parentComponent) => {
    if (scopeId) {
      hostSetScopeId(el2, scopeId);
    }
    if (slotScopeIds) {
      for (let i2 = 0; i2 < slotScopeIds.length; i2++) {
        hostSetScopeId(el2, slotScopeIds[i2]);
      }
    }
    if (parentComponent) {
      let subTree = parentComponent.subTree;
      if (vnode === subTree || isSuspense(subTree.type) && (subTree.ssContent === vnode || subTree.ssFallback === vnode)) {
        const parentVNode = parentComponent.vnode;
        setScopeId(
          el2,
          parentVNode,
          parentVNode.scopeId,
          parentVNode.slotScopeIds,
          parentComponent.parent
        );
      }
    }
  };
  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, start = 0) => {
    for (let i2 = start; i2 < children.length; i2++) {
      const child = children[i2] = optimized ? cloneIfMounted(children[i2]) : normalizeVNode(children[i2]);
      patch(
        null,
        child,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    }
  };
  const patchElement = (n1, n2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    const el2 = n2.el = n1.el;
    let { patchFlag, dynamicChildren, dirs } = n2;
    patchFlag |= n1.patchFlag & 16;
    const oldProps = n1.props || EMPTY_OBJ;
    const newProps = n2.props || EMPTY_OBJ;
    let vnodeHook;
    parentComponent && toggleRecurse(parentComponent, false);
    if (vnodeHook = newProps.onVnodeBeforeUpdate) {
      invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
    }
    if (dirs) {
      invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
    }
    parentComponent && toggleRecurse(parentComponent, true);
    if (oldProps.innerHTML && newProps.innerHTML == null || oldProps.textContent && newProps.textContent == null) {
      hostSetElementText(el2, "");
    }
    if (dynamicChildren) {
      patchBlockChildren(
        n1.dynamicChildren,
        dynamicChildren,
        el2,
        parentComponent,
        parentSuspense,
        resolveChildrenNamespace(n2, namespace),
        slotScopeIds
      );
    } else if (!optimized) {
      patchChildren(
        n1,
        n2,
        el2,
        null,
        parentComponent,
        parentSuspense,
        resolveChildrenNamespace(n2, namespace),
        slotScopeIds,
        false
      );
    }
    if (patchFlag > 0) {
      if (patchFlag & 16) {
        patchProps(el2, oldProps, newProps, parentComponent, namespace);
      } else {
        if (patchFlag & 2) {
          if (oldProps.class !== newProps.class) {
            hostPatchProp(el2, "class", null, newProps.class, namespace);
          }
        }
        if (patchFlag & 4) {
          hostPatchProp(el2, "style", oldProps.style, newProps.style, namespace);
        }
        if (patchFlag & 8) {
          const propsToUpdate = n2.dynamicProps;
          for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
            const key = propsToUpdate[i2];
            const prev = oldProps[key];
            const next = newProps[key];
            if (next !== prev || key === "value") {
              hostPatchProp(el2, key, prev, next, namespace, parentComponent);
            }
          }
        }
      }
      if (patchFlag & 1) {
        if (n1.children !== n2.children) {
          hostSetElementText(el2, n2.children);
        }
      }
    } else if (!optimized && dynamicChildren == null) {
      patchProps(el2, oldProps, newProps, parentComponent, namespace);
    }
    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
      }, parentSuspense);
    }
  };
  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, namespace, slotScopeIds) => {
    for (let i2 = 0; i2 < newChildren.length; i2++) {
      const oldVNode = oldChildren[i2];
      const newVNode = newChildren[i2];
      const container = (
        // oldVNode may be an errored async setup() component inside Suspense
        // which will not have a mounted element
        oldVNode.el && // - In the case of a Fragment, we need to provide the actual parent
        // of the Fragment itself so it can move its children.
        (oldVNode.type === Fragment || // - In the case of different nodes, there is going to be a replacement
        // which also requires the correct parent container
        !isSameVNodeType(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
        oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : (
          // In other cases, the parent container is not actually used so we
          // just pass the block element here to avoid a DOM parentNode call.
          fallbackContainer
        )
      );
      patch(
        oldVNode,
        newVNode,
        container,
        null,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        true
      );
    }
  };
  const patchProps = (el2, oldProps, newProps, parentComponent, namespace) => {
    if (oldProps !== newProps) {
      if (oldProps !== EMPTY_OBJ) {
        for (const key in oldProps) {
          if (!isReservedProp(key) && !(key in newProps)) {
            hostPatchProp(
              el2,
              key,
              oldProps[key],
              null,
              namespace,
              parentComponent
            );
          }
        }
      }
      for (const key in newProps) {
        if (isReservedProp(key))
          continue;
        const next = newProps[key];
        const prev = oldProps[key];
        if (next !== prev && key !== "value") {
          hostPatchProp(el2, key, prev, next, namespace, parentComponent);
        }
      }
      if ("value" in newProps) {
        hostPatchProp(el2, "value", oldProps.value, newProps.value, namespace);
      }
    }
  };
  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
    let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    if (n1 == null) {
      hostInsert(fragmentStartAnchor, container, anchor);
      hostInsert(fragmentEndAnchor, container, anchor);
      mountChildren(
        // #10007
        // such fragment like `<></>` will be compiled into
        // a fragment which doesn't have a children.
        // In this case fallback to an empty array
        n2.children || [],
        container,
        fragmentEndAnchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    } else {
      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
      // of renderSlot() with no valid children
      n1.dynamicChildren) {
        patchBlockChildren(
          n1.dynamicChildren,
          dynamicChildren,
          container,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds
        );
        if (
          // #2080 if the stable fragment has a key, it's a <template v-for> that may
          //  get moved around. Make sure all root level vnodes inherit el.
          // #2134 or if it's a component root, it may also get moved around
          // as the component is being moved.
          n2.key != null || parentComponent && n2 === parentComponent.subTree
        ) {
          traverseStaticChildren(
            n1,
            n2,
            true
            /* shallow */
          );
        }
      } else {
        patchChildren(
          n1,
          n2,
          container,
          fragmentEndAnchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      }
    }
  };
  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    n2.slotScopeIds = slotScopeIds;
    if (n1 == null) {
      if (n2.shapeFlag & 512) {
        parentComponent.ctx.activate(
          n2,
          container,
          anchor,
          namespace,
          optimized
        );
      } else {
        mountComponent(
          n2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          optimized
        );
      }
    } else {
      updateComponent(n1, n2, optimized);
    }
  };
  const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, namespace, optimized) => {
    const instance = initialVNode.component = createComponentInstance(
      initialVNode,
      parentComponent,
      parentSuspense
    );
    if (isKeepAlive(initialVNode)) {
      instance.ctx.renderer = internals;
    }
    {
      setupComponent(instance, false, optimized);
    }
    if (instance.asyncDep) {
      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect, optimized);
      if (!initialVNode.el) {
        const placeholder = instance.subTree = createVNode(Comment);
        processCommentNode(null, placeholder, container, anchor);
      }
    } else {
      setupRenderEffect(
        instance,
        initialVNode,
        container,
        anchor,
        parentSuspense,
        namespace,
        optimized
      );
    }
  };
  const updateComponent = (n1, n2, optimized) => {
    const instance = n2.component = n1.component;
    if (shouldUpdateComponent(n1, n2, optimized)) {
      if (instance.asyncDep && !instance.asyncResolved) {
        updateComponentPreRender(instance, n2, optimized);
        return;
      } else {
        instance.next = n2;
        instance.update();
      }
    } else {
      n2.el = n1.el;
      instance.vnode = n2;
    }
  };
  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, namespace, optimized) => {
    const componentUpdateFn = () => {
      if (!instance.isMounted) {
        let vnodeHook;
        const { el: el2, props } = initialVNode;
        const { bm: bm2, m: m2, parent, root: root2, type: type4 } = instance;
        const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
        toggleRecurse(instance, false);
        if (bm2) {
          invokeArrayFns(bm2);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {
          invokeVNodeHook(vnodeHook, parent, initialVNode);
        }
        toggleRecurse(instance, true);
        if (el2 && hydrateNode) {
          const hydrateSubTree = () => {
            instance.subTree = renderComponentRoot(instance);
            hydrateNode(
              el2,
              instance.subTree,
              instance,
              parentSuspense,
              null
            );
          };
          if (isAsyncWrapperVNode && type4.__asyncHydrate) {
            type4.__asyncHydrate(
              el2,
              instance,
              hydrateSubTree
            );
          } else {
            hydrateSubTree();
          }
        } else {
          if (root2.ce) {
            root2.ce._injectChildStyle(type4);
          }
          const subTree = instance.subTree = renderComponentRoot(instance);
          patch(
            null,
            subTree,
            container,
            anchor,
            instance,
            parentSuspense,
            namespace
          );
          initialVNode.el = subTree.el;
        }
        if (m2) {
          queuePostRenderEffect(m2, parentSuspense);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
          const scopedInitialVNode = initialVNode;
          queuePostRenderEffect(
            () => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode),
            parentSuspense
          );
        }
        if (initialVNode.shapeFlag & 256 || parent && isAsyncWrapper(parent.vnode) && parent.vnode.shapeFlag & 256) {
          instance.a && queuePostRenderEffect(instance.a, parentSuspense);
        }
        instance.isMounted = true;
        initialVNode = container = anchor = null;
      } else {
        let { next, bu: bu2, u: u2, parent, vnode } = instance;
        {
          const nonHydratedAsyncRoot = locateNonHydratedAsyncRoot(instance);
          if (nonHydratedAsyncRoot) {
            if (next) {
              next.el = vnode.el;
              updateComponentPreRender(instance, next, optimized);
            }
            nonHydratedAsyncRoot.asyncDep.then(() => {
              if (!instance.isUnmounted) {
                componentUpdateFn();
              }
            });
            return;
          }
        }
        let originNext = next;
        let vnodeHook;
        toggleRecurse(instance, false);
        if (next) {
          next.el = vnode.el;
          updateComponentPreRender(instance, next, optimized);
        } else {
          next = vnode;
        }
        if (bu2) {
          invokeArrayFns(bu2);
        }
        if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
          invokeVNodeHook(vnodeHook, parent, next, vnode);
        }
        toggleRecurse(instance, true);
        const nextTree = renderComponentRoot(instance);
        const prevTree = instance.subTree;
        instance.subTree = nextTree;
        patch(
          prevTree,
          nextTree,
          // parent may have changed if it's in a teleport
          hostParentNode(prevTree.el),
          // anchor may have changed if it's in a fragment
          getNextHostNode(prevTree),
          instance,
          parentSuspense,
          namespace
        );
        next.el = nextTree.el;
        if (originNext === null) {
          updateHOCHostEl(instance, nextTree.el);
        }
        if (u2) {
          queuePostRenderEffect(u2, parentSuspense);
        }
        if (vnodeHook = next.props && next.props.onVnodeUpdated) {
          queuePostRenderEffect(
            () => invokeVNodeHook(vnodeHook, parent, next, vnode),
            parentSuspense
          );
        }
      }
    };
    instance.scope.on();
    const effect2 = instance.effect = new ReactiveEffect(componentUpdateFn);
    instance.scope.off();
    const update = instance.update = effect2.run.bind(effect2);
    const job = instance.job = effect2.runIfDirty.bind(effect2);
    job.i = instance;
    job.id = instance.uid;
    effect2.scheduler = () => queueJob(job);
    toggleRecurse(instance, true);
    update();
  };
  const updateComponentPreRender = (instance, nextVNode, optimized) => {
    nextVNode.component = instance;
    const prevProps = instance.vnode.props;
    instance.vnode = nextVNode;
    instance.next = null;
    updateProps(instance, nextVNode.props, prevProps, optimized);
    updateSlots(instance, nextVNode.children, optimized);
    pauseTracking();
    flushPreFlushCbs(instance);
    resetTracking();
  };
  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized = false) => {
    const c1 = n1 && n1.children;
    const prevShapeFlag = n1 ? n1.shapeFlag : 0;
    const c2 = n2.children;
    const { patchFlag, shapeFlag } = n2;
    if (patchFlag > 0) {
      if (patchFlag & 128) {
        patchKeyedChildren(
          c1,
          c2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
        return;
      } else if (patchFlag & 256) {
        patchUnkeyedChildren(
          c1,
          c2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
        return;
      }
    }
    if (shapeFlag & 8) {
      if (prevShapeFlag & 16) {
        unmountChildren(c1, parentComponent, parentSuspense);
      }
      if (c2 !== c1) {
        hostSetElementText(container, c2);
      }
    } else {
      if (prevShapeFlag & 16) {
        if (shapeFlag & 16) {
          patchKeyedChildren(
            c1,
            c2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else {
          unmountChildren(c1, parentComponent, parentSuspense, true);
        }
      } else {
        if (prevShapeFlag & 8) {
          hostSetElementText(container, "");
        }
        if (shapeFlag & 16) {
          mountChildren(
            c2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        }
      }
    }
  };
  const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    c1 = c1 || EMPTY_ARR;
    c2 = c2 || EMPTY_ARR;
    const oldLength = c1.length;
    const newLength = c2.length;
    const commonLength = Math.min(oldLength, newLength);
    let i2;
    for (i2 = 0; i2 < commonLength; i2++) {
      const nextChild = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
      patch(
        c1[i2],
        nextChild,
        container,
        null,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    }
    if (oldLength > newLength) {
      unmountChildren(
        c1,
        parentComponent,
        parentSuspense,
        true,
        false,
        commonLength
      );
    } else {
      mountChildren(
        c2,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized,
        commonLength
      );
    }
  };
  const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    let i2 = 0;
    const l2 = c2.length;
    let e1 = c1.length - 1;
    let e2 = l2 - 1;
    while (i2 <= e1 && i2 <= e2) {
      const n1 = c1[i2];
      const n2 = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
      if (isSameVNodeType(n1, n2)) {
        patch(
          n1,
          n2,
          container,
          null,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      } else {
        break;
      }
      i2++;
    }
    while (i2 <= e1 && i2 <= e2) {
      const n1 = c1[e1];
      const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
      if (isSameVNodeType(n1, n2)) {
        patch(
          n1,
          n2,
          container,
          null,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      } else {
        break;
      }
      e1--;
      e2--;
    }
    if (i2 > e1) {
      if (i2 <= e2) {
        const nextPos = e2 + 1;
        const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
        while (i2 <= e2) {
          patch(
            null,
            c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]),
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
          i2++;
        }
      }
    } else if (i2 > e2) {
      while (i2 <= e1) {
        unmount(c1[i2], parentComponent, parentSuspense, true);
        i2++;
      }
    } else {
      const s1 = i2;
      const s2 = i2;
      const keyToNewIndexMap = /* @__PURE__ */ new Map();
      for (i2 = s2; i2 <= e2; i2++) {
        const nextChild = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
        if (nextChild.key != null) {
          keyToNewIndexMap.set(nextChild.key, i2);
        }
      }
      let j;
      let patched = 0;
      const toBePatched = e2 - s2 + 1;
      let moved = false;
      let maxNewIndexSoFar = 0;
      const newIndexToOldIndexMap = new Array(toBePatched);
      for (i2 = 0; i2 < toBePatched; i2++)
        newIndexToOldIndexMap[i2] = 0;
      for (i2 = s1; i2 <= e1; i2++) {
        const prevChild = c1[i2];
        if (patched >= toBePatched) {
          unmount(prevChild, parentComponent, parentSuspense, true);
          continue;
        }
        let newIndex;
        if (prevChild.key != null) {
          newIndex = keyToNewIndexMap.get(prevChild.key);
        } else {
          for (j = s2; j <= e2; j++) {
            if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {
              newIndex = j;
              break;
            }
          }
        }
        if (newIndex === void 0) {
          unmount(prevChild, parentComponent, parentSuspense, true);
        } else {
          newIndexToOldIndexMap[newIndex - s2] = i2 + 1;
          if (newIndex >= maxNewIndexSoFar) {
            maxNewIndexSoFar = newIndex;
          } else {
            moved = true;
          }
          patch(
            prevChild,
            c2[newIndex],
            container,
            null,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
          patched++;
        }
      }
      const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : EMPTY_ARR;
      j = increasingNewIndexSequence.length - 1;
      for (i2 = toBePatched - 1; i2 >= 0; i2--) {
        const nextIndex = s2 + i2;
        const nextChild = c2[nextIndex];
        const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
        if (newIndexToOldIndexMap[i2] === 0) {
          patch(
            null,
            nextChild,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else if (moved) {
          if (j < 0 || i2 !== increasingNewIndexSequence[j]) {
            move(nextChild, container, anchor, 2);
          } else {
            j--;
          }
        }
      }
    }
  };
  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
    const { el: el2, type: type4, transition, children, shapeFlag } = vnode;
    if (shapeFlag & 6) {
      move(vnode.component.subTree, container, anchor, moveType);
      return;
    }
    if (shapeFlag & 128) {
      vnode.suspense.move(container, anchor, moveType);
      return;
    }
    if (shapeFlag & 64) {
      type4.move(vnode, container, anchor, internals);
      return;
    }
    if (type4 === Fragment) {
      hostInsert(el2, container, anchor);
      for (let i2 = 0; i2 < children.length; i2++) {
        move(children[i2], container, anchor, moveType);
      }
      hostInsert(vnode.anchor, container, anchor);
      return;
    }
    if (type4 === Static) {
      moveStaticNode(vnode, container, anchor);
      return;
    }
    const needTransition2 = moveType !== 2 && shapeFlag & 1 && transition;
    if (needTransition2) {
      if (moveType === 0) {
        transition.beforeEnter(el2);
        hostInsert(el2, container, anchor);
        queuePostRenderEffect(() => transition.enter(el2), parentSuspense);
      } else {
        const { leave, delayLeave, afterLeave } = transition;
        const remove22 = () => hostInsert(el2, container, anchor);
        const performLeave = () => {
          leave(el2, () => {
            remove22();
            afterLeave && afterLeave();
          });
        };
        if (delayLeave) {
          delayLeave(el2, remove22, performLeave);
        } else {
          performLeave();
        }
      }
    } else {
      hostInsert(el2, container, anchor);
    }
  };
  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
    const {
      type: type4,
      props,
      ref: ref3,
      children,
      dynamicChildren,
      shapeFlag,
      patchFlag,
      dirs,
      cacheIndex
    } = vnode;
    if (patchFlag === -2) {
      optimized = false;
    }
    if (ref3 != null) {
      setRef(ref3, null, parentSuspense, vnode, true);
    }
    if (cacheIndex != null) {
      parentComponent.renderCache[cacheIndex] = void 0;
    }
    if (shapeFlag & 256) {
      parentComponent.ctx.deactivate(vnode);
      return;
    }
    const shouldInvokeDirs = shapeFlag & 1 && dirs;
    const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
    let vnodeHook;
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {
      invokeVNodeHook(vnodeHook, parentComponent, vnode);
    }
    if (shapeFlag & 6) {
      unmountComponent(vnode.component, parentSuspense, doRemove);
    } else {
      if (shapeFlag & 128) {
        vnode.suspense.unmount(parentSuspense, doRemove);
        return;
      }
      if (shouldInvokeDirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
      }
      if (shapeFlag & 64) {
        vnode.type.remove(
          vnode,
          parentComponent,
          parentSuspense,
          internals,
          doRemove
        );
      } else if (dynamicChildren && // #5154
      // when v-once is used inside a block, setBlockTracking(-1) marks the
      // parent block with hasOnce: true
      // so that it doesn't take the fast path during unmount - otherwise
      // components nested in v-once are never unmounted.
      !dynamicChildren.hasOnce && // #1153: fast path should not be taken for non-stable (v-for) fragments
      (type4 !== Fragment || patchFlag > 0 && patchFlag & 64)) {
        unmountChildren(
          dynamicChildren,
          parentComponent,
          parentSuspense,
          false,
          true
        );
      } else if (type4 === Fragment && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
        unmountChildren(children, parentComponent, parentSuspense);
      }
      if (doRemove) {
        remove2(vnode);
      }
    }
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
      }, parentSuspense);
    }
  };
  const remove2 = (vnode) => {
    const { type: type4, el: el2, anchor, transition } = vnode;
    if (type4 === Fragment) {
      {
        removeFragment(el2, anchor);
      }
      return;
    }
    if (type4 === Static) {
      removeStaticNode(vnode);
      return;
    }
    const performRemove = () => {
      hostRemove(el2);
      if (transition && !transition.persisted && transition.afterLeave) {
        transition.afterLeave();
      }
    };
    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
      const { leave, delayLeave } = transition;
      const performLeave = () => leave(el2, performRemove);
      if (delayLeave) {
        delayLeave(vnode.el, performRemove, performLeave);
      } else {
        performLeave();
      }
    } else {
      performRemove();
    }
  };
  const removeFragment = (cur, end) => {
    let next;
    while (cur !== end) {
      next = hostNextSibling(cur);
      hostRemove(cur);
      cur = next;
    }
    hostRemove(end);
  };
  const unmountComponent = (instance, parentSuspense, doRemove) => {
    const { bum, scope, job, subTree, um: um2, m: m2, a: a2 } = instance;
    invalidateMount(m2);
    invalidateMount(a2);
    if (bum) {
      invokeArrayFns(bum);
    }
    scope.stop();
    if (job) {
      job.flags |= 8;
      unmount(subTree, instance, parentSuspense, doRemove);
    }
    if (um2) {
      queuePostRenderEffect(um2, parentSuspense);
    }
    queuePostRenderEffect(() => {
      instance.isUnmounted = true;
    }, parentSuspense);
    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
      parentSuspense.deps--;
      if (parentSuspense.deps === 0) {
        parentSuspense.resolve();
      }
    }
  };
  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
    for (let i2 = start; i2 < children.length; i2++) {
      unmount(children[i2], parentComponent, parentSuspense, doRemove, optimized);
    }
  };
  const getNextHostNode = (vnode) => {
    if (vnode.shapeFlag & 6) {
      return getNextHostNode(vnode.component.subTree);
    }
    if (vnode.shapeFlag & 128) {
      return vnode.suspense.next();
    }
    const el2 = hostNextSibling(vnode.anchor || vnode.el);
    const teleportEnd = el2 && el2[TeleportEndKey];
    return teleportEnd ? hostNextSibling(teleportEnd) : el2;
  };
  let isFlushing = false;
  const render2 = (vnode, container, namespace) => {
    if (vnode == null) {
      if (container._vnode) {
        unmount(container._vnode, null, null, true);
      }
    } else {
      patch(
        container._vnode || null,
        vnode,
        container,
        null,
        null,
        null,
        namespace
      );
    }
    container._vnode = vnode;
    if (!isFlushing) {
      isFlushing = true;
      flushPreFlushCbs();
      flushPostFlushCbs();
      isFlushing = false;
    }
  };
  const internals = {
    p: patch,
    um: unmount,
    m: move,
    r: remove2,
    mt: mountComponent,
    mc: mountChildren,
    pc: patchChildren,
    pbc: patchBlockChildren,
    n: getNextHostNode,
    o: options
  };
  let hydrate;
  let hydrateNode;
  if (createHydrationFns) {
    [hydrate, hydrateNode] = createHydrationFns(
      internals
    );
  }
  return {
    render: render2,
    hydrate,
    createApp: createAppAPI(render2, hydrate)
  };
}
function resolveChildrenNamespace({ type: type4, props }, currentNamespace) {
  return currentNamespace === "svg" && type4 === "foreignObject" || currentNamespace === "mathml" && type4 === "annotation-xml" && props && props.encoding && props.encoding.includes("html") ? void 0 : currentNamespace;
}
function toggleRecurse({ effect: effect2, job }, allowed) {
  if (allowed) {
    effect2.flags |= 32;
    job.flags |= 4;
  } else {
    effect2.flags &= ~32;
    job.flags &= ~4;
  }
}
function needTransition(parentSuspense, transition) {
  return (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
}
function traverseStaticChildren(n1, n2, shallow = false) {
  const ch1 = n1.children;
  const ch2 = n2.children;
  if (isArray$4(ch1) && isArray$4(ch2)) {
    for (let i2 = 0; i2 < ch1.length; i2++) {
      const c1 = ch1[i2];
      let c2 = ch2[i2];
      if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
        if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
          c2 = ch2[i2] = cloneIfMounted(ch2[i2]);
          c2.el = c1.el;
        }
        if (!shallow && c2.patchFlag !== -2)
          traverseStaticChildren(c1, c2);
      }
      if (c2.type === Text) {
        c2.el = c1.el;
      }
    }
  }
}
function getSequence(arr) {
  const p2 = arr.slice();
  const result = [0];
  let i2, j, u2, v2, c2;
  const len = arr.length;
  for (i2 = 0; i2 < len; i2++) {
    const arrI = arr[i2];
    if (arrI !== 0) {
      j = result[result.length - 1];
      if (arr[j] < arrI) {
        p2[i2] = j;
        result.push(i2);
        continue;
      }
      u2 = 0;
      v2 = result.length - 1;
      while (u2 < v2) {
        c2 = u2 + v2 >> 1;
        if (arr[result[c2]] < arrI) {
          u2 = c2 + 1;
        } else {
          v2 = c2;
        }
      }
      if (arrI < arr[result[u2]]) {
        if (u2 > 0) {
          p2[i2] = result[u2 - 1];
        }
        result[u2] = i2;
      }
    }
  }
  u2 = result.length;
  v2 = result[u2 - 1];
  while (u2-- > 0) {
    result[u2] = v2;
    v2 = p2[v2];
  }
  return result;
}
function locateNonHydratedAsyncRoot(instance) {
  const subComponent = instance.subTree.component;
  if (subComponent) {
    if (subComponent.asyncDep && !subComponent.asyncResolved) {
      return subComponent;
    } else {
      return locateNonHydratedAsyncRoot(subComponent);
    }
  }
}
function invalidateMount(hooks) {
  if (hooks) {
    for (let i2 = 0; i2 < hooks.length; i2++)
      hooks[i2].flags |= 8;
  }
}
const ssrContextKey = Symbol.for("v-scx");
const useSSRContext = () => {
  {
    const ctx = inject(ssrContextKey);
    return ctx;
  }
};
function watchEffect(effect2, options) {
  return doWatch(effect2, null, options);
}
function watch(source, cb2, options) {
  return doWatch(source, cb2, options);
}
function doWatch(source, cb2, options = EMPTY_OBJ) {
  const { immediate, deep, flush, once } = options;
  const baseWatchOptions = extend$1({}, options);
  const runsImmediately = cb2 && immediate || !cb2 && flush !== "post";
  let ssrCleanup;
  if (isInSSRComponentSetup) {
    if (flush === "sync") {
      const ctx = useSSRContext();
      ssrCleanup = ctx.__watcherHandles || (ctx.__watcherHandles = []);
    } else if (!runsImmediately) {
      const watchStopHandle = () => {
      };
      watchStopHandle.stop = NOOP;
      watchStopHandle.resume = NOOP;
      watchStopHandle.pause = NOOP;
      return watchStopHandle;
    }
  }
  const instance = currentInstance;
  baseWatchOptions.call = (fn2, type4, args) => callWithAsyncErrorHandling(fn2, instance, type4, args);
  let isPre = false;
  if (flush === "post") {
    baseWatchOptions.scheduler = (job) => {
      queuePostRenderEffect(job, instance && instance.suspense);
    };
  } else if (flush !== "sync") {
    isPre = true;
    baseWatchOptions.scheduler = (job, isFirstRun) => {
      if (isFirstRun) {
        job();
      } else {
        queueJob(job);
      }
    };
  }
  baseWatchOptions.augmentJob = (job) => {
    if (cb2) {
      job.flags |= 4;
    }
    if (isPre) {
      job.flags |= 2;
      if (instance) {
        job.id = instance.uid;
        job.i = instance;
      }
    }
  };
  const watchHandle = watch$1(source, cb2, baseWatchOptions);
  if (isInSSRComponentSetup) {
    if (ssrCleanup) {
      ssrCleanup.push(watchHandle);
    } else if (runsImmediately) {
      watchHandle();
    }
  }
  return watchHandle;
}
function instanceWatch(source, value, options) {
  const publicThis = this.proxy;
  const getter = isString$3(source) ? source.includes(".") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
  let cb2;
  if (isFunction$3(value)) {
    cb2 = value;
  } else {
    cb2 = value.handler;
    options = value;
  }
  const reset = setCurrentInstance(this);
  const res = doWatch(getter, cb2.bind(publicThis), options);
  reset();
  return res;
}
function createPathGetter(ctx, path) {
  const segments = path.split(".");
  return () => {
    let cur = ctx;
    for (let i2 = 0; i2 < segments.length && cur; i2++) {
      cur = cur[segments[i2]];
    }
    return cur;
  };
}
const getModelModifiers = (props, modelName) => {
  return modelName === "modelValue" || modelName === "model-value" ? props.modelModifiers : props[`${modelName}Modifiers`] || props[`${camelize(modelName)}Modifiers`] || props[`${hyphenate(modelName)}Modifiers`];
};
function emit(instance, event, ...rawArgs) {
  if (instance.isUnmounted)
    return;
  const props = instance.vnode.props || EMPTY_OBJ;
  let args = rawArgs;
  const isModelListener2 = event.startsWith("update:");
  const modifiers = isModelListener2 && getModelModifiers(props, event.slice(7));
  if (modifiers) {
    if (modifiers.trim) {
      args = rawArgs.map((a2) => isString$3(a2) ? a2.trim() : a2);
    }
    if (modifiers.number) {
      args = rawArgs.map(looseToNumber);
    }
  }
  let handlerName;
  let handler2 = props[handlerName = toHandlerKey(event)] || // also try camelCase event handler (#2249)
  props[handlerName = toHandlerKey(camelize(event))];
  if (!handler2 && isModelListener2) {
    handler2 = props[handlerName = toHandlerKey(hyphenate(event))];
  }
  if (handler2) {
    callWithAsyncErrorHandling(
      handler2,
      instance,
      6,
      args
    );
  }
  const onceHandler = props[handlerName + `Once`];
  if (onceHandler) {
    if (!instance.emitted) {
      instance.emitted = {};
    } else if (instance.emitted[handlerName]) {
      return;
    }
    instance.emitted[handlerName] = true;
    callWithAsyncErrorHandling(
      onceHandler,
      instance,
      6,
      args
    );
  }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
  const cache2 = appContext.emitsCache;
  const cached = cache2.get(comp);
  if (cached !== void 0) {
    return cached;
  }
  const raw = comp.emits;
  let normalized = {};
  let hasExtends = false;
  if (!isFunction$3(comp)) {
    const extendEmits = (raw2) => {
      const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
      if (normalizedFromExtend) {
        hasExtends = true;
        extend$1(normalized, normalizedFromExtend);
      }
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendEmits);
    }
    if (comp.extends) {
      extendEmits(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendEmits);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject$3(comp)) {
      cache2.set(comp, null);
    }
    return null;
  }
  if (isArray$4(raw)) {
    raw.forEach((key) => normalized[key] = null);
  } else {
    extend$1(normalized, raw);
  }
  if (isObject$3(comp)) {
    cache2.set(comp, normalized);
  }
  return normalized;
}
function isEmitListener(options, key) {
  if (!options || !isOn(key)) {
    return false;
  }
  key = key.slice(2).replace(/Once$/, "");
  return hasOwn$1(options, key[0].toLowerCase() + key.slice(1)) || hasOwn$1(options, hyphenate(key)) || hasOwn$1(options, key);
}
function markAttrsAccessed() {
}
function renderComponentRoot(instance) {
  const {
    type: Component,
    vnode,
    proxy,
    withProxy,
    propsOptions: [propsOptions],
    slots,
    attrs,
    emit: emit2,
    render: render2,
    renderCache,
    props,
    data,
    setupState,
    ctx,
    inheritAttrs
  } = instance;
  const prev = setCurrentRenderingInstance(instance);
  let result;
  let fallthroughAttrs;
  try {
    if (vnode.shapeFlag & 4) {
      const proxyToUse = withProxy || proxy;
      const thisProxy = false ? new Proxy(proxyToUse, {
        get(target, key, receiver) {
          warn$1(
            `Property '${String(
              key
            )}' was accessed via 'this'. Avoid using 'this' in templates.`
          );
          return Reflect.get(target, key, receiver);
        }
      }) : proxyToUse;
      result = normalizeVNode(
        render2.call(
          thisProxy,
          proxyToUse,
          renderCache,
          false ? shallowReadonly(props) : props,
          setupState,
          data,
          ctx
        )
      );
      fallthroughAttrs = attrs;
    } else {
      const render22 = Component;
      if (false)
        ;
      result = normalizeVNode(
        render22.length > 1 ? render22(
          false ? shallowReadonly(props) : props,
          false ? {
            get attrs() {
              markAttrsAccessed();
              return shallowReadonly(attrs);
            },
            slots,
            emit: emit2
          } : { attrs, slots, emit: emit2 }
        ) : render22(
          false ? shallowReadonly(props) : props,
          null
        )
      );
      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
    }
  } catch (err) {
    blockStack.length = 0;
    handleError$1(err, instance, 1);
    result = createVNode(Comment);
  }
  let root2 = result;
  if (fallthroughAttrs && inheritAttrs !== false) {
    const keys2 = Object.keys(fallthroughAttrs);
    const { shapeFlag } = root2;
    if (keys2.length) {
      if (shapeFlag & (1 | 6)) {
        if (propsOptions && keys2.some(isModelListener)) {
          fallthroughAttrs = filterModelListeners(
            fallthroughAttrs,
            propsOptions
          );
        }
        root2 = cloneVNode(root2, fallthroughAttrs, false, true);
      }
    }
  }
  if (vnode.dirs) {
    root2 = cloneVNode(root2, null, false, true);
    root2.dirs = root2.dirs ? root2.dirs.concat(vnode.dirs) : vnode.dirs;
  }
  if (vnode.transition) {
    setTransitionHooks(root2, vnode.transition);
  }
  {
    result = root2;
  }
  setCurrentRenderingInstance(prev);
  return result;
}
const getFunctionalFallthrough = (attrs) => {
  let res;
  for (const key in attrs) {
    if (key === "class" || key === "style" || isOn(key)) {
      (res || (res = {}))[key] = attrs[key];
    }
  }
  return res;
};
const filterModelListeners = (attrs, props) => {
  const res = {};
  for (const key in attrs) {
    if (!isModelListener(key) || !(key.slice(9) in props)) {
      res[key] = attrs[key];
    }
  }
  return res;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
  const { props: prevProps, children: prevChildren, component } = prevVNode;
  const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
  const emits = component.emitsOptions;
  if (nextVNode.dirs || nextVNode.transition) {
    return true;
  }
  if (optimized && patchFlag >= 0) {
    if (patchFlag & 1024) {
      return true;
    }
    if (patchFlag & 16) {
      if (!prevProps) {
        return !!nextProps;
      }
      return hasPropsChanged(prevProps, nextProps, emits);
    } else if (patchFlag & 8) {
      const dynamicProps = nextVNode.dynamicProps;
      for (let i2 = 0; i2 < dynamicProps.length; i2++) {
        const key = dynamicProps[i2];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {
          return true;
        }
      }
    }
  } else {
    if (prevChildren || nextChildren) {
      if (!nextChildren || !nextChildren.$stable) {
        return true;
      }
    }
    if (prevProps === nextProps) {
      return false;
    }
    if (!prevProps) {
      return !!nextProps;
    }
    if (!nextProps) {
      return true;
    }
    return hasPropsChanged(prevProps, nextProps, emits);
  }
  return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
  const nextKeys = Object.keys(nextProps);
  if (nextKeys.length !== Object.keys(prevProps).length) {
    return true;
  }
  for (let i2 = 0; i2 < nextKeys.length; i2++) {
    const key = nextKeys[i2];
    if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {
      return true;
    }
  }
  return false;
}
function updateHOCHostEl({ vnode, parent }, el2) {
  while (parent) {
    const root2 = parent.subTree;
    if (root2.suspense && root2.suspense.activeBranch === vnode) {
      root2.el = vnode.el;
    }
    if (root2 === vnode) {
      (vnode = parent.vnode).el = el2;
      parent = parent.parent;
    } else {
      break;
    }
  }
}
const isSuspense = (type4) => type4.__isSuspense;
function queueEffectWithSuspense(fn2, suspense) {
  if (suspense && suspense.pendingBranch) {
    if (isArray$4(fn2)) {
      suspense.effects.push(...fn2);
    } else {
      suspense.effects.push(fn2);
    }
  } else {
    queuePostFlushCb(fn2);
  }
}
const Fragment = Symbol.for("v-fgt");
const Text = Symbol.for("v-txt");
const Comment = Symbol.for("v-cmt");
const Static = Symbol.for("v-stc");
const blockStack = [];
let currentBlock = null;
function openBlock(disableTracking = false) {
  blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
  blockStack.pop();
  currentBlock = blockStack[blockStack.length - 1] || null;
}
let isBlockTreeEnabled = 1;
function setBlockTracking(value, inVOnce = false) {
  isBlockTreeEnabled += value;
  if (value < 0 && currentBlock && inVOnce) {
    currentBlock.hasOnce = true;
  }
}
function setupBlock(vnode) {
  vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null;
  closeBlock();
  if (isBlockTreeEnabled > 0 && currentBlock) {
    currentBlock.push(vnode);
  }
  return vnode;
}
function createElementBlock(type4, props, children, patchFlag, dynamicProps, shapeFlag) {
  return setupBlock(
    createBaseVNode(
      type4,
      props,
      children,
      patchFlag,
      dynamicProps,
      shapeFlag,
      true
    )
  );
}
function createBlock(type4, props, children, patchFlag, dynamicProps) {
  return setupBlock(
    createVNode(
      type4,
      props,
      children,
      patchFlag,
      dynamicProps,
      true
    )
  );
}
function isVNode$1(value) {
  return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
  return n1.type === n2.type && n1.key === n2.key;
}
const normalizeKey = ({ key }) => key != null ? key : null;
const normalizeRef = ({
  ref: ref3,
  ref_key,
  ref_for
}) => {
  if (typeof ref3 === "number") {
    ref3 = "" + ref3;
  }
  return ref3 != null ? isString$3(ref3) || isRef(ref3) || isFunction$3(ref3) ? { i: currentRenderingInstance, r: ref3, k: ref_key, f: !!ref_for } : ref3 : null;
};
function createBaseVNode(type4, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type4 === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
  const vnode = {
    __v_isVNode: true,
    __v_skip: true,
    type: type4,
    props,
    key: props && normalizeKey(props),
    ref: props && normalizeRef(props),
    scopeId: currentScopeId,
    slotScopeIds: null,
    children,
    component: null,
    suspense: null,
    ssContent: null,
    ssFallback: null,
    dirs: null,
    transition: null,
    el: null,
    anchor: null,
    target: null,
    targetStart: null,
    targetAnchor: null,
    staticCount: 0,
    shapeFlag,
    patchFlag,
    dynamicProps,
    dynamicChildren: null,
    appContext: null,
    ctx: currentRenderingInstance
  };
  if (needFullChildrenNormalization) {
    normalizeChildren(vnode, children);
    if (shapeFlag & 128) {
      type4.normalize(vnode);
    }
  } else if (children) {
    vnode.shapeFlag |= isString$3(children) ? 8 : 16;
  }
  if (isBlockTreeEnabled > 0 && // avoid a block node from tracking itself
  !isBlockNode && // has current parent block
  currentBlock && // presence of a patch flag indicates this node needs patching on updates.
  // component nodes also should always be patched, because even if the
  // component doesn't need to update, it needs to persist the instance on to
  // the next vnode so that it can be properly unmounted later.
  (vnode.patchFlag > 0 || shapeFlag & 6) && // the EVENTS flag is only for hydration and if it is the only flag, the
  // vnode should not be considered dynamic due to handler caching.
  vnode.patchFlag !== 32) {
    currentBlock.push(vnode);
  }
  return vnode;
}
const createVNode = _createVNode;
function _createVNode(type4, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
  if (!type4 || type4 === NULL_DYNAMIC_COMPONENT) {
    type4 = Comment;
  }
  if (isVNode$1(type4)) {
    const cloned = cloneVNode(
      type4,
      props,
      true
      /* mergeRef: true */
    );
    if (children) {
      normalizeChildren(cloned, children);
    }
    if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
      if (cloned.shapeFlag & 6) {
        currentBlock[currentBlock.indexOf(type4)] = cloned;
      } else {
        currentBlock.push(cloned);
      }
    }
    cloned.patchFlag = -2;
    return cloned;
  }
  if (isClassComponent(type4)) {
    type4 = type4.__vccOpts;
  }
  if (props) {
    props = guardReactiveProps(props);
    let { class: klass, style } = props;
    if (klass && !isString$3(klass)) {
      props.class = normalizeClass(klass);
    }
    if (isObject$3(style)) {
      if (isProxy(style) && !isArray$4(style)) {
        style = extend$1({}, style);
      }
      props.style = normalizeStyle(style);
    }
  }
  const shapeFlag = isString$3(type4) ? 1 : isSuspense(type4) ? 128 : isTeleport(type4) ? 64 : isObject$3(type4) ? 4 : isFunction$3(type4) ? 2 : 0;
  return createBaseVNode(
    type4,
    props,
    children,
    patchFlag,
    dynamicProps,
    shapeFlag,
    isBlockNode,
    true
  );
}
function guardReactiveProps(props) {
  if (!props)
    return null;
  return isProxy(props) || isInternalObject(props) ? extend$1({}, props) : props;
}
function cloneVNode(vnode, extraProps, mergeRef = false, cloneTransition = false) {
  const { props, ref: ref3, patchFlag, children, transition } = vnode;
  const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
  const cloned = {
    __v_isVNode: true,
    __v_skip: true,
    type: vnode.type,
    props: mergedProps,
    key: mergedProps && normalizeKey(mergedProps),
    ref: extraProps && extraProps.ref ? (
      // #2078 in the case of <component :is="vnode" ref="extra"/>
      // if the vnode itself already has a ref, cloneVNode will need to merge
      // the refs so the single vnode can be set on multiple refs
      mergeRef && ref3 ? isArray$4(ref3) ? ref3.concat(normalizeRef(extraProps)) : [ref3, normalizeRef(extraProps)] : normalizeRef(extraProps)
    ) : ref3,
    scopeId: vnode.scopeId,
    slotScopeIds: vnode.slotScopeIds,
    children,
    target: vnode.target,
    targetStart: vnode.targetStart,
    targetAnchor: vnode.targetAnchor,
    staticCount: vnode.staticCount,
    shapeFlag: vnode.shapeFlag,
    // if the vnode is cloned with extra props, we can no longer assume its
    // existing patch flag to be reliable and need to add the FULL_PROPS flag.
    // note: preserve flag for fragments since they use the flag for children
    // fast paths only.
    patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
    dynamicProps: vnode.dynamicProps,
    dynamicChildren: vnode.dynamicChildren,
    appContext: vnode.appContext,
    dirs: vnode.dirs,
    transition,
    // These should technically only be non-null on mounted VNodes. However,
    // they *should* be copied for kept-alive vnodes. So we just always copy
    // them since them being non-null during a mount doesn't affect the logic as
    // they will simply be overwritten.
    component: vnode.component,
    suspense: vnode.suspense,
    ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
    ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
    el: vnode.el,
    anchor: vnode.anchor,
    ctx: vnode.ctx,
    ce: vnode.ce
  };
  if (transition && cloneTransition) {
    setTransitionHooks(
      cloned,
      transition.clone(cloned)
    );
  }
  return cloned;
}
function createTextVNode(text = " ", flag = 0) {
  return createVNode(Text, null, text, flag);
}
function createStaticVNode(content, numberOfNodes) {
  const vnode = createVNode(Static, null, content);
  vnode.staticCount = numberOfNodes;
  return vnode;
}
function createCommentVNode(text = "", asBlock = false) {
  return asBlock ? (openBlock(), createBlock(Comment, null, text)) : createVNode(Comment, null, text);
}
function normalizeVNode(child) {
  if (child == null || typeof child === "boolean") {
    return createVNode(Comment);
  } else if (isArray$4(child)) {
    return createVNode(
      Fragment,
      null,
      // #3666, avoid reference pollution when reusing vnode
      child.slice()
    );
  } else if (isVNode$1(child)) {
    return cloneIfMounted(child);
  } else {
    return createVNode(Text, null, String(child));
  }
}
function cloneIfMounted(child) {
  return child.el === null && child.patchFlag !== -1 || child.memo ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
  let type4 = 0;
  const { shapeFlag } = vnode;
  if (children == null) {
    children = null;
  } else if (isArray$4(children)) {
    type4 = 16;
  } else if (typeof children === "object") {
    if (shapeFlag & (1 | 64)) {
      const slot = children.default;
      if (slot) {
        slot._c && (slot._d = false);
        normalizeChildren(vnode, slot());
        slot._c && (slot._d = true);
      }
      return;
    } else {
      type4 = 32;
      const slotFlag = children._;
      if (!slotFlag && !isInternalObject(children)) {
        children._ctx = currentRenderingInstance;
      } else if (slotFlag === 3 && currentRenderingInstance) {
        if (currentRenderingInstance.slots._ === 1) {
          children._ = 1;
        } else {
          children._ = 2;
          vnode.patchFlag |= 1024;
        }
      }
    }
  } else if (isFunction$3(children)) {
    children = { default: children, _ctx: currentRenderingInstance };
    type4 = 32;
  } else {
    children = String(children);
    if (shapeFlag & 64) {
      type4 = 16;
      children = [createTextVNode(children)];
    } else {
      type4 = 8;
    }
  }
  vnode.children = children;
  vnode.shapeFlag |= type4;
}
function mergeProps(...args) {
  const ret = {};
  for (let i2 = 0; i2 < args.length; i2++) {
    const toMerge = args[i2];
    for (const key in toMerge) {
      if (key === "class") {
        if (ret.class !== toMerge.class) {
          ret.class = normalizeClass([ret.class, toMerge.class]);
        }
      } else if (key === "style") {
        ret.style = normalizeStyle([ret.style, toMerge.style]);
      } else if (isOn(key)) {
        const existing = ret[key];
        const incoming = toMerge[key];
        if (incoming && existing !== incoming && !(isArray$4(existing) && existing.includes(incoming))) {
          ret[key] = existing ? [].concat(existing, incoming) : incoming;
        }
      } else if (key !== "") {
        ret[key] = toMerge[key];
      }
    }
  }
  return ret;
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
  callWithAsyncErrorHandling(hook, instance, 7, [
    vnode,
    prevVNode
  ]);
}
const emptyAppContext = createAppContext();
let uid = 0;
function createComponentInstance(vnode, parent, suspense) {
  const type4 = vnode.type;
  const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
  const instance = {
    uid: uid++,
    vnode,
    type: type4,
    parent,
    appContext,
    root: null,
    // to be immediately set
    next: null,
    subTree: null,
    // will be set synchronously right after creation
    effect: null,
    update: null,
    // will be set synchronously right after creation
    job: null,
    scope: new EffectScope(
      true
      /* detached */
    ),
    render: null,
    proxy: null,
    exposed: null,
    exposeProxy: null,
    withProxy: null,
    provides: parent ? parent.provides : Object.create(appContext.provides),
    ids: parent ? parent.ids : ["", 0, 0],
    accessCache: null,
    renderCache: [],
    // local resolved assets
    components: null,
    directives: null,
    // resolved props and emits options
    propsOptions: normalizePropsOptions(type4, appContext),
    emitsOptions: normalizeEmitsOptions(type4, appContext),
    // emit
    emit: null,
    // to be set immediately
    emitted: null,
    // props default value
    propsDefaults: EMPTY_OBJ,
    // inheritAttrs
    inheritAttrs: type4.inheritAttrs,
    // state
    ctx: EMPTY_OBJ,
    data: EMPTY_OBJ,
    props: EMPTY_OBJ,
    attrs: EMPTY_OBJ,
    slots: EMPTY_OBJ,
    refs: EMPTY_OBJ,
    setupState: EMPTY_OBJ,
    setupContext: null,
    // suspense related
    suspense,
    suspenseId: suspense ? suspense.pendingId : 0,
    asyncDep: null,
    asyncResolved: false,
    // lifecycle hooks
    // not using enums here because it results in computed properties
    isMounted: false,
    isUnmounted: false,
    isDeactivated: false,
    bc: null,
    c: null,
    bm: null,
    m: null,
    bu: null,
    u: null,
    um: null,
    bum: null,
    da: null,
    a: null,
    rtg: null,
    rtc: null,
    ec: null,
    sp: null
  };
  {
    instance.ctx = { _: instance };
  }
  instance.root = parent ? parent.root : instance;
  instance.emit = emit.bind(null, instance);
  if (vnode.ce) {
    vnode.ce(instance);
  }
  return instance;
}
let currentInstance = null;
const getCurrentInstance = () => currentInstance || currentRenderingInstance;
let internalSetCurrentInstance;
let setInSSRSetupState;
{
  const g2 = getGlobalThis$1();
  const registerGlobalSetter = (key, setter) => {
    let setters;
    if (!(setters = g2[key]))
      setters = g2[key] = [];
    setters.push(setter);
    return (v2) => {
      if (setters.length > 1)
        setters.forEach((set2) => set2(v2));
      else
        setters[0](v2);
    };
  };
  internalSetCurrentInstance = registerGlobalSetter(
    `__VUE_INSTANCE_SETTERS__`,
    (v2) => currentInstance = v2
  );
  setInSSRSetupState = registerGlobalSetter(
    `__VUE_SSR_SETTERS__`,
    (v2) => isInSSRComponentSetup = v2
  );
}
const setCurrentInstance = (instance) => {
  const prev = currentInstance;
  internalSetCurrentInstance(instance);
  instance.scope.on();
  return () => {
    instance.scope.off();
    internalSetCurrentInstance(prev);
  };
};
const unsetCurrentInstance = () => {
  currentInstance && currentInstance.scope.off();
  internalSetCurrentInstance(null);
};
function isStatefulComponent(instance) {
  return instance.vnode.shapeFlag & 4;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false, optimized = false) {
  isSSR && setInSSRSetupState(isSSR);
  const { props, children } = instance.vnode;
  const isStateful = isStatefulComponent(instance);
  initProps(instance, props, isStateful, isSSR);
  initSlots(instance, children, optimized);
  const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
  isSSR && setInSSRSetupState(false);
  return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
  const Component = instance.type;
  instance.accessCache = /* @__PURE__ */ Object.create(null);
  instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers);
  const { setup } = Component;
  if (setup) {
    pauseTracking();
    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
    const reset = setCurrentInstance(instance);
    const setupResult = callWithErrorHandling(
      setup,
      instance,
      0,
      [
        instance.props,
        setupContext
      ]
    );
    const isAsyncSetup = isPromise$1(setupResult);
    resetTracking();
    reset();
    if ((isAsyncSetup || instance.sp) && !isAsyncWrapper(instance)) {
      markAsyncBoundary(instance);
    }
    if (isAsyncSetup) {
      setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
      if (isSSR) {
        return setupResult.then((resolvedResult) => {
          handleSetupResult(instance, resolvedResult, isSSR);
        }).catch((e2) => {
          handleError$1(e2, instance, 0);
        });
      } else {
        instance.asyncDep = setupResult;
      }
    } else {
      handleSetupResult(instance, setupResult, isSSR);
    }
  } else {
    finishComponentSetup(instance, isSSR);
  }
}
function handleSetupResult(instance, setupResult, isSSR) {
  if (isFunction$3(setupResult)) {
    if (instance.type.__ssrInlineRender) {
      instance.ssrRender = setupResult;
    } else {
      instance.render = setupResult;
    }
  } else if (isObject$3(setupResult)) {
    instance.setupState = proxyRefs(setupResult);
  } else
    ;
  finishComponentSetup(instance, isSSR);
}
let compile$1;
function finishComponentSetup(instance, isSSR, skipOptions) {
  const Component = instance.type;
  if (!instance.render) {
    if (!isSSR && compile$1 && !Component.render) {
      const template = Component.template || resolveMergedOptions(instance).template;
      if (template) {
        const { isCustomElement, compilerOptions } = instance.appContext.config;
        const { delimiters, compilerOptions: componentCompilerOptions } = Component;
        const finalCompilerOptions = extend$1(
          extend$1(
            {
              isCustomElement,
              delimiters
            },
            compilerOptions
          ),
          componentCompilerOptions
        );
        Component.render = compile$1(template, finalCompilerOptions);
      }
    }
    instance.render = Component.render || NOOP;
  }
  {
    const reset = setCurrentInstance(instance);
    pauseTracking();
    try {
      applyOptions(instance);
    } finally {
      resetTracking();
      reset();
    }
  }
}
const attrsProxyHandlers = {
  get(target, key) {
    track(target, "get", "");
    return target[key];
  }
};
function createSetupContext(instance) {
  const expose = (exposed) => {
    instance.exposed = exposed || {};
  };
  {
    return {
      attrs: new Proxy(instance.attrs, attrsProxyHandlers),
      slots: instance.slots,
      emit: instance.emit,
      expose
    };
  }
}
function getComponentPublicInstance(instance) {
  if (instance.exposed) {
    return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {
      get(target, key) {
        if (key in target) {
          return target[key];
        } else if (key in publicPropertiesMap) {
          return publicPropertiesMap[key](instance);
        }
      },
      has(target, key) {
        return key in target || key in publicPropertiesMap;
      }
    }));
  } else {
    return instance.proxy;
  }
}
const classifyRE = /(?:^|[-_])(\w)/g;
const classify = (str) => str.replace(classifyRE, (c2) => c2.toUpperCase()).replace(/[-_]/g, "");
function getComponentName(Component, includeInferred = true) {
  return isFunction$3(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;
}
function formatComponentName(instance, Component, isRoot = false) {
  let name = getComponentName(Component);
  if (!name && Component.__file) {
    const match = Component.__file.match(/([^/\\]+)\.\w+$/);
    if (match) {
      name = match[1];
    }
  }
  if (!name && instance && instance.parent) {
    const inferFromRegistry = (registry) => {
      for (const key in registry) {
        if (registry[key] === Component) {
          return key;
        }
      }
    };
    name = inferFromRegistry(
      instance.components || instance.parent.type.components
    ) || inferFromRegistry(instance.appContext.components);
  }
  return name ? classify(name) : isRoot ? `App` : `Anonymous`;
}
function isClassComponent(value) {
  return isFunction$3(value) && "__vccOpts" in value;
}
const computed = (getterOrOptions, debugOptions) => {
  const c2 = computed$1(getterOrOptions, debugOptions, isInSSRComponentSetup);
  return c2;
};
function h$1(type4, propsOrChildren, children) {
  const l2 = arguments.length;
  if (l2 === 2) {
    if (isObject$3(propsOrChildren) && !isArray$4(propsOrChildren)) {
      if (isVNode$1(propsOrChildren)) {
        return createVNode(type4, null, [propsOrChildren]);
      }
      return createVNode(type4, propsOrChildren);
    } else {
      return createVNode(type4, null, propsOrChildren);
    }
  } else {
    if (l2 > 3) {
      children = Array.prototype.slice.call(arguments, 2);
    } else if (l2 === 3 && isVNode$1(children)) {
      children = [children];
    }
    return createVNode(type4, propsOrChildren, children);
  }
}
const version = "3.5.13";
const warn$2 = NOOP;
/**
* @vue/runtime-dom v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
let policy = void 0;
const tt$1 = typeof window !== "undefined" && window.trustedTypes;
if (tt$1) {
  try {
    policy = /* @__PURE__ */ tt$1.createPolicy("vue", {
      createHTML: (val) => val
    });
  } catch (e2) {
  }
}
const unsafeToTrustedHTML = policy ? (val) => policy.createHTML(val) : (val) => val;
const svgNS = "http://www.w3.org/2000/svg";
const mathmlNS = "http://www.w3.org/1998/Math/MathML";
const doc = typeof document !== "undefined" ? document : null;
const templateContainer = doc && /* @__PURE__ */ doc.createElement("template");
const nodeOps = {
  insert: (child, parent, anchor) => {
    parent.insertBefore(child, anchor || null);
  },
  remove: (child) => {
    const parent = child.parentNode;
    if (parent) {
      parent.removeChild(child);
    }
  },
  createElement: (tag, namespace, is2, props) => {
    const el2 = namespace === "svg" ? doc.createElementNS(svgNS, tag) : namespace === "mathml" ? doc.createElementNS(mathmlNS, tag) : is2 ? doc.createElement(tag, { is: is2 }) : doc.createElement(tag);
    if (tag === "select" && props && props.multiple != null) {
      el2.setAttribute("multiple", props.multiple);
    }
    return el2;
  },
  createText: (text) => doc.createTextNode(text),
  createComment: (text) => doc.createComment(text),
  setText: (node, text) => {
    node.nodeValue = text;
  },
  setElementText: (el2, text) => {
    el2.textContent = text;
  },
  parentNode: (node) => node.parentNode,
  nextSibling: (node) => node.nextSibling,
  querySelector: (selector) => doc.querySelector(selector),
  setScopeId(el2, id2) {
    el2.setAttribute(id2, "");
  },
  // __UNSAFE__
  // Reason: innerHTML.
  // Static content here can only come from compiled templates.
  // As long as the user only uses trusted templates, this is safe.
  insertStaticContent(content, parent, anchor, namespace, start, end) {
    const before = anchor ? anchor.previousSibling : parent.lastChild;
    if (start && (start === end || start.nextSibling)) {
      while (true) {
        parent.insertBefore(start.cloneNode(true), anchor);
        if (start === end || !(start = start.nextSibling))
          break;
      }
    } else {
      templateContainer.innerHTML = unsafeToTrustedHTML(
        namespace === "svg" ? `<svg>${content}</svg>` : namespace === "mathml" ? `<math>${content}</math>` : content
      );
      const template = templateContainer.content;
      if (namespace === "svg" || namespace === "mathml") {
        const wrapper = template.firstChild;
        while (wrapper.firstChild) {
          template.appendChild(wrapper.firstChild);
        }
        template.removeChild(wrapper);
      }
      parent.insertBefore(template, anchor);
    }
    return [
      // first
      before ? before.nextSibling : parent.firstChild,
      // last
      anchor ? anchor.previousSibling : parent.lastChild
    ];
  }
};
const TRANSITION = "transition";
const ANIMATION = "animation";
const vtcKey = Symbol("_vtc");
const DOMTransitionPropsValidators = {
  name: String,
  type: String,
  css: {
    type: Boolean,
    default: true
  },
  duration: [String, Number, Object],
  enterFromClass: String,
  enterActiveClass: String,
  enterToClass: String,
  appearFromClass: String,
  appearActiveClass: String,
  appearToClass: String,
  leaveFromClass: String,
  leaveActiveClass: String,
  leaveToClass: String
};
const TransitionPropsValidators = /* @__PURE__ */ extend$1(
  {},
  BaseTransitionPropsValidators,
  DOMTransitionPropsValidators
);
const decorate$1 = (t2) => {
  t2.displayName = "Transition";
  t2.props = TransitionPropsValidators;
  return t2;
};
const Transition = /* @__PURE__ */ decorate$1(
  (props, { slots }) => h$1(BaseTransition, resolveTransitionProps(props), slots)
);
const callHook = (hook, args = []) => {
  if (isArray$4(hook)) {
    hook.forEach((h2) => h2(...args));
  } else if (hook) {
    hook(...args);
  }
};
const hasExplicitCallback = (hook) => {
  return hook ? isArray$4(hook) ? hook.some((h2) => h2.length > 1) : hook.length > 1 : false;
};
function resolveTransitionProps(rawProps) {
  const baseProps = {};
  for (const key in rawProps) {
    if (!(key in DOMTransitionPropsValidators)) {
      baseProps[key] = rawProps[key];
    }
  }
  if (rawProps.css === false) {
    return baseProps;
  }
  const {
    name = "v",
    type: type4,
    duration,
    enterFromClass = `${name}-enter-from`,
    enterActiveClass = `${name}-enter-active`,
    enterToClass = `${name}-enter-to`,
    appearFromClass = enterFromClass,
    appearActiveClass = enterActiveClass,
    appearToClass = enterToClass,
    leaveFromClass = `${name}-leave-from`,
    leaveActiveClass = `${name}-leave-active`,
    leaveToClass = `${name}-leave-to`
  } = rawProps;
  const durations = normalizeDuration(duration);
  const enterDuration = durations && durations[0];
  const leaveDuration = durations && durations[1];
  const {
    onBeforeEnter,
    onEnter,
    onEnterCancelled,
    onLeave,
    onLeaveCancelled,
    onBeforeAppear = onBeforeEnter,
    onAppear = onEnter,
    onAppearCancelled = onEnterCancelled
  } = baseProps;
  const finishEnter = (el2, isAppear, done, isCancelled) => {
    el2._enterCancelled = isCancelled;
    removeTransitionClass(el2, isAppear ? appearToClass : enterToClass);
    removeTransitionClass(el2, isAppear ? appearActiveClass : enterActiveClass);
    done && done();
  };
  const finishLeave = (el2, done) => {
    el2._isLeaving = false;
    removeTransitionClass(el2, leaveFromClass);
    removeTransitionClass(el2, leaveToClass);
    removeTransitionClass(el2, leaveActiveClass);
    done && done();
  };
  const makeEnterHook = (isAppear) => {
    return (el2, done) => {
      const hook = isAppear ? onAppear : onEnter;
      const resolve2 = () => finishEnter(el2, isAppear, done);
      callHook(hook, [el2, resolve2]);
      nextFrame(() => {
        removeTransitionClass(el2, isAppear ? appearFromClass : enterFromClass);
        addTransitionClass(el2, isAppear ? appearToClass : enterToClass);
        if (!hasExplicitCallback(hook)) {
          whenTransitionEnds(el2, type4, enterDuration, resolve2);
        }
      });
    };
  };
  return extend$1(baseProps, {
    onBeforeEnter(el2) {
      callHook(onBeforeEnter, [el2]);
      addTransitionClass(el2, enterFromClass);
      addTransitionClass(el2, enterActiveClass);
    },
    onBeforeAppear(el2) {
      callHook(onBeforeAppear, [el2]);
      addTransitionClass(el2, appearFromClass);
      addTransitionClass(el2, appearActiveClass);
    },
    onEnter: makeEnterHook(false),
    onAppear: makeEnterHook(true),
    onLeave(el2, done) {
      el2._isLeaving = true;
      const resolve2 = () => finishLeave(el2, done);
      addTransitionClass(el2, leaveFromClass);
      if (!el2._enterCancelled) {
        forceReflow();
        addTransitionClass(el2, leaveActiveClass);
      } else {
        addTransitionClass(el2, leaveActiveClass);
        forceReflow();
      }
      nextFrame(() => {
        if (!el2._isLeaving) {
          return;
        }
        removeTransitionClass(el2, leaveFromClass);
        addTransitionClass(el2, leaveToClass);
        if (!hasExplicitCallback(onLeave)) {
          whenTransitionEnds(el2, type4, leaveDuration, resolve2);
        }
      });
      callHook(onLeave, [el2, resolve2]);
    },
    onEnterCancelled(el2) {
      finishEnter(el2, false, void 0, true);
      callHook(onEnterCancelled, [el2]);
    },
    onAppearCancelled(el2) {
      finishEnter(el2, true, void 0, true);
      callHook(onAppearCancelled, [el2]);
    },
    onLeaveCancelled(el2) {
      finishLeave(el2);
      callHook(onLeaveCancelled, [el2]);
    }
  });
}
function normalizeDuration(duration) {
  if (duration == null) {
    return null;
  } else if (isObject$3(duration)) {
    return [NumberOf(duration.enter), NumberOf(duration.leave)];
  } else {
    const n = NumberOf(duration);
    return [n, n];
  }
}
function NumberOf(val) {
  const res = toNumber(val);
  return res;
}
function addTransitionClass(el2, cls) {
  cls.split(/\s+/).forEach((c2) => c2 && el2.classList.add(c2));
  (el2[vtcKey] || (el2[vtcKey] = /* @__PURE__ */ new Set())).add(cls);
}
function removeTransitionClass(el2, cls) {
  cls.split(/\s+/).forEach((c2) => c2 && el2.classList.remove(c2));
  const _vtc = el2[vtcKey];
  if (_vtc) {
    _vtc.delete(cls);
    if (!_vtc.size) {
      el2[vtcKey] = void 0;
    }
  }
}
function nextFrame(cb2) {
  requestAnimationFrame(() => {
    requestAnimationFrame(cb2);
  });
}
let endId = 0;
function whenTransitionEnds(el2, expectedType, explicitTimeout, resolve2) {
  const id2 = el2._endId = ++endId;
  const resolveIfNotStale = () => {
    if (id2 === el2._endId) {
      resolve2();
    }
  };
  if (explicitTimeout != null) {
    return setTimeout(resolveIfNotStale, explicitTimeout);
  }
  const { type: type4, timeout, propCount } = getTransitionInfo(el2, expectedType);
  if (!type4) {
    return resolve2();
  }
  const endEvent = type4 + "end";
  let ended = 0;
  const end = () => {
    el2.removeEventListener(endEvent, onEnd);
    resolveIfNotStale();
  };
  const onEnd = (e2) => {
    if (e2.target === el2 && ++ended >= propCount) {
      end();
    }
  };
  setTimeout(() => {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el2.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el2, expectedType) {
  const styles = window.getComputedStyle(el2);
  const getStyleProperties = (key) => (styles[key] || "").split(", ");
  const transitionDelays = getStyleProperties(`${TRANSITION}Delay`);
  const transitionDurations = getStyleProperties(`${TRANSITION}Duration`);
  const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  const animationDelays = getStyleProperties(`${ANIMATION}Delay`);
  const animationDurations = getStyleProperties(`${ANIMATION}Duration`);
  const animationTimeout = getTimeout(animationDelays, animationDurations);
  let type4 = null;
  let timeout = 0;
  let propCount = 0;
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type4 = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type4 = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type4 = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type4 ? type4 === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }
  const hasTransform = type4 === TRANSITION && /\b(transform|all)(,|$)/.test(
    getStyleProperties(`${TRANSITION}Property`).toString()
  );
  return {
    type: type4,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max(...durations.map((d2, i2) => toMs(d2) + toMs(delays[i2])));
}
function toMs(s2) {
  if (s2 === "auto")
    return 0;
  return Number(s2.slice(0, -1).replace(",", ".")) * 1e3;
}
function forceReflow() {
  return document.body.offsetHeight;
}
function patchClass(el2, value, isSVG) {
  const transitionClasses = el2[vtcKey];
  if (transitionClasses) {
    value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(" ");
  }
  if (value == null) {
    el2.removeAttribute("class");
  } else if (isSVG) {
    el2.setAttribute("class", value);
  } else {
    el2.className = value;
  }
}
const vShowOriginalDisplay = Symbol("_vod");
const vShowHidden = Symbol("_vsh");
const vShow = {
  beforeMount(el2, { value }, { transition }) {
    el2[vShowOriginalDisplay] = el2.style.display === "none" ? "" : el2.style.display;
    if (transition && value) {
      transition.beforeEnter(el2);
    } else {
      setDisplay(el2, value);
    }
  },
  mounted(el2, { value }, { transition }) {
    if (transition && value) {
      transition.enter(el2);
    }
  },
  updated(el2, { value, oldValue }, { transition }) {
    if (!value === !oldValue)
      return;
    if (transition) {
      if (value) {
        transition.beforeEnter(el2);
        setDisplay(el2, true);
        transition.enter(el2);
      } else {
        transition.leave(el2, () => {
          setDisplay(el2, false);
        });
      }
    } else {
      setDisplay(el2, value);
    }
  },
  beforeUnmount(el2, { value }) {
    setDisplay(el2, value);
  }
};
function setDisplay(el2, value) {
  el2.style.display = value ? el2[vShowOriginalDisplay] : "none";
  el2[vShowHidden] = !value;
}
const CSS_VAR_TEXT = Symbol("");
function useCssVars(getter) {
  const instance = getCurrentInstance();
  if (!instance) {
    return;
  }
  const updateTeleports = instance.ut = (vars = getter(instance.proxy)) => {
    Array.from(
      document.querySelectorAll(`[data-v-owner="${instance.uid}"]`)
    ).forEach((node) => setVarsOnNode(node, vars));
  };
  const setVars = () => {
    const vars = getter(instance.proxy);
    if (instance.ce) {
      setVarsOnNode(instance.ce, vars);
    } else {
      setVarsOnVNode(instance.subTree, vars);
    }
    updateTeleports(vars);
  };
  onBeforeUpdate(() => {
    queuePostFlushCb(setVars);
  });
  onMounted(() => {
    watch(setVars, NOOP, { flush: "post" });
    const ob2 = new MutationObserver(setVars);
    ob2.observe(instance.subTree.el.parentNode, { childList: true });
    onUnmounted(() => ob2.disconnect());
  });
}
function setVarsOnVNode(vnode, vars) {
  if (vnode.shapeFlag & 128) {
    const suspense = vnode.suspense;
    vnode = suspense.activeBranch;
    if (suspense.pendingBranch && !suspense.isHydrating) {
      suspense.effects.push(() => {
        setVarsOnVNode(suspense.activeBranch, vars);
      });
    }
  }
  while (vnode.component) {
    vnode = vnode.component.subTree;
  }
  if (vnode.shapeFlag & 1 && vnode.el) {
    setVarsOnNode(vnode.el, vars);
  } else if (vnode.type === Fragment) {
    vnode.children.forEach((c2) => setVarsOnVNode(c2, vars));
  } else if (vnode.type === Static) {
    let { el: el2, anchor } = vnode;
    while (el2) {
      setVarsOnNode(el2, vars);
      if (el2 === anchor)
        break;
      el2 = el2.nextSibling;
    }
  }
}
function setVarsOnNode(el2, vars) {
  if (el2.nodeType === 1) {
    const style = el2.style;
    let cssText = "";
    for (const key in vars) {
      style.setProperty(`--${key}`, vars[key]);
      cssText += `--${key}: ${vars[key]};`;
    }
    style[CSS_VAR_TEXT] = cssText;
  }
}
const displayRE = /(^|;)\s*display\s*:/;
function patchStyle(el2, prev, next) {
  const style = el2.style;
  const isCssString = isString$3(next);
  let hasControlledDisplay = false;
  if (next && !isCssString) {
    if (prev) {
      if (!isString$3(prev)) {
        for (const key in prev) {
          if (next[key] == null) {
            setStyle(style, key, "");
          }
        }
      } else {
        for (const prevStyle of prev.split(";")) {
          const key = prevStyle.slice(0, prevStyle.indexOf(":")).trim();
          if (next[key] == null) {
            setStyle(style, key, "");
          }
        }
      }
    }
    for (const key in next) {
      if (key === "display") {
        hasControlledDisplay = true;
      }
      setStyle(style, key, next[key]);
    }
  } else {
    if (isCssString) {
      if (prev !== next) {
        const cssVarText = style[CSS_VAR_TEXT];
        if (cssVarText) {
          next += ";" + cssVarText;
        }
        style.cssText = next;
        hasControlledDisplay = displayRE.test(next);
      }
    } else if (prev) {
      el2.removeAttribute("style");
    }
  }
  if (vShowOriginalDisplay in el2) {
    el2[vShowOriginalDisplay] = hasControlledDisplay ? style.display : "";
    if (el2[vShowHidden]) {
      style.display = "none";
    }
  }
}
const importantRE = /\s*!important$/;
function setStyle(style, name, val) {
  if (isArray$4(val)) {
    val.forEach((v2) => setStyle(style, name, v2));
  } else {
    if (val == null)
      val = "";
    if (name.startsWith("--")) {
      style.setProperty(name, val);
    } else {
      const prefixed = autoPrefix(style, name);
      if (importantRE.test(val)) {
        style.setProperty(
          hyphenate(prefixed),
          val.replace(importantRE, ""),
          "important"
        );
      } else {
        style[prefixed] = val;
      }
    }
  }
}
const prefixes = ["Webkit", "Moz", "ms"];
const prefixCache = {};
function autoPrefix(style, rawName) {
  const cached = prefixCache[rawName];
  if (cached) {
    return cached;
  }
  let name = camelize(rawName);
  if (name !== "filter" && name in style) {
    return prefixCache[rawName] = name;
  }
  name = capitalize$1(name);
  for (let i2 = 0; i2 < prefixes.length; i2++) {
    const prefixed = prefixes[i2] + name;
    if (prefixed in style) {
      return prefixCache[rawName] = prefixed;
    }
  }
  return rawName;
}
const xlinkNS = "http://www.w3.org/1999/xlink";
function patchAttr(el2, key, value, isSVG, instance, isBoolean2 = isSpecialBooleanAttr(key)) {
  if (isSVG && key.startsWith("xlink:")) {
    if (value == null) {
      el2.removeAttributeNS(xlinkNS, key.slice(6, key.length));
    } else {
      el2.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    if (value == null || isBoolean2 && !includeBooleanAttr(value)) {
      el2.removeAttribute(key);
    } else {
      el2.setAttribute(
        key,
        isBoolean2 ? "" : isSymbol$1(value) ? String(value) : value
      );
    }
  }
}
function patchDOMProp(el2, key, value, parentComponent, attrName) {
  if (key === "innerHTML" || key === "textContent") {
    if (value != null) {
      el2[key] = key === "innerHTML" ? unsafeToTrustedHTML(value) : value;
    }
    return;
  }
  const tag = el2.tagName;
  if (key === "value" && tag !== "PROGRESS" && // custom elements may use _value internally
  !tag.includes("-")) {
    const oldValue = tag === "OPTION" ? el2.getAttribute("value") || "" : el2.value;
    const newValue = value == null ? (
      // #11647: value should be set as empty string for null and undefined,
      // but <input type="checkbox"> should be set as 'on'.
      el2.type === "checkbox" ? "on" : ""
    ) : String(value);
    if (oldValue !== newValue || !("_value" in el2)) {
      el2.value = newValue;
    }
    if (value == null) {
      el2.removeAttribute(key);
    }
    el2._value = value;
    return;
  }
  let needRemove = false;
  if (value === "" || value == null) {
    const type4 = typeof el2[key];
    if (type4 === "boolean") {
      value = includeBooleanAttr(value);
    } else if (value == null && type4 === "string") {
      value = "";
      needRemove = true;
    } else if (type4 === "number") {
      value = 0;
      needRemove = true;
    }
  }
  try {
    el2[key] = value;
  } catch (e2) {
  }
  needRemove && el2.removeAttribute(attrName || key);
}
function addEventListener(el2, event, handler2, options) {
  el2.addEventListener(event, handler2, options);
}
function removeEventListener(el2, event, handler2, options) {
  el2.removeEventListener(event, handler2, options);
}
const veiKey = Symbol("_vei");
function patchEvent(el2, rawName, prevValue, nextValue, instance = null) {
  const invokers = el2[veiKey] || (el2[veiKey] = {});
  const existingInvoker = invokers[rawName];
  if (nextValue && existingInvoker) {
    existingInvoker.value = nextValue;
  } else {
    const [name, options] = parseName(rawName);
    if (nextValue) {
      const invoker = invokers[rawName] = createInvoker(
        nextValue,
        instance
      );
      addEventListener(el2, name, invoker, options);
    } else if (existingInvoker) {
      removeEventListener(el2, name, existingInvoker, options);
      invokers[rawName] = void 0;
    }
  }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name) {
  let options;
  if (optionsModifierRE.test(name)) {
    options = {};
    let m2;
    while (m2 = name.match(optionsModifierRE)) {
      name = name.slice(0, name.length - m2[0].length);
      options[m2[0].toLowerCase()] = true;
    }
  }
  const event = name[2] === ":" ? name.slice(3) : hyphenate(name.slice(2));
  return [event, options];
}
let cachedNow = 0;
const p$1 = /* @__PURE__ */ Promise.resolve();
const getNow = () => cachedNow || (p$1.then(() => cachedNow = 0), cachedNow = Date.now());
function createInvoker(initialValue, instance) {
  const invoker = (e2) => {
    if (!e2._vts) {
      e2._vts = Date.now();
    } else if (e2._vts <= invoker.attached) {
      return;
    }
    callWithAsyncErrorHandling(
      patchStopImmediatePropagation(e2, invoker.value),
      instance,
      5,
      [e2]
    );
  };
  invoker.value = initialValue;
  invoker.attached = getNow();
  return invoker;
}
function patchStopImmediatePropagation(e2, value) {
  if (isArray$4(value)) {
    const originalStop = e2.stopImmediatePropagation;
    e2.stopImmediatePropagation = () => {
      originalStop.call(e2);
      e2._stopped = true;
    };
    return value.map(
      (fn2) => (e22) => !e22._stopped && fn2 && fn2(e22)
    );
  } else {
    return value;
  }
}
const isNativeOn = (key) => key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 && // lowercase letter
key.charCodeAt(2) > 96 && key.charCodeAt(2) < 123;
const patchProp = (el2, key, prevValue, nextValue, namespace, parentComponent) => {
  const isSVG = namespace === "svg";
  if (key === "class") {
    patchClass(el2, nextValue, isSVG);
  } else if (key === "style") {
    patchStyle(el2, prevValue, nextValue);
  } else if (isOn(key)) {
    if (!isModelListener(key)) {
      patchEvent(el2, key, prevValue, nextValue, parentComponent);
    }
  } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el2, key, nextValue, isSVG)) {
    patchDOMProp(el2, key, nextValue);
    if (!el2.tagName.includes("-") && (key === "value" || key === "checked" || key === "selected")) {
      patchAttr(el2, key, nextValue, isSVG, parentComponent, key !== "value");
    }
  } else if (
    // #11081 force set props for possible async custom element
    el2._isVueCE && (/[A-Z]/.test(key) || !isString$3(nextValue))
  ) {
    patchDOMProp(el2, camelize(key), nextValue, parentComponent, key);
  } else {
    if (key === "true-value") {
      el2._trueValue = nextValue;
    } else if (key === "false-value") {
      el2._falseValue = nextValue;
    }
    patchAttr(el2, key, nextValue, isSVG);
  }
};
function shouldSetAsProp(el2, key, value, isSVG) {
  if (isSVG) {
    if (key === "innerHTML" || key === "textContent") {
      return true;
    }
    if (key in el2 && isNativeOn(key) && isFunction$3(value)) {
      return true;
    }
    return false;
  }
  if (key === "spellcheck" || key === "draggable" || key === "translate") {
    return false;
  }
  if (key === "form") {
    return false;
  }
  if (key === "list" && el2.tagName === "INPUT") {
    return false;
  }
  if (key === "type" && el2.tagName === "TEXTAREA") {
    return false;
  }
  if (key === "width" || key === "height") {
    const tag = el2.tagName;
    if (tag === "IMG" || tag === "VIDEO" || tag === "CANVAS" || tag === "SOURCE") {
      return false;
    }
  }
  if (isNativeOn(key) && isString$3(value)) {
    return false;
  }
  return key in el2;
}
const positionMap = /* @__PURE__ */ new WeakMap();
const newPositionMap = /* @__PURE__ */ new WeakMap();
const moveCbKey = Symbol("_moveCb");
const enterCbKey = Symbol("_enterCb");
const decorate = (t2) => {
  delete t2.props.mode;
  return t2;
};
const TransitionGroupImpl = /* @__PURE__ */ decorate({
  name: "TransitionGroup",
  props: /* @__PURE__ */ extend$1({}, TransitionPropsValidators, {
    tag: String,
    moveClass: String
  }),
  setup(props, { slots }) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    let prevChildren;
    let children;
    onUpdated(() => {
      if (!prevChildren.length) {
        return;
      }
      const moveClass = props.moveClass || `${props.name || "v"}-move`;
      if (!hasCSSTransform(
        prevChildren[0].el,
        instance.vnode.el,
        moveClass
      )) {
        return;
      }
      prevChildren.forEach(callPendingCbs);
      prevChildren.forEach(recordPosition);
      const movedChildren = prevChildren.filter(applyTranslation);
      forceReflow();
      movedChildren.forEach((c2) => {
        const el2 = c2.el;
        const style = el2.style;
        addTransitionClass(el2, moveClass);
        style.transform = style.webkitTransform = style.transitionDuration = "";
        const cb2 = el2[moveCbKey] = (e2) => {
          if (e2 && e2.target !== el2) {
            return;
          }
          if (!e2 || /transform$/.test(e2.propertyName)) {
            el2.removeEventListener("transitionend", cb2);
            el2[moveCbKey] = null;
            removeTransitionClass(el2, moveClass);
          }
        };
        el2.addEventListener("transitionend", cb2);
      });
    });
    return () => {
      const rawProps = toRaw(props);
      const cssTransitionProps = resolveTransitionProps(rawProps);
      let tag = rawProps.tag || Fragment;
      prevChildren = [];
      if (children) {
        for (let i2 = 0; i2 < children.length; i2++) {
          const child = children[i2];
          if (child.el && child.el instanceof Element) {
            prevChildren.push(child);
            setTransitionHooks(
              child,
              resolveTransitionHooks(
                child,
                cssTransitionProps,
                state,
                instance
              )
            );
            positionMap.set(
              child,
              child.el.getBoundingClientRect()
            );
          }
        }
      }
      children = slots.default ? getTransitionRawChildren(slots.default()) : [];
      for (let i2 = 0; i2 < children.length; i2++) {
        const child = children[i2];
        if (child.key != null) {
          setTransitionHooks(
            child,
            resolveTransitionHooks(child, cssTransitionProps, state, instance)
          );
        }
      }
      return createVNode(tag, null, children);
    };
  }
});
const TransitionGroup = TransitionGroupImpl;
function callPendingCbs(c2) {
  const el2 = c2.el;
  if (el2[moveCbKey]) {
    el2[moveCbKey]();
  }
  if (el2[enterCbKey]) {
    el2[enterCbKey]();
  }
}
function recordPosition(c2) {
  newPositionMap.set(c2, c2.el.getBoundingClientRect());
}
function applyTranslation(c2) {
  const oldPos = positionMap.get(c2);
  const newPos = newPositionMap.get(c2);
  const dx = oldPos.left - newPos.left;
  const dy = oldPos.top - newPos.top;
  if (dx || dy) {
    const s2 = c2.el.style;
    s2.transform = s2.webkitTransform = `translate(${dx}px,${dy}px)`;
    s2.transitionDuration = "0s";
    return c2;
  }
}
function hasCSSTransform(el2, root2, moveClass) {
  const clone2 = el2.cloneNode();
  const _vtc = el2[vtcKey];
  if (_vtc) {
    _vtc.forEach((cls) => {
      cls.split(/\s+/).forEach((c2) => c2 && clone2.classList.remove(c2));
    });
  }
  moveClass.split(/\s+/).forEach((c2) => c2 && clone2.classList.add(c2));
  clone2.style.display = "none";
  const container = root2.nodeType === 1 ? root2 : root2.parentNode;
  container.appendChild(clone2);
  const { hasTransform } = getTransitionInfo(clone2);
  container.removeChild(clone2);
  return hasTransform;
}
const getModelAssigner = (vnode) => {
  const fn2 = vnode.props["onUpdate:modelValue"] || false;
  return isArray$4(fn2) ? (value) => invokeArrayFns(fn2, value) : fn2;
};
function onCompositionStart(e2) {
  e2.target.composing = true;
}
function onCompositionEnd(e2) {
  const target = e2.target;
  if (target.composing) {
    target.composing = false;
    target.dispatchEvent(new Event("input"));
  }
}
const assignKey = Symbol("_assign");
const vModelText = {
  created(el2, { modifiers: { lazy, trim: trim2, number: number5 } }, vnode) {
    el2[assignKey] = getModelAssigner(vnode);
    const castToNumber = number5 || vnode.props && vnode.props.type === "number";
    addEventListener(el2, lazy ? "change" : "input", (e2) => {
      if (e2.target.composing)
        return;
      let domValue = el2.value;
      if (trim2) {
        domValue = domValue.trim();
      }
      if (castToNumber) {
        domValue = looseToNumber(domValue);
      }
      el2[assignKey](domValue);
    });
    if (trim2) {
      addEventListener(el2, "change", () => {
        el2.value = el2.value.trim();
      });
    }
    if (!lazy) {
      addEventListener(el2, "compositionstart", onCompositionStart);
      addEventListener(el2, "compositionend", onCompositionEnd);
      addEventListener(el2, "change", onCompositionEnd);
    }
  },
  // set value on mounted so it's after min/max for type="range"
  mounted(el2, { value }) {
    el2.value = value == null ? "" : value;
  },
  beforeUpdate(el2, { value, oldValue, modifiers: { lazy, trim: trim2, number: number5 } }, vnode) {
    el2[assignKey] = getModelAssigner(vnode);
    if (el2.composing)
      return;
    const elValue = (number5 || el2.type === "number") && !/^0\d/.test(el2.value) ? looseToNumber(el2.value) : el2.value;
    const newValue = value == null ? "" : value;
    if (elValue === newValue) {
      return;
    }
    if (document.activeElement === el2 && el2.type !== "range") {
      if (lazy && value === oldValue) {
        return;
      }
      if (trim2 && el2.value.trim() === newValue) {
        return;
      }
    }
    el2.value = newValue;
  }
};
const vModelRadio = {
  created(el2, { value }, vnode) {
    el2.checked = looseEqual(value, vnode.props.value);
    el2[assignKey] = getModelAssigner(vnode);
    addEventListener(el2, "change", () => {
      el2[assignKey](getValue$2(el2));
    });
  },
  beforeUpdate(el2, { value, oldValue }, vnode) {
    el2[assignKey] = getModelAssigner(vnode);
    if (value !== oldValue) {
      el2.checked = looseEqual(value, vnode.props.value);
    }
  }
};
function getValue$2(el2) {
  return "_value" in el2 ? el2._value : el2.value;
}
const systemModifiers = ["ctrl", "shift", "alt", "meta"];
const modifierGuards = {
  stop: (e2) => e2.stopPropagation(),
  prevent: (e2) => e2.preventDefault(),
  self: (e2) => e2.target !== e2.currentTarget,
  ctrl: (e2) => !e2.ctrlKey,
  shift: (e2) => !e2.shiftKey,
  alt: (e2) => !e2.altKey,
  meta: (e2) => !e2.metaKey,
  left: (e2) => "button" in e2 && e2.button !== 0,
  middle: (e2) => "button" in e2 && e2.button !== 1,
  right: (e2) => "button" in e2 && e2.button !== 2,
  exact: (e2, modifiers) => systemModifiers.some((m2) => e2[`${m2}Key`] && !modifiers.includes(m2))
};
const withModifiers = (fn2, modifiers) => {
  const cache2 = fn2._withMods || (fn2._withMods = {});
  const cacheKey = modifiers.join(".");
  return cache2[cacheKey] || (cache2[cacheKey] = (event, ...args) => {
    for (let i2 = 0; i2 < modifiers.length; i2++) {
      const guard = modifierGuards[modifiers[i2]];
      if (guard && guard(event, modifiers))
        return;
    }
    return fn2(event, ...args);
  });
};
const keyNames = {
  esc: "escape",
  space: " ",
  up: "arrow-up",
  left: "arrow-left",
  right: "arrow-right",
  down: "arrow-down",
  delete: "backspace"
};
const withKeys = (fn2, modifiers) => {
  const cache2 = fn2._withKeys || (fn2._withKeys = {});
  const cacheKey = modifiers.join(".");
  return cache2[cacheKey] || (cache2[cacheKey] = (event) => {
    if (!("key" in event)) {
      return;
    }
    const eventKey = hyphenate(event.key);
    if (modifiers.some(
      (k) => k === eventKey || keyNames[k] === eventKey
    )) {
      return fn2(event);
    }
  });
};
const rendererOptions = /* @__PURE__ */ extend$1({ patchProp }, nodeOps);
let renderer;
function ensureRenderer() {
  return renderer || (renderer = createRenderer(rendererOptions));
}
const render = (...args) => {
  ensureRenderer().render(...args);
};
const createApp = (...args) => {
  const app = ensureRenderer().createApp(...args);
  const { mount } = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (!container)
      return;
    const component = app._component;
    if (!isFunction$3(component) && !component.render && !component.template) {
      component.template = container.innerHTML;
    }
    if (container.nodeType === 1) {
      container.textContent = "";
    }
    const proxy = mount(container, false, resolveRootNamespace(container));
    if (container instanceof Element) {
      container.removeAttribute("v-cloak");
      container.setAttribute("data-v-app", "");
    }
    return proxy;
  };
  return app;
};
function resolveRootNamespace(container) {
  if (container instanceof SVGElement) {
    return "svg";
  }
  if (typeof MathMLElement === "function" && container instanceof MathMLElement) {
    return "mathml";
  }
}
function normalizeContainer(container) {
  if (isString$3(container)) {
    const res = document.querySelector(container);
    return res;
  }
  return container;
}
/*!
 * pinia v3.0.1
 * (c) 2025 Eduardo San Martin Morote
 * @license MIT
 */
let activePinia;
const setActivePinia = (pinia2) => activePinia = pinia2;
const piniaSymbol = (
  /* istanbul ignore next */
  Symbol()
);
function isPlainObject$2(o2) {
  return o2 && typeof o2 === "object" && Object.prototype.toString.call(o2) === "[object Object]" && typeof o2.toJSON !== "function";
}
var MutationType;
(function(MutationType2) {
  MutationType2["direct"] = "direct";
  MutationType2["patchObject"] = "patch object";
  MutationType2["patchFunction"] = "patch function";
})(MutationType || (MutationType = {}));
function createPinia() {
  const scope = effectScope(true);
  const state = scope.run(() => ref({}));
  let _p2 = [];
  let toBeInstalled = [];
  const pinia2 = markRaw({
    install(app) {
      setActivePinia(pinia2);
      pinia2._a = app;
      app.provide(piniaSymbol, pinia2);
      app.config.globalProperties.$pinia = pinia2;
      toBeInstalled.forEach((plugin) => _p2.push(plugin));
      toBeInstalled = [];
    },
    use(plugin) {
      if (!this._a) {
        toBeInstalled.push(plugin);
      } else {
        _p2.push(plugin);
      }
      return this;
    },
    _p: _p2,
    // it's actually undefined here
    // @ts-expect-error
    _a: null,
    _e: scope,
    _s: /* @__PURE__ */ new Map(),
    state
  });
  return pinia2;
}
const noop$3 = () => {
};
function addSubscription(subscriptions, callback, detached, onCleanup = noop$3) {
  subscriptions.push(callback);
  const removeSubscription = () => {
    const idx = subscriptions.indexOf(callback);
    if (idx > -1) {
      subscriptions.splice(idx, 1);
      onCleanup();
    }
  };
  if (!detached && getCurrentScope()) {
    onScopeDispose(removeSubscription);
  }
  return removeSubscription;
}
function triggerSubscriptions(subscriptions, ...args) {
  subscriptions.slice().forEach((callback) => {
    callback(...args);
  });
}
const fallbackRunWithContext = (fn2) => fn2();
const ACTION_MARKER = Symbol();
const ACTION_NAME = Symbol();
function mergeReactiveObjects(target, patchToApply) {
  if (target instanceof Map && patchToApply instanceof Map) {
    patchToApply.forEach((value, key) => target.set(key, value));
  } else if (target instanceof Set && patchToApply instanceof Set) {
    patchToApply.forEach(target.add, target);
  }
  for (const key in patchToApply) {
    if (!patchToApply.hasOwnProperty(key))
      continue;
    const subPatch = patchToApply[key];
    const targetValue = target[key];
    if (isPlainObject$2(targetValue) && isPlainObject$2(subPatch) && target.hasOwnProperty(key) && !isRef(subPatch) && !isReactive(subPatch)) {
      target[key] = mergeReactiveObjects(targetValue, subPatch);
    } else {
      target[key] = subPatch;
    }
  }
  return target;
}
const skipHydrateSymbol = (
  /* istanbul ignore next */
  Symbol()
);
function shouldHydrate(obj) {
  return !isPlainObject$2(obj) || !obj.hasOwnProperty(skipHydrateSymbol);
}
const { assign: assign$2 } = Object;
function isComputed(o2) {
  return !!(isRef(o2) && o2.effect);
}
function createOptionsStore(id2, options, pinia2, hot) {
  const { state, actions, getters } = options;
  const initialState = pinia2.state.value[id2];
  let store;
  function setup() {
    if (!initialState && true) {
      pinia2.state.value[id2] = state ? state() : {};
    }
    const localState = toRefs(pinia2.state.value[id2]);
    return assign$2(localState, actions, Object.keys(getters || {}).reduce((computedGetters, name) => {
      computedGetters[name] = markRaw(computed(() => {
        setActivePinia(pinia2);
        const store2 = pinia2._s.get(id2);
        return getters[name].call(store2, store2);
      }));
      return computedGetters;
    }, {}));
  }
  store = createSetupStore(id2, setup, options, pinia2, hot, true);
  return store;
}
function createSetupStore($id, setup, options = {}, pinia2, hot, isOptionsStore) {
  let scope;
  const optionsForPlugin = assign$2({ actions: {} }, options);
  const $subscribeOptions = { deep: true };
  let isListening;
  let isSyncListening;
  let subscriptions = [];
  let actionSubscriptions = [];
  let debuggerEvents;
  const initialState = pinia2.state.value[$id];
  if (!isOptionsStore && !initialState && true) {
    pinia2.state.value[$id] = {};
  }
  ref({});
  let activeListener;
  function $patch(partialStateOrMutator) {
    let subscriptionMutation;
    isListening = isSyncListening = false;
    if (typeof partialStateOrMutator === "function") {
      partialStateOrMutator(pinia2.state.value[$id]);
      subscriptionMutation = {
        type: MutationType.patchFunction,
        storeId: $id,
        events: debuggerEvents
      };
    } else {
      mergeReactiveObjects(pinia2.state.value[$id], partialStateOrMutator);
      subscriptionMutation = {
        type: MutationType.patchObject,
        payload: partialStateOrMutator,
        storeId: $id,
        events: debuggerEvents
      };
    }
    const myListenerId = activeListener = Symbol();
    nextTick().then(() => {
      if (activeListener === myListenerId) {
        isListening = true;
      }
    });
    isSyncListening = true;
    triggerSubscriptions(subscriptions, subscriptionMutation, pinia2.state.value[$id]);
  }
  const $reset = isOptionsStore ? function $reset2() {
    const { state } = options;
    const newState = state ? state() : {};
    this.$patch(($state) => {
      assign$2($state, newState);
    });
  } : (
    /* istanbul ignore next */
    noop$3
  );
  function $dispose() {
    scope.stop();
    subscriptions = [];
    actionSubscriptions = [];
    pinia2._s.delete($id);
  }
  const action = (fn2, name = "") => {
    if (ACTION_MARKER in fn2) {
      fn2[ACTION_NAME] = name;
      return fn2;
    }
    const wrappedAction = function() {
      setActivePinia(pinia2);
      const args = Array.from(arguments);
      const afterCallbackList = [];
      const onErrorCallbackList = [];
      function after(callback) {
        afterCallbackList.push(callback);
      }
      function onError(callback) {
        onErrorCallbackList.push(callback);
      }
      triggerSubscriptions(actionSubscriptions, {
        args,
        name: wrappedAction[ACTION_NAME],
        store,
        after,
        onError
      });
      let ret;
      try {
        ret = fn2.apply(this && this.$id === $id ? this : store, args);
      } catch (error) {
        triggerSubscriptions(onErrorCallbackList, error);
        throw error;
      }
      if (ret instanceof Promise) {
        return ret.then((value) => {
          triggerSubscriptions(afterCallbackList, value);
          return value;
        }).catch((error) => {
          triggerSubscriptions(onErrorCallbackList, error);
          return Promise.reject(error);
        });
      }
      triggerSubscriptions(afterCallbackList, ret);
      return ret;
    };
    wrappedAction[ACTION_MARKER] = true;
    wrappedAction[ACTION_NAME] = name;
    return wrappedAction;
  };
  const partialStore = {
    _p: pinia2,
    // _s: scope,
    $id,
    $onAction: addSubscription.bind(null, actionSubscriptions),
    $patch,
    $reset,
    $subscribe(callback, options2 = {}) {
      const removeSubscription = addSubscription(subscriptions, callback, options2.detached, () => stopWatcher());
      const stopWatcher = scope.run(() => watch(() => pinia2.state.value[$id], (state) => {
        if (options2.flush === "sync" ? isSyncListening : isListening) {
          callback({
            storeId: $id,
            type: MutationType.direct,
            events: debuggerEvents
          }, state);
        }
      }, assign$2({}, $subscribeOptions, options2)));
      return removeSubscription;
    },
    $dispose
  };
  const store = reactive(partialStore);
  pinia2._s.set($id, store);
  const runWithContext = pinia2._a && pinia2._a.runWithContext || fallbackRunWithContext;
  const setupStore = runWithContext(() => pinia2._e.run(() => (scope = effectScope()).run(() => setup({ action }))));
  for (const key in setupStore) {
    const prop = setupStore[key];
    if (isRef(prop) && !isComputed(prop) || isReactive(prop)) {
      if (!isOptionsStore) {
        if (initialState && shouldHydrate(prop)) {
          if (isRef(prop)) {
            prop.value = initialState[key];
          } else {
            mergeReactiveObjects(prop, initialState[key]);
          }
        }
        pinia2.state.value[$id][key] = prop;
      }
    } else if (typeof prop === "function") {
      const actionValue = action(prop, key);
      setupStore[key] = actionValue;
      optionsForPlugin.actions[key] = prop;
    } else
      ;
  }
  assign$2(store, setupStore);
  assign$2(toRaw(store), setupStore);
  Object.defineProperty(store, "$state", {
    get: () => pinia2.state.value[$id],
    set: (state) => {
      $patch(($state) => {
        assign$2($state, state);
      });
    }
  });
  pinia2._p.forEach((extender) => {
    {
      assign$2(store, scope.run(() => extender({
        store,
        app: pinia2._a,
        pinia: pinia2,
        options: optionsForPlugin
      })));
    }
  });
  if (initialState && isOptionsStore && options.hydrate) {
    options.hydrate(store.$state, initialState);
  }
  isListening = true;
  isSyncListening = true;
  return store;
}
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function defineStore(id2, setup, setupOptions) {
  let options;
  const isSetupStore = typeof setup === "function";
  options = isSetupStore ? setupOptions : setup;
  function useStore(pinia2, hot) {
    const hasContext = hasInjectionContext();
    pinia2 = // in test mode, ignore the argument provided as we can always retrieve a
    // pinia instance with getActivePinia()
    pinia2 || (hasContext ? inject(piniaSymbol, null) : null);
    if (pinia2)
      setActivePinia(pinia2);
    pinia2 = activePinia;
    if (!pinia2._s.has(id2)) {
      if (isSetupStore) {
        createSetupStore(id2, setup, options, pinia2);
      } else {
        createOptionsStore(id2, options, pinia2);
      }
    }
    const store = pinia2._s.get(id2);
    return store;
  }
  useStore.$id = id2;
  return useStore;
}
const scriptRel = function detectScriptRel() {
  const relList = typeof document !== "undefined" && document.createElement("link").relList;
  return relList && relList.supports && relList.supports("modulepreload") ? "modulepreload" : "preload";
}();
const assetsURL = function(dep, importerUrl) {
  return new URL(dep, importerUrl).href;
};
const seen = {};
const __vitePreload = function preload(baseModule, deps, importerUrl) {
  let promise = Promise.resolve();
  if (deps && deps.length > 0) {
    const links = document.getElementsByTagName("link");
    promise = Promise.all(deps.map((dep) => {
      dep = assetsURL(dep, importerUrl);
      if (dep in seen)
        return;
      seen[dep] = true;
      const isCss = dep.endsWith(".css");
      const cssSelector = isCss ? '[rel="stylesheet"]' : "";
      const isBaseRelative = !!importerUrl;
      if (isBaseRelative) {
        for (let i2 = links.length - 1; i2 >= 0; i2--) {
          const link2 = links[i2];
          if (link2.href === dep && (!isCss || link2.rel === "stylesheet")) {
            return;
          }
        }
      } else if (document.querySelector(`link[href="${dep}"]${cssSelector}`)) {
        return;
      }
      const link = document.createElement("link");
      link.rel = isCss ? "stylesheet" : scriptRel;
      if (!isCss) {
        link.as = "script";
        link.crossOrigin = "";
      }
      link.href = dep;
      document.head.appendChild(link);
      if (isCss) {
        return new Promise((res, rej) => {
          link.addEventListener("load", res);
          link.addEventListener("error", () => rej(new Error(`Unable to preload CSS for ${dep}`)));
        });
      }
    }));
  }
  return promise.then(() => baseModule()).catch((err) => {
    const e2 = new Event("vite:preloadError", { cancelable: true });
    e2.payload = err;
    window.dispatchEvent(e2);
    if (!e2.defaultPrevented) {
      throw err;
    }
  });
};
var b0 = Object.defineProperty;
var T0 = (t2, e2, n) => e2 in t2 ? b0(t2, e2, { enumerable: true, configurable: true, writable: true, value: n }) : t2[e2] = n;
var Mn = (t2, e2, n) => T0(t2, typeof e2 != "symbol" ? e2 + "" : e2, n);
const Rn = (t2, e2) => {
  const n = t2.__vccOpts || t2;
  for (const [i2, r2] of e2)
    n[i2] = r2;
  return n;
}, x0 = ["width", "height", "viewBox"], L0 = {
  key: 0,
  fill: "none",
  stroke: "currentColor",
  "stroke-linecap": "round",
  "stroke-linejoin": "round",
  "stroke-width": "4"
}, M0 = {
  key: 1,
  fill: "none",
  stroke: "currentColor",
  "stroke-linecap": "round",
  "stroke-linejoin": "round",
  "stroke-width": "4",
  d: "M36 18L24 30L12 18"
}, w0 = {
  key: 2,
  fill: "none",
  stroke: "currentColor",
  "stroke-linejoin": "round",
  "stroke-width": "4"
}, k0 = {
  key: 3,
  fill: "none",
  stroke: "currentColor",
  "stroke-linejoin": "round",
  "stroke-width": "4"
}, P0 = {
  key: 4,
  fill: "none",
  stroke: "currentColor",
  "stroke-linejoin": "round",
  "stroke-width": "4"
}, F0 = {
  key: 5,
  fill: "none",
  stroke: "currentColor",
  "stroke-linecap": "round",
  "stroke-linejoin": "round",
  "stroke-width": "4",
  d: "M24 4v4m10-1.32l-2 3.464M41.32 14l-3.464 2M44 24h-4m1.32 10l-3.464-2M34 41.32l-2-3.464M24 44v-4m-10 1.32l2-3.464M6.68 34l3.464-2M4 24h4M6.68 14l3.464 2M14 6.68l2 3.464"
}, U0 = {
  key: 6,
  d: "M512 42.666667a128 128 0 0 1 125.866667 151.424l88.405333 51.029333a128 128 0 1 1 124.032 217.984v97.834667a128.042667 128.042667 0 1 1-124.032 217.941333l-88.405333 51.029333a128 128 0 1 1-251.733334 0.042667l-88.448-51.029333a128 128 0 1 1-123.989333-218.026667v-97.834667a128.042667 128.042667 0 1 1 123.989333-218.026666L386.133333 194.090667A128 128 0 0 1 512 42.666667z m0 768a42.666667 42.666667 0 1 0 0 85.333333 42.666667 42.666667 0 0 0 0-85.333333z m0-512a127.488 127.488 0 0 1-83.2-30.72L339.541333 319.573333a128.042667 128.042667 0 0 1-80.384 141.354667v102.144a128.042667 128.042667 0 0 1 80.384 141.397333l89.344 51.584A127.488 127.488 0 0 1 512 725.333333c31.744 0 60.757333 11.52 83.114667 30.677334l89.386666-51.541334a128.042667 128.042667 0 0 1 80.384-141.354666v-102.186667a128.042667 128.042667 0 0 1-80.384-141.397333l-89.386666-51.541334A127.488 127.488 0 0 1 512 298.666667z m298.666667 341.333333a42.666667 42.666667 0 1 0 0 85.333333 42.666667 42.666667 0 0 0 0-85.333333zM213.333333 640a42.666667 42.666667 0 1 0 0 85.333333 42.666667 42.666667 0 0 0 0-85.333333z m298.666667-256a128 128 0 1 1 0 256 128 128 0 0 1 0-256z m0 85.333333a42.666667 42.666667 0 1 0 0 85.333334 42.666667 42.666667 0 0 0 0-85.333334z m298.666667-170.666666a42.666667 42.666667 0 1 0 0 85.333333 42.666667 42.666667 0 0 0 0-85.333333zM213.333333 298.666667a42.666667 42.666667 0 1 0 0 85.333333 42.666667 42.666667 0 0 0 0-85.333333z m298.666667-170.666667a42.666667 42.666667 0 1 0 0 85.333333 42.666667 42.666667 0 0 0 0-85.333333z",
  "p-id": "7554"
}, B0 = {
  key: 7,
  fill: "none",
  stroke: "currentColor",
  "stroke-linecap": "round",
  "stroke-linejoin": "round",
  "stroke-width": "4",
  d: "M42 8v16M6 24v16m36-16c0-9.941-8.059-18-18-18a17.95 17.95 0 0 0-12.952 5.5M6 24c0 9.941 8.059 18 18 18a17.94 17.94 0 0 0 12.5-5.048"
}, G0 = {
  key: 8,
  fill: "none",
  stroke: "currentColor",
  "stroke-linejoin": "round",
  "stroke-width": "4"
}, Y0 = {
  key: 9,
  fill: "none",
  stroke: "currentColor",
  "stroke-linecap": "round",
  "stroke-linejoin": "round",
  "stroke-width": "4",
  d: "M24 6v36M12 18L24 6l12 12"
}, q0 = {
  key: 10,
  fill: "none",
  stroke: "currentColor",
  "stroke-linecap": "round",
  "stroke-linejoin": "round",
  "stroke-width": "4",
  d: "M24.707 9.565L9.858 24.415a9 9 0 0 0 0 12.727v0a9 9 0 0 0 12.728 0l17.678-17.677a6 6 0 0 0 0-8.486v0a6 6 0 0 0-8.486 0L14.101 28.657a3 3 0 0 0 0 4.243v0a3 3 0 0 0 4.242 0l14.85-14.85"
}, V0 = {
  key: 11,
  fill: "none",
  stroke: "currentColor",
  "stroke-linecap": "round",
  "stroke-linejoin": "round",
  "stroke-width": "4"
}, H0 = {
  key: 12,
  fill: "none",
  stroke: "currentColor",
  "stroke-linecap": "round",
  "stroke-linejoin": "round",
  "stroke-width": "4",
  d: "M22 42H6V26M26 6h16v16"
}, z0 = {
  key: 13,
  fill: "none",
  stroke: "currentColor",
  "stroke-linecap": "round",
  "stroke-linejoin": "round",
  "stroke-width": "4",
  d: "M44 20H28V4M4 28h16v16"
}, $0 = {
  name: "xIcon"
}, W0 = /* @__PURE__ */ Object.assign($0, {
  props: {
    name: {
      type: String,
      default: ""
    },
    size: {
      type: [Number, String],
      default: 18
    },
    color: {
      type: String,
      default: "currentColor"
    }
  },
  setup(t2) {
    const e2 = t2, n = computed(() => e2.name === "down" ? "0 0 48 48" : e2.name === "think" ? "0 0 1024 1024" : "0 0 48 48");
    return (i2, r2) => (openBlock(), createElementBlock("svg", {
      width: t2.size,
      height: t2.size,
      viewBox: n.value,
      xmlns: "http://www.w3.org/2000/svg",
      style: normalizeStyle({ color: t2.color })
    }, [
      t2.name === "download" ? (openBlock(), createElementBlock("g", L0, r2[0] || (r2[0] = [
        createBaseVNode("path", { d: "M6 24.008V42h36V24" }, null, -1),
        createBaseVNode("path", { d: "m33 23l-9 9l-9-9m8.992-17v26" }, null, -1)
      ]))) : t2.name === "down" ? (openBlock(), createElementBlock("path", M0)) : t2.name === "zoom-out" ? (openBlock(), createElementBlock("g", w0, r2[1] || (r2[1] = [
        createBaseVNode("path", { d: "M21 38c9.389 0 17-7.611 17-17S30.389 4 21 4S4 11.611 4 21s7.611 17 17 17Z" }, null, -1),
        createBaseVNode("path", {
          "stroke-linecap": "round",
          d: "M15 21h12m6.222 12.222l8.485 8.485"
        }, null, -1)
      ]))) : t2.name === "zoom-in" ? (openBlock(), createElementBlock("g", k0, r2[2] || (r2[2] = [
        createBaseVNode("path", { d: "M21 38c9.389 0 17-7.611 17-17S30.389 4 21 4S4 11.611 4 21s7.611 17 17 17Z" }, null, -1),
        createBaseVNode("path", {
          "stroke-linecap": "round",
          d: "M21 15v12m-5.984-5.984L27 21m6.222 12.222l8.485 8.485"
        }, null, -1)
      ]))) : t2.name === "copy" ? (openBlock(), createElementBlock("g", P0, r2[3] || (r2[3] = [
        createBaseVNode("path", {
          "stroke-linecap": "round",
          d: "M13 12.432v-4.62A2.813 2.813 0 0 1 15.813 5h24.374A2.813 2.813 0 0 1 43 7.813v24.375A2.813 2.813 0 0 1 40.188 35h-4.672"
        }, null, -1),
        createBaseVNode("path", { d: "M32.188 13H7.811A2.813 2.813 0 0 0 5 15.813v24.374A2.813 2.813 0 0 0 7.813 43h24.375A2.813 2.813 0 0 0 35 40.188V15.811A2.813 2.813 0 0 0 32.188 13Z" }, null, -1)
      ]))) : t2.name === "loading" ? (openBlock(), createElementBlock("path", F0)) : t2.name === "think" ? (openBlock(), createElementBlock("path", U0)) : t2.name === "refresh" ? (openBlock(), createElementBlock("path", B0)) : t2.name === "stop" ? (openBlock(), createElementBlock("g", G0, r2[4] || (r2[4] = [
        createBaseVNode("path", { d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4S4 12.954 4 24s8.954 20 20 20Z" }, null, -1),
        createBaseVNode("path", {
          "stroke-linecap": "round",
          d: "M19 18v12m10-12v12"
        }, null, -1)
      ]))) : t2.name === "top" ? (openBlock(), createElementBlock("path", Y0)) : t2.name === "attachment" ? (openBlock(), createElementBlock("path", q0)) : t2.name === "delete" ? (openBlock(), createElementBlock("g", V0, r2[5] || (r2[5] = [
        createBaseVNode("path", { d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4S4 12.954 4 24s8.954 20 20 20Z" }, null, -1),
        createBaseVNode("path", {
          "stroke-linecap": "round",
          d: "M29.657 18.343L18.343 29.657m0-11.314l11.314 11.314"
        }, null, -1)
      ]))) : t2.name === "expand" ? (openBlock(), createElementBlock("path", H0)) : t2.name === "collapse" ? (openBlock(), createElementBlock("path", z0)) : createCommentVNode("", true)
    ], 12, x0));
  }
}), At = /* @__PURE__ */ Rn(W0, [["__scopeId", "data-v-b0b8295d"]]), K0 = { class: "x-file-icon__extension" }, Q0 = {
  name: "xFileIcon"
}, X0 = /* @__PURE__ */ Object.assign(Q0, {
  props: {
    name: {
      type: String,
      required: true
    },
    mimeType: {
      type: String,
      default: ""
    }
  },
  setup(t2) {
    const e2 = t2, n = computed(() => {
      var a2;
      return ((a2 = e2.name.split(".").pop()) == null ? void 0 : a2.toLowerCase()) || "";
    }), i2 = computed(() => {
      const r2 = n.value, a2 = e2.mimeType.toLowerCase();
      return a2.startsWith("image/") || ["jpg", "jpeg", "png", "gif", "bmp", "webp", "svg"].includes(r2) ? "x-file-icon--image" : ["doc", "docx", "pdf", "txt", "rtf", "odt"].includes(r2) ? "x-file-icon--document" : ["xls", "xlsx", "csv"].includes(r2) ? "x-file-icon--spreadsheet" : ["ppt", "pptx"].includes(r2) ? "x-file-icon--presentation" : a2.startsWith("audio/") || ["mp3", "wav", "ogg", "m4a"].includes(r2) ? "x-file-icon--audio" : a2.startsWith("video/") || ["mp4", "avi", "mov", "wmv"].includes(r2) ? "x-file-icon--video" : ["zip", "rar", "7z", "tar", "gz"].includes(r2) ? "x-file-icon--archive" : ["js", "ts", "py", "java", "cpp", "cs", "php", "html", "css", "vue", "jsx", "tsx"].includes(r2) ? "x-file-icon--code" : "x-file-icon--default";
    });
    return (r2, a2) => (openBlock(), createElementBlock("div", {
      class: normalizeClass(["x-file-icon", i2.value])
    }, [
      createBaseVNode("div", K0, toDisplayString$1(n.value), 1)
    ], 2));
  }
}), En = /* @__PURE__ */ Rn(X0, [["__scopeId", "data-v-62e16e6c"]]);
/*!
  * shared v11.1.3
  * (c) 2025 kazuya kawaguchi
  * Released under the MIT License.
  */
const ht$1 = typeof window < "u";
const Lt = (t2, e2 = false) => e2 ? Symbol.for(t2) : Symbol(t2), J0 = (t2, e2, n) => j0({ l: t2, k: e2, s: n }), j0 = (t2) => JSON.stringify(t2).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029").replace(/\u0027/g, "\\u0027"), He$1 = (t2) => typeof t2 == "number" && isFinite(t2), eE = (t2) => fl(t2) === "[object Date]", Sn = (t2) => fl(t2) === "[object RegExp]", Rr = (t2) => Ee$1(t2) && Object.keys(t2).length === 0, Qe$1 = Object.assign, tE = Object.create, ye$1 = (t2 = null) => tE(t2);
let nc;
const rn$1 = () => nc || (nc = typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : typeof window < "u" ? window : typeof global < "u" ? global : ye$1());
function rc(t2) {
  return t2.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;");
}
const nE = Object.prototype.hasOwnProperty;
function Tt$1(t2, e2) {
  return nE.call(t2, e2);
}
const qe = Array.isArray, we$1 = (t2) => typeof t2 == "function", $ = (t2) => typeof t2 == "string", be$1 = (t2) => typeof t2 == "boolean", Se$1 = (t2) => t2 !== null && typeof t2 == "object", rE = (t2) => Se$1(t2) && we$1(t2.then) && we$1(t2.catch), um = Object.prototype.toString, fl = (t2) => um.call(t2), Ee$1 = (t2) => fl(t2) === "[object Object]", aE = (t2) => t2 == null ? "" : qe(t2) || Ee$1(t2) && t2.toString === um ? JSON.stringify(t2, null, 2) : String(t2);
function Sl(t2, e2 = "") {
  return t2.reduce((n, i2, r2) => r2 === 0 ? n + i2 : n + e2 + i2, "");
}
function Zt$1(t2, e2) {
  typeof console < "u" && (console.warn("[intlify] " + t2), e2 && console.warn(e2.stack));
}
const ir = (t2) => !Se$1(t2) || qe(t2);
function _r(t2, e2) {
  if (ir(t2) || ir(e2))
    throw new Error("Invalid value");
  const n = [{ src: t2, des: e2 }];
  for (; n.length; ) {
    const { src: i2, des: r2 } = n.pop();
    Object.keys(i2).forEach((a2) => {
      a2 !== "__proto__" && (Se$1(i2[a2]) && !Se$1(r2[a2]) && (r2[a2] = Array.isArray(i2[a2]) ? [] : ye$1()), ir(r2[a2]) || ir(i2[a2]) ? r2[a2] = i2[a2] : n.push({ src: i2[a2], des: r2[a2] }));
    });
  }
}
/*!
  * message-compiler v11.1.3
  * (c) 2025 kazuya kawaguchi
  * Released under the MIT License.
  */
function oE(t2, e2, n) {
  return { line: t2, column: e2, offset: n };
}
function js(t2, e2, n) {
  return { start: t2, end: e2 };
}
const te$1 = {
  // tokenizer error codes
  EXPECTED_TOKEN: 1,
  INVALID_TOKEN_IN_PLACEHOLDER: 2,
  UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER: 3,
  UNKNOWN_ESCAPE_SEQUENCE: 4,
  INVALID_UNICODE_ESCAPE_SEQUENCE: 5,
  UNBALANCED_CLOSING_BRACE: 6,
  UNTERMINATED_CLOSING_BRACE: 7,
  EMPTY_PLACEHOLDER: 8,
  NOT_ALLOW_NEST_PLACEHOLDER: 9,
  INVALID_LINKED_FORMAT: 10,
  // parser error codes
  MUST_HAVE_MESSAGES_IN_PLURAL: 11,
  UNEXPECTED_EMPTY_LINKED_MODIFIER: 12,
  UNEXPECTED_EMPTY_LINKED_KEY: 13,
  UNEXPECTED_LEXICAL_ANALYSIS: 14,
  // generator error codes
  UNHANDLED_CODEGEN_NODE_TYPE: 15,
  // minifier error codes
  UNHANDLED_MINIFIER_NODE_TYPE: 16
}, sE = 17;
function Cn(t2, e2, n = {}) {
  const { domain: i2, messages: r2, args: a2 } = n, s2 = t2, o2 = new SyntaxError(String(s2));
  return o2.code = t2, e2 && (o2.location = e2), o2.domain = i2, o2;
}
function cE(t2) {
  throw t2;
}
const Gt$1 = " ", dE = "\r", et$1 = `
`, pE = "\u2028", mE = "\u2029";
function EE(t2) {
  const e2 = t2;
  let n = 0, i2 = 1, r2 = 1, a2 = 0;
  const s2 = (C2) => e2[C2] === dE && e2[C2 + 1] === et$1, o2 = (C2) => e2[C2] === et$1, l2 = (C2) => e2[C2] === mE, u2 = (C2) => e2[C2] === pE, _ = (C2) => s2(C2) || o2(C2) || l2(C2) || u2(C2), d2 = () => n, f2 = () => i2, b = () => r2, c2 = () => a2, E2 = (C2) => s2(C2) || l2(C2) || u2(C2) ? et$1 : e2[C2], g2 = () => E2(n), S = () => E2(n + a2);
  function p2() {
    return a2 = 0, _(n) && (i2++, r2 = 0), s2(n) && n++, n++, r2++, e2[n];
  }
  function m2() {
    return s2(n + a2) && a2++, a2++, e2[n + a2];
  }
  function R2() {
    n = 0, i2 = 1, r2 = 1, a2 = 0;
  }
  function T(C2 = 0) {
    a2 = C2;
  }
  function h2() {
    const C2 = n + a2;
    for (; C2 !== n; )
      p2();
    a2 = 0;
  }
  return {
    index: d2,
    line: f2,
    column: b,
    peekOffset: c2,
    charAt: E2,
    currentChar: g2,
    currentPeek: S,
    next: p2,
    peek: m2,
    reset: R2,
    resetPeek: T,
    skipToPeek: h2
  };
}
const $t$1 = void 0, oc = "'", fE = "tokenizer";
function SE(t2, e2 = {}) {
  const n = e2.location !== false, i2 = EE(t2), r2 = () => i2.index(), a2 = () => oE(i2.line(), i2.column(), i2.index()), s2 = a2(), o2 = r2(), l2 = {
    currentType: 13,
    offset: o2,
    startLoc: s2,
    endLoc: s2,
    lastType: 13,
    lastOffset: o2,
    lastStartLoc: s2,
    lastEndLoc: s2,
    braceNest: 0,
    inLinked: false,
    text: ""
  }, u2 = () => l2, { onError: _ } = e2;
  function d2(O, y, U2, ...Q2) {
    const ke2 = u2();
    if (y.column += U2, y.offset += U2, _) {
      const xe = n ? js(ke2.startLoc, y) : null, le = Cn(O, xe, {
        domain: fE,
        args: Q2
      });
      _(le);
    }
  }
  function f2(O, y, U2) {
    O.endLoc = a2(), O.currentType = y;
    const Q2 = { type: y };
    return n && (Q2.loc = js(O.startLoc, O.endLoc)), U2 != null && (Q2.value = U2), Q2;
  }
  const b = (O) => f2(
    O,
    13
    /* TokenTypes.EOF */
  );
  function c2(O, y) {
    return O.currentChar() === y ? (O.next(), y) : (d2(te$1.EXPECTED_TOKEN, a2(), 0, y), "");
  }
  function E2(O) {
    let y = "";
    for (; O.currentPeek() === Gt$1 || O.currentPeek() === et$1; )
      y += O.currentPeek(), O.peek();
    return y;
  }
  function g2(O) {
    const y = E2(O);
    return O.skipToPeek(), y;
  }
  function S(O) {
    if (O === $t$1)
      return false;
    const y = O.charCodeAt(0);
    return y >= 97 && y <= 122 || // a-z
    y >= 65 && y <= 90 || // A-Z
    y === 95;
  }
  function p2(O) {
    if (O === $t$1)
      return false;
    const y = O.charCodeAt(0);
    return y >= 48 && y <= 57;
  }
  function m2(O, y) {
    const { currentType: U2 } = y;
    if (U2 !== 2)
      return false;
    E2(O);
    const Q2 = S(O.currentPeek());
    return O.resetPeek(), Q2;
  }
  function R2(O, y) {
    const { currentType: U2 } = y;
    if (U2 !== 2)
      return false;
    E2(O);
    const Q2 = O.currentPeek() === "-" ? O.peek() : O.currentPeek(), ke2 = p2(Q2);
    return O.resetPeek(), ke2;
  }
  function T(O, y) {
    const { currentType: U2 } = y;
    if (U2 !== 2)
      return false;
    E2(O);
    const Q2 = O.currentPeek() === oc;
    return O.resetPeek(), Q2;
  }
  function h2(O, y) {
    const { currentType: U2 } = y;
    if (U2 !== 7)
      return false;
    E2(O);
    const Q2 = O.currentPeek() === ".";
    return O.resetPeek(), Q2;
  }
  function C2(O, y) {
    const { currentType: U2 } = y;
    if (U2 !== 8)
      return false;
    E2(O);
    const Q2 = S(O.currentPeek());
    return O.resetPeek(), Q2;
  }
  function A2(O, y) {
    const { currentType: U2 } = y;
    if (!(U2 === 7 || U2 === 11))
      return false;
    E2(O);
    const Q2 = O.currentPeek() === ":";
    return O.resetPeek(), Q2;
  }
  function I2(O, y) {
    const { currentType: U2 } = y;
    if (U2 !== 9)
      return false;
    const Q2 = () => {
      const xe = O.currentPeek();
      return xe === "{" ? S(O.peek()) : xe === "@" || xe === "|" || xe === ":" || xe === "." || xe === Gt$1 || !xe ? false : xe === et$1 ? (O.peek(), Q2()) : x(O, false);
    }, ke2 = Q2();
    return O.resetPeek(), ke2;
  }
  function v2(O) {
    E2(O);
    const y = O.currentPeek() === "|";
    return O.resetPeek(), y;
  }
  function x(O, y = true) {
    const U2 = (ke2 = false, xe = "") => {
      const le = O.currentPeek();
      return le === "{" || le === "@" || !le ? ke2 : le === "|" ? !(xe === Gt$1 || xe === et$1) : le === Gt$1 ? (O.peek(), U2(true, Gt$1)) : le === et$1 ? (O.peek(), U2(true, et$1)) : true;
    }, Q2 = U2();
    return y && O.resetPeek(), Q2;
  }
  function M(O, y) {
    const U2 = O.currentChar();
    return U2 === $t$1 ? $t$1 : y(U2) ? (O.next(), U2) : null;
  }
  function B2(O) {
    const y = O.charCodeAt(0);
    return y >= 97 && y <= 122 || // a-z
    y >= 65 && y <= 90 || // A-Z
    y >= 48 && y <= 57 || // 0-9
    y === 95 || // _
    y === 36;
  }
  function G2(O) {
    return M(O, B2);
  }
  function D(O) {
    const y = O.charCodeAt(0);
    return y >= 97 && y <= 122 || // a-z
    y >= 65 && y <= 90 || // A-Z
    y >= 48 && y <= 57 || // 0-9
    y === 95 || // _
    y === 36 || // $
    y === 45;
  }
  function w(O) {
    return M(O, D);
  }
  function L(O) {
    const y = O.charCodeAt(0);
    return y >= 48 && y <= 57;
  }
  function q2(O) {
    return M(O, L);
  }
  function z(O) {
    const y = O.charCodeAt(0);
    return y >= 48 && y <= 57 || // 0-9
    y >= 65 && y <= 70 || // A-F
    y >= 97 && y <= 102;
  }
  function re(O) {
    return M(O, z);
  }
  function j(O) {
    let y = "", U2 = "";
    for (; y = q2(O); )
      U2 += y;
    return U2;
  }
  function ue(O) {
    let y = "";
    for (; ; ) {
      const U2 = O.currentChar();
      if (U2 === "{" || U2 === "}" || U2 === "@" || U2 === "|" || !U2)
        break;
      if (U2 === Gt$1 || U2 === et$1)
        if (x(O))
          y += U2, O.next();
        else {
          if (v2(O))
            break;
          y += U2, O.next();
        }
      else
        y += U2, O.next();
    }
    return y;
  }
  function se2(O) {
    g2(O);
    let y = "", U2 = "";
    for (; y = w(O); )
      U2 += y;
    return O.currentChar() === $t$1 && d2(te$1.UNTERMINATED_CLOSING_BRACE, a2(), 0), U2;
  }
  function Re2(O) {
    g2(O);
    let y = "";
    return O.currentChar() === "-" ? (O.next(), y += `-${j(O)}`) : y += j(O), O.currentChar() === $t$1 && d2(te$1.UNTERMINATED_CLOSING_BRACE, a2(), 0), y;
  }
  function Ce(O) {
    return O !== oc && O !== et$1;
  }
  function Te2(O) {
    g2(O), c2(O, "'");
    let y = "", U2 = "";
    for (; y = M(O, Ce); )
      y === "\\" ? U2 += ne2(O) : U2 += y;
    const Q2 = O.currentChar();
    return Q2 === et$1 || Q2 === $t$1 ? (d2(te$1.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER, a2(), 0), Q2 === et$1 && (O.next(), c2(O, "'")), U2) : (c2(O, "'"), U2);
  }
  function ne2(O) {
    const y = O.currentChar();
    switch (y) {
      case "\\":
      case "'":
        return O.next(), `\\${y}`;
      case "u":
        return ae(O, y, 4);
      case "U":
        return ae(O, y, 6);
      default:
        return d2(te$1.UNKNOWN_ESCAPE_SEQUENCE, a2(), 0, y), "";
    }
  }
  function ae(O, y, U2) {
    c2(O, y);
    let Q2 = "";
    for (let ke2 = 0; ke2 < U2; ke2++) {
      const xe = re(O);
      if (!xe) {
        d2(te$1.INVALID_UNICODE_ESCAPE_SEQUENCE, a2(), 0, `\\${y}${Q2}${O.currentChar()}`);
        break;
      }
      Q2 += xe;
    }
    return `\\${y}${Q2}`;
  }
  function pe(O) {
    return O !== "{" && O !== "}" && O !== Gt$1 && O !== et$1;
  }
  function fe2(O) {
    g2(O);
    let y = "", U2 = "";
    for (; y = M(O, pe); )
      U2 += y;
    return U2;
  }
  function Ne(O) {
    let y = "", U2 = "";
    for (; y = G2(O); )
      U2 += y;
    return U2;
  }
  function ve2(O) {
    const y = (U2) => {
      const Q2 = O.currentChar();
      return Q2 === "{" || Q2 === "@" || Q2 === "|" || Q2 === "(" || Q2 === ")" || !Q2 || Q2 === Gt$1 ? U2 : (U2 += Q2, O.next(), y(U2));
    };
    return y("");
  }
  function Ie(O) {
    g2(O);
    const y = c2(
      O,
      "|"
      /* TokenChars.Pipe */
    );
    return g2(O), y;
  }
  function Ue(O, y) {
    let U2 = null;
    switch (O.currentChar()) {
      case "{":
        return y.braceNest >= 1 && d2(te$1.NOT_ALLOW_NEST_PLACEHOLDER, a2(), 0), O.next(), U2 = f2(
          y,
          2,
          "{"
          /* TokenChars.BraceLeft */
        ), g2(O), y.braceNest++, U2;
      case "}":
        return y.braceNest > 0 && y.currentType === 2 && d2(te$1.EMPTY_PLACEHOLDER, a2(), 0), O.next(), U2 = f2(
          y,
          3,
          "}"
          /* TokenChars.BraceRight */
        ), y.braceNest--, y.braceNest > 0 && g2(O), y.inLinked && y.braceNest === 0 && (y.inLinked = false), U2;
      case "@":
        return y.braceNest > 0 && d2(te$1.UNTERMINATED_CLOSING_BRACE, a2(), 0), U2 = De2(O, y) || b(y), y.braceNest = 0, U2;
      default: {
        let ke2 = true, xe = true, le = true;
        if (v2(O))
          return y.braceNest > 0 && d2(te$1.UNTERMINATED_CLOSING_BRACE, a2(), 0), U2 = f2(y, 1, Ie(O)), y.braceNest = 0, y.inLinked = false, U2;
        if (y.braceNest > 0 && (y.currentType === 4 || y.currentType === 5 || y.currentType === 6))
          return d2(te$1.UNTERMINATED_CLOSING_BRACE, a2(), 0), y.braceNest = 0, Je2(O, y);
        if (ke2 = m2(O, y))
          return U2 = f2(y, 4, se2(O)), g2(O), U2;
        if (xe = R2(O, y))
          return U2 = f2(y, 5, Re2(O)), g2(O), U2;
        if (le = T(O, y))
          return U2 = f2(y, 6, Te2(O)), g2(O), U2;
        if (!ke2 && !xe && !le)
          return U2 = f2(y, 12, fe2(O)), d2(te$1.INVALID_TOKEN_IN_PLACEHOLDER, a2(), 0, U2.value), g2(O), U2;
        break;
      }
    }
    return U2;
  }
  function De2(O, y) {
    const { currentType: U2 } = y;
    let Q2 = null;
    const ke2 = O.currentChar();
    switch ((U2 === 7 || U2 === 8 || U2 === 11 || U2 === 9) && (ke2 === et$1 || ke2 === Gt$1) && d2(te$1.INVALID_LINKED_FORMAT, a2(), 0), ke2) {
      case "@":
        return O.next(), Q2 = f2(
          y,
          7,
          "@"
          /* TokenChars.LinkedAlias */
        ), y.inLinked = true, Q2;
      case ".":
        return g2(O), O.next(), f2(
          y,
          8,
          "."
          /* TokenChars.LinkedDot */
        );
      case ":":
        return g2(O), O.next(), f2(
          y,
          9,
          ":"
          /* TokenChars.LinkedDelimiter */
        );
      default:
        return v2(O) ? (Q2 = f2(y, 1, Ie(O)), y.braceNest = 0, y.inLinked = false, Q2) : h2(O, y) || A2(O, y) ? (g2(O), De2(O, y)) : C2(O, y) ? (g2(O), f2(y, 11, Ne(O))) : I2(O, y) ? (g2(O), ke2 === "{" ? Ue(O, y) || Q2 : f2(y, 10, ve2(O))) : (U2 === 7 && d2(te$1.INVALID_LINKED_FORMAT, a2(), 0), y.braceNest = 0, y.inLinked = false, Je2(O, y));
    }
  }
  function Je2(O, y) {
    let U2 = {
      type: 13
      /* TokenTypes.EOF */
    };
    if (y.braceNest > 0)
      return Ue(O, y) || b(y);
    if (y.inLinked)
      return De2(O, y) || b(y);
    switch (O.currentChar()) {
      case "{":
        return Ue(O, y) || b(y);
      case "}":
        return d2(te$1.UNBALANCED_CLOSING_BRACE, a2(), 0), O.next(), f2(
          y,
          3,
          "}"
          /* TokenChars.BraceRight */
        );
      case "@":
        return De2(O, y) || b(y);
      default: {
        if (v2(O))
          return U2 = f2(y, 1, Ie(O)), y.braceNest = 0, y.inLinked = false, U2;
        if (x(O))
          return f2(y, 0, ue(O));
        break;
      }
    }
    return U2;
  }
  function kt() {
    const { currentType: O, offset: y, startLoc: U2, endLoc: Q2 } = l2;
    return l2.lastType = O, l2.lastOffset = y, l2.lastStartLoc = U2, l2.lastEndLoc = Q2, l2.offset = r2(), l2.startLoc = a2(), i2.currentChar() === $t$1 ? f2(
      l2,
      13
      /* TokenTypes.EOF */
    ) : Je2(i2, l2);
  }
  return {
    nextToken: kt,
    currentOffset: r2,
    currentPosition: a2,
    context: u2
  };
}
const bE = "parser", TE = /(?:\\\\|\\'|\\u([0-9a-fA-F]{4})|\\U([0-9a-fA-F]{6}))/g;
function hE(t2, e2, n) {
  switch (t2) {
    case "\\\\":
      return "\\";
    case "\\'":
      return "'";
    default: {
      const i2 = parseInt(e2 || n, 16);
      return i2 <= 55295 || i2 >= 57344 ? String.fromCodePoint(i2) : "�";
    }
  }
}
function RE(t2 = {}) {
  const e2 = t2.location !== false, { onError: n } = t2;
  function i2(S, p2, m2, R2, ...T) {
    const h2 = S.currentPosition();
    if (h2.offset += R2, h2.column += R2, n) {
      const C2 = e2 ? js(m2, h2) : null, A2 = Cn(p2, C2, {
        domain: bE,
        args: T
      });
      n(A2);
    }
  }
  function r2(S, p2, m2) {
    const R2 = { type: S };
    return e2 && (R2.start = p2, R2.end = p2, R2.loc = { start: m2, end: m2 }), R2;
  }
  function a2(S, p2, m2, R2) {
    e2 && (S.end = p2, S.loc && (S.loc.end = m2));
  }
  function s2(S, p2) {
    const m2 = S.context(), R2 = r2(3, m2.offset, m2.startLoc);
    return R2.value = p2, a2(R2, S.currentOffset(), S.currentPosition()), R2;
  }
  function o2(S, p2) {
    const m2 = S.context(), { lastOffset: R2, lastStartLoc: T } = m2, h2 = r2(5, R2, T);
    return h2.index = parseInt(p2, 10), S.nextToken(), a2(h2, S.currentOffset(), S.currentPosition()), h2;
  }
  function l2(S, p2) {
    const m2 = S.context(), { lastOffset: R2, lastStartLoc: T } = m2, h2 = r2(4, R2, T);
    return h2.key = p2, S.nextToken(), a2(h2, S.currentOffset(), S.currentPosition()), h2;
  }
  function u2(S, p2) {
    const m2 = S.context(), { lastOffset: R2, lastStartLoc: T } = m2, h2 = r2(9, R2, T);
    return h2.value = p2.replace(TE, hE), S.nextToken(), a2(h2, S.currentOffset(), S.currentPosition()), h2;
  }
  function _(S) {
    const p2 = S.nextToken(), m2 = S.context(), { lastOffset: R2, lastStartLoc: T } = m2, h2 = r2(8, R2, T);
    return p2.type !== 11 ? (i2(S, te$1.UNEXPECTED_EMPTY_LINKED_MODIFIER, m2.lastStartLoc, 0), h2.value = "", a2(h2, R2, T), {
      nextConsumeToken: p2,
      node: h2
    }) : (p2.value == null && i2(S, te$1.UNEXPECTED_LEXICAL_ANALYSIS, m2.lastStartLoc, 0, Nt$1(p2)), h2.value = p2.value || "", a2(h2, S.currentOffset(), S.currentPosition()), {
      node: h2
    });
  }
  function d2(S, p2) {
    const m2 = S.context(), R2 = r2(7, m2.offset, m2.startLoc);
    return R2.value = p2, a2(R2, S.currentOffset(), S.currentPosition()), R2;
  }
  function f2(S) {
    const p2 = S.context(), m2 = r2(6, p2.offset, p2.startLoc);
    let R2 = S.nextToken();
    if (R2.type === 8) {
      const T = _(S);
      m2.modifier = T.node, R2 = T.nextConsumeToken || S.nextToken();
    }
    switch (R2.type !== 9 && i2(S, te$1.UNEXPECTED_LEXICAL_ANALYSIS, p2.lastStartLoc, 0, Nt$1(R2)), R2 = S.nextToken(), R2.type === 2 && (R2 = S.nextToken()), R2.type) {
      case 10:
        R2.value == null && i2(S, te$1.UNEXPECTED_LEXICAL_ANALYSIS, p2.lastStartLoc, 0, Nt$1(R2)), m2.key = d2(S, R2.value || "");
        break;
      case 4:
        R2.value == null && i2(S, te$1.UNEXPECTED_LEXICAL_ANALYSIS, p2.lastStartLoc, 0, Nt$1(R2)), m2.key = l2(S, R2.value || "");
        break;
      case 5:
        R2.value == null && i2(S, te$1.UNEXPECTED_LEXICAL_ANALYSIS, p2.lastStartLoc, 0, Nt$1(R2)), m2.key = o2(S, R2.value || "");
        break;
      case 6:
        R2.value == null && i2(S, te$1.UNEXPECTED_LEXICAL_ANALYSIS, p2.lastStartLoc, 0, Nt$1(R2)), m2.key = u2(S, R2.value || "");
        break;
      default: {
        i2(S, te$1.UNEXPECTED_EMPTY_LINKED_KEY, p2.lastStartLoc, 0);
        const T = S.context(), h2 = r2(7, T.offset, T.startLoc);
        return h2.value = "", a2(h2, T.offset, T.startLoc), m2.key = h2, a2(m2, T.offset, T.startLoc), {
          nextConsumeToken: R2,
          node: m2
        };
      }
    }
    return a2(m2, S.currentOffset(), S.currentPosition()), {
      node: m2
    };
  }
  function b(S) {
    const p2 = S.context(), m2 = p2.currentType === 1 ? S.currentOffset() : p2.offset, R2 = p2.currentType === 1 ? p2.endLoc : p2.startLoc, T = r2(2, m2, R2);
    T.items = [];
    let h2 = null;
    do {
      const I2 = h2 || S.nextToken();
      switch (h2 = null, I2.type) {
        case 0:
          I2.value == null && i2(S, te$1.UNEXPECTED_LEXICAL_ANALYSIS, p2.lastStartLoc, 0, Nt$1(I2)), T.items.push(s2(S, I2.value || ""));
          break;
        case 5:
          I2.value == null && i2(S, te$1.UNEXPECTED_LEXICAL_ANALYSIS, p2.lastStartLoc, 0, Nt$1(I2)), T.items.push(o2(S, I2.value || ""));
          break;
        case 4:
          I2.value == null && i2(S, te$1.UNEXPECTED_LEXICAL_ANALYSIS, p2.lastStartLoc, 0, Nt$1(I2)), T.items.push(l2(S, I2.value || ""));
          break;
        case 6:
          I2.value == null && i2(S, te$1.UNEXPECTED_LEXICAL_ANALYSIS, p2.lastStartLoc, 0, Nt$1(I2)), T.items.push(u2(S, I2.value || ""));
          break;
        case 7: {
          const v2 = f2(S);
          T.items.push(v2.node), h2 = v2.nextConsumeToken || null;
          break;
        }
      }
    } while (p2.currentType !== 13 && p2.currentType !== 1);
    const C2 = p2.currentType === 1 ? p2.lastOffset : S.currentOffset(), A2 = p2.currentType === 1 ? p2.lastEndLoc : S.currentPosition();
    return a2(T, C2, A2), T;
  }
  function c2(S, p2, m2, R2) {
    const T = S.context();
    let h2 = R2.items.length === 0;
    const C2 = r2(1, p2, m2);
    C2.cases = [], C2.cases.push(R2);
    do {
      const A2 = b(S);
      h2 || (h2 = A2.items.length === 0), C2.cases.push(A2);
    } while (T.currentType !== 13);
    return h2 && i2(S, te$1.MUST_HAVE_MESSAGES_IN_PLURAL, m2, 0), a2(C2, S.currentOffset(), S.currentPosition()), C2;
  }
  function E2(S) {
    const p2 = S.context(), { offset: m2, startLoc: R2 } = p2, T = b(S);
    return p2.currentType === 13 ? T : c2(S, m2, R2, T);
  }
  function g2(S) {
    const p2 = SE(S, Qe$1({}, t2)), m2 = p2.context(), R2 = r2(0, m2.offset, m2.startLoc);
    return e2 && R2.loc && (R2.loc.source = S), R2.body = E2(p2), t2.onCacheKey && (R2.cacheKey = t2.onCacheKey(S)), m2.currentType !== 13 && i2(p2, te$1.UNEXPECTED_LEXICAL_ANALYSIS, m2.lastStartLoc, 0, S[m2.offset] || ""), a2(R2, p2.currentOffset(), p2.currentPosition()), R2;
  }
  return { parse: g2 };
}
function Nt$1(t2) {
  if (t2.type === 13)
    return "EOF";
  const e2 = (t2.value || "").replace(/\r?\n/gu, "\\n");
  return e2.length > 10 ? e2.slice(0, 9) + "…" : e2;
}
function CE(t2, e2 = {}) {
  const n = {
    ast: t2,
    helpers: /* @__PURE__ */ new Set()
  };
  return { context: () => n, helper: (a2) => (n.helpers.add(a2), a2) };
}
function sc(t2, e2) {
  for (let n = 0; n < t2.length; n++)
    hl(t2[n], e2);
}
function hl(t2, e2) {
  switch (t2.type) {
    case 1:
      sc(t2.cases, e2), e2.helper(
        "plural"
        /* HelperNameMap.PLURAL */
      );
      break;
    case 2:
      sc(t2.items, e2);
      break;
    case 6: {
      hl(t2.key, e2), e2.helper(
        "linked"
        /* HelperNameMap.LINKED */
      ), e2.helper(
        "type"
        /* HelperNameMap.TYPE */
      );
      break;
    }
    case 5:
      e2.helper(
        "interpolate"
        /* HelperNameMap.INTERPOLATE */
      ), e2.helper(
        "list"
        /* HelperNameMap.LIST */
      );
      break;
    case 4:
      e2.helper(
        "interpolate"
        /* HelperNameMap.INTERPOLATE */
      ), e2.helper(
        "named"
        /* HelperNameMap.NAMED */
      );
      break;
  }
}
function NE(t2, e2 = {}) {
  const n = CE(t2);
  n.helper(
    "normalize"
    /* HelperNameMap.NORMALIZE */
  ), t2.body && hl(t2.body, n);
  const i2 = n.context();
  t2.helpers = Array.from(i2.helpers);
}
function vE(t2) {
  const e2 = t2.body;
  return e2.type === 2 ? lc(e2) : e2.cases.forEach((n) => lc(n)), t2;
}
function lc(t2) {
  if (t2.items.length === 1) {
    const e2 = t2.items[0];
    (e2.type === 3 || e2.type === 9) && (t2.static = e2.value, delete e2.value);
  } else {
    const e2 = [];
    for (let n = 0; n < t2.items.length; n++) {
      const i2 = t2.items[n];
      if (!(i2.type === 3 || i2.type === 9) || i2.value == null)
        break;
      e2.push(i2.value);
    }
    if (e2.length === t2.items.length) {
      t2.static = Sl(e2);
      for (let n = 0; n < t2.items.length; n++) {
        const i2 = t2.items[n];
        (i2.type === 3 || i2.type === 9) && delete i2.value;
      }
    }
  }
}
function mn$1(t2) {
  switch (t2.t = t2.type, t2.type) {
    case 0: {
      const e2 = t2;
      mn$1(e2.body), e2.b = e2.body, delete e2.body;
      break;
    }
    case 1: {
      const e2 = t2, n = e2.cases;
      for (let i2 = 0; i2 < n.length; i2++)
        mn$1(n[i2]);
      e2.c = n, delete e2.cases;
      break;
    }
    case 2: {
      const e2 = t2, n = e2.items;
      for (let i2 = 0; i2 < n.length; i2++)
        mn$1(n[i2]);
      e2.i = n, delete e2.items, e2.static && (e2.s = e2.static, delete e2.static);
      break;
    }
    case 3:
    case 9:
    case 8:
    case 7: {
      const e2 = t2;
      e2.value && (e2.v = e2.value, delete e2.value);
      break;
    }
    case 6: {
      const e2 = t2;
      mn$1(e2.key), e2.k = e2.key, delete e2.key, e2.modifier && (mn$1(e2.modifier), e2.m = e2.modifier, delete e2.modifier);
      break;
    }
    case 5: {
      const e2 = t2;
      e2.i = e2.index, delete e2.index;
      break;
    }
    case 4: {
      const e2 = t2;
      e2.k = e2.key, delete e2.key;
      break;
    }
  }
  delete t2.type;
}
function yE(t2, e2) {
  const { filename: n, breakLineCode: i2, needIndent: r2 } = e2, a2 = e2.location !== false, s2 = {
    filename: n,
    code: "",
    column: 1,
    line: 1,
    offset: 0,
    map: void 0,
    breakLineCode: i2,
    needIndent: r2,
    indentLevel: 0
  };
  a2 && t2.loc && (s2.source = t2.loc.source);
  const o2 = () => s2;
  function l2(E2, g2) {
    s2.code += E2;
  }
  function u2(E2, g2 = true) {
    const S = g2 ? i2 : "";
    l2(r2 ? S + "  ".repeat(E2) : S);
  }
  function _(E2 = true) {
    const g2 = ++s2.indentLevel;
    E2 && u2(g2);
  }
  function d2(E2 = true) {
    const g2 = --s2.indentLevel;
    E2 && u2(g2);
  }
  function f2() {
    u2(s2.indentLevel);
  }
  return {
    context: o2,
    push: l2,
    indent: _,
    deindent: d2,
    newline: f2,
    helper: (E2) => `_${E2}`,
    needIndent: () => s2.needIndent
  };
}
function IE(t2, e2) {
  const { helper: n } = t2;
  t2.push(`${n(
    "linked"
    /* HelperNameMap.LINKED */
  )}(`), bn(t2, e2.key), e2.modifier ? (t2.push(", "), bn(t2, e2.modifier), t2.push(", _type")) : t2.push(", undefined, _type"), t2.push(")");
}
function DE(t2, e2) {
  const { helper: n, needIndent: i2 } = t2;
  t2.push(`${n(
    "normalize"
    /* HelperNameMap.NORMALIZE */
  )}([`), t2.indent(i2());
  const r2 = e2.items.length;
  for (let a2 = 0; a2 < r2 && (bn(t2, e2.items[a2]), a2 !== r2 - 1); a2++)
    t2.push(", ");
  t2.deindent(i2()), t2.push("])");
}
function xE(t2, e2) {
  const { helper: n, needIndent: i2 } = t2;
  if (e2.cases.length > 1) {
    t2.push(`${n(
      "plural"
      /* HelperNameMap.PLURAL */
    )}([`), t2.indent(i2());
    const r2 = e2.cases.length;
    for (let a2 = 0; a2 < r2 && (bn(t2, e2.cases[a2]), a2 !== r2 - 1); a2++)
      t2.push(", ");
    t2.deindent(i2()), t2.push("])");
  }
}
function LE(t2, e2) {
  e2.body ? bn(t2, e2.body) : t2.push("null");
}
function bn(t2, e2) {
  const { helper: n } = t2;
  switch (e2.type) {
    case 0:
      LE(t2, e2);
      break;
    case 1:
      xE(t2, e2);
      break;
    case 2:
      DE(t2, e2);
      break;
    case 6:
      IE(t2, e2);
      break;
    case 8:
      t2.push(JSON.stringify(e2.value), e2);
      break;
    case 7:
      t2.push(JSON.stringify(e2.value), e2);
      break;
    case 5:
      t2.push(`${n(
        "interpolate"
        /* HelperNameMap.INTERPOLATE */
      )}(${n(
        "list"
        /* HelperNameMap.LIST */
      )}(${e2.index}))`, e2);
      break;
    case 4:
      t2.push(`${n(
        "interpolate"
        /* HelperNameMap.INTERPOLATE */
      )}(${n(
        "named"
        /* HelperNameMap.NAMED */
      )}(${JSON.stringify(e2.key)}))`, e2);
      break;
    case 9:
      t2.push(JSON.stringify(e2.value), e2);
      break;
    case 3:
      t2.push(JSON.stringify(e2.value), e2);
      break;
  }
}
const ME = (t2, e2 = {}) => {
  const n = $(e2.mode) ? e2.mode : "normal", i2 = $(e2.filename) ? e2.filename : "message.intl";
  e2.sourceMap;
  const r2 = e2.breakLineCode != null ? e2.breakLineCode : n === "arrow" ? ";" : `
`, a2 = e2.needIndent ? e2.needIndent : n !== "arrow", s2 = t2.helpers || [], o2 = yE(t2, {
    filename: i2,
    breakLineCode: r2,
    needIndent: a2
  });
  o2.push(n === "normal" ? "function __msg__ (ctx) {" : "(ctx) => {"), o2.indent(a2), s2.length > 0 && (o2.push(`const { ${Sl(s2.map((_) => `${_}: _${_}`), ", ")} } = ctx`), o2.newline()), o2.push("return "), bn(o2, t2), o2.deindent(a2), o2.push("}"), delete t2.helpers;
  const { code: l2, map: u2 } = o2.context();
  return {
    ast: t2,
    code: l2,
    map: u2 ? u2.toJSON() : void 0
    // eslint-disable-line @typescript-eslint/no-explicit-any
  };
};
function wE(t2, e2 = {}) {
  const n = Qe$1({}, e2), i2 = !!n.jit, r2 = !!n.minify, a2 = n.optimize == null ? true : n.optimize, o2 = RE(n).parse(t2);
  return i2 ? (a2 && vE(o2), r2 && mn$1(o2), { ast: o2, code: "" }) : (NE(o2, n), ME(o2, n));
}
/*!
  * core-base v11.1.3
  * (c) 2025 kazuya kawaguchi
  * Released under the MIT License.
  */
function kE() {
  typeof __INTLIFY_PROD_DEVTOOLS__ != "boolean" && (rn$1().__INTLIFY_PROD_DEVTOOLS__ = false), typeof __INTLIFY_DROP_MESSAGE_COMPILER__ != "boolean" && (rn$1().__INTLIFY_DROP_MESSAGE_COMPILER__ = false);
}
function Et(t2) {
  return Se$1(t2) && Rl(t2) === 0 && (Tt$1(t2, "b") || Tt$1(t2, "body"));
}
const _m = ["b", "body"];
function PE(t2) {
  return Jt$1(t2, _m);
}
const dm = ["c", "cases"];
function FE(t2) {
  return Jt$1(t2, dm, []);
}
const pm = ["s", "static"];
function UE(t2) {
  return Jt$1(t2, pm);
}
const mm = ["i", "items"];
function BE(t2) {
  return Jt$1(t2, mm, []);
}
const Em = ["t", "type"];
function Rl(t2) {
  return Jt$1(t2, Em);
}
const gm = ["v", "value"];
function or(t2, e2) {
  const n = Jt$1(t2, gm);
  if (n != null)
    return n;
  throw Pn(e2);
}
const fm = ["m", "modifier"];
function GE(t2) {
  return Jt$1(t2, fm);
}
const Sm = ["k", "key"];
function YE(t2) {
  const e2 = Jt$1(t2, Sm);
  if (e2)
    return e2;
  throw Pn(
    6
    /* NodeTypes.Linked */
  );
}
function Jt$1(t2, e2, n) {
  for (let i2 = 0; i2 < e2.length; i2++) {
    const r2 = e2[i2];
    if (Tt$1(t2, r2) && t2[r2] != null)
      return t2[r2];
  }
  return n;
}
const bm = [
  ..._m,
  ...dm,
  ...pm,
  ...mm,
  ...Sm,
  ...fm,
  ...gm,
  ...Em
];
function Pn(t2) {
  return new Error(`unhandled node type: ${t2}`);
}
function Br(t2) {
  return (n) => qE(n, t2);
}
function qE(t2, e2) {
  const n = PE(e2);
  if (n == null)
    throw Pn(
      0
      /* NodeTypes.Resource */
    );
  if (Rl(n) === 1) {
    const a2 = FE(n);
    return t2.plural(a2.reduce((s2, o2) => [
      ...s2,
      cc(t2, o2)
    ], []));
  } else
    return cc(t2, n);
}
function cc(t2, e2) {
  const n = UE(e2);
  if (n != null)
    return t2.type === "text" ? n : t2.normalize([n]);
  {
    const i2 = BE(e2).reduce((r2, a2) => [...r2, el(t2, a2)], []);
    return t2.normalize(i2);
  }
}
function el(t2, e2) {
  const n = Rl(e2);
  switch (n) {
    case 3:
      return or(e2, n);
    case 9:
      return or(e2, n);
    case 4: {
      const i2 = e2;
      if (Tt$1(i2, "k") && i2.k)
        return t2.interpolate(t2.named(i2.k));
      if (Tt$1(i2, "key") && i2.key)
        return t2.interpolate(t2.named(i2.key));
      throw Pn(n);
    }
    case 5: {
      const i2 = e2;
      if (Tt$1(i2, "i") && He$1(i2.i))
        return t2.interpolate(t2.list(i2.i));
      if (Tt$1(i2, "index") && He$1(i2.index))
        return t2.interpolate(t2.list(i2.index));
      throw Pn(n);
    }
    case 6: {
      const i2 = e2, r2 = GE(i2), a2 = YE(i2);
      return t2.linked(el(t2, a2), r2 ? el(t2, r2) : void 0, t2.type);
    }
    case 7:
      return or(e2, n);
    case 8:
      return or(e2, n);
    default:
      throw new Error(`unhandled node on format message part: ${n}`);
  }
}
const zE = (t2) => t2;
let sr = ye$1();
function $E(t2, e2 = {}) {
  let n = false;
  const i2 = e2.onError || cE;
  return e2.onError = (r2) => {
    n = true, i2(r2);
  }, { ...wE(t2, e2), detectError: n };
}
// @__NO_SIDE_EFFECTS__
function WE(t2, e2) {
  if (!__INTLIFY_DROP_MESSAGE_COMPILER__ && $(t2)) {
    be$1(e2.warnHtmlMessage) ? e2.warnHtmlMessage : true;
    const r2 = (e2.onCacheKey || zE)(t2), a2 = sr[r2];
    if (a2)
      return a2;
    const { ast: s2, detectError: o2 } = $E(t2, {
      ...e2,
      location: false,
      jit: true
    }), l2 = Br(s2);
    return o2 ? l2 : sr[r2] = l2;
  } else {
    const n = t2.cacheKey;
    if (n) {
      const i2 = sr[n];
      return i2 || (sr[n] = Br(t2));
    } else
      return Br(t2);
  }
}
let Fn = null;
function KE(t2) {
  Fn = t2;
}
function QE(t2, e2, n) {
  Fn && Fn.emit("i18n:init", {
    timestamp: Date.now(),
    i18n: t2,
    version: e2,
    meta: n
  });
}
const XE = /* @__PURE__ */ ZE("function:translate");
function ZE(t2) {
  return (e2) => Fn && Fn.emit(t2, e2);
}
const je$1 = {
  INVALID_ARGUMENT: sE,
  // 17
  INVALID_DATE_ARGUMENT: 18,
  INVALID_ISO_DATE_ARGUMENT: 19,
  NOT_SUPPORT_NON_STRING_MESSAGE: 20,
  NOT_SUPPORT_LOCALE_PROMISE_VALUE: 21,
  NOT_SUPPORT_LOCALE_ASYNC_FUNCTION: 22,
  NOT_SUPPORT_LOCALE_TYPE: 23
}, JE = 24;
function qt$1(t2) {
  return Cn(t2, null, void 0);
}
function Cl(t2, e2) {
  return e2.locale != null ? uc(e2.locale) : uc(t2.locale);
}
let Gr;
function uc(t2) {
  if ($(t2))
    return t2;
  if (we$1(t2)) {
    if (t2.resolvedOnce && Gr != null)
      return Gr;
    if (t2.constructor.name === "Function") {
      const e2 = t2();
      if (rE(e2))
        throw qt$1(je$1.NOT_SUPPORT_LOCALE_PROMISE_VALUE);
      return Gr = e2;
    } else
      throw qt$1(je$1.NOT_SUPPORT_LOCALE_ASYNC_FUNCTION);
  } else
    throw qt$1(je$1.NOT_SUPPORT_LOCALE_TYPE);
}
function eg(t2, e2, n) {
  return [.../* @__PURE__ */ new Set([
    n,
    ...qe(e2) ? e2 : Se$1(e2) ? Object.keys(e2) : $(e2) ? [e2] : [n]
  ])];
}
function Tm(t2, e2, n) {
  const i2 = $(n) ? n : Un, r2 = t2;
  r2.__localeChainCache || (r2.__localeChainCache = /* @__PURE__ */ new Map());
  let a2 = r2.__localeChainCache.get(i2);
  if (!a2) {
    a2 = [];
    let s2 = [n];
    for (; qe(s2); )
      s2 = _c(a2, s2, e2);
    const o2 = qe(e2) || !Ee$1(e2) ? e2 : e2.default ? e2.default : null;
    s2 = $(o2) ? [o2] : o2, qe(s2) && _c(a2, s2, false), r2.__localeChainCache.set(i2, a2);
  }
  return a2;
}
function _c(t2, e2, n) {
  let i2 = true;
  for (let r2 = 0; r2 < e2.length && be$1(i2); r2++) {
    const a2 = e2[r2];
    $(a2) && (i2 = tg(t2, e2[r2], n));
  }
  return i2;
}
function tg(t2, e2, n) {
  let i2;
  const r2 = e2.split("-");
  do {
    const a2 = r2.join("-");
    i2 = ng(t2, a2, n), r2.splice(-1, 1);
  } while (r2.length && i2 === true);
  return i2;
}
function ng(t2, e2, n) {
  let i2 = false;
  if (!t2.includes(e2) && (i2 = true, e2)) {
    i2 = e2[e2.length - 1] !== "!";
    const r2 = e2.replace(/!/g, "");
    t2.push(r2), (qe(n) || Ee$1(n)) && n[r2] && (i2 = n[r2]);
  }
  return i2;
}
const jt = [];
jt[
  0
  /* States.BEFORE_PATH */
] = {
  w: [
    0
    /* States.BEFORE_PATH */
  ],
  i: [
    3,
    0
    /* Actions.APPEND */
  ],
  "[": [
    4
    /* States.IN_SUB_PATH */
  ],
  o: [
    7
    /* States.AFTER_PATH */
  ]
};
jt[
  1
  /* States.IN_PATH */
] = {
  w: [
    1
    /* States.IN_PATH */
  ],
  ".": [
    2
    /* States.BEFORE_IDENT */
  ],
  "[": [
    4
    /* States.IN_SUB_PATH */
  ],
  o: [
    7
    /* States.AFTER_PATH */
  ]
};
jt[
  2
  /* States.BEFORE_IDENT */
] = {
  w: [
    2
    /* States.BEFORE_IDENT */
  ],
  i: [
    3,
    0
    /* Actions.APPEND */
  ],
  0: [
    3,
    0
    /* Actions.APPEND */
  ]
};
jt[
  3
  /* States.IN_IDENT */
] = {
  i: [
    3,
    0
    /* Actions.APPEND */
  ],
  0: [
    3,
    0
    /* Actions.APPEND */
  ],
  w: [
    1,
    1
    /* Actions.PUSH */
  ],
  ".": [
    2,
    1
    /* Actions.PUSH */
  ],
  "[": [
    4,
    1
    /* Actions.PUSH */
  ],
  o: [
    7,
    1
    /* Actions.PUSH */
  ]
};
jt[
  4
  /* States.IN_SUB_PATH */
] = {
  "'": [
    5,
    0
    /* Actions.APPEND */
  ],
  '"': [
    6,
    0
    /* Actions.APPEND */
  ],
  "[": [
    4,
    2
    /* Actions.INC_SUB_PATH_DEPTH */
  ],
  "]": [
    1,
    3
    /* Actions.PUSH_SUB_PATH */
  ],
  o: 8,
  l: [
    4,
    0
    /* Actions.APPEND */
  ]
};
jt[
  5
  /* States.IN_SINGLE_QUOTE */
] = {
  "'": [
    4,
    0
    /* Actions.APPEND */
  ],
  o: 8,
  l: [
    5,
    0
    /* Actions.APPEND */
  ]
};
jt[
  6
  /* States.IN_DOUBLE_QUOTE */
] = {
  '"': [
    4,
    0
    /* Actions.APPEND */
  ],
  o: 8,
  l: [
    6,
    0
    /* Actions.APPEND */
  ]
};
const rg = /^\s?(?:true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;
function ag(t2) {
  return rg.test(t2);
}
function ig(t2) {
  const e2 = t2.charCodeAt(0), n = t2.charCodeAt(t2.length - 1);
  return e2 === n && (e2 === 34 || e2 === 39) ? t2.slice(1, -1) : t2;
}
function og(t2) {
  if (t2 == null)
    return "o";
  switch (t2.charCodeAt(0)) {
    case 91:
    case 93:
    case 46:
    case 34:
    case 39:
      return t2;
    case 95:
    case 36:
    case 45:
      return "i";
    case 9:
    case 10:
    case 13:
    case 160:
    case 65279:
    case 8232:
    case 8233:
      return "w";
  }
  return "i";
}
function sg(t2) {
  const e2 = t2.trim();
  return t2.charAt(0) === "0" && isNaN(parseInt(t2)) ? false : ag(e2) ? ig(e2) : "*" + e2;
}
function lg(t2) {
  const e2 = [];
  let n = -1, i2 = 0, r2 = 0, a2, s2, o2, l2, u2, _, d2;
  const f2 = [];
  f2[
    0
    /* Actions.APPEND */
  ] = () => {
    s2 === void 0 ? s2 = o2 : s2 += o2;
  }, f2[
    1
    /* Actions.PUSH */
  ] = () => {
    s2 !== void 0 && (e2.push(s2), s2 = void 0);
  }, f2[
    2
    /* Actions.INC_SUB_PATH_DEPTH */
  ] = () => {
    f2[
      0
      /* Actions.APPEND */
    ](), r2++;
  }, f2[
    3
    /* Actions.PUSH_SUB_PATH */
  ] = () => {
    if (r2 > 0)
      r2--, i2 = 4, f2[
        0
        /* Actions.APPEND */
      ]();
    else {
      if (r2 = 0, s2 === void 0 || (s2 = sg(s2), s2 === false))
        return false;
      f2[
        1
        /* Actions.PUSH */
      ]();
    }
  };
  function b() {
    const c2 = t2[n + 1];
    if (i2 === 5 && c2 === "'" || i2 === 6 && c2 === '"')
      return n++, o2 = "\\" + c2, f2[
        0
        /* Actions.APPEND */
      ](), true;
  }
  for (; i2 !== null; )
    if (n++, a2 = t2[n], !(a2 === "\\" && b())) {
      if (l2 = og(a2), d2 = jt[i2], u2 = d2[l2] || d2.l || 8, u2 === 8 || (i2 = u2[0], u2[1] !== void 0 && (_ = f2[u2[1]], _ && (o2 = a2, _() === false))))
        return;
      if (i2 === 7)
        return e2;
    }
}
const dc = /* @__PURE__ */ new Map();
function cg(t2, e2) {
  return Se$1(t2) ? t2[e2] : null;
}
function ug(t2, e2) {
  if (!Se$1(t2))
    return null;
  let n = dc.get(e2);
  if (n || (n = lg(e2), n && dc.set(e2, n)), !n)
    return null;
  const i2 = n.length;
  let r2 = t2, a2 = 0;
  for (; a2 < i2; ) {
    const s2 = n[a2];
    if (bm.includes(s2) && Et(r2))
      return null;
    const o2 = r2[s2];
    if (o2 === void 0 || we$1(r2))
      return null;
    r2 = o2, a2++;
  }
  return r2;
}
const pg = "11.1.3", Cr = -1, Un = "en-US", mr = "", pc = (t2) => `${t2.charAt(0).toLocaleUpperCase()}${t2.substr(1)}`;
function mg() {
  return {
    upper: (t2, e2) => e2 === "text" && $(t2) ? t2.toUpperCase() : e2 === "vnode" && Se$1(t2) && "__v_isVNode" in t2 ? t2.children.toUpperCase() : t2,
    lower: (t2, e2) => e2 === "text" && $(t2) ? t2.toLowerCase() : e2 === "vnode" && Se$1(t2) && "__v_isVNode" in t2 ? t2.children.toLowerCase() : t2,
    capitalize: (t2, e2) => e2 === "text" && $(t2) ? pc(t2) : e2 === "vnode" && Se$1(t2) && "__v_isVNode" in t2 ? pc(t2.children) : t2
  };
}
let hm;
function Eg(t2) {
  hm = t2;
}
let Rm;
function gg(t2) {
  Rm = t2;
}
let Cm;
function fg(t2) {
  Cm = t2;
}
let vm = null;
const mc = (t2) => {
  vm = t2;
}, Tg = () => vm;
let Ec = 0;
function hg(t2 = {}) {
  const e2 = we$1(t2.onWarn) ? t2.onWarn : Zt$1, n = $(t2.version) ? t2.version : pg, i2 = $(t2.locale) || we$1(t2.locale) ? t2.locale : Un, r2 = we$1(i2) ? Un : i2, a2 = qe(t2.fallbackLocale) || Ee$1(t2.fallbackLocale) || $(t2.fallbackLocale) || t2.fallbackLocale === false ? t2.fallbackLocale : r2, s2 = Ee$1(t2.messages) ? t2.messages : Yr(r2), o2 = Ee$1(t2.datetimeFormats) ? t2.datetimeFormats : Yr(r2), l2 = Ee$1(t2.numberFormats) ? t2.numberFormats : Yr(r2), u2 = Qe$1(ye$1(), t2.modifiers, mg()), _ = t2.pluralRules || ye$1(), d2 = we$1(t2.missing) ? t2.missing : null, f2 = be$1(t2.missingWarn) || Sn(t2.missingWarn) ? t2.missingWarn : true, b = be$1(t2.fallbackWarn) || Sn(t2.fallbackWarn) ? t2.fallbackWarn : true, c2 = !!t2.fallbackFormat, E2 = !!t2.unresolving, g2 = we$1(t2.postTranslation) ? t2.postTranslation : null, S = Ee$1(t2.processor) ? t2.processor : null, p2 = be$1(t2.warnHtmlMessage) ? t2.warnHtmlMessage : true, m2 = !!t2.escapeParameter, R2 = we$1(t2.messageCompiler) ? t2.messageCompiler : hm;
  const T = we$1(t2.messageResolver) ? t2.messageResolver : Rm || cg, h2 = we$1(t2.localeFallbacker) ? t2.localeFallbacker : Cm || eg, C2 = Se$1(t2.fallbackContext) ? t2.fallbackContext : void 0, A2 = t2, I2 = Se$1(A2.__datetimeFormatters) ? A2.__datetimeFormatters : /* @__PURE__ */ new Map(), v2 = Se$1(A2.__numberFormatters) ? A2.__numberFormatters : /* @__PURE__ */ new Map(), x = Se$1(A2.__meta) ? A2.__meta : {};
  Ec++;
  const M = {
    version: n,
    cid: Ec,
    locale: i2,
    fallbackLocale: a2,
    messages: s2,
    modifiers: u2,
    pluralRules: _,
    missing: d2,
    missingWarn: f2,
    fallbackWarn: b,
    fallbackFormat: c2,
    unresolving: E2,
    postTranslation: g2,
    processor: S,
    warnHtmlMessage: p2,
    escapeParameter: m2,
    messageCompiler: R2,
    messageResolver: T,
    localeFallbacker: h2,
    fallbackContext: C2,
    onWarn: e2,
    __meta: x
  };
  return M.datetimeFormats = o2, M.numberFormats = l2, M.__datetimeFormatters = I2, M.__numberFormatters = v2, __INTLIFY_PROD_DEVTOOLS__ && QE(M, n, x), M;
}
const Yr = (t2) => ({ [t2]: ye$1() });
function Nl(t2, e2, n, i2, r2) {
  const { missing: a2, onWarn: s2 } = t2;
  if (a2 !== null) {
    const o2 = a2(t2, n, e2, r2);
    return $(o2) ? o2 : e2;
  } else
    return e2;
}
function wn(t2, e2, n) {
  const i2 = t2;
  i2.__localeChainCache = /* @__PURE__ */ new Map(), t2.localeFallbacker(t2, n, e2);
}
function Am(t2, e2) {
  return t2 === e2 ? false : t2.split("-")[0] === e2.split("-")[0];
}
function Rg(t2, e2) {
  const n = e2.indexOf(t2);
  if (n === -1)
    return false;
  for (let i2 = n + 1; i2 < e2.length; i2++)
    if (Am(t2, e2[i2]))
      return true;
  return false;
}
function fc(t2, ...e2) {
  const { datetimeFormats: n, unresolving: i2, fallbackLocale: r2, onWarn: a2, localeFallbacker: s2 } = t2, { __datetimeFormatters: o2 } = t2;
  const [l2, u2, _, d2] = tl(...e2), f2 = be$1(_.missingWarn) ? _.missingWarn : t2.missingWarn;
  be$1(_.fallbackWarn) ? _.fallbackWarn : t2.fallbackWarn;
  const c2 = !!_.part, E2 = Cl(t2, _), g2 = s2(
    t2,
    // eslint-disable-line @typescript-eslint/no-explicit-any
    r2,
    E2
  );
  if (!$(l2) || l2 === "")
    return new Intl.DateTimeFormat(E2, d2).format(u2);
  let S = {}, p2, m2 = null;
  const h2 = "datetime format";
  for (let I2 = 0; I2 < g2.length; I2++) {
    if (p2 = g2[I2], false)
      ;
    if (S = n[p2] || {}, m2 = S[l2], Ee$1(m2))
      break;
    Nl(t2, l2, p2, f2, h2);
  }
  if (!Ee$1(m2) || !$(p2))
    return i2 ? Cr : l2;
  let C2 = `${p2}__${l2}`;
  Rr(d2) || (C2 = `${C2}__${JSON.stringify(d2)}`);
  let A2 = o2.get(C2);
  return A2 || (A2 = new Intl.DateTimeFormat(p2, Qe$1({}, m2, d2)), o2.set(C2, A2)), c2 ? A2.formatToParts(u2) : A2.format(u2);
}
const Im = [
  "localeMatcher",
  "weekday",
  "era",
  "year",
  "month",
  "day",
  "hour",
  "minute",
  "second",
  "timeZoneName",
  "formatMatcher",
  "hour12",
  "timeZone",
  "dateStyle",
  "timeStyle",
  "calendar",
  "dayPeriod",
  "numberingSystem",
  "hourCycle",
  "fractionalSecondDigits"
];
function tl(...t2) {
  const [e2, n, i2, r2] = t2, a2 = ye$1();
  let s2 = ye$1(), o2;
  if ($(e2)) {
    const l2 = e2.match(/(\d{4}-\d{2}-\d{2})(T|\s)?(.*)/);
    if (!l2)
      throw qt$1(je$1.INVALID_ISO_DATE_ARGUMENT);
    const u2 = l2[3] ? l2[3].trim().startsWith("T") ? `${l2[1].trim()}${l2[3].trim()}` : `${l2[1].trim()}T${l2[3].trim()}` : l2[1].trim();
    o2 = new Date(u2);
    try {
      o2.toISOString();
    } catch {
      throw qt$1(je$1.INVALID_ISO_DATE_ARGUMENT);
    }
  } else if (eE(e2)) {
    if (isNaN(e2.getTime()))
      throw qt$1(je$1.INVALID_DATE_ARGUMENT);
    o2 = e2;
  } else if (He$1(e2))
    o2 = e2;
  else
    throw qt$1(je$1.INVALID_ARGUMENT);
  return $(n) ? a2.key = n : Ee$1(n) && Object.keys(n).forEach((l2) => {
    Im.includes(l2) ? s2[l2] = n[l2] : a2[l2] = n[l2];
  }), $(i2) ? a2.locale = i2 : Ee$1(i2) && (s2 = i2), Ee$1(r2) && (s2 = r2), [a2.key || "", o2, a2, s2];
}
function Sc(t2, e2, n) {
  const i2 = t2;
  for (const r2 in n) {
    const a2 = `${e2}__${r2}`;
    i2.__datetimeFormatters.has(a2) && i2.__datetimeFormatters.delete(a2);
  }
}
function bc(t2, ...e2) {
  const { numberFormats: n, unresolving: i2, fallbackLocale: r2, onWarn: a2, localeFallbacker: s2 } = t2, { __numberFormatters: o2 } = t2;
  const [l2, u2, _, d2] = nl(...e2), f2 = be$1(_.missingWarn) ? _.missingWarn : t2.missingWarn;
  be$1(_.fallbackWarn) ? _.fallbackWarn : t2.fallbackWarn;
  const c2 = !!_.part, E2 = Cl(t2, _), g2 = s2(
    t2,
    // eslint-disable-line @typescript-eslint/no-explicit-any
    r2,
    E2
  );
  if (!$(l2) || l2 === "")
    return new Intl.NumberFormat(E2, d2).format(u2);
  let S = {}, p2, m2 = null;
  const h2 = "number format";
  for (let I2 = 0; I2 < g2.length; I2++) {
    if (p2 = g2[I2], false)
      ;
    if (S = n[p2] || {}, m2 = S[l2], Ee$1(m2))
      break;
    Nl(t2, l2, p2, f2, h2);
  }
  if (!Ee$1(m2) || !$(p2))
    return i2 ? Cr : l2;
  let C2 = `${p2}__${l2}`;
  Rr(d2) || (C2 = `${C2}__${JSON.stringify(d2)}`);
  let A2 = o2.get(C2);
  return A2 || (A2 = new Intl.NumberFormat(p2, Qe$1({}, m2, d2)), o2.set(C2, A2)), c2 ? A2.formatToParts(u2) : A2.format(u2);
}
const Dm = [
  "localeMatcher",
  "style",
  "currency",
  "currencyDisplay",
  "currencySign",
  "useGrouping",
  "minimumIntegerDigits",
  "minimumFractionDigits",
  "maximumFractionDigits",
  "minimumSignificantDigits",
  "maximumSignificantDigits",
  "compactDisplay",
  "notation",
  "signDisplay",
  "unit",
  "unitDisplay",
  "roundingMode",
  "roundingPriority",
  "roundingIncrement",
  "trailingZeroDisplay"
];
function nl(...t2) {
  const [e2, n, i2, r2] = t2, a2 = ye$1();
  let s2 = ye$1();
  if (!He$1(e2))
    throw qt$1(je$1.INVALID_ARGUMENT);
  const o2 = e2;
  return $(n) ? a2.key = n : Ee$1(n) && Object.keys(n).forEach((l2) => {
    Dm.includes(l2) ? s2[l2] = n[l2] : a2[l2] = n[l2];
  }), $(i2) ? a2.locale = i2 : Ee$1(i2) && (s2 = i2), Ee$1(r2) && (s2 = r2), [a2.key || "", o2, a2, s2];
}
function Tc(t2, e2, n) {
  const i2 = t2;
  for (const r2 in n) {
    const a2 = `${e2}__${r2}`;
    i2.__numberFormatters.has(a2) && i2.__numberFormatters.delete(a2);
  }
}
const Cg = (t2) => t2, Ng = (t2) => "", vg = "text", Og = (t2) => t2.length === 0 ? "" : Sl(t2), Ag = aE;
function hc(t2, e2) {
  return t2 = Math.abs(t2), e2 === 2 ? t2 ? t2 > 1 ? 1 : 0 : 1 : t2 ? Math.min(t2, 2) : 0;
}
function yg(t2) {
  const e2 = He$1(t2.pluralIndex) ? t2.pluralIndex : -1;
  return t2.named && (He$1(t2.named.count) || He$1(t2.named.n)) ? He$1(t2.named.count) ? t2.named.count : He$1(t2.named.n) ? t2.named.n : e2 : e2;
}
function Ig(t2, e2) {
  e2.count || (e2.count = t2), e2.n || (e2.n = t2);
}
function Dg(t2 = {}) {
  const e2 = t2.locale, n = yg(t2), i2 = Se$1(t2.pluralRules) && $(e2) && we$1(t2.pluralRules[e2]) ? t2.pluralRules[e2] : hc, r2 = Se$1(t2.pluralRules) && $(e2) && we$1(t2.pluralRules[e2]) ? hc : void 0, a2 = (S) => S[i2(n, S.length, r2)], s2 = t2.list || [], o2 = (S) => s2[S], l2 = t2.named || ye$1();
  He$1(t2.pluralIndex) && Ig(n, l2);
  const u2 = (S) => l2[S];
  function _(S, p2) {
    const m2 = we$1(t2.messages) ? t2.messages(S, !!p2) : Se$1(t2.messages) ? t2.messages[S] : false;
    return m2 || (t2.parent ? t2.parent.message(S) : Ng);
  }
  const d2 = (S) => t2.modifiers ? t2.modifiers[S] : Cg, f2 = Ee$1(t2.processor) && we$1(t2.processor.normalize) ? t2.processor.normalize : Og, b = Ee$1(t2.processor) && we$1(t2.processor.interpolate) ? t2.processor.interpolate : Ag, c2 = Ee$1(t2.processor) && $(t2.processor.type) ? t2.processor.type : vg, g2 = {
    list: o2,
    named: u2,
    plural: a2,
    linked: (S, ...p2) => {
      const [m2, R2] = p2;
      let T = "text", h2 = "";
      p2.length === 1 ? Se$1(m2) ? (h2 = m2.modifier || h2, T = m2.type || T) : $(m2) && (h2 = m2 || h2) : p2.length === 2 && ($(m2) && (h2 = m2 || h2), $(R2) && (T = R2 || T));
      const C2 = _(S, true)(g2), A2 = (
        // The message in vnode resolved with linked are returned as an array by processor.nomalize
        T === "vnode" && qe(C2) && h2 ? C2[0] : C2
      );
      return h2 ? d2(h2)(A2, T) : A2;
    },
    message: _,
    type: c2,
    interpolate: b,
    normalize: f2,
    values: Qe$1(ye$1(), s2, l2)
  };
  return g2;
}
const Rc = () => "", mt$1 = (t2) => we$1(t2);
function Cc(t2, ...e2) {
  const { fallbackFormat: n, postTranslation: i2, unresolving: r2, messageCompiler: a2, fallbackLocale: s2, messages: o2 } = t2, [l2, u2] = rl(...e2), _ = be$1(u2.missingWarn) ? u2.missingWarn : t2.missingWarn, d2 = be$1(u2.fallbackWarn) ? u2.fallbackWarn : t2.fallbackWarn, f2 = be$1(u2.escapeParameter) ? u2.escapeParameter : t2.escapeParameter, b = !!u2.resolvedMessage, c2 = $(u2.default) || be$1(u2.default) ? be$1(u2.default) ? a2 ? l2 : () => l2 : u2.default : n ? a2 ? l2 : () => l2 : null, E2 = n || c2 != null && ($(c2) || we$1(c2)), g2 = Cl(t2, u2);
  f2 && xg(u2);
  let [S, p2, m2] = b ? [
    l2,
    g2,
    o2[g2] || ye$1()
  ] : xm(t2, l2, g2, s2, d2, _), R2 = S, T = l2;
  if (!b && !($(R2) || Et(R2) || mt$1(R2)) && E2 && (R2 = c2, T = R2), !b && (!($(R2) || Et(R2) || mt$1(R2)) || !$(p2)))
    return r2 ? Cr : l2;
  let h2 = false;
  const C2 = () => {
    h2 = true;
  }, A2 = mt$1(R2) ? R2 : Lm(t2, l2, p2, R2, T, C2);
  if (h2)
    return R2;
  const I2 = kg(t2, p2, m2, u2), v2 = Dg(I2), x = Lg(t2, A2, v2), M = i2 ? i2(x, l2) : x;
  if (__INTLIFY_PROD_DEVTOOLS__) {
    const B2 = {
      timestamp: Date.now(),
      key: $(l2) ? l2 : mt$1(R2) ? R2.key : "",
      locale: p2 || (mt$1(R2) ? R2.locale : ""),
      format: $(R2) ? R2 : mt$1(R2) ? R2.source : "",
      message: M
    };
    B2.meta = Qe$1({}, t2.__meta, {}), XE(B2);
  }
  return M;
}
function xg(t2) {
  qe(t2.list) ? t2.list = t2.list.map((e2) => $(e2) ? rc(e2) : e2) : Se$1(t2.named) && Object.keys(t2.named).forEach((e2) => {
    $(t2.named[e2]) && (t2.named[e2] = rc(t2.named[e2]));
  });
}
function xm(t2, e2, n, i2, r2, a2) {
  const { messages: s2, onWarn: o2, messageResolver: l2, localeFallbacker: u2 } = t2, _ = u2(t2, i2, n);
  let d2 = ye$1(), f2, b = null;
  const g2 = "translate";
  for (let S = 0; S < _.length; S++) {
    if (f2 = _[S], false)
      ;
    d2 = s2[f2] || ye$1();
    if ((b = l2(d2, e2)) === null && (b = d2[e2]), false)
      ;
    if ($(b) || Et(b) || mt$1(b))
      break;
    if (!Rg(f2, _)) {
      const T = Nl(
        t2,
        // eslint-disable-line @typescript-eslint/no-explicit-any
        e2,
        f2,
        a2,
        g2
      );
      T !== e2 && (b = T);
    }
  }
  return [b, f2, d2];
}
function Lm(t2, e2, n, i2, r2, a2) {
  const { messageCompiler: s2, warnHtmlMessage: o2 } = t2;
  if (mt$1(i2)) {
    const f2 = i2;
    return f2.locale = f2.locale || n, f2.key = f2.key || e2, f2;
  }
  if (s2 == null) {
    const f2 = () => i2;
    return f2.locale = n, f2.key = e2, f2;
  }
  const d2 = s2(i2, Mg(t2, n, r2, i2, o2, a2));
  return d2.locale = n, d2.key = e2, d2.source = i2, d2;
}
function Lg(t2, e2, n) {
  const s2 = e2(n);
  return s2;
}
function rl(...t2) {
  const [e2, n, i2] = t2, r2 = ye$1();
  if (!$(e2) && !He$1(e2) && !mt$1(e2) && !Et(e2))
    throw qt$1(je$1.INVALID_ARGUMENT);
  const a2 = He$1(e2) ? String(e2) : e2;
  return He$1(n) ? r2.plural = n : $(n) ? r2.default = n : Ee$1(n) && !Rr(n) ? r2.named = n : qe(n) && (r2.list = n), He$1(i2) ? r2.plural = i2 : $(i2) ? r2.default = i2 : Ee$1(i2) && Qe$1(r2, i2), [a2, r2];
}
function Mg(t2, e2, n, i2, r2, a2) {
  return {
    locale: e2,
    key: n,
    warnHtmlMessage: r2,
    onError: (s2) => {
      if (a2 && a2(s2), false)
        ;
      else
        throw s2;
    },
    onCacheKey: (s2) => J0(e2, n, s2)
  };
}
function kg(t2, e2, n, i2) {
  const { modifiers: r2, pluralRules: a2, messageResolver: s2, fallbackLocale: o2, fallbackWarn: l2, missingWarn: u2, fallbackContext: _ } = t2, f2 = {
    locale: e2,
    modifiers: r2,
    pluralRules: a2,
    messages: (b, c2) => {
      let E2 = s2(n, b);
      if (E2 == null && (_ || c2)) {
        const [, , g2] = xm(
          _ || t2,
          // NOTE: if has fallbackContext, fallback to root, else if use linked, fallback to local context
          b,
          e2,
          o2,
          l2,
          u2
        );
        E2 = s2(g2, b);
      }
      if ($(E2) || Et(E2)) {
        let g2 = false;
        const p2 = Lm(t2, b, e2, E2, b, () => {
          g2 = true;
        });
        return g2 ? Rc : p2;
      } else
        return mt$1(E2) ? E2 : Rc;
    }
  };
  return t2.processor && (f2.processor = t2.processor), i2.list && (f2.list = i2.list), i2.named && (f2.named = i2.named), He$1(i2.plural) && (f2.pluralIndex = i2.plural), f2;
}
kE();
/*!
  * vue-i18n v11.1.3
  * (c) 2025 kazuya kawaguchi
  * Released under the MIT License.
  */
const Hg = "11.1.3";
function zg() {
  typeof __VUE_I18N_FULL_INSTALL__ != "boolean" && (rn$1().__VUE_I18N_FULL_INSTALL__ = true), typeof __VUE_I18N_LEGACY_API__ != "boolean" && (rn$1().__VUE_I18N_LEGACY_API__ = true), typeof __INTLIFY_DROP_MESSAGE_COMPILER__ != "boolean" && (rn$1().__INTLIFY_DROP_MESSAGE_COMPILER__ = false), typeof __INTLIFY_PROD_DEVTOOLS__ != "boolean" && (rn$1().__INTLIFY_PROD_DEVTOOLS__ = false);
}
const Pe$1 = {
  // composer module errors
  UNEXPECTED_RETURN_TYPE: JE,
  // 24
  // legacy module errors
  INVALID_ARGUMENT: 25,
  // i18n module errors
  MUST_BE_CALL_SETUP_TOP: 26,
  NOT_INSTALLED: 27,
  // directive module errors
  REQUIRED_VALUE: 28,
  INVALID_VALUE: 29,
  // vue-devtools errors
  CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN: 30,
  NOT_INSTALLED_WITH_PROVIDE: 31,
  // unexpected error
  UNEXPECTED_ERROR: 32,
  // not compatible legacy vue-i18n constructor
  NOT_COMPATIBLE_LEGACY_VUE_I18N: 33,
  // Not available Compostion API in Legacy API mode. Please make sure that the legacy API mode is working properly
  NOT_AVAILABLE_COMPOSITION_IN_LEGACY: 34
};
function rt$1(t2, ...e2) {
  return Cn(t2, null, void 0);
}
const il = /* @__PURE__ */ Lt("__translateVNode"), ol = /* @__PURE__ */ Lt("__datetimeParts"), sl = /* @__PURE__ */ Lt("__numberParts"), wm = Lt("__setPluralRules"), km = /* @__PURE__ */ Lt("__injectWithOption"), ll = /* @__PURE__ */ Lt("__dispose");
function Gn(t2) {
  if (!Se$1(t2) || Et(t2))
    return t2;
  for (const e2 in t2)
    if (Tt$1(t2, e2))
      if (!e2.includes("."))
        Se$1(t2[e2]) && Gn(t2[e2]);
      else {
        const n = e2.split("."), i2 = n.length - 1;
        let r2 = t2, a2 = false;
        for (let s2 = 0; s2 < i2; s2++) {
          if (n[s2] === "__proto__")
            throw new Error(`unsafe key: ${n[s2]}`);
          if (n[s2] in r2 || (r2[n[s2]] = ye$1()), !Se$1(r2[n[s2]])) {
            a2 = true;
            break;
          }
          r2 = r2[n[s2]];
        }
        if (a2 || (Et(r2) ? bm.includes(n[i2]) || delete t2[e2] : (r2[n[i2]] = t2[e2], delete t2[e2])), !Et(r2)) {
          const s2 = r2[n[i2]];
          Se$1(s2) && Gn(s2);
        }
      }
  return t2;
}
function vl(t2, e2) {
  const { messages: n, __i18n: i2, messageResolver: r2, flatJson: a2 } = e2, s2 = Ee$1(n) ? n : qe(i2) ? ye$1() : { [t2]: ye$1() };
  if (qe(i2) && i2.forEach((o2) => {
    if ("locale" in o2 && "resource" in o2) {
      const { locale: l2, resource: u2 } = o2;
      l2 ? (s2[l2] = s2[l2] || ye$1(), _r(u2, s2[l2])) : _r(u2, s2);
    } else
      $(o2) && _r(JSON.parse(o2), s2);
  }), r2 == null && a2)
    for (const o2 in s2)
      Tt$1(s2, o2) && Gn(s2[o2]);
  return s2;
}
function Pm(t2) {
  return t2.type;
}
function Fm(t2, e2, n) {
  let i2 = Se$1(e2.messages) ? e2.messages : ye$1();
  "__i18nGlobal" in n && (i2 = vl(t2.locale.value, {
    messages: i2,
    __i18n: n.__i18nGlobal
  }));
  const r2 = Object.keys(i2);
  r2.length && r2.forEach((a2) => {
    t2.mergeLocaleMessage(a2, i2[a2]);
  });
  {
    if (Se$1(e2.datetimeFormats)) {
      const a2 = Object.keys(e2.datetimeFormats);
      a2.length && a2.forEach((s2) => {
        t2.mergeDateTimeFormat(s2, e2.datetimeFormats[s2]);
      });
    }
    if (Se$1(e2.numberFormats)) {
      const a2 = Object.keys(e2.numberFormats);
      a2.length && a2.forEach((s2) => {
        t2.mergeNumberFormat(s2, e2.numberFormats[s2]);
      });
    }
  }
}
function Nc(t2) {
  return createVNode(Text, null, t2, 0);
}
const Oc = () => [], Kg = () => false;
let Ac = 0;
function yc(t2) {
  return (e2, n, i2, r2) => t2(n, i2, getCurrentInstance() || void 0, r2);
}
function Ol(t2 = {}) {
  const { __root: e2, __injectWithOption: n } = t2, i2 = e2 === void 0, r2 = t2.flatJson, a2 = ht$1 ? ref : shallowRef;
  let s2 = be$1(t2.inheritLocale) ? t2.inheritLocale : true;
  const o2 = a2(
    // prettier-ignore
    e2 && s2 ? e2.locale.value : $(t2.locale) ? t2.locale : Un
  ), l2 = a2(
    // prettier-ignore
    e2 && s2 ? e2.fallbackLocale.value : $(t2.fallbackLocale) || qe(t2.fallbackLocale) || Ee$1(t2.fallbackLocale) || t2.fallbackLocale === false ? t2.fallbackLocale : o2.value
  ), u2 = a2(vl(o2.value, t2)), _ = a2(Ee$1(t2.datetimeFormats) ? t2.datetimeFormats : { [o2.value]: {} }), d2 = a2(Ee$1(t2.numberFormats) ? t2.numberFormats : { [o2.value]: {} });
  let f2 = e2 ? e2.missingWarn : be$1(t2.missingWarn) || Sn(t2.missingWarn) ? t2.missingWarn : true, b = e2 ? e2.fallbackWarn : be$1(t2.fallbackWarn) || Sn(t2.fallbackWarn) ? t2.fallbackWarn : true, c2 = e2 ? e2.fallbackRoot : be$1(t2.fallbackRoot) ? t2.fallbackRoot : true, E2 = !!t2.fallbackFormat, g2 = we$1(t2.missing) ? t2.missing : null, S = we$1(t2.missing) ? yc(t2.missing) : null, p2 = we$1(t2.postTranslation) ? t2.postTranslation : null, m2 = e2 ? e2.warnHtmlMessage : be$1(t2.warnHtmlMessage) ? t2.warnHtmlMessage : true, R2 = !!t2.escapeParameter;
  const T = e2 ? e2.modifiers : Ee$1(t2.modifiers) ? t2.modifiers : {};
  let h2 = t2.pluralRules || e2 && e2.pluralRules, C2;
  C2 = (() => {
    i2 && mc(null);
    const k = {
      version: Hg,
      locale: o2.value,
      fallbackLocale: l2.value,
      messages: u2.value,
      modifiers: T,
      pluralRules: h2,
      missing: S === null ? void 0 : S,
      missingWarn: f2,
      fallbackWarn: b,
      fallbackFormat: E2,
      unresolving: true,
      postTranslation: p2 === null ? void 0 : p2,
      warnHtmlMessage: m2,
      escapeParameter: R2,
      messageResolver: t2.messageResolver,
      messageCompiler: t2.messageCompiler,
      __meta: { framework: "vue" }
    };
    k.datetimeFormats = _.value, k.numberFormats = d2.value, k.__datetimeFormatters = Ee$1(C2) ? C2.__datetimeFormatters : void 0, k.__numberFormatters = Ee$1(C2) ? C2.__numberFormatters : void 0;
    const F = hg(k);
    return i2 && mc(F), F;
  })(), wn(C2, o2.value, l2.value);
  function I2() {
    return [
      o2.value,
      l2.value,
      u2.value,
      _.value,
      d2.value
    ];
  }
  const v2 = computed({
    get: () => o2.value,
    set: (k) => {
      C2.locale = k, o2.value = k;
    }
  }), x = computed({
    get: () => l2.value,
    set: (k) => {
      C2.fallbackLocale = k, l2.value = k, wn(C2, o2.value, k);
    }
  }), M = computed(() => u2.value), B2 = /* @__PURE__ */ computed(() => _.value), G2 = /* @__PURE__ */ computed(() => d2.value);
  function D() {
    return we$1(p2) ? p2 : null;
  }
  function w(k) {
    p2 = k, C2.postTranslation = k;
  }
  function L() {
    return g2;
  }
  function q2(k) {
    k !== null && (S = yc(k)), g2 = k, C2.missing = S;
  }
  const re = (k, F, me2, Le2, it2, ft2) => {
    I2();
    let St2;
    try {
      __INTLIFY_PROD_DEVTOOLS__, i2 || (C2.fallbackContext = e2 ? Tg() : void 0), St2 = k(C2);
    } finally {
      __INTLIFY_PROD_DEVTOOLS__, i2 || (C2.fallbackContext = void 0);
    }
    if (me2 !== "translate exists" && // for not `te` (e.g `t`)
    He$1(St2) && St2 === Cr || me2 === "translate exists" && !St2) {
      const [ot2, cn2] = F();
      return e2 && c2 ? Le2(e2) : it2(ot2);
    } else {
      if (ft2(St2))
        return St2;
      throw rt$1(Pe$1.UNEXPECTED_RETURN_TYPE);
    }
  };
  function j(...k) {
    return re((F) => Reflect.apply(Cc, null, [F, ...k]), () => rl(...k), "translate", (F) => Reflect.apply(F.t, F, [...k]), (F) => F, (F) => $(F));
  }
  function ue(...k) {
    const [F, me2, Le2] = k;
    if (Le2 && !Se$1(Le2))
      throw rt$1(Pe$1.INVALID_ARGUMENT);
    return j(F, me2, Qe$1({ resolvedMessage: true }, Le2 || {}));
  }
  function se2(...k) {
    return re((F) => Reflect.apply(fc, null, [F, ...k]), () => tl(...k), "datetime format", (F) => Reflect.apply(F.d, F, [...k]), () => mr, (F) => $(F));
  }
  function Re2(...k) {
    return re((F) => Reflect.apply(bc, null, [F, ...k]), () => nl(...k), "number format", (F) => Reflect.apply(F.n, F, [...k]), () => mr, (F) => $(F));
  }
  function Ce(k) {
    return k.map((F) => $(F) || He$1(F) || be$1(F) ? Nc(String(F)) : F);
  }
  const ne2 = {
    normalize: Ce,
    interpolate: (k) => k,
    type: "vnode"
  };
  function ae(...k) {
    return re((F) => {
      let me2;
      const Le2 = F;
      try {
        Le2.processor = ne2, me2 = Reflect.apply(Cc, null, [Le2, ...k]);
      } finally {
        Le2.processor = null;
      }
      return me2;
    }, () => rl(...k), "translate", (F) => F[il](...k), (F) => [Nc(F)], (F) => qe(F));
  }
  function pe(...k) {
    return re((F) => Reflect.apply(bc, null, [F, ...k]), () => nl(...k), "number format", (F) => F[sl](...k), Oc, (F) => $(F) || qe(F));
  }
  function fe2(...k) {
    return re((F) => Reflect.apply(fc, null, [F, ...k]), () => tl(...k), "datetime format", (F) => F[ol](...k), Oc, (F) => $(F) || qe(F));
  }
  function Ne(k) {
    h2 = k, C2.pluralRules = h2;
  }
  function ve2(k, F) {
    return re(() => {
      if (!k)
        return false;
      const me2 = $(F) ? F : o2.value, Le2 = De2(me2), it2 = C2.messageResolver(Le2, k);
      return Et(it2) || mt$1(it2) || $(it2);
    }, () => [k], "translate exists", (me2) => Reflect.apply(me2.te, me2, [k, F]), Kg, (me2) => be$1(me2));
  }
  function Ie(k) {
    let F = null;
    const me2 = Tm(C2, l2.value, o2.value);
    for (let Le2 = 0; Le2 < me2.length; Le2++) {
      const it2 = u2.value[me2[Le2]] || {}, ft2 = C2.messageResolver(it2, k);
      if (ft2 != null) {
        F = ft2;
        break;
      }
    }
    return F;
  }
  function Ue(k) {
    const F = Ie(k);
    return F ?? (e2 ? e2.tm(k) || {} : {});
  }
  function De2(k) {
    return u2.value[k] || {};
  }
  function Je2(k, F) {
    if (r2) {
      const me2 = { [k]: F };
      for (const Le2 in me2)
        Tt$1(me2, Le2) && Gn(me2[Le2]);
      F = me2[k];
    }
    u2.value[k] = F, C2.messages = u2.value;
  }
  function kt(k, F) {
    u2.value[k] = u2.value[k] || {};
    const me2 = { [k]: F };
    if (r2)
      for (const Le2 in me2)
        Tt$1(me2, Le2) && Gn(me2[Le2]);
    F = me2[k], _r(F, u2.value[k]), C2.messages = u2.value;
  }
  function O(k) {
    return _.value[k] || {};
  }
  function y(k, F) {
    _.value[k] = F, C2.datetimeFormats = _.value, Sc(C2, k, F);
  }
  function U2(k, F) {
    _.value[k] = Qe$1(_.value[k] || {}, F), C2.datetimeFormats = _.value, Sc(C2, k, F);
  }
  function Q2(k) {
    return d2.value[k] || {};
  }
  function ke2(k, F) {
    d2.value[k] = F, C2.numberFormats = d2.value, Tc(C2, k, F);
  }
  function xe(k, F) {
    d2.value[k] = Qe$1(d2.value[k] || {}, F), C2.numberFormats = d2.value, Tc(C2, k, F);
  }
  Ac++, e2 && ht$1 && (watch(e2.locale, (k) => {
    s2 && (o2.value = k, C2.locale = k, wn(C2, o2.value, l2.value));
  }), watch(e2.fallbackLocale, (k) => {
    s2 && (l2.value = k, C2.fallbackLocale = k, wn(C2, o2.value, l2.value));
  }));
  const le = {
    id: Ac,
    locale: v2,
    fallbackLocale: x,
    get inheritLocale() {
      return s2;
    },
    set inheritLocale(k) {
      s2 = k, k && e2 && (o2.value = e2.locale.value, l2.value = e2.fallbackLocale.value, wn(C2, o2.value, l2.value));
    },
    get availableLocales() {
      return Object.keys(u2.value).sort();
    },
    messages: M,
    get modifiers() {
      return T;
    },
    get pluralRules() {
      return h2 || {};
    },
    get isGlobal() {
      return i2;
    },
    get missingWarn() {
      return f2;
    },
    set missingWarn(k) {
      f2 = k, C2.missingWarn = f2;
    },
    get fallbackWarn() {
      return b;
    },
    set fallbackWarn(k) {
      b = k, C2.fallbackWarn = b;
    },
    get fallbackRoot() {
      return c2;
    },
    set fallbackRoot(k) {
      c2 = k;
    },
    get fallbackFormat() {
      return E2;
    },
    set fallbackFormat(k) {
      E2 = k, C2.fallbackFormat = E2;
    },
    get warnHtmlMessage() {
      return m2;
    },
    set warnHtmlMessage(k) {
      m2 = k, C2.warnHtmlMessage = k;
    },
    get escapeParameter() {
      return R2;
    },
    set escapeParameter(k) {
      R2 = k, C2.escapeParameter = k;
    },
    t: j,
    getLocaleMessage: De2,
    setLocaleMessage: Je2,
    mergeLocaleMessage: kt,
    getPostTranslationHandler: D,
    setPostTranslationHandler: w,
    getMissingHandler: L,
    setMissingHandler: q2,
    [wm]: Ne
  };
  return le.datetimeFormats = B2, le.numberFormats = G2, le.rt = ue, le.te = ve2, le.tm = Ue, le.d = se2, le.n = Re2, le.getDateTimeFormat = O, le.setDateTimeFormat = y, le.mergeDateTimeFormat = U2, le.getNumberFormat = Q2, le.setNumberFormat = ke2, le.mergeNumberFormat = xe, le[km] = n, le[il] = ae, le[ol] = fe2, le[sl] = pe, le;
}
function uf(t2) {
  const e2 = $(t2.locale) ? t2.locale : Un, n = $(t2.fallbackLocale) || qe(t2.fallbackLocale) || Ee$1(t2.fallbackLocale) || t2.fallbackLocale === false ? t2.fallbackLocale : e2, i2 = we$1(t2.missing) ? t2.missing : void 0, r2 = be$1(t2.silentTranslationWarn) || Sn(t2.silentTranslationWarn) ? !t2.silentTranslationWarn : true, a2 = be$1(t2.silentFallbackWarn) || Sn(t2.silentFallbackWarn) ? !t2.silentFallbackWarn : true, s2 = be$1(t2.fallbackRoot) ? t2.fallbackRoot : true, o2 = !!t2.formatFallbackMessages, l2 = Ee$1(t2.modifiers) ? t2.modifiers : {}, u2 = t2.pluralizationRules, _ = we$1(t2.postTranslation) ? t2.postTranslation : void 0, d2 = $(t2.warnHtmlInMessage) ? t2.warnHtmlInMessage !== "off" : true, f2 = !!t2.escapeParameterHtml, b = be$1(t2.sync) ? t2.sync : true;
  let c2 = t2.messages;
  if (Ee$1(t2.sharedMessages)) {
    const T = t2.sharedMessages;
    c2 = Object.keys(T).reduce((C2, A2) => {
      const I2 = C2[A2] || (C2[A2] = {});
      return Qe$1(I2, T[A2]), C2;
    }, c2 || {});
  }
  const { __i18n: E2, __root: g2, __injectWithOption: S } = t2, p2 = t2.datetimeFormats, m2 = t2.numberFormats, R2 = t2.flatJson;
  return {
    locale: e2,
    fallbackLocale: n,
    messages: c2,
    flatJson: R2,
    datetimeFormats: p2,
    numberFormats: m2,
    missing: i2,
    missingWarn: r2,
    fallbackWarn: a2,
    fallbackRoot: s2,
    fallbackFormat: o2,
    modifiers: l2,
    pluralRules: u2,
    postTranslation: _,
    warnHtmlMessage: d2,
    escapeParameter: f2,
    messageResolver: t2.messageResolver,
    inheritLocale: b,
    __i18n: E2,
    __root: g2,
    __injectWithOption: S
  };
}
function ul(t2 = {}) {
  const e2 = Ol(uf(t2)), { __extender: n } = t2, i2 = {
    // id
    id: e2.id,
    // locale
    get locale() {
      return e2.locale.value;
    },
    set locale(r2) {
      e2.locale.value = r2;
    },
    // fallbackLocale
    get fallbackLocale() {
      return e2.fallbackLocale.value;
    },
    set fallbackLocale(r2) {
      e2.fallbackLocale.value = r2;
    },
    // messages
    get messages() {
      return e2.messages.value;
    },
    // datetimeFormats
    get datetimeFormats() {
      return e2.datetimeFormats.value;
    },
    // numberFormats
    get numberFormats() {
      return e2.numberFormats.value;
    },
    // availableLocales
    get availableLocales() {
      return e2.availableLocales;
    },
    // missing
    get missing() {
      return e2.getMissingHandler();
    },
    set missing(r2) {
      e2.setMissingHandler(r2);
    },
    // silentTranslationWarn
    get silentTranslationWarn() {
      return be$1(e2.missingWarn) ? !e2.missingWarn : e2.missingWarn;
    },
    set silentTranslationWarn(r2) {
      e2.missingWarn = be$1(r2) ? !r2 : r2;
    },
    // silentFallbackWarn
    get silentFallbackWarn() {
      return be$1(e2.fallbackWarn) ? !e2.fallbackWarn : e2.fallbackWarn;
    },
    set silentFallbackWarn(r2) {
      e2.fallbackWarn = be$1(r2) ? !r2 : r2;
    },
    // modifiers
    get modifiers() {
      return e2.modifiers;
    },
    // formatFallbackMessages
    get formatFallbackMessages() {
      return e2.fallbackFormat;
    },
    set formatFallbackMessages(r2) {
      e2.fallbackFormat = r2;
    },
    // postTranslation
    get postTranslation() {
      return e2.getPostTranslationHandler();
    },
    set postTranslation(r2) {
      e2.setPostTranslationHandler(r2);
    },
    // sync
    get sync() {
      return e2.inheritLocale;
    },
    set sync(r2) {
      e2.inheritLocale = r2;
    },
    // warnInHtmlMessage
    get warnHtmlInMessage() {
      return e2.warnHtmlMessage ? "warn" : "off";
    },
    set warnHtmlInMessage(r2) {
      e2.warnHtmlMessage = r2 !== "off";
    },
    // escapeParameterHtml
    get escapeParameterHtml() {
      return e2.escapeParameter;
    },
    set escapeParameterHtml(r2) {
      e2.escapeParameter = r2;
    },
    // pluralizationRules
    get pluralizationRules() {
      return e2.pluralRules || {};
    },
    // for internal
    __composer: e2,
    // t
    t(...r2) {
      return Reflect.apply(e2.t, e2, [...r2]);
    },
    // rt
    rt(...r2) {
      return Reflect.apply(e2.rt, e2, [...r2]);
    },
    // te
    te(r2, a2) {
      return e2.te(r2, a2);
    },
    // tm
    tm(r2) {
      return e2.tm(r2);
    },
    // getLocaleMessage
    getLocaleMessage(r2) {
      return e2.getLocaleMessage(r2);
    },
    // setLocaleMessage
    setLocaleMessage(r2, a2) {
      e2.setLocaleMessage(r2, a2);
    },
    // mergeLocaleMessage
    mergeLocaleMessage(r2, a2) {
      e2.mergeLocaleMessage(r2, a2);
    },
    // d
    d(...r2) {
      return Reflect.apply(e2.d, e2, [...r2]);
    },
    // getDateTimeFormat
    getDateTimeFormat(r2) {
      return e2.getDateTimeFormat(r2);
    },
    // setDateTimeFormat
    setDateTimeFormat(r2, a2) {
      e2.setDateTimeFormat(r2, a2);
    },
    // mergeDateTimeFormat
    mergeDateTimeFormat(r2, a2) {
      e2.mergeDateTimeFormat(r2, a2);
    },
    // n
    n(...r2) {
      return Reflect.apply(e2.n, e2, [...r2]);
    },
    // getNumberFormat
    getNumberFormat(r2) {
      return e2.getNumberFormat(r2);
    },
    // setNumberFormat
    setNumberFormat(r2, a2) {
      e2.setNumberFormat(r2, a2);
    },
    // mergeNumberFormat
    mergeNumberFormat(r2, a2) {
      e2.mergeNumberFormat(r2, a2);
    }
  };
  return i2.__extender = n, i2;
}
function _f(t2, e2, n) {
  return {
    beforeCreate() {
      const i2 = getCurrentInstance();
      if (!i2)
        throw rt$1(Pe$1.UNEXPECTED_ERROR);
      const r2 = this.$options;
      if (r2.i18n) {
        const a2 = r2.i18n;
        if (r2.__i18n && (a2.__i18n = r2.__i18n), a2.__root = e2, this === this.$root)
          this.$i18n = Dc(t2, a2);
        else {
          a2.__injectWithOption = true, a2.__extender = n.__vueI18nExtend, this.$i18n = ul(a2);
          const s2 = this.$i18n;
          s2.__extender && (s2.__disposer = s2.__extender(this.$i18n));
        }
      } else if (r2.__i18n)
        if (this === this.$root)
          this.$i18n = Dc(t2, r2);
        else {
          this.$i18n = ul({
            __i18n: r2.__i18n,
            __injectWithOption: true,
            __extender: n.__vueI18nExtend,
            __root: e2
          });
          const a2 = this.$i18n;
          a2.__extender && (a2.__disposer = a2.__extender(this.$i18n));
        }
      else
        this.$i18n = t2;
      r2.__i18nGlobal && Fm(e2, r2, r2), this.$t = (...a2) => this.$i18n.t(...a2), this.$rt = (...a2) => this.$i18n.rt(...a2), this.$te = (a2, s2) => this.$i18n.te(a2, s2), this.$d = (...a2) => this.$i18n.d(...a2), this.$n = (...a2) => this.$i18n.n(...a2), this.$tm = (a2) => this.$i18n.tm(a2), n.__setInstance(i2, this.$i18n);
    },
    mounted() {
    },
    unmounted() {
      const i2 = getCurrentInstance();
      if (!i2)
        throw rt$1(Pe$1.UNEXPECTED_ERROR);
      const r2 = this.$i18n;
      delete this.$t, delete this.$rt, delete this.$te, delete this.$d, delete this.$n, delete this.$tm, r2.__disposer && (r2.__disposer(), delete r2.__disposer, delete r2.__extender), n.__deleteInstance(i2), delete this.$i18n;
    }
  };
}
function Dc(t2, e2) {
  t2.locale = e2.locale || t2.locale, t2.fallbackLocale = e2.fallbackLocale || t2.fallbackLocale, t2.missing = e2.missing || t2.missing, t2.silentTranslationWarn = e2.silentTranslationWarn || t2.silentFallbackWarn, t2.silentFallbackWarn = e2.silentFallbackWarn || t2.silentFallbackWarn, t2.formatFallbackMessages = e2.formatFallbackMessages || t2.formatFallbackMessages, t2.postTranslation = e2.postTranslation || t2.postTranslation, t2.warnHtmlInMessage = e2.warnHtmlInMessage || t2.warnHtmlInMessage, t2.escapeParameterHtml = e2.escapeParameterHtml || t2.escapeParameterHtml, t2.sync = e2.sync || t2.sync, t2.__composer[wm](e2.pluralizationRules || t2.pluralizationRules);
  const n = vl(t2.locale, {
    messages: e2.messages,
    __i18n: e2.__i18n
  });
  return Object.keys(n).forEach((i2) => t2.mergeLocaleMessage(i2, n[i2])), e2.datetimeFormats && Object.keys(e2.datetimeFormats).forEach((i2) => t2.mergeDateTimeFormat(i2, e2.datetimeFormats[i2])), e2.numberFormats && Object.keys(e2.numberFormats).forEach((i2) => t2.mergeNumberFormat(i2, e2.numberFormats[i2])), t2;
}
const yl = {
  tag: {
    type: [String, Object]
  },
  locale: {
    type: String
  },
  scope: {
    type: String,
    // NOTE: avoid https://github.com/microsoft/rushstack/issues/1050
    validator: (t2) => t2 === "parent" || t2 === "global",
    default: "parent"
    /* ComponentI18nScope */
  },
  i18n: {
    type: Object
  }
};
function df({ slots: t2 }, e2) {
  return e2.length === 1 && e2[0] === "default" ? (t2.default ? t2.default() : []).reduce((i2, r2) => [
    ...i2,
    // prettier-ignore
    ...r2.type === Fragment ? r2.children : [r2]
  ], []) : e2.reduce((n, i2) => {
    const r2 = t2[i2];
    return r2 && (n[i2] = r2()), n;
  }, ye$1());
}
function Ym() {
  return Fragment;
}
const pf = /* @__PURE__ */ defineComponent({
  /* eslint-disable */
  name: "i18n-t",
  props: Qe$1({
    keypath: {
      type: String,
      required: true
    },
    plural: {
      type: [Number, String],
      validator: (t2) => He$1(t2) || !isNaN(t2)
    }
  }, yl),
  /* eslint-enable */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  setup(t2, e2) {
    const { slots: n, attrs: i2 } = e2, r2 = t2.i18n || Il({
      useScope: t2.scope,
      __useComponent: true
    });
    return () => {
      const a2 = Object.keys(n).filter((d2) => d2 !== "_"), s2 = ye$1();
      t2.locale && (s2.locale = t2.locale), t2.plural !== void 0 && (s2.plural = $(t2.plural) ? +t2.plural : t2.plural);
      const o2 = df(e2, a2), l2 = r2[il](t2.keypath, o2, s2), u2 = Qe$1(ye$1(), i2), _ = $(t2.tag) || Se$1(t2.tag) ? t2.tag : Ym();
      return h$1(_, u2, l2);
    };
  }
}), xc = pf;
function mf(t2) {
  return qe(t2) && !$(t2[0]);
}
function qm(t2, e2, n, i2) {
  const { slots: r2, attrs: a2 } = e2;
  return () => {
    const s2 = { part: true };
    let o2 = ye$1();
    t2.locale && (s2.locale = t2.locale), $(t2.format) ? s2.key = t2.format : Se$1(t2.format) && ($(t2.format.key) && (s2.key = t2.format.key), o2 = Object.keys(t2.format).reduce((f2, b) => n.includes(b) ? Qe$1(ye$1(), f2, { [b]: t2.format[b] }) : f2, ye$1()));
    const l2 = i2(t2.value, s2, o2);
    let u2 = [s2.key];
    qe(l2) ? u2 = l2.map((f2, b) => {
      const c2 = r2[f2.type], E2 = c2 ? c2({ [f2.type]: f2.value, index: b, parts: l2 }) : [f2.value];
      return mf(E2) && (E2[0].key = `${f2.type}-${b}`), E2;
    }) : $(l2) && (u2 = [l2]);
    const _ = Qe$1(ye$1(), a2), d2 = $(t2.tag) || Se$1(t2.tag) ? t2.tag : Ym();
    return h$1(d2, _, u2);
  };
}
const Ef = /* @__PURE__ */ defineComponent({
  /* eslint-disable */
  name: "i18n-n",
  props: Qe$1({
    value: {
      type: Number,
      required: true
    },
    format: {
      type: [String, Object]
    }
  }, yl),
  /* eslint-enable */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  setup(t2, e2) {
    const n = t2.i18n || Il({
      useScope: t2.scope,
      __useComponent: true
    });
    return qm(t2, e2, Dm, (...i2) => (
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      n[sl](...i2)
    ));
  }
}), Lc = Ef;
function gf(t2, e2) {
  const n = t2;
  if (t2.mode === "composition")
    return n.__getInstance(e2) || t2.global;
  {
    const i2 = n.__getInstance(e2);
    return i2 != null ? i2.__composer : t2.global.__composer;
  }
}
function ff(t2) {
  const e2 = (s2) => {
    const { instance: o2, value: l2 } = s2;
    if (!o2 || !o2.$)
      throw rt$1(Pe$1.UNEXPECTED_ERROR);
    const u2 = gf(t2, o2.$), _ = Mc(l2);
    return [
      Reflect.apply(u2.t, u2, [...wc(_)]),
      u2
    ];
  };
  return {
    created: (s2, o2) => {
      const [l2, u2] = e2(o2);
      ht$1 && t2.global === u2 && (s2.__i18nWatcher = watch(u2.locale, () => {
        o2.instance && o2.instance.$forceUpdate();
      })), s2.__composer = u2, s2.textContent = l2;
    },
    unmounted: (s2) => {
      ht$1 && s2.__i18nWatcher && (s2.__i18nWatcher(), s2.__i18nWatcher = void 0, delete s2.__i18nWatcher), s2.__composer && (s2.__composer = void 0, delete s2.__composer);
    },
    beforeUpdate: (s2, { value: o2 }) => {
      if (s2.__composer) {
        const l2 = s2.__composer, u2 = Mc(o2);
        s2.textContent = Reflect.apply(l2.t, l2, [
          ...wc(u2)
        ]);
      }
    },
    getSSRProps: (s2) => {
      const [o2] = e2(s2);
      return { textContent: o2 };
    }
  };
}
function Mc(t2) {
  if ($(t2))
    return { path: t2 };
  if (Ee$1(t2)) {
    if (!("path" in t2))
      throw rt$1(Pe$1.REQUIRED_VALUE, "path");
    return t2;
  } else
    throw rt$1(Pe$1.INVALID_VALUE);
}
function wc(t2) {
  const { path: e2, locale: n, args: i2, choice: r2, plural: a2 } = t2, s2 = {}, o2 = i2 || {};
  return $(n) && (s2.locale = n), He$1(r2) && (s2.plural = r2), He$1(a2) && (s2.plural = a2), [e2, o2, s2];
}
function Sf(t2, e2, ...n) {
  const i2 = Ee$1(n[0]) ? n[0] : {};
  (be$1(i2.globalInstall) ? i2.globalInstall : true) && ([xc.name, "I18nT"].forEach((a2) => t2.component(a2, xc)), [Lc.name, "I18nN"].forEach((a2) => t2.component(a2, Lc)), [Pc.name, "I18nD"].forEach((a2) => t2.component(a2, Pc))), t2.directive("t", ff(e2));
}
const bf = /* @__PURE__ */ Lt("global-vue-i18n");
function Tf(t2 = {}) {
  const e2 = __VUE_I18N_LEGACY_API__ && be$1(t2.legacy) ? t2.legacy : __VUE_I18N_LEGACY_API__;
  const n = be$1(t2.globalInjection) ? t2.globalInjection : true, i2 = /* @__PURE__ */ new Map(), [r2, a2] = hf(t2, e2), s2 = /* @__PURE__ */ Lt("");
  function o2(d2) {
    return i2.get(d2) || null;
  }
  function l2(d2, f2) {
    i2.set(d2, f2);
  }
  function u2(d2) {
    i2.delete(d2);
  }
  const _ = {
    // mode
    get mode() {
      return __VUE_I18N_LEGACY_API__ && e2 ? "legacy" : "composition";
    },
    // install plugin
    async install(d2, ...f2) {
      if (d2.__VUE_I18N_SYMBOL__ = s2, d2.provide(d2.__VUE_I18N_SYMBOL__, _), Ee$1(f2[0])) {
        const E2 = f2[0];
        _.__composerExtend = E2.__composerExtend, _.__vueI18nExtend = E2.__vueI18nExtend;
      }
      let b = null;
      !e2 && n && (b = If(d2, _.global)), __VUE_I18N_FULL_INSTALL__ && Sf(d2, _, ...f2), __VUE_I18N_LEGACY_API__ && e2 && d2.mixin(_f(a2, a2.__composer, _));
      const c2 = d2.unmount;
      if (d2.unmount = () => {
        b && b(), _.dispose(), c2();
      }, false)
        ;
    },
    // global accessor
    get global() {
      return a2;
    },
    dispose() {
      r2.stop();
    },
    // @internal
    __instances: i2,
    // @internal
    __getInstance: o2,
    // @internal
    __setInstance: l2,
    // @internal
    __deleteInstance: u2
  };
  return _;
}
function Il(t2 = {}) {
  const e2 = getCurrentInstance();
  if (e2 == null)
    throw rt$1(Pe$1.MUST_BE_CALL_SETUP_TOP);
  if (!e2.isCE && e2.appContext.app != null && !e2.appContext.app.__VUE_I18N_SYMBOL__)
    throw rt$1(Pe$1.NOT_INSTALLED);
  const n = Rf(e2), i2 = Nf(n), r2 = Pm(e2), a2 = Cf(t2, r2);
  if (a2 === "global")
    return Fm(i2, t2, r2), i2;
  if (a2 === "parent") {
    let l2 = vf(n, e2, t2.__useComponent);
    return l2 == null && (l2 = i2), l2;
  }
  const s2 = n;
  let o2 = s2.__getInstance(e2);
  if (o2 == null) {
    const l2 = Qe$1({}, t2);
    "__i18n" in r2 && (l2.__i18n = r2.__i18n), i2 && (l2.__root = i2), o2 = Ol(l2), s2.__composerExtend && (o2[ll] = s2.__composerExtend(o2)), Af(s2, e2, o2), s2.__setInstance(e2, o2);
  }
  return o2;
}
function hf(t2, e2) {
  const n = effectScope(), i2 = __VUE_I18N_LEGACY_API__ && e2 ? n.run(() => ul(t2)) : n.run(() => Ol(t2));
  if (i2 == null)
    throw rt$1(Pe$1.UNEXPECTED_ERROR);
  return [n, i2];
}
function Rf(t2) {
  const e2 = inject(t2.isCE ? bf : t2.appContext.app.__VUE_I18N_SYMBOL__);
  if (!e2)
    throw rt$1(t2.isCE ? Pe$1.NOT_INSTALLED_WITH_PROVIDE : Pe$1.UNEXPECTED_ERROR);
  return e2;
}
function Cf(t2, e2) {
  return Rr(t2) ? "__i18n" in e2 ? "local" : "global" : t2.useScope ? t2.useScope : "local";
}
function Nf(t2) {
  return t2.mode === "composition" ? t2.global : t2.global.__composer;
}
function vf(t2, e2, n = false) {
  let i2 = null;
  const r2 = e2.root;
  let a2 = Of(e2, n);
  for (; a2 != null; ) {
    const s2 = t2;
    if (t2.mode === "composition")
      i2 = s2.__getInstance(a2);
    else if (__VUE_I18N_LEGACY_API__) {
      const o2 = s2.__getInstance(a2);
      o2 != null && (i2 = o2.__composer, n && i2 && !i2[km] && (i2 = null));
    }
    if (i2 != null || r2 === a2)
      break;
    a2 = a2.parent;
  }
  return i2;
}
function Of(t2, e2 = false) {
  return t2 == null ? null : e2 && t2.vnode.ctx || t2.parent;
}
function Af(t2, e2, n) {
  onMounted(() => {
  }, e2), onUnmounted(() => {
    const r2 = n;
    t2.__deleteInstance(e2);
    const a2 = r2[ll];
    a2 && (a2(), delete r2[ll]);
  }, e2);
}
const yf = [
  "locale",
  "fallbackLocale",
  "availableLocales"
], kc = ["t", "rt", "d", "n", "tm", "te"];
function If(t2, e2) {
  const n = /* @__PURE__ */ Object.create(null);
  return yf.forEach((r2) => {
    const a2 = Object.getOwnPropertyDescriptor(e2, r2);
    if (!a2)
      throw rt$1(Pe$1.UNEXPECTED_ERROR);
    const s2 = isRef(a2.value) ? {
      get() {
        return a2.value.value;
      },
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      set(o2) {
        a2.value.value = o2;
      }
    } : {
      get() {
        return a2.get && a2.get();
      }
    };
    Object.defineProperty(n, r2, s2);
  }), t2.config.globalProperties.$i18n = n, kc.forEach((r2) => {
    const a2 = Object.getOwnPropertyDescriptor(e2, r2);
    if (!a2 || !a2.value)
      throw rt$1(Pe$1.UNEXPECTED_ERROR);
    Object.defineProperty(t2.config.globalProperties, `$${r2}`, a2);
  }), () => {
    delete t2.config.globalProperties.$i18n, kc.forEach((r2) => {
      delete t2.config.globalProperties[`$${r2}`];
    });
  };
}
const Df = /* @__PURE__ */ defineComponent({
  /* eslint-disable */
  name: "i18n-d",
  props: Qe$1({
    value: {
      type: [Number, Date],
      required: true
    },
    format: {
      type: [String, Object]
    }
  }, yl),
  /* eslint-enable */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  setup(t2, e2) {
    const n = t2.i18n || Il({
      useScope: t2.scope,
      __useComponent: true
    });
    return qm(t2, e2, Im, (...i2) => (
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      n[ol](...i2)
    ));
  }
}), Pc = Df;
zg();
Eg(WE);
gg(ug);
fg(Tm);
if (__INTLIFY_PROD_DEVTOOLS__) {
  const t2 = rn$1();
  t2.__INTLIFY__ = true, KE(t2.__INTLIFY_DEVTOOLS_GLOBAL_HOOK__);
}
const xf = {
  hubx: {
    bubble: {
      image: "图片",
      code: "代码",
      completion_completed: "已完成深度思考",
      completion_thinking: "深度思考中...",
      copy_text: "复制文本",
      copy_markdown: "复制markdown",
      download_image: "下载图片",
      zoom_out: "缩小",
      zoom_in: "放大",
      copy: "复制",
      copied: "已复制",
      download_success: "已下载",
      file_size_limit: "文件大小超过限制 {size}MB"
    }
  }
}, Lf = {
  hubx: {
    bubble: {
      image: "圖片",
      code: "程式碼",
      completion_completed: "已完成深度思考",
      completion_thinking: "深度思考中...",
      copy_text: "複製文字",
      copy_markdown: "複製markdown",
      download_image: "下載圖片",
      zoom_out: "縮小",
      zoom_in: "放大",
      copy: "複製",
      copied: "已複製",
      download_success: "已下載",
      file_size_limit: "文件大小超過限制 {size}MB"
    }
  }
}, Mf = {
  hubx: {
    bubble: {
      image: "image",
      code: "code",
      completion_completed: "deep think completed",
      completion_thinking: "deep thinking",
      copy_text: "copy text",
      copy_markdown: "copy markdown",
      download_image: "download image",
      zoom_out: "zoom out",
      zoom_in: "zoom in",
      copy: "copy",
      copied: "copied",
      download_success: "download success",
      file_size_limit: "file size limit {size}MB"
    }
  }
}, wf = {
  hubx: {
    bubble: {
      image: "画像",
      code: "コード",
      completion_completed: "深度思考が完了しました",
      completion_thinking: "深度思考中...",
      copy_text: "テキストをコピー",
      copy_markdown: "マークダウンをコピー",
      download_image: "画像をダウンロード",
      zoom_out: "縮小",
      zoom_in: "放大",
      copy: "コピー",
      copied: "コピーしました",
      download_success: "ダウンロードしました",
      file_size_limit: "ファイルサイズが制限を超えています {size}MB"
    }
  }
}, kf = {
  "zh-cn": {
    ...xf
  },
  "zh-tw": {
    ...Lf
  },
  en: {
    ...Mf
  },
  jp: {
    ...wf
  }
}, Dl = Tf({
  legacy: false,
  globalInjection: false,
  // 全局模式，可以直接使用 $t
  locale: "zh-cn",
  messages: kf
}), Vm = (t2) => t2 < 1024 ? t2 + "B" : t2 < 1024 * 1024 ? (t2 / 1024).toFixed(2) + "KB" : t2 < 1024 * 1024 * 1024 ? (t2 / 1024 / 1024).toFixed(2) + "MB" : (t2 / 1024 / 1024 / 1024).toFixed(2) + "GB", Pf = {
  key: 0,
  class: "x-sender__file-list"
}, Ff = {
  key: 0,
  class: "x-sender__file-loading"
}, Uf = {
  key: 1,
  class: "x-sender__file-icon"
}, Bf = { class: "x-sender__file-info" }, Gf = { class: "x-sender__file-name" }, Yf = { class: "x-sender__file-size" }, qf = ["onClick"], Vf = {
  key: 1,
  class: "x-sender__drag-overlay"
}, Hf = { class: "x-sender__main" }, zf = ["placeholder", "disabled", "maxlength"], $f = { class: "x-sender__action-bar" }, Wf = ["accept", "multiple"], Kf = {
  name: "xSender"
}, Qf = /* @__PURE__ */ Object.assign(Kf, {
  props: {
    placeholder: {
      type: String,
      default: ""
    },
    disabled: {
      type: Boolean,
      default: false
    },
    maxLength: {
      type: Number,
      default: 0
    },
    sendOnEnter: {
      type: Boolean,
      default: true
    },
    loading: {
      type: Boolean,
      default: false
    },
    // 上传相关参数
    enableUpload: {
      type: Boolean,
      default: false
    },
    acceptTypes: {
      type: String,
      default: "*/*"
    },
    allowMultiple: {
      type: Boolean,
      default: false
    },
    maxFileSize: {
      type: Number,
      default: 10 * 1024 * 1024
      // 默认10MB
    },
    // 上传请求相关参数
    httpRequest: {
      type: Function,
      default: () => {
      }
    },
    // 是否自动处理上传请求
    autoUpload: {
      type: Boolean,
      default: true
    },
    // 是否允许粘贴上传
    enablePasteUpload: {
      type: Boolean,
      default: false
    },
    // 是否允许拖拽上传
    enableDragUpload: {
      type: Boolean,
      default: false
    }
  },
  emits: [
    "send",
    "focus",
    "blur",
    "stop",
    "upload",
    "uploadError",
    "uploadProgress",
    "uploadSuccess",
    "uploadComplete"
  ],
  setup(t2, { expose: e2, emit: n }) {
    const i2 = t2, r2 = n, a2 = ref(null), s2 = ref(null), o2 = ref(false), l2 = ref(false), u2 = ref(false), _ = ref(""), d2 = ref([]), f2 = computed(() => {
      const D = d2.value.some((w) => w.loading === true);
      return i2.disabled || i2.loading || !_.value.trim() || D;
    }), b = (D) => {
      _.value = D.target.value;
    }, c2 = (D) => {
      o2.value = true, r2("focus", D);
    }, E2 = (D) => {
      o2.value = false, r2("blur", D);
    }, g2 = () => {
      r2("stop");
    }, S = () => {
      f2.value || (r2("send", _.value, [...d2.value.filter((D) => D.id)]), _.value = "", d2.value = []);
    }, p2 = (D) => {
      d2.value = d2.value.filter((w) => w.vid !== D.vid);
    }, m2 = () => {
      S();
    }, R2 = (D) => {
      i2.sendOnEnter && D.key === "Enter" && !D.shiftKey && (D.preventDefault(), S());
    }, T = computed(() => i2.maxLength > 0 ? i2.maxLength : void 0), h2 = () => {
      s2.value && s2.value.click();
    }, C2 = (D) => {
      const w = D.target.files;
      !w || w.length === 0 || v2(w);
    }, A2 = async (D) => {
      if (i2.httpRequest) {
        l2.value = true;
        try {
          const w = Array.from(D).map((q2) => I2(q2)), L = await Promise.all(w);
          r2("uploadComplete", L);
        } catch (w) {
          r2("uploadError", {
            type: "request",
            message: w.message || "上传失败",
            error: w
          });
        } finally {
          l2.value = false;
        }
      }
    }, I2 = (D) => {
      const w = {
        id: "",
        vid: Math.random().toString(36).substring(2, 15),
        name: D.name,
        size: D.size,
        mime_type: D.type,
        loading: true,
        url: "",
        raw: D
      };
      return d2.value.push(w), i2.httpRequest(D).then((L) => {
        const q2 = d2.value.find((z) => z.vid === w.vid);
        L.id && (q2.id = L.id, q2.url = L.url), q2.loading = false;
      });
    }, v2 = (D) => {
      if (!D || D.length === 0)
        return;
      const w = [];
      for (let L = 0; L < D.length; L++)
        D[L].size > i2.maxFileSize ? r2("uploadError", {
          type: "size",
          message: Dl.global.t("hubx.bubble.file_size_limit", { size: i2.maxFileSize / (1024 * 1024) }),
          file: D[L]
        }) : w.push(D[L]);
      w.length !== 0 && (r2("upload", w), i2.autoUpload && A2(w));
    }, x = (D) => {
      var q2;
      if (!i2.enablePasteUpload || i2.disabled)
        return;
      const w = (q2 = D.clipboardData) == null ? void 0 : q2.items;
      if (!w)
        return;
      const L = [];
      for (let z = 0; z < w.length; z++) {
        const re = w[z];
        if (re.kind === "file") {
          const j = re.getAsFile();
          j && L.push(j);
        }
      }
      L.length > 0 && (D.preventDefault(), v2(L));
    }, M = (D) => {
      !i2.enableDragUpload || i2.disabled || (u2.value = true, D.dataTransfer.dropEffect = "copy");
    }, B2 = () => {
      u2.value = false;
    }, G2 = (D) => {
      var L;
      if (!i2.enableDragUpload || i2.disabled)
        return;
      u2.value = false;
      const w = (L = D.dataTransfer) == null ? void 0 : L.files;
      w && w.length > 0 && v2(w);
    };
    return e2({
      uploadFiles: A2,
      handleUpload: h2,
      clearState() {
        _.value = "", d2.value = [];
      }
    }), (D, w) => (openBlock(), createElementBlock("div", {
      class: normalizeClass(["x-sender", [o2.value ? "x-sender--focused" : "", ""]]),
      onDragover: withModifiers(M, ["prevent"]),
      onDragleave: withModifiers(B2, ["prevent"]),
      onDrop: withModifiers(G2, ["prevent"])
    }, [
      d2.value.length > 0 ? (openBlock(), createElementBlock("div", Pf, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(d2.value, (L) => (openBlock(), createElementBlock("div", {
          key: L.id,
          class: "x-sender__file-item"
        }, [
          L.loading ? (openBlock(), createElementBlock("div", Ff, [
            createVNode(At, { name: "loading" })
          ])) : (openBlock(), createElementBlock("div", Uf, [
            createVNode(En, {
              name: L.name,
              "mime-type": L.mime_type
            }, null, 8, ["name", "mime-type"])
          ])),
          createBaseVNode("div", Bf, [
            createBaseVNode("div", Gf, toDisplayString$1(L.name), 1),
            createBaseVNode("div", Yf, toDisplayString$1(unref(Vm)(L.size)), 1)
          ]),
          createBaseVNode("div", {
            class: "x-sender__file-delete",
            onClick: (q2) => p2(L)
          }, [
            createVNode(At, { name: "delete" })
          ], 8, qf)
        ]))), 128))
      ])) : createCommentVNode("", true),
      u2.value && t2.enableDragUpload && !t2.disabled ? (openBlock(), createElementBlock("div", Vf, w[1] || (w[1] = [
        createBaseVNode("div", { class: "x-sender__drag-text" }, "拖放文件到此处上传", -1)
      ]))) : createCommentVNode("", true),
      createBaseVNode("div", Hf, [
        withDirectives(createBaseVNode("textarea", {
          ref_key: "textareaRef",
          ref: a2,
          class: "x-sender__textarea",
          "onUpdate:modelValue": w[0] || (w[0] = (L) => _.value = L),
          placeholder: t2.placeholder,
          disabled: t2.disabled,
          maxlength: T.value,
          onInput: b,
          onFocus: c2,
          onBlur: E2,
          onKeydown: R2,
          onPaste: x
        }, null, 40, zf), [
          [vModelText, _.value]
        ]),
        createBaseVNode("div", $f, [
          renderSlot(D.$slots, "actions", {}, () => [
            t2.enableUpload ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              createBaseVNode("div", {
                class: "x-sender__action-button x-sender__action-button--upload",
                onClick: h2
              }, [
                createVNode(At, { name: "attachment" }),
                createBaseVNode("input", {
                  type: "file",
                  ref_key: "fileInputRef",
                  ref: s2,
                  class: "x-sender__file-input",
                  accept: t2.acceptTypes,
                  multiple: t2.allowMultiple,
                  onChange: C2
                }, null, 40, Wf)
              ]),
              w[2] || (w[2] = createBaseVNode("div", { style: { width: "1px", height: "16px", "background-color": "#E6E8EB", "margin-right": "8px" } }, null, -1))
            ], 64)) : createCommentVNode("", true),
            t2.loading ? (openBlock(), createElementBlock("div", {
              key: 1,
              class: "x-sender__action-button x-sender__action-button--stop",
              onClick: g2
            }, [
              w[3] || (w[3] = createBaseVNode("div", { class: "x-sender__loading-border" }, null, -1)),
              createVNode(At, { name: "stop" })
            ])) : (openBlock(), createElementBlock("div", {
              key: 2,
              class: normalizeClass(["x-sender__action-button x-sender__action-button--send", { "x-sender__action-button--disabled": f2.value }]),
              onClick: m2
            }, [
              createVNode(At, { name: "top" })
            ], 2))
          ], true)
        ])
      ])
    ], 34));
  }
}), dr = /* @__PURE__ */ Rn(Qf, [["__scopeId", "data-v-9a123397"]]);
dr.install = (t2) => {
  t2.component(dr.name, dr);
};
const Xf = { class: "x-bubble" }, Zf = { class: "x-bubble__container" }, Jf = {
  key: 0,
  class: "x-bubble__file"
}, jf = {
  key: 0,
  class: "x-bubble__image"
}, eS = ["onClick", "src"], tS = ["onClick"], nS = { class: "x-bubble__file-icon" }, rS = { class: "x-bubble__file-info" }, aS = { class: "x-bubble__file-name" }, iS = { class: "x-bubble__file-size" }, oS = { class: "x-bubble__message" }, sS = { class: "x-bubble__menu x-bubble__menu--hidden" }, lS = ["src"], cS = {
  name: "xBubbleUser"
}, uS = /* @__PURE__ */ Object.assign(cS, {
  props: {
    content: {
      type: String,
      default: ""
    },
    files: {
      type: Array,
      default: () => []
    },
    avatar: {
      type: String,
      default: ""
    }
  },
  setup(t2) {
    const e2 = ref(false), n = ref(""), i2 = (s2) => {
      n.value = s2, e2.value = true;
    }, r2 = () => {
      e2.value = false;
    }, a2 = (s2) => {
      window.open(s2.url, "_blank");
    };
    return (s2, o2) => (openBlock(), createElementBlock("div", Xf, [
      createBaseVNode("div", Zf, [
        renderSlot(s2.$slots, "header", {}, void 0, true),
        renderSlot(s2.$slots, "file", {}, () => [
          t2.files.length > 0 ? (openBlock(), createElementBlock("div", Jf, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(t2.files, (l2) => (openBlock(), createElementBlock(Fragment, {
              key: l2.id
            }, [
              l2.mime_type.startsWith("image") ? (openBlock(), createElementBlock("div", jf, [
                createBaseVNode("img", {
                  class: "x-bubble__image-preview",
                  onClick: (u2) => i2(l2.url),
                  src: l2.url,
                  loading: "lazy",
                  alt: ""
                }, null, 8, eS)
              ])) : (openBlock(), createElementBlock("div", {
                key: 1,
                class: "x-bubble__file-item",
                onClick: (u2) => a2(l2)
              }, [
                createBaseVNode("div", nS, [
                  createVNode(En, {
                    name: l2.filename,
                    "mime-type": l2.mime_type
                  }, null, 8, ["name", "mime-type"])
                ]),
                createBaseVNode("div", rS, [
                  createBaseVNode("div", aS, toDisplayString$1(l2.filename), 1),
                  createBaseVNode("div", iS, toDisplayString$1(unref(Vm)(l2.size)), 1)
                ])
              ], 8, tS))
            ], 64))), 128))
          ])) : createCommentVNode("", true)
        ], true),
        renderSlot(s2.$slots, "content", {}, () => [
          createBaseVNode("div", oS, [
            createBaseVNode("p", null, toDisplayString$1(t2.content), 1)
          ])
        ], true),
        renderSlot(s2.$slots, "footer", {}, void 0, true),
        createBaseVNode("div", sS, [
          renderSlot(s2.$slots, "menu", {}, void 0, true)
        ])
      ]),
      e2.value ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: "x-image-viewer",
        onClick: r2
      }, [
        createBaseVNode("div", {
          class: "x-image-viewer__content",
          onClick: o2[0] || (o2[0] = withModifiers(() => {
          }, ["stop"]))
        }, [
          createBaseVNode("img", {
            src: n.value,
            loading: "lazy",
            alt: "",
            class: "x-image-viewer__img"
          }, null, 8, lS)
        ]),
        createBaseVNode("button", {
          class: "x-image-viewer__close",
          onClick: r2
        }, "×")
      ])) : createCommentVNode("", true)
    ]));
  }
}), Fc = /* @__PURE__ */ Rn(uS, [["__scopeId", "data-v-e0476b9e"]]), _S = {
  key: 0,
  class: "loading-indicator"
}, dS = {
  key: 1,
  class: "loading-indicator"
}, pS = {
  name: "xBubbleList"
}, mS = /* @__PURE__ */ Object.assign(pS, {
  props: {
    autoScroll: {
      type: Boolean,
      default: true
    },
    messages: {
      type: Array,
      default: () => []
    },
    enablePullUp: {
      type: Boolean,
      default: false
    },
    pullUpText: {
      type: String,
      default: ""
    },
    enablePullDown: {
      type: Boolean,
      default: false
    },
    pullDownText: {
      type: String,
      default: ""
    },
    mainClass: {
      type: String,
      default: ""
    },
    mainStyle: {
      type: String,
      default: ""
    }
  },
  emits: ["pull-up", "pull-down"],
  setup(t2, { expose: e2, emit: n }) {
    const i2 = t2, r2 = n, a2 = ref(null), s2 = ref(false), o2 = ref(null), l2 = ref(false), u2 = ref(false), _ = () => {
      if (!a2.value)
        return;
      const { scrollTop: b, scrollHeight: c2, clientHeight: E2 } = a2.value;
      b < 50 && !l2.value && i2.enablePullUp && (l2.value = true, r2("pull-up", () => {
        l2.value = false;
      })), c2 - b - E2 > 50 && (s2.value = true), c2 - b - E2 < 50 && (s2.value = false, !u2.value && i2.enablePullDown && (u2.value = true, r2("pull-down", () => {
        u2.value = false;
      })));
    }, d2 = async () => {
      await nextTick(), a2.value && (a2.value.scrollTop = a2.value.scrollHeight);
    }, f2 = () => {
      a2.value && (o2.value = new MutationObserver(() => {
        i2.autoScroll && !s2.value && d2();
      }), o2.value.observe(a2.value, {
        childList: true,
        subtree: true,
        characterData: true
      }));
    };
    return watch(
      () => i2.messages,
      () => {
        i2.autoScroll && !s2.value && d2();
      },
      { deep: true, immediate: true }
    ), onMounted(() => {
      var b;
      f2(), d2(), (b = a2.value) == null || b.addEventListener("scroll", _);
    }), onUnmounted(() => {
      var b, c2;
      (b = a2.value) == null || b.removeEventListener("scroll", _), (c2 = o2.value) == null || c2.disconnect();
    }), e2({
      scrollToBottom: d2
    }), (b, c2) => (openBlock(), createElementBlock("div", {
      ref_key: "wrapperRef",
      ref: a2,
      class: "bubble-wrapper",
      onScroll: _
    }, [
      l2.value ? (openBlock(), createElementBlock("div", _S, [
        createBaseVNode("span", null, toDisplayString$1(t2.pullUpText), 1)
      ])) : createCommentVNode("", true),
      createVNode(TransitionGroup, {
        name: "message",
        tag: "div",
        class: normalizeClass([t2.mainClass]),
        style: normalizeStyle(t2.mainStyle)
      }, {
        default: withCtx(() => [
          (openBlock(true), createElementBlock(Fragment, null, renderList(t2.messages, (E2, g2) => renderSlot(b.$slots, "item", {
            key: E2.id,
            message: E2,
            index: g2
          }, void 0, true)), 128))
        ]),
        _: 3
      }, 8, ["class", "style"]),
      u2.value ? (openBlock(), createElementBlock("div", dS, [
        createBaseVNode("span", null, toDisplayString$1(t2.pullDownText), 1)
      ])) : createCommentVNode("", true)
    ], 544));
  }
}), Uc = /* @__PURE__ */ Rn(mS, [["__scopeId", "data-v-11f1dfb8"]]), Bc = {};
function ES(t2) {
  let e2 = Bc[t2];
  if (e2)
    return e2;
  e2 = Bc[t2] = [];
  for (let n = 0; n < 128; n++) {
    const i2 = String.fromCharCode(n);
    e2.push(i2);
  }
  for (let n = 0; n < t2.length; n++) {
    const i2 = t2.charCodeAt(n);
    e2[i2] = "%" + ("0" + i2.toString(16).toUpperCase()).slice(-2);
  }
  return e2;
}
function Tn(t2, e2) {
  typeof e2 != "string" && (e2 = Tn.defaultChars);
  const n = ES(e2);
  return t2.replace(/(%[a-f0-9]{2})+/gi, function(i2) {
    let r2 = "";
    for (let a2 = 0, s2 = i2.length; a2 < s2; a2 += 3) {
      const o2 = parseInt(i2.slice(a2 + 1, a2 + 3), 16);
      if (o2 < 128) {
        r2 += n[o2];
        continue;
      }
      if ((o2 & 224) === 192 && a2 + 3 < s2) {
        const l2 = parseInt(i2.slice(a2 + 4, a2 + 6), 16);
        if ((l2 & 192) === 128) {
          const u2 = o2 << 6 & 1984 | l2 & 63;
          u2 < 128 ? r2 += "��" : r2 += String.fromCharCode(u2), a2 += 3;
          continue;
        }
      }
      if ((o2 & 240) === 224 && a2 + 6 < s2) {
        const l2 = parseInt(i2.slice(a2 + 4, a2 + 6), 16), u2 = parseInt(i2.slice(a2 + 7, a2 + 9), 16);
        if ((l2 & 192) === 128 && (u2 & 192) === 128) {
          const _ = o2 << 12 & 61440 | l2 << 6 & 4032 | u2 & 63;
          _ < 2048 || _ >= 55296 && _ <= 57343 ? r2 += "���" : r2 += String.fromCharCode(_), a2 += 6;
          continue;
        }
      }
      if ((o2 & 248) === 240 && a2 + 9 < s2) {
        const l2 = parseInt(i2.slice(a2 + 4, a2 + 6), 16), u2 = parseInt(i2.slice(a2 + 7, a2 + 9), 16), _ = parseInt(i2.slice(a2 + 10, a2 + 12), 16);
        if ((l2 & 192) === 128 && (u2 & 192) === 128 && (_ & 192) === 128) {
          let d2 = o2 << 18 & 1835008 | l2 << 12 & 258048 | u2 << 6 & 4032 | _ & 63;
          d2 < 65536 || d2 > 1114111 ? r2 += "����" : (d2 -= 65536, r2 += String.fromCharCode(55296 + (d2 >> 10), 56320 + (d2 & 1023))), a2 += 9;
          continue;
        }
      }
      r2 += "�";
    }
    return r2;
  });
}
Tn.defaultChars = ";/?:@&=+$,#";
Tn.componentChars = "";
const Gc = {};
function gS(t2) {
  let e2 = Gc[t2];
  if (e2)
    return e2;
  e2 = Gc[t2] = [];
  for (let n = 0; n < 128; n++) {
    const i2 = String.fromCharCode(n);
    /^[0-9a-z]$/i.test(i2) ? e2.push(i2) : e2.push("%" + ("0" + n.toString(16).toUpperCase()).slice(-2));
  }
  for (let n = 0; n < t2.length; n++)
    e2[t2.charCodeAt(n)] = t2[n];
  return e2;
}
function Wn(t2, e2, n) {
  typeof e2 != "string" && (n = e2, e2 = Wn.defaultChars), typeof n > "u" && (n = true);
  const i2 = gS(e2);
  let r2 = "";
  for (let a2 = 0, s2 = t2.length; a2 < s2; a2++) {
    const o2 = t2.charCodeAt(a2);
    if (n && o2 === 37 && a2 + 2 < s2 && /^[0-9a-f]{2}$/i.test(t2.slice(a2 + 1, a2 + 3))) {
      r2 += t2.slice(a2, a2 + 3), a2 += 2;
      continue;
    }
    if (o2 < 128) {
      r2 += i2[o2];
      continue;
    }
    if (o2 >= 55296 && o2 <= 57343) {
      if (o2 >= 55296 && o2 <= 56319 && a2 + 1 < s2) {
        const l2 = t2.charCodeAt(a2 + 1);
        if (l2 >= 56320 && l2 <= 57343) {
          r2 += encodeURIComponent(t2[a2] + t2[a2 + 1]), a2++;
          continue;
        }
      }
      r2 += "%EF%BF%BD";
      continue;
    }
    r2 += encodeURIComponent(t2[a2]);
  }
  return r2;
}
Wn.defaultChars = ";/?:@&=+$,-_.!~*'()#";
Wn.componentChars = "-_.!~*'()";
function xl(t2) {
  let e2 = "";
  return e2 += t2.protocol || "", e2 += t2.slashes ? "//" : "", e2 += t2.auth ? t2.auth + "@" : "", t2.hostname && t2.hostname.indexOf(":") !== -1 ? e2 += "[" + t2.hostname + "]" : e2 += t2.hostname || "", e2 += t2.port ? ":" + t2.port : "", e2 += t2.pathname || "", e2 += t2.search || "", e2 += t2.hash || "", e2;
}
function Er() {
  this.protocol = null, this.slashes = null, this.auth = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.pathname = null;
}
const fS = /^([a-z0-9.+-]+:)/i, SS = /:[0-9]*$/, bS = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, TS = ["<", ">", '"', "`", " ", "\r", `
`, "	"], hS = ["{", "}", "|", "\\", "^", "`"].concat(TS), RS = ["'"].concat(hS), Yc = ["%", "/", "?", ";", "#"].concat(RS), qc = ["/", "?", "#"], CS = 255, Vc = /^[+a-z0-9A-Z_-]{0,63}$/, NS = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, Hc = {
  javascript: true,
  "javascript:": true
}, zc = {
  http: true,
  https: true,
  ftp: true,
  gopher: true,
  file: true,
  "http:": true,
  "https:": true,
  "ftp:": true,
  "gopher:": true,
  "file:": true
};
function Ll(t2, e2) {
  if (t2 && t2 instanceof Er)
    return t2;
  const n = new Er();
  return n.parse(t2, e2), n;
}
Er.prototype.parse = function(t2, e2) {
  let n, i2, r2, a2 = t2;
  if (a2 = a2.trim(), !e2 && t2.split("#").length === 1) {
    const u2 = bS.exec(a2);
    if (u2)
      return this.pathname = u2[1], u2[2] && (this.search = u2[2]), this;
  }
  let s2 = fS.exec(a2);
  if (s2 && (s2 = s2[0], n = s2.toLowerCase(), this.protocol = s2, a2 = a2.substr(s2.length)), (e2 || s2 || a2.match(/^\/\/[^@\/]+@[^@\/]+/)) && (r2 = a2.substr(0, 2) === "//", r2 && !(s2 && Hc[s2]) && (a2 = a2.substr(2), this.slashes = true)), !Hc[s2] && (r2 || s2 && !zc[s2])) {
    let u2 = -1;
    for (let c2 = 0; c2 < qc.length; c2++)
      i2 = a2.indexOf(qc[c2]), i2 !== -1 && (u2 === -1 || i2 < u2) && (u2 = i2);
    let _, d2;
    u2 === -1 ? d2 = a2.lastIndexOf("@") : d2 = a2.lastIndexOf("@", u2), d2 !== -1 && (_ = a2.slice(0, d2), a2 = a2.slice(d2 + 1), this.auth = _), u2 = -1;
    for (let c2 = 0; c2 < Yc.length; c2++)
      i2 = a2.indexOf(Yc[c2]), i2 !== -1 && (u2 === -1 || i2 < u2) && (u2 = i2);
    u2 === -1 && (u2 = a2.length), a2[u2 - 1] === ":" && u2--;
    const f2 = a2.slice(0, u2);
    a2 = a2.slice(u2), this.parseHost(f2), this.hostname = this.hostname || "";
    const b = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
    if (!b) {
      const c2 = this.hostname.split(/\./);
      for (let E2 = 0, g2 = c2.length; E2 < g2; E2++) {
        const S = c2[E2];
        if (S && !S.match(Vc)) {
          let p2 = "";
          for (let m2 = 0, R2 = S.length; m2 < R2; m2++)
            S.charCodeAt(m2) > 127 ? p2 += "x" : p2 += S[m2];
          if (!p2.match(Vc)) {
            const m2 = c2.slice(0, E2), R2 = c2.slice(E2 + 1), T = S.match(NS);
            T && (m2.push(T[1]), R2.unshift(T[2])), R2.length && (a2 = R2.join(".") + a2), this.hostname = m2.join(".");
            break;
          }
        }
      }
    }
    this.hostname.length > CS && (this.hostname = ""), b && (this.hostname = this.hostname.substr(1, this.hostname.length - 2));
  }
  const o2 = a2.indexOf("#");
  o2 !== -1 && (this.hash = a2.substr(o2), a2 = a2.slice(0, o2));
  const l2 = a2.indexOf("?");
  return l2 !== -1 && (this.search = a2.substr(l2), a2 = a2.slice(0, l2)), a2 && (this.pathname = a2), zc[n] && this.hostname && !this.pathname && (this.pathname = ""), this;
};
Er.prototype.parseHost = function(t2) {
  let e2 = SS.exec(t2);
  e2 && (e2 = e2[0], e2 !== ":" && (this.port = e2.substr(1)), t2 = t2.substr(0, t2.length - e2.length)), t2 && (this.hostname = t2);
};
const vS = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  decode: Tn,
  encode: Wn,
  format: xl,
  parse: Ll
}, Symbol.toStringTag, { value: "Module" })), Hm = /[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, zm = /[\0-\x1F\x7F-\x9F]/, OS = /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u0890\u0891\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD80D[\uDC30-\uDC3F]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/, Ml = /[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2\uDF00-\uDF09]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDF43-\uDF4F\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/, $m = /[\$\+<->\^`\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u0888\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20C0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFF\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u31EF\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC2\uFD40-\uFD4F\uFDCF\uFDFC-\uFDFF\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD]|\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEDC-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF76\uDF7B-\uDFD9\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE7C\uDE80-\uDE88\uDE90-\uDEBD\uDEBF-\uDEC5\uDECE-\uDEDB\uDEE0-\uDEE8\uDEF0-\uDEF8\uDF00-\uDF92\uDF94-\uDFCA]/, Wm = /[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/, AS = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Any: Hm,
  Cc: zm,
  Cf: OS,
  P: Ml,
  S: $m,
  Z: Wm
}, Symbol.toStringTag, { value: "Module" })), yS = new Uint16Array(
  // prettier-ignore
  'ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map((t2) => t2.charCodeAt(0))
), IS = new Uint16Array(
  // prettier-ignore
  "Ȁaglq	\x1Bɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map((t2) => t2.charCodeAt(0))
);
var Vr;
const DS = /* @__PURE__ */ new Map([
  [0, 65533],
  // C1 Unicode control character reference replacements
  [128, 8364],
  [130, 8218],
  [131, 402],
  [132, 8222],
  [133, 8230],
  [134, 8224],
  [135, 8225],
  [136, 710],
  [137, 8240],
  [138, 352],
  [139, 8249],
  [140, 338],
  [142, 381],
  [145, 8216],
  [146, 8217],
  [147, 8220],
  [148, 8221],
  [149, 8226],
  [150, 8211],
  [151, 8212],
  [152, 732],
  [153, 8482],
  [154, 353],
  [155, 8250],
  [156, 339],
  [158, 382],
  [159, 376]
]), xS = (
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
  (Vr = String.fromCodePoint) !== null && Vr !== void 0 ? Vr : function(t2) {
    let e2 = "";
    return t2 > 65535 && (t2 -= 65536, e2 += String.fromCharCode(t2 >>> 10 & 1023 | 55296), t2 = 56320 | t2 & 1023), e2 += String.fromCharCode(t2), e2;
  }
);
function LS(t2) {
  var e2;
  return t2 >= 55296 && t2 <= 57343 || t2 > 1114111 ? 65533 : (e2 = DS.get(t2)) !== null && e2 !== void 0 ? e2 : t2;
}
var Ze$1;
(function(t2) {
  t2[t2.NUM = 35] = "NUM", t2[t2.SEMI = 59] = "SEMI", t2[t2.EQUALS = 61] = "EQUALS", t2[t2.ZERO = 48] = "ZERO", t2[t2.NINE = 57] = "NINE", t2[t2.LOWER_A = 97] = "LOWER_A", t2[t2.LOWER_F = 102] = "LOWER_F", t2[t2.LOWER_X = 120] = "LOWER_X", t2[t2.LOWER_Z = 122] = "LOWER_Z", t2[t2.UPPER_A = 65] = "UPPER_A", t2[t2.UPPER_F = 70] = "UPPER_F", t2[t2.UPPER_Z = 90] = "UPPER_Z";
})(Ze$1 || (Ze$1 = {}));
const MS = 32;
var Qt$1;
(function(t2) {
  t2[t2.VALUE_LENGTH = 49152] = "VALUE_LENGTH", t2[t2.BRANCH_LENGTH = 16256] = "BRANCH_LENGTH", t2[t2.JUMP_TABLE = 127] = "JUMP_TABLE";
})(Qt$1 || (Qt$1 = {}));
function _l(t2) {
  return t2 >= Ze$1.ZERO && t2 <= Ze$1.NINE;
}
function wS(t2) {
  return t2 >= Ze$1.UPPER_A && t2 <= Ze$1.UPPER_F || t2 >= Ze$1.LOWER_A && t2 <= Ze$1.LOWER_F;
}
function kS(t2) {
  return t2 >= Ze$1.UPPER_A && t2 <= Ze$1.UPPER_Z || t2 >= Ze$1.LOWER_A && t2 <= Ze$1.LOWER_Z || _l(t2);
}
function PS(t2) {
  return t2 === Ze$1.EQUALS || kS(t2);
}
var Xe$1;
(function(t2) {
  t2[t2.EntityStart = 0] = "EntityStart", t2[t2.NumericStart = 1] = "NumericStart", t2[t2.NumericDecimal = 2] = "NumericDecimal", t2[t2.NumericHex = 3] = "NumericHex", t2[t2.NamedEntity = 4] = "NamedEntity";
})(Xe$1 || (Xe$1 = {}));
var Kt$1;
(function(t2) {
  t2[t2.Legacy = 0] = "Legacy", t2[t2.Strict = 1] = "Strict", t2[t2.Attribute = 2] = "Attribute";
})(Kt$1 || (Kt$1 = {}));
class FS {
  constructor(e2, n, i2) {
    this.decodeTree = e2, this.emitCodePoint = n, this.errors = i2, this.state = Xe$1.EntityStart, this.consumed = 1, this.result = 0, this.treeIndex = 0, this.excess = 1, this.decodeMode = Kt$1.Strict;
  }
  /** Resets the instance to make it reusable. */
  startEntity(e2) {
    this.decodeMode = e2, this.state = Xe$1.EntityStart, this.result = 0, this.treeIndex = 0, this.excess = 1, this.consumed = 1;
  }
  /**
   * Write an entity to the decoder. This can be called multiple times with partial entities.
   * If the entity is incomplete, the decoder will return -1.
   *
   * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the
   * entity is incomplete, and resume when the next string is written.
   *
   * @param string The string containing the entity (or a continuation of the entity).
   * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  write(e2, n) {
    switch (this.state) {
      case Xe$1.EntityStart:
        return e2.charCodeAt(n) === Ze$1.NUM ? (this.state = Xe$1.NumericStart, this.consumed += 1, this.stateNumericStart(e2, n + 1)) : (this.state = Xe$1.NamedEntity, this.stateNamedEntity(e2, n));
      case Xe$1.NumericStart:
        return this.stateNumericStart(e2, n);
      case Xe$1.NumericDecimal:
        return this.stateNumericDecimal(e2, n);
      case Xe$1.NumericHex:
        return this.stateNumericHex(e2, n);
      case Xe$1.NamedEntity:
        return this.stateNamedEntity(e2, n);
    }
  }
  /**
   * Switches between the numeric decimal and hexadecimal states.
   *
   * Equivalent to the `Numeric character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericStart(e2, n) {
    return n >= e2.length ? -1 : (e2.charCodeAt(n) | MS) === Ze$1.LOWER_X ? (this.state = Xe$1.NumericHex, this.consumed += 1, this.stateNumericHex(e2, n + 1)) : (this.state = Xe$1.NumericDecimal, this.stateNumericDecimal(e2, n));
  }
  addToNumericResult(e2, n, i2, r2) {
    if (n !== i2) {
      const a2 = i2 - n;
      this.result = this.result * Math.pow(r2, a2) + parseInt(e2.substr(n, a2), r2), this.consumed += a2;
    }
  }
  /**
   * Parses a hexadecimal numeric entity.
   *
   * Equivalent to the `Hexademical character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericHex(e2, n) {
    const i2 = n;
    for (; n < e2.length; ) {
      const r2 = e2.charCodeAt(n);
      if (_l(r2) || wS(r2))
        n += 1;
      else
        return this.addToNumericResult(e2, i2, n, 16), this.emitNumericEntity(r2, 3);
    }
    return this.addToNumericResult(e2, i2, n, 16), -1;
  }
  /**
   * Parses a decimal numeric entity.
   *
   * Equivalent to the `Decimal character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericDecimal(e2, n) {
    const i2 = n;
    for (; n < e2.length; ) {
      const r2 = e2.charCodeAt(n);
      if (_l(r2))
        n += 1;
      else
        return this.addToNumericResult(e2, i2, n, 10), this.emitNumericEntity(r2, 2);
    }
    return this.addToNumericResult(e2, i2, n, 10), -1;
  }
  /**
   * Validate and emit a numeric entity.
   *
   * Implements the logic from the `Hexademical character reference start
   * state` and `Numeric character reference end state` in the HTML spec.
   *
   * @param lastCp The last code point of the entity. Used to see if the
   *               entity was terminated with a semicolon.
   * @param expectedLength The minimum number of characters that should be
   *                       consumed. Used to validate that at least one digit
   *                       was consumed.
   * @returns The number of characters that were consumed.
   */
  emitNumericEntity(e2, n) {
    var i2;
    if (this.consumed <= n)
      return (i2 = this.errors) === null || i2 === void 0 || i2.absenceOfDigitsInNumericCharacterReference(this.consumed), 0;
    if (e2 === Ze$1.SEMI)
      this.consumed += 1;
    else if (this.decodeMode === Kt$1.Strict)
      return 0;
    return this.emitCodePoint(LS(this.result), this.consumed), this.errors && (e2 !== Ze$1.SEMI && this.errors.missingSemicolonAfterCharacterReference(), this.errors.validateNumericCharacterReference(this.result)), this.consumed;
  }
  /**
   * Parses a named entity.
   *
   * Equivalent to the `Named character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNamedEntity(e2, n) {
    const { decodeTree: i2 } = this;
    let r2 = i2[this.treeIndex], a2 = (r2 & Qt$1.VALUE_LENGTH) >> 14;
    for (; n < e2.length; n++, this.excess++) {
      const s2 = e2.charCodeAt(n);
      if (this.treeIndex = US(i2, r2, this.treeIndex + Math.max(1, a2), s2), this.treeIndex < 0)
        return this.result === 0 || // If we are parsing an attribute
        this.decodeMode === Kt$1.Attribute && // We shouldn't have consumed any characters after the entity,
        (a2 === 0 || // And there should be no invalid characters.
        PS(s2)) ? 0 : this.emitNotTerminatedNamedEntity();
      if (r2 = i2[this.treeIndex], a2 = (r2 & Qt$1.VALUE_LENGTH) >> 14, a2 !== 0) {
        if (s2 === Ze$1.SEMI)
          return this.emitNamedEntityData(this.treeIndex, a2, this.consumed + this.excess);
        this.decodeMode !== Kt$1.Strict && (this.result = this.treeIndex, this.consumed += this.excess, this.excess = 0);
      }
    }
    return -1;
  }
  /**
   * Emit a named entity that was not terminated with a semicolon.
   *
   * @returns The number of characters consumed.
   */
  emitNotTerminatedNamedEntity() {
    var e2;
    const { result: n, decodeTree: i2 } = this, r2 = (i2[n] & Qt$1.VALUE_LENGTH) >> 14;
    return this.emitNamedEntityData(n, r2, this.consumed), (e2 = this.errors) === null || e2 === void 0 || e2.missingSemicolonAfterCharacterReference(), this.consumed;
  }
  /**
   * Emit a named entity.
   *
   * @param result The index of the entity in the decode tree.
   * @param valueLength The number of bytes in the entity.
   * @param consumed The number of characters consumed.
   *
   * @returns The number of characters consumed.
   */
  emitNamedEntityData(e2, n, i2) {
    const { decodeTree: r2 } = this;
    return this.emitCodePoint(n === 1 ? r2[e2] & ~Qt$1.VALUE_LENGTH : r2[e2 + 1], i2), n === 3 && this.emitCodePoint(r2[e2 + 2], i2), i2;
  }
  /**
   * Signal to the parser that the end of the input was reached.
   *
   * Remaining data will be emitted and relevant errors will be produced.
   *
   * @returns The number of characters consumed.
   */
  end() {
    var e2;
    switch (this.state) {
      case Xe$1.NamedEntity:
        return this.result !== 0 && (this.decodeMode !== Kt$1.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
      case Xe$1.NumericDecimal:
        return this.emitNumericEntity(0, 2);
      case Xe$1.NumericHex:
        return this.emitNumericEntity(0, 3);
      case Xe$1.NumericStart:
        return (e2 = this.errors) === null || e2 === void 0 || e2.absenceOfDigitsInNumericCharacterReference(this.consumed), 0;
      case Xe$1.EntityStart:
        return 0;
    }
  }
}
function Km(t2) {
  let e2 = "";
  const n = new FS(t2, (i2) => e2 += xS(i2));
  return function(r2, a2) {
    let s2 = 0, o2 = 0;
    for (; (o2 = r2.indexOf("&", o2)) >= 0; ) {
      e2 += r2.slice(s2, o2), n.startEntity(a2);
      const u2 = n.write(
        r2,
        // Skip the "&"
        o2 + 1
      );
      if (u2 < 0) {
        s2 = o2 + n.end();
        break;
      }
      s2 = o2 + u2, o2 = u2 === 0 ? s2 + 1 : s2;
    }
    const l2 = e2 + r2.slice(s2);
    return e2 = "", l2;
  };
}
function US(t2, e2, n, i2) {
  const r2 = (e2 & Qt$1.BRANCH_LENGTH) >> 7, a2 = e2 & Qt$1.JUMP_TABLE;
  if (r2 === 0)
    return a2 !== 0 && i2 === a2 ? n : -1;
  if (a2) {
    const l2 = i2 - a2;
    return l2 < 0 || l2 >= r2 ? -1 : t2[n + l2] - 1;
  }
  let s2 = n, o2 = s2 + r2 - 1;
  for (; s2 <= o2; ) {
    const l2 = s2 + o2 >>> 1, u2 = t2[l2];
    if (u2 < i2)
      s2 = l2 + 1;
    else if (u2 > i2)
      o2 = l2 - 1;
    else
      return t2[l2 + r2];
  }
  return -1;
}
const BS = Km(yS);
Km(IS);
function Qm(t2, e2 = Kt$1.Legacy) {
  return BS(t2, e2);
}
function GS(t2) {
  return Object.prototype.toString.call(t2);
}
function wl(t2) {
  return GS(t2) === "[object String]";
}
const YS = Object.prototype.hasOwnProperty;
function qS(t2, e2) {
  return YS.call(t2, e2);
}
function vr(t2) {
  return Array.prototype.slice.call(arguments, 1).forEach(function(n) {
    if (n) {
      if (typeof n != "object")
        throw new TypeError(n + "must be object");
      Object.keys(n).forEach(function(i2) {
        t2[i2] = n[i2];
      });
    }
  }), t2;
}
function Xm(t2, e2, n) {
  return [].concat(t2.slice(0, e2), n, t2.slice(e2 + 1));
}
function kl(t2) {
  return !(t2 >= 55296 && t2 <= 57343 || t2 >= 64976 && t2 <= 65007 || (t2 & 65535) === 65535 || (t2 & 65535) === 65534 || t2 >= 0 && t2 <= 8 || t2 === 11 || t2 >= 14 && t2 <= 31 || t2 >= 127 && t2 <= 159 || t2 > 1114111);
}
function gr(t2) {
  if (t2 > 65535) {
    t2 -= 65536;
    const e2 = 55296 + (t2 >> 10), n = 56320 + (t2 & 1023);
    return String.fromCharCode(e2, n);
  }
  return String.fromCharCode(t2);
}
const Zm = /\\([!"#$%&'()*+,\-./:;<=>?@[\\\]^_`{|}~])/g, VS = /&([a-z#][a-z0-9]{1,31});/gi, HS = new RegExp(Zm.source + "|" + VS.source, "gi"), zS = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i;
function $S(t2, e2) {
  if (e2.charCodeAt(0) === 35 && zS.test(e2)) {
    const i2 = e2[1].toLowerCase() === "x" ? parseInt(e2.slice(2), 16) : parseInt(e2.slice(1), 10);
    return kl(i2) ? gr(i2) : t2;
  }
  const n = Qm(t2);
  return n !== t2 ? n : t2;
}
function WS(t2) {
  return t2.indexOf("\\") < 0 ? t2 : t2.replace(Zm, "$1");
}
function hn(t2) {
  return t2.indexOf("\\") < 0 && t2.indexOf("&") < 0 ? t2 : t2.replace(HS, function(e2, n, i2) {
    return n || $S(e2, i2);
  });
}
const KS = /[&<>"]/, QS = /[&<>"]/g, XS = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;"
};
function ZS(t2) {
  return XS[t2];
}
function Xt$1(t2) {
  return KS.test(t2) ? t2.replace(QS, ZS) : t2;
}
const JS = /[.?*+^$[\]\\(){}|-]/g;
function jS(t2) {
  return t2.replace(JS, "\\$&");
}
function Fe(t2) {
  switch (t2) {
    case 9:
    case 32:
      return true;
  }
  return false;
}
function qn(t2) {
  if (t2 >= 8192 && t2 <= 8202)
    return true;
  switch (t2) {
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 32:
    case 160:
    case 5760:
    case 8239:
    case 8287:
    case 12288:
      return true;
  }
  return false;
}
function Vn(t2) {
  return Ml.test(t2) || $m.test(t2);
}
function Hn(t2) {
  switch (t2) {
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 123:
    case 124:
    case 125:
    case 126:
      return true;
    default:
      return false;
  }
}
function Or(t2) {
  return t2 = t2.trim().replace(/\s+/g, " "), "ẞ".toLowerCase() === "Ṿ" && (t2 = t2.replace(/ẞ/g, "ß")), t2.toLowerCase().toUpperCase();
}
const eb = { mdurl: vS, ucmicro: AS }, tb = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  arrayReplaceAt: Xm,
  assign: vr,
  escapeHtml: Xt$1,
  escapeRE: jS,
  fromCodePoint: gr,
  has: qS,
  isMdAsciiPunct: Hn,
  isPunctChar: Vn,
  isSpace: Fe,
  isString: wl,
  isValidEntityCode: kl,
  isWhiteSpace: qn,
  lib: eb,
  normalizeReference: Or,
  unescapeAll: hn,
  unescapeMd: WS
}, Symbol.toStringTag, { value: "Module" }));
function nb(t2, e2, n) {
  let i2, r2, a2, s2;
  const o2 = t2.posMax, l2 = t2.pos;
  for (t2.pos = e2 + 1, i2 = 1; t2.pos < o2; ) {
    if (a2 = t2.src.charCodeAt(t2.pos), a2 === 93 && (i2--, i2 === 0)) {
      r2 = true;
      break;
    }
    if (s2 = t2.pos, t2.md.inline.skipToken(t2), a2 === 91) {
      if (s2 === t2.pos - 1)
        i2++;
      else if (n)
        return t2.pos = l2, -1;
    }
  }
  let u2 = -1;
  return r2 && (u2 = t2.pos), t2.pos = l2, u2;
}
function rb(t2, e2, n) {
  let i2, r2 = e2;
  const a2 = {
    ok: false,
    pos: 0,
    str: ""
  };
  if (t2.charCodeAt(r2) === 60) {
    for (r2++; r2 < n; ) {
      if (i2 = t2.charCodeAt(r2), i2 === 10 || i2 === 60)
        return a2;
      if (i2 === 62)
        return a2.pos = r2 + 1, a2.str = hn(t2.slice(e2 + 1, r2)), a2.ok = true, a2;
      if (i2 === 92 && r2 + 1 < n) {
        r2 += 2;
        continue;
      }
      r2++;
    }
    return a2;
  }
  let s2 = 0;
  for (; r2 < n && (i2 = t2.charCodeAt(r2), !(i2 === 32 || i2 < 32 || i2 === 127)); ) {
    if (i2 === 92 && r2 + 1 < n) {
      if (t2.charCodeAt(r2 + 1) === 32)
        break;
      r2 += 2;
      continue;
    }
    if (i2 === 40 && (s2++, s2 > 32))
      return a2;
    if (i2 === 41) {
      if (s2 === 0)
        break;
      s2--;
    }
    r2++;
  }
  return e2 === r2 || s2 !== 0 || (a2.str = hn(t2.slice(e2, r2)), a2.pos = r2, a2.ok = true), a2;
}
function ab(t2, e2, n, i2) {
  let r2, a2 = e2;
  const s2 = {
    // if `true`, this is a valid link title
    ok: false,
    // if `true`, this link can be continued on the next line
    can_continue: false,
    // if `ok`, it's the position of the first character after the closing marker
    pos: 0,
    // if `ok`, it's the unescaped title
    str: "",
    // expected closing marker character code
    marker: 0
  };
  if (i2)
    s2.str = i2.str, s2.marker = i2.marker;
  else {
    if (a2 >= n)
      return s2;
    let o2 = t2.charCodeAt(a2);
    if (o2 !== 34 && o2 !== 39 && o2 !== 40)
      return s2;
    e2++, a2++, o2 === 40 && (o2 = 41), s2.marker = o2;
  }
  for (; a2 < n; ) {
    if (r2 = t2.charCodeAt(a2), r2 === s2.marker)
      return s2.pos = a2 + 1, s2.str += hn(t2.slice(e2, a2)), s2.ok = true, s2;
    if (r2 === 40 && s2.marker === 41)
      return s2;
    r2 === 92 && a2 + 1 < n && a2++, a2++;
  }
  return s2.can_continue = true, s2.str += hn(t2.slice(e2, a2)), s2;
}
const ib = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  parseLinkDestination: rb,
  parseLinkLabel: nb,
  parseLinkTitle: ab
}, Symbol.toStringTag, { value: "Module" })), Mt$1 = {};
Mt$1.code_inline = function(t2, e2, n, i2, r2) {
  const a2 = t2[e2];
  return "<code" + r2.renderAttrs(a2) + ">" + Xt$1(a2.content) + "</code>";
};
Mt$1.code_block = function(t2, e2, n, i2, r2) {
  const a2 = t2[e2];
  return "<pre" + r2.renderAttrs(a2) + "><code>" + Xt$1(t2[e2].content) + `</code></pre>
`;
};
Mt$1.fence = function(t2, e2, n, i2, r2) {
  const a2 = t2[e2], s2 = a2.info ? hn(a2.info).trim() : "";
  let o2 = "", l2 = "";
  if (s2) {
    const _ = s2.split(/(\s+)/g);
    o2 = _[0], l2 = _.slice(2).join("");
  }
  let u2;
  if (n.highlight ? u2 = n.highlight(a2.content, o2, l2) || Xt$1(a2.content) : u2 = Xt$1(a2.content), u2.indexOf("<pre") === 0)
    return u2 + `
`;
  if (s2) {
    const _ = a2.attrIndex("class"), d2 = a2.attrs ? a2.attrs.slice() : [];
    _ < 0 ? d2.push(["class", n.langPrefix + o2]) : (d2[_] = d2[_].slice(), d2[_][1] += " " + n.langPrefix + o2);
    const f2 = {
      attrs: d2
    };
    return `<pre><code${r2.renderAttrs(f2)}>${u2}</code></pre>
`;
  }
  return `<pre><code${r2.renderAttrs(a2)}>${u2}</code></pre>
`;
};
Mt$1.image = function(t2, e2, n, i2, r2) {
  const a2 = t2[e2];
  return a2.attrs[a2.attrIndex("alt")][1] = r2.renderInlineAsText(a2.children, n, i2), r2.renderToken(t2, e2, n);
};
Mt$1.hardbreak = function(t2, e2, n) {
  return n.xhtmlOut ? `<br />
` : `<br>
`;
};
Mt$1.softbreak = function(t2, e2, n) {
  return n.breaks ? n.xhtmlOut ? `<br />
` : `<br>
` : `
`;
};
Mt$1.text = function(t2, e2) {
  return Xt$1(t2[e2].content);
};
Mt$1.html_block = function(t2, e2) {
  return t2[e2].content;
};
Mt$1.html_inline = function(t2, e2) {
  return t2[e2].content;
};
function Nn() {
  this.rules = vr({}, Mt$1);
}
Nn.prototype.renderAttrs = function(e2) {
  let n, i2, r2;
  if (!e2.attrs)
    return "";
  for (r2 = "", n = 0, i2 = e2.attrs.length; n < i2; n++)
    r2 += " " + Xt$1(e2.attrs[n][0]) + '="' + Xt$1(e2.attrs[n][1]) + '"';
  return r2;
};
Nn.prototype.renderToken = function(e2, n, i2) {
  const r2 = e2[n];
  let a2 = "";
  if (r2.hidden)
    return "";
  r2.block && r2.nesting !== -1 && n && e2[n - 1].hidden && (a2 += `
`), a2 += (r2.nesting === -1 ? "</" : "<") + r2.tag, a2 += this.renderAttrs(r2), r2.nesting === 0 && i2.xhtmlOut && (a2 += " /");
  let s2 = false;
  if (r2.block && (s2 = true, r2.nesting === 1 && n + 1 < e2.length)) {
    const o2 = e2[n + 1];
    (o2.type === "inline" || o2.hidden || o2.nesting === -1 && o2.tag === r2.tag) && (s2 = false);
  }
  return a2 += s2 ? `>
` : ">", a2;
};
Nn.prototype.renderInline = function(t2, e2, n) {
  let i2 = "";
  const r2 = this.rules;
  for (let a2 = 0, s2 = t2.length; a2 < s2; a2++) {
    const o2 = t2[a2].type;
    typeof r2[o2] < "u" ? i2 += r2[o2](t2, a2, e2, n, this) : i2 += this.renderToken(t2, a2, e2);
  }
  return i2;
};
Nn.prototype.renderInlineAsText = function(t2, e2, n) {
  let i2 = "";
  for (let r2 = 0, a2 = t2.length; r2 < a2; r2++)
    switch (t2[r2].type) {
      case "text":
        i2 += t2[r2].content;
        break;
      case "image":
        i2 += this.renderInlineAsText(t2[r2].children, e2, n);
        break;
      case "html_inline":
      case "html_block":
        i2 += t2[r2].content;
        break;
      case "softbreak":
      case "hardbreak":
        i2 += `
`;
        break;
    }
  return i2;
};
Nn.prototype.render = function(t2, e2, n) {
  let i2 = "";
  const r2 = this.rules;
  for (let a2 = 0, s2 = t2.length; a2 < s2; a2++) {
    const o2 = t2[a2].type;
    o2 === "inline" ? i2 += this.renderInline(t2[a2].children, e2, n) : typeof r2[o2] < "u" ? i2 += r2[o2](t2, a2, e2, n, this) : i2 += this.renderToken(t2, a2, e2, n);
  }
  return i2;
};
function at$1() {
  this.__rules__ = [], this.__cache__ = null;
}
at$1.prototype.__find__ = function(t2) {
  for (let e2 = 0; e2 < this.__rules__.length; e2++)
    if (this.__rules__[e2].name === t2)
      return e2;
  return -1;
};
at$1.prototype.__compile__ = function() {
  const t2 = this, e2 = [""];
  t2.__rules__.forEach(function(n) {
    n.enabled && n.alt.forEach(function(i2) {
      e2.indexOf(i2) < 0 && e2.push(i2);
    });
  }), t2.__cache__ = {}, e2.forEach(function(n) {
    t2.__cache__[n] = [], t2.__rules__.forEach(function(i2) {
      i2.enabled && (n && i2.alt.indexOf(n) < 0 || t2.__cache__[n].push(i2.fn));
    });
  });
};
at$1.prototype.at = function(t2, e2, n) {
  const i2 = this.__find__(t2), r2 = n || {};
  if (i2 === -1)
    throw new Error("Parser rule not found: " + t2);
  this.__rules__[i2].fn = e2, this.__rules__[i2].alt = r2.alt || [], this.__cache__ = null;
};
at$1.prototype.before = function(t2, e2, n, i2) {
  const r2 = this.__find__(t2), a2 = i2 || {};
  if (r2 === -1)
    throw new Error("Parser rule not found: " + t2);
  this.__rules__.splice(r2, 0, {
    name: e2,
    enabled: true,
    fn: n,
    alt: a2.alt || []
  }), this.__cache__ = null;
};
at$1.prototype.after = function(t2, e2, n, i2) {
  const r2 = this.__find__(t2), a2 = i2 || {};
  if (r2 === -1)
    throw new Error("Parser rule not found: " + t2);
  this.__rules__.splice(r2 + 1, 0, {
    name: e2,
    enabled: true,
    fn: n,
    alt: a2.alt || []
  }), this.__cache__ = null;
};
at$1.prototype.push = function(t2, e2, n) {
  const i2 = n || {};
  this.__rules__.push({
    name: t2,
    enabled: true,
    fn: e2,
    alt: i2.alt || []
  }), this.__cache__ = null;
};
at$1.prototype.enable = function(t2, e2) {
  Array.isArray(t2) || (t2 = [t2]);
  const n = [];
  return t2.forEach(function(i2) {
    const r2 = this.__find__(i2);
    if (r2 < 0) {
      if (e2)
        return;
      throw new Error("Rules manager: invalid rule name " + i2);
    }
    this.__rules__[r2].enabled = true, n.push(i2);
  }, this), this.__cache__ = null, n;
};
at$1.prototype.enableOnly = function(t2, e2) {
  Array.isArray(t2) || (t2 = [t2]), this.__rules__.forEach(function(n) {
    n.enabled = false;
  }), this.enable(t2, e2);
};
at$1.prototype.disable = function(t2, e2) {
  Array.isArray(t2) || (t2 = [t2]);
  const n = [];
  return t2.forEach(function(i2) {
    const r2 = this.__find__(i2);
    if (r2 < 0) {
      if (e2)
        return;
      throw new Error("Rules manager: invalid rule name " + i2);
    }
    this.__rules__[r2].enabled = false, n.push(i2);
  }, this), this.__cache__ = null, n;
};
at$1.prototype.getRules = function(t2) {
  return this.__cache__ === null && this.__compile__(), this.__cache__[t2] || [];
};
function Rt$1(t2, e2, n) {
  this.type = t2, this.tag = e2, this.attrs = null, this.map = null, this.nesting = n, this.level = 0, this.children = null, this.content = "", this.markup = "", this.info = "", this.meta = null, this.block = false, this.hidden = false;
}
Rt$1.prototype.attrIndex = function(e2) {
  if (!this.attrs)
    return -1;
  const n = this.attrs;
  for (let i2 = 0, r2 = n.length; i2 < r2; i2++)
    if (n[i2][0] === e2)
      return i2;
  return -1;
};
Rt$1.prototype.attrPush = function(e2) {
  this.attrs ? this.attrs.push(e2) : this.attrs = [e2];
};
Rt$1.prototype.attrSet = function(e2, n) {
  const i2 = this.attrIndex(e2), r2 = [e2, n];
  i2 < 0 ? this.attrPush(r2) : this.attrs[i2] = r2;
};
Rt$1.prototype.attrGet = function(e2) {
  const n = this.attrIndex(e2);
  let i2 = null;
  return n >= 0 && (i2 = this.attrs[n][1]), i2;
};
Rt$1.prototype.attrJoin = function(e2, n) {
  const i2 = this.attrIndex(e2);
  i2 < 0 ? this.attrPush([e2, n]) : this.attrs[i2][1] = this.attrs[i2][1] + " " + n;
};
function Jm(t2, e2, n) {
  this.src = t2, this.env = n, this.tokens = [], this.inlineMode = false, this.md = e2;
}
Jm.prototype.Token = Rt$1;
const ob = /\r\n?|\n/g, sb = /\0/g;
function lb(t2) {
  let e2;
  e2 = t2.src.replace(ob, `
`), e2 = e2.replace(sb, "�"), t2.src = e2;
}
function cb(t2) {
  let e2;
  t2.inlineMode ? (e2 = new t2.Token("inline", "", 0), e2.content = t2.src, e2.map = [0, 1], e2.children = [], t2.tokens.push(e2)) : t2.md.block.parse(t2.src, t2.md, t2.env, t2.tokens);
}
function ub(t2) {
  const e2 = t2.tokens;
  for (let n = 0, i2 = e2.length; n < i2; n++) {
    const r2 = e2[n];
    r2.type === "inline" && t2.md.inline.parse(r2.content, t2.md, t2.env, r2.children);
  }
}
function _b(t2) {
  return /^<a[>\s]/i.test(t2);
}
function db(t2) {
  return /^<\/a\s*>/i.test(t2);
}
function pb(t2) {
  const e2 = t2.tokens;
  if (t2.md.options.linkify)
    for (let n = 0, i2 = e2.length; n < i2; n++) {
      if (e2[n].type !== "inline" || !t2.md.linkify.pretest(e2[n].content))
        continue;
      let r2 = e2[n].children, a2 = 0;
      for (let s2 = r2.length - 1; s2 >= 0; s2--) {
        const o2 = r2[s2];
        if (o2.type === "link_close") {
          for (s2--; r2[s2].level !== o2.level && r2[s2].type !== "link_open"; )
            s2--;
          continue;
        }
        if (o2.type === "html_inline" && (_b(o2.content) && a2 > 0 && a2--, db(o2.content) && a2++), !(a2 > 0) && o2.type === "text" && t2.md.linkify.test(o2.content)) {
          const l2 = o2.content;
          let u2 = t2.md.linkify.match(l2);
          const _ = [];
          let d2 = o2.level, f2 = 0;
          u2.length > 0 && u2[0].index === 0 && s2 > 0 && r2[s2 - 1].type === "text_special" && (u2 = u2.slice(1));
          for (let b = 0; b < u2.length; b++) {
            const c2 = u2[b].url, E2 = t2.md.normalizeLink(c2);
            if (!t2.md.validateLink(E2))
              continue;
            let g2 = u2[b].text;
            u2[b].schema ? u2[b].schema === "mailto:" && !/^mailto:/i.test(g2) ? g2 = t2.md.normalizeLinkText("mailto:" + g2).replace(/^mailto:/, "") : g2 = t2.md.normalizeLinkText(g2) : g2 = t2.md.normalizeLinkText("http://" + g2).replace(/^http:\/\//, "");
            const S = u2[b].index;
            if (S > f2) {
              const T = new t2.Token("text", "", 0);
              T.content = l2.slice(f2, S), T.level = d2, _.push(T);
            }
            const p2 = new t2.Token("link_open", "a", 1);
            p2.attrs = [["href", E2]], p2.level = d2++, p2.markup = "linkify", p2.info = "auto", _.push(p2);
            const m2 = new t2.Token("text", "", 0);
            m2.content = g2, m2.level = d2, _.push(m2);
            const R2 = new t2.Token("link_close", "a", -1);
            R2.level = --d2, R2.markup = "linkify", R2.info = "auto", _.push(R2), f2 = u2[b].lastIndex;
          }
          if (f2 < l2.length) {
            const b = new t2.Token("text", "", 0);
            b.content = l2.slice(f2), b.level = d2, _.push(b);
          }
          e2[n].children = r2 = Xm(r2, s2, _);
        }
      }
    }
}
const jm = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/, mb = /\((c|tm|r)\)/i, Eb = /\((c|tm|r)\)/ig, gb = {
  c: "©",
  r: "®",
  tm: "™"
};
function fb(t2, e2) {
  return gb[e2.toLowerCase()];
}
function Sb(t2) {
  let e2 = 0;
  for (let n = t2.length - 1; n >= 0; n--) {
    const i2 = t2[n];
    i2.type === "text" && !e2 && (i2.content = i2.content.replace(Eb, fb)), i2.type === "link_open" && i2.info === "auto" && e2--, i2.type === "link_close" && i2.info === "auto" && e2++;
  }
}
function bb(t2) {
  let e2 = 0;
  for (let n = t2.length - 1; n >= 0; n--) {
    const i2 = t2[n];
    i2.type === "text" && !e2 && jm.test(i2.content) && (i2.content = i2.content.replace(/\+-/g, "±").replace(/\.{2,}/g, "…").replace(/([?!])…/g, "$1..").replace(/([?!]){4,}/g, "$1$1$1").replace(/,{2,}/g, ",").replace(/(^|[^-])---(?=[^-]|$)/mg, "$1—").replace(/(^|\s)--(?=\s|$)/mg, "$1–").replace(/(^|[^-\s])--(?=[^-\s]|$)/mg, "$1–")), i2.type === "link_open" && i2.info === "auto" && e2--, i2.type === "link_close" && i2.info === "auto" && e2++;
  }
}
function Tb(t2) {
  let e2;
  if (t2.md.options.typographer)
    for (e2 = t2.tokens.length - 1; e2 >= 0; e2--)
      t2.tokens[e2].type === "inline" && (mb.test(t2.tokens[e2].content) && Sb(t2.tokens[e2].children), jm.test(t2.tokens[e2].content) && bb(t2.tokens[e2].children));
}
const hb = /['"]/, $c = /['"]/g, Wc = "’";
function lr(t2, e2, n) {
  return t2.slice(0, e2) + n + t2.slice(e2 + 1);
}
function Rb(t2, e2) {
  let n;
  const i2 = [];
  for (let r2 = 0; r2 < t2.length; r2++) {
    const a2 = t2[r2], s2 = t2[r2].level;
    for (n = i2.length - 1; n >= 0 && !(i2[n].level <= s2); n--)
      ;
    if (i2.length = n + 1, a2.type !== "text")
      continue;
    let o2 = a2.content, l2 = 0, u2 = o2.length;
    e:
      for (; l2 < u2; ) {
        $c.lastIndex = l2;
        const _ = $c.exec(o2);
        if (!_)
          break;
        let d2 = true, f2 = true;
        l2 = _.index + 1;
        const b = _[0] === "'";
        let c2 = 32;
        if (_.index - 1 >= 0)
          c2 = o2.charCodeAt(_.index - 1);
        else
          for (n = r2 - 1; n >= 0 && !(t2[n].type === "softbreak" || t2[n].type === "hardbreak"); n--)
            if (t2[n].content) {
              c2 = t2[n].content.charCodeAt(t2[n].content.length - 1);
              break;
            }
        let E2 = 32;
        if (l2 < u2)
          E2 = o2.charCodeAt(l2);
        else
          for (n = r2 + 1; n < t2.length && !(t2[n].type === "softbreak" || t2[n].type === "hardbreak"); n++)
            if (t2[n].content) {
              E2 = t2[n].content.charCodeAt(0);
              break;
            }
        const g2 = Hn(c2) || Vn(String.fromCharCode(c2)), S = Hn(E2) || Vn(String.fromCharCode(E2)), p2 = qn(c2), m2 = qn(E2);
        if (m2 ? d2 = false : S && (p2 || g2 || (d2 = false)), p2 ? f2 = false : g2 && (m2 || S || (f2 = false)), E2 === 34 && _[0] === '"' && c2 >= 48 && c2 <= 57 && (f2 = d2 = false), d2 && f2 && (d2 = g2, f2 = S), !d2 && !f2) {
          b && (a2.content = lr(a2.content, _.index, Wc));
          continue;
        }
        if (f2)
          for (n = i2.length - 1; n >= 0; n--) {
            let R2 = i2[n];
            if (i2[n].level < s2)
              break;
            if (R2.single === b && i2[n].level === s2) {
              R2 = i2[n];
              let T, h2;
              b ? (T = e2.md.options.quotes[2], h2 = e2.md.options.quotes[3]) : (T = e2.md.options.quotes[0], h2 = e2.md.options.quotes[1]), a2.content = lr(a2.content, _.index, h2), t2[R2.token].content = lr(
                t2[R2.token].content,
                R2.pos,
                T
              ), l2 += h2.length - 1, R2.token === r2 && (l2 += T.length - 1), o2 = a2.content, u2 = o2.length, i2.length = n;
              continue e;
            }
          }
        d2 ? i2.push({
          token: r2,
          pos: _.index,
          single: b,
          level: s2
        }) : f2 && b && (a2.content = lr(a2.content, _.index, Wc));
      }
  }
}
function Cb(t2) {
  if (t2.md.options.typographer)
    for (let e2 = t2.tokens.length - 1; e2 >= 0; e2--)
      t2.tokens[e2].type !== "inline" || !hb.test(t2.tokens[e2].content) || Rb(t2.tokens[e2].children, t2);
}
function Nb(t2) {
  let e2, n;
  const i2 = t2.tokens, r2 = i2.length;
  for (let a2 = 0; a2 < r2; a2++) {
    if (i2[a2].type !== "inline")
      continue;
    const s2 = i2[a2].children, o2 = s2.length;
    for (e2 = 0; e2 < o2; e2++)
      s2[e2].type === "text_special" && (s2[e2].type = "text");
    for (e2 = n = 0; e2 < o2; e2++)
      s2[e2].type === "text" && e2 + 1 < o2 && s2[e2 + 1].type === "text" ? s2[e2 + 1].content = s2[e2].content + s2[e2 + 1].content : (e2 !== n && (s2[n] = s2[e2]), n++);
    e2 !== n && (s2.length = n);
  }
}
const Hr = [
  ["normalize", lb],
  ["block", cb],
  ["inline", ub],
  ["linkify", pb],
  ["replacements", Tb],
  ["smartquotes", Cb],
  // `text_join` finds `text_special` tokens (for escape sequences)
  // and joins them with the rest of the text
  ["text_join", Nb]
];
function Pl() {
  this.ruler = new at$1();
  for (let t2 = 0; t2 < Hr.length; t2++)
    this.ruler.push(Hr[t2][0], Hr[t2][1]);
}
Pl.prototype.process = function(t2) {
  const e2 = this.ruler.getRules("");
  for (let n = 0, i2 = e2.length; n < i2; n++)
    e2[n](t2);
};
Pl.prototype.State = Jm;
function wt$1(t2, e2, n, i2) {
  this.src = t2, this.md = e2, this.env = n, this.tokens = i2, this.bMarks = [], this.eMarks = [], this.tShift = [], this.sCount = [], this.bsCount = [], this.blkIndent = 0, this.line = 0, this.lineMax = 0, this.tight = false, this.ddIndent = -1, this.listIndent = -1, this.parentType = "root", this.level = 0;
  const r2 = this.src;
  for (let a2 = 0, s2 = 0, o2 = 0, l2 = 0, u2 = r2.length, _ = false; s2 < u2; s2++) {
    const d2 = r2.charCodeAt(s2);
    if (!_)
      if (Fe(d2)) {
        o2++, d2 === 9 ? l2 += 4 - l2 % 4 : l2++;
        continue;
      } else
        _ = true;
    (d2 === 10 || s2 === u2 - 1) && (d2 !== 10 && s2++, this.bMarks.push(a2), this.eMarks.push(s2), this.tShift.push(o2), this.sCount.push(l2), this.bsCount.push(0), _ = false, o2 = 0, l2 = 0, a2 = s2 + 1);
  }
  this.bMarks.push(r2.length), this.eMarks.push(r2.length), this.tShift.push(0), this.sCount.push(0), this.bsCount.push(0), this.lineMax = this.bMarks.length - 1;
}
wt$1.prototype.push = function(t2, e2, n) {
  const i2 = new Rt$1(t2, e2, n);
  return i2.block = true, n < 0 && this.level--, i2.level = this.level, n > 0 && this.level++, this.tokens.push(i2), i2;
};
wt$1.prototype.isEmpty = function(e2) {
  return this.bMarks[e2] + this.tShift[e2] >= this.eMarks[e2];
};
wt$1.prototype.skipEmptyLines = function(e2) {
  for (let n = this.lineMax; e2 < n && !(this.bMarks[e2] + this.tShift[e2] < this.eMarks[e2]); e2++)
    ;
  return e2;
};
wt$1.prototype.skipSpaces = function(e2) {
  for (let n = this.src.length; e2 < n; e2++) {
    const i2 = this.src.charCodeAt(e2);
    if (!Fe(i2))
      break;
  }
  return e2;
};
wt$1.prototype.skipSpacesBack = function(e2, n) {
  if (e2 <= n)
    return e2;
  for (; e2 > n; )
    if (!Fe(this.src.charCodeAt(--e2)))
      return e2 + 1;
  return e2;
};
wt$1.prototype.skipChars = function(e2, n) {
  for (let i2 = this.src.length; e2 < i2 && this.src.charCodeAt(e2) === n; e2++)
    ;
  return e2;
};
wt$1.prototype.skipCharsBack = function(e2, n, i2) {
  if (e2 <= i2)
    return e2;
  for (; e2 > i2; )
    if (n !== this.src.charCodeAt(--e2))
      return e2 + 1;
  return e2;
};
wt$1.prototype.getLines = function(e2, n, i2, r2) {
  if (e2 >= n)
    return "";
  const a2 = new Array(n - e2);
  for (let s2 = 0, o2 = e2; o2 < n; o2++, s2++) {
    let l2 = 0;
    const u2 = this.bMarks[o2];
    let _ = u2, d2;
    for (o2 + 1 < n || r2 ? d2 = this.eMarks[o2] + 1 : d2 = this.eMarks[o2]; _ < d2 && l2 < i2; ) {
      const f2 = this.src.charCodeAt(_);
      if (Fe(f2))
        f2 === 9 ? l2 += 4 - (l2 + this.bsCount[o2]) % 4 : l2++;
      else if (_ - u2 < this.tShift[o2])
        l2++;
      else
        break;
      _++;
    }
    l2 > i2 ? a2[s2] = new Array(l2 - i2 + 1).join(" ") + this.src.slice(_, d2) : a2[s2] = this.src.slice(_, d2);
  }
  return a2.join("");
};
wt$1.prototype.Token = Rt$1;
const vb = 65536;
function zr(t2, e2) {
  const n = t2.bMarks[e2] + t2.tShift[e2], i2 = t2.eMarks[e2];
  return t2.src.slice(n, i2);
}
function Kc(t2) {
  const e2 = [], n = t2.length;
  let i2 = 0, r2 = t2.charCodeAt(i2), a2 = false, s2 = 0, o2 = "";
  for (; i2 < n; )
    r2 === 124 && (a2 ? (o2 += t2.substring(s2, i2 - 1), s2 = i2) : (e2.push(o2 + t2.substring(s2, i2)), o2 = "", s2 = i2 + 1)), a2 = r2 === 92, i2++, r2 = t2.charCodeAt(i2);
  return e2.push(o2 + t2.substring(s2)), e2;
}
function Ob(t2, e2, n, i2) {
  if (e2 + 2 > n)
    return false;
  let r2 = e2 + 1;
  if (t2.sCount[r2] < t2.blkIndent || t2.sCount[r2] - t2.blkIndent >= 4)
    return false;
  let a2 = t2.bMarks[r2] + t2.tShift[r2];
  if (a2 >= t2.eMarks[r2])
    return false;
  const s2 = t2.src.charCodeAt(a2++);
  if (s2 !== 124 && s2 !== 45 && s2 !== 58 || a2 >= t2.eMarks[r2])
    return false;
  const o2 = t2.src.charCodeAt(a2++);
  if (o2 !== 124 && o2 !== 45 && o2 !== 58 && !Fe(o2) || s2 === 45 && Fe(o2))
    return false;
  for (; a2 < t2.eMarks[r2]; ) {
    const R2 = t2.src.charCodeAt(a2);
    if (R2 !== 124 && R2 !== 45 && R2 !== 58 && !Fe(R2))
      return false;
    a2++;
  }
  let l2 = zr(t2, e2 + 1), u2 = l2.split("|");
  const _ = [];
  for (let R2 = 0; R2 < u2.length; R2++) {
    const T = u2[R2].trim();
    if (!T) {
      if (R2 === 0 || R2 === u2.length - 1)
        continue;
      return false;
    }
    if (!/^:?-+:?$/.test(T))
      return false;
    T.charCodeAt(T.length - 1) === 58 ? _.push(T.charCodeAt(0) === 58 ? "center" : "right") : T.charCodeAt(0) === 58 ? _.push("left") : _.push("");
  }
  if (l2 = zr(t2, e2).trim(), l2.indexOf("|") === -1 || t2.sCount[e2] - t2.blkIndent >= 4)
    return false;
  u2 = Kc(l2), u2.length && u2[0] === "" && u2.shift(), u2.length && u2[u2.length - 1] === "" && u2.pop();
  const d2 = u2.length;
  if (d2 === 0 || d2 !== _.length)
    return false;
  if (i2)
    return true;
  const f2 = t2.parentType;
  t2.parentType = "table";
  const b = t2.md.block.ruler.getRules("blockquote"), c2 = t2.push("table_open", "table", 1), E2 = [e2, 0];
  c2.map = E2;
  const g2 = t2.push("thead_open", "thead", 1);
  g2.map = [e2, e2 + 1];
  const S = t2.push("tr_open", "tr", 1);
  S.map = [e2, e2 + 1];
  for (let R2 = 0; R2 < u2.length; R2++) {
    const T = t2.push("th_open", "th", 1);
    _[R2] && (T.attrs = [["style", "text-align:" + _[R2]]]);
    const h2 = t2.push("inline", "", 0);
    h2.content = u2[R2].trim(), h2.children = [], t2.push("th_close", "th", -1);
  }
  t2.push("tr_close", "tr", -1), t2.push("thead_close", "thead", -1);
  let p2, m2 = 0;
  for (r2 = e2 + 2; r2 < n && !(t2.sCount[r2] < t2.blkIndent); r2++) {
    let R2 = false;
    for (let h2 = 0, C2 = b.length; h2 < C2; h2++)
      if (b[h2](t2, r2, n, true)) {
        R2 = true;
        break;
      }
    if (R2 || (l2 = zr(t2, r2).trim(), !l2) || t2.sCount[r2] - t2.blkIndent >= 4 || (u2 = Kc(l2), u2.length && u2[0] === "" && u2.shift(), u2.length && u2[u2.length - 1] === "" && u2.pop(), m2 += d2 - u2.length, m2 > vb))
      break;
    if (r2 === e2 + 2) {
      const h2 = t2.push("tbody_open", "tbody", 1);
      h2.map = p2 = [e2 + 2, 0];
    }
    const T = t2.push("tr_open", "tr", 1);
    T.map = [r2, r2 + 1];
    for (let h2 = 0; h2 < d2; h2++) {
      const C2 = t2.push("td_open", "td", 1);
      _[h2] && (C2.attrs = [["style", "text-align:" + _[h2]]]);
      const A2 = t2.push("inline", "", 0);
      A2.content = u2[h2] ? u2[h2].trim() : "", A2.children = [], t2.push("td_close", "td", -1);
    }
    t2.push("tr_close", "tr", -1);
  }
  return p2 && (t2.push("tbody_close", "tbody", -1), p2[1] = r2), t2.push("table_close", "table", -1), E2[1] = r2, t2.parentType = f2, t2.line = r2, true;
}
function Ab(t2, e2, n) {
  if (t2.sCount[e2] - t2.blkIndent < 4)
    return false;
  let i2 = e2 + 1, r2 = i2;
  for (; i2 < n; ) {
    if (t2.isEmpty(i2)) {
      i2++;
      continue;
    }
    if (t2.sCount[i2] - t2.blkIndent >= 4) {
      i2++, r2 = i2;
      continue;
    }
    break;
  }
  t2.line = r2;
  const a2 = t2.push("code_block", "code", 0);
  return a2.content = t2.getLines(e2, r2, 4 + t2.blkIndent, false) + `
`, a2.map = [e2, t2.line], true;
}
function yb(t2, e2, n, i2) {
  let r2 = t2.bMarks[e2] + t2.tShift[e2], a2 = t2.eMarks[e2];
  if (t2.sCount[e2] - t2.blkIndent >= 4 || r2 + 3 > a2)
    return false;
  const s2 = t2.src.charCodeAt(r2);
  if (s2 !== 126 && s2 !== 96)
    return false;
  let o2 = r2;
  r2 = t2.skipChars(r2, s2);
  let l2 = r2 - o2;
  if (l2 < 3)
    return false;
  const u2 = t2.src.slice(o2, r2), _ = t2.src.slice(r2, a2);
  if (s2 === 96 && _.indexOf(String.fromCharCode(s2)) >= 0)
    return false;
  if (i2)
    return true;
  let d2 = e2, f2 = false;
  for (; d2++, !(d2 >= n || (r2 = o2 = t2.bMarks[d2] + t2.tShift[d2], a2 = t2.eMarks[d2], r2 < a2 && t2.sCount[d2] < t2.blkIndent)); )
    if (t2.src.charCodeAt(r2) === s2 && !(t2.sCount[d2] - t2.blkIndent >= 4) && (r2 = t2.skipChars(r2, s2), !(r2 - o2 < l2) && (r2 = t2.skipSpaces(r2), !(r2 < a2)))) {
      f2 = true;
      break;
    }
  l2 = t2.sCount[e2], t2.line = d2 + (f2 ? 1 : 0);
  const b = t2.push("fence", "code", 0);
  return b.info = _, b.content = t2.getLines(e2 + 1, d2, l2, true), b.markup = u2, b.map = [e2, t2.line], true;
}
function Ib(t2, e2, n, i2) {
  let r2 = t2.bMarks[e2] + t2.tShift[e2], a2 = t2.eMarks[e2];
  const s2 = t2.lineMax;
  if (t2.sCount[e2] - t2.blkIndent >= 4 || t2.src.charCodeAt(r2) !== 62)
    return false;
  if (i2)
    return true;
  const o2 = [], l2 = [], u2 = [], _ = [], d2 = t2.md.block.ruler.getRules("blockquote"), f2 = t2.parentType;
  t2.parentType = "blockquote";
  let b = false, c2;
  for (c2 = e2; c2 < n; c2++) {
    const m2 = t2.sCount[c2] < t2.blkIndent;
    if (r2 = t2.bMarks[c2] + t2.tShift[c2], a2 = t2.eMarks[c2], r2 >= a2)
      break;
    if (t2.src.charCodeAt(r2++) === 62 && !m2) {
      let T = t2.sCount[c2] + 1, h2, C2;
      t2.src.charCodeAt(r2) === 32 ? (r2++, T++, C2 = false, h2 = true) : t2.src.charCodeAt(r2) === 9 ? (h2 = true, (t2.bsCount[c2] + T) % 4 === 3 ? (r2++, T++, C2 = false) : C2 = true) : h2 = false;
      let A2 = T;
      for (o2.push(t2.bMarks[c2]), t2.bMarks[c2] = r2; r2 < a2; ) {
        const I2 = t2.src.charCodeAt(r2);
        if (Fe(I2))
          I2 === 9 ? A2 += 4 - (A2 + t2.bsCount[c2] + (C2 ? 1 : 0)) % 4 : A2++;
        else
          break;
        r2++;
      }
      b = r2 >= a2, l2.push(t2.bsCount[c2]), t2.bsCount[c2] = t2.sCount[c2] + 1 + (h2 ? 1 : 0), u2.push(t2.sCount[c2]), t2.sCount[c2] = A2 - T, _.push(t2.tShift[c2]), t2.tShift[c2] = r2 - t2.bMarks[c2];
      continue;
    }
    if (b)
      break;
    let R2 = false;
    for (let T = 0, h2 = d2.length; T < h2; T++)
      if (d2[T](t2, c2, n, true)) {
        R2 = true;
        break;
      }
    if (R2) {
      t2.lineMax = c2, t2.blkIndent !== 0 && (o2.push(t2.bMarks[c2]), l2.push(t2.bsCount[c2]), _.push(t2.tShift[c2]), u2.push(t2.sCount[c2]), t2.sCount[c2] -= t2.blkIndent);
      break;
    }
    o2.push(t2.bMarks[c2]), l2.push(t2.bsCount[c2]), _.push(t2.tShift[c2]), u2.push(t2.sCount[c2]), t2.sCount[c2] = -1;
  }
  const E2 = t2.blkIndent;
  t2.blkIndent = 0;
  const g2 = t2.push("blockquote_open", "blockquote", 1);
  g2.markup = ">";
  const S = [e2, 0];
  g2.map = S, t2.md.block.tokenize(t2, e2, c2);
  const p2 = t2.push("blockquote_close", "blockquote", -1);
  p2.markup = ">", t2.lineMax = s2, t2.parentType = f2, S[1] = t2.line;
  for (let m2 = 0; m2 < _.length; m2++)
    t2.bMarks[m2 + e2] = o2[m2], t2.tShift[m2 + e2] = _[m2], t2.sCount[m2 + e2] = u2[m2], t2.bsCount[m2 + e2] = l2[m2];
  return t2.blkIndent = E2, true;
}
function Db(t2, e2, n, i2) {
  const r2 = t2.eMarks[e2];
  if (t2.sCount[e2] - t2.blkIndent >= 4)
    return false;
  let a2 = t2.bMarks[e2] + t2.tShift[e2];
  const s2 = t2.src.charCodeAt(a2++);
  if (s2 !== 42 && s2 !== 45 && s2 !== 95)
    return false;
  let o2 = 1;
  for (; a2 < r2; ) {
    const u2 = t2.src.charCodeAt(a2++);
    if (u2 !== s2 && !Fe(u2))
      return false;
    u2 === s2 && o2++;
  }
  if (o2 < 3)
    return false;
  if (i2)
    return true;
  t2.line = e2 + 1;
  const l2 = t2.push("hr", "hr", 0);
  return l2.map = [e2, t2.line], l2.markup = Array(o2 + 1).join(String.fromCharCode(s2)), true;
}
function Qc(t2, e2) {
  const n = t2.eMarks[e2];
  let i2 = t2.bMarks[e2] + t2.tShift[e2];
  const r2 = t2.src.charCodeAt(i2++);
  if (r2 !== 42 && r2 !== 45 && r2 !== 43)
    return -1;
  if (i2 < n) {
    const a2 = t2.src.charCodeAt(i2);
    if (!Fe(a2))
      return -1;
  }
  return i2;
}
function Xc(t2, e2) {
  const n = t2.bMarks[e2] + t2.tShift[e2], i2 = t2.eMarks[e2];
  let r2 = n;
  if (r2 + 1 >= i2)
    return -1;
  let a2 = t2.src.charCodeAt(r2++);
  if (a2 < 48 || a2 > 57)
    return -1;
  for (; ; ) {
    if (r2 >= i2)
      return -1;
    if (a2 = t2.src.charCodeAt(r2++), a2 >= 48 && a2 <= 57) {
      if (r2 - n >= 10)
        return -1;
      continue;
    }
    if (a2 === 41 || a2 === 46)
      break;
    return -1;
  }
  return r2 < i2 && (a2 = t2.src.charCodeAt(r2), !Fe(a2)) ? -1 : r2;
}
function xb(t2, e2) {
  const n = t2.level + 2;
  for (let i2 = e2 + 2, r2 = t2.tokens.length - 2; i2 < r2; i2++)
    t2.tokens[i2].level === n && t2.tokens[i2].type === "paragraph_open" && (t2.tokens[i2 + 2].hidden = true, t2.tokens[i2].hidden = true, i2 += 2);
}
function Lb(t2, e2, n, i2) {
  let r2, a2, s2, o2, l2 = e2, u2 = true;
  if (t2.sCount[l2] - t2.blkIndent >= 4 || t2.listIndent >= 0 && t2.sCount[l2] - t2.listIndent >= 4 && t2.sCount[l2] < t2.blkIndent)
    return false;
  let _ = false;
  i2 && t2.parentType === "paragraph" && t2.sCount[l2] >= t2.blkIndent && (_ = true);
  let d2, f2, b;
  if ((b = Xc(t2, l2)) >= 0) {
    if (d2 = true, s2 = t2.bMarks[l2] + t2.tShift[l2], f2 = Number(t2.src.slice(s2, b - 1)), _ && f2 !== 1)
      return false;
  } else if ((b = Qc(t2, l2)) >= 0)
    d2 = false;
  else
    return false;
  if (_ && t2.skipSpaces(b) >= t2.eMarks[l2])
    return false;
  if (i2)
    return true;
  const c2 = t2.src.charCodeAt(b - 1), E2 = t2.tokens.length;
  d2 ? (o2 = t2.push("ordered_list_open", "ol", 1), f2 !== 1 && (o2.attrs = [["start", f2]])) : o2 = t2.push("bullet_list_open", "ul", 1);
  const g2 = [l2, 0];
  o2.map = g2, o2.markup = String.fromCharCode(c2);
  let S = false;
  const p2 = t2.md.block.ruler.getRules("list"), m2 = t2.parentType;
  for (t2.parentType = "list"; l2 < n; ) {
    a2 = b, r2 = t2.eMarks[l2];
    const R2 = t2.sCount[l2] + b - (t2.bMarks[l2] + t2.tShift[l2]);
    let T = R2;
    for (; a2 < r2; ) {
      const D = t2.src.charCodeAt(a2);
      if (D === 9)
        T += 4 - (T + t2.bsCount[l2]) % 4;
      else if (D === 32)
        T++;
      else
        break;
      a2++;
    }
    const h2 = a2;
    let C2;
    h2 >= r2 ? C2 = 1 : C2 = T - R2, C2 > 4 && (C2 = 1);
    const A2 = R2 + C2;
    o2 = t2.push("list_item_open", "li", 1), o2.markup = String.fromCharCode(c2);
    const I2 = [l2, 0];
    o2.map = I2, d2 && (o2.info = t2.src.slice(s2, b - 1));
    const v2 = t2.tight, x = t2.tShift[l2], M = t2.sCount[l2], B2 = t2.listIndent;
    if (t2.listIndent = t2.blkIndent, t2.blkIndent = A2, t2.tight = true, t2.tShift[l2] = h2 - t2.bMarks[l2], t2.sCount[l2] = T, h2 >= r2 && t2.isEmpty(l2 + 1) ? t2.line = Math.min(t2.line + 2, n) : t2.md.block.tokenize(t2, l2, n, true), (!t2.tight || S) && (u2 = false), S = t2.line - l2 > 1 && t2.isEmpty(t2.line - 1), t2.blkIndent = t2.listIndent, t2.listIndent = B2, t2.tShift[l2] = x, t2.sCount[l2] = M, t2.tight = v2, o2 = t2.push("list_item_close", "li", -1), o2.markup = String.fromCharCode(c2), l2 = t2.line, I2[1] = l2, l2 >= n || t2.sCount[l2] < t2.blkIndent || t2.sCount[l2] - t2.blkIndent >= 4)
      break;
    let G2 = false;
    for (let D = 0, w = p2.length; D < w; D++)
      if (p2[D](t2, l2, n, true)) {
        G2 = true;
        break;
      }
    if (G2)
      break;
    if (d2) {
      if (b = Xc(t2, l2), b < 0)
        break;
      s2 = t2.bMarks[l2] + t2.tShift[l2];
    } else if (b = Qc(t2, l2), b < 0)
      break;
    if (c2 !== t2.src.charCodeAt(b - 1))
      break;
  }
  return d2 ? o2 = t2.push("ordered_list_close", "ol", -1) : o2 = t2.push("bullet_list_close", "ul", -1), o2.markup = String.fromCharCode(c2), g2[1] = l2, t2.line = l2, t2.parentType = m2, u2 && xb(t2, E2), true;
}
function Mb(t2, e2, n, i2) {
  let r2 = t2.bMarks[e2] + t2.tShift[e2], a2 = t2.eMarks[e2], s2 = e2 + 1;
  if (t2.sCount[e2] - t2.blkIndent >= 4 || t2.src.charCodeAt(r2) !== 91)
    return false;
  function o2(p2) {
    const m2 = t2.lineMax;
    if (p2 >= m2 || t2.isEmpty(p2))
      return null;
    let R2 = false;
    if (t2.sCount[p2] - t2.blkIndent > 3 && (R2 = true), t2.sCount[p2] < 0 && (R2 = true), !R2) {
      const C2 = t2.md.block.ruler.getRules("reference"), A2 = t2.parentType;
      t2.parentType = "reference";
      let I2 = false;
      for (let v2 = 0, x = C2.length; v2 < x; v2++)
        if (C2[v2](t2, p2, m2, true)) {
          I2 = true;
          break;
        }
      if (t2.parentType = A2, I2)
        return null;
    }
    const T = t2.bMarks[p2] + t2.tShift[p2], h2 = t2.eMarks[p2];
    return t2.src.slice(T, h2 + 1);
  }
  let l2 = t2.src.slice(r2, a2 + 1);
  a2 = l2.length;
  let u2 = -1;
  for (r2 = 1; r2 < a2; r2++) {
    const p2 = l2.charCodeAt(r2);
    if (p2 === 91)
      return false;
    if (p2 === 93) {
      u2 = r2;
      break;
    } else if (p2 === 10) {
      const m2 = o2(s2);
      m2 !== null && (l2 += m2, a2 = l2.length, s2++);
    } else if (p2 === 92 && (r2++, r2 < a2 && l2.charCodeAt(r2) === 10)) {
      const m2 = o2(s2);
      m2 !== null && (l2 += m2, a2 = l2.length, s2++);
    }
  }
  if (u2 < 0 || l2.charCodeAt(u2 + 1) !== 58)
    return false;
  for (r2 = u2 + 2; r2 < a2; r2++) {
    const p2 = l2.charCodeAt(r2);
    if (p2 === 10) {
      const m2 = o2(s2);
      m2 !== null && (l2 += m2, a2 = l2.length, s2++);
    } else if (!Fe(p2))
      break;
  }
  const _ = t2.md.helpers.parseLinkDestination(l2, r2, a2);
  if (!_.ok)
    return false;
  const d2 = t2.md.normalizeLink(_.str);
  if (!t2.md.validateLink(d2))
    return false;
  r2 = _.pos;
  const f2 = r2, b = s2, c2 = r2;
  for (; r2 < a2; r2++) {
    const p2 = l2.charCodeAt(r2);
    if (p2 === 10) {
      const m2 = o2(s2);
      m2 !== null && (l2 += m2, a2 = l2.length, s2++);
    } else if (!Fe(p2))
      break;
  }
  let E2 = t2.md.helpers.parseLinkTitle(l2, r2, a2);
  for (; E2.can_continue; ) {
    const p2 = o2(s2);
    if (p2 === null)
      break;
    l2 += p2, r2 = a2, a2 = l2.length, s2++, E2 = t2.md.helpers.parseLinkTitle(l2, r2, a2, E2);
  }
  let g2;
  for (r2 < a2 && c2 !== r2 && E2.ok ? (g2 = E2.str, r2 = E2.pos) : (g2 = "", r2 = f2, s2 = b); r2 < a2; ) {
    const p2 = l2.charCodeAt(r2);
    if (!Fe(p2))
      break;
    r2++;
  }
  if (r2 < a2 && l2.charCodeAt(r2) !== 10 && g2)
    for (g2 = "", r2 = f2, s2 = b; r2 < a2; ) {
      const p2 = l2.charCodeAt(r2);
      if (!Fe(p2))
        break;
      r2++;
    }
  if (r2 < a2 && l2.charCodeAt(r2) !== 10)
    return false;
  const S = Or(l2.slice(1, u2));
  return S ? (i2 || (typeof t2.env.references > "u" && (t2.env.references = {}), typeof t2.env.references[S] > "u" && (t2.env.references[S] = { title: g2, href: d2 }), t2.line = s2), true) : false;
}
const wb = [
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "search",
  "section",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul"
], kb = "[a-zA-Z_:][a-zA-Z0-9:._-]*", Pb = "[^\"'=<>`\\x00-\\x20]+", Fb = "'[^']*'", Ub = '"[^"]*"', Bb = "(?:" + Pb + "|" + Fb + "|" + Ub + ")", Gb = "(?:\\s+" + kb + "(?:\\s*=\\s*" + Bb + ")?)", e0 = "<[A-Za-z][A-Za-z0-9\\-]*" + Gb + "*\\s*\\/?>", t0 = "<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>", Yb = "<!---?>|<!--(?:[^-]|-[^-]|--[^>])*-->", qb = "<[?][\\s\\S]*?[?]>", Vb = "<![A-Za-z][^>]*>", Hb = "<!\\[CDATA\\[[\\s\\S]*?\\]\\]>", zb = new RegExp("^(?:" + e0 + "|" + t0 + "|" + Yb + "|" + qb + "|" + Vb + "|" + Hb + ")"), $b = new RegExp("^(?:" + e0 + "|" + t0 + ")"), pn$1 = [
  [/^<(script|pre|style|textarea)(?=(\s|>|$))/i, /<\/(script|pre|style|textarea)>/i, true],
  [/^<!--/, /-->/, true],
  [/^<\?/, /\?>/, true],
  [/^<![A-Z]/, />/, true],
  [/^<!\[CDATA\[/, /\]\]>/, true],
  [new RegExp("^</?(" + wb.join("|") + ")(?=(\\s|/?>|$))", "i"), /^$/, true],
  [new RegExp($b.source + "\\s*$"), /^$/, false]
];
function Wb(t2, e2, n, i2) {
  let r2 = t2.bMarks[e2] + t2.tShift[e2], a2 = t2.eMarks[e2];
  if (t2.sCount[e2] - t2.blkIndent >= 4 || !t2.md.options.html || t2.src.charCodeAt(r2) !== 60)
    return false;
  let s2 = t2.src.slice(r2, a2), o2 = 0;
  for (; o2 < pn$1.length && !pn$1[o2][0].test(s2); o2++)
    ;
  if (o2 === pn$1.length)
    return false;
  if (i2)
    return pn$1[o2][2];
  let l2 = e2 + 1;
  if (!pn$1[o2][1].test(s2)) {
    for (; l2 < n && !(t2.sCount[l2] < t2.blkIndent); l2++)
      if (r2 = t2.bMarks[l2] + t2.tShift[l2], a2 = t2.eMarks[l2], s2 = t2.src.slice(r2, a2), pn$1[o2][1].test(s2)) {
        s2.length !== 0 && l2++;
        break;
      }
  }
  t2.line = l2;
  const u2 = t2.push("html_block", "", 0);
  return u2.map = [e2, l2], u2.content = t2.getLines(e2, l2, t2.blkIndent, true), true;
}
function Kb(t2, e2, n, i2) {
  let r2 = t2.bMarks[e2] + t2.tShift[e2], a2 = t2.eMarks[e2];
  if (t2.sCount[e2] - t2.blkIndent >= 4)
    return false;
  let s2 = t2.src.charCodeAt(r2);
  if (s2 !== 35 || r2 >= a2)
    return false;
  let o2 = 1;
  for (s2 = t2.src.charCodeAt(++r2); s2 === 35 && r2 < a2 && o2 <= 6; )
    o2++, s2 = t2.src.charCodeAt(++r2);
  if (o2 > 6 || r2 < a2 && !Fe(s2))
    return false;
  if (i2)
    return true;
  a2 = t2.skipSpacesBack(a2, r2);
  const l2 = t2.skipCharsBack(a2, 35, r2);
  l2 > r2 && Fe(t2.src.charCodeAt(l2 - 1)) && (a2 = l2), t2.line = e2 + 1;
  const u2 = t2.push("heading_open", "h" + String(o2), 1);
  u2.markup = "########".slice(0, o2), u2.map = [e2, t2.line];
  const _ = t2.push("inline", "", 0);
  _.content = t2.src.slice(r2, a2).trim(), _.map = [e2, t2.line], _.children = [];
  const d2 = t2.push("heading_close", "h" + String(o2), -1);
  return d2.markup = "########".slice(0, o2), true;
}
function Qb(t2, e2, n) {
  const i2 = t2.md.block.ruler.getRules("paragraph");
  if (t2.sCount[e2] - t2.blkIndent >= 4)
    return false;
  const r2 = t2.parentType;
  t2.parentType = "paragraph";
  let a2 = 0, s2, o2 = e2 + 1;
  for (; o2 < n && !t2.isEmpty(o2); o2++) {
    if (t2.sCount[o2] - t2.blkIndent > 3)
      continue;
    if (t2.sCount[o2] >= t2.blkIndent) {
      let b = t2.bMarks[o2] + t2.tShift[o2];
      const c2 = t2.eMarks[o2];
      if (b < c2 && (s2 = t2.src.charCodeAt(b), (s2 === 45 || s2 === 61) && (b = t2.skipChars(b, s2), b = t2.skipSpaces(b), b >= c2))) {
        a2 = s2 === 61 ? 1 : 2;
        break;
      }
    }
    if (t2.sCount[o2] < 0)
      continue;
    let f2 = false;
    for (let b = 0, c2 = i2.length; b < c2; b++)
      if (i2[b](t2, o2, n, true)) {
        f2 = true;
        break;
      }
    if (f2)
      break;
  }
  if (!a2)
    return false;
  const l2 = t2.getLines(e2, o2, t2.blkIndent, false).trim();
  t2.line = o2 + 1;
  const u2 = t2.push("heading_open", "h" + String(a2), 1);
  u2.markup = String.fromCharCode(s2), u2.map = [e2, t2.line];
  const _ = t2.push("inline", "", 0);
  _.content = l2, _.map = [e2, t2.line - 1], _.children = [];
  const d2 = t2.push("heading_close", "h" + String(a2), -1);
  return d2.markup = String.fromCharCode(s2), t2.parentType = r2, true;
}
function Xb(t2, e2, n) {
  const i2 = t2.md.block.ruler.getRules("paragraph"), r2 = t2.parentType;
  let a2 = e2 + 1;
  for (t2.parentType = "paragraph"; a2 < n && !t2.isEmpty(a2); a2++) {
    if (t2.sCount[a2] - t2.blkIndent > 3 || t2.sCount[a2] < 0)
      continue;
    let u2 = false;
    for (let _ = 0, d2 = i2.length; _ < d2; _++)
      if (i2[_](t2, a2, n, true)) {
        u2 = true;
        break;
      }
    if (u2)
      break;
  }
  const s2 = t2.getLines(e2, a2, t2.blkIndent, false).trim();
  t2.line = a2;
  const o2 = t2.push("paragraph_open", "p", 1);
  o2.map = [e2, t2.line];
  const l2 = t2.push("inline", "", 0);
  return l2.content = s2, l2.map = [e2, t2.line], l2.children = [], t2.push("paragraph_close", "p", -1), t2.parentType = r2, true;
}
const cr = [
  // First 2 params - rule name & source. Secondary array - list of rules,
  // which can be terminated by this one.
  ["table", Ob, ["paragraph", "reference"]],
  ["code", Ab],
  ["fence", yb, ["paragraph", "reference", "blockquote", "list"]],
  ["blockquote", Ib, ["paragraph", "reference", "blockquote", "list"]],
  ["hr", Db, ["paragraph", "reference", "blockquote", "list"]],
  ["list", Lb, ["paragraph", "reference", "blockquote"]],
  ["reference", Mb],
  ["html_block", Wb, ["paragraph", "reference", "blockquote"]],
  ["heading", Kb, ["paragraph", "reference", "blockquote"]],
  ["lheading", Qb],
  ["paragraph", Xb]
];
function Ar() {
  this.ruler = new at$1();
  for (let t2 = 0; t2 < cr.length; t2++)
    this.ruler.push(cr[t2][0], cr[t2][1], { alt: (cr[t2][2] || []).slice() });
}
Ar.prototype.tokenize = function(t2, e2, n) {
  const i2 = this.ruler.getRules(""), r2 = i2.length, a2 = t2.md.options.maxNesting;
  let s2 = e2, o2 = false;
  for (; s2 < n && (t2.line = s2 = t2.skipEmptyLines(s2), !(s2 >= n || t2.sCount[s2] < t2.blkIndent)); ) {
    if (t2.level >= a2) {
      t2.line = n;
      break;
    }
    const l2 = t2.line;
    let u2 = false;
    for (let _ = 0; _ < r2; _++)
      if (u2 = i2[_](t2, s2, n, false), u2) {
        if (l2 >= t2.line)
          throw new Error("block rule didn't increment state.line");
        break;
      }
    if (!u2)
      throw new Error("none of the block rules matched");
    t2.tight = !o2, t2.isEmpty(t2.line - 1) && (o2 = true), s2 = t2.line, s2 < n && t2.isEmpty(s2) && (o2 = true, s2++, t2.line = s2);
  }
};
Ar.prototype.parse = function(t2, e2, n, i2) {
  if (!t2)
    return;
  const r2 = new this.State(t2, e2, n, i2);
  this.tokenize(r2, r2.line, r2.lineMax);
};
Ar.prototype.State = wt$1;
function Kn(t2, e2, n, i2) {
  this.src = t2, this.env = n, this.md = e2, this.tokens = i2, this.tokens_meta = Array(i2.length), this.pos = 0, this.posMax = this.src.length, this.level = 0, this.pending = "", this.pendingLevel = 0, this.cache = {}, this.delimiters = [], this._prev_delimiters = [], this.backticks = {}, this.backticksScanned = false, this.linkLevel = 0;
}
Kn.prototype.pushPending = function() {
  const t2 = new Rt$1("text", "", 0);
  return t2.content = this.pending, t2.level = this.pendingLevel, this.tokens.push(t2), this.pending = "", t2;
};
Kn.prototype.push = function(t2, e2, n) {
  this.pending && this.pushPending();
  const i2 = new Rt$1(t2, e2, n);
  let r2 = null;
  return n < 0 && (this.level--, this.delimiters = this._prev_delimiters.pop()), i2.level = this.level, n > 0 && (this.level++, this._prev_delimiters.push(this.delimiters), this.delimiters = [], r2 = { delimiters: this.delimiters }), this.pendingLevel = this.level, this.tokens.push(i2), this.tokens_meta.push(r2), i2;
};
Kn.prototype.scanDelims = function(t2, e2) {
  const n = this.posMax, i2 = this.src.charCodeAt(t2), r2 = t2 > 0 ? this.src.charCodeAt(t2 - 1) : 32;
  let a2 = t2;
  for (; a2 < n && this.src.charCodeAt(a2) === i2; )
    a2++;
  const s2 = a2 - t2, o2 = a2 < n ? this.src.charCodeAt(a2) : 32, l2 = Hn(r2) || Vn(String.fromCharCode(r2)), u2 = Hn(o2) || Vn(String.fromCharCode(o2)), _ = qn(r2), d2 = qn(o2), f2 = !d2 && (!u2 || _ || l2), b = !_ && (!l2 || d2 || u2);
  return { can_open: f2 && (e2 || !b || l2), can_close: b && (e2 || !f2 || u2), length: s2 };
};
Kn.prototype.Token = Rt$1;
function Zb(t2) {
  switch (t2) {
    case 10:
    case 33:
    case 35:
    case 36:
    case 37:
    case 38:
    case 42:
    case 43:
    case 45:
    case 58:
    case 60:
    case 61:
    case 62:
    case 64:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 123:
    case 125:
    case 126:
      return true;
    default:
      return false;
  }
}
function Jb(t2, e2) {
  let n = t2.pos;
  for (; n < t2.posMax && !Zb(t2.src.charCodeAt(n)); )
    n++;
  return n === t2.pos ? false : (e2 || (t2.pending += t2.src.slice(t2.pos, n)), t2.pos = n, true);
}
const jb = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i;
function eT(t2, e2) {
  if (!t2.md.options.linkify || t2.linkLevel > 0)
    return false;
  const n = t2.pos, i2 = t2.posMax;
  if (n + 3 > i2 || t2.src.charCodeAt(n) !== 58 || t2.src.charCodeAt(n + 1) !== 47 || t2.src.charCodeAt(n + 2) !== 47)
    return false;
  const r2 = t2.pending.match(jb);
  if (!r2)
    return false;
  const a2 = r2[1], s2 = t2.md.linkify.matchAtStart(t2.src.slice(n - a2.length));
  if (!s2)
    return false;
  let o2 = s2.url;
  if (o2.length <= a2.length)
    return false;
  o2 = o2.replace(/\*+$/, "");
  const l2 = t2.md.normalizeLink(o2);
  if (!t2.md.validateLink(l2))
    return false;
  if (!e2) {
    t2.pending = t2.pending.slice(0, -a2.length);
    const u2 = t2.push("link_open", "a", 1);
    u2.attrs = [["href", l2]], u2.markup = "linkify", u2.info = "auto";
    const _ = t2.push("text", "", 0);
    _.content = t2.md.normalizeLinkText(o2);
    const d2 = t2.push("link_close", "a", -1);
    d2.markup = "linkify", d2.info = "auto";
  }
  return t2.pos += o2.length - a2.length, true;
}
function tT(t2, e2) {
  let n = t2.pos;
  if (t2.src.charCodeAt(n) !== 10)
    return false;
  const i2 = t2.pending.length - 1, r2 = t2.posMax;
  if (!e2)
    if (i2 >= 0 && t2.pending.charCodeAt(i2) === 32)
      if (i2 >= 1 && t2.pending.charCodeAt(i2 - 1) === 32) {
        let a2 = i2 - 1;
        for (; a2 >= 1 && t2.pending.charCodeAt(a2 - 1) === 32; )
          a2--;
        t2.pending = t2.pending.slice(0, a2), t2.push("hardbreak", "br", 0);
      } else
        t2.pending = t2.pending.slice(0, -1), t2.push("softbreak", "br", 0);
    else
      t2.push("softbreak", "br", 0);
  for (n++; n < r2 && Fe(t2.src.charCodeAt(n)); )
    n++;
  return t2.pos = n, true;
}
const Fl = [];
for (let t2 = 0; t2 < 256; t2++)
  Fl.push(0);
"\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function(t2) {
  Fl[t2.charCodeAt(0)] = 1;
});
function nT(t2, e2) {
  let n = t2.pos;
  const i2 = t2.posMax;
  if (t2.src.charCodeAt(n) !== 92 || (n++, n >= i2))
    return false;
  let r2 = t2.src.charCodeAt(n);
  if (r2 === 10) {
    for (e2 || t2.push("hardbreak", "br", 0), n++; n < i2 && (r2 = t2.src.charCodeAt(n), !!Fe(r2)); )
      n++;
    return t2.pos = n, true;
  }
  let a2 = t2.src[n];
  if (r2 >= 55296 && r2 <= 56319 && n + 1 < i2) {
    const o2 = t2.src.charCodeAt(n + 1);
    o2 >= 56320 && o2 <= 57343 && (a2 += t2.src[n + 1], n++);
  }
  const s2 = "\\" + a2;
  if (!e2) {
    const o2 = t2.push("text_special", "", 0);
    r2 < 256 && Fl[r2] !== 0 ? o2.content = a2 : o2.content = s2, o2.markup = s2, o2.info = "escape";
  }
  return t2.pos = n + 1, true;
}
function rT(t2, e2) {
  let n = t2.pos;
  if (t2.src.charCodeAt(n) !== 96)
    return false;
  const r2 = n;
  n++;
  const a2 = t2.posMax;
  for (; n < a2 && t2.src.charCodeAt(n) === 96; )
    n++;
  const s2 = t2.src.slice(r2, n), o2 = s2.length;
  if (t2.backticksScanned && (t2.backticks[o2] || 0) <= r2)
    return e2 || (t2.pending += s2), t2.pos += o2, true;
  let l2 = n, u2;
  for (; (u2 = t2.src.indexOf("`", l2)) !== -1; ) {
    for (l2 = u2 + 1; l2 < a2 && t2.src.charCodeAt(l2) === 96; )
      l2++;
    const _ = l2 - u2;
    if (_ === o2) {
      if (!e2) {
        const d2 = t2.push("code_inline", "code", 0);
        d2.markup = s2, d2.content = t2.src.slice(n, u2).replace(/\n/g, " ").replace(/^ (.+) $/, "$1");
      }
      return t2.pos = l2, true;
    }
    t2.backticks[_] = u2;
  }
  return t2.backticksScanned = true, e2 || (t2.pending += s2), t2.pos += o2, true;
}
function aT(t2, e2) {
  const n = t2.pos, i2 = t2.src.charCodeAt(n);
  if (e2 || i2 !== 126)
    return false;
  const r2 = t2.scanDelims(t2.pos, true);
  let a2 = r2.length;
  const s2 = String.fromCharCode(i2);
  if (a2 < 2)
    return false;
  let o2;
  a2 % 2 && (o2 = t2.push("text", "", 0), o2.content = s2, a2--);
  for (let l2 = 0; l2 < a2; l2 += 2)
    o2 = t2.push("text", "", 0), o2.content = s2 + s2, t2.delimiters.push({
      marker: i2,
      length: 0,
      // disable "rule of 3" length checks meant for emphasis
      token: t2.tokens.length - 1,
      end: -1,
      open: r2.can_open,
      close: r2.can_close
    });
  return t2.pos += r2.length, true;
}
function Zc(t2, e2) {
  let n;
  const i2 = [], r2 = e2.length;
  for (let a2 = 0; a2 < r2; a2++) {
    const s2 = e2[a2];
    if (s2.marker !== 126 || s2.end === -1)
      continue;
    const o2 = e2[s2.end];
    n = t2.tokens[s2.token], n.type = "s_open", n.tag = "s", n.nesting = 1, n.markup = "~~", n.content = "", n = t2.tokens[o2.token], n.type = "s_close", n.tag = "s", n.nesting = -1, n.markup = "~~", n.content = "", t2.tokens[o2.token - 1].type === "text" && t2.tokens[o2.token - 1].content === "~" && i2.push(o2.token - 1);
  }
  for (; i2.length; ) {
    const a2 = i2.pop();
    let s2 = a2 + 1;
    for (; s2 < t2.tokens.length && t2.tokens[s2].type === "s_close"; )
      s2++;
    s2--, a2 !== s2 && (n = t2.tokens[s2], t2.tokens[s2] = t2.tokens[a2], t2.tokens[a2] = n);
  }
}
function iT(t2) {
  const e2 = t2.tokens_meta, n = t2.tokens_meta.length;
  Zc(t2, t2.delimiters);
  for (let i2 = 0; i2 < n; i2++)
    e2[i2] && e2[i2].delimiters && Zc(t2, e2[i2].delimiters);
}
const n0 = {
  tokenize: aT,
  postProcess: iT
};
function oT(t2, e2) {
  const n = t2.pos, i2 = t2.src.charCodeAt(n);
  if (e2 || i2 !== 95 && i2 !== 42)
    return false;
  const r2 = t2.scanDelims(t2.pos, i2 === 42);
  for (let a2 = 0; a2 < r2.length; a2++) {
    const s2 = t2.push("text", "", 0);
    s2.content = String.fromCharCode(i2), t2.delimiters.push({
      // Char code of the starting marker (number).
      //
      marker: i2,
      // Total length of these series of delimiters.
      //
      length: r2.length,
      // A position of the token this delimiter corresponds to.
      //
      token: t2.tokens.length - 1,
      // If this delimiter is matched as a valid opener, `end` will be
      // equal to its position, otherwise it's `-1`.
      //
      end: -1,
      // Boolean flags that determine if this delimiter could open or close
      // an emphasis.
      //
      open: r2.can_open,
      close: r2.can_close
    });
  }
  return t2.pos += r2.length, true;
}
function Jc(t2, e2) {
  const n = e2.length;
  for (let i2 = n - 1; i2 >= 0; i2--) {
    const r2 = e2[i2];
    if (r2.marker !== 95 && r2.marker !== 42 || r2.end === -1)
      continue;
    const a2 = e2[r2.end], s2 = i2 > 0 && e2[i2 - 1].end === r2.end + 1 && // check that first two markers match and adjacent
    e2[i2 - 1].marker === r2.marker && e2[i2 - 1].token === r2.token - 1 && // check that last two markers are adjacent (we can safely assume they match)
    e2[r2.end + 1].token === a2.token + 1, o2 = String.fromCharCode(r2.marker), l2 = t2.tokens[r2.token];
    l2.type = s2 ? "strong_open" : "em_open", l2.tag = s2 ? "strong" : "em", l2.nesting = 1, l2.markup = s2 ? o2 + o2 : o2, l2.content = "";
    const u2 = t2.tokens[a2.token];
    u2.type = s2 ? "strong_close" : "em_close", u2.tag = s2 ? "strong" : "em", u2.nesting = -1, u2.markup = s2 ? o2 + o2 : o2, u2.content = "", s2 && (t2.tokens[e2[i2 - 1].token].content = "", t2.tokens[e2[r2.end + 1].token].content = "", i2--);
  }
}
function sT(t2) {
  const e2 = t2.tokens_meta, n = t2.tokens_meta.length;
  Jc(t2, t2.delimiters);
  for (let i2 = 0; i2 < n; i2++)
    e2[i2] && e2[i2].delimiters && Jc(t2, e2[i2].delimiters);
}
const r0 = {
  tokenize: oT,
  postProcess: sT
};
function lT(t2, e2) {
  let n, i2, r2, a2, s2 = "", o2 = "", l2 = t2.pos, u2 = true;
  if (t2.src.charCodeAt(t2.pos) !== 91)
    return false;
  const _ = t2.pos, d2 = t2.posMax, f2 = t2.pos + 1, b = t2.md.helpers.parseLinkLabel(t2, t2.pos, true);
  if (b < 0)
    return false;
  let c2 = b + 1;
  if (c2 < d2 && t2.src.charCodeAt(c2) === 40) {
    for (u2 = false, c2++; c2 < d2 && (n = t2.src.charCodeAt(c2), !(!Fe(n) && n !== 10)); c2++)
      ;
    if (c2 >= d2)
      return false;
    if (l2 = c2, r2 = t2.md.helpers.parseLinkDestination(t2.src, c2, t2.posMax), r2.ok) {
      for (s2 = t2.md.normalizeLink(r2.str), t2.md.validateLink(s2) ? c2 = r2.pos : s2 = "", l2 = c2; c2 < d2 && (n = t2.src.charCodeAt(c2), !(!Fe(n) && n !== 10)); c2++)
        ;
      if (r2 = t2.md.helpers.parseLinkTitle(t2.src, c2, t2.posMax), c2 < d2 && l2 !== c2 && r2.ok)
        for (o2 = r2.str, c2 = r2.pos; c2 < d2 && (n = t2.src.charCodeAt(c2), !(!Fe(n) && n !== 10)); c2++)
          ;
    }
    (c2 >= d2 || t2.src.charCodeAt(c2) !== 41) && (u2 = true), c2++;
  }
  if (u2) {
    if (typeof t2.env.references > "u")
      return false;
    if (c2 < d2 && t2.src.charCodeAt(c2) === 91 ? (l2 = c2 + 1, c2 = t2.md.helpers.parseLinkLabel(t2, c2), c2 >= 0 ? i2 = t2.src.slice(l2, c2++) : c2 = b + 1) : c2 = b + 1, i2 || (i2 = t2.src.slice(f2, b)), a2 = t2.env.references[Or(i2)], !a2)
      return t2.pos = _, false;
    s2 = a2.href, o2 = a2.title;
  }
  if (!e2) {
    t2.pos = f2, t2.posMax = b;
    const E2 = t2.push("link_open", "a", 1), g2 = [["href", s2]];
    E2.attrs = g2, o2 && g2.push(["title", o2]), t2.linkLevel++, t2.md.inline.tokenize(t2), t2.linkLevel--, t2.push("link_close", "a", -1);
  }
  return t2.pos = c2, t2.posMax = d2, true;
}
function cT(t2, e2) {
  let n, i2, r2, a2, s2, o2, l2, u2, _ = "";
  const d2 = t2.pos, f2 = t2.posMax;
  if (t2.src.charCodeAt(t2.pos) !== 33 || t2.src.charCodeAt(t2.pos + 1) !== 91)
    return false;
  const b = t2.pos + 2, c2 = t2.md.helpers.parseLinkLabel(t2, t2.pos + 1, false);
  if (c2 < 0)
    return false;
  if (a2 = c2 + 1, a2 < f2 && t2.src.charCodeAt(a2) === 40) {
    for (a2++; a2 < f2 && (n = t2.src.charCodeAt(a2), !(!Fe(n) && n !== 10)); a2++)
      ;
    if (a2 >= f2)
      return false;
    for (u2 = a2, o2 = t2.md.helpers.parseLinkDestination(t2.src, a2, t2.posMax), o2.ok && (_ = t2.md.normalizeLink(o2.str), t2.md.validateLink(_) ? a2 = o2.pos : _ = ""), u2 = a2; a2 < f2 && (n = t2.src.charCodeAt(a2), !(!Fe(n) && n !== 10)); a2++)
      ;
    if (o2 = t2.md.helpers.parseLinkTitle(t2.src, a2, t2.posMax), a2 < f2 && u2 !== a2 && o2.ok)
      for (l2 = o2.str, a2 = o2.pos; a2 < f2 && (n = t2.src.charCodeAt(a2), !(!Fe(n) && n !== 10)); a2++)
        ;
    else
      l2 = "";
    if (a2 >= f2 || t2.src.charCodeAt(a2) !== 41)
      return t2.pos = d2, false;
    a2++;
  } else {
    if (typeof t2.env.references > "u")
      return false;
    if (a2 < f2 && t2.src.charCodeAt(a2) === 91 ? (u2 = a2 + 1, a2 = t2.md.helpers.parseLinkLabel(t2, a2), a2 >= 0 ? r2 = t2.src.slice(u2, a2++) : a2 = c2 + 1) : a2 = c2 + 1, r2 || (r2 = t2.src.slice(b, c2)), s2 = t2.env.references[Or(r2)], !s2)
      return t2.pos = d2, false;
    _ = s2.href, l2 = s2.title;
  }
  if (!e2) {
    i2 = t2.src.slice(b, c2);
    const E2 = [];
    t2.md.inline.parse(
      i2,
      t2.md,
      t2.env,
      E2
    );
    const g2 = t2.push("image", "img", 0), S = [["src", _], ["alt", ""]];
    g2.attrs = S, g2.children = E2, g2.content = i2, l2 && S.push(["title", l2]);
  }
  return t2.pos = a2, t2.posMax = f2, true;
}
const uT = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/, _T = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\x00-\x20]*)$/;
function dT(t2, e2) {
  let n = t2.pos;
  if (t2.src.charCodeAt(n) !== 60)
    return false;
  const i2 = t2.pos, r2 = t2.posMax;
  for (; ; ) {
    if (++n >= r2)
      return false;
    const s2 = t2.src.charCodeAt(n);
    if (s2 === 60)
      return false;
    if (s2 === 62)
      break;
  }
  const a2 = t2.src.slice(i2 + 1, n);
  if (_T.test(a2)) {
    const s2 = t2.md.normalizeLink(a2);
    if (!t2.md.validateLink(s2))
      return false;
    if (!e2) {
      const o2 = t2.push("link_open", "a", 1);
      o2.attrs = [["href", s2]], o2.markup = "autolink", o2.info = "auto";
      const l2 = t2.push("text", "", 0);
      l2.content = t2.md.normalizeLinkText(a2);
      const u2 = t2.push("link_close", "a", -1);
      u2.markup = "autolink", u2.info = "auto";
    }
    return t2.pos += a2.length + 2, true;
  }
  if (uT.test(a2)) {
    const s2 = t2.md.normalizeLink("mailto:" + a2);
    if (!t2.md.validateLink(s2))
      return false;
    if (!e2) {
      const o2 = t2.push("link_open", "a", 1);
      o2.attrs = [["href", s2]], o2.markup = "autolink", o2.info = "auto";
      const l2 = t2.push("text", "", 0);
      l2.content = t2.md.normalizeLinkText(a2);
      const u2 = t2.push("link_close", "a", -1);
      u2.markup = "autolink", u2.info = "auto";
    }
    return t2.pos += a2.length + 2, true;
  }
  return false;
}
function pT(t2) {
  return /^<a[>\s]/i.test(t2);
}
function mT(t2) {
  return /^<\/a\s*>/i.test(t2);
}
function ET(t2) {
  const e2 = t2 | 32;
  return e2 >= 97 && e2 <= 122;
}
function gT(t2, e2) {
  if (!t2.md.options.html)
    return false;
  const n = t2.posMax, i2 = t2.pos;
  if (t2.src.charCodeAt(i2) !== 60 || i2 + 2 >= n)
    return false;
  const r2 = t2.src.charCodeAt(i2 + 1);
  if (r2 !== 33 && r2 !== 63 && r2 !== 47 && !ET(r2))
    return false;
  const a2 = t2.src.slice(i2).match(zb);
  if (!a2)
    return false;
  if (!e2) {
    const s2 = t2.push("html_inline", "", 0);
    s2.content = a2[0], pT(s2.content) && t2.linkLevel++, mT(s2.content) && t2.linkLevel--;
  }
  return t2.pos += a2[0].length, true;
}
const fT = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i, ST = /^&([a-z][a-z0-9]{1,31});/i;
function bT(t2, e2) {
  const n = t2.pos, i2 = t2.posMax;
  if (t2.src.charCodeAt(n) !== 38 || n + 1 >= i2)
    return false;
  if (t2.src.charCodeAt(n + 1) === 35) {
    const a2 = t2.src.slice(n).match(fT);
    if (a2) {
      if (!e2) {
        const s2 = a2[1][0].toLowerCase() === "x" ? parseInt(a2[1].slice(1), 16) : parseInt(a2[1], 10), o2 = t2.push("text_special", "", 0);
        o2.content = kl(s2) ? gr(s2) : gr(65533), o2.markup = a2[0], o2.info = "entity";
      }
      return t2.pos += a2[0].length, true;
    }
  } else {
    const a2 = t2.src.slice(n).match(ST);
    if (a2) {
      const s2 = Qm(a2[0]);
      if (s2 !== a2[0]) {
        if (!e2) {
          const o2 = t2.push("text_special", "", 0);
          o2.content = s2, o2.markup = a2[0], o2.info = "entity";
        }
        return t2.pos += a2[0].length, true;
      }
    }
  }
  return false;
}
function jc(t2) {
  const e2 = {}, n = t2.length;
  if (!n)
    return;
  let i2 = 0, r2 = -2;
  const a2 = [];
  for (let s2 = 0; s2 < n; s2++) {
    const o2 = t2[s2];
    if (a2.push(0), (t2[i2].marker !== o2.marker || r2 !== o2.token - 1) && (i2 = s2), r2 = o2.token, o2.length = o2.length || 0, !o2.close)
      continue;
    e2.hasOwnProperty(o2.marker) || (e2[o2.marker] = [-1, -1, -1, -1, -1, -1]);
    const l2 = e2[o2.marker][(o2.open ? 3 : 0) + o2.length % 3];
    let u2 = i2 - a2[i2] - 1, _ = u2;
    for (; u2 > l2; u2 -= a2[u2] + 1) {
      const d2 = t2[u2];
      if (d2.marker === o2.marker && d2.open && d2.end < 0) {
        let f2 = false;
        if ((d2.close || o2.open) && (d2.length + o2.length) % 3 === 0 && (d2.length % 3 !== 0 || o2.length % 3 !== 0) && (f2 = true), !f2) {
          const b = u2 > 0 && !t2[u2 - 1].open ? a2[u2 - 1] + 1 : 0;
          a2[s2] = s2 - u2 + b, a2[u2] = b, o2.open = false, d2.end = s2, d2.close = false, _ = -1, r2 = -2;
          break;
        }
      }
    }
    _ !== -1 && (e2[o2.marker][(o2.open ? 3 : 0) + (o2.length || 0) % 3] = _);
  }
}
function TT(t2) {
  const e2 = t2.tokens_meta, n = t2.tokens_meta.length;
  jc(t2.delimiters);
  for (let i2 = 0; i2 < n; i2++)
    e2[i2] && e2[i2].delimiters && jc(e2[i2].delimiters);
}
function hT(t2) {
  let e2, n, i2 = 0;
  const r2 = t2.tokens, a2 = t2.tokens.length;
  for (e2 = n = 0; e2 < a2; e2++)
    r2[e2].nesting < 0 && i2--, r2[e2].level = i2, r2[e2].nesting > 0 && i2++, r2[e2].type === "text" && e2 + 1 < a2 && r2[e2 + 1].type === "text" ? r2[e2 + 1].content = r2[e2].content + r2[e2 + 1].content : (e2 !== n && (r2[n] = r2[e2]), n++);
  e2 !== n && (r2.length = n);
}
const $r = [
  ["text", Jb],
  ["linkify", eT],
  ["newline", tT],
  ["escape", nT],
  ["backticks", rT],
  ["strikethrough", n0.tokenize],
  ["emphasis", r0.tokenize],
  ["link", lT],
  ["image", cT],
  ["autolink", dT],
  ["html_inline", gT],
  ["entity", bT]
], Wr = [
  ["balance_pairs", TT],
  ["strikethrough", n0.postProcess],
  ["emphasis", r0.postProcess],
  // rules for pairs separate '**' into its own text tokens, which may be left unused,
  // rule below merges unused segments back with the rest of the text
  ["fragments_join", hT]
];
function Qn() {
  this.ruler = new at$1();
  for (let t2 = 0; t2 < $r.length; t2++)
    this.ruler.push($r[t2][0], $r[t2][1]);
  this.ruler2 = new at$1();
  for (let t2 = 0; t2 < Wr.length; t2++)
    this.ruler2.push(Wr[t2][0], Wr[t2][1]);
}
Qn.prototype.skipToken = function(t2) {
  const e2 = t2.pos, n = this.ruler.getRules(""), i2 = n.length, r2 = t2.md.options.maxNesting, a2 = t2.cache;
  if (typeof a2[e2] < "u") {
    t2.pos = a2[e2];
    return;
  }
  let s2 = false;
  if (t2.level < r2) {
    for (let o2 = 0; o2 < i2; o2++)
      if (t2.level++, s2 = n[o2](t2, true), t2.level--, s2) {
        if (e2 >= t2.pos)
          throw new Error("inline rule didn't increment state.pos");
        break;
      }
  } else
    t2.pos = t2.posMax;
  s2 || t2.pos++, a2[e2] = t2.pos;
};
Qn.prototype.tokenize = function(t2) {
  const e2 = this.ruler.getRules(""), n = e2.length, i2 = t2.posMax, r2 = t2.md.options.maxNesting;
  for (; t2.pos < i2; ) {
    const a2 = t2.pos;
    let s2 = false;
    if (t2.level < r2) {
      for (let o2 = 0; o2 < n; o2++)
        if (s2 = e2[o2](t2, false), s2) {
          if (a2 >= t2.pos)
            throw new Error("inline rule didn't increment state.pos");
          break;
        }
    }
    if (s2) {
      if (t2.pos >= i2)
        break;
      continue;
    }
    t2.pending += t2.src[t2.pos++];
  }
  t2.pending && t2.pushPending();
};
Qn.prototype.parse = function(t2, e2, n, i2) {
  const r2 = new this.State(t2, e2, n, i2);
  this.tokenize(r2);
  const a2 = this.ruler2.getRules(""), s2 = a2.length;
  for (let o2 = 0; o2 < s2; o2++)
    a2[o2](r2);
};
Qn.prototype.State = Kn;
function RT(t2) {
  const e2 = {};
  t2 = t2 || {}, e2.src_Any = Hm.source, e2.src_Cc = zm.source, e2.src_Z = Wm.source, e2.src_P = Ml.source, e2.src_ZPCc = [e2.src_Z, e2.src_P, e2.src_Cc].join("|"), e2.src_ZCc = [e2.src_Z, e2.src_Cc].join("|");
  const n = "[><｜]";
  return e2.src_pseudo_letter = "(?:(?!" + n + "|" + e2.src_ZPCc + ")" + e2.src_Any + ")", e2.src_ip4 = "(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)", e2.src_auth = "(?:(?:(?!" + e2.src_ZCc + "|[@/\\[\\]()]).)+@)?", e2.src_port = "(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?", e2.src_host_terminator = "(?=$|" + n + "|" + e2.src_ZPCc + ")(?!" + (t2["---"] ? "-(?!--)|" : "-|") + "_|:\\d|\\.-|\\.(?!$|" + e2.src_ZPCc + "))", e2.src_path = "(?:[/?#](?:(?!" + e2.src_ZCc + "|" + n + `|[()[\\]{}.,"'?!\\-;]).|\\[(?:(?!` + e2.src_ZCc + "|\\]).)*\\]|\\((?:(?!" + e2.src_ZCc + "|[)]).)*\\)|\\{(?:(?!" + e2.src_ZCc + '|[}]).)*\\}|\\"(?:(?!' + e2.src_ZCc + `|["]).)+\\"|\\'(?:(?!` + e2.src_ZCc + "|[']).)+\\'|\\'(?=" + e2.src_pseudo_letter + "|[-])|\\.{2,}[a-zA-Z0-9%/&]|\\.(?!" + e2.src_ZCc + "|[.]|$)|" + (t2["---"] ? "\\-(?!--(?:[^-]|$))(?:-*)|" : "\\-+|") + // allow `,,,` in paths
  ",(?!" + e2.src_ZCc + "|$)|;(?!" + e2.src_ZCc + "|$)|\\!+(?!" + e2.src_ZCc + "|[!]|$)|\\?(?!" + e2.src_ZCc + "|[?]|$))+|\\/)?", e2.src_email_name = '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*', e2.src_xn = "xn--[a-z0-9\\-]{1,59}", e2.src_domain_root = // Allow letters & digits (http://test1)
  "(?:" + e2.src_xn + "|" + e2.src_pseudo_letter + "{1,63})", e2.src_domain = "(?:" + e2.src_xn + "|(?:" + e2.src_pseudo_letter + ")|(?:" + e2.src_pseudo_letter + "(?:-|" + e2.src_pseudo_letter + "){0,61}" + e2.src_pseudo_letter + "))", e2.src_host = "(?:(?:(?:(?:" + e2.src_domain + ")\\.)*" + e2.src_domain + "))", e2.tpl_host_fuzzy = "(?:" + e2.src_ip4 + "|(?:(?:(?:" + e2.src_domain + ")\\.)+(?:%TLDS%)))", e2.tpl_host_no_ip_fuzzy = "(?:(?:(?:" + e2.src_domain + ")\\.)+(?:%TLDS%))", e2.src_host_strict = e2.src_host + e2.src_host_terminator, e2.tpl_host_fuzzy_strict = e2.tpl_host_fuzzy + e2.src_host_terminator, e2.src_host_port_strict = e2.src_host + e2.src_port + e2.src_host_terminator, e2.tpl_host_port_fuzzy_strict = e2.tpl_host_fuzzy + e2.src_port + e2.src_host_terminator, e2.tpl_host_port_no_ip_fuzzy_strict = e2.tpl_host_no_ip_fuzzy + e2.src_port + e2.src_host_terminator, e2.tpl_host_fuzzy_test = "localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:" + e2.src_ZPCc + "|>|$))", e2.tpl_email_fuzzy = "(^|" + n + '|"|\\(|' + e2.src_ZCc + ")(" + e2.src_email_name + "@" + e2.tpl_host_fuzzy_strict + ")", e2.tpl_link_fuzzy = // Fuzzy link can't be prepended with .:/\- and non punctuation.
  // but can start with > (markdown blockquote)
  "(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|" + e2.src_ZPCc + "))((?![$+<=>^`|｜])" + e2.tpl_host_port_fuzzy_strict + e2.src_path + ")", e2.tpl_link_no_ip_fuzzy = // Fuzzy link can't be prepended with .:/\- and non punctuation.
  // but can start with > (markdown blockquote)
  "(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|" + e2.src_ZPCc + "))((?![$+<=>^`|｜])" + e2.tpl_host_port_no_ip_fuzzy_strict + e2.src_path + ")", e2;
}
function dl(t2) {
  return Array.prototype.slice.call(arguments, 1).forEach(function(n) {
    n && Object.keys(n).forEach(function(i2) {
      t2[i2] = n[i2];
    });
  }), t2;
}
function yr(t2) {
  return Object.prototype.toString.call(t2);
}
function CT(t2) {
  return yr(t2) === "[object String]";
}
function NT(t2) {
  return yr(t2) === "[object Object]";
}
function vT(t2) {
  return yr(t2) === "[object RegExp]";
}
function eu(t2) {
  return yr(t2) === "[object Function]";
}
function OT(t2) {
  return t2.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
}
const a0 = {
  fuzzyLink: true,
  fuzzyEmail: true,
  fuzzyIP: false
};
function AT(t2) {
  return Object.keys(t2 || {}).reduce(function(e2, n) {
    return e2 || a0.hasOwnProperty(n);
  }, false);
}
const yT = {
  "http:": {
    validate: function(t2, e2, n) {
      const i2 = t2.slice(e2);
      return n.re.http || (n.re.http = new RegExp(
        "^\\/\\/" + n.re.src_auth + n.re.src_host_port_strict + n.re.src_path,
        "i"
      )), n.re.http.test(i2) ? i2.match(n.re.http)[0].length : 0;
    }
  },
  "https:": "http:",
  "ftp:": "http:",
  "//": {
    validate: function(t2, e2, n) {
      const i2 = t2.slice(e2);
      return n.re.no_http || (n.re.no_http = new RegExp(
        "^" + n.re.src_auth + // Don't allow single-level domains, because of false positives like '//test'
        // with code comments
        "(?:localhost|(?:(?:" + n.re.src_domain + ")\\.)+" + n.re.src_domain_root + ")" + n.re.src_port + n.re.src_host_terminator + n.re.src_path,
        "i"
      )), n.re.no_http.test(i2) ? e2 >= 3 && t2[e2 - 3] === ":" || e2 >= 3 && t2[e2 - 3] === "/" ? 0 : i2.match(n.re.no_http)[0].length : 0;
    }
  },
  "mailto:": {
    validate: function(t2, e2, n) {
      const i2 = t2.slice(e2);
      return n.re.mailto || (n.re.mailto = new RegExp(
        "^" + n.re.src_email_name + "@" + n.re.src_host_strict,
        "i"
      )), n.re.mailto.test(i2) ? i2.match(n.re.mailto)[0].length : 0;
    }
  }
}, IT = "a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]", DT = "biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф".split("|");
function xT(t2) {
  t2.__index__ = -1, t2.__text_cache__ = "";
}
function LT(t2) {
  return function(e2, n) {
    const i2 = e2.slice(n);
    return t2.test(i2) ? i2.match(t2)[0].length : 0;
  };
}
function tu() {
  return function(t2, e2) {
    e2.normalize(t2);
  };
}
function fr(t2) {
  const e2 = t2.re = RT(t2.__opts__), n = t2.__tlds__.slice();
  t2.onCompile(), t2.__tlds_replaced__ || n.push(IT), n.push(e2.src_xn), e2.src_tlds = n.join("|");
  function i2(o2) {
    return o2.replace("%TLDS%", e2.src_tlds);
  }
  e2.email_fuzzy = RegExp(i2(e2.tpl_email_fuzzy), "i"), e2.link_fuzzy = RegExp(i2(e2.tpl_link_fuzzy), "i"), e2.link_no_ip_fuzzy = RegExp(i2(e2.tpl_link_no_ip_fuzzy), "i"), e2.host_fuzzy_test = RegExp(i2(e2.tpl_host_fuzzy_test), "i");
  const r2 = [];
  t2.__compiled__ = {};
  function a2(o2, l2) {
    throw new Error('(LinkifyIt) Invalid schema "' + o2 + '": ' + l2);
  }
  Object.keys(t2.__schemas__).forEach(function(o2) {
    const l2 = t2.__schemas__[o2];
    if (l2 === null)
      return;
    const u2 = { validate: null, link: null };
    if (t2.__compiled__[o2] = u2, NT(l2)) {
      vT(l2.validate) ? u2.validate = LT(l2.validate) : eu(l2.validate) ? u2.validate = l2.validate : a2(o2, l2), eu(l2.normalize) ? u2.normalize = l2.normalize : l2.normalize ? a2(o2, l2) : u2.normalize = tu();
      return;
    }
    if (CT(l2)) {
      r2.push(o2);
      return;
    }
    a2(o2, l2);
  }), r2.forEach(function(o2) {
    t2.__compiled__[t2.__schemas__[o2]] && (t2.__compiled__[o2].validate = t2.__compiled__[t2.__schemas__[o2]].validate, t2.__compiled__[o2].normalize = t2.__compiled__[t2.__schemas__[o2]].normalize);
  }), t2.__compiled__[""] = { validate: null, normalize: tu() };
  const s2 = Object.keys(t2.__compiled__).filter(function(o2) {
    return o2.length > 0 && t2.__compiled__[o2];
  }).map(OT).join("|");
  t2.re.schema_test = RegExp("(^|(?!_)(?:[><｜]|" + e2.src_ZPCc + "))(" + s2 + ")", "i"), t2.re.schema_search = RegExp("(^|(?!_)(?:[><｜]|" + e2.src_ZPCc + "))(" + s2 + ")", "ig"), t2.re.schema_at_start = RegExp("^" + t2.re.schema_search.source, "i"), t2.re.pretest = RegExp(
    "(" + t2.re.schema_test.source + ")|(" + t2.re.host_fuzzy_test.source + ")|@",
    "i"
  ), xT(t2);
}
function MT(t2, e2) {
  const n = t2.__index__, i2 = t2.__last_index__, r2 = t2.__text_cache__.slice(n, i2);
  this.schema = t2.__schema__.toLowerCase(), this.index = n + e2, this.lastIndex = i2 + e2, this.raw = r2, this.text = r2, this.url = r2;
}
function pl(t2, e2) {
  const n = new MT(t2, e2);
  return t2.__compiled__[n.schema].normalize(n, t2), n;
}
function ct$1(t2, e2) {
  if (!(this instanceof ct$1))
    return new ct$1(t2, e2);
  e2 || AT(t2) && (e2 = t2, t2 = {}), this.__opts__ = dl({}, a0, e2), this.__index__ = -1, this.__last_index__ = -1, this.__schema__ = "", this.__text_cache__ = "", this.__schemas__ = dl({}, yT, t2), this.__compiled__ = {}, this.__tlds__ = DT, this.__tlds_replaced__ = false, this.re = {}, fr(this);
}
ct$1.prototype.add = function(e2, n) {
  return this.__schemas__[e2] = n, fr(this), this;
};
ct$1.prototype.set = function(e2) {
  return this.__opts__ = dl(this.__opts__, e2), this;
};
ct$1.prototype.test = function(e2) {
  if (this.__text_cache__ = e2, this.__index__ = -1, !e2.length)
    return false;
  let n, i2, r2, a2, s2, o2, l2, u2, _;
  if (this.re.schema_test.test(e2)) {
    for (l2 = this.re.schema_search, l2.lastIndex = 0; (n = l2.exec(e2)) !== null; )
      if (a2 = this.testSchemaAt(e2, n[2], l2.lastIndex), a2) {
        this.__schema__ = n[2], this.__index__ = n.index + n[1].length, this.__last_index__ = n.index + n[0].length + a2;
        break;
      }
  }
  return this.__opts__.fuzzyLink && this.__compiled__["http:"] && (u2 = e2.search(this.re.host_fuzzy_test), u2 >= 0 && (this.__index__ < 0 || u2 < this.__index__) && (i2 = e2.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null && (s2 = i2.index + i2[1].length, (this.__index__ < 0 || s2 < this.__index__) && (this.__schema__ = "", this.__index__ = s2, this.__last_index__ = i2.index + i2[0].length))), this.__opts__.fuzzyEmail && this.__compiled__["mailto:"] && (_ = e2.indexOf("@"), _ >= 0 && (r2 = e2.match(this.re.email_fuzzy)) !== null && (s2 = r2.index + r2[1].length, o2 = r2.index + r2[0].length, (this.__index__ < 0 || s2 < this.__index__ || s2 === this.__index__ && o2 > this.__last_index__) && (this.__schema__ = "mailto:", this.__index__ = s2, this.__last_index__ = o2))), this.__index__ >= 0;
};
ct$1.prototype.pretest = function(e2) {
  return this.re.pretest.test(e2);
};
ct$1.prototype.testSchemaAt = function(e2, n, i2) {
  return this.__compiled__[n.toLowerCase()] ? this.__compiled__[n.toLowerCase()].validate(e2, i2, this) : 0;
};
ct$1.prototype.match = function(e2) {
  const n = [];
  let i2 = 0;
  this.__index__ >= 0 && this.__text_cache__ === e2 && (n.push(pl(this, i2)), i2 = this.__last_index__);
  let r2 = i2 ? e2.slice(i2) : e2;
  for (; this.test(r2); )
    n.push(pl(this, i2)), r2 = r2.slice(this.__last_index__), i2 += this.__last_index__;
  return n.length ? n : null;
};
ct$1.prototype.matchAtStart = function(e2) {
  if (this.__text_cache__ = e2, this.__index__ = -1, !e2.length)
    return null;
  const n = this.re.schema_at_start.exec(e2);
  if (!n)
    return null;
  const i2 = this.testSchemaAt(e2, n[2], n[0].length);
  return i2 ? (this.__schema__ = n[2], this.__index__ = n.index + n[1].length, this.__last_index__ = n.index + n[0].length + i2, pl(this, 0)) : null;
};
ct$1.prototype.tlds = function(e2, n) {
  return e2 = Array.isArray(e2) ? e2 : [e2], n ? (this.__tlds__ = this.__tlds__.concat(e2).sort().filter(function(i2, r2, a2) {
    return i2 !== a2[r2 - 1];
  }).reverse(), fr(this), this) : (this.__tlds__ = e2.slice(), this.__tlds_replaced__ = true, fr(this), this);
};
ct$1.prototype.normalize = function(e2) {
  e2.schema || (e2.url = "http://" + e2.url), e2.schema === "mailto:" && !/^mailto:/i.test(e2.url) && (e2.url = "mailto:" + e2.url);
};
ct$1.prototype.onCompile = function() {
};
const gn$1 = 2147483647, It$1 = 36, Ul = 1, zn = 26, wT = 38, kT = 700, i0 = 72, o0 = 128, s0 = "-", PT = /^xn--/, FT = /[^\0-\x7F]/, UT = /[\x2E\u3002\uFF0E\uFF61]/g, BT = {
  overflow: "Overflow: input needs wider integers to process",
  "not-basic": "Illegal input >= 0x80 (not a basic code point)",
  "invalid-input": "Invalid input"
}, Kr = It$1 - Ul, Dt = Math.floor, Qr = String.fromCharCode;
function Wt$1(t2) {
  throw new RangeError(BT[t2]);
}
function GT(t2, e2) {
  const n = [];
  let i2 = t2.length;
  for (; i2--; )
    n[i2] = e2(t2[i2]);
  return n;
}
function l0(t2, e2) {
  const n = t2.split("@");
  let i2 = "";
  n.length > 1 && (i2 = n[0] + "@", t2 = n[1]), t2 = t2.replace(UT, ".");
  const r2 = t2.split("."), a2 = GT(r2, e2).join(".");
  return i2 + a2;
}
function c0(t2) {
  const e2 = [];
  let n = 0;
  const i2 = t2.length;
  for (; n < i2; ) {
    const r2 = t2.charCodeAt(n++);
    if (r2 >= 55296 && r2 <= 56319 && n < i2) {
      const a2 = t2.charCodeAt(n++);
      (a2 & 64512) == 56320 ? e2.push(((r2 & 1023) << 10) + (a2 & 1023) + 65536) : (e2.push(r2), n--);
    } else
      e2.push(r2);
  }
  return e2;
}
const YT = (t2) => String.fromCodePoint(...t2), qT = function(t2) {
  return t2 >= 48 && t2 < 58 ? 26 + (t2 - 48) : t2 >= 65 && t2 < 91 ? t2 - 65 : t2 >= 97 && t2 < 123 ? t2 - 97 : It$1;
}, nu = function(t2, e2) {
  return t2 + 22 + 75 * (t2 < 26) - ((e2 != 0) << 5);
}, u0 = function(t2, e2, n) {
  let i2 = 0;
  for (t2 = n ? Dt(t2 / kT) : t2 >> 1, t2 += Dt(t2 / e2); t2 > Kr * zn >> 1; i2 += It$1)
    t2 = Dt(t2 / Kr);
  return Dt(i2 + (Kr + 1) * t2 / (t2 + wT));
}, _0 = function(t2) {
  const e2 = [], n = t2.length;
  let i2 = 0, r2 = o0, a2 = i0, s2 = t2.lastIndexOf(s0);
  s2 < 0 && (s2 = 0);
  for (let o2 = 0; o2 < s2; ++o2)
    t2.charCodeAt(o2) >= 128 && Wt$1("not-basic"), e2.push(t2.charCodeAt(o2));
  for (let o2 = s2 > 0 ? s2 + 1 : 0; o2 < n; ) {
    const l2 = i2;
    for (let _ = 1, d2 = It$1; ; d2 += It$1) {
      o2 >= n && Wt$1("invalid-input");
      const f2 = qT(t2.charCodeAt(o2++));
      f2 >= It$1 && Wt$1("invalid-input"), f2 > Dt((gn$1 - i2) / _) && Wt$1("overflow"), i2 += f2 * _;
      const b = d2 <= a2 ? Ul : d2 >= a2 + zn ? zn : d2 - a2;
      if (f2 < b)
        break;
      const c2 = It$1 - b;
      _ > Dt(gn$1 / c2) && Wt$1("overflow"), _ *= c2;
    }
    const u2 = e2.length + 1;
    a2 = u0(i2 - l2, u2, l2 == 0), Dt(i2 / u2) > gn$1 - r2 && Wt$1("overflow"), r2 += Dt(i2 / u2), i2 %= u2, e2.splice(i2++, 0, r2);
  }
  return String.fromCodePoint(...e2);
}, d0 = function(t2) {
  const e2 = [];
  t2 = c0(t2);
  const n = t2.length;
  let i2 = o0, r2 = 0, a2 = i0;
  for (const l2 of t2)
    l2 < 128 && e2.push(Qr(l2));
  const s2 = e2.length;
  let o2 = s2;
  for (s2 && e2.push(s0); o2 < n; ) {
    let l2 = gn$1;
    for (const _ of t2)
      _ >= i2 && _ < l2 && (l2 = _);
    const u2 = o2 + 1;
    l2 - i2 > Dt((gn$1 - r2) / u2) && Wt$1("overflow"), r2 += (l2 - i2) * u2, i2 = l2;
    for (const _ of t2)
      if (_ < i2 && ++r2 > gn$1 && Wt$1("overflow"), _ === i2) {
        let d2 = r2;
        for (let f2 = It$1; ; f2 += It$1) {
          const b = f2 <= a2 ? Ul : f2 >= a2 + zn ? zn : f2 - a2;
          if (d2 < b)
            break;
          const c2 = d2 - b, E2 = It$1 - b;
          e2.push(
            Qr(nu(b + c2 % E2, 0))
          ), d2 = Dt(c2 / E2);
        }
        e2.push(Qr(nu(d2, 0))), a2 = u0(r2, u2, o2 === s2), r2 = 0, ++o2;
      }
    ++r2, ++i2;
  }
  return e2.join("");
}, VT = function(t2) {
  return l0(t2, function(e2) {
    return PT.test(e2) ? _0(e2.slice(4).toLowerCase()) : e2;
  });
}, HT = function(t2) {
  return l0(t2, function(e2) {
    return FT.test(e2) ? "xn--" + d0(e2) : e2;
  });
}, p0 = {
  /**
   * A string representing the current Punycode.js version number.
   * @memberOf punycode
   * @type String
   */
  version: "2.3.1",
  /**
   * An object of methods to convert from JavaScript's internal character
   * representation (UCS-2) to Unicode code points, and back.
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode
   * @type Object
   */
  ucs2: {
    decode: c0,
    encode: YT
  },
  decode: _0,
  encode: d0,
  toASCII: HT,
  toUnicode: VT
}, zT = {
  options: {
    // Enable HTML tags in source
    html: false,
    // Use '/' to close single tags (<br />)
    xhtmlOut: false,
    // Convert '\n' in paragraphs into <br>
    breaks: false,
    // CSS language prefix for fenced blocks
    langPrefix: "language-",
    // autoconvert URL-like texts to links
    linkify: false,
    // Enable some language-neutral replacements + quotes beautification
    typographer: false,
    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: "“”‘’",
    /* “”‘’ */
    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,
    // Internal protection, recursion limit
    maxNesting: 100
  },
  components: {
    core: {},
    block: {},
    inline: {}
  }
}, $T = {
  options: {
    // Enable HTML tags in source
    html: false,
    // Use '/' to close single tags (<br />)
    xhtmlOut: false,
    // Convert '\n' in paragraphs into <br>
    breaks: false,
    // CSS language prefix for fenced blocks
    langPrefix: "language-",
    // autoconvert URL-like texts to links
    linkify: false,
    // Enable some language-neutral replacements + quotes beautification
    typographer: false,
    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: "“”‘’",
    /* “”‘’ */
    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,
    // Internal protection, recursion limit
    maxNesting: 20
  },
  components: {
    core: {
      rules: [
        "normalize",
        "block",
        "inline",
        "text_join"
      ]
    },
    block: {
      rules: [
        "paragraph"
      ]
    },
    inline: {
      rules: [
        "text"
      ],
      rules2: [
        "balance_pairs",
        "fragments_join"
      ]
    }
  }
}, WT = {
  options: {
    // Enable HTML tags in source
    html: true,
    // Use '/' to close single tags (<br />)
    xhtmlOut: true,
    // Convert '\n' in paragraphs into <br>
    breaks: false,
    // CSS language prefix for fenced blocks
    langPrefix: "language-",
    // autoconvert URL-like texts to links
    linkify: false,
    // Enable some language-neutral replacements + quotes beautification
    typographer: false,
    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: "“”‘’",
    /* “”‘’ */
    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,
    // Internal protection, recursion limit
    maxNesting: 20
  },
  components: {
    core: {
      rules: [
        "normalize",
        "block",
        "inline",
        "text_join"
      ]
    },
    block: {
      rules: [
        "blockquote",
        "code",
        "fence",
        "heading",
        "hr",
        "html_block",
        "lheading",
        "list",
        "reference",
        "paragraph"
      ]
    },
    inline: {
      rules: [
        "autolink",
        "backticks",
        "emphasis",
        "entity",
        "escape",
        "html_inline",
        "image",
        "link",
        "newline",
        "text"
      ],
      rules2: [
        "balance_pairs",
        "emphasis",
        "fragments_join"
      ]
    }
  }
}, KT = {
  default: zT,
  zero: $T,
  commonmark: WT
}, QT = /^(vbscript|javascript|file|data):/, XT = /^data:image\/(gif|png|jpeg|webp);/;
function ZT(t2) {
  const e2 = t2.trim().toLowerCase();
  return QT.test(e2) ? XT.test(e2) : true;
}
const m0 = ["http:", "https:", "mailto:"];
function JT(t2) {
  const e2 = Ll(t2, true);
  if (e2.hostname && (!e2.protocol || m0.indexOf(e2.protocol) >= 0))
    try {
      e2.hostname = p0.toASCII(e2.hostname);
    } catch {
    }
  return Wn(xl(e2));
}
function jT(t2) {
  const e2 = Ll(t2, true);
  if (e2.hostname && (!e2.protocol || m0.indexOf(e2.protocol) >= 0))
    try {
      e2.hostname = p0.toUnicode(e2.hostname);
    } catch {
    }
  return Tn(xl(e2), Tn.defaultChars + "%");
}
function gt$1(t2, e2) {
  if (!(this instanceof gt$1))
    return new gt$1(t2, e2);
  e2 || wl(t2) || (e2 = t2 || {}, t2 = "default"), this.inline = new Qn(), this.block = new Ar(), this.core = new Pl(), this.renderer = new Nn(), this.linkify = new ct$1(), this.validateLink = ZT, this.normalizeLink = JT, this.normalizeLinkText = jT, this.utils = tb, this.helpers = vr({}, ib), this.options = {}, this.configure(t2), e2 && this.set(e2);
}
gt$1.prototype.set = function(t2) {
  return vr(this.options, t2), this;
};
gt$1.prototype.configure = function(t2) {
  const e2 = this;
  if (wl(t2)) {
    const n = t2;
    if (t2 = KT[n], !t2)
      throw new Error('Wrong `markdown-it` preset "' + n + '", check name');
  }
  if (!t2)
    throw new Error("Wrong `markdown-it` preset, can't be empty");
  return t2.options && e2.set(t2.options), t2.components && Object.keys(t2.components).forEach(function(n) {
    t2.components[n].rules && e2[n].ruler.enableOnly(t2.components[n].rules), t2.components[n].rules2 && e2[n].ruler2.enableOnly(t2.components[n].rules2);
  }), this;
};
gt$1.prototype.enable = function(t2, e2) {
  let n = [];
  Array.isArray(t2) || (t2 = [t2]), ["core", "block", "inline"].forEach(function(r2) {
    n = n.concat(this[r2].ruler.enable(t2, true));
  }, this), n = n.concat(this.inline.ruler2.enable(t2, true));
  const i2 = t2.filter(function(r2) {
    return n.indexOf(r2) < 0;
  });
  if (i2.length && !e2)
    throw new Error("MarkdownIt. Failed to enable unknown rule(s): " + i2);
  return this;
};
gt$1.prototype.disable = function(t2, e2) {
  let n = [];
  Array.isArray(t2) || (t2 = [t2]), ["core", "block", "inline"].forEach(function(r2) {
    n = n.concat(this[r2].ruler.disable(t2, true));
  }, this), n = n.concat(this.inline.ruler2.disable(t2, true));
  const i2 = t2.filter(function(r2) {
    return n.indexOf(r2) < 0;
  });
  if (i2.length && !e2)
    throw new Error("MarkdownIt. Failed to disable unknown rule(s): " + i2);
  return this;
};
gt$1.prototype.use = function(t2) {
  const e2 = [this].concat(Array.prototype.slice.call(arguments, 1));
  return t2.apply(t2, e2), this;
};
gt$1.prototype.parse = function(t2, e2) {
  if (typeof t2 != "string")
    throw new Error("Input data should be a String");
  const n = new this.core.State(t2, this, e2);
  return this.core.process(n), n.tokens;
};
gt$1.prototype.render = function(t2, e2) {
  return e2 = e2 || {}, this.renderer.render(this.parse(t2, e2), this.options, e2);
};
gt$1.prototype.parseInline = function(t2, e2) {
  const n = new this.core.State(t2, this, e2);
  return n.inlineMode = true, this.core.process(n), n.tokens;
};
gt$1.prototype.renderInline = function(t2, e2) {
  return e2 = e2 || {}, this.renderer.render(this.parseInline(t2, e2), this.options, e2);
};
function E0(t2) {
  return t2 && t2.__esModule && Object.prototype.hasOwnProperty.call(t2, "default") ? t2.default : t2;
}
var Xr, ru;
function en$1() {
  if (ru)
    return Xr;
  ru = 1;
  function t2(e2, n, i2) {
    var r2 = "KaTeX parse error: " + e2;
    if (n !== void 0 && i2 !== void 0) {
      r2 += " at position " + i2 + ": ";
      var a2 = n._input;
      a2 = a2.slice(0, i2) + "̲" + a2.slice(i2);
      var s2 = Math.max(0, i2 - 15), o2 = i2 + 15;
      r2 += a2.slice(s2, o2);
    }
    var l2 = new Error(r2);
    return l2.name = "ParseError", l2.__proto__ = t2.prototype, l2.position = i2, l2;
  }
  return t2.prototype.__proto__ = Error.prototype, Xr = t2, Xr;
}
var Zr, au;
function g0() {
  if (au)
    return Zr;
  au = 1;
  function t2(n, i2) {
    return n === void 0 ? i2 : n;
  }
  function e2(n) {
    n = n || {}, this.displayMode = t2(n.displayMode, false), this.throwOnError = t2(n.throwOnError, true), this.errorColor = t2(n.errorColor, "#cc0000");
  }
  return Zr = e2, Zr;
}
var Jr, iu;
function Ir() {
  if (iu)
    return Jr;
  iu = 1;
  function t2(S, p2, m2, R2) {
    this.id = S, this.size = p2, this.cramped = R2, this.sizeMultiplier = m2;
  }
  t2.prototype.sup = function() {
    return d2[f2[this.id]];
  }, t2.prototype.sub = function() {
    return d2[b[this.id]];
  }, t2.prototype.fracNum = function() {
    return d2[c2[this.id]];
  }, t2.prototype.fracDen = function() {
    return d2[E2[this.id]];
  }, t2.prototype.cramp = function() {
    return d2[g2[this.id]];
  }, t2.prototype.cls = function() {
    return u2[this.size] + (this.cramped ? " cramped" : " uncramped");
  }, t2.prototype.reset = function() {
    return _[this.size];
  };
  var e2 = 0, n = 1, i2 = 2, r2 = 3, a2 = 4, s2 = 5, o2 = 6, l2 = 7, u2 = [
    "displaystyle textstyle",
    "textstyle",
    "scriptstyle",
    "scriptscriptstyle"
  ], _ = [
    "reset-textstyle",
    "reset-textstyle",
    "reset-scriptstyle",
    "reset-scriptscriptstyle"
  ], d2 = [
    new t2(e2, 0, 1, false),
    new t2(n, 0, 1, true),
    new t2(i2, 1, 1, false),
    new t2(r2, 1, 1, true),
    new t2(a2, 2, 0.7, false),
    new t2(s2, 2, 0.7, true),
    new t2(o2, 3, 0.5, false),
    new t2(l2, 3, 0.5, true)
  ], f2 = [a2, s2, a2, s2, o2, l2, o2, l2], b = [s2, s2, s2, s2, l2, l2, l2, l2], c2 = [i2, r2, a2, s2, o2, l2, o2, l2], E2 = [r2, r2, s2, s2, l2, l2, l2, l2], g2 = [n, n, r2, r2, s2, s2, l2, l2];
  return Jr = {
    DISPLAY: d2[e2],
    TEXT: d2[i2],
    SCRIPT: d2[a2],
    SCRIPTSCRIPT: d2[o2]
  }, Jr;
}
var jr, ou;
function Ht$1() {
  if (ou)
    return jr;
  ou = 1;
  var t2 = Array.prototype.indexOf, e2 = function(b, c2) {
    if (b == null)
      return -1;
    if (t2 && b.indexOf === t2)
      return b.indexOf(c2);
    for (var E2 = 0, g2 = b.length; E2 < g2; E2++)
      if (b[E2] === c2)
        return E2;
    return -1;
  }, n = function(b, c2) {
    return e2(b, c2) !== -1;
  }, i2 = function(b, c2) {
    return b === void 0 ? c2 : b;
  }, r2 = /([A-Z])/g, a2 = function(b) {
    return b.replace(r2, "-$1").toLowerCase();
  }, s2 = {
    "&": "&amp;",
    ">": "&gt;",
    "<": "&lt;",
    '"': "&quot;",
    "'": "&#x27;"
  }, o2 = /[&><"']/g;
  function l2(b) {
    return s2[b];
  }
  function u2(b) {
    return ("" + b).replace(o2, l2);
  }
  var _;
  if (typeof document < "u") {
    var d2 = document.createElement("span");
    "textContent" in d2 ? _ = function(b, c2) {
      b.textContent = c2;
    } : _ = function(b, c2) {
      b.innerText = c2;
    };
  }
  function f2(b) {
    _(b, "");
  }
  return jr = {
    contains: n,
    deflt: i2,
    escape: u2,
    hyphenate: a2,
    indexOf: e2,
    setTextContent: _,
    clearNode: f2
  }, jr;
}
var ea, su;
function f0() {
  if (su)
    return ea;
  su = 1;
  var t2 = Ht$1(), e2 = function(a2) {
    a2 = a2.slice();
    for (var s2 = a2.length - 1; s2 >= 0; s2--)
      a2[s2] || a2.splice(s2, 1);
    return a2.join(" ");
  };
  function n(a2, s2, o2, l2, u2, _) {
    this.classes = a2 || [], this.children = s2 || [], this.height = o2 || 0, this.depth = l2 || 0, this.maxFontSize = u2 || 0, this.style = _ || {}, this.attributes = {};
  }
  n.prototype.setAttribute = function(a2, s2) {
    this.attributes[a2] = s2;
  }, n.prototype.toNode = function() {
    var a2 = document.createElement("span");
    a2.className = e2(this.classes);
    for (var s2 in this.style)
      Object.prototype.hasOwnProperty.call(this.style, s2) && (a2.style[s2] = this.style[s2]);
    for (var o2 in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, o2) && a2.setAttribute(o2, this.attributes[o2]);
    for (var l2 = 0; l2 < this.children.length; l2++)
      a2.appendChild(this.children[l2].toNode());
    return a2;
  }, n.prototype.toMarkup = function() {
    var a2 = "<span";
    this.classes.length && (a2 += ' class="', a2 += t2.escape(e2(this.classes)), a2 += '"');
    var s2 = "";
    for (var o2 in this.style)
      this.style.hasOwnProperty(o2) && (s2 += t2.hyphenate(o2) + ":" + this.style[o2] + ";");
    s2 && (a2 += ' style="' + t2.escape(s2) + '"');
    for (var l2 in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, l2) && (a2 += " " + l2 + '="', a2 += t2.escape(this.attributes[l2]), a2 += '"');
    a2 += ">";
    for (var u2 = 0; u2 < this.children.length; u2++)
      a2 += this.children[u2].toMarkup();
    return a2 += "</span>", a2;
  };
  function i2(a2, s2, o2, l2) {
    this.children = a2 || [], this.height = s2 || 0, this.depth = o2 || 0, this.maxFontSize = l2 || 0;
  }
  i2.prototype.toNode = function() {
    for (var a2 = document.createDocumentFragment(), s2 = 0; s2 < this.children.length; s2++)
      a2.appendChild(this.children[s2].toNode());
    return a2;
  }, i2.prototype.toMarkup = function() {
    for (var a2 = "", s2 = 0; s2 < this.children.length; s2++)
      a2 += this.children[s2].toMarkup();
    return a2;
  };
  function r2(a2, s2, o2, l2, u2, _, d2) {
    this.value = a2 || "", this.height = s2 || 0, this.depth = o2 || 0, this.italic = l2 || 0, this.skew = u2 || 0, this.classes = _ || [], this.style = d2 || {}, this.maxFontSize = 0;
  }
  return r2.prototype.toNode = function() {
    var a2 = document.createTextNode(this.value), s2 = null;
    this.italic > 0 && (s2 = document.createElement("span"), s2.style.marginRight = this.italic + "em"), this.classes.length > 0 && (s2 = s2 || document.createElement("span"), s2.className = e2(this.classes));
    for (var o2 in this.style)
      this.style.hasOwnProperty(o2) && (s2 = s2 || document.createElement("span"), s2.style[o2] = this.style[o2]);
    return s2 ? (s2.appendChild(a2), s2) : a2;
  }, r2.prototype.toMarkup = function() {
    var a2 = false, s2 = "<span";
    this.classes.length && (a2 = true, s2 += ' class="', s2 += t2.escape(e2(this.classes)), s2 += '"');
    var o2 = "";
    this.italic > 0 && (o2 += "margin-right:" + this.italic + "em;");
    for (var l2 in this.style)
      this.style.hasOwnProperty(l2) && (o2 += t2.hyphenate(l2) + ":" + this.style[l2] + ";");
    o2 && (a2 = true, s2 += ' style="' + t2.escape(o2) + '"');
    var u2 = t2.escape(this.value);
    return a2 ? (s2 += ">", s2 += u2, s2 += "</span>", s2) : u2;
  }, ea = {
    span: n,
    documentFragment: i2,
    symbolNode: r2
  }, ea;
}
var ta, lu;
function eh() {
  return lu || (lu = 1, ta = {
    "AMS-Regular": {
      65: [0, 0.68889, 0, 0],
      66: [0, 0.68889, 0, 0],
      67: [0, 0.68889, 0, 0],
      68: [0, 0.68889, 0, 0],
      69: [0, 0.68889, 0, 0],
      70: [0, 0.68889, 0, 0],
      71: [0, 0.68889, 0, 0],
      72: [0, 0.68889, 0, 0],
      73: [0, 0.68889, 0, 0],
      74: [0.16667, 0.68889, 0, 0],
      75: [0, 0.68889, 0, 0],
      76: [0, 0.68889, 0, 0],
      77: [0, 0.68889, 0, 0],
      78: [0, 0.68889, 0, 0],
      79: [0.16667, 0.68889, 0, 0],
      80: [0, 0.68889, 0, 0],
      81: [0.16667, 0.68889, 0, 0],
      82: [0, 0.68889, 0, 0],
      83: [0, 0.68889, 0, 0],
      84: [0, 0.68889, 0, 0],
      85: [0, 0.68889, 0, 0],
      86: [0, 0.68889, 0, 0],
      87: [0, 0.68889, 0, 0],
      88: [0, 0.68889, 0, 0],
      89: [0, 0.68889, 0, 0],
      90: [0, 0.68889, 0, 0],
      107: [0, 0.68889, 0, 0],
      165: [0, 0.675, 0.025, 0],
      174: [0.15559, 0.69224, 0, 0],
      240: [0, 0.68889, 0, 0],
      295: [0, 0.68889, 0, 0],
      710: [0, 0.825, 0, 0],
      732: [0, 0.9, 0, 0],
      770: [0, 0.825, 0, 0],
      771: [0, 0.9, 0, 0],
      989: [0.08167, 0.58167, 0, 0],
      1008: [0, 0.43056, 0.04028, 0],
      8245: [0, 0.54986, 0, 0],
      8463: [0, 0.68889, 0, 0],
      8487: [0, 0.68889, 0, 0],
      8498: [0, 0.68889, 0, 0],
      8502: [0, 0.68889, 0, 0],
      8503: [0, 0.68889, 0, 0],
      8504: [0, 0.68889, 0, 0],
      8513: [0, 0.68889, 0, 0],
      8592: [-0.03598, 0.46402, 0, 0],
      8594: [-0.03598, 0.46402, 0, 0],
      8602: [-0.13313, 0.36687, 0, 0],
      8603: [-0.13313, 0.36687, 0, 0],
      8606: [0.01354, 0.52239, 0, 0],
      8608: [0.01354, 0.52239, 0, 0],
      8610: [0.01354, 0.52239, 0, 0],
      8611: [0.01354, 0.52239, 0, 0],
      8619: [0, 0.54986, 0, 0],
      8620: [0, 0.54986, 0, 0],
      8621: [-0.13313, 0.37788, 0, 0],
      8622: [-0.13313, 0.36687, 0, 0],
      8624: [0, 0.69224, 0, 0],
      8625: [0, 0.69224, 0, 0],
      8630: [0, 0.43056, 0, 0],
      8631: [0, 0.43056, 0, 0],
      8634: [0.08198, 0.58198, 0, 0],
      8635: [0.08198, 0.58198, 0, 0],
      8638: [0.19444, 0.69224, 0, 0],
      8639: [0.19444, 0.69224, 0, 0],
      8642: [0.19444, 0.69224, 0, 0],
      8643: [0.19444, 0.69224, 0, 0],
      8644: [0.1808, 0.675, 0, 0],
      8646: [0.1808, 0.675, 0, 0],
      8647: [0.1808, 0.675, 0, 0],
      8648: [0.19444, 0.69224, 0, 0],
      8649: [0.1808, 0.675, 0, 0],
      8650: [0.19444, 0.69224, 0, 0],
      8651: [0.01354, 0.52239, 0, 0],
      8652: [0.01354, 0.52239, 0, 0],
      8653: [-0.13313, 0.36687, 0, 0],
      8654: [-0.13313, 0.36687, 0, 0],
      8655: [-0.13313, 0.36687, 0, 0],
      8666: [0.13667, 0.63667, 0, 0],
      8667: [0.13667, 0.63667, 0, 0],
      8669: [-0.13313, 0.37788, 0, 0],
      8672: [-0.064, 0.437, 0, 0],
      8674: [-0.064, 0.437, 0, 0],
      8705: [0, 0.825, 0, 0],
      8708: [0, 0.68889, 0, 0],
      8709: [0.08167, 0.58167, 0, 0],
      8717: [0, 0.43056, 0, 0],
      8722: [-0.03598, 0.46402, 0, 0],
      8724: [0.08198, 0.69224, 0, 0],
      8726: [0.08167, 0.58167, 0, 0],
      8733: [0, 0.69224, 0, 0],
      8736: [0, 0.69224, 0, 0],
      8737: [0, 0.69224, 0, 0],
      8738: [0.03517, 0.52239, 0, 0],
      8739: [0.08167, 0.58167, 0, 0],
      8740: [0.25142, 0.74111, 0, 0],
      8741: [0.08167, 0.58167, 0, 0],
      8742: [0.25142, 0.74111, 0, 0],
      8756: [0, 0.69224, 0, 0],
      8757: [0, 0.69224, 0, 0],
      8764: [-0.13313, 0.36687, 0, 0],
      8765: [-0.13313, 0.37788, 0, 0],
      8769: [-0.13313, 0.36687, 0, 0],
      8770: [-0.03625, 0.46375, 0, 0],
      8774: [0.30274, 0.79383, 0, 0],
      8776: [-0.01688, 0.48312, 0, 0],
      8778: [0.08167, 0.58167, 0, 0],
      8782: [0.06062, 0.54986, 0, 0],
      8783: [0.06062, 0.54986, 0, 0],
      8785: [0.08198, 0.58198, 0, 0],
      8786: [0.08198, 0.58198, 0, 0],
      8787: [0.08198, 0.58198, 0, 0],
      8790: [0, 0.69224, 0, 0],
      8791: [0.22958, 0.72958, 0, 0],
      8796: [0.08198, 0.91667, 0, 0],
      8806: [0.25583, 0.75583, 0, 0],
      8807: [0.25583, 0.75583, 0, 0],
      8808: [0.25142, 0.75726, 0, 0],
      8809: [0.25142, 0.75726, 0, 0],
      8812: [0.25583, 0.75583, 0, 0],
      8814: [0.20576, 0.70576, 0, 0],
      8815: [0.20576, 0.70576, 0, 0],
      8816: [0.30274, 0.79383, 0, 0],
      8817: [0.30274, 0.79383, 0, 0],
      8818: [0.22958, 0.72958, 0, 0],
      8819: [0.22958, 0.72958, 0, 0],
      8822: [0.1808, 0.675, 0, 0],
      8823: [0.1808, 0.675, 0, 0],
      8828: [0.13667, 0.63667, 0, 0],
      8829: [0.13667, 0.63667, 0, 0],
      8830: [0.22958, 0.72958, 0, 0],
      8831: [0.22958, 0.72958, 0, 0],
      8832: [0.20576, 0.70576, 0, 0],
      8833: [0.20576, 0.70576, 0, 0],
      8840: [0.30274, 0.79383, 0, 0],
      8841: [0.30274, 0.79383, 0, 0],
      8842: [0.13597, 0.63597, 0, 0],
      8843: [0.13597, 0.63597, 0, 0],
      8847: [0.03517, 0.54986, 0, 0],
      8848: [0.03517, 0.54986, 0, 0],
      8858: [0.08198, 0.58198, 0, 0],
      8859: [0.08198, 0.58198, 0, 0],
      8861: [0.08198, 0.58198, 0, 0],
      8862: [0, 0.675, 0, 0],
      8863: [0, 0.675, 0, 0],
      8864: [0, 0.675, 0, 0],
      8865: [0, 0.675, 0, 0],
      8872: [0, 0.69224, 0, 0],
      8873: [0, 0.69224, 0, 0],
      8874: [0, 0.69224, 0, 0],
      8876: [0, 0.68889, 0, 0],
      8877: [0, 0.68889, 0, 0],
      8878: [0, 0.68889, 0, 0],
      8879: [0, 0.68889, 0, 0],
      8882: [0.03517, 0.54986, 0, 0],
      8883: [0.03517, 0.54986, 0, 0],
      8884: [0.13667, 0.63667, 0, 0],
      8885: [0.13667, 0.63667, 0, 0],
      8888: [0, 0.54986, 0, 0],
      8890: [0.19444, 0.43056, 0, 0],
      8891: [0.19444, 0.69224, 0, 0],
      8892: [0.19444, 0.69224, 0, 0],
      8901: [0, 0.54986, 0, 0],
      8903: [0.08167, 0.58167, 0, 0],
      8905: [0.08167, 0.58167, 0, 0],
      8906: [0.08167, 0.58167, 0, 0],
      8907: [0, 0.69224, 0, 0],
      8908: [0, 0.69224, 0, 0],
      8909: [-0.03598, 0.46402, 0, 0],
      8910: [0, 0.54986, 0, 0],
      8911: [0, 0.54986, 0, 0],
      8912: [0.03517, 0.54986, 0, 0],
      8913: [0.03517, 0.54986, 0, 0],
      8914: [0, 0.54986, 0, 0],
      8915: [0, 0.54986, 0, 0],
      8916: [0, 0.69224, 0, 0],
      8918: [0.0391, 0.5391, 0, 0],
      8919: [0.0391, 0.5391, 0, 0],
      8920: [0.03517, 0.54986, 0, 0],
      8921: [0.03517, 0.54986, 0, 0],
      8922: [0.38569, 0.88569, 0, 0],
      8923: [0.38569, 0.88569, 0, 0],
      8926: [0.13667, 0.63667, 0, 0],
      8927: [0.13667, 0.63667, 0, 0],
      8928: [0.30274, 0.79383, 0, 0],
      8929: [0.30274, 0.79383, 0, 0],
      8934: [0.23222, 0.74111, 0, 0],
      8935: [0.23222, 0.74111, 0, 0],
      8936: [0.23222, 0.74111, 0, 0],
      8937: [0.23222, 0.74111, 0, 0],
      8938: [0.20576, 0.70576, 0, 0],
      8939: [0.20576, 0.70576, 0, 0],
      8940: [0.30274, 0.79383, 0, 0],
      8941: [0.30274, 0.79383, 0, 0],
      8994: [0.19444, 0.69224, 0, 0],
      8995: [0.19444, 0.69224, 0, 0],
      9416: [0.15559, 0.69224, 0, 0],
      9484: [0, 0.69224, 0, 0],
      9488: [0, 0.69224, 0, 0],
      9492: [0, 0.37788, 0, 0],
      9496: [0, 0.37788, 0, 0],
      9585: [0.19444, 0.68889, 0, 0],
      9586: [0.19444, 0.74111, 0, 0],
      9632: [0, 0.675, 0, 0],
      9633: [0, 0.675, 0, 0],
      9650: [0, 0.54986, 0, 0],
      9651: [0, 0.54986, 0, 0],
      9654: [0.03517, 0.54986, 0, 0],
      9660: [0, 0.54986, 0, 0],
      9661: [0, 0.54986, 0, 0],
      9664: [0.03517, 0.54986, 0, 0],
      9674: [0.11111, 0.69224, 0, 0],
      9733: [0.19444, 0.69224, 0, 0],
      10003: [0, 0.69224, 0, 0],
      10016: [0, 0.69224, 0, 0],
      10731: [0.11111, 0.69224, 0, 0],
      10846: [0.19444, 0.75583, 0, 0],
      10877: [0.13667, 0.63667, 0, 0],
      10878: [0.13667, 0.63667, 0, 0],
      10885: [0.25583, 0.75583, 0, 0],
      10886: [0.25583, 0.75583, 0, 0],
      10887: [0.13597, 0.63597, 0, 0],
      10888: [0.13597, 0.63597, 0, 0],
      10889: [0.26167, 0.75726, 0, 0],
      10890: [0.26167, 0.75726, 0, 0],
      10891: [0.48256, 0.98256, 0, 0],
      10892: [0.48256, 0.98256, 0, 0],
      10901: [0.13667, 0.63667, 0, 0],
      10902: [0.13667, 0.63667, 0, 0],
      10933: [0.25142, 0.75726, 0, 0],
      10934: [0.25142, 0.75726, 0, 0],
      10935: [0.26167, 0.75726, 0, 0],
      10936: [0.26167, 0.75726, 0, 0],
      10937: [0.26167, 0.75726, 0, 0],
      10938: [0.26167, 0.75726, 0, 0],
      10949: [0.25583, 0.75583, 0, 0],
      10950: [0.25583, 0.75583, 0, 0],
      10955: [0.28481, 0.79383, 0, 0],
      10956: [0.28481, 0.79383, 0, 0],
      57350: [0.08167, 0.58167, 0, 0],
      57351: [0.08167, 0.58167, 0, 0],
      57352: [0.08167, 0.58167, 0, 0],
      57353: [0, 0.43056, 0.04028, 0],
      57356: [0.25142, 0.75726, 0, 0],
      57357: [0.25142, 0.75726, 0, 0],
      57358: [0.41951, 0.91951, 0, 0],
      57359: [0.30274, 0.79383, 0, 0],
      57360: [0.30274, 0.79383, 0, 0],
      57361: [0.41951, 0.91951, 0, 0],
      57366: [0.25142, 0.75726, 0, 0],
      57367: [0.25142, 0.75726, 0, 0],
      57368: [0.25142, 0.75726, 0, 0],
      57369: [0.25142, 0.75726, 0, 0],
      57370: [0.13597, 0.63597, 0, 0],
      57371: [0.13597, 0.63597, 0, 0]
    },
    "Caligraphic-Regular": {
      48: [0, 0.43056, 0, 0],
      49: [0, 0.43056, 0, 0],
      50: [0, 0.43056, 0, 0],
      51: [0.19444, 0.43056, 0, 0],
      52: [0.19444, 0.43056, 0, 0],
      53: [0.19444, 0.43056, 0, 0],
      54: [0, 0.64444, 0, 0],
      55: [0.19444, 0.43056, 0, 0],
      56: [0, 0.64444, 0, 0],
      57: [0.19444, 0.43056, 0, 0],
      65: [0, 0.68333, 0, 0.19445],
      66: [0, 0.68333, 0.03041, 0.13889],
      67: [0, 0.68333, 0.05834, 0.13889],
      68: [0, 0.68333, 0.02778, 0.08334],
      69: [0, 0.68333, 0.08944, 0.11111],
      70: [0, 0.68333, 0.09931, 0.11111],
      71: [0.09722, 0.68333, 0.0593, 0.11111],
      72: [0, 0.68333, 965e-5, 0.11111],
      73: [0, 0.68333, 0.07382, 0],
      74: [0.09722, 0.68333, 0.18472, 0.16667],
      75: [0, 0.68333, 0.01445, 0.05556],
      76: [0, 0.68333, 0, 0.13889],
      77: [0, 0.68333, 0, 0.13889],
      78: [0, 0.68333, 0.14736, 0.08334],
      79: [0, 0.68333, 0.02778, 0.11111],
      80: [0, 0.68333, 0.08222, 0.08334],
      81: [0.09722, 0.68333, 0, 0.11111],
      82: [0, 0.68333, 0, 0.08334],
      83: [0, 0.68333, 0.075, 0.13889],
      84: [0, 0.68333, 0.25417, 0],
      85: [0, 0.68333, 0.09931, 0.08334],
      86: [0, 0.68333, 0.08222, 0],
      87: [0, 0.68333, 0.08222, 0.08334],
      88: [0, 0.68333, 0.14643, 0.13889],
      89: [0.09722, 0.68333, 0.08222, 0.08334],
      90: [0, 0.68333, 0.07944, 0.13889]
    },
    "Fraktur-Regular": {
      33: [0, 0.69141, 0, 0],
      34: [0, 0.69141, 0, 0],
      38: [0, 0.69141, 0, 0],
      39: [0, 0.69141, 0, 0],
      40: [0.24982, 0.74947, 0, 0],
      41: [0.24982, 0.74947, 0, 0],
      42: [0, 0.62119, 0, 0],
      43: [0.08319, 0.58283, 0, 0],
      44: [0, 0.10803, 0, 0],
      45: [0.08319, 0.58283, 0, 0],
      46: [0, 0.10803, 0, 0],
      47: [0.24982, 0.74947, 0, 0],
      48: [0, 0.47534, 0, 0],
      49: [0, 0.47534, 0, 0],
      50: [0, 0.47534, 0, 0],
      51: [0.18906, 0.47534, 0, 0],
      52: [0.18906, 0.47534, 0, 0],
      53: [0.18906, 0.47534, 0, 0],
      54: [0, 0.69141, 0, 0],
      55: [0.18906, 0.47534, 0, 0],
      56: [0, 0.69141, 0, 0],
      57: [0.18906, 0.47534, 0, 0],
      58: [0, 0.47534, 0, 0],
      59: [0.12604, 0.47534, 0, 0],
      61: [-0.13099, 0.36866, 0, 0],
      63: [0, 0.69141, 0, 0],
      65: [0, 0.69141, 0, 0],
      66: [0, 0.69141, 0, 0],
      67: [0, 0.69141, 0, 0],
      68: [0, 0.69141, 0, 0],
      69: [0, 0.69141, 0, 0],
      70: [0.12604, 0.69141, 0, 0],
      71: [0, 0.69141, 0, 0],
      72: [0.06302, 0.69141, 0, 0],
      73: [0, 0.69141, 0, 0],
      74: [0.12604, 0.69141, 0, 0],
      75: [0, 0.69141, 0, 0],
      76: [0, 0.69141, 0, 0],
      77: [0, 0.69141, 0, 0],
      78: [0, 0.69141, 0, 0],
      79: [0, 0.69141, 0, 0],
      80: [0.18906, 0.69141, 0, 0],
      81: [0.03781, 0.69141, 0, 0],
      82: [0, 0.69141, 0, 0],
      83: [0, 0.69141, 0, 0],
      84: [0, 0.69141, 0, 0],
      85: [0, 0.69141, 0, 0],
      86: [0, 0.69141, 0, 0],
      87: [0, 0.69141, 0, 0],
      88: [0, 0.69141, 0, 0],
      89: [0.18906, 0.69141, 0, 0],
      90: [0.12604, 0.69141, 0, 0],
      91: [0.24982, 0.74947, 0, 0],
      93: [0.24982, 0.74947, 0, 0],
      94: [0, 0.69141, 0, 0],
      97: [0, 0.47534, 0, 0],
      98: [0, 0.69141, 0, 0],
      99: [0, 0.47534, 0, 0],
      100: [0, 0.62119, 0, 0],
      101: [0, 0.47534, 0, 0],
      102: [0.18906, 0.69141, 0, 0],
      103: [0.18906, 0.47534, 0, 0],
      104: [0.18906, 0.69141, 0, 0],
      105: [0, 0.69141, 0, 0],
      106: [0, 0.69141, 0, 0],
      107: [0, 0.69141, 0, 0],
      108: [0, 0.69141, 0, 0],
      109: [0, 0.47534, 0, 0],
      110: [0, 0.47534, 0, 0],
      111: [0, 0.47534, 0, 0],
      112: [0.18906, 0.52396, 0, 0],
      113: [0.18906, 0.47534, 0, 0],
      114: [0, 0.47534, 0, 0],
      115: [0, 0.47534, 0, 0],
      116: [0, 0.62119, 0, 0],
      117: [0, 0.47534, 0, 0],
      118: [0, 0.52396, 0, 0],
      119: [0, 0.52396, 0, 0],
      120: [0.18906, 0.47534, 0, 0],
      121: [0.18906, 0.47534, 0, 0],
      122: [0.18906, 0.47534, 0, 0],
      8216: [0, 0.69141, 0, 0],
      8217: [0, 0.69141, 0, 0],
      58112: [0, 0.62119, 0, 0],
      58113: [0, 0.62119, 0, 0],
      58114: [0.18906, 0.69141, 0, 0],
      58115: [0.18906, 0.69141, 0, 0],
      58116: [0.18906, 0.47534, 0, 0],
      58117: [0, 0.69141, 0, 0],
      58118: [0, 0.62119, 0, 0],
      58119: [0, 0.47534, 0, 0]
    },
    "Main-Bold": {
      33: [0, 0.69444, 0, 0],
      34: [0, 0.69444, 0, 0],
      35: [0.19444, 0.69444, 0, 0],
      36: [0.05556, 0.75, 0, 0],
      37: [0.05556, 0.75, 0, 0],
      38: [0, 0.69444, 0, 0],
      39: [0, 0.69444, 0, 0],
      40: [0.25, 0.75, 0, 0],
      41: [0.25, 0.75, 0, 0],
      42: [0, 0.75, 0, 0],
      43: [0.13333, 0.63333, 0, 0],
      44: [0.19444, 0.15556, 0, 0],
      45: [0, 0.44444, 0, 0],
      46: [0, 0.15556, 0, 0],
      47: [0.25, 0.75, 0, 0],
      48: [0, 0.64444, 0, 0],
      49: [0, 0.64444, 0, 0],
      50: [0, 0.64444, 0, 0],
      51: [0, 0.64444, 0, 0],
      52: [0, 0.64444, 0, 0],
      53: [0, 0.64444, 0, 0],
      54: [0, 0.64444, 0, 0],
      55: [0, 0.64444, 0, 0],
      56: [0, 0.64444, 0, 0],
      57: [0, 0.64444, 0, 0],
      58: [0, 0.44444, 0, 0],
      59: [0.19444, 0.44444, 0, 0],
      60: [0.08556, 0.58556, 0, 0],
      61: [-0.10889, 0.39111, 0, 0],
      62: [0.08556, 0.58556, 0, 0],
      63: [0, 0.69444, 0, 0],
      64: [0, 0.69444, 0, 0],
      65: [0, 0.68611, 0, 0],
      66: [0, 0.68611, 0, 0],
      67: [0, 0.68611, 0, 0],
      68: [0, 0.68611, 0, 0],
      69: [0, 0.68611, 0, 0],
      70: [0, 0.68611, 0, 0],
      71: [0, 0.68611, 0, 0],
      72: [0, 0.68611, 0, 0],
      73: [0, 0.68611, 0, 0],
      74: [0, 0.68611, 0, 0],
      75: [0, 0.68611, 0, 0],
      76: [0, 0.68611, 0, 0],
      77: [0, 0.68611, 0, 0],
      78: [0, 0.68611, 0, 0],
      79: [0, 0.68611, 0, 0],
      80: [0, 0.68611, 0, 0],
      81: [0.19444, 0.68611, 0, 0],
      82: [0, 0.68611, 0, 0],
      83: [0, 0.68611, 0, 0],
      84: [0, 0.68611, 0, 0],
      85: [0, 0.68611, 0, 0],
      86: [0, 0.68611, 0.01597, 0],
      87: [0, 0.68611, 0.01597, 0],
      88: [0, 0.68611, 0, 0],
      89: [0, 0.68611, 0.02875, 0],
      90: [0, 0.68611, 0, 0],
      91: [0.25, 0.75, 0, 0],
      92: [0.25, 0.75, 0, 0],
      93: [0.25, 0.75, 0, 0],
      94: [0, 0.69444, 0, 0],
      95: [0.31, 0.13444, 0.03194, 0],
      96: [0, 0.69444, 0, 0],
      97: [0, 0.44444, 0, 0],
      98: [0, 0.69444, 0, 0],
      99: [0, 0.44444, 0, 0],
      100: [0, 0.69444, 0, 0],
      101: [0, 0.44444, 0, 0],
      102: [0, 0.69444, 0.10903, 0],
      103: [0.19444, 0.44444, 0.01597, 0],
      104: [0, 0.69444, 0, 0],
      105: [0, 0.69444, 0, 0],
      106: [0.19444, 0.69444, 0, 0],
      107: [0, 0.69444, 0, 0],
      108: [0, 0.69444, 0, 0],
      109: [0, 0.44444, 0, 0],
      110: [0, 0.44444, 0, 0],
      111: [0, 0.44444, 0, 0],
      112: [0.19444, 0.44444, 0, 0],
      113: [0.19444, 0.44444, 0, 0],
      114: [0, 0.44444, 0, 0],
      115: [0, 0.44444, 0, 0],
      116: [0, 0.63492, 0, 0],
      117: [0, 0.44444, 0, 0],
      118: [0, 0.44444, 0.01597, 0],
      119: [0, 0.44444, 0.01597, 0],
      120: [0, 0.44444, 0, 0],
      121: [0.19444, 0.44444, 0.01597, 0],
      122: [0, 0.44444, 0, 0],
      123: [0.25, 0.75, 0, 0],
      124: [0.25, 0.75, 0, 0],
      125: [0.25, 0.75, 0, 0],
      126: [0.35, 0.34444, 0, 0],
      168: [0, 0.69444, 0, 0],
      172: [0, 0.44444, 0, 0],
      175: [0, 0.59611, 0, 0],
      176: [0, 0.69444, 0, 0],
      177: [0.13333, 0.63333, 0, 0],
      180: [0, 0.69444, 0, 0],
      215: [0.13333, 0.63333, 0, 0],
      247: [0.13333, 0.63333, 0, 0],
      305: [0, 0.44444, 0, 0],
      567: [0.19444, 0.44444, 0, 0],
      710: [0, 0.69444, 0, 0],
      711: [0, 0.63194, 0, 0],
      713: [0, 0.59611, 0, 0],
      714: [0, 0.69444, 0, 0],
      715: [0, 0.69444, 0, 0],
      728: [0, 0.69444, 0, 0],
      729: [0, 0.69444, 0, 0],
      730: [0, 0.69444, 0, 0],
      732: [0, 0.69444, 0, 0],
      768: [0, 0.69444, 0, 0],
      769: [0, 0.69444, 0, 0],
      770: [0, 0.69444, 0, 0],
      771: [0, 0.69444, 0, 0],
      772: [0, 0.59611, 0, 0],
      774: [0, 0.69444, 0, 0],
      775: [0, 0.69444, 0, 0],
      776: [0, 0.69444, 0, 0],
      778: [0, 0.69444, 0, 0],
      779: [0, 0.69444, 0, 0],
      780: [0, 0.63194, 0, 0],
      824: [0.19444, 0.69444, 0, 0],
      915: [0, 0.68611, 0, 0],
      916: [0, 0.68611, 0, 0],
      920: [0, 0.68611, 0, 0],
      923: [0, 0.68611, 0, 0],
      926: [0, 0.68611, 0, 0],
      928: [0, 0.68611, 0, 0],
      931: [0, 0.68611, 0, 0],
      933: [0, 0.68611, 0, 0],
      934: [0, 0.68611, 0, 0],
      936: [0, 0.68611, 0, 0],
      937: [0, 0.68611, 0, 0],
      8211: [0, 0.44444, 0.03194, 0],
      8212: [0, 0.44444, 0.03194, 0],
      8216: [0, 0.69444, 0, 0],
      8217: [0, 0.69444, 0, 0],
      8220: [0, 0.69444, 0, 0],
      8221: [0, 0.69444, 0, 0],
      8224: [0.19444, 0.69444, 0, 0],
      8225: [0.19444, 0.69444, 0, 0],
      8242: [0, 0.55556, 0, 0],
      8407: [0, 0.72444, 0.15486, 0],
      8463: [0, 0.69444, 0, 0],
      8465: [0, 0.69444, 0, 0],
      8467: [0, 0.69444, 0, 0],
      8472: [0.19444, 0.44444, 0, 0],
      8476: [0, 0.69444, 0, 0],
      8501: [0, 0.69444, 0, 0],
      8592: [-0.10889, 0.39111, 0, 0],
      8593: [0.19444, 0.69444, 0, 0],
      8594: [-0.10889, 0.39111, 0, 0],
      8595: [0.19444, 0.69444, 0, 0],
      8596: [-0.10889, 0.39111, 0, 0],
      8597: [0.25, 0.75, 0, 0],
      8598: [0.19444, 0.69444, 0, 0],
      8599: [0.19444, 0.69444, 0, 0],
      8600: [0.19444, 0.69444, 0, 0],
      8601: [0.19444, 0.69444, 0, 0],
      8636: [-0.10889, 0.39111, 0, 0],
      8637: [-0.10889, 0.39111, 0, 0],
      8640: [-0.10889, 0.39111, 0, 0],
      8641: [-0.10889, 0.39111, 0, 0],
      8656: [-0.10889, 0.39111, 0, 0],
      8657: [0.19444, 0.69444, 0, 0],
      8658: [-0.10889, 0.39111, 0, 0],
      8659: [0.19444, 0.69444, 0, 0],
      8660: [-0.10889, 0.39111, 0, 0],
      8661: [0.25, 0.75, 0, 0],
      8704: [0, 0.69444, 0, 0],
      8706: [0, 0.69444, 0.06389, 0],
      8707: [0, 0.69444, 0, 0],
      8709: [0.05556, 0.75, 0, 0],
      8711: [0, 0.68611, 0, 0],
      8712: [0.08556, 0.58556, 0, 0],
      8715: [0.08556, 0.58556, 0, 0],
      8722: [0.13333, 0.63333, 0, 0],
      8723: [0.13333, 0.63333, 0, 0],
      8725: [0.25, 0.75, 0, 0],
      8726: [0.25, 0.75, 0, 0],
      8727: [-0.02778, 0.47222, 0, 0],
      8728: [-0.02639, 0.47361, 0, 0],
      8729: [-0.02639, 0.47361, 0, 0],
      8730: [0.18, 0.82, 0, 0],
      8733: [0, 0.44444, 0, 0],
      8734: [0, 0.44444, 0, 0],
      8736: [0, 0.69224, 0, 0],
      8739: [0.25, 0.75, 0, 0],
      8741: [0.25, 0.75, 0, 0],
      8743: [0, 0.55556, 0, 0],
      8744: [0, 0.55556, 0, 0],
      8745: [0, 0.55556, 0, 0],
      8746: [0, 0.55556, 0, 0],
      8747: [0.19444, 0.69444, 0.12778, 0],
      8764: [-0.10889, 0.39111, 0, 0],
      8768: [0.19444, 0.69444, 0, 0],
      8771: [222e-5, 0.50222, 0, 0],
      8776: [0.02444, 0.52444, 0, 0],
      8781: [222e-5, 0.50222, 0, 0],
      8801: [222e-5, 0.50222, 0, 0],
      8804: [0.19667, 0.69667, 0, 0],
      8805: [0.19667, 0.69667, 0, 0],
      8810: [0.08556, 0.58556, 0, 0],
      8811: [0.08556, 0.58556, 0, 0],
      8826: [0.08556, 0.58556, 0, 0],
      8827: [0.08556, 0.58556, 0, 0],
      8834: [0.08556, 0.58556, 0, 0],
      8835: [0.08556, 0.58556, 0, 0],
      8838: [0.19667, 0.69667, 0, 0],
      8839: [0.19667, 0.69667, 0, 0],
      8846: [0, 0.55556, 0, 0],
      8849: [0.19667, 0.69667, 0, 0],
      8850: [0.19667, 0.69667, 0, 0],
      8851: [0, 0.55556, 0, 0],
      8852: [0, 0.55556, 0, 0],
      8853: [0.13333, 0.63333, 0, 0],
      8854: [0.13333, 0.63333, 0, 0],
      8855: [0.13333, 0.63333, 0, 0],
      8856: [0.13333, 0.63333, 0, 0],
      8857: [0.13333, 0.63333, 0, 0],
      8866: [0, 0.69444, 0, 0],
      8867: [0, 0.69444, 0, 0],
      8868: [0, 0.69444, 0, 0],
      8869: [0, 0.69444, 0, 0],
      8900: [-0.02639, 0.47361, 0, 0],
      8901: [-0.02639, 0.47361, 0, 0],
      8902: [-0.02778, 0.47222, 0, 0],
      8968: [0.25, 0.75, 0, 0],
      8969: [0.25, 0.75, 0, 0],
      8970: [0.25, 0.75, 0, 0],
      8971: [0.25, 0.75, 0, 0],
      8994: [-0.13889, 0.36111, 0, 0],
      8995: [-0.13889, 0.36111, 0, 0],
      9651: [0.19444, 0.69444, 0, 0],
      9657: [-0.02778, 0.47222, 0, 0],
      9661: [0.19444, 0.69444, 0, 0],
      9667: [-0.02778, 0.47222, 0, 0],
      9711: [0.19444, 0.69444, 0, 0],
      9824: [0.12963, 0.69444, 0, 0],
      9825: [0.12963, 0.69444, 0, 0],
      9826: [0.12963, 0.69444, 0, 0],
      9827: [0.12963, 0.69444, 0, 0],
      9837: [0, 0.75, 0, 0],
      9838: [0.19444, 0.69444, 0, 0],
      9839: [0.19444, 0.69444, 0, 0],
      10216: [0.25, 0.75, 0, 0],
      10217: [0.25, 0.75, 0, 0],
      10815: [0, 0.68611, 0, 0],
      10927: [0.19667, 0.69667, 0, 0],
      10928: [0.19667, 0.69667, 0, 0]
    },
    "Main-Italic": {
      33: [0, 0.69444, 0.12417, 0],
      34: [0, 0.69444, 0.06961, 0],
      35: [0.19444, 0.69444, 0.06616, 0],
      37: [0.05556, 0.75, 0.13639, 0],
      38: [0, 0.69444, 0.09694, 0],
      39: [0, 0.69444, 0.12417, 0],
      40: [0.25, 0.75, 0.16194, 0],
      41: [0.25, 0.75, 0.03694, 0],
      42: [0, 0.75, 0.14917, 0],
      43: [0.05667, 0.56167, 0.03694, 0],
      44: [0.19444, 0.10556, 0, 0],
      45: [0, 0.43056, 0.02826, 0],
      46: [0, 0.10556, 0, 0],
      47: [0.25, 0.75, 0.16194, 0],
      48: [0, 0.64444, 0.13556, 0],
      49: [0, 0.64444, 0.13556, 0],
      50: [0, 0.64444, 0.13556, 0],
      51: [0, 0.64444, 0.13556, 0],
      52: [0.19444, 0.64444, 0.13556, 0],
      53: [0, 0.64444, 0.13556, 0],
      54: [0, 0.64444, 0.13556, 0],
      55: [0.19444, 0.64444, 0.13556, 0],
      56: [0, 0.64444, 0.13556, 0],
      57: [0, 0.64444, 0.13556, 0],
      58: [0, 0.43056, 0.0582, 0],
      59: [0.19444, 0.43056, 0.0582, 0],
      61: [-0.13313, 0.36687, 0.06616, 0],
      63: [0, 0.69444, 0.1225, 0],
      64: [0, 0.69444, 0.09597, 0],
      65: [0, 0.68333, 0, 0],
      66: [0, 0.68333, 0.10257, 0],
      67: [0, 0.68333, 0.14528, 0],
      68: [0, 0.68333, 0.09403, 0],
      69: [0, 0.68333, 0.12028, 0],
      70: [0, 0.68333, 0.13305, 0],
      71: [0, 0.68333, 0.08722, 0],
      72: [0, 0.68333, 0.16389, 0],
      73: [0, 0.68333, 0.15806, 0],
      74: [0, 0.68333, 0.14028, 0],
      75: [0, 0.68333, 0.14528, 0],
      76: [0, 0.68333, 0, 0],
      77: [0, 0.68333, 0.16389, 0],
      78: [0, 0.68333, 0.16389, 0],
      79: [0, 0.68333, 0.09403, 0],
      80: [0, 0.68333, 0.10257, 0],
      81: [0.19444, 0.68333, 0.09403, 0],
      82: [0, 0.68333, 0.03868, 0],
      83: [0, 0.68333, 0.11972, 0],
      84: [0, 0.68333, 0.13305, 0],
      85: [0, 0.68333, 0.16389, 0],
      86: [0, 0.68333, 0.18361, 0],
      87: [0, 0.68333, 0.18361, 0],
      88: [0, 0.68333, 0.15806, 0],
      89: [0, 0.68333, 0.19383, 0],
      90: [0, 0.68333, 0.14528, 0],
      91: [0.25, 0.75, 0.1875, 0],
      93: [0.25, 0.75, 0.10528, 0],
      94: [0, 0.69444, 0.06646, 0],
      95: [0.31, 0.12056, 0.09208, 0],
      97: [0, 0.43056, 0.07671, 0],
      98: [0, 0.69444, 0.06312, 0],
      99: [0, 0.43056, 0.05653, 0],
      100: [0, 0.69444, 0.10333, 0],
      101: [0, 0.43056, 0.07514, 0],
      102: [0.19444, 0.69444, 0.21194, 0],
      103: [0.19444, 0.43056, 0.08847, 0],
      104: [0, 0.69444, 0.07671, 0],
      105: [0, 0.65536, 0.1019, 0],
      106: [0.19444, 0.65536, 0.14467, 0],
      107: [0, 0.69444, 0.10764, 0],
      108: [0, 0.69444, 0.10333, 0],
      109: [0, 0.43056, 0.07671, 0],
      110: [0, 0.43056, 0.07671, 0],
      111: [0, 0.43056, 0.06312, 0],
      112: [0.19444, 0.43056, 0.06312, 0],
      113: [0.19444, 0.43056, 0.08847, 0],
      114: [0, 0.43056, 0.10764, 0],
      115: [0, 0.43056, 0.08208, 0],
      116: [0, 0.61508, 0.09486, 0],
      117: [0, 0.43056, 0.07671, 0],
      118: [0, 0.43056, 0.10764, 0],
      119: [0, 0.43056, 0.10764, 0],
      120: [0, 0.43056, 0.12042, 0],
      121: [0.19444, 0.43056, 0.08847, 0],
      122: [0, 0.43056, 0.12292, 0],
      126: [0.35, 0.31786, 0.11585, 0],
      163: [0, 0.69444, 0, 0],
      305: [0, 0.43056, 0, 0.02778],
      567: [0.19444, 0.43056, 0, 0.08334],
      768: [0, 0.69444, 0, 0],
      769: [0, 0.69444, 0.09694, 0],
      770: [0, 0.69444, 0.06646, 0],
      771: [0, 0.66786, 0.11585, 0],
      772: [0, 0.56167, 0.10333, 0],
      774: [0, 0.69444, 0.10806, 0],
      775: [0, 0.66786, 0.11752, 0],
      776: [0, 0.66786, 0.10474, 0],
      778: [0, 0.69444, 0, 0],
      779: [0, 0.69444, 0.1225, 0],
      780: [0, 0.62847, 0.08295, 0],
      915: [0, 0.68333, 0.13305, 0],
      916: [0, 0.68333, 0, 0],
      920: [0, 0.68333, 0.09403, 0],
      923: [0, 0.68333, 0, 0],
      926: [0, 0.68333, 0.15294, 0],
      928: [0, 0.68333, 0.16389, 0],
      931: [0, 0.68333, 0.12028, 0],
      933: [0, 0.68333, 0.11111, 0],
      934: [0, 0.68333, 0.05986, 0],
      936: [0, 0.68333, 0.11111, 0],
      937: [0, 0.68333, 0.10257, 0],
      8211: [0, 0.43056, 0.09208, 0],
      8212: [0, 0.43056, 0.09208, 0],
      8216: [0, 0.69444, 0.12417, 0],
      8217: [0, 0.69444, 0.12417, 0],
      8220: [0, 0.69444, 0.1685, 0],
      8221: [0, 0.69444, 0.06961, 0],
      8463: [0, 0.68889, 0, 0]
    },
    "Main-Regular": {
      32: [0, 0, 0, 0],
      33: [0, 0.69444, 0, 0],
      34: [0, 0.69444, 0, 0],
      35: [0.19444, 0.69444, 0, 0],
      36: [0.05556, 0.75, 0, 0],
      37: [0.05556, 0.75, 0, 0],
      38: [0, 0.69444, 0, 0],
      39: [0, 0.69444, 0, 0],
      40: [0.25, 0.75, 0, 0],
      41: [0.25, 0.75, 0, 0],
      42: [0, 0.75, 0, 0],
      43: [0.08333, 0.58333, 0, 0],
      44: [0.19444, 0.10556, 0, 0],
      45: [0, 0.43056, 0, 0],
      46: [0, 0.10556, 0, 0],
      47: [0.25, 0.75, 0, 0],
      48: [0, 0.64444, 0, 0],
      49: [0, 0.64444, 0, 0],
      50: [0, 0.64444, 0, 0],
      51: [0, 0.64444, 0, 0],
      52: [0, 0.64444, 0, 0],
      53: [0, 0.64444, 0, 0],
      54: [0, 0.64444, 0, 0],
      55: [0, 0.64444, 0, 0],
      56: [0, 0.64444, 0, 0],
      57: [0, 0.64444, 0, 0],
      58: [0, 0.43056, 0, 0],
      59: [0.19444, 0.43056, 0, 0],
      60: [0.0391, 0.5391, 0, 0],
      61: [-0.13313, 0.36687, 0, 0],
      62: [0.0391, 0.5391, 0, 0],
      63: [0, 0.69444, 0, 0],
      64: [0, 0.69444, 0, 0],
      65: [0, 0.68333, 0, 0],
      66: [0, 0.68333, 0, 0],
      67: [0, 0.68333, 0, 0],
      68: [0, 0.68333, 0, 0],
      69: [0, 0.68333, 0, 0],
      70: [0, 0.68333, 0, 0],
      71: [0, 0.68333, 0, 0],
      72: [0, 0.68333, 0, 0],
      73: [0, 0.68333, 0, 0],
      74: [0, 0.68333, 0, 0],
      75: [0, 0.68333, 0, 0],
      76: [0, 0.68333, 0, 0],
      77: [0, 0.68333, 0, 0],
      78: [0, 0.68333, 0, 0],
      79: [0, 0.68333, 0, 0],
      80: [0, 0.68333, 0, 0],
      81: [0.19444, 0.68333, 0, 0],
      82: [0, 0.68333, 0, 0],
      83: [0, 0.68333, 0, 0],
      84: [0, 0.68333, 0, 0],
      85: [0, 0.68333, 0, 0],
      86: [0, 0.68333, 0.01389, 0],
      87: [0, 0.68333, 0.01389, 0],
      88: [0, 0.68333, 0, 0],
      89: [0, 0.68333, 0.025, 0],
      90: [0, 0.68333, 0, 0],
      91: [0.25, 0.75, 0, 0],
      92: [0.25, 0.75, 0, 0],
      93: [0.25, 0.75, 0, 0],
      94: [0, 0.69444, 0, 0],
      95: [0.31, 0.12056, 0.02778, 0],
      96: [0, 0.69444, 0, 0],
      97: [0, 0.43056, 0, 0],
      98: [0, 0.69444, 0, 0],
      99: [0, 0.43056, 0, 0],
      100: [0, 0.69444, 0, 0],
      101: [0, 0.43056, 0, 0],
      102: [0, 0.69444, 0.07778, 0],
      103: [0.19444, 0.43056, 0.01389, 0],
      104: [0, 0.69444, 0, 0],
      105: [0, 0.66786, 0, 0],
      106: [0.19444, 0.66786, 0, 0],
      107: [0, 0.69444, 0, 0],
      108: [0, 0.69444, 0, 0],
      109: [0, 0.43056, 0, 0],
      110: [0, 0.43056, 0, 0],
      111: [0, 0.43056, 0, 0],
      112: [0.19444, 0.43056, 0, 0],
      113: [0.19444, 0.43056, 0, 0],
      114: [0, 0.43056, 0, 0],
      115: [0, 0.43056, 0, 0],
      116: [0, 0.61508, 0, 0],
      117: [0, 0.43056, 0, 0],
      118: [0, 0.43056, 0.01389, 0],
      119: [0, 0.43056, 0.01389, 0],
      120: [0, 0.43056, 0, 0],
      121: [0.19444, 0.43056, 0.01389, 0],
      122: [0, 0.43056, 0, 0],
      123: [0.25, 0.75, 0, 0],
      124: [0.25, 0.75, 0, 0],
      125: [0.25, 0.75, 0, 0],
      126: [0.35, 0.31786, 0, 0],
      160: [0, 0, 0, 0],
      168: [0, 0.66786, 0, 0],
      172: [0, 0.43056, 0, 0],
      175: [0, 0.56778, 0, 0],
      176: [0, 0.69444, 0, 0],
      177: [0.08333, 0.58333, 0, 0],
      180: [0, 0.69444, 0, 0],
      215: [0.08333, 0.58333, 0, 0],
      247: [0.08333, 0.58333, 0, 0],
      305: [0, 0.43056, 0, 0],
      567: [0.19444, 0.43056, 0, 0],
      710: [0, 0.69444, 0, 0],
      711: [0, 0.62847, 0, 0],
      713: [0, 0.56778, 0, 0],
      714: [0, 0.69444, 0, 0],
      715: [0, 0.69444, 0, 0],
      728: [0, 0.69444, 0, 0],
      729: [0, 0.66786, 0, 0],
      730: [0, 0.69444, 0, 0],
      732: [0, 0.66786, 0, 0],
      768: [0, 0.69444, 0, 0],
      769: [0, 0.69444, 0, 0],
      770: [0, 0.69444, 0, 0],
      771: [0, 0.66786, 0, 0],
      772: [0, 0.56778, 0, 0],
      774: [0, 0.69444, 0, 0],
      775: [0, 0.66786, 0, 0],
      776: [0, 0.66786, 0, 0],
      778: [0, 0.69444, 0, 0],
      779: [0, 0.69444, 0, 0],
      780: [0, 0.62847, 0, 0],
      824: [0.19444, 0.69444, 0, 0],
      915: [0, 0.68333, 0, 0],
      916: [0, 0.68333, 0, 0],
      920: [0, 0.68333, 0, 0],
      923: [0, 0.68333, 0, 0],
      926: [0, 0.68333, 0, 0],
      928: [0, 0.68333, 0, 0],
      931: [0, 0.68333, 0, 0],
      933: [0, 0.68333, 0, 0],
      934: [0, 0.68333, 0, 0],
      936: [0, 0.68333, 0, 0],
      937: [0, 0.68333, 0, 0],
      8211: [0, 0.43056, 0.02778, 0],
      8212: [0, 0.43056, 0.02778, 0],
      8216: [0, 0.69444, 0, 0],
      8217: [0, 0.69444, 0, 0],
      8220: [0, 0.69444, 0, 0],
      8221: [0, 0.69444, 0, 0],
      8224: [0.19444, 0.69444, 0, 0],
      8225: [0.19444, 0.69444, 0, 0],
      8230: [0, 0.12, 0, 0],
      8242: [0, 0.55556, 0, 0],
      8407: [0, 0.71444, 0.15382, 0],
      8463: [0, 0.68889, 0, 0],
      8465: [0, 0.69444, 0, 0],
      8467: [0, 0.69444, 0, 0.11111],
      8472: [0.19444, 0.43056, 0, 0.11111],
      8476: [0, 0.69444, 0, 0],
      8501: [0, 0.69444, 0, 0],
      8592: [-0.13313, 0.36687, 0, 0],
      8593: [0.19444, 0.69444, 0, 0],
      8594: [-0.13313, 0.36687, 0, 0],
      8595: [0.19444, 0.69444, 0, 0],
      8596: [-0.13313, 0.36687, 0, 0],
      8597: [0.25, 0.75, 0, 0],
      8598: [0.19444, 0.69444, 0, 0],
      8599: [0.19444, 0.69444, 0, 0],
      8600: [0.19444, 0.69444, 0, 0],
      8601: [0.19444, 0.69444, 0, 0],
      8614: [0.011, 0.511, 0, 0],
      8617: [0.011, 0.511, 0, 0],
      8618: [0.011, 0.511, 0, 0],
      8636: [-0.13313, 0.36687, 0, 0],
      8637: [-0.13313, 0.36687, 0, 0],
      8640: [-0.13313, 0.36687, 0, 0],
      8641: [-0.13313, 0.36687, 0, 0],
      8652: [0.011, 0.671, 0, 0],
      8656: [-0.13313, 0.36687, 0, 0],
      8657: [0.19444, 0.69444, 0, 0],
      8658: [-0.13313, 0.36687, 0, 0],
      8659: [0.19444, 0.69444, 0, 0],
      8660: [-0.13313, 0.36687, 0, 0],
      8661: [0.25, 0.75, 0, 0],
      8704: [0, 0.69444, 0, 0],
      8706: [0, 0.69444, 0.05556, 0.08334],
      8707: [0, 0.69444, 0, 0],
      8709: [0.05556, 0.75, 0, 0],
      8711: [0, 0.68333, 0, 0],
      8712: [0.0391, 0.5391, 0, 0],
      8715: [0.0391, 0.5391, 0, 0],
      8722: [0.08333, 0.58333, 0, 0],
      8723: [0.08333, 0.58333, 0, 0],
      8725: [0.25, 0.75, 0, 0],
      8726: [0.25, 0.75, 0, 0],
      8727: [-0.03472, 0.46528, 0, 0],
      8728: [-0.05555, 0.44445, 0, 0],
      8729: [-0.05555, 0.44445, 0, 0],
      8730: [0.2, 0.8, 0, 0],
      8733: [0, 0.43056, 0, 0],
      8734: [0, 0.43056, 0, 0],
      8736: [0, 0.69224, 0, 0],
      8739: [0.25, 0.75, 0, 0],
      8741: [0.25, 0.75, 0, 0],
      8743: [0, 0.55556, 0, 0],
      8744: [0, 0.55556, 0, 0],
      8745: [0, 0.55556, 0, 0],
      8746: [0, 0.55556, 0, 0],
      8747: [0.19444, 0.69444, 0.11111, 0],
      8764: [-0.13313, 0.36687, 0, 0],
      8768: [0.19444, 0.69444, 0, 0],
      8771: [-0.03625, 0.46375, 0, 0],
      8773: [-0.022, 0.589, 0, 0],
      8776: [-0.01688, 0.48312, 0, 0],
      8781: [-0.03625, 0.46375, 0, 0],
      8784: [-0.133, 0.67, 0, 0],
      8800: [0.215, 0.716, 0, 0],
      8801: [-0.03625, 0.46375, 0, 0],
      8804: [0.13597, 0.63597, 0, 0],
      8805: [0.13597, 0.63597, 0, 0],
      8810: [0.0391, 0.5391, 0, 0],
      8811: [0.0391, 0.5391, 0, 0],
      8826: [0.0391, 0.5391, 0, 0],
      8827: [0.0391, 0.5391, 0, 0],
      8834: [0.0391, 0.5391, 0, 0],
      8835: [0.0391, 0.5391, 0, 0],
      8838: [0.13597, 0.63597, 0, 0],
      8839: [0.13597, 0.63597, 0, 0],
      8846: [0, 0.55556, 0, 0],
      8849: [0.13597, 0.63597, 0, 0],
      8850: [0.13597, 0.63597, 0, 0],
      8851: [0, 0.55556, 0, 0],
      8852: [0, 0.55556, 0, 0],
      8853: [0.08333, 0.58333, 0, 0],
      8854: [0.08333, 0.58333, 0, 0],
      8855: [0.08333, 0.58333, 0, 0],
      8856: [0.08333, 0.58333, 0, 0],
      8857: [0.08333, 0.58333, 0, 0],
      8866: [0, 0.69444, 0, 0],
      8867: [0, 0.69444, 0, 0],
      8868: [0, 0.69444, 0, 0],
      8869: [0, 0.69444, 0, 0],
      8872: [0.249, 0.75, 0, 0],
      8900: [-0.05555, 0.44445, 0, 0],
      8901: [-0.05555, 0.44445, 0, 0],
      8902: [-0.03472, 0.46528, 0, 0],
      8904: [5e-3, 0.505, 0, 0],
      8942: [0.03, 0.9, 0, 0],
      8943: [-0.19, 0.31, 0, 0],
      8945: [-0.1, 0.82, 0, 0],
      8968: [0.25, 0.75, 0, 0],
      8969: [0.25, 0.75, 0, 0],
      8970: [0.25, 0.75, 0, 0],
      8971: [0.25, 0.75, 0, 0],
      8994: [-0.14236, 0.35764, 0, 0],
      8995: [-0.14236, 0.35764, 0, 0],
      9136: [0.244, 0.744, 0, 0],
      9137: [0.244, 0.744, 0, 0],
      9651: [0.19444, 0.69444, 0, 0],
      9657: [-0.03472, 0.46528, 0, 0],
      9661: [0.19444, 0.69444, 0, 0],
      9667: [-0.03472, 0.46528, 0, 0],
      9711: [0.19444, 0.69444, 0, 0],
      9824: [0.12963, 0.69444, 0, 0],
      9825: [0.12963, 0.69444, 0, 0],
      9826: [0.12963, 0.69444, 0, 0],
      9827: [0.12963, 0.69444, 0, 0],
      9837: [0, 0.75, 0, 0],
      9838: [0.19444, 0.69444, 0, 0],
      9839: [0.19444, 0.69444, 0, 0],
      10216: [0.25, 0.75, 0, 0],
      10217: [0.25, 0.75, 0, 0],
      10222: [0.244, 0.744, 0, 0],
      10223: [0.244, 0.744, 0, 0],
      10229: [0.011, 0.511, 0, 0],
      10230: [0.011, 0.511, 0, 0],
      10231: [0.011, 0.511, 0, 0],
      10232: [0.024, 0.525, 0, 0],
      10233: [0.024, 0.525, 0, 0],
      10234: [0.024, 0.525, 0, 0],
      10236: [0.011, 0.511, 0, 0],
      10815: [0, 0.68333, 0, 0],
      10927: [0.13597, 0.63597, 0, 0],
      10928: [0.13597, 0.63597, 0, 0]
    },
    "Math-BoldItalic": {
      47: [0.19444, 0.69444, 0, 0],
      65: [0, 0.68611, 0, 0],
      66: [0, 0.68611, 0.04835, 0],
      67: [0, 0.68611, 0.06979, 0],
      68: [0, 0.68611, 0.03194, 0],
      69: [0, 0.68611, 0.05451, 0],
      70: [0, 0.68611, 0.15972, 0],
      71: [0, 0.68611, 0, 0],
      72: [0, 0.68611, 0.08229, 0],
      73: [0, 0.68611, 0.07778, 0],
      74: [0, 0.68611, 0.10069, 0],
      75: [0, 0.68611, 0.06979, 0],
      76: [0, 0.68611, 0, 0],
      77: [0, 0.68611, 0.11424, 0],
      78: [0, 0.68611, 0.11424, 0],
      79: [0, 0.68611, 0.03194, 0],
      80: [0, 0.68611, 0.15972, 0],
      81: [0.19444, 0.68611, 0, 0],
      82: [0, 0.68611, 421e-5, 0],
      83: [0, 0.68611, 0.05382, 0],
      84: [0, 0.68611, 0.15972, 0],
      85: [0, 0.68611, 0.11424, 0],
      86: [0, 0.68611, 0.25555, 0],
      87: [0, 0.68611, 0.15972, 0],
      88: [0, 0.68611, 0.07778, 0],
      89: [0, 0.68611, 0.25555, 0],
      90: [0, 0.68611, 0.06979, 0],
      97: [0, 0.44444, 0, 0],
      98: [0, 0.69444, 0, 0],
      99: [0, 0.44444, 0, 0],
      100: [0, 0.69444, 0, 0],
      101: [0, 0.44444, 0, 0],
      102: [0.19444, 0.69444, 0.11042, 0],
      103: [0.19444, 0.44444, 0.03704, 0],
      104: [0, 0.69444, 0, 0],
      105: [0, 0.69326, 0, 0],
      106: [0.19444, 0.69326, 0.0622, 0],
      107: [0, 0.69444, 0.01852, 0],
      108: [0, 0.69444, 88e-4, 0],
      109: [0, 0.44444, 0, 0],
      110: [0, 0.44444, 0, 0],
      111: [0, 0.44444, 0, 0],
      112: [0.19444, 0.44444, 0, 0],
      113: [0.19444, 0.44444, 0.03704, 0],
      114: [0, 0.44444, 0.03194, 0],
      115: [0, 0.44444, 0, 0],
      116: [0, 0.63492, 0, 0],
      117: [0, 0.44444, 0, 0],
      118: [0, 0.44444, 0.03704, 0],
      119: [0, 0.44444, 0.02778, 0],
      120: [0, 0.44444, 0, 0],
      121: [0.19444, 0.44444, 0.03704, 0],
      122: [0, 0.44444, 0.04213, 0],
      915: [0, 0.68611, 0.15972, 0],
      916: [0, 0.68611, 0, 0],
      920: [0, 0.68611, 0.03194, 0],
      923: [0, 0.68611, 0, 0],
      926: [0, 0.68611, 0.07458, 0],
      928: [0, 0.68611, 0.08229, 0],
      931: [0, 0.68611, 0.05451, 0],
      933: [0, 0.68611, 0.15972, 0],
      934: [0, 0.68611, 0, 0],
      936: [0, 0.68611, 0.11653, 0],
      937: [0, 0.68611, 0.04835, 0],
      945: [0, 0.44444, 0, 0],
      946: [0.19444, 0.69444, 0.03403, 0],
      947: [0.19444, 0.44444, 0.06389, 0],
      948: [0, 0.69444, 0.03819, 0],
      949: [0, 0.44444, 0, 0],
      950: [0.19444, 0.69444, 0.06215, 0],
      951: [0.19444, 0.44444, 0.03704, 0],
      952: [0, 0.69444, 0.03194, 0],
      953: [0, 0.44444, 0, 0],
      954: [0, 0.44444, 0, 0],
      955: [0, 0.69444, 0, 0],
      956: [0.19444, 0.44444, 0, 0],
      957: [0, 0.44444, 0.06898, 0],
      958: [0.19444, 0.69444, 0.03021, 0],
      959: [0, 0.44444, 0, 0],
      960: [0, 0.44444, 0.03704, 0],
      961: [0.19444, 0.44444, 0, 0],
      962: [0.09722, 0.44444, 0.07917, 0],
      963: [0, 0.44444, 0.03704, 0],
      964: [0, 0.44444, 0.13472, 0],
      965: [0, 0.44444, 0.03704, 0],
      966: [0.19444, 0.44444, 0, 0],
      967: [0.19444, 0.44444, 0, 0],
      968: [0.19444, 0.69444, 0.03704, 0],
      969: [0, 0.44444, 0.03704, 0],
      977: [0, 0.69444, 0, 0],
      981: [0.19444, 0.69444, 0, 0],
      982: [0, 0.44444, 0.03194, 0],
      1009: [0.19444, 0.44444, 0, 0],
      1013: [0, 0.44444, 0, 0]
    },
    "Math-Italic": {
      47: [0.19444, 0.69444, 0, 0],
      65: [0, 0.68333, 0, 0.13889],
      66: [0, 0.68333, 0.05017, 0.08334],
      67: [0, 0.68333, 0.07153, 0.08334],
      68: [0, 0.68333, 0.02778, 0.05556],
      69: [0, 0.68333, 0.05764, 0.08334],
      70: [0, 0.68333, 0.13889, 0.08334],
      71: [0, 0.68333, 0, 0.08334],
      72: [0, 0.68333, 0.08125, 0.05556],
      73: [0, 0.68333, 0.07847, 0.11111],
      74: [0, 0.68333, 0.09618, 0.16667],
      75: [0, 0.68333, 0.07153, 0.05556],
      76: [0, 0.68333, 0, 0.02778],
      77: [0, 0.68333, 0.10903, 0.08334],
      78: [0, 0.68333, 0.10903, 0.08334],
      79: [0, 0.68333, 0.02778, 0.08334],
      80: [0, 0.68333, 0.13889, 0.08334],
      81: [0.19444, 0.68333, 0, 0.08334],
      82: [0, 0.68333, 773e-5, 0.08334],
      83: [0, 0.68333, 0.05764, 0.08334],
      84: [0, 0.68333, 0.13889, 0.08334],
      85: [0, 0.68333, 0.10903, 0.02778],
      86: [0, 0.68333, 0.22222, 0],
      87: [0, 0.68333, 0.13889, 0],
      88: [0, 0.68333, 0.07847, 0.08334],
      89: [0, 0.68333, 0.22222, 0],
      90: [0, 0.68333, 0.07153, 0.08334],
      97: [0, 0.43056, 0, 0],
      98: [0, 0.69444, 0, 0],
      99: [0, 0.43056, 0, 0.05556],
      100: [0, 0.69444, 0, 0.16667],
      101: [0, 0.43056, 0, 0.05556],
      102: [0.19444, 0.69444, 0.10764, 0.16667],
      103: [0.19444, 0.43056, 0.03588, 0.02778],
      104: [0, 0.69444, 0, 0],
      105: [0, 0.65952, 0, 0],
      106: [0.19444, 0.65952, 0.05724, 0],
      107: [0, 0.69444, 0.03148, 0],
      108: [0, 0.69444, 0.01968, 0.08334],
      109: [0, 0.43056, 0, 0],
      110: [0, 0.43056, 0, 0],
      111: [0, 0.43056, 0, 0.05556],
      112: [0.19444, 0.43056, 0, 0.08334],
      113: [0.19444, 0.43056, 0.03588, 0.08334],
      114: [0, 0.43056, 0.02778, 0.05556],
      115: [0, 0.43056, 0, 0.05556],
      116: [0, 0.61508, 0, 0.08334],
      117: [0, 0.43056, 0, 0.02778],
      118: [0, 0.43056, 0.03588, 0.02778],
      119: [0, 0.43056, 0.02691, 0.08334],
      120: [0, 0.43056, 0, 0.02778],
      121: [0.19444, 0.43056, 0.03588, 0.05556],
      122: [0, 0.43056, 0.04398, 0.05556],
      915: [0, 0.68333, 0.13889, 0.08334],
      916: [0, 0.68333, 0, 0.16667],
      920: [0, 0.68333, 0.02778, 0.08334],
      923: [0, 0.68333, 0, 0.16667],
      926: [0, 0.68333, 0.07569, 0.08334],
      928: [0, 0.68333, 0.08125, 0.05556],
      931: [0, 0.68333, 0.05764, 0.08334],
      933: [0, 0.68333, 0.13889, 0.05556],
      934: [0, 0.68333, 0, 0.08334],
      936: [0, 0.68333, 0.11, 0.05556],
      937: [0, 0.68333, 0.05017, 0.08334],
      945: [0, 0.43056, 37e-4, 0.02778],
      946: [0.19444, 0.69444, 0.05278, 0.08334],
      947: [0.19444, 0.43056, 0.05556, 0],
      948: [0, 0.69444, 0.03785, 0.05556],
      949: [0, 0.43056, 0, 0.08334],
      950: [0.19444, 0.69444, 0.07378, 0.08334],
      951: [0.19444, 0.43056, 0.03588, 0.05556],
      952: [0, 0.69444, 0.02778, 0.08334],
      953: [0, 0.43056, 0, 0.05556],
      954: [0, 0.43056, 0, 0],
      955: [0, 0.69444, 0, 0],
      956: [0.19444, 0.43056, 0, 0.02778],
      957: [0, 0.43056, 0.06366, 0.02778],
      958: [0.19444, 0.69444, 0.04601, 0.11111],
      959: [0, 0.43056, 0, 0.05556],
      960: [0, 0.43056, 0.03588, 0],
      961: [0.19444, 0.43056, 0, 0.08334],
      962: [0.09722, 0.43056, 0.07986, 0.08334],
      963: [0, 0.43056, 0.03588, 0],
      964: [0, 0.43056, 0.1132, 0.02778],
      965: [0, 0.43056, 0.03588, 0.02778],
      966: [0.19444, 0.43056, 0, 0.08334],
      967: [0.19444, 0.43056, 0, 0.05556],
      968: [0.19444, 0.69444, 0.03588, 0.11111],
      969: [0, 0.43056, 0.03588, 0],
      977: [0, 0.69444, 0, 0.08334],
      981: [0.19444, 0.69444, 0, 0.08334],
      982: [0, 0.43056, 0.02778, 0],
      1009: [0.19444, 0.43056, 0, 0.08334],
      1013: [0, 0.43056, 0, 0.05556]
    },
    "Math-Regular": {
      65: [0, 0.68333, 0, 0.13889],
      66: [0, 0.68333, 0.05017, 0.08334],
      67: [0, 0.68333, 0.07153, 0.08334],
      68: [0, 0.68333, 0.02778, 0.05556],
      69: [0, 0.68333, 0.05764, 0.08334],
      70: [0, 0.68333, 0.13889, 0.08334],
      71: [0, 0.68333, 0, 0.08334],
      72: [0, 0.68333, 0.08125, 0.05556],
      73: [0, 0.68333, 0.07847, 0.11111],
      74: [0, 0.68333, 0.09618, 0.16667],
      75: [0, 0.68333, 0.07153, 0.05556],
      76: [0, 0.68333, 0, 0.02778],
      77: [0, 0.68333, 0.10903, 0.08334],
      78: [0, 0.68333, 0.10903, 0.08334],
      79: [0, 0.68333, 0.02778, 0.08334],
      80: [0, 0.68333, 0.13889, 0.08334],
      81: [0.19444, 0.68333, 0, 0.08334],
      82: [0, 0.68333, 773e-5, 0.08334],
      83: [0, 0.68333, 0.05764, 0.08334],
      84: [0, 0.68333, 0.13889, 0.08334],
      85: [0, 0.68333, 0.10903, 0.02778],
      86: [0, 0.68333, 0.22222, 0],
      87: [0, 0.68333, 0.13889, 0],
      88: [0, 0.68333, 0.07847, 0.08334],
      89: [0, 0.68333, 0.22222, 0],
      90: [0, 0.68333, 0.07153, 0.08334],
      97: [0, 0.43056, 0, 0],
      98: [0, 0.69444, 0, 0],
      99: [0, 0.43056, 0, 0.05556],
      100: [0, 0.69444, 0, 0.16667],
      101: [0, 0.43056, 0, 0.05556],
      102: [0.19444, 0.69444, 0.10764, 0.16667],
      103: [0.19444, 0.43056, 0.03588, 0.02778],
      104: [0, 0.69444, 0, 0],
      105: [0, 0.65952, 0, 0],
      106: [0.19444, 0.65952, 0.05724, 0],
      107: [0, 0.69444, 0.03148, 0],
      108: [0, 0.69444, 0.01968, 0.08334],
      109: [0, 0.43056, 0, 0],
      110: [0, 0.43056, 0, 0],
      111: [0, 0.43056, 0, 0.05556],
      112: [0.19444, 0.43056, 0, 0.08334],
      113: [0.19444, 0.43056, 0.03588, 0.08334],
      114: [0, 0.43056, 0.02778, 0.05556],
      115: [0, 0.43056, 0, 0.05556],
      116: [0, 0.61508, 0, 0.08334],
      117: [0, 0.43056, 0, 0.02778],
      118: [0, 0.43056, 0.03588, 0.02778],
      119: [0, 0.43056, 0.02691, 0.08334],
      120: [0, 0.43056, 0, 0.02778],
      121: [0.19444, 0.43056, 0.03588, 0.05556],
      122: [0, 0.43056, 0.04398, 0.05556],
      915: [0, 0.68333, 0.13889, 0.08334],
      916: [0, 0.68333, 0, 0.16667],
      920: [0, 0.68333, 0.02778, 0.08334],
      923: [0, 0.68333, 0, 0.16667],
      926: [0, 0.68333, 0.07569, 0.08334],
      928: [0, 0.68333, 0.08125, 0.05556],
      931: [0, 0.68333, 0.05764, 0.08334],
      933: [0, 0.68333, 0.13889, 0.05556],
      934: [0, 0.68333, 0, 0.08334],
      936: [0, 0.68333, 0.11, 0.05556],
      937: [0, 0.68333, 0.05017, 0.08334],
      945: [0, 0.43056, 37e-4, 0.02778],
      946: [0.19444, 0.69444, 0.05278, 0.08334],
      947: [0.19444, 0.43056, 0.05556, 0],
      948: [0, 0.69444, 0.03785, 0.05556],
      949: [0, 0.43056, 0, 0.08334],
      950: [0.19444, 0.69444, 0.07378, 0.08334],
      951: [0.19444, 0.43056, 0.03588, 0.05556],
      952: [0, 0.69444, 0.02778, 0.08334],
      953: [0, 0.43056, 0, 0.05556],
      954: [0, 0.43056, 0, 0],
      955: [0, 0.69444, 0, 0],
      956: [0.19444, 0.43056, 0, 0.02778],
      957: [0, 0.43056, 0.06366, 0.02778],
      958: [0.19444, 0.69444, 0.04601, 0.11111],
      959: [0, 0.43056, 0, 0.05556],
      960: [0, 0.43056, 0.03588, 0],
      961: [0.19444, 0.43056, 0, 0.08334],
      962: [0.09722, 0.43056, 0.07986, 0.08334],
      963: [0, 0.43056, 0.03588, 0],
      964: [0, 0.43056, 0.1132, 0.02778],
      965: [0, 0.43056, 0.03588, 0.02778],
      966: [0.19444, 0.43056, 0, 0.08334],
      967: [0.19444, 0.43056, 0, 0.05556],
      968: [0.19444, 0.69444, 0.03588, 0.11111],
      969: [0, 0.43056, 0.03588, 0],
      977: [0, 0.69444, 0, 0.08334],
      981: [0.19444, 0.69444, 0, 0.08334],
      982: [0, 0.43056, 0.02778, 0],
      1009: [0.19444, 0.43056, 0, 0.08334],
      1013: [0, 0.43056, 0, 0.05556]
    },
    "SansSerif-Regular": {
      33: [0, 0.69444, 0, 0],
      34: [0, 0.69444, 0, 0],
      35: [0.19444, 0.69444, 0, 0],
      36: [0.05556, 0.75, 0, 0],
      37: [0.05556, 0.75, 0, 0],
      38: [0, 0.69444, 0, 0],
      39: [0, 0.69444, 0, 0],
      40: [0.25, 0.75, 0, 0],
      41: [0.25, 0.75, 0, 0],
      42: [0, 0.75, 0, 0],
      43: [0.08333, 0.58333, 0, 0],
      44: [0.125, 0.08333, 0, 0],
      45: [0, 0.44444, 0, 0],
      46: [0, 0.08333, 0, 0],
      47: [0.25, 0.75, 0, 0],
      48: [0, 0.65556, 0, 0],
      49: [0, 0.65556, 0, 0],
      50: [0, 0.65556, 0, 0],
      51: [0, 0.65556, 0, 0],
      52: [0, 0.65556, 0, 0],
      53: [0, 0.65556, 0, 0],
      54: [0, 0.65556, 0, 0],
      55: [0, 0.65556, 0, 0],
      56: [0, 0.65556, 0, 0],
      57: [0, 0.65556, 0, 0],
      58: [0, 0.44444, 0, 0],
      59: [0.125, 0.44444, 0, 0],
      61: [-0.13, 0.37, 0, 0],
      63: [0, 0.69444, 0, 0],
      64: [0, 0.69444, 0, 0],
      65: [0, 0.69444, 0, 0],
      66: [0, 0.69444, 0, 0],
      67: [0, 0.69444, 0, 0],
      68: [0, 0.69444, 0, 0],
      69: [0, 0.69444, 0, 0],
      70: [0, 0.69444, 0, 0],
      71: [0, 0.69444, 0, 0],
      72: [0, 0.69444, 0, 0],
      73: [0, 0.69444, 0, 0],
      74: [0, 0.69444, 0, 0],
      75: [0, 0.69444, 0, 0],
      76: [0, 0.69444, 0, 0],
      77: [0, 0.69444, 0, 0],
      78: [0, 0.69444, 0, 0],
      79: [0, 0.69444, 0, 0],
      80: [0, 0.69444, 0, 0],
      81: [0.125, 0.69444, 0, 0],
      82: [0, 0.69444, 0, 0],
      83: [0, 0.69444, 0, 0],
      84: [0, 0.69444, 0, 0],
      85: [0, 0.69444, 0, 0],
      86: [0, 0.69444, 0.01389, 0],
      87: [0, 0.69444, 0.01389, 0],
      88: [0, 0.69444, 0, 0],
      89: [0, 0.69444, 0.025, 0],
      90: [0, 0.69444, 0, 0],
      91: [0.25, 0.75, 0, 0],
      93: [0.25, 0.75, 0, 0],
      94: [0, 0.69444, 0, 0],
      95: [0.35, 0.09444, 0.02778, 0],
      97: [0, 0.44444, 0, 0],
      98: [0, 0.69444, 0, 0],
      99: [0, 0.44444, 0, 0],
      100: [0, 0.69444, 0, 0],
      101: [0, 0.44444, 0, 0],
      102: [0, 0.69444, 0.06944, 0],
      103: [0.19444, 0.44444, 0.01389, 0],
      104: [0, 0.69444, 0, 0],
      105: [0, 0.67937, 0, 0],
      106: [0.19444, 0.67937, 0, 0],
      107: [0, 0.69444, 0, 0],
      108: [0, 0.69444, 0, 0],
      109: [0, 0.44444, 0, 0],
      110: [0, 0.44444, 0, 0],
      111: [0, 0.44444, 0, 0],
      112: [0.19444, 0.44444, 0, 0],
      113: [0.19444, 0.44444, 0, 0],
      114: [0, 0.44444, 0.01389, 0],
      115: [0, 0.44444, 0, 0],
      116: [0, 0.57143, 0, 0],
      117: [0, 0.44444, 0, 0],
      118: [0, 0.44444, 0.01389, 0],
      119: [0, 0.44444, 0.01389, 0],
      120: [0, 0.44444, 0, 0],
      121: [0.19444, 0.44444, 0.01389, 0],
      122: [0, 0.44444, 0, 0],
      126: [0.35, 0.32659, 0, 0],
      305: [0, 0.44444, 0, 0],
      567: [0.19444, 0.44444, 0, 0],
      768: [0, 0.69444, 0, 0],
      769: [0, 0.69444, 0, 0],
      770: [0, 0.69444, 0, 0],
      771: [0, 0.67659, 0, 0],
      772: [0, 0.60889, 0, 0],
      774: [0, 0.69444, 0, 0],
      775: [0, 0.67937, 0, 0],
      776: [0, 0.67937, 0, 0],
      778: [0, 0.69444, 0, 0],
      779: [0, 0.69444, 0, 0],
      780: [0, 0.63194, 0, 0],
      915: [0, 0.69444, 0, 0],
      916: [0, 0.69444, 0, 0],
      920: [0, 0.69444, 0, 0],
      923: [0, 0.69444, 0, 0],
      926: [0, 0.69444, 0, 0],
      928: [0, 0.69444, 0, 0],
      931: [0, 0.69444, 0, 0],
      933: [0, 0.69444, 0, 0],
      934: [0, 0.69444, 0, 0],
      936: [0, 0.69444, 0, 0],
      937: [0, 0.69444, 0, 0],
      8211: [0, 0.44444, 0.02778, 0],
      8212: [0, 0.44444, 0.02778, 0],
      8216: [0, 0.69444, 0, 0],
      8217: [0, 0.69444, 0, 0],
      8220: [0, 0.69444, 0, 0],
      8221: [0, 0.69444, 0, 0]
    },
    "Script-Regular": {
      65: [0, 0.7, 0.22925, 0],
      66: [0, 0.7, 0.04087, 0],
      67: [0, 0.7, 0.1689, 0],
      68: [0, 0.7, 0.09371, 0],
      69: [0, 0.7, 0.18583, 0],
      70: [0, 0.7, 0.13634, 0],
      71: [0, 0.7, 0.17322, 0],
      72: [0, 0.7, 0.29694, 0],
      73: [0, 0.7, 0.19189, 0],
      74: [0.27778, 0.7, 0.19189, 0],
      75: [0, 0.7, 0.31259, 0],
      76: [0, 0.7, 0.19189, 0],
      77: [0, 0.7, 0.15981, 0],
      78: [0, 0.7, 0.3525, 0],
      79: [0, 0.7, 0.08078, 0],
      80: [0, 0.7, 0.08078, 0],
      81: [0, 0.7, 0.03305, 0],
      82: [0, 0.7, 0.06259, 0],
      83: [0, 0.7, 0.19189, 0],
      84: [0, 0.7, 0.29087, 0],
      85: [0, 0.7, 0.25815, 0],
      86: [0, 0.7, 0.27523, 0],
      87: [0, 0.7, 0.27523, 0],
      88: [0, 0.7, 0.26006, 0],
      89: [0, 0.7, 0.2939, 0],
      90: [0, 0.7, 0.24037, 0]
    },
    "Size1-Regular": {
      40: [0.35001, 0.85, 0, 0],
      41: [0.35001, 0.85, 0, 0],
      47: [0.35001, 0.85, 0, 0],
      91: [0.35001, 0.85, 0, 0],
      92: [0.35001, 0.85, 0, 0],
      93: [0.35001, 0.85, 0, 0],
      123: [0.35001, 0.85, 0, 0],
      125: [0.35001, 0.85, 0, 0],
      710: [0, 0.72222, 0, 0],
      732: [0, 0.72222, 0, 0],
      770: [0, 0.72222, 0, 0],
      771: [0, 0.72222, 0, 0],
      8214: [-99e-5, 0.601, 0, 0],
      8593: [1e-5, 0.6, 0, 0],
      8595: [1e-5, 0.6, 0, 0],
      8657: [1e-5, 0.6, 0, 0],
      8659: [1e-5, 0.6, 0, 0],
      8719: [0.25001, 0.75, 0, 0],
      8720: [0.25001, 0.75, 0, 0],
      8721: [0.25001, 0.75, 0, 0],
      8730: [0.35001, 0.85, 0, 0],
      8739: [-599e-5, 0.606, 0, 0],
      8741: [-599e-5, 0.606, 0, 0],
      8747: [0.30612, 0.805, 0.19445, 0],
      8748: [0.306, 0.805, 0.19445, 0],
      8749: [0.306, 0.805, 0.19445, 0],
      8750: [0.30612, 0.805, 0.19445, 0],
      8896: [0.25001, 0.75, 0, 0],
      8897: [0.25001, 0.75, 0, 0],
      8898: [0.25001, 0.75, 0, 0],
      8899: [0.25001, 0.75, 0, 0],
      8968: [0.35001, 0.85, 0, 0],
      8969: [0.35001, 0.85, 0, 0],
      8970: [0.35001, 0.85, 0, 0],
      8971: [0.35001, 0.85, 0, 0],
      9168: [-99e-5, 0.601, 0, 0],
      10216: [0.35001, 0.85, 0, 0],
      10217: [0.35001, 0.85, 0, 0],
      10752: [0.25001, 0.75, 0, 0],
      10753: [0.25001, 0.75, 0, 0],
      10754: [0.25001, 0.75, 0, 0],
      10756: [0.25001, 0.75, 0, 0],
      10758: [0.25001, 0.75, 0, 0]
    },
    "Size2-Regular": {
      40: [0.65002, 1.15, 0, 0],
      41: [0.65002, 1.15, 0, 0],
      47: [0.65002, 1.15, 0, 0],
      91: [0.65002, 1.15, 0, 0],
      92: [0.65002, 1.15, 0, 0],
      93: [0.65002, 1.15, 0, 0],
      123: [0.65002, 1.15, 0, 0],
      125: [0.65002, 1.15, 0, 0],
      710: [0, 0.75, 0, 0],
      732: [0, 0.75, 0, 0],
      770: [0, 0.75, 0, 0],
      771: [0, 0.75, 0, 0],
      8719: [0.55001, 1.05, 0, 0],
      8720: [0.55001, 1.05, 0, 0],
      8721: [0.55001, 1.05, 0, 0],
      8730: [0.65002, 1.15, 0, 0],
      8747: [0.86225, 1.36, 0.44445, 0],
      8748: [0.862, 1.36, 0.44445, 0],
      8749: [0.862, 1.36, 0.44445, 0],
      8750: [0.86225, 1.36, 0.44445, 0],
      8896: [0.55001, 1.05, 0, 0],
      8897: [0.55001, 1.05, 0, 0],
      8898: [0.55001, 1.05, 0, 0],
      8899: [0.55001, 1.05, 0, 0],
      8968: [0.65002, 1.15, 0, 0],
      8969: [0.65002, 1.15, 0, 0],
      8970: [0.65002, 1.15, 0, 0],
      8971: [0.65002, 1.15, 0, 0],
      10216: [0.65002, 1.15, 0, 0],
      10217: [0.65002, 1.15, 0, 0],
      10752: [0.55001, 1.05, 0, 0],
      10753: [0.55001, 1.05, 0, 0],
      10754: [0.55001, 1.05, 0, 0],
      10756: [0.55001, 1.05, 0, 0],
      10758: [0.55001, 1.05, 0, 0]
    },
    "Size3-Regular": {
      40: [0.95003, 1.45, 0, 0],
      41: [0.95003, 1.45, 0, 0],
      47: [0.95003, 1.45, 0, 0],
      91: [0.95003, 1.45, 0, 0],
      92: [0.95003, 1.45, 0, 0],
      93: [0.95003, 1.45, 0, 0],
      123: [0.95003, 1.45, 0, 0],
      125: [0.95003, 1.45, 0, 0],
      710: [0, 0.75, 0, 0],
      732: [0, 0.75, 0, 0],
      770: [0, 0.75, 0, 0],
      771: [0, 0.75, 0, 0],
      8730: [0.95003, 1.45, 0, 0],
      8968: [0.95003, 1.45, 0, 0],
      8969: [0.95003, 1.45, 0, 0],
      8970: [0.95003, 1.45, 0, 0],
      8971: [0.95003, 1.45, 0, 0],
      10216: [0.95003, 1.45, 0, 0],
      10217: [0.95003, 1.45, 0, 0]
    },
    "Size4-Regular": {
      40: [1.25003, 1.75, 0, 0],
      41: [1.25003, 1.75, 0, 0],
      47: [1.25003, 1.75, 0, 0],
      91: [1.25003, 1.75, 0, 0],
      92: [1.25003, 1.75, 0, 0],
      93: [1.25003, 1.75, 0, 0],
      123: [1.25003, 1.75, 0, 0],
      125: [1.25003, 1.75, 0, 0],
      710: [0, 0.825, 0, 0],
      732: [0, 0.825, 0, 0],
      770: [0, 0.825, 0, 0],
      771: [0, 0.825, 0, 0],
      8730: [1.25003, 1.75, 0, 0],
      8968: [1.25003, 1.75, 0, 0],
      8969: [1.25003, 1.75, 0, 0],
      8970: [1.25003, 1.75, 0, 0],
      8971: [1.25003, 1.75, 0, 0],
      9115: [0.64502, 1.155, 0, 0],
      9116: [1e-5, 0.6, 0, 0],
      9117: [0.64502, 1.155, 0, 0],
      9118: [0.64502, 1.155, 0, 0],
      9119: [1e-5, 0.6, 0, 0],
      9120: [0.64502, 1.155, 0, 0],
      9121: [0.64502, 1.155, 0, 0],
      9122: [-99e-5, 0.601, 0, 0],
      9123: [0.64502, 1.155, 0, 0],
      9124: [0.64502, 1.155, 0, 0],
      9125: [-99e-5, 0.601, 0, 0],
      9126: [0.64502, 1.155, 0, 0],
      9127: [1e-5, 0.9, 0, 0],
      9128: [0.65002, 1.15, 0, 0],
      9129: [0.90001, 0, 0, 0],
      9130: [0, 0.3, 0, 0],
      9131: [1e-5, 0.9, 0, 0],
      9132: [0.65002, 1.15, 0, 0],
      9133: [0.90001, 0, 0, 0],
      9143: [0.88502, 0.915, 0, 0],
      10216: [1.25003, 1.75, 0, 0],
      10217: [1.25003, 1.75, 0, 0],
      57344: [-499e-5, 0.605, 0, 0],
      57345: [-499e-5, 0.605, 0, 0],
      57680: [0, 0.12, 0, 0],
      57681: [0, 0.12, 0, 0],
      57682: [0, 0.12, 0, 0],
      57683: [0, 0.12, 0, 0]
    },
    "Typewriter-Regular": {
      33: [0, 0.61111, 0, 0],
      34: [0, 0.61111, 0, 0],
      35: [0, 0.61111, 0, 0],
      36: [0.08333, 0.69444, 0, 0],
      37: [0.08333, 0.69444, 0, 0],
      38: [0, 0.61111, 0, 0],
      39: [0, 0.61111, 0, 0],
      40: [0.08333, 0.69444, 0, 0],
      41: [0.08333, 0.69444, 0, 0],
      42: [0, 0.52083, 0, 0],
      43: [-0.08056, 0.53055, 0, 0],
      44: [0.13889, 0.125, 0, 0],
      45: [-0.08056, 0.53055, 0, 0],
      46: [0, 0.125, 0, 0],
      47: [0.08333, 0.69444, 0, 0],
      48: [0, 0.61111, 0, 0],
      49: [0, 0.61111, 0, 0],
      50: [0, 0.61111, 0, 0],
      51: [0, 0.61111, 0, 0],
      52: [0, 0.61111, 0, 0],
      53: [0, 0.61111, 0, 0],
      54: [0, 0.61111, 0, 0],
      55: [0, 0.61111, 0, 0],
      56: [0, 0.61111, 0, 0],
      57: [0, 0.61111, 0, 0],
      58: [0, 0.43056, 0, 0],
      59: [0.13889, 0.43056, 0, 0],
      60: [-0.05556, 0.55556, 0, 0],
      61: [-0.19549, 0.41562, 0, 0],
      62: [-0.05556, 0.55556, 0, 0],
      63: [0, 0.61111, 0, 0],
      64: [0, 0.61111, 0, 0],
      65: [0, 0.61111, 0, 0],
      66: [0, 0.61111, 0, 0],
      67: [0, 0.61111, 0, 0],
      68: [0, 0.61111, 0, 0],
      69: [0, 0.61111, 0, 0],
      70: [0, 0.61111, 0, 0],
      71: [0, 0.61111, 0, 0],
      72: [0, 0.61111, 0, 0],
      73: [0, 0.61111, 0, 0],
      74: [0, 0.61111, 0, 0],
      75: [0, 0.61111, 0, 0],
      76: [0, 0.61111, 0, 0],
      77: [0, 0.61111, 0, 0],
      78: [0, 0.61111, 0, 0],
      79: [0, 0.61111, 0, 0],
      80: [0, 0.61111, 0, 0],
      81: [0.13889, 0.61111, 0, 0],
      82: [0, 0.61111, 0, 0],
      83: [0, 0.61111, 0, 0],
      84: [0, 0.61111, 0, 0],
      85: [0, 0.61111, 0, 0],
      86: [0, 0.61111, 0, 0],
      87: [0, 0.61111, 0, 0],
      88: [0, 0.61111, 0, 0],
      89: [0, 0.61111, 0, 0],
      90: [0, 0.61111, 0, 0],
      91: [0.08333, 0.69444, 0, 0],
      92: [0.08333, 0.69444, 0, 0],
      93: [0.08333, 0.69444, 0, 0],
      94: [0, 0.61111, 0, 0],
      95: [0.09514, 0, 0, 0],
      96: [0, 0.61111, 0, 0],
      97: [0, 0.43056, 0, 0],
      98: [0, 0.61111, 0, 0],
      99: [0, 0.43056, 0, 0],
      100: [0, 0.61111, 0, 0],
      101: [0, 0.43056, 0, 0],
      102: [0, 0.61111, 0, 0],
      103: [0.22222, 0.43056, 0, 0],
      104: [0, 0.61111, 0, 0],
      105: [0, 0.61111, 0, 0],
      106: [0.22222, 0.61111, 0, 0],
      107: [0, 0.61111, 0, 0],
      108: [0, 0.61111, 0, 0],
      109: [0, 0.43056, 0, 0],
      110: [0, 0.43056, 0, 0],
      111: [0, 0.43056, 0, 0],
      112: [0.22222, 0.43056, 0, 0],
      113: [0.22222, 0.43056, 0, 0],
      114: [0, 0.43056, 0, 0],
      115: [0, 0.43056, 0, 0],
      116: [0, 0.55358, 0, 0],
      117: [0, 0.43056, 0, 0],
      118: [0, 0.43056, 0, 0],
      119: [0, 0.43056, 0, 0],
      120: [0, 0.43056, 0, 0],
      121: [0.22222, 0.43056, 0, 0],
      122: [0, 0.43056, 0, 0],
      123: [0.08333, 0.69444, 0, 0],
      124: [0.08333, 0.69444, 0, 0],
      125: [0.08333, 0.69444, 0, 0],
      126: [0, 0.61111, 0, 0],
      127: [0, 0.61111, 0, 0],
      305: [0, 0.43056, 0, 0],
      567: [0.22222, 0.43056, 0, 0],
      768: [0, 0.61111, 0, 0],
      769: [0, 0.61111, 0, 0],
      770: [0, 0.61111, 0, 0],
      771: [0, 0.61111, 0, 0],
      772: [0, 0.56555, 0, 0],
      774: [0, 0.61111, 0, 0],
      776: [0, 0.61111, 0, 0],
      778: [0, 0.61111, 0, 0],
      780: [0, 0.56597, 0, 0],
      915: [0, 0.61111, 0, 0],
      916: [0, 0.61111, 0, 0],
      920: [0, 0.61111, 0, 0],
      923: [0, 0.61111, 0, 0],
      926: [0, 0.61111, 0, 0],
      928: [0, 0.61111, 0, 0],
      931: [0, 0.61111, 0, 0],
      933: [0, 0.61111, 0, 0],
      934: [0, 0.61111, 0, 0],
      936: [0, 0.61111, 0, 0],
      937: [0, 0.61111, 0, 0],
      2018: [0, 0.61111, 0, 0],
      2019: [0, 0.61111, 0, 0],
      8242: [0, 0.61111, 0, 0]
    }
  }), ta;
}
var na, cu;
function Xn() {
  if (cu)
    return na;
  cu = 1;
  var t2 = Ir(), e2 = 0.431, n = 1, i2 = 0.677, r2 = 0.394, a2 = 0.444, s2 = 0.686, o2 = 0.345, l2 = 0.413, u2 = 0.363, _ = 0.289, d2 = 0.15, f2 = 0.247, b = 0.386, c2 = 0.05, E2 = 2.39, g2 = 1.01, S = 0.81, p2 = 0.71, m2 = 0.25, R2 = 0.04, T = 0.111, h2 = 0.166, C2 = 0.2, A2 = 0.6, I2 = 0.1, v2 = 10, x = 2 / v2, M = {
    xHeight: e2,
    quad: n,
    num1: i2,
    num2: r2,
    num3: a2,
    denom1: s2,
    denom2: o2,
    sup1: l2,
    sup2: u2,
    sup3: _,
    sub1: d2,
    sub2: f2,
    supDrop: b,
    subDrop: c2,
    axisHeight: m2,
    defaultRuleThickness: R2,
    bigOpSpacing1: T,
    bigOpSpacing2: h2,
    bigOpSpacing3: C2,
    bigOpSpacing4: A2,
    bigOpSpacing5: I2,
    ptPerEm: v2,
    emPerEx: e2 / n,
    doubleRuleSep: x,
    // TODO(alpert): Missing parallel structure here. We should probably add
    // style-specific metrics for all of these.
    delim1: E2,
    getDelim2: function(D) {
      if (D.size === t2.TEXT.size)
        return g2;
      if (D.size === t2.SCRIPT.size)
        return S;
      if (D.size === t2.SCRIPTSCRIPT.size)
        return p2;
      throw new Error("Unexpected style size: " + D.size);
    }
  }, B2 = eh(), G2 = function(D, w) {
    var L = B2[w][D.charCodeAt(0)];
    if (L)
      return {
        depth: L[0],
        height: L[1],
        italic: L[2],
        skew: L[3],
        width: L[4]
      };
  };
  return na = {
    metrics: M,
    getCharacterMetrics: G2
  }, na;
}
var ra = { exports: {} }, uu;
function Dr() {
  return uu || (uu = 1, function(t2) {
    t2.exports = {
      math: {},
      text: {}
    };
    function e2(h2, C2, A2, I2, v2) {
      t2.exports[h2][v2] = {
        font: C2,
        group: A2,
        replace: I2
      };
    }
    var n = "math", i2 = "text", r2 = "main", a2 = "ams", s2 = "accent", o2 = "bin", l2 = "close", u2 = "inner", _ = "mathord", d2 = "op", f2 = "open", b = "punct", c2 = "rel", E2 = "spacing", g2 = "textord";
    e2(n, r2, c2, "≡", "\\equiv"), e2(n, r2, c2, "≺", "\\prec"), e2(n, r2, c2, "≻", "\\succ"), e2(n, r2, c2, "∼", "\\sim"), e2(n, r2, c2, "⊥", "\\perp"), e2(n, r2, c2, "⪯", "\\preceq"), e2(n, r2, c2, "⪰", "\\succeq"), e2(n, r2, c2, "≃", "\\simeq"), e2(n, r2, c2, "∣", "\\mid"), e2(n, r2, c2, "≪", "\\ll"), e2(n, r2, c2, "≫", "\\gg"), e2(n, r2, c2, "≍", "\\asymp"), e2(n, r2, c2, "∥", "\\parallel"), e2(n, r2, c2, "⋈", "\\bowtie"), e2(n, r2, c2, "⌣", "\\smile"), e2(n, r2, c2, "⊑", "\\sqsubseteq"), e2(n, r2, c2, "⊒", "\\sqsupseteq"), e2(n, r2, c2, "≐", "\\doteq"), e2(n, r2, c2, "⌢", "\\frown"), e2(n, r2, c2, "∋", "\\ni"), e2(n, r2, c2, "∝", "\\propto"), e2(n, r2, c2, "⊢", "\\vdash"), e2(n, r2, c2, "⊣", "\\dashv"), e2(n, r2, c2, "∋", "\\owns"), e2(n, r2, b, ".", "\\ldotp"), e2(n, r2, b, "⋅", "\\cdotp"), e2(n, r2, g2, "#", "\\#"), e2(n, r2, g2, "&", "\\&"), e2(n, r2, g2, "ℵ", "\\aleph"), e2(n, r2, g2, "∀", "\\forall"), e2(n, r2, g2, "ℏ", "\\hbar"), e2(n, r2, g2, "∃", "\\exists"), e2(n, r2, g2, "∇", "\\nabla"), e2(n, r2, g2, "♭", "\\flat"), e2(n, r2, g2, "ℓ", "\\ell"), e2(n, r2, g2, "♮", "\\natural"), e2(n, r2, g2, "♣", "\\clubsuit"), e2(n, r2, g2, "℘", "\\wp"), e2(n, r2, g2, "♯", "\\sharp"), e2(n, r2, g2, "♢", "\\diamondsuit"), e2(n, r2, g2, "ℜ", "\\Re"), e2(n, r2, g2, "♡", "\\heartsuit"), e2(n, r2, g2, "ℑ", "\\Im"), e2(n, r2, g2, "♠", "\\spadesuit"), e2(n, r2, g2, "†", "\\dag"), e2(n, r2, g2, "‡", "\\ddag"), e2(n, r2, l2, "⎱", "\\rmoustache"), e2(n, r2, f2, "⎰", "\\lmoustache"), e2(n, r2, l2, "⟯", "\\rgroup"), e2(n, r2, f2, "⟮", "\\lgroup"), e2(n, r2, o2, "∓", "\\mp"), e2(n, r2, o2, "⊖", "\\ominus"), e2(n, r2, o2, "⊎", "\\uplus"), e2(n, r2, o2, "⊓", "\\sqcap"), e2(n, r2, o2, "∗", "\\ast"), e2(n, r2, o2, "⊔", "\\sqcup"), e2(n, r2, o2, "◯", "\\bigcirc"), e2(n, r2, o2, "∙", "\\bullet"), e2(n, r2, o2, "‡", "\\ddagger"), e2(n, r2, o2, "≀", "\\wr"), e2(n, r2, o2, "⨿", "\\amalg"), e2(n, r2, c2, "⟵", "\\longleftarrow"), e2(n, r2, c2, "⇐", "\\Leftarrow"), e2(n, r2, c2, "⟸", "\\Longleftarrow"), e2(n, r2, c2, "⟶", "\\longrightarrow"), e2(n, r2, c2, "⇒", "\\Rightarrow"), e2(n, r2, c2, "⟹", "\\Longrightarrow"), e2(n, r2, c2, "↔", "\\leftrightarrow"), e2(n, r2, c2, "⟷", "\\longleftrightarrow"), e2(n, r2, c2, "⇔", "\\Leftrightarrow"), e2(n, r2, c2, "⟺", "\\Longleftrightarrow"), e2(n, r2, c2, "↦", "\\mapsto"), e2(n, r2, c2, "⟼", "\\longmapsto"), e2(n, r2, c2, "↗", "\\nearrow"), e2(n, r2, c2, "↩", "\\hookleftarrow"), e2(n, r2, c2, "↪", "\\hookrightarrow"), e2(n, r2, c2, "↘", "\\searrow"), e2(n, r2, c2, "↼", "\\leftharpoonup"), e2(n, r2, c2, "⇀", "\\rightharpoonup"), e2(n, r2, c2, "↙", "\\swarrow"), e2(n, r2, c2, "↽", "\\leftharpoondown"), e2(n, r2, c2, "⇁", "\\rightharpoondown"), e2(n, r2, c2, "↖", "\\nwarrow"), e2(n, r2, c2, "⇌", "\\rightleftharpoons"), e2(n, a2, c2, "≮", "\\nless"), e2(n, a2, c2, "", "\\nleqslant"), e2(n, a2, c2, "", "\\nleqq"), e2(n, a2, c2, "⪇", "\\lneq"), e2(n, a2, c2, "≨", "\\lneqq"), e2(n, a2, c2, "", "\\lvertneqq"), e2(n, a2, c2, "⋦", "\\lnsim"), e2(n, a2, c2, "⪉", "\\lnapprox"), e2(n, a2, c2, "⊀", "\\nprec"), e2(n, a2, c2, "⋠", "\\npreceq"), e2(n, a2, c2, "⋨", "\\precnsim"), e2(n, a2, c2, "⪹", "\\precnapprox"), e2(n, a2, c2, "≁", "\\nsim"), e2(n, a2, c2, "", "\\nshortmid"), e2(n, a2, c2, "∤", "\\nmid"), e2(n, a2, c2, "⊬", "\\nvdash"), e2(n, a2, c2, "⊭", "\\nvDash"), e2(n, a2, c2, "⋪", "\\ntriangleleft"), e2(n, a2, c2, "⋬", "\\ntrianglelefteq"), e2(n, a2, c2, "⊊", "\\subsetneq"), e2(n, a2, c2, "", "\\varsubsetneq"), e2(n, a2, c2, "⫋", "\\subsetneqq"), e2(n, a2, c2, "", "\\varsubsetneqq"), e2(n, a2, c2, "≯", "\\ngtr"), e2(n, a2, c2, "", "\\ngeqslant"), e2(n, a2, c2, "", "\\ngeqq"), e2(n, a2, c2, "⪈", "\\gneq"), e2(n, a2, c2, "≩", "\\gneqq"), e2(n, a2, c2, "", "\\gvertneqq"), e2(n, a2, c2, "⋧", "\\gnsim"), e2(n, a2, c2, "⪊", "\\gnapprox"), e2(n, a2, c2, "⊁", "\\nsucc"), e2(n, a2, c2, "⋡", "\\nsucceq"), e2(n, a2, c2, "⋩", "\\succnsim"), e2(n, a2, c2, "⪺", "\\succnapprox"), e2(n, a2, c2, "≆", "\\ncong"), e2(n, a2, c2, "", "\\nshortparallel"), e2(n, a2, c2, "∦", "\\nparallel"), e2(n, a2, c2, "⊯", "\\nVDash"), e2(n, a2, c2, "⋫", "\\ntriangleright"), e2(n, a2, c2, "⋭", "\\ntrianglerighteq"), e2(n, a2, c2, "", "\\nsupseteqq"), e2(n, a2, c2, "⊋", "\\supsetneq"), e2(n, a2, c2, "", "\\varsupsetneq"), e2(n, a2, c2, "⫌", "\\supsetneqq"), e2(n, a2, c2, "", "\\varsupsetneqq"), e2(n, a2, c2, "⊮", "\\nVdash"), e2(n, a2, c2, "⪵", "\\precneqq"), e2(n, a2, c2, "⪶", "\\succneqq"), e2(n, a2, c2, "", "\\nsubseteqq"), e2(n, a2, o2, "⊴", "\\unlhd"), e2(n, a2, o2, "⊵", "\\unrhd"), e2(n, a2, c2, "↚", "\\nleftarrow"), e2(n, a2, c2, "↛", "\\nrightarrow"), e2(n, a2, c2, "⇍", "\\nLeftarrow"), e2(n, a2, c2, "⇏", "\\nRightarrow"), e2(n, a2, c2, "↮", "\\nleftrightarrow"), e2(n, a2, c2, "⇎", "\\nLeftrightarrow"), e2(n, a2, c2, "△", "\\vartriangle"), e2(n, a2, g2, "ℏ", "\\hslash"), e2(n, a2, g2, "▽", "\\triangledown"), e2(n, a2, g2, "◊", "\\lozenge"), e2(n, a2, g2, "Ⓢ", "\\circledS"), e2(n, a2, g2, "®", "\\circledR"), e2(n, a2, g2, "∡", "\\measuredangle"), e2(n, a2, g2, "∄", "\\nexists"), e2(n, a2, g2, "℧", "\\mho"), e2(n, a2, g2, "Ⅎ", "\\Finv"), e2(n, a2, g2, "⅁", "\\Game"), e2(n, a2, g2, "k", "\\Bbbk"), e2(n, a2, g2, "‵", "\\backprime"), e2(n, a2, g2, "▲", "\\blacktriangle"), e2(n, a2, g2, "▼", "\\blacktriangledown"), e2(n, a2, g2, "■", "\\blacksquare"), e2(n, a2, g2, "⧫", "\\blacklozenge"), e2(n, a2, g2, "★", "\\bigstar"), e2(n, a2, g2, "∢", "\\sphericalangle"), e2(n, a2, g2, "∁", "\\complement"), e2(n, a2, g2, "ð", "\\eth"), e2(n, a2, g2, "╱", "\\diagup"), e2(n, a2, g2, "╲", "\\diagdown"), e2(n, a2, g2, "□", "\\square"), e2(n, a2, g2, "□", "\\Box"), e2(n, a2, g2, "◊", "\\Diamond"), e2(n, a2, g2, "¥", "\\yen"), e2(n, a2, g2, "✓", "\\checkmark"), e2(n, a2, g2, "ℶ", "\\beth"), e2(n, a2, g2, "ℸ", "\\daleth"), e2(n, a2, g2, "ℷ", "\\gimel"), e2(n, a2, g2, "ϝ", "\\digamma"), e2(n, a2, g2, "ϰ", "\\varkappa"), e2(n, a2, f2, "┌", "\\ulcorner"), e2(n, a2, l2, "┐", "\\urcorner"), e2(n, a2, f2, "└", "\\llcorner"), e2(n, a2, l2, "┘", "\\lrcorner"), e2(n, a2, c2, "≦", "\\leqq"), e2(n, a2, c2, "⩽", "\\leqslant"), e2(n, a2, c2, "⪕", "\\eqslantless"), e2(n, a2, c2, "≲", "\\lesssim"), e2(n, a2, c2, "⪅", "\\lessapprox"), e2(n, a2, c2, "≊", "\\approxeq"), e2(n, a2, o2, "⋖", "\\lessdot"), e2(n, a2, c2, "⋘", "\\lll"), e2(n, a2, c2, "≶", "\\lessgtr"), e2(n, a2, c2, "⋚", "\\lesseqgtr"), e2(n, a2, c2, "⪋", "\\lesseqqgtr"), e2(n, a2, c2, "≑", "\\doteqdot"), e2(n, a2, c2, "≓", "\\risingdotseq"), e2(n, a2, c2, "≒", "\\fallingdotseq"), e2(n, a2, c2, "∽", "\\backsim"), e2(n, a2, c2, "⋍", "\\backsimeq"), e2(n, a2, c2, "⫅", "\\subseteqq"), e2(n, a2, c2, "⋐", "\\Subset"), e2(n, a2, c2, "⊏", "\\sqsubset"), e2(n, a2, c2, "≼", "\\preccurlyeq"), e2(n, a2, c2, "⋞", "\\curlyeqprec"), e2(n, a2, c2, "≾", "\\precsim"), e2(n, a2, c2, "⪷", "\\precapprox"), e2(n, a2, c2, "⊲", "\\vartriangleleft"), e2(n, a2, c2, "⊴", "\\trianglelefteq"), e2(n, a2, c2, "⊨", "\\vDash"), e2(n, a2, c2, "⊪", "\\Vvdash"), e2(n, a2, c2, "⌣", "\\smallsmile"), e2(n, a2, c2, "⌢", "\\smallfrown"), e2(n, a2, c2, "≏", "\\bumpeq"), e2(n, a2, c2, "≎", "\\Bumpeq"), e2(n, a2, c2, "≧", "\\geqq"), e2(n, a2, c2, "⩾", "\\geqslant"), e2(n, a2, c2, "⪖", "\\eqslantgtr"), e2(n, a2, c2, "≳", "\\gtrsim"), e2(n, a2, c2, "⪆", "\\gtrapprox"), e2(n, a2, o2, "⋗", "\\gtrdot"), e2(n, a2, c2, "⋙", "\\ggg"), e2(n, a2, c2, "≷", "\\gtrless"), e2(n, a2, c2, "⋛", "\\gtreqless"), e2(n, a2, c2, "⪌", "\\gtreqqless"), e2(n, a2, c2, "≖", "\\eqcirc"), e2(n, a2, c2, "≗", "\\circeq"), e2(n, a2, c2, "≜", "\\triangleq"), e2(n, a2, c2, "∼", "\\thicksim"), e2(n, a2, c2, "≈", "\\thickapprox"), e2(n, a2, c2, "⫆", "\\supseteqq"), e2(n, a2, c2, "⋑", "\\Supset"), e2(n, a2, c2, "⊐", "\\sqsupset"), e2(n, a2, c2, "≽", "\\succcurlyeq"), e2(n, a2, c2, "⋟", "\\curlyeqsucc"), e2(n, a2, c2, "≿", "\\succsim"), e2(n, a2, c2, "⪸", "\\succapprox"), e2(n, a2, c2, "⊳", "\\vartriangleright"), e2(n, a2, c2, "⊵", "\\trianglerighteq"), e2(n, a2, c2, "⊩", "\\Vdash"), e2(n, a2, c2, "∣", "\\shortmid"), e2(n, a2, c2, "∥", "\\shortparallel"), e2(n, a2, c2, "≬", "\\between"), e2(n, a2, c2, "⋔", "\\pitchfork"), e2(n, a2, c2, "∝", "\\varpropto"), e2(n, a2, c2, "◀", "\\blacktriangleleft"), e2(n, a2, c2, "∴", "\\therefore"), e2(n, a2, c2, "∍", "\\backepsilon"), e2(n, a2, c2, "▶", "\\blacktriangleright"), e2(n, a2, c2, "∵", "\\because"), e2(n, a2, c2, "⋘", "\\llless"), e2(n, a2, c2, "⋙", "\\gggtr"), e2(n, a2, o2, "⊲", "\\lhd"), e2(n, a2, o2, "⊳", "\\rhd"), e2(n, a2, c2, "≂", "\\eqsim"), e2(n, r2, c2, "⋈", "\\Join"), e2(n, a2, c2, "≑", "\\Doteq"), e2(n, a2, o2, "∔", "\\dotplus"), e2(n, a2, o2, "∖", "\\smallsetminus"), e2(n, a2, o2, "⋒", "\\Cap"), e2(n, a2, o2, "⋓", "\\Cup"), e2(n, a2, o2, "⩞", "\\doublebarwedge"), e2(n, a2, o2, "⊟", "\\boxminus"), e2(n, a2, o2, "⊞", "\\boxplus"), e2(n, a2, o2, "⋇", "\\divideontimes"), e2(n, a2, o2, "⋉", "\\ltimes"), e2(n, a2, o2, "⋊", "\\rtimes"), e2(n, a2, o2, "⋋", "\\leftthreetimes"), e2(n, a2, o2, "⋌", "\\rightthreetimes"), e2(n, a2, o2, "⋏", "\\curlywedge"), e2(n, a2, o2, "⋎", "\\curlyvee"), e2(n, a2, o2, "⊝", "\\circleddash"), e2(n, a2, o2, "⊛", "\\circledast"), e2(n, a2, o2, "⋅", "\\centerdot"), e2(n, a2, o2, "⊺", "\\intercal"), e2(n, a2, o2, "⋒", "\\doublecap"), e2(n, a2, o2, "⋓", "\\doublecup"), e2(n, a2, o2, "⊠", "\\boxtimes"), e2(n, a2, c2, "⇢", "\\dashrightarrow"), e2(n, a2, c2, "⇠", "\\dashleftarrow"), e2(n, a2, c2, "⇇", "\\leftleftarrows"), e2(n, a2, c2, "⇆", "\\leftrightarrows"), e2(n, a2, c2, "⇚", "\\Lleftarrow"), e2(n, a2, c2, "↞", "\\twoheadleftarrow"), e2(n, a2, c2, "↢", "\\leftarrowtail"), e2(n, a2, c2, "↫", "\\looparrowleft"), e2(n, a2, c2, "⇋", "\\leftrightharpoons"), e2(n, a2, c2, "↶", "\\curvearrowleft"), e2(n, a2, c2, "↺", "\\circlearrowleft"), e2(n, a2, c2, "↰", "\\Lsh"), e2(n, a2, c2, "⇈", "\\upuparrows"), e2(n, a2, c2, "↿", "\\upharpoonleft"), e2(n, a2, c2, "⇃", "\\downharpoonleft"), e2(n, a2, c2, "⊸", "\\multimap"), e2(n, a2, c2, "↭", "\\leftrightsquigarrow"), e2(n, a2, c2, "⇉", "\\rightrightarrows"), e2(n, a2, c2, "⇄", "\\rightleftarrows"), e2(n, a2, c2, "↠", "\\twoheadrightarrow"), e2(n, a2, c2, "↣", "\\rightarrowtail"), e2(n, a2, c2, "↬", "\\looparrowright"), e2(n, a2, c2, "↷", "\\curvearrowright"), e2(n, a2, c2, "↻", "\\circlearrowright"), e2(n, a2, c2, "↱", "\\Rsh"), e2(n, a2, c2, "⇊", "\\downdownarrows"), e2(n, a2, c2, "↾", "\\upharpoonright"), e2(n, a2, c2, "⇂", "\\downharpoonright"), e2(n, a2, c2, "⇝", "\\rightsquigarrow"), e2(n, a2, c2, "⇝", "\\leadsto"), e2(n, a2, c2, "⇛", "\\Rrightarrow"), e2(n, a2, c2, "↾", "\\restriction"), e2(n, r2, g2, "‘", "`"), e2(n, r2, g2, "$", "\\$"), e2(n, r2, g2, "%", "\\%"), e2(n, r2, g2, "_", "\\_"), e2(n, r2, g2, "∠", "\\angle"), e2(n, r2, g2, "∞", "\\infty"), e2(n, r2, g2, "′", "\\prime"), e2(n, r2, g2, "△", "\\triangle"), e2(n, r2, g2, "Γ", "\\Gamma"), e2(n, r2, g2, "Δ", "\\Delta"), e2(n, r2, g2, "Θ", "\\Theta"), e2(n, r2, g2, "Λ", "\\Lambda"), e2(n, r2, g2, "Ξ", "\\Xi"), e2(n, r2, g2, "Π", "\\Pi"), e2(n, r2, g2, "Σ", "\\Sigma"), e2(n, r2, g2, "Υ", "\\Upsilon"), e2(n, r2, g2, "Φ", "\\Phi"), e2(n, r2, g2, "Ψ", "\\Psi"), e2(n, r2, g2, "Ω", "\\Omega"), e2(n, r2, g2, "¬", "\\neg"), e2(n, r2, g2, "¬", "\\lnot"), e2(n, r2, g2, "⊤", "\\top"), e2(n, r2, g2, "⊥", "\\bot"), e2(n, r2, g2, "∅", "\\emptyset"), e2(n, a2, g2, "∅", "\\varnothing"), e2(n, r2, _, "α", "\\alpha"), e2(n, r2, _, "β", "\\beta"), e2(n, r2, _, "γ", "\\gamma"), e2(n, r2, _, "δ", "\\delta"), e2(n, r2, _, "ϵ", "\\epsilon"), e2(n, r2, _, "ζ", "\\zeta"), e2(n, r2, _, "η", "\\eta"), e2(n, r2, _, "θ", "\\theta"), e2(n, r2, _, "ι", "\\iota"), e2(n, r2, _, "κ", "\\kappa"), e2(n, r2, _, "λ", "\\lambda"), e2(n, r2, _, "μ", "\\mu"), e2(n, r2, _, "ν", "\\nu"), e2(n, r2, _, "ξ", "\\xi"), e2(n, r2, _, "o", "\\omicron"), e2(n, r2, _, "π", "\\pi"), e2(n, r2, _, "ρ", "\\rho"), e2(n, r2, _, "σ", "\\sigma"), e2(n, r2, _, "τ", "\\tau"), e2(n, r2, _, "υ", "\\upsilon"), e2(n, r2, _, "ϕ", "\\phi"), e2(n, r2, _, "χ", "\\chi"), e2(n, r2, _, "ψ", "\\psi"), e2(n, r2, _, "ω", "\\omega"), e2(n, r2, _, "ε", "\\varepsilon"), e2(n, r2, _, "ϑ", "\\vartheta"), e2(n, r2, _, "ϖ", "\\varpi"), e2(n, r2, _, "ϱ", "\\varrho"), e2(n, r2, _, "ς", "\\varsigma"), e2(n, r2, _, "φ", "\\varphi"), e2(n, r2, o2, "∗", "*"), e2(n, r2, o2, "+", "+"), e2(n, r2, o2, "−", "-"), e2(n, r2, o2, "⋅", "\\cdot"), e2(n, r2, o2, "∘", "\\circ"), e2(n, r2, o2, "÷", "\\div"), e2(n, r2, o2, "±", "\\pm"), e2(n, r2, o2, "×", "\\times"), e2(n, r2, o2, "∩", "\\cap"), e2(n, r2, o2, "∪", "\\cup"), e2(n, r2, o2, "∖", "\\setminus"), e2(n, r2, o2, "∧", "\\land"), e2(n, r2, o2, "∨", "\\lor"), e2(n, r2, o2, "∧", "\\wedge"), e2(n, r2, o2, "∨", "\\vee"), e2(n, r2, g2, "√", "\\surd"), e2(n, r2, f2, "(", "("), e2(n, r2, f2, "[", "["), e2(n, r2, f2, "⟨", "\\langle"), e2(n, r2, f2, "∣", "\\lvert"), e2(n, r2, f2, "∥", "\\lVert"), e2(n, r2, l2, ")", ")"), e2(n, r2, l2, "]", "]"), e2(n, r2, l2, "?", "?"), e2(n, r2, l2, "!", "!"), e2(n, r2, l2, "⟩", "\\rangle"), e2(n, r2, l2, "∣", "\\rvert"), e2(n, r2, l2, "∥", "\\rVert"), e2(n, r2, c2, "=", "="), e2(n, r2, c2, "<", "<"), e2(n, r2, c2, ">", ">"), e2(n, r2, c2, ":", ":"), e2(n, r2, c2, "≈", "\\approx"), e2(n, r2, c2, "≅", "\\cong"), e2(n, r2, c2, "≥", "\\ge"), e2(n, r2, c2, "≥", "\\geq"), e2(n, r2, c2, "←", "\\gets"), e2(n, r2, c2, ">", "\\gt"), e2(n, r2, c2, "∈", "\\in"), e2(n, r2, c2, "∉", "\\notin"), e2(n, r2, c2, "⊂", "\\subset"), e2(n, r2, c2, "⊃", "\\supset"), e2(n, r2, c2, "⊆", "\\subseteq"), e2(n, r2, c2, "⊇", "\\supseteq"), e2(n, a2, c2, "⊈", "\\nsubseteq"), e2(n, a2, c2, "⊉", "\\nsupseteq"), e2(n, r2, c2, "⊨", "\\models"), e2(n, r2, c2, "←", "\\leftarrow"), e2(n, r2, c2, "≤", "\\le"), e2(n, r2, c2, "≤", "\\leq"), e2(n, r2, c2, "<", "\\lt"), e2(n, r2, c2, "≠", "\\ne"), e2(n, r2, c2, "≠", "\\neq"), e2(n, r2, c2, "→", "\\rightarrow"), e2(n, r2, c2, "→", "\\to"), e2(n, a2, c2, "≱", "\\ngeq"), e2(n, a2, c2, "≰", "\\nleq"), e2(n, r2, E2, null, "\\!"), e2(n, r2, E2, " ", "\\ "), e2(n, r2, E2, " ", "~"), e2(n, r2, E2, null, "\\,"), e2(n, r2, E2, null, "\\:"), e2(n, r2, E2, null, "\\;"), e2(n, r2, E2, null, "\\enspace"), e2(n, r2, E2, null, "\\qquad"), e2(n, r2, E2, null, "\\quad"), e2(n, r2, E2, " ", "\\space"), e2(n, r2, b, ",", ","), e2(n, r2, b, ";", ";"), e2(n, r2, b, ":", "\\colon"), e2(n, a2, o2, "⊼", "\\barwedge"), e2(n, a2, o2, "⊻", "\\veebar"), e2(n, r2, o2, "⊙", "\\odot"), e2(n, r2, o2, "⊕", "\\oplus"), e2(n, r2, o2, "⊗", "\\otimes"), e2(n, r2, g2, "∂", "\\partial"), e2(n, r2, o2, "⊘", "\\oslash"), e2(n, a2, o2, "⊚", "\\circledcirc"), e2(n, a2, o2, "⊡", "\\boxdot"), e2(n, r2, o2, "△", "\\bigtriangleup"), e2(n, r2, o2, "▽", "\\bigtriangledown"), e2(n, r2, o2, "†", "\\dagger"), e2(n, r2, o2, "⋄", "\\diamond"), e2(n, r2, o2, "⋆", "\\star"), e2(n, r2, o2, "◃", "\\triangleleft"), e2(n, r2, o2, "▹", "\\triangleright"), e2(n, r2, f2, "{", "\\{"), e2(n, r2, l2, "}", "\\}"), e2(n, r2, f2, "{", "\\lbrace"), e2(n, r2, l2, "}", "\\rbrace"), e2(n, r2, f2, "[", "\\lbrack"), e2(n, r2, l2, "]", "\\rbrack"), e2(n, r2, f2, "⌊", "\\lfloor"), e2(n, r2, l2, "⌋", "\\rfloor"), e2(n, r2, f2, "⌈", "\\lceil"), e2(n, r2, l2, "⌉", "\\rceil"), e2(n, r2, g2, "\\", "\\backslash"), e2(n, r2, g2, "∣", "|"), e2(n, r2, g2, "∣", "\\vert"), e2(n, r2, g2, "∥", "\\|"), e2(n, r2, g2, "∥", "\\Vert"), e2(n, r2, c2, "↑", "\\uparrow"), e2(n, r2, c2, "⇑", "\\Uparrow"), e2(n, r2, c2, "↓", "\\downarrow"), e2(n, r2, c2, "⇓", "\\Downarrow"), e2(n, r2, c2, "↕", "\\updownarrow"), e2(n, r2, c2, "⇕", "\\Updownarrow"), e2(n, n, d2, "∐", "\\coprod"), e2(n, n, d2, "⋁", "\\bigvee"), e2(n, n, d2, "⋀", "\\bigwedge"), e2(n, n, d2, "⨄", "\\biguplus"), e2(n, n, d2, "⋂", "\\bigcap"), e2(n, n, d2, "⋃", "\\bigcup"), e2(n, n, d2, "∫", "\\int"), e2(n, n, d2, "∫", "\\intop"), e2(n, n, d2, "∬", "\\iint"), e2(n, n, d2, "∭", "\\iiint"), e2(n, n, d2, "∏", "\\prod"), e2(n, n, d2, "∑", "\\sum"), e2(n, n, d2, "⨂", "\\bigotimes"), e2(n, n, d2, "⨁", "\\bigoplus"), e2(n, n, d2, "⨀", "\\bigodot"), e2(n, n, d2, "∮", "\\oint"), e2(n, n, d2, "⨆", "\\bigsqcup"), e2(n, n, d2, "∫", "\\smallint"), e2(n, r2, u2, "…", "\\ldots"), e2(n, r2, u2, "⋯", "\\cdots"), e2(n, r2, u2, "⋱", "\\ddots"), e2(n, r2, g2, "⋮", "\\vdots"), e2(n, r2, s2, "´", "\\acute"), e2(n, r2, s2, "`", "\\grave"), e2(n, r2, s2, "¨", "\\ddot"), e2(n, r2, s2, "~", "\\tilde"), e2(n, r2, s2, "¯", "\\bar"), e2(n, r2, s2, "˘", "\\breve"), e2(n, r2, s2, "ˇ", "\\check"), e2(n, r2, s2, "^", "\\hat"), e2(n, r2, s2, "⃗", "\\vec"), e2(n, r2, s2, "˙", "\\dot"), e2(n, r2, _, "ı", "\\imath"), e2(n, r2, _, "ȷ", "\\jmath"), e2(i2, r2, E2, " ", "\\ "), e2(i2, r2, E2, " ", " "), e2(i2, r2, E2, " ", "~");
    var S, p2, m2 = '0123456789/@."';
    for (S = 0; S < m2.length; S++)
      p2 = m2.charAt(S), e2(n, r2, g2, p2, p2);
    var R2 = "0123456789`!@*()-=+[]'\";:?/.,";
    for (S = 0; S < R2.length; S++)
      p2 = R2.charAt(S), e2(i2, r2, g2, p2, p2);
    var T = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    for (S = 0; S < T.length; S++)
      p2 = T.charAt(S), e2(n, r2, _, p2, p2), e2(i2, r2, g2, p2, p2);
  }(ra)), ra.exports;
}
var aa, _u;
function xr() {
  if (_u)
    return aa;
  _u = 1;
  var t2 = f0(), e2 = Xn(), n = Dr(), i2 = Ht$1(), r2 = [
    "\\Gamma",
    "\\Delta",
    "\\Theta",
    "\\Lambda",
    "\\Xi",
    "\\Pi",
    "\\Sigma",
    "\\Upsilon",
    "\\Phi",
    "\\Psi",
    "\\Omega"
  ], a2 = [
    "ı",
    // dotless i, \imath
    "ȷ"
    // dotless j, \jmath
  ], s2 = function(m2, R2, T, h2, C2) {
    n[T][m2] && n[T][m2].replace && (m2 = n[T][m2].replace);
    var A2 = e2.getCharacterMetrics(m2, R2), I2;
    return A2 ? I2 = new t2.symbolNode(
      m2,
      A2.height,
      A2.depth,
      A2.italic,
      A2.skew,
      C2
    ) : (typeof console < "u" && console.warn(
      "No character metrics for '" + m2 + "' in style '" + R2 + "'"
    ), I2 = new t2.symbolNode(m2, 0, 0, 0, 0, C2)), h2 && (I2.style.color = h2), I2;
  }, o2 = function(m2, R2, T, h2) {
    return m2 === "\\" || n[R2][m2].font === "main" ? s2(m2, "Main-Regular", R2, T, h2) : s2(
      m2,
      "AMS-Regular",
      R2,
      T,
      h2.concat(["amsrm"])
    );
  }, l2 = function(m2, R2, T, h2, C2) {
    if (C2 === "mathord")
      return u2(m2, R2, T, h2);
    if (C2 === "textord")
      return s2(
        m2,
        "Main-Regular",
        R2,
        T,
        h2.concat(["mathrm"])
      );
    throw new Error("unexpected type: " + C2 + " in mathDefault");
  }, u2 = function(m2, R2, T, h2) {
    return /[0-9]/.test(m2.charAt(0)) || // glyphs for \imath and \jmath do not exist in Math-Italic so we
    // need to use Main-Italic instead
    i2.contains(a2, m2) || i2.contains(r2, m2) ? s2(
      m2,
      "Main-Italic",
      R2,
      T,
      h2.concat(["mainit"])
    ) : s2(
      m2,
      "Math-Italic",
      R2,
      T,
      h2.concat(["mathit"])
    );
  }, _ = function(m2, R2, T) {
    var h2 = m2.mode, C2 = m2.value;
    n[h2][C2] && n[h2][C2].replace && (C2 = n[h2][C2].replace);
    var A2 = ["mord"], I2 = R2.getColor(), v2 = R2.font;
    if (v2) {
      if (v2 === "mathit" || i2.contains(a2, C2))
        return u2(C2, h2, I2, A2);
      var x = p2[v2].fontName;
      return e2.getCharacterMetrics(C2, x) ? s2(
        C2,
        x,
        h2,
        I2,
        A2.concat([v2])
      ) : l2(C2, h2, I2, A2, T);
    } else
      return l2(C2, h2, I2, A2, T);
  }, d2 = function(m2) {
    var R2 = 0, T = 0, h2 = 0;
    if (m2.children)
      for (var C2 = 0; C2 < m2.children.length; C2++)
        m2.children[C2].height > R2 && (R2 = m2.children[C2].height), m2.children[C2].depth > T && (T = m2.children[C2].depth), m2.children[C2].maxFontSize > h2 && (h2 = m2.children[C2].maxFontSize);
    m2.height = R2, m2.depth = T, m2.maxFontSize = h2;
  }, f2 = function(m2, R2, T) {
    var h2 = new t2.span(m2, R2);
    return d2(h2), T && (h2.style.color = T), h2;
  }, b = function(m2) {
    var R2 = new t2.documentFragment(m2);
    return d2(R2), R2;
  }, c2 = function(m2, R2) {
    var T = f2([], [new t2.symbolNode("​")]);
    T.style.fontSize = R2 / m2.style.sizeMultiplier + "em";
    var h2 = f2(
      ["fontsize-ensurer", "reset-" + m2.size, "size5"],
      [T]
    );
    return h2;
  }, E2 = function(m2, R2, T, h2) {
    var C2, A2, I2;
    if (R2 === "individualShift") {
      var v2 = m2;
      for (m2 = [v2[0]], C2 = -v2[0].shift - v2[0].elem.depth, A2 = C2, I2 = 1; I2 < v2.length; I2++) {
        var x = -v2[I2].shift - A2 - v2[I2].elem.depth, M = x - (v2[I2 - 1].elem.height + v2[I2 - 1].elem.depth);
        A2 = A2 + x, m2.push({ type: "kern", size: M }), m2.push(v2[I2]);
      }
    } else if (R2 === "top") {
      var B2 = T;
      for (I2 = 0; I2 < m2.length; I2++)
        m2[I2].type === "kern" ? B2 -= m2[I2].size : B2 -= m2[I2].elem.height + m2[I2].elem.depth;
      C2 = B2;
    } else
      R2 === "bottom" ? C2 = -T : R2 === "shift" ? C2 = -m2[0].elem.depth - T : R2 === "firstBaseline" ? C2 = -m2[0].elem.depth : C2 = 0;
    var G2 = 0;
    for (I2 = 0; I2 < m2.length; I2++)
      m2[I2].type === "elem" && (G2 = Math.max(G2, m2[I2].elem.maxFontSize));
    var D = c2(h2, G2), w = [];
    for (A2 = C2, I2 = 0; I2 < m2.length; I2++)
      if (m2[I2].type === "kern")
        A2 += m2[I2].size;
      else {
        var L = m2[I2].elem, q2 = -L.depth - A2;
        A2 += L.height + L.depth;
        var z = f2([], [D, L]);
        z.height -= q2, z.depth += q2, z.style.top = q2 + "em", w.push(z);
      }
    var re = f2(
      ["baseline-fix"],
      [D, new t2.symbolNode("​")]
    );
    w.push(re);
    var j = f2(["vlist"], w);
    return j.height = Math.max(A2, j.height), j.depth = Math.max(-C2, j.depth), j;
  }, g2 = {
    size1: 0.5,
    size2: 0.7,
    size3: 0.8,
    size4: 0.9,
    size5: 1,
    size6: 1.2,
    size7: 1.44,
    size8: 1.73,
    size9: 2.07,
    size10: 2.49
  }, S = {
    "\\qquad": {
      size: "2em",
      className: "qquad"
    },
    "\\quad": {
      size: "1em",
      className: "quad"
    },
    "\\enspace": {
      size: "0.5em",
      className: "enspace"
    },
    "\\;": {
      size: "0.277778em",
      className: "thickspace"
    },
    "\\:": {
      size: "0.22222em",
      className: "mediumspace"
    },
    "\\,": {
      size: "0.16667em",
      className: "thinspace"
    },
    "\\!": {
      size: "-0.16667em",
      className: "negativethinspace"
    }
  }, p2 = {
    // styles
    mathbf: {
      variant: "bold",
      fontName: "Main-Bold"
    },
    mathrm: {
      variant: "normal",
      fontName: "Main-Regular"
    },
    // "mathit" is missing because it requires the use of two fonts: Main-Italic
    // and Math-Italic.  This is handled by a special case in makeOrd which ends
    // up calling mathit.
    // families
    mathbb: {
      variant: "double-struck",
      fontName: "AMS-Regular"
    },
    mathcal: {
      variant: "script",
      fontName: "Caligraphic-Regular"
    },
    mathfrak: {
      variant: "fraktur",
      fontName: "Fraktur-Regular"
    },
    mathscr: {
      variant: "script",
      fontName: "Script-Regular"
    },
    mathsf: {
      variant: "sans-serif",
      fontName: "SansSerif-Regular"
    },
    mathtt: {
      variant: "monospace",
      fontName: "Typewriter-Regular"
    }
  };
  return aa = {
    fontMap: p2,
    makeSymbol: s2,
    mathsym: o2,
    makeSpan: f2,
    makeFragment: b,
    makeVList: E2,
    makeOrd: _,
    sizingMultiplier: g2,
    spacingFunctions: S
  }, aa;
}
var ia, du;
function th() {
  if (du)
    return ia;
  du = 1;
  var t2 = en$1(), e2 = Ir(), n = xr(), i2 = Xn(), r2 = Dr(), a2 = Ht$1(), s2 = n.makeSpan, o2 = function(v2, x) {
    return r2.math[v2] && r2.math[v2].replace ? i2.getCharacterMetrics(
      r2.math[v2].replace,
      x
    ) : i2.getCharacterMetrics(
      v2,
      x
    );
  }, l2 = function(v2, x, M) {
    return n.makeSymbol(v2, "Size" + x + "-Regular", M);
  }, u2 = function(v2, x, M) {
    var B2 = s2(
      ["style-wrap", M.style.reset(), x.cls()],
      [v2]
    ), G2 = x.sizeMultiplier / M.style.sizeMultiplier;
    return B2.height *= G2, B2.depth *= G2, B2.maxFontSize = x.sizeMultiplier, B2;
  }, _ = function(v2, x, M, B2, G2) {
    var D = n.makeSymbol(v2, "Main-Regular", G2), w = u2(D, x, B2);
    if (M) {
      var L = (1 - B2.style.sizeMultiplier / x.sizeMultiplier) * i2.metrics.axisHeight;
      w.style.top = L + "em", w.height -= L, w.depth += L;
    }
    return w;
  }, d2 = function(v2, x, M, B2, G2) {
    var D = l2(v2, x, G2), w = u2(
      s2(
        ["delimsizing", "size" + x],
        [D],
        B2.getColor()
      ),
      e2.TEXT,
      B2
    );
    if (M) {
      var L = (1 - B2.style.sizeMultiplier) * i2.metrics.axisHeight;
      w.style.top = L + "em", w.height -= L, w.depth += L;
    }
    return w;
  }, f2 = function(v2, x, M) {
    var B2;
    x === "Size1-Regular" ? B2 = "delim-size1" : x === "Size4-Regular" && (B2 = "delim-size4");
    var G2 = s2(
      ["delimsizinginner", B2],
      [s2([], [n.makeSymbol(v2, x, M)])]
    );
    return { type: "elem", elem: G2 };
  }, b = function(v2, x, M, B2, G2) {
    var D, w, L, q2;
    D = L = q2 = v2, w = null;
    var z = "Size1-Regular";
    v2 === "\\uparrow" ? L = q2 = "⏐" : v2 === "\\Uparrow" ? L = q2 = "‖" : v2 === "\\downarrow" ? D = L = "⏐" : v2 === "\\Downarrow" ? D = L = "‖" : v2 === "\\updownarrow" ? (D = "\\uparrow", L = "⏐", q2 = "\\downarrow") : v2 === "\\Updownarrow" ? (D = "\\Uparrow", L = "‖", q2 = "\\Downarrow") : v2 === "[" || v2 === "\\lbrack" ? (D = "⎡", L = "⎢", q2 = "⎣", z = "Size4-Regular") : v2 === "]" || v2 === "\\rbrack" ? (D = "⎤", L = "⎥", q2 = "⎦", z = "Size4-Regular") : v2 === "\\lfloor" ? (L = D = "⎢", q2 = "⎣", z = "Size4-Regular") : v2 === "\\lceil" ? (D = "⎡", L = q2 = "⎢", z = "Size4-Regular") : v2 === "\\rfloor" ? (L = D = "⎥", q2 = "⎦", z = "Size4-Regular") : v2 === "\\rceil" ? (D = "⎤", L = q2 = "⎥", z = "Size4-Regular") : v2 === "(" ? (D = "⎛", L = "⎜", q2 = "⎝", z = "Size4-Regular") : v2 === ")" ? (D = "⎞", L = "⎟", q2 = "⎠", z = "Size4-Regular") : v2 === "\\{" || v2 === "\\lbrace" ? (D = "⎧", w = "⎨", q2 = "⎩", L = "⎪", z = "Size4-Regular") : v2 === "\\}" || v2 === "\\rbrace" ? (D = "⎫", w = "⎬", q2 = "⎭", L = "⎪", z = "Size4-Regular") : v2 === "\\lgroup" ? (D = "⎧", q2 = "⎩", L = "⎪", z = "Size4-Regular") : v2 === "\\rgroup" ? (D = "⎫", q2 = "⎭", L = "⎪", z = "Size4-Regular") : v2 === "\\lmoustache" ? (D = "⎧", q2 = "⎭", L = "⎪", z = "Size4-Regular") : v2 === "\\rmoustache" ? (D = "⎫", q2 = "⎩", L = "⎪", z = "Size4-Regular") : v2 === "\\surd" && (D = "", q2 = "⎷", L = "", z = "Size4-Regular");
    var re = o2(D, z), j = re.height + re.depth, ue = o2(L, z), se2 = ue.height + ue.depth, Re2 = o2(q2, z), Ce = Re2.height + Re2.depth, Te2 = 0, ne2 = 1;
    if (w !== null) {
      var ae = o2(w, z);
      Te2 = ae.height + ae.depth, ne2 = 2;
    }
    var pe = j + Ce + Te2, fe2 = Math.ceil(
      (x - pe) / (ne2 * se2)
    ), Ne = pe + fe2 * ne2 * se2, ve2 = i2.metrics.axisHeight;
    M && (ve2 *= B2.style.sizeMultiplier);
    var Ie = Ne / 2 - ve2, Ue = [];
    Ue.push(f2(q2, z, G2));
    var De2;
    if (w === null)
      for (De2 = 0; De2 < fe2; De2++)
        Ue.push(f2(L, z, G2));
    else {
      for (De2 = 0; De2 < fe2; De2++)
        Ue.push(f2(L, z, G2));
      for (Ue.push(f2(w, z, G2)), De2 = 0; De2 < fe2; De2++)
        Ue.push(f2(L, z, G2));
    }
    Ue.push(f2(D, z, G2));
    var Je2 = n.makeVList(Ue, "bottom", Ie, B2);
    return u2(
      s2(["delimsizing", "mult"], [Je2], B2.getColor()),
      e2.TEXT,
      B2
    );
  }, c2 = [
    "(",
    ")",
    "[",
    "\\lbrack",
    "]",
    "\\rbrack",
    "\\{",
    "\\lbrace",
    "\\}",
    "\\rbrace",
    "\\lfloor",
    "\\rfloor",
    "\\lceil",
    "\\rceil",
    "\\surd"
  ], E2 = [
    "\\uparrow",
    "\\downarrow",
    "\\updownarrow",
    "\\Uparrow",
    "\\Downarrow",
    "\\Updownarrow",
    "|",
    "\\|",
    "\\vert",
    "\\Vert",
    "\\lvert",
    "\\rvert",
    "\\lVert",
    "\\rVert",
    "\\lgroup",
    "\\rgroup",
    "\\lmoustache",
    "\\rmoustache"
  ], g2 = [
    "<",
    ">",
    "\\langle",
    "\\rangle",
    "/",
    "\\backslash",
    "\\lt",
    "\\gt"
  ], S = [0, 1.2, 1.8, 2.4, 3], p2 = function(v2, x, M, B2) {
    if (v2 === "<" || v2 === "\\lt" ? v2 = "\\langle" : (v2 === ">" || v2 === "\\gt") && (v2 = "\\rangle"), a2.contains(c2, v2) || a2.contains(g2, v2))
      return d2(v2, x, false, M, B2);
    if (a2.contains(E2, v2))
      return b(
        v2,
        S[x],
        false,
        M,
        B2
      );
    throw new t2("Illegal delimiter: '" + v2 + "'");
  }, m2 = [
    { type: "small", style: e2.SCRIPTSCRIPT },
    { type: "small", style: e2.SCRIPT },
    { type: "small", style: e2.TEXT },
    { type: "large", size: 1 },
    { type: "large", size: 2 },
    { type: "large", size: 3 },
    { type: "large", size: 4 }
  ], R2 = [
    { type: "small", style: e2.SCRIPTSCRIPT },
    { type: "small", style: e2.SCRIPT },
    { type: "small", style: e2.TEXT },
    { type: "stack" }
  ], T = [
    { type: "small", style: e2.SCRIPTSCRIPT },
    { type: "small", style: e2.SCRIPT },
    { type: "small", style: e2.TEXT },
    { type: "large", size: 1 },
    { type: "large", size: 2 },
    { type: "large", size: 3 },
    { type: "large", size: 4 },
    { type: "stack" }
  ], h2 = function(v2) {
    if (v2.type === "small")
      return "Main-Regular";
    if (v2.type === "large")
      return "Size" + v2.size + "-Regular";
    if (v2.type === "stack")
      return "Size4-Regular";
  }, C2 = function(v2, x, M, B2) {
    for (var G2 = Math.min(2, 3 - B2.style.size), D = G2; D < M.length && M[D].type !== "stack"; D++) {
      var w = o2(v2, h2(M[D])), L = w.height + w.depth;
      if (M[D].type === "small" && (L *= M[D].style.sizeMultiplier), L > x)
        return M[D];
    }
    return M[M.length - 1];
  }, A2 = function(v2, x, M, B2, G2) {
    v2 === "<" || v2 === "\\lt" ? v2 = "\\langle" : (v2 === ">" || v2 === "\\gt") && (v2 = "\\rangle");
    var D;
    a2.contains(g2, v2) ? D = m2 : a2.contains(c2, v2) ? D = T : D = R2;
    var w = C2(v2, x, D, B2);
    if (w.type === "small")
      return _(v2, w.style, M, B2, G2);
    if (w.type === "large")
      return d2(v2, w.size, M, B2, G2);
    if (w.type === "stack")
      return b(v2, x, M, B2, G2);
  }, I2 = function(v2, x, M, B2, G2) {
    var D = i2.metrics.axisHeight * B2.style.sizeMultiplier, w = 901, L = 5 / i2.metrics.ptPerEm, q2 = Math.max(
      x - D,
      M + D
    ), z = Math.max(
      // In real TeX, calculations are done using integral values which are
      // 65536 per pt, or 655360 per em. So, the division here truncates in
      // TeX but doesn't here, producing different results. If we wanted to
      // exactly match TeX's calculation, we could do
      //   Math.floor(655360 * maxDistFromAxis / 500) *
      //    delimiterFactor / 655360
      // (To see the difference, compare
      //    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}
      // in TeX and KaTeX)
      q2 / 500 * w,
      2 * q2 - L
    );
    return A2(v2, z, true, B2, G2);
  };
  return ia = {
    sizedDelim: p2,
    customSizedDelim: A2,
    leftRightDelim: I2
  }, ia;
}
var oa, pu;
function nh() {
  if (pu)
    return oa;
  pu = 1;
  var t2 = en$1(), e2 = Ir(), n = xr(), i2 = th(), r2 = f0(), a2 = Xn(), s2 = Ht$1(), o2 = n.makeSpan, l2 = function(p2, m2, R2) {
    for (var T = [], h2 = 0; h2 < p2.length; h2++) {
      var C2 = p2[h2];
      T.push(g2(C2, m2, R2)), R2 = C2;
    }
    return T;
  }, u2 = {
    mathord: "mord",
    textord: "mord",
    bin: "mbin",
    rel: "mrel",
    text: "mord",
    open: "mopen",
    close: "mclose",
    inner: "minner",
    genfrac: "mord",
    array: "mord",
    spacing: "mord",
    punct: "mpunct",
    ordgroup: "mord",
    op: "mop",
    katex: "mord",
    overline: "mord",
    underline: "mord",
    rule: "mord",
    leftright: "minner",
    sqrt: "mord",
    accent: "mord"
  }, _ = function(p2) {
    return p2 == null ? u2.mathord : p2.type === "supsub" ? _(p2.value.base) : p2.type === "llap" || p2.type === "rlap" ? _(p2.value) : p2.type === "color" || p2.type === "sizing" || p2.type === "styling" ? _(p2.value.value) : p2.type === "delimsizing" ? u2[p2.value.delimType] : u2[p2.type];
  }, d2 = function(p2, m2) {
    return p2 ? p2.type === "op" ? p2.value.limits && (m2.style.size === e2.DISPLAY.size || p2.value.alwaysHandleSupSub) : p2.type === "accent" ? b(p2.value.base) : null : false;
  }, f2 = function(p2) {
    return p2 ? p2.type === "ordgroup" ? p2.value.length === 1 ? f2(p2.value[0]) : p2 : p2.type === "color" && p2.value.value.length === 1 ? f2(p2.value.value[0]) : p2 : false;
  }, b = function(p2) {
    var m2 = f2(p2);
    return m2.type === "mathord" || m2.type === "textord" || m2.type === "bin" || m2.type === "rel" || m2.type === "inner" || m2.type === "open" || m2.type === "close" || m2.type === "punct";
  }, c2 = function(p2) {
    return o2([
      "sizing",
      "reset-" + p2.size,
      "size5",
      p2.style.reset(),
      e2.TEXT.cls(),
      "nulldelimiter"
    ]);
  }, E2 = {};
  E2.mathord = function(p2, m2, R2) {
    return n.makeOrd(p2, m2, "mathord");
  }, E2.textord = function(p2, m2, R2) {
    return n.makeOrd(p2, m2, "textord");
  }, E2.bin = function(p2, m2, R2) {
    for (var T = "mbin", h2 = R2; h2 && h2.type === "color"; ) {
      var C2 = h2.value.value;
      h2 = C2[C2.length - 1];
    }
    return (!R2 || s2.contains(
      ["mbin", "mopen", "mrel", "mop", "mpunct"],
      _(h2)
    )) && (p2.type = "textord", T = "mord"), n.mathsym(
      p2.value,
      p2.mode,
      m2.getColor(),
      [T]
    );
  }, E2.rel = function(p2, m2, R2) {
    return n.mathsym(
      p2.value,
      p2.mode,
      m2.getColor(),
      ["mrel"]
    );
  }, E2.open = function(p2, m2, R2) {
    return n.mathsym(
      p2.value,
      p2.mode,
      m2.getColor(),
      ["mopen"]
    );
  }, E2.close = function(p2, m2, R2) {
    return n.mathsym(
      p2.value,
      p2.mode,
      m2.getColor(),
      ["mclose"]
    );
  }, E2.inner = function(p2, m2, R2) {
    return n.mathsym(
      p2.value,
      p2.mode,
      m2.getColor(),
      ["minner"]
    );
  }, E2.punct = function(p2, m2, R2) {
    return n.mathsym(
      p2.value,
      p2.mode,
      m2.getColor(),
      ["mpunct"]
    );
  }, E2.ordgroup = function(p2, m2, R2) {
    return o2(
      ["mord", m2.style.cls()],
      l2(p2.value, m2.reset())
    );
  }, E2.text = function(p2, m2, R2) {
    return o2(
      ["text", "mord", m2.style.cls()],
      l2(p2.value.body, m2.reset())
    );
  }, E2.color = function(p2, m2, R2) {
    var T = l2(
      p2.value.value,
      m2.withColor(p2.value.color),
      R2
    );
    return new n.makeFragment(T);
  }, E2.supsub = function(p2, m2, R2) {
    if (d2(p2.value.base, m2))
      return E2[p2.value.base.type](p2, m2, R2);
    var T = g2(p2.value.base, m2.reset()), h2, C2, A2, I2;
    p2.value.sup && (A2 = g2(
      p2.value.sup,
      m2.withStyle(m2.style.sup())
    ), h2 = o2(
      [m2.style.reset(), m2.style.sup().cls()],
      [A2]
    )), p2.value.sub && (I2 = g2(
      p2.value.sub,
      m2.withStyle(m2.style.sub())
    ), C2 = o2(
      [m2.style.reset(), m2.style.sub().cls()],
      [I2]
    ));
    var v2, x;
    b(p2.value.base) ? (v2 = 0, x = 0) : (v2 = T.height - a2.metrics.supDrop, x = T.depth + a2.metrics.subDrop);
    var M;
    m2.style === e2.DISPLAY ? M = a2.metrics.sup1 : m2.style.cramped ? M = a2.metrics.sup3 : M = a2.metrics.sup2;
    var B2 = e2.TEXT.sizeMultiplier * m2.style.sizeMultiplier, G2 = 0.5 / a2.metrics.ptPerEm / B2 + "em", D;
    if (!p2.value.sup)
      x = Math.max(
        x,
        a2.metrics.sub1,
        I2.height - 0.8 * a2.metrics.xHeight
      ), D = n.makeVList([
        { type: "elem", elem: C2 }
      ], "shift", x, m2), D.children[0].style.marginRight = G2, T instanceof r2.symbolNode && (D.children[0].style.marginLeft = -T.italic + "em");
    else if (!p2.value.sub)
      v2 = Math.max(
        v2,
        M,
        A2.depth + 0.25 * a2.metrics.xHeight
      ), D = n.makeVList([
        { type: "elem", elem: h2 }
      ], "shift", -v2, m2), D.children[0].style.marginRight = G2;
    else {
      v2 = Math.max(
        v2,
        M,
        A2.depth + 0.25 * a2.metrics.xHeight
      ), x = Math.max(x, a2.metrics.sub2);
      var w = a2.metrics.defaultRuleThickness;
      if (v2 - A2.depth - (I2.height - x) < 4 * w) {
        x = 4 * w - (v2 - A2.depth) + I2.height;
        var L = 0.8 * a2.metrics.xHeight - (v2 - A2.depth);
        L > 0 && (v2 += L, x -= L);
      }
      D = n.makeVList([
        { type: "elem", elem: C2, shift: x },
        { type: "elem", elem: h2, shift: -v2 }
      ], "individualShift", null, m2), T instanceof r2.symbolNode && (D.children[0].style.marginLeft = -T.italic + "em"), D.children[0].style.marginRight = G2, D.children[1].style.marginRight = G2;
    }
    return o2(
      [_(p2.value.base)],
      [T, D]
    );
  }, E2.genfrac = function(p2, m2, R2) {
    var T = m2.style;
    p2.value.size === "display" ? T = e2.DISPLAY : p2.value.size === "text" && (T = e2.TEXT);
    var h2 = T.fracNum(), C2 = T.fracDen(), A2 = g2(p2.value.numer, m2.withStyle(h2)), I2 = o2([T.reset(), h2.cls()], [A2]), v2 = g2(p2.value.denom, m2.withStyle(C2)), x = o2([T.reset(), C2.cls()], [v2]), M;
    p2.value.hasBarLine ? M = a2.metrics.defaultRuleThickness / m2.style.sizeMultiplier : M = 0;
    var B2, G2, D;
    T.size === e2.DISPLAY.size ? (B2 = a2.metrics.num1, M > 0 ? G2 = 3 * M : G2 = 7 * a2.metrics.defaultRuleThickness, D = a2.metrics.denom1) : (M > 0 ? (B2 = a2.metrics.num2, G2 = M) : (B2 = a2.metrics.num3, G2 = 3 * a2.metrics.defaultRuleThickness), D = a2.metrics.denom2);
    var w;
    if (M === 0) {
      var L = B2 - A2.depth - (v2.height - D);
      L < G2 && (B2 += 0.5 * (G2 - L), D += 0.5 * (G2 - L)), w = n.makeVList([
        { type: "elem", elem: x, shift: D },
        { type: "elem", elem: I2, shift: -B2 }
      ], "individualShift", null, m2);
    } else {
      var q2 = a2.metrics.axisHeight;
      B2 - A2.depth - (q2 + 0.5 * M) < G2 && (B2 += G2 - (B2 - A2.depth - (q2 + 0.5 * M))), q2 - 0.5 * M - (v2.height - D) < G2 && (D += G2 - (q2 - 0.5 * M - (v2.height - D)));
      var z = o2(
        [m2.style.reset(), e2.TEXT.cls(), "frac-line"]
      );
      z.height = M;
      var re = -(q2 - 0.5 * M);
      w = n.makeVList([
        { type: "elem", elem: x, shift: D },
        { type: "elem", elem: z, shift: re },
        { type: "elem", elem: I2, shift: -B2 }
      ], "individualShift", null, m2);
    }
    w.height *= T.sizeMultiplier / m2.style.sizeMultiplier, w.depth *= T.sizeMultiplier / m2.style.sizeMultiplier;
    var j;
    T.size === e2.DISPLAY.size ? j = a2.metrics.delim1 : j = a2.metrics.getDelim2(T);
    var ue, se2;
    return p2.value.leftDelim == null ? ue = c2(m2) : ue = i2.customSizedDelim(
      p2.value.leftDelim,
      j,
      true,
      m2.withStyle(T),
      p2.mode
    ), p2.value.rightDelim == null ? se2 = c2(m2) : se2 = i2.customSizedDelim(
      p2.value.rightDelim,
      j,
      true,
      m2.withStyle(T),
      p2.mode
    ), o2(
      ["mord", m2.style.reset(), T.cls()],
      [ue, o2(["mfrac"], [w]), se2],
      m2.getColor()
    );
  }, E2.array = function(p2, m2, R2) {
    var T, h2, C2 = p2.value.body.length, A2 = 0, I2 = new Array(C2), v2 = 1 / a2.metrics.ptPerEm, x = 5 * v2, M = 12 * v2, B2 = s2.deflt(p2.value.arraystretch, 1), G2 = B2 * M, D = 0.7 * G2, w = 0.3 * G2, L = 0;
    for (T = 0; T < p2.value.body.length; ++T) {
      var q2 = p2.value.body[T], z = D, re = w;
      A2 < q2.length && (A2 = q2.length);
      var j = new Array(q2.length);
      for (h2 = 0; h2 < q2.length; ++h2) {
        var ue = g2(q2[h2], m2);
        re < ue.depth && (re = ue.depth), z < ue.height && (z = ue.height), j[h2] = ue;
      }
      var se2 = 0;
      if (p2.value.rowGaps[T]) {
        switch (se2 = p2.value.rowGaps[T].value, se2.unit) {
          case "em":
            se2 = se2.number;
            break;
          case "ex":
            se2 = se2.number * a2.metrics.emPerEx;
            break;
          default:
            console.error("Can't handle unit " + se2.unit), se2 = 0;
        }
        se2 > 0 && (se2 += w, re < se2 && (re = se2), se2 = 0);
      }
      j.height = z, j.depth = re, L += z, j.pos = L, L += re + se2, I2[T] = j;
    }
    var Re2 = L / 2 + a2.metrics.axisHeight, Ce = p2.value.cols || [], Te2 = [], ne2, ae;
    for (
      h2 = 0, ae = 0;
      // Continue while either there are more columns or more column
      // descriptions, so trailing separators don't get lost.
      h2 < A2 || ae < Ce.length;
      ++h2, ++ae
    ) {
      for (var pe = Ce[ae] || {}, fe2 = true; pe.type === "separator"; ) {
        if (fe2 || (ne2 = o2(["arraycolsep"], []), ne2.style.width = a2.metrics.doubleRuleSep + "em", Te2.push(ne2)), pe.separator === "|") {
          var Ne = o2(
            ["vertical-separator"],
            []
          );
          Ne.style.height = L + "em", Ne.style.verticalAlign = -(L - Re2) + "em", Te2.push(Ne);
        } else
          throw new t2(
            "Invalid separator type: " + pe.separator
          );
        ae++, pe = Ce[ae] || {}, fe2 = false;
      }
      if (!(h2 >= A2)) {
        var ve2;
        (h2 > 0 || p2.value.hskipBeforeAndAfter) && (ve2 = s2.deflt(pe.pregap, x), ve2 !== 0 && (ne2 = o2(["arraycolsep"], []), ne2.style.width = ve2 + "em", Te2.push(ne2)));
        var Ie = [];
        for (T = 0; T < C2; ++T) {
          var Ue = I2[T], De2 = Ue[h2];
          if (De2) {
            var Je2 = Ue.pos - Re2;
            De2.depth = Ue.depth, De2.height = Ue.height, Ie.push({ type: "elem", elem: De2, shift: Je2 });
          }
        }
        Ie = n.makeVList(Ie, "individualShift", null, m2), Ie = o2(
          ["col-align-" + (pe.align || "c")],
          [Ie]
        ), Te2.push(Ie), (h2 < A2 - 1 || p2.value.hskipBeforeAndAfter) && (ve2 = s2.deflt(pe.postgap, x), ve2 !== 0 && (ne2 = o2(["arraycolsep"], []), ne2.style.width = ve2 + "em", Te2.push(ne2)));
      }
    }
    return I2 = o2(["mtable"], Te2), o2(["mord"], [I2], m2.getColor());
  }, E2.spacing = function(p2, m2, R2) {
    return p2.value === "\\ " || p2.value === "\\space" || p2.value === " " || p2.value === "~" ? o2(
      ["mord", "mspace"],
      [n.mathsym(p2.value, p2.mode)]
    ) : o2(
      [
        "mord",
        "mspace",
        n.spacingFunctions[p2.value].className
      ]
    );
  }, E2.llap = function(p2, m2, R2) {
    var T = o2(
      ["inner"],
      [g2(p2.value.body, m2.reset())]
    ), h2 = o2(["fix"], []);
    return o2(
      ["llap", m2.style.cls()],
      [T, h2]
    );
  }, E2.rlap = function(p2, m2, R2) {
    var T = o2(
      ["inner"],
      [g2(p2.value.body, m2.reset())]
    ), h2 = o2(["fix"], []);
    return o2(
      ["rlap", m2.style.cls()],
      [T, h2]
    );
  }, E2.op = function(p2, m2, R2) {
    var T, h2, C2 = false;
    p2.type === "supsub" && (T = p2.value.sup, h2 = p2.value.sub, p2 = p2.value.base, C2 = true);
    var A2 = [
      "\\smallint"
    ], I2 = false;
    m2.style.size === e2.DISPLAY.size && p2.value.symbol && !s2.contains(A2, p2.value.body) && (I2 = true);
    var v2, x = 0, M = 0;
    if (p2.value.symbol) {
      var B2 = I2 ? "Size2-Regular" : "Size1-Regular";
      v2 = n.makeSymbol(
        p2.value.body,
        B2,
        "math",
        m2.getColor(),
        ["op-symbol", I2 ? "large-op" : "small-op", "mop"]
      ), x = (v2.height - v2.depth) / 2 - a2.metrics.axisHeight * m2.style.sizeMultiplier, M = v2.italic;
    } else {
      for (var G2 = [], D = 1; D < p2.value.body.length; D++)
        G2.push(n.mathsym(p2.value.body[D], p2.mode));
      v2 = o2(["mop"], G2, m2.getColor());
    }
    if (C2) {
      v2 = o2([], [v2]);
      var w, L, q2, z;
      if (T) {
        var re = g2(
          T,
          m2.withStyle(m2.style.sup())
        );
        w = o2(
          [m2.style.reset(), m2.style.sup().cls()],
          [re]
        ), L = Math.max(
          a2.metrics.bigOpSpacing1,
          a2.metrics.bigOpSpacing3 - re.depth
        );
      }
      if (h2) {
        var j = g2(
          h2,
          m2.withStyle(m2.style.sub())
        );
        q2 = o2(
          [m2.style.reset(), m2.style.sub().cls()],
          [j]
        ), z = Math.max(
          a2.metrics.bigOpSpacing2,
          a2.metrics.bigOpSpacing4 - j.height
        );
      }
      var ue, se2, Re2;
      if (!T)
        se2 = v2.height - x, ue = n.makeVList([
          { type: "kern", size: a2.metrics.bigOpSpacing5 },
          { type: "elem", elem: q2 },
          { type: "kern", size: z },
          { type: "elem", elem: v2 }
        ], "top", se2, m2), ue.children[0].style.marginLeft = -M + "em";
      else if (!h2)
        Re2 = v2.depth + x, ue = n.makeVList([
          { type: "elem", elem: v2 },
          { type: "kern", size: L },
          { type: "elem", elem: w },
          { type: "kern", size: a2.metrics.bigOpSpacing5 }
        ], "bottom", Re2, m2), ue.children[1].style.marginLeft = M + "em";
      else {
        if (!T && !h2)
          return v2;
        Re2 = a2.metrics.bigOpSpacing5 + q2.height + q2.depth + z + v2.depth + x, ue = n.makeVList([
          { type: "kern", size: a2.metrics.bigOpSpacing5 },
          { type: "elem", elem: q2 },
          { type: "kern", size: z },
          { type: "elem", elem: v2 },
          { type: "kern", size: L },
          { type: "elem", elem: w },
          { type: "kern", size: a2.metrics.bigOpSpacing5 }
        ], "bottom", Re2, m2), ue.children[0].style.marginLeft = -M + "em", ue.children[2].style.marginLeft = M + "em";
      }
      return o2(["mop", "op-limits"], [ue]);
    } else
      return p2.value.symbol && (v2.style.top = x + "em"), v2;
  }, E2.katex = function(p2, m2, R2) {
    var T = o2(
      ["k"],
      [n.mathsym("K", p2.mode)]
    ), h2 = o2(
      ["a"],
      [n.mathsym("A", p2.mode)]
    );
    h2.height = (h2.height + 0.2) * 0.75, h2.depth = (h2.height - 0.2) * 0.75;
    var C2 = o2(
      ["t"],
      [n.mathsym("T", p2.mode)]
    ), A2 = o2(
      ["e"],
      [n.mathsym("E", p2.mode)]
    );
    A2.height = A2.height - 0.2155, A2.depth = A2.depth + 0.2155;
    var I2 = o2(
      ["x"],
      [n.mathsym("X", p2.mode)]
    );
    return o2(
      ["katex-logo", "mord"],
      [T, h2, C2, A2, I2],
      m2.getColor()
    );
  }, E2.overline = function(p2, m2, R2) {
    var T = g2(
      p2.value.body,
      m2.withStyle(m2.style.cramp())
    ), h2 = a2.metrics.defaultRuleThickness / m2.style.sizeMultiplier, C2 = o2(
      [m2.style.reset(), e2.TEXT.cls(), "overline-line"]
    );
    C2.height = h2, C2.maxFontSize = 1;
    var A2 = n.makeVList([
      { type: "elem", elem: T },
      { type: "kern", size: 3 * h2 },
      { type: "elem", elem: C2 },
      { type: "kern", size: h2 }
    ], "firstBaseline", null, m2);
    return o2(["overline", "mord"], [A2], m2.getColor());
  }, E2.underline = function(p2, m2, R2) {
    var T = g2(p2.value.body, m2), h2 = a2.metrics.defaultRuleThickness / m2.style.sizeMultiplier, C2 = o2(
      [m2.style.reset(), e2.TEXT.cls(), "underline-line"]
    );
    C2.height = h2, C2.maxFontSize = 1;
    var A2 = n.makeVList([
      { type: "kern", size: h2 },
      { type: "elem", elem: C2 },
      { type: "kern", size: 3 * h2 },
      { type: "elem", elem: T }
    ], "top", T.height, m2);
    return o2(["underline", "mord"], [A2], m2.getColor());
  }, E2.sqrt = function(p2, m2, R2) {
    var T = g2(
      p2.value.body,
      m2.withStyle(m2.style.cramp())
    ), h2 = a2.metrics.defaultRuleThickness / m2.style.sizeMultiplier, C2 = o2(
      [m2.style.reset(), e2.TEXT.cls(), "sqrt-line"],
      [],
      m2.getColor()
    );
    C2.height = h2, C2.maxFontSize = 1;
    var A2 = h2;
    m2.style.id < e2.TEXT.id && (A2 = a2.metrics.xHeight);
    var I2 = h2 + A2 / 4, v2 = (T.height + T.depth) * m2.style.sizeMultiplier, x = v2 + I2 + h2, M = o2(
      ["sqrt-sign"],
      [
        i2.customSizedDelim(
          "\\surd",
          x,
          false,
          m2,
          p2.mode
        )
      ],
      m2.getColor()
    ), B2 = M.height + M.depth - h2;
    B2 > T.height + T.depth + I2 && (I2 = (I2 + B2 - T.height - T.depth) / 2);
    var G2 = -(T.height + I2 + h2) + M.height;
    M.style.top = G2 + "em", M.height -= G2, M.depth += G2;
    var D;
    if (T.height === 0 && T.depth === 0 ? D = o2() : D = n.makeVList([
      { type: "elem", elem: T },
      { type: "kern", size: I2 },
      { type: "elem", elem: C2 },
      { type: "kern", size: h2 }
    ], "firstBaseline", null, m2), p2.value.index) {
      var w = g2(
        p2.value.index,
        m2.withStyle(e2.SCRIPTSCRIPT)
      ), L = o2(
        [m2.style.reset(), e2.SCRIPTSCRIPT.cls()],
        [w]
      ), q2 = Math.max(M.height, D.height), z = Math.max(M.depth, D.depth), re = 0.6 * (q2 - z), j = n.makeVList(
        [{ type: "elem", elem: L }],
        "shift",
        -re,
        m2
      ), ue = o2(["root"], [j]);
      return o2(["sqrt", "mord"], [ue, M, D]);
    } else
      return o2(["sqrt", "mord"], [M, D]);
  }, E2.sizing = function(p2, m2, R2) {
    var T = l2(
      p2.value.value,
      m2.withSize(p2.value.size),
      R2
    ), h2 = o2(
      ["mord"],
      [o2(
        [
          "sizing",
          "reset-" + m2.size,
          p2.value.size,
          m2.style.cls()
        ],
        T
      )]
    ), C2 = n.sizingMultiplier[p2.value.size];
    return h2.maxFontSize = C2 * m2.style.sizeMultiplier, h2;
  }, E2.styling = function(p2, m2, R2) {
    var T = {
      display: e2.DISPLAY,
      text: e2.TEXT,
      script: e2.SCRIPT,
      scriptscript: e2.SCRIPTSCRIPT
    }, h2 = T[p2.value.style], C2 = l2(
      p2.value.value,
      m2.withStyle(h2),
      R2
    );
    return o2([m2.style.reset(), h2.cls()], C2);
  }, E2.font = function(p2, m2, R2) {
    var T = p2.value.font;
    return g2(p2.value.body, m2.withFont(T), R2);
  }, E2.delimsizing = function(p2, m2, R2) {
    var T = p2.value.value;
    return T === "." ? o2([u2[p2.value.delimType]]) : o2(
      [u2[p2.value.delimType]],
      [i2.sizedDelim(
        T,
        p2.value.size,
        m2,
        p2.mode
      )]
    );
  }, E2.leftright = function(p2, m2, R2) {
    for (var T = l2(p2.value.body, m2.reset()), h2 = 0, C2 = 0, A2 = 0; A2 < T.length; A2++)
      h2 = Math.max(T[A2].height, h2), C2 = Math.max(T[A2].depth, C2);
    h2 *= m2.style.sizeMultiplier, C2 *= m2.style.sizeMultiplier;
    var I2;
    p2.value.left === "." ? I2 = c2(m2) : I2 = i2.leftRightDelim(
      p2.value.left,
      h2,
      C2,
      m2,
      p2.mode
    ), T.unshift(I2);
    var v2;
    return p2.value.right === "." ? v2 = c2(m2) : v2 = i2.leftRightDelim(
      p2.value.right,
      h2,
      C2,
      m2,
      p2.mode
    ), T.push(v2), o2(
      ["minner", m2.style.cls()],
      T,
      m2.getColor()
    );
  }, E2.rule = function(p2, m2, R2) {
    var T = o2(["mord", "rule"], [], m2.getColor()), h2 = 0;
    p2.value.shift && (h2 = p2.value.shift.number, p2.value.shift.unit === "ex" && (h2 *= a2.metrics.xHeight));
    var C2 = p2.value.width.number;
    p2.value.width.unit === "ex" && (C2 *= a2.metrics.xHeight);
    var A2 = p2.value.height.number;
    return p2.value.height.unit === "ex" && (A2 *= a2.metrics.xHeight), h2 /= m2.style.sizeMultiplier, C2 /= m2.style.sizeMultiplier, A2 /= m2.style.sizeMultiplier, T.style.borderRightWidth = C2 + "em", T.style.borderTopWidth = A2 + "em", T.style.bottom = h2 + "em", T.width = C2, T.height = A2 + h2, T.depth = -h2, T;
  }, E2.accent = function(p2, m2, R2) {
    var T = p2.value.base, h2;
    if (p2.type === "supsub") {
      var C2 = p2;
      p2 = C2.value.base, T = p2.value.base, C2.value.base = T, h2 = g2(
        C2,
        m2.reset(),
        R2
      );
    }
    var A2 = g2(
      T,
      m2.withStyle(m2.style.cramp())
    ), I2;
    if (b(T)) {
      var v2 = f2(T), x = g2(
        v2,
        m2.withStyle(m2.style.cramp())
      );
      I2 = x.skew;
    } else
      I2 = 0;
    var M = Math.min(A2.height, a2.metrics.xHeight), B2 = n.makeSymbol(
      p2.value.accent,
      "Main-Regular",
      "math",
      m2.getColor()
    );
    B2.italic = 0;
    var G2 = p2.value.accent === "\\vec" ? "accent-vec" : null, D = o2(["accent-body", G2], [
      o2([], [B2])
    ]);
    D = n.makeVList([
      { type: "elem", elem: A2 },
      { type: "kern", size: -M },
      { type: "elem", elem: D }
    ], "firstBaseline", null, m2), D.children[1].style.marginLeft = 2 * I2 + "em";
    var w = o2(["mord", "accent"], [D]);
    return h2 ? (h2.children[0] = w, h2.height = Math.max(w.height, h2.height), h2.classes[0] = "mord", h2) : w;
  }, E2.phantom = function(p2, m2, R2) {
    var T = l2(
      p2.value.value,
      m2.withPhantom(),
      R2
    );
    return new n.makeFragment(T);
  };
  var g2 = function(p2, m2, R2) {
    if (!p2)
      return o2();
    if (E2[p2.type]) {
      var T = E2[p2.type](p2, m2, R2), h2;
      return m2.style !== m2.parentStyle && (h2 = m2.style.sizeMultiplier / m2.parentStyle.sizeMultiplier, T.height *= h2, T.depth *= h2), m2.size !== m2.parentSize && (h2 = n.sizingMultiplier[m2.size] / n.sizingMultiplier[m2.parentSize], T.height *= h2, T.depth *= h2), T;
    } else
      throw new t2(
        "Got group of unknown type: '" + p2.type + "'"
      );
  }, S = function(p2, m2) {
    p2 = JSON.parse(JSON.stringify(p2));
    var R2 = l2(p2, m2), T = o2(["base", m2.style.cls()], R2), h2 = o2(["strut"]), C2 = o2(["strut", "bottom"]);
    h2.style.height = T.height + "em", C2.style.height = T.height + T.depth + "em", C2.style.verticalAlign = -T.depth + "em";
    var A2 = o2(["katex-html"], [h2, C2, T]);
    return A2.setAttribute("aria-hidden", "true"), A2;
  };
  return oa = S, oa;
}
var sa, mu;
function rh() {
  if (mu)
    return sa;
  mu = 1;
  var t2 = Ht$1();
  function e2(i2, r2) {
    this.type = i2, this.attributes = {}, this.children = r2 || [];
  }
  e2.prototype.setAttribute = function(i2, r2) {
    this.attributes[i2] = r2;
  }, e2.prototype.toNode = function() {
    var i2 = document.createElementNS(
      "http://www.w3.org/1998/Math/MathML",
      this.type
    );
    for (var r2 in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, r2) && i2.setAttribute(r2, this.attributes[r2]);
    for (var a2 = 0; a2 < this.children.length; a2++)
      i2.appendChild(this.children[a2].toNode());
    return i2;
  }, e2.prototype.toMarkup = function() {
    var i2 = "<" + this.type;
    for (var r2 in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, r2) && (i2 += " " + r2 + '="', i2 += t2.escape(this.attributes[r2]), i2 += '"');
    i2 += ">";
    for (var a2 = 0; a2 < this.children.length; a2++)
      i2 += this.children[a2].toMarkup();
    return i2 += "</" + this.type + ">", i2;
  };
  function n(i2) {
    this.text = i2;
  }
  return n.prototype.toNode = function() {
    return document.createTextNode(this.text);
  }, n.prototype.toMarkup = function() {
    return t2.escape(this.text);
  }, sa = {
    MathNode: e2,
    TextNode: n
  }, sa;
}
var la, Eu;
function ah() {
  if (Eu)
    return la;
  Eu = 1;
  var t2 = xr(), e2 = Xn(), n = rh(), i2 = en$1(), r2 = Dr(), a2 = Ht$1(), s2 = t2.makeSpan, o2 = t2.fontMap, l2 = function(c2, E2) {
    return r2[E2][c2] && r2[E2][c2].replace && (c2 = r2[E2][c2].replace), new n.TextNode(c2);
  }, u2 = function(c2, E2) {
    var g2 = E2.font;
    if (!g2)
      return null;
    var S = c2.mode;
    if (g2 === "mathit")
      return "italic";
    var p2 = c2.value;
    if (a2.contains(["\\imath", "\\jmath"], p2))
      return null;
    r2[S][p2] && r2[S][p2].replace && (p2 = r2[S][p2].replace);
    var m2 = o2[g2].fontName;
    return e2.getCharacterMetrics(p2, m2) ? o2[E2.font].variant : null;
  }, _ = {};
  _.mathord = function(c2, E2) {
    var g2 = new n.MathNode(
      "mi",
      [l2(c2.value, c2.mode)]
    ), S = u2(c2, E2);
    return S && g2.setAttribute("mathvariant", S), g2;
  }, _.textord = function(c2, E2) {
    var g2 = l2(c2.value, c2.mode), S = u2(c2, E2) || "normal", p2;
    return /[0-9]/.test(c2.value) ? (p2 = new n.MathNode("mn", [g2]), E2.font && p2.setAttribute("mathvariant", S)) : (p2 = new n.MathNode("mi", [g2]), p2.setAttribute("mathvariant", S)), p2;
  }, _.bin = function(c2) {
    var E2 = new n.MathNode(
      "mo",
      [l2(c2.value, c2.mode)]
    );
    return E2;
  }, _.rel = function(c2) {
    var E2 = new n.MathNode(
      "mo",
      [l2(c2.value, c2.mode)]
    );
    return E2;
  }, _.open = function(c2) {
    var E2 = new n.MathNode(
      "mo",
      [l2(c2.value, c2.mode)]
    );
    return E2;
  }, _.close = function(c2) {
    var E2 = new n.MathNode(
      "mo",
      [l2(c2.value, c2.mode)]
    );
    return E2;
  }, _.inner = function(c2) {
    var E2 = new n.MathNode(
      "mo",
      [l2(c2.value, c2.mode)]
    );
    return E2;
  }, _.punct = function(c2) {
    var E2 = new n.MathNode(
      "mo",
      [l2(c2.value, c2.mode)]
    );
    return E2.setAttribute("separator", "true"), E2;
  }, _.ordgroup = function(c2, E2) {
    var g2 = d2(c2.value, E2), S = new n.MathNode("mrow", g2);
    return S;
  }, _.text = function(c2, E2) {
    var g2 = d2(c2.value.body, E2), S = new n.MathNode("mtext", g2);
    return S;
  }, _.color = function(c2, E2) {
    var g2 = d2(c2.value.value, E2), S = new n.MathNode("mstyle", g2);
    return S.setAttribute("mathcolor", c2.value.color), S;
  }, _.supsub = function(c2, E2) {
    var g2 = [f2(c2.value.base, E2)];
    c2.value.sub && g2.push(f2(c2.value.sub, E2)), c2.value.sup && g2.push(f2(c2.value.sup, E2));
    var S;
    c2.value.sub ? c2.value.sup ? S = "msubsup" : S = "msub" : S = "msup";
    var p2 = new n.MathNode(S, g2);
    return p2;
  }, _.genfrac = function(c2, E2) {
    var g2 = new n.MathNode(
      "mfrac",
      [
        f2(c2.value.numer, E2),
        f2(c2.value.denom, E2)
      ]
    );
    if (c2.value.hasBarLine || g2.setAttribute("linethickness", "0px"), c2.value.leftDelim != null || c2.value.rightDelim != null) {
      var S = [];
      if (c2.value.leftDelim != null) {
        var p2 = new n.MathNode(
          "mo",
          [new n.TextNode(c2.value.leftDelim)]
        );
        p2.setAttribute("fence", "true"), S.push(p2);
      }
      if (S.push(g2), c2.value.rightDelim != null) {
        var m2 = new n.MathNode(
          "mo",
          [new n.TextNode(c2.value.rightDelim)]
        );
        m2.setAttribute("fence", "true"), S.push(m2);
      }
      var R2 = new n.MathNode("mrow", S);
      return R2;
    }
    return g2;
  }, _.array = function(c2, E2) {
    return new n.MathNode(
      "mtable",
      c2.value.body.map(function(g2) {
        return new n.MathNode(
          "mtr",
          g2.map(function(S) {
            return new n.MathNode(
              "mtd",
              [f2(S, E2)]
            );
          })
        );
      })
    );
  }, _.sqrt = function(c2, E2) {
    var g2;
    return c2.value.index ? g2 = new n.MathNode(
      "mroot",
      [
        f2(c2.value.body, E2),
        f2(c2.value.index, E2)
      ]
    ) : g2 = new n.MathNode(
      "msqrt",
      [f2(c2.value.body, E2)]
    ), g2;
  }, _.leftright = function(c2, E2) {
    var g2 = d2(c2.value.body, E2);
    if (c2.value.left !== ".") {
      var S = new n.MathNode(
        "mo",
        [l2(c2.value.left, c2.mode)]
      );
      S.setAttribute("fence", "true"), g2.unshift(S);
    }
    if (c2.value.right !== ".") {
      var p2 = new n.MathNode(
        "mo",
        [l2(c2.value.right, c2.mode)]
      );
      p2.setAttribute("fence", "true"), g2.push(p2);
    }
    var m2 = new n.MathNode("mrow", g2);
    return m2;
  }, _.accent = function(c2, E2) {
    var g2 = new n.MathNode(
      "mo",
      [l2(c2.value.accent, c2.mode)]
    ), S = new n.MathNode(
      "mover",
      [
        f2(c2.value.base, E2),
        g2
      ]
    );
    return S.setAttribute("accent", "true"), S;
  }, _.spacing = function(c2) {
    var E2;
    return c2.value === "\\ " || c2.value === "\\space" || c2.value === " " || c2.value === "~" ? E2 = new n.MathNode(
      "mtext",
      [new n.TextNode(" ")]
    ) : (E2 = new n.MathNode("mspace"), E2.setAttribute(
      "width",
      t2.spacingFunctions[c2.value].size
    )), E2;
  }, _.op = function(c2) {
    var E2;
    return c2.value.symbol ? E2 = new n.MathNode(
      "mo",
      [l2(c2.value.body, c2.mode)]
    ) : E2 = new n.MathNode(
      "mi",
      [new n.TextNode(c2.value.body.slice(1))]
    ), E2;
  }, _.katex = function(c2) {
    var E2 = new n.MathNode(
      "mtext",
      [new n.TextNode("KaTeX")]
    );
    return E2;
  }, _.font = function(c2, E2) {
    var g2 = c2.value.font;
    return f2(c2.value.body, E2.withFont(g2));
  }, _.delimsizing = function(c2) {
    var E2 = [];
    c2.value.value !== "." && E2.push(l2(c2.value.value, c2.mode));
    var g2 = new n.MathNode("mo", E2);
    return c2.value.delimType === "open" || c2.value.delimType === "close" ? g2.setAttribute("fence", "true") : g2.setAttribute("fence", "false"), g2;
  }, _.styling = function(c2, E2) {
    var g2 = d2(c2.value.value, E2), S = new n.MathNode("mstyle", g2), p2 = {
      display: ["0", "true"],
      text: ["0", "false"],
      script: ["1", "false"],
      scriptscript: ["2", "false"]
    }, m2 = p2[c2.value.style];
    return S.setAttribute("scriptlevel", m2[0]), S.setAttribute("displaystyle", m2[1]), S;
  }, _.sizing = function(c2, E2) {
    var g2 = d2(c2.value.value, E2), S = new n.MathNode("mstyle", g2);
    return S.setAttribute(
      "mathsize",
      t2.sizingMultiplier[c2.value.size] + "em"
    ), S;
  }, _.overline = function(c2, E2) {
    var g2 = new n.MathNode(
      "mo",
      [new n.TextNode("‾")]
    );
    g2.setAttribute("stretchy", "true");
    var S = new n.MathNode(
      "mover",
      [
        f2(c2.value.body, E2),
        g2
      ]
    );
    return S.setAttribute("accent", "true"), S;
  }, _.underline = function(c2, E2) {
    var g2 = new n.MathNode(
      "mo",
      [new n.TextNode("‾")]
    );
    g2.setAttribute("stretchy", "true");
    var S = new n.MathNode(
      "munder",
      [
        f2(c2.value.body, E2),
        g2
      ]
    );
    return S.setAttribute("accentunder", "true"), S;
  }, _.rule = function(c2) {
    var E2 = new n.MathNode("mrow");
    return E2;
  }, _.llap = function(c2, E2) {
    var g2 = new n.MathNode(
      "mpadded",
      [f2(c2.value.body, E2)]
    );
    return g2.setAttribute("lspace", "-1width"), g2.setAttribute("width", "0px"), g2;
  }, _.rlap = function(c2, E2) {
    var g2 = new n.MathNode(
      "mpadded",
      [f2(c2.value.body, E2)]
    );
    return g2.setAttribute("width", "0px"), g2;
  }, _.phantom = function(c2, E2, g2) {
    var S = d2(c2.value.value, E2);
    return new n.MathNode("mphantom", S);
  };
  var d2 = function(c2, E2) {
    for (var g2 = [], S = 0; S < c2.length; S++) {
      var p2 = c2[S];
      g2.push(f2(p2, E2));
    }
    return g2;
  }, f2 = function(c2, E2) {
    if (!c2)
      return new n.MathNode("mrow");
    if (_[c2.type])
      return _[c2.type](c2, E2);
    throw new i2(
      "Got group of unknown type: '" + c2.type + "'"
    );
  }, b = function(c2, E2, g2) {
    var S = d2(c2, g2), p2 = new n.MathNode("mrow", S), m2 = new n.MathNode(
      "annotation",
      [new n.TextNode(E2)]
    );
    m2.setAttribute("encoding", "application/x-tex");
    var R2 = new n.MathNode(
      "semantics",
      [p2, m2]
    ), T = new n.MathNode("math", [R2]);
    return s2(["katex-mathml"], [T]);
  };
  return la = b, la;
}
var ca, gu;
function ih() {
  if (gu)
    return ca;
  gu = 1;
  function t2(n) {
    this.style = n.style, this.color = n.color, this.size = n.size, this.phantom = n.phantom, this.font = n.font, n.parentStyle === void 0 ? this.parentStyle = n.style : this.parentStyle = n.parentStyle, n.parentSize === void 0 ? this.parentSize = n.size : this.parentSize = n.parentSize;
  }
  t2.prototype.extend = function(n) {
    var i2 = {
      style: this.style,
      size: this.size,
      color: this.color,
      parentStyle: this.style,
      parentSize: this.size,
      phantom: this.phantom,
      font: this.font
    };
    for (var r2 in n)
      n.hasOwnProperty(r2) && (i2[r2] = n[r2]);
    return new t2(i2);
  }, t2.prototype.withStyle = function(n) {
    return this.extend({
      style: n
    });
  }, t2.prototype.withSize = function(n) {
    return this.extend({
      size: n
    });
  }, t2.prototype.withColor = function(n) {
    return this.extend({
      color: n
    });
  }, t2.prototype.withPhantom = function() {
    return this.extend({
      phantom: true
    });
  }, t2.prototype.withFont = function(n) {
    return this.extend({
      font: n
    });
  }, t2.prototype.reset = function() {
    return this.extend({});
  };
  var e2 = {
    "katex-blue": "#6495ed",
    "katex-orange": "#ffa500",
    "katex-pink": "#ff00af",
    "katex-red": "#df0030",
    "katex-green": "#28ae7b",
    "katex-gray": "gray",
    "katex-purple": "#9d38bd",
    "katex-blueA": "#c7e9f1",
    "katex-blueB": "#9cdceb",
    "katex-blueC": "#58c4dd",
    "katex-blueD": "#29abca",
    "katex-blueE": "#1c758a",
    "katex-tealA": "#acead7",
    "katex-tealB": "#76ddc0",
    "katex-tealC": "#5cd0b3",
    "katex-tealD": "#55c1a7",
    "katex-tealE": "#49a88f",
    "katex-greenA": "#c9e2ae",
    "katex-greenB": "#a6cf8c",
    "katex-greenC": "#83c167",
    "katex-greenD": "#77b05d",
    "katex-greenE": "#699c52",
    "katex-goldA": "#f7c797",
    "katex-goldB": "#f9b775",
    "katex-goldC": "#f0ac5f",
    "katex-goldD": "#e1a158",
    "katex-goldE": "#c78d46",
    "katex-redA": "#f7a1a3",
    "katex-redB": "#ff8080",
    "katex-redC": "#fc6255",
    "katex-redD": "#e65a4c",
    "katex-redE": "#cf5044",
    "katex-maroonA": "#ecabc1",
    "katex-maroonB": "#ec92ab",
    "katex-maroonC": "#c55f73",
    "katex-maroonD": "#a24d61",
    "katex-maroonE": "#94424f",
    "katex-purpleA": "#caa3e8",
    "katex-purpleB": "#b189c6",
    "katex-purpleC": "#9a72ac",
    "katex-purpleD": "#715582",
    "katex-purpleE": "#644172",
    "katex-mintA": "#f5f9e8",
    "katex-mintB": "#edf2df",
    "katex-mintC": "#e0e5cc",
    "katex-grayA": "#fdfdfd",
    "katex-grayB": "#f7f7f7",
    "katex-grayC": "#eeeeee",
    "katex-grayD": "#dddddd",
    "katex-grayE": "#cccccc",
    "katex-grayF": "#aaaaaa",
    "katex-grayG": "#999999",
    "katex-grayH": "#555555",
    "katex-grayI": "#333333",
    "katex-kaBlue": "#314453",
    "katex-kaGreen": "#639b24"
  };
  return t2.prototype.getColor = function() {
    return this.phantom ? "transparent" : e2[this.color] || this.color;
  }, ca = t2, ca;
}
var ua, fu;
function oh() {
  if (fu)
    return ua;
  fu = 1;
  var t2 = nh(), e2 = ah(), n = xr(), i2 = ih(), r2 = g0(), a2 = Ir(), s2 = n.makeSpan, o2 = function(l2, u2, _) {
    _ = _ || new r2({});
    var d2 = a2.TEXT;
    _.displayMode && (d2 = a2.DISPLAY);
    var f2 = new i2({
      style: d2,
      size: "size5"
    }), b = e2(l2, u2, f2), c2 = t2(l2, f2), E2 = s2(["katex"], [
      b,
      c2
    ]);
    return _.displayMode ? s2(["katex-display"], [E2]) : E2;
  };
  return ua = o2, ua;
}
var _a$1 = { exports: {} }, Su;
function sh() {
  return Su || (Su = 1, function(t2) {
    var e2 = Ht$1(), n = en$1();
    function i2(o2, l2, u2) {
      typeof o2 == "string" && (o2 = [o2]), typeof l2 == "number" && (l2 = { numArgs: l2 });
      for (var _ = {
        numArgs: l2.numArgs,
        argTypes: l2.argTypes,
        greediness: l2.greediness === void 0 ? 1 : l2.greediness,
        allowedInText: !!l2.allowedInText,
        numOptionalArgs: l2.numOptionalArgs || 0,
        handler: u2
      }, d2 = 0; d2 < o2.length; ++d2)
        t2.exports[o2[d2]] = _;
    }
    i2("\\sqrt", {
      numArgs: 1,
      numOptionalArgs: 1
    }, function(o2, l2) {
      var u2 = l2[0], _ = l2[1];
      return {
        type: "sqrt",
        body: _,
        index: u2
      };
    }), i2("\\text", {
      numArgs: 1,
      argTypes: ["text"],
      greediness: 2
    }, function(o2, l2) {
      var u2 = l2[0], _;
      return u2.type === "ordgroup" ? _ = u2.value : _ = [u2], {
        type: "text",
        body: _
      };
    }), i2("\\color", {
      numArgs: 2,
      allowedInText: true,
      greediness: 3,
      argTypes: ["color", "original"]
    }, function(o2, l2) {
      var u2 = l2[0], _ = l2[1], d2;
      return _.type === "ordgroup" ? d2 = _.value : d2 = [_], {
        type: "color",
        color: u2.value,
        value: d2
      };
    }), i2("\\overline", {
      numArgs: 1
    }, function(o2, l2) {
      var u2 = l2[0];
      return {
        type: "overline",
        body: u2
      };
    }), i2("\\underline", {
      numArgs: 1
    }, function(o2, l2) {
      var u2 = l2[0];
      return {
        type: "underline",
        body: u2
      };
    }), i2("\\rule", {
      numArgs: 2,
      numOptionalArgs: 1,
      argTypes: ["size", "size", "size"]
    }, function(o2, l2) {
      var u2 = l2[0], _ = l2[1], d2 = l2[2];
      return {
        type: "rule",
        shift: u2 && u2.value,
        width: _.value,
        height: d2.value
      };
    }), i2("\\KaTeX", {
      numArgs: 0
    }, function(o2) {
      return {
        type: "katex"
      };
    }), i2("\\phantom", {
      numArgs: 1
    }, function(o2, l2) {
      var u2 = l2[0], _;
      return u2.type === "ordgroup" ? _ = u2.value : _ = [u2], {
        type: "phantom",
        value: _
      };
    });
    var r2 = {
      "\\bigl": { type: "open", size: 1 },
      "\\Bigl": { type: "open", size: 2 },
      "\\biggl": { type: "open", size: 3 },
      "\\Biggl": { type: "open", size: 4 },
      "\\bigr": { type: "close", size: 1 },
      "\\Bigr": { type: "close", size: 2 },
      "\\biggr": { type: "close", size: 3 },
      "\\Biggr": { type: "close", size: 4 },
      "\\bigm": { type: "rel", size: 1 },
      "\\Bigm": { type: "rel", size: 2 },
      "\\biggm": { type: "rel", size: 3 },
      "\\Biggm": { type: "rel", size: 4 },
      "\\big": { type: "textord", size: 1 },
      "\\Big": { type: "textord", size: 2 },
      "\\bigg": { type: "textord", size: 3 },
      "\\Bigg": { type: "textord", size: 4 }
    }, a2 = [
      "(",
      ")",
      "[",
      "\\lbrack",
      "]",
      "\\rbrack",
      "\\{",
      "\\lbrace",
      "\\}",
      "\\rbrace",
      "\\lfloor",
      "\\rfloor",
      "\\lceil",
      "\\rceil",
      "<",
      ">",
      "\\langle",
      "\\rangle",
      "\\lt",
      "\\gt",
      "\\lvert",
      "\\rvert",
      "\\lVert",
      "\\rVert",
      "\\lgroup",
      "\\rgroup",
      "\\lmoustache",
      "\\rmoustache",
      "/",
      "\\backslash",
      "|",
      "\\vert",
      "\\|",
      "\\Vert",
      "\\uparrow",
      "\\Uparrow",
      "\\downarrow",
      "\\Downarrow",
      "\\updownarrow",
      "\\Updownarrow",
      "."
    ], s2 = {
      "\\Bbb": "\\mathbb",
      "\\bold": "\\mathbf",
      "\\frak": "\\mathfrak"
    };
    i2([
      "\\blue",
      "\\orange",
      "\\pink",
      "\\red",
      "\\green",
      "\\gray",
      "\\purple",
      "\\blueA",
      "\\blueB",
      "\\blueC",
      "\\blueD",
      "\\blueE",
      "\\tealA",
      "\\tealB",
      "\\tealC",
      "\\tealD",
      "\\tealE",
      "\\greenA",
      "\\greenB",
      "\\greenC",
      "\\greenD",
      "\\greenE",
      "\\goldA",
      "\\goldB",
      "\\goldC",
      "\\goldD",
      "\\goldE",
      "\\redA",
      "\\redB",
      "\\redC",
      "\\redD",
      "\\redE",
      "\\maroonA",
      "\\maroonB",
      "\\maroonC",
      "\\maroonD",
      "\\maroonE",
      "\\purpleA",
      "\\purpleB",
      "\\purpleC",
      "\\purpleD",
      "\\purpleE",
      "\\mintA",
      "\\mintB",
      "\\mintC",
      "\\grayA",
      "\\grayB",
      "\\grayC",
      "\\grayD",
      "\\grayE",
      "\\grayF",
      "\\grayG",
      "\\grayH",
      "\\grayI",
      "\\kaBlue",
      "\\kaGreen"
    ], {
      numArgs: 1,
      allowedInText: true,
      greediness: 3
    }, function(o2, l2) {
      var u2 = l2[0], _;
      return u2.type === "ordgroup" ? _ = u2.value : _ = [u2], {
        type: "color",
        color: "katex-" + o2.funcName.slice(1),
        value: _
      };
    }), i2([
      "\\arcsin",
      "\\arccos",
      "\\arctan",
      "\\arg",
      "\\cos",
      "\\cosh",
      "\\cot",
      "\\coth",
      "\\csc",
      "\\deg",
      "\\dim",
      "\\exp",
      "\\hom",
      "\\ker",
      "\\lg",
      "\\ln",
      "\\log",
      "\\sec",
      "\\sin",
      "\\sinh",
      "\\tan",
      "\\tanh"
    ], {
      numArgs: 0
    }, function(o2) {
      return {
        type: "op",
        limits: false,
        symbol: false,
        body: o2.funcName
      };
    }), i2([
      "\\det",
      "\\gcd",
      "\\inf",
      "\\lim",
      "\\liminf",
      "\\limsup",
      "\\max",
      "\\min",
      "\\Pr",
      "\\sup"
    ], {
      numArgs: 0
    }, function(o2) {
      return {
        type: "op",
        limits: true,
        symbol: false,
        body: o2.funcName
      };
    }), i2([
      "\\int",
      "\\iint",
      "\\iiint",
      "\\oint"
    ], {
      numArgs: 0
    }, function(o2) {
      return {
        type: "op",
        limits: false,
        symbol: true,
        body: o2.funcName
      };
    }), i2([
      "\\coprod",
      "\\bigvee",
      "\\bigwedge",
      "\\biguplus",
      "\\bigcap",
      "\\bigcup",
      "\\intop",
      "\\prod",
      "\\sum",
      "\\bigotimes",
      "\\bigoplus",
      "\\bigodot",
      "\\bigsqcup",
      "\\smallint"
    ], {
      numArgs: 0
    }, function(o2) {
      return {
        type: "op",
        limits: true,
        symbol: true,
        body: o2.funcName
      };
    }), i2([
      "\\dfrac",
      "\\frac",
      "\\tfrac",
      "\\dbinom",
      "\\binom",
      "\\tbinom"
    ], {
      numArgs: 2,
      greediness: 2
    }, function(o2, l2) {
      var u2 = l2[0], _ = l2[1], d2, f2 = null, b = null, c2 = "auto";
      switch (o2.funcName) {
        case "\\dfrac":
        case "\\frac":
        case "\\tfrac":
          d2 = true;
          break;
        case "\\dbinom":
        case "\\binom":
        case "\\tbinom":
          d2 = false, f2 = "(", b = ")";
          break;
        default:
          throw new Error("Unrecognized genfrac command");
      }
      switch (o2.funcName) {
        case "\\dfrac":
        case "\\dbinom":
          c2 = "display";
          break;
        case "\\tfrac":
        case "\\tbinom":
          c2 = "text";
          break;
      }
      return {
        type: "genfrac",
        numer: u2,
        denom: _,
        hasBarLine: d2,
        leftDelim: f2,
        rightDelim: b,
        size: c2
      };
    }), i2(["\\llap", "\\rlap"], {
      numArgs: 1,
      allowedInText: true
    }, function(o2, l2) {
      var u2 = l2[0];
      return {
        type: o2.funcName.slice(1),
        body: u2
      };
    }), i2([
      "\\bigl",
      "\\Bigl",
      "\\biggl",
      "\\Biggl",
      "\\bigr",
      "\\Bigr",
      "\\biggr",
      "\\Biggr",
      "\\bigm",
      "\\Bigm",
      "\\biggm",
      "\\Biggm",
      "\\big",
      "\\Big",
      "\\bigg",
      "\\Bigg",
      "\\left",
      "\\right"
    ], {
      numArgs: 1
    }, function(o2, l2) {
      var u2 = l2[0];
      if (!e2.contains(a2, u2.value))
        throw new n(
          "Invalid delimiter: '" + u2.value + "' after '" + o2.funcName + "'",
          o2.lexer,
          o2.positions[1]
        );
      return o2.funcName === "\\left" || o2.funcName === "\\right" ? {
        type: "leftright",
        value: u2.value
      } : {
        type: "delimsizing",
        size: r2[o2.funcName].size,
        delimType: r2[o2.funcName].type,
        value: u2.value
      };
    }), i2([
      "\\tiny",
      "\\scriptsize",
      "\\footnotesize",
      "\\small",
      "\\normalsize",
      "\\large",
      "\\Large",
      "\\LARGE",
      "\\huge",
      "\\Huge"
    ], 0, null), i2([
      "\\displaystyle",
      "\\textstyle",
      "\\scriptstyle",
      "\\scriptscriptstyle"
    ], 0, null), i2([
      // styles
      "\\mathrm",
      "\\mathit",
      "\\mathbf",
      // families
      "\\mathbb",
      "\\mathcal",
      "\\mathfrak",
      "\\mathscr",
      "\\mathsf",
      "\\mathtt",
      // aliases
      "\\Bbb",
      "\\bold",
      "\\frak"
    ], {
      numArgs: 1,
      greediness: 2
    }, function(o2, l2) {
      var u2 = l2[0], _ = o2.funcName;
      return _ in s2 && (_ = s2[_]), {
        type: "font",
        font: _.slice(1),
        body: u2
      };
    }), i2([
      "\\acute",
      "\\grave",
      "\\ddot",
      "\\tilde",
      "\\bar",
      "\\breve",
      "\\check",
      "\\hat",
      "\\vec",
      "\\dot"
      // We don't support expanding accents yet
      // "\\widetilde", "\\widehat"
    ], {
      numArgs: 1
    }, function(o2, l2) {
      var u2 = l2[0];
      return {
        type: "accent",
        accent: o2.funcName,
        base: u2
      };
    }), i2(["\\over", "\\choose"], {
      numArgs: 0
    }, function(o2) {
      var l2;
      switch (o2.funcName) {
        case "\\over":
          l2 = "\\frac";
          break;
        case "\\choose":
          l2 = "\\binom";
          break;
        default:
          throw new Error("Unrecognized infix genfrac command");
      }
      return {
        type: "infix",
        replaceWith: l2
      };
    }), i2(["\\\\", "\\cr"], {
      numArgs: 0,
      numOptionalArgs: 1,
      argTypes: ["size"]
    }, function(o2, l2) {
      var u2 = l2[0];
      return {
        type: "cr",
        size: u2
      };
    }), i2(["\\begin", "\\end"], {
      numArgs: 1,
      argTypes: ["text"]
    }, function(o2, l2) {
      var u2 = l2[0];
      if (u2.type !== "ordgroup")
        throw new n(
          "Invalid environment name",
          o2.lexer,
          o2.positions[1]
        );
      for (var _ = "", d2 = 0; d2 < u2.value.length; ++d2)
        _ += u2.value[d2].value;
      return {
        type: "environment",
        name: _,
        namepos: o2.positions[1]
      };
    });
  }(_a$1)), _a$1.exports;
}
var da = { exports: {} }, pa, bu;
function S0() {
  if (bu)
    return pa;
  bu = 1;
  function t2(e2, n, i2) {
    this.type = e2, this.value = n, this.mode = i2;
  }
  return pa = {
    ParseNode: t2
  }, pa;
}
var Tu;
function lh() {
  return Tu || (Tu = 1, function(t2) {
    var e2 = Xn(), n = S0(), i2 = en$1(), r2 = n.ParseNode;
    function a2(o2, l2) {
      for (var u2 = [], _ = [u2], d2 = []; ; ) {
        var f2 = o2.parseExpression(false, null);
        u2.push(new r2("ordgroup", f2, o2.mode));
        var b = o2.nextToken.text;
        if (b === "&")
          o2.consume();
        else {
          if (b === "\\end")
            break;
          if (b === "\\\\" || b === "\\cr") {
            var c2 = o2.parseFunction();
            d2.push(c2.value.size), u2 = [], _.push(u2);
          } else {
            var E2 = Math.min(o2.pos + 1, o2.lexer._input.length);
            throw new i2(
              "Expected & or \\\\ or \\end",
              o2.lexer,
              E2
            );
          }
        }
      }
      return l2.body = _, l2.rowGaps = d2, new r2(l2.type, l2, o2.mode);
    }
    function s2(o2, l2, u2) {
      typeof o2 == "string" && (o2 = [o2]), typeof l2 == "number" && (l2 = { numArgs: l2 });
      for (var _ = {
        numArgs: l2.numArgs || 0,
        argTypes: l2.argTypes,
        greediness: 1,
        allowedInText: !!l2.allowedInText,
        numOptionalArgs: l2.numOptionalArgs || 0,
        handler: u2
      }, d2 = 0; d2 < o2.length; ++d2)
        t2.exports[o2[d2]] = _;
    }
    s2("array", {
      numArgs: 1
    }, function(o2, l2) {
      var u2 = l2[0];
      u2 = u2.value.map ? u2.value : [u2];
      var _ = u2.map(function(f2) {
        var b = f2.value;
        if ("lcr".indexOf(b) !== -1)
          return {
            type: "align",
            align: b
          };
        if (b === "|")
          return {
            type: "separator",
            separator: "|"
          };
        throw new i2(
          "Unknown column alignment: " + f2.value,
          o2.lexer,
          o2.positions[1]
        );
      }), d2 = {
        type: "array",
        cols: _,
        hskipBeforeAndAfter: true
        // \@preamble in lttab.dtx
      };
      return d2 = a2(o2.parser, d2), d2;
    }), s2([
      "matrix",
      "pmatrix",
      "bmatrix",
      "Bmatrix",
      "vmatrix",
      "Vmatrix"
    ], {}, function(o2) {
      var l2 = {
        matrix: null,
        pmatrix: ["(", ")"],
        bmatrix: ["[", "]"],
        Bmatrix: ["\\{", "\\}"],
        vmatrix: ["|", "|"],
        Vmatrix: ["\\Vert", "\\Vert"]
      }[o2.envName], u2 = {
        type: "array",
        hskipBeforeAndAfter: false
        // \hskip -\arraycolsep in amsmath
      };
      return u2 = a2(o2.parser, u2), l2 && (u2 = new r2("leftright", {
        body: [u2],
        left: l2[0],
        right: l2[1]
      }, o2.mode)), u2;
    }), s2("cases", {}, function(o2) {
      var l2 = {
        type: "array",
        arraystretch: 1.2,
        cols: [{
          type: "align",
          align: "l",
          pregap: 0,
          postgap: e2.metrics.quad
        }, {
          type: "align",
          align: "l",
          pregap: 0,
          postgap: 0
        }]
      };
      return l2 = a2(o2.parser, l2), l2 = new r2("leftright", {
        body: [l2],
        left: "\\{",
        right: "."
      }, o2.mode), l2;
    }), s2("aligned", {}, function(o2) {
      var l2 = {
        type: "array",
        cols: []
      };
      l2 = a2(o2.parser, l2);
      var u2 = new r2("ordgroup", [], o2.mode), _ = 0;
      l2.value.body.forEach(function(c2) {
        var E2;
        for (E2 = 1; E2 < c2.length; E2 += 2)
          c2[E2].value.unshift(u2);
        _ < c2.length && (_ = c2.length);
      });
      for (var d2 = 0; d2 < _; ++d2) {
        var f2 = "r", b = 0;
        d2 % 2 === 1 ? f2 = "l" : d2 > 0 && (b = 2), l2.value.cols[d2] = {
          type: "align",
          align: f2,
          pregap: b,
          postgap: 0
        };
      }
      return l2;
    });
  }(da)), da.exports;
}
var ma, hu;
function ch() {
  if (hu)
    return ma;
  hu = 1;
  function t2(n) {
    if (!n.__matchAtRelocatable) {
      var i2 = n.source + "|()", r2 = "g" + (n.ignoreCase ? "i" : "") + (n.multiline ? "m" : "") + (n.unicode ? "u" : "");
      n.__matchAtRelocatable = new RegExp(i2, r2);
    }
    return n.__matchAtRelocatable;
  }
  function e2(n, i2, r2) {
    if (n.global || n.sticky)
      throw new Error("matchAt(...): Only non-global regexes are supported");
    var a2 = t2(n);
    a2.lastIndex = r2;
    var s2 = a2.exec(i2);
    return s2[s2.length - 1] == null ? (s2.length = s2.length - 1, s2) : null;
  }
  return ma = e2, ma;
}
var Ea, Ru;
function uh() {
  if (Ru)
    return Ea;
  Ru = 1;
  var t2 = ch(), e2 = en$1();
  function n(l2) {
    this._input = l2;
  }
  function i2(l2, u2, _) {
    this.text = l2, this.data = u2, this.position = _;
  }
  var r2 = new RegExp(
    `([ \r
	]+)|(---?|[!-\\[\\]-‧‪-퟿豈-￿]|[\uD800-\uDBFF][\uDC00-\uDFFF]|\\\\(?:[a-zA-Z]+|[^\uD800-\uDFFF]))`
  ), a2 = /\s*/;
  n.prototype._innerLex = function(l2, u2) {
    var _ = this._input;
    if (l2 === _.length)
      return new i2("EOF", null, l2);
    var d2 = t2(r2, _, l2);
    if (d2 === null)
      throw new e2(
        "Unexpected character: '" + _[l2] + "'",
        this,
        l2
      );
    return d2[2] ? new i2(d2[2], null, l2 + d2[2].length) : u2 ? this._innerLex(l2 + d2[1].length, true) : new i2(" ", null, l2 + d2[1].length);
  };
  var s2 = /#[a-z0-9]+|[a-z]+/i;
  n.prototype._innerLexColor = function(l2) {
    var u2 = this._input, _ = t2(a2, u2, l2)[0];
    l2 += _.length;
    var d2;
    if (d2 = t2(s2, u2, l2))
      return new i2(d2[0], null, l2 + d2[0].length);
    throw new e2("Invalid color", this, l2);
  };
  var o2 = /(-?)\s*(\d+(?:\.\d*)?|\.\d+)\s*([a-z]{2})/;
  return n.prototype._innerLexSize = function(l2) {
    var u2 = this._input, _ = t2(a2, u2, l2)[0];
    l2 += _.length;
    var d2;
    if (d2 = t2(o2, u2, l2)) {
      var f2 = d2[3];
      if (f2 !== "em" && f2 !== "ex")
        throw new e2("Invalid unit: '" + f2 + "'", this, l2);
      return new i2(d2[0], {
        number: +(d2[1] + d2[2]),
        unit: f2
      }, l2 + d2[0].length);
    }
    throw new e2("Invalid size", this, l2);
  }, n.prototype._innerLexWhitespace = function(l2) {
    var u2 = this._input, _ = t2(a2, u2, l2)[0];
    return l2 += _.length, new i2(_[0], null, l2);
  }, n.prototype.lex = function(l2, u2) {
    if (u2 === "math")
      return this._innerLex(l2, true);
    if (u2 === "text")
      return this._innerLex(l2, false);
    if (u2 === "color")
      return this._innerLexColor(l2);
    if (u2 === "size")
      return this._innerLexSize(l2);
    if (u2 === "whitespace")
      return this._innerLexWhitespace(l2);
  }, Ea = n, Ea;
}
var ga, Cu;
function _h() {
  if (Cu)
    return ga;
  Cu = 1;
  var t2 = sh(), e2 = lh(), n = uh(), i2 = Dr(), r2 = Ht$1(), a2 = S0(), s2 = en$1();
  function o2(c2, E2) {
    this.lexer = new n(c2), this.settings = E2;
  }
  var l2 = a2.ParseNode;
  function u2(c2, E2) {
    this.result = c2, this.isFunction = E2;
  }
  o2.prototype.expect = function(c2, E2) {
    if (this.nextToken.text !== c2)
      throw new s2(
        "Expected '" + c2 + "', got '" + this.nextToken.text + "'",
        this.lexer,
        this.nextToken.position
      );
    E2 !== false && this.consume();
  }, o2.prototype.consume = function() {
    this.pos = this.nextToken.position, this.nextToken = this.lexer.lex(this.pos, this.mode);
  }, o2.prototype.parse = function() {
    this.mode = "math", this.pos = 0, this.nextToken = this.lexer.lex(this.pos, this.mode);
    var c2 = this.parseInput();
    return c2;
  }, o2.prototype.parseInput = function() {
    var c2 = this.parseExpression(false);
    return this.expect("EOF", false), c2;
  };
  var _ = ["}", "\\end", "\\right", "&", "\\\\", "\\cr"];
  o2.prototype.parseExpression = function(c2, E2) {
    for (var g2 = []; ; ) {
      var S = this.nextToken, p2 = this.pos;
      if (_.indexOf(S.text) !== -1 || E2 && S.text === E2)
        break;
      var m2 = this.parseAtom();
      if (!m2) {
        if (!this.settings.throwOnError && S.text[0] === "\\") {
          var R2 = this.handleUnsupportedCmd();
          g2.push(R2), p2 = S.position;
          continue;
        }
        break;
      }
      if (c2 && m2.type === "infix") {
        this.pos = p2, this.nextToken = S;
        break;
      }
      g2.push(m2);
    }
    return this.handleInfixNodes(g2);
  }, o2.prototype.handleInfixNodes = function(c2) {
    for (var E2 = -1, g2, S = 0; S < c2.length; S++) {
      var p2 = c2[S];
      if (p2.type === "infix") {
        if (E2 !== -1)
          throw new s2(
            "only one infix operator per group",
            this.lexer,
            -1
          );
        E2 = S, g2 = p2.value.replaceWith;
      }
    }
    if (E2 !== -1) {
      var m2, R2, T = c2.slice(0, E2), h2 = c2.slice(E2 + 1);
      T.length === 1 && T[0].type === "ordgroup" ? m2 = T[0] : m2 = new l2("ordgroup", T, this.mode), h2.length === 1 && h2[0].type === "ordgroup" ? R2 = h2[0] : R2 = new l2("ordgroup", h2, this.mode);
      var C2 = this.callFunction(
        g2,
        [m2, R2],
        null
      );
      return [new l2(C2.type, C2, this.mode)];
    } else
      return c2;
  };
  var d2 = 1;
  o2.prototype.handleSupSubscript = function(c2) {
    var E2 = this.nextToken.text, g2 = this.pos;
    this.consume();
    var S = this.parseGroup();
    if (S)
      if (S.isFunction) {
        var p2 = t2[S.result].greediness;
        if (p2 > d2)
          return this.parseFunction(S);
        throw new s2(
          "Got function '" + S.result + "' with no arguments as " + c2,
          this.lexer,
          g2 + 1
        );
      } else
        return S.result;
    else {
      if (!this.settings.throwOnError && this.nextToken.text[0] === "\\")
        return this.handleUnsupportedCmd();
      throw new s2(
        "Expected group after '" + E2 + "'",
        this.lexer,
        g2 + 1
      );
    }
  }, o2.prototype.handleUnsupportedCmd = function() {
    for (var c2 = this.nextToken.text, E2 = [], g2 = 0; g2 < c2.length; g2++)
      E2.push(new l2("textord", c2[g2], "text"));
    var S = new l2(
      "text",
      {
        body: E2,
        type: "text"
      },
      this.mode
    ), p2 = new l2(
      "color",
      {
        color: this.settings.errorColor,
        value: [S],
        type: "color"
      },
      this.mode
    );
    return this.consume(), p2;
  }, o2.prototype.parseAtom = function() {
    var c2 = this.parseImplicitGroup();
    if (this.mode === "text")
      return c2;
    for (var E2, g2; ; ) {
      var S = this.nextToken;
      if (S.text === "\\limits" || S.text === "\\nolimits") {
        if (!c2 || c2.type !== "op")
          throw new s2(
            "Limit controls must follow a math operator",
            this.lexer,
            this.pos
          );
        var p2 = S.text === "\\limits";
        c2.value.limits = p2, c2.value.alwaysHandleSupSub = true, this.consume();
      } else if (S.text === "^") {
        if (E2)
          throw new s2(
            "Double superscript",
            this.lexer,
            this.pos
          );
        E2 = this.handleSupSubscript("superscript");
      } else if (S.text === "_") {
        if (g2)
          throw new s2(
            "Double subscript",
            this.lexer,
            this.pos
          );
        g2 = this.handleSupSubscript("subscript");
      } else if (S.text === "'") {
        var m2 = new l2("textord", "\\prime", this.mode), R2 = [m2];
        for (this.consume(); this.nextToken.text === "'"; )
          R2.push(m2), this.consume();
        E2 = new l2("ordgroup", R2, this.mode);
      } else
        break;
    }
    return E2 || g2 ? new l2("supsub", {
      base: c2,
      sup: E2,
      sub: g2
    }, this.mode) : c2;
  };
  var f2 = [
    "\\tiny",
    "\\scriptsize",
    "\\footnotesize",
    "\\small",
    "\\normalsize",
    "\\large",
    "\\Large",
    "\\LARGE",
    "\\huge",
    "\\Huge"
  ], b = [
    "\\displaystyle",
    "\\textstyle",
    "\\scriptstyle",
    "\\scriptscriptstyle"
  ];
  return o2.prototype.parseImplicitGroup = function() {
    var c2 = this.parseSymbol();
    if (c2 == null)
      return this.parseFunction();
    var E2 = c2.result, g2;
    if (E2 === "\\left") {
      var S = this.parseFunction(c2);
      g2 = this.parseExpression(false), this.expect("\\right", false);
      var p2 = this.parseFunction();
      return new l2("leftright", {
        body: g2,
        left: S.value.value,
        right: p2.value.value
      }, this.mode);
    } else if (E2 === "\\begin") {
      var m2 = this.parseFunction(c2), R2 = m2.value.name;
      if (!e2.hasOwnProperty(R2))
        throw new s2(
          "No such environment: " + R2,
          this.lexer,
          m2.value.namepos
        );
      var T = e2[R2], h2 = this.parseArguments("\\begin{" + R2 + "}", T), C2 = {
        mode: this.mode,
        envName: R2,
        parser: this,
        lexer: this.lexer,
        positions: h2.pop()
      }, A2 = T.handler(C2, h2);
      this.expect("\\end", false);
      var I2 = this.parseFunction();
      if (I2.value.name !== R2)
        throw new s2(
          "Mismatch: \\begin{" + R2 + "} matched by \\end{" + I2.value.name + "}",
          this.lexer
          /* , end.value.namepos */
        );
      return A2.position = I2.position, A2;
    } else
      return r2.contains(f2, E2) ? (g2 = this.parseExpression(false), new l2("sizing", {
        // Figure out what size to use based on the list of functions above
        size: "size" + (r2.indexOf(f2, E2) + 1),
        value: g2
      }, this.mode)) : r2.contains(b, E2) ? (g2 = this.parseExpression(true), new l2("styling", {
        // Figure out what style to use by pulling out the style from
        // the function name
        style: E2.slice(1, E2.length - 5),
        value: g2
      }, this.mode)) : this.parseFunction(c2);
  }, o2.prototype.parseFunction = function(c2) {
    if (c2 || (c2 = this.parseGroup()), c2)
      if (c2.isFunction) {
        var E2 = c2.result, g2 = t2[E2];
        if (this.mode === "text" && !g2.allowedInText)
          throw new s2(
            "Can't use function '" + E2 + "' in text mode",
            this.lexer,
            c2.position
          );
        var S = this.parseArguments(E2, g2), p2 = this.callFunction(E2, S, S.pop());
        return new l2(p2.type, p2, this.mode);
      } else
        return c2.result;
    else
      return null;
  }, o2.prototype.callFunction = function(c2, E2, g2) {
    var S = {
      funcName: c2,
      parser: this,
      lexer: this.lexer,
      positions: g2
    };
    return t2[c2].handler(S, E2);
  }, o2.prototype.parseArguments = function(c2, E2) {
    var g2 = E2.numArgs + E2.numOptionalArgs;
    if (g2 === 0)
      return [[this.pos]];
    for (var S = E2.greediness, p2 = [this.pos], m2 = [], R2 = 0; R2 < g2; R2++) {
      var T = E2.argTypes && E2.argTypes[R2], h2;
      if (R2 < E2.numOptionalArgs) {
        if (T ? h2 = this.parseSpecialGroup(T, true) : h2 = this.parseOptionalGroup(), !h2) {
          m2.push(null), p2.push(this.pos);
          continue;
        }
      } else if (T ? h2 = this.parseSpecialGroup(T) : h2 = this.parseGroup(), !h2)
        if (!this.settings.throwOnError && this.nextToken.text[0] === "\\")
          h2 = new u2(
            this.handleUnsupportedCmd(this.nextToken.text),
            false
          );
        else
          throw new s2(
            "Expected group after '" + c2 + "'",
            this.lexer,
            this.pos
          );
      var C2;
      if (h2.isFunction) {
        var A2 = t2[h2.result].greediness;
        if (A2 > S)
          C2 = this.parseFunction(h2);
        else
          throw new s2(
            "Got function '" + h2.result + "' as argument to '" + c2 + "'",
            this.lexer,
            this.pos - 1
          );
      } else
        C2 = h2.result;
      m2.push(C2), p2.push(this.pos);
    }
    return m2.push(p2), m2;
  }, o2.prototype.parseSpecialGroup = function(c2, E2) {
    var g2 = this.mode;
    if (c2 === "original" && (c2 = g2), c2 === "color" || c2 === "size") {
      var S = this.nextToken;
      if (E2 && S.text !== "[")
        return null;
      this.mode = c2, this.expect(E2 ? "[" : "{");
      var p2 = this.nextToken;
      this.mode = g2;
      var m2;
      return c2 === "color" ? m2 = p2.text : m2 = p2.data, this.consume(), this.expect(E2 ? "]" : "}"), new u2(
        new l2(c2, m2, g2),
        false
      );
    } else if (c2 === "text") {
      var R2 = this.lexer.lex(this.pos, "whitespace");
      this.pos = R2.position;
    }
    this.mode = c2, this.nextToken = this.lexer.lex(this.pos, c2);
    var T;
    return E2 ? T = this.parseOptionalGroup() : T = this.parseGroup(), this.mode = g2, this.nextToken = this.lexer.lex(this.pos, g2), T;
  }, o2.prototype.parseGroup = function() {
    if (this.nextToken.text === "{") {
      this.consume();
      var c2 = this.parseExpression(false);
      return this.expect("}"), new u2(
        new l2("ordgroup", c2, this.mode),
        false
      );
    } else
      return this.parseSymbol();
  }, o2.prototype.parseOptionalGroup = function() {
    if (this.nextToken.text === "[") {
      this.consume();
      var c2 = this.parseExpression(false, "]");
      return this.expect("]"), new u2(
        new l2("ordgroup", c2, this.mode),
        false
      );
    } else
      return null;
  }, o2.prototype.parseSymbol = function() {
    var c2 = this.nextToken;
    return t2[c2.text] ? (this.consume(), new u2(
      c2.text,
      true
    )) : i2[this.mode][c2.text] ? (this.consume(), new u2(
      new l2(
        i2[this.mode][c2.text].group,
        c2.text,
        this.mode
      ),
      false
    )) : null;
  }, o2.prototype.ParseNode = l2, ga = o2, ga;
}
var fa, Nu;
function dh() {
  if (Nu)
    return fa;
  Nu = 1;
  var t2 = _h(), e2 = function(n, i2) {
    var r2 = new t2(n, i2);
    return r2.parse();
  };
  return fa = e2, fa;
}
var Sa, vu;
function ph() {
  if (vu)
    return Sa;
  vu = 1;
  var t2 = en$1(), e2 = g0(), n = oh(), i2 = dh(), r2 = Ht$1(), a2 = function(l2, u2, _) {
    r2.clearNode(u2);
    var d2 = new e2(_), f2 = i2(l2, d2), b = n(f2, l2, d2).toNode();
    u2.appendChild(b);
  };
  typeof document < "u" && document.compatMode !== "CSS1Compat" && (typeof console < "u" && console.warn(
    "Warning: KaTeX doesn't work in quirks mode. Make sure your website has a suitable doctype."
  ), a2 = function() {
    throw new t2("KaTeX doesn't work in quirks mode.");
  });
  var s2 = function(l2, u2) {
    var _ = new e2(u2), d2 = i2(l2, _);
    return n(d2, l2, _).toMarkup();
  }, o2 = function(l2, u2) {
    var _ = new e2(u2);
    return i2(l2, _);
  };
  return Sa = {
    render: a2,
    renderToString: s2,
    /**
     * NOTE: This method is not currently recommended for public use.
     * The internal tree representation is unstable and is very likely
     * to change. Use at your own risk.
     */
    __parse: o2,
    ParseError: t2
  }, Sa;
}
var ba, Ou;
function mh() {
  if (Ou)
    return ba;
  Ou = 1;
  var t2 = ph();
  function e2(r2, a2) {
    var s2, o2, l2 = r2.posMax, u2 = true, _ = true;
    return s2 = a2 > 0 ? r2.src.charCodeAt(a2 - 1) : -1, o2 = a2 + 1 <= l2 ? r2.src.charCodeAt(a2 + 1) : -1, (s2 === 32 || s2 === 9 || o2 >= 48 && o2 <= 57) && (_ = false), (o2 === 32 || o2 === 9) && (u2 = false), {
      can_open: u2,
      can_close: _
    };
  }
  function n(r2, a2) {
    var s2, o2, l2, u2, _;
    if (r2.src[r2.pos] !== "$")
      return false;
    if (u2 = e2(r2, r2.pos), !u2.can_open)
      return a2 || (r2.pending += "$"), r2.pos += 1, true;
    for (s2 = r2.pos + 1, o2 = s2; (o2 = r2.src.indexOf("$", o2)) !== -1; ) {
      for (_ = o2 - 1; r2.src[_] === "\\"; )
        _ -= 1;
      if ((o2 - _) % 2 == 1)
        break;
      o2 += 1;
    }
    return o2 === -1 ? (a2 || (r2.pending += "$"), r2.pos = s2, true) : o2 - s2 === 0 ? (a2 || (r2.pending += "$$"), r2.pos = s2 + 1, true) : (u2 = e2(r2, o2), u2.can_close ? (a2 || (l2 = r2.push("math_inline", "math", 0), l2.markup = "$", l2.content = r2.src.slice(s2, o2)), r2.pos = o2 + 1, true) : (a2 || (r2.pending += "$"), r2.pos = s2, true));
  }
  function i2(r2, a2, s2, o2) {
    var l2, u2, _, d2, f2 = false, b, c2 = r2.bMarks[a2] + r2.tShift[a2], E2 = r2.eMarks[a2];
    if (c2 + 2 > E2 || r2.src.slice(c2, c2 + 2) !== "$$")
      return false;
    if (c2 += 2, l2 = r2.src.slice(c2, E2), o2)
      return true;
    for (l2.trim().slice(-2) === "$$" && (l2 = l2.trim().slice(0, -2), f2 = true), _ = a2; !f2 && (_++, !(_ >= s2 || (c2 = r2.bMarks[_] + r2.tShift[_], E2 = r2.eMarks[_], c2 < E2 && r2.tShift[_] < r2.blkIndent))); )
      r2.src.slice(c2, E2).trim().slice(-2) === "$$" && (d2 = r2.src.slice(0, E2).lastIndexOf("$$"), u2 = r2.src.slice(c2, d2), f2 = true);
    return r2.line = _ + 1, b = r2.push("math_block", "math", 0), b.block = true, b.content = (l2 && l2.trim() ? l2 + `
` : "") + r2.getLines(a2 + 1, _, r2.tShift[a2], true) + (u2 && u2.trim() ? u2 : ""), b.map = [a2, r2.line], b.markup = "$$", true;
  }
  return ba = function(a2, s2) {
    s2 = s2 || {};
    var o2 = function(d2) {
      s2.displayMode = false;
      try {
        return t2.renderToString(d2, s2);
      } catch (f2) {
        return s2.throwOnError && console.log(f2), d2;
      }
    }, l2 = function(d2, f2) {
      return o2(d2[f2].content);
    }, u2 = function(d2) {
      s2.displayMode = true;
      try {
        return "<p>" + t2.renderToString(d2, s2) + "</p>";
      } catch (f2) {
        return s2.throwOnError && console.log(f2), d2;
      }
    }, _ = function(d2, f2) {
      return u2(d2[f2].content) + `
`;
    };
    a2.inline.ruler.after("escape", "math_inline", n), a2.block.ruler.after("blockquote", "math_block", i2, {
      alt: ["paragraph", "reference", "blockquote", "list"]
    }), a2.renderer.rules.math_inline = l2, a2.renderer.rules.math_block = _;
  }, ba;
}
var Eh = mh();
const gh = /* @__PURE__ */ E0(Eh);
var Ta, Au;
function fh() {
  if (Au)
    return Ta;
  Au = 1;
  function t2(N2) {
    return N2 instanceof Map ? N2.clear = N2.delete = N2.set = function() {
      throw new Error("map is read-only");
    } : N2 instanceof Set && (N2.add = N2.clear = N2.delete = function() {
      throw new Error("set is read-only");
    }), Object.freeze(N2), Object.getOwnPropertyNames(N2).forEach((P2) => {
      const V = N2[P2], ie = typeof V;
      (ie === "object" || ie === "function") && !Object.isFrozen(V) && t2(V);
    }), N2;
  }
  class e2 {
    /**
     * @param {CompiledMode} mode
     */
    constructor(P2) {
      P2.data === void 0 && (P2.data = {}), this.data = P2.data, this.isMatchIgnored = false;
    }
    ignoreMatch() {
      this.isMatchIgnored = true;
    }
  }
  function n(N2) {
    return N2.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;");
  }
  function i2(N2, ...P2) {
    const V = /* @__PURE__ */ Object.create(null);
    for (const ie in N2)
      V[ie] = N2[ie];
    return P2.forEach(function(ie) {
      for (const Be2 in ie)
        V[Be2] = ie[Be2];
    }), /** @type {T} */
    V;
  }
  const r2 = "</span>", a2 = (N2) => !!N2.scope, s2 = (N2, { prefix: P2 }) => {
    if (N2.startsWith("language:"))
      return N2.replace("language:", "language-");
    if (N2.includes(".")) {
      const V = N2.split(".");
      return [
        `${P2}${V.shift()}`,
        ...V.map((ie, Be2) => `${ie}${"_".repeat(Be2 + 1)}`)
      ].join(" ");
    }
    return `${P2}${N2}`;
  };
  class o2 {
    /**
     * Creates a new HTMLRenderer
     *
     * @param {Tree} parseTree - the parse tree (must support `walk` API)
     * @param {{classPrefix: string}} options
     */
    constructor(P2, V) {
      this.buffer = "", this.classPrefix = V.classPrefix, P2.walk(this);
    }
    /**
     * Adds texts to the output stream
     *
     * @param {string} text */
    addText(P2) {
      this.buffer += n(P2);
    }
    /**
     * Adds a node open to the output stream (if needed)
     *
     * @param {Node} node */
    openNode(P2) {
      if (!a2(P2))
        return;
      const V = s2(
        P2.scope,
        { prefix: this.classPrefix }
      );
      this.span(V);
    }
    /**
     * Adds a node close to the output stream (if needed)
     *
     * @param {Node} node */
    closeNode(P2) {
      a2(P2) && (this.buffer += r2);
    }
    /**
     * returns the accumulated buffer
    */
    value() {
      return this.buffer;
    }
    // helpers
    /**
     * Builds a span element
     *
     * @param {string} className */
    span(P2) {
      this.buffer += `<span class="${P2}">`;
    }
  }
  const l2 = (N2 = {}) => {
    const P2 = { children: [] };
    return Object.assign(P2, N2), P2;
  };
  class u2 {
    constructor() {
      this.rootNode = l2(), this.stack = [this.rootNode];
    }
    get top() {
      return this.stack[this.stack.length - 1];
    }
    get root() {
      return this.rootNode;
    }
    /** @param {Node} node */
    add(P2) {
      this.top.children.push(P2);
    }
    /** @param {string} scope */
    openNode(P2) {
      const V = l2({ scope: P2 });
      this.add(V), this.stack.push(V);
    }
    closeNode() {
      if (this.stack.length > 1)
        return this.stack.pop();
    }
    closeAllNodes() {
      for (; this.closeNode(); )
        ;
    }
    toJSON() {
      return JSON.stringify(this.rootNode, null, 4);
    }
    /**
     * @typedef { import("./html_renderer").Renderer } Renderer
     * @param {Renderer} builder
     */
    walk(P2) {
      return this.constructor._walk(P2, this.rootNode);
    }
    /**
     * @param {Renderer} builder
     * @param {Node} node
     */
    static _walk(P2, V) {
      return typeof V == "string" ? P2.addText(V) : V.children && (P2.openNode(V), V.children.forEach((ie) => this._walk(P2, ie)), P2.closeNode(V)), P2;
    }
    /**
     * @param {Node} node
     */
    static _collapse(P2) {
      typeof P2 != "string" && P2.children && (P2.children.every((V) => typeof V == "string") ? P2.children = [P2.children.join("")] : P2.children.forEach((V) => {
        u2._collapse(V);
      }));
    }
  }
  class _ extends u2 {
    /**
     * @param {*} options
     */
    constructor(P2) {
      super(), this.options = P2;
    }
    /**
     * @param {string} text
     */
    addText(P2) {
      P2 !== "" && this.add(P2);
    }
    /** @param {string} scope */
    startScope(P2) {
      this.openNode(P2);
    }
    endScope() {
      this.closeNode();
    }
    /**
     * @param {Emitter & {root: DataNode}} emitter
     * @param {string} name
     */
    __addSublanguage(P2, V) {
      const ie = P2.root;
      V && (ie.scope = `language:${V}`), this.add(ie);
    }
    toHTML() {
      return new o2(this, this.options).value();
    }
    finalize() {
      return this.closeAllNodes(), true;
    }
  }
  function d2(N2) {
    return N2 ? typeof N2 == "string" ? N2 : N2.source : null;
  }
  function f2(N2) {
    return E2("(?=", N2, ")");
  }
  function b(N2) {
    return E2("(?:", N2, ")*");
  }
  function c2(N2) {
    return E2("(?:", N2, ")?");
  }
  function E2(...N2) {
    return N2.map((V) => d2(V)).join("");
  }
  function g2(N2) {
    const P2 = N2[N2.length - 1];
    return typeof P2 == "object" && P2.constructor === Object ? (N2.splice(N2.length - 1, 1), P2) : {};
  }
  function S(...N2) {
    return "(" + (g2(N2).capture ? "" : "?:") + N2.map((ie) => d2(ie)).join("|") + ")";
  }
  function p2(N2) {
    return new RegExp(N2.toString() + "|").exec("").length - 1;
  }
  function m2(N2, P2) {
    const V = N2 && N2.exec(P2);
    return V && V.index === 0;
  }
  const R2 = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;
  function T(N2, { joinWith: P2 }) {
    let V = 0;
    return N2.map((ie) => {
      V += 1;
      const Be2 = V;
      let Ge2 = d2(ie), X2 = "";
      for (; Ge2.length > 0; ) {
        const W2 = R2.exec(Ge2);
        if (!W2) {
          X2 += Ge2;
          break;
        }
        X2 += Ge2.substring(0, W2.index), Ge2 = Ge2.substring(W2.index + W2[0].length), W2[0][0] === "\\" && W2[1] ? X2 += "\\" + String(Number(W2[1]) + Be2) : (X2 += W2[0], W2[0] === "(" && V++);
      }
      return X2;
    }).map((ie) => `(${ie})`).join(P2);
  }
  const h2 = /\b\B/, C2 = "[a-zA-Z]\\w*", A2 = "[a-zA-Z_]\\w*", I2 = "\\b\\d+(\\.\\d+)?", v2 = "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)", x = "\\b(0b[01]+)", M = "!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~", B2 = (N2 = {}) => {
    const P2 = /^#![ ]*\//;
    return N2.binary && (N2.begin = E2(
      P2,
      /.*\b/,
      N2.binary,
      /\b.*/
    )), i2({
      scope: "meta",
      begin: P2,
      end: /$/,
      relevance: 0,
      /** @type {ModeCallback} */
      "on:begin": (V, ie) => {
        V.index !== 0 && ie.ignoreMatch();
      }
    }, N2);
  }, G2 = {
    begin: "\\\\[\\s\\S]",
    relevance: 0
  }, D = {
    scope: "string",
    begin: "'",
    end: "'",
    illegal: "\\n",
    contains: [G2]
  }, w = {
    scope: "string",
    begin: '"',
    end: '"',
    illegal: "\\n",
    contains: [G2]
  }, L = {
    begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
  }, q2 = function(N2, P2, V = {}) {
    const ie = i2(
      {
        scope: "comment",
        begin: N2,
        end: P2,
        contains: []
      },
      V
    );
    ie.contains.push({
      scope: "doctag",
      // hack to avoid the space from being included. the space is necessary to
      // match here to prevent the plain text rule below from gobbling up doctags
      begin: "[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)",
      end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,
      excludeBegin: true,
      relevance: 0
    });
    const Be2 = S(
      // list of common 1 and 2 letter words in English
      "I",
      "a",
      "is",
      "so",
      "us",
      "to",
      "at",
      "if",
      "in",
      "it",
      "on",
      // note: this is not an exhaustive list of contractions, just popular ones
      /[A-Za-z]+['](d|ve|re|ll|t|s|n)/,
      // contractions - can't we'd they're let's, etc
      /[A-Za-z]+[-][a-z]+/,
      // `no-way`, etc.
      /[A-Za-z][a-z]{2,}/
      // allow capitalized words at beginning of sentences
    );
    return ie.contains.push(
      {
        // TODO: how to include ", (, ) without breaking grammars that use these for
        // comment delimiters?
        // begin: /[ ]+([()"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()":]?([.][ ]|[ ]|\))){3}/
        // ---
        // this tries to find sequences of 3 english words in a row (without any
        // "programming" type syntax) this gives us a strong signal that we've
        // TRULY found a comment - vs perhaps scanning with the wrong language.
        // It's possible to find something that LOOKS like the start of the
        // comment - but then if there is no readable text - good chance it is a
        // false match and not a comment.
        //
        // for a visual example please see:
        // https://github.com/highlightjs/highlight.js/issues/2827
        begin: E2(
          /[ ]+/,
          // necessary to prevent us gobbling up doctags like /* @author Bob Mcgill */
          "(",
          Be2,
          /[.]?[:]?([.][ ]|[ ])/,
          "){3}"
        )
        // look for 3 words in a row
      }
    ), ie;
  }, z = q2("//", "$"), re = q2("/\\*", "\\*/"), j = q2("#", "$"), ue = {
    scope: "number",
    begin: I2,
    relevance: 0
  }, se2 = {
    scope: "number",
    begin: v2,
    relevance: 0
  }, Re2 = {
    scope: "number",
    begin: x,
    relevance: 0
  }, Ce = {
    scope: "regexp",
    begin: /\/(?=[^/\n]*\/)/,
    end: /\/[gimuy]*/,
    contains: [
      G2,
      {
        begin: /\[/,
        end: /\]/,
        relevance: 0,
        contains: [G2]
      }
    ]
  }, Te2 = {
    scope: "title",
    begin: C2,
    relevance: 0
  }, ne2 = {
    scope: "title",
    begin: A2,
    relevance: 0
  }, ae = {
    // excludes method names from keyword processing
    begin: "\\.\\s*" + A2,
    relevance: 0
  };
  var fe2 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    APOS_STRING_MODE: D,
    BACKSLASH_ESCAPE: G2,
    BINARY_NUMBER_MODE: Re2,
    BINARY_NUMBER_RE: x,
    COMMENT: q2,
    C_BLOCK_COMMENT_MODE: re,
    C_LINE_COMMENT_MODE: z,
    C_NUMBER_MODE: se2,
    C_NUMBER_RE: v2,
    END_SAME_AS_BEGIN: function(N2) {
      return Object.assign(
        N2,
        {
          /** @type {ModeCallback} */
          "on:begin": (P2, V) => {
            V.data._beginMatch = P2[1];
          },
          /** @type {ModeCallback} */
          "on:end": (P2, V) => {
            V.data._beginMatch !== P2[1] && V.ignoreMatch();
          }
        }
      );
    },
    HASH_COMMENT_MODE: j,
    IDENT_RE: C2,
    MATCH_NOTHING_RE: h2,
    METHOD_GUARD: ae,
    NUMBER_MODE: ue,
    NUMBER_RE: I2,
    PHRASAL_WORDS_MODE: L,
    QUOTE_STRING_MODE: w,
    REGEXP_MODE: Ce,
    RE_STARTERS_RE: M,
    SHEBANG: B2,
    TITLE_MODE: Te2,
    UNDERSCORE_IDENT_RE: A2,
    UNDERSCORE_TITLE_MODE: ne2
  });
  function Ne(N2, P2) {
    N2.input[N2.index - 1] === "." && P2.ignoreMatch();
  }
  function ve2(N2, P2) {
    N2.className !== void 0 && (N2.scope = N2.className, delete N2.className);
  }
  function Ie(N2, P2) {
    P2 && N2.beginKeywords && (N2.begin = "\\b(" + N2.beginKeywords.split(" ").join("|") + ")(?!\\.)(?=\\b|\\s)", N2.__beforeBegin = Ne, N2.keywords = N2.keywords || N2.beginKeywords, delete N2.beginKeywords, N2.relevance === void 0 && (N2.relevance = 0));
  }
  function Ue(N2, P2) {
    Array.isArray(N2.illegal) && (N2.illegal = S(...N2.illegal));
  }
  function De2(N2, P2) {
    if (N2.match) {
      if (N2.begin || N2.end)
        throw new Error("begin & end are not supported with match");
      N2.begin = N2.match, delete N2.match;
    }
  }
  function Je2(N2, P2) {
    N2.relevance === void 0 && (N2.relevance = 1);
  }
  const kt = (N2, P2) => {
    if (!N2.beforeMatch)
      return;
    if (N2.starts)
      throw new Error("beforeMatch cannot be used with starts");
    const V = Object.assign({}, N2);
    Object.keys(N2).forEach((ie) => {
      delete N2[ie];
    }), N2.keywords = V.keywords, N2.begin = E2(V.beforeMatch, f2(V.begin)), N2.starts = {
      relevance: 0,
      contains: [
        Object.assign(V, { endsParent: true })
      ]
    }, N2.relevance = 0, delete V.beforeMatch;
  }, O = [
    "of",
    "and",
    "for",
    "in",
    "not",
    "or",
    "if",
    "then",
    "parent",
    // common variable name
    "list",
    // common variable name
    "value"
    // common variable name
  ], y = "keyword";
  function U2(N2, P2, V = y) {
    const ie = /* @__PURE__ */ Object.create(null);
    return typeof N2 == "string" ? Be2(V, N2.split(" ")) : Array.isArray(N2) ? Be2(V, N2) : Object.keys(N2).forEach(function(Ge2) {
      Object.assign(
        ie,
        U2(N2[Ge2], P2, Ge2)
      );
    }), ie;
    function Be2(Ge2, X2) {
      P2 && (X2 = X2.map((W2) => W2.toLowerCase())), X2.forEach(function(W2) {
        const ee2 = W2.split("|");
        ie[ee2[0]] = [Ge2, Q2(ee2[0], ee2[1])];
      });
    }
  }
  function Q2(N2, P2) {
    return P2 ? Number(P2) : ke2(N2) ? 0 : 1;
  }
  function ke2(N2) {
    return O.includes(N2.toLowerCase());
  }
  const xe = {}, le = (N2) => {
    console.error(N2);
  }, k = (N2, ...P2) => {
    console.log(`WARN: ${N2}`, ...P2);
  }, F = (N2, P2) => {
    xe[`${N2}/${P2}`] || (console.log(`Deprecated as of ${N2}. ${P2}`), xe[`${N2}/${P2}`] = true);
  }, me2 = new Error();
  function Le2(N2, P2, { key: V }) {
    let ie = 0;
    const Be2 = N2[V], Ge2 = {}, X2 = {};
    for (let W2 = 1; W2 <= P2.length; W2++)
      X2[W2 + ie] = Be2[W2], Ge2[W2 + ie] = true, ie += p2(P2[W2 - 1]);
    N2[V] = X2, N2[V]._emit = Ge2, N2[V]._multi = true;
  }
  function it2(N2) {
    if (Array.isArray(N2.begin)) {
      if (N2.skip || N2.excludeBegin || N2.returnBegin)
        throw le("skip, excludeBegin, returnBegin not compatible with beginScope: {}"), me2;
      if (typeof N2.beginScope != "object" || N2.beginScope === null)
        throw le("beginScope must be object"), me2;
      Le2(N2, N2.begin, { key: "beginScope" }), N2.begin = T(N2.begin, { joinWith: "" });
    }
  }
  function ft2(N2) {
    if (Array.isArray(N2.end)) {
      if (N2.skip || N2.excludeEnd || N2.returnEnd)
        throw le("skip, excludeEnd, returnEnd not compatible with endScope: {}"), me2;
      if (typeof N2.endScope != "object" || N2.endScope === null)
        throw le("endScope must be object"), me2;
      Le2(N2, N2.end, { key: "endScope" }), N2.end = T(N2.end, { joinWith: "" });
    }
  }
  function St2(N2) {
    N2.scope && typeof N2.scope == "object" && N2.scope !== null && (N2.beginScope = N2.scope, delete N2.scope);
  }
  function ot2(N2) {
    St2(N2), typeof N2.beginScope == "string" && (N2.beginScope = { _wrap: N2.beginScope }), typeof N2.endScope == "string" && (N2.endScope = { _wrap: N2.endScope }), it2(N2), ft2(N2);
  }
  function cn2(N2) {
    function P2(X2, W2) {
      return new RegExp(
        d2(X2),
        "m" + (N2.case_insensitive ? "i" : "") + (N2.unicodeRegex ? "u" : "") + (W2 ? "g" : "")
      );
    }
    class V {
      constructor() {
        this.matchIndexes = {}, this.regexes = [], this.matchAt = 1, this.position = 0;
      }
      // @ts-ignore
      addRule(W2, ee2) {
        ee2.position = this.position++, this.matchIndexes[this.matchAt] = ee2, this.regexes.push([ee2, W2]), this.matchAt += p2(W2) + 1;
      }
      compile() {
        this.regexes.length === 0 && (this.exec = () => null);
        const W2 = this.regexes.map((ee2) => ee2[1]);
        this.matcherRe = P2(T(W2, { joinWith: "|" }), true), this.lastIndex = 0;
      }
      /** @param {string} s */
      exec(W2) {
        this.matcherRe.lastIndex = this.lastIndex;
        const ee2 = this.matcherRe.exec(W2);
        if (!ee2)
          return null;
        const ze = ee2.findIndex((_n, er) => er > 0 && _n !== void 0), Ye2 = this.matchIndexes[ze];
        return ee2.splice(0, ze), Object.assign(ee2, Ye2);
      }
    }
    class ie {
      constructor() {
        this.rules = [], this.multiRegexes = [], this.count = 0, this.lastIndex = 0, this.regexIndex = 0;
      }
      // @ts-ignore
      getMatcher(W2) {
        if (this.multiRegexes[W2])
          return this.multiRegexes[W2];
        const ee2 = new V();
        return this.rules.slice(W2).forEach(([ze, Ye2]) => ee2.addRule(ze, Ye2)), ee2.compile(), this.multiRegexes[W2] = ee2, ee2;
      }
      resumingScanAtSamePosition() {
        return this.regexIndex !== 0;
      }
      considerAll() {
        this.regexIndex = 0;
      }
      // @ts-ignore
      addRule(W2, ee2) {
        this.rules.push([W2, ee2]), ee2.type === "begin" && this.count++;
      }
      /** @param {string} s */
      exec(W2) {
        const ee2 = this.getMatcher(this.regexIndex);
        ee2.lastIndex = this.lastIndex;
        let ze = ee2.exec(W2);
        if (this.resumingScanAtSamePosition() && !(ze && ze.index === this.lastIndex)) {
          const Ye2 = this.getMatcher(0);
          Ye2.lastIndex = this.lastIndex + 1, ze = Ye2.exec(W2);
        }
        return ze && (this.regexIndex += ze.position + 1, this.regexIndex === this.count && this.considerAll()), ze;
      }
    }
    function Be2(X2) {
      const W2 = new ie();
      return X2.contains.forEach((ee2) => W2.addRule(ee2.begin, { rule: ee2, type: "begin" })), X2.terminatorEnd && W2.addRule(X2.terminatorEnd, { type: "end" }), X2.illegal && W2.addRule(X2.illegal, { type: "illegal" }), W2;
    }
    function Ge2(X2, W2) {
      const ee2 = (
        /** @type CompiledMode */
        X2
      );
      if (X2.isCompiled)
        return ee2;
      [
        ve2,
        // do this early so compiler extensions generally don't have to worry about
        // the distinction between match/begin
        De2,
        ot2,
        kt
      ].forEach((Ye2) => Ye2(X2, W2)), N2.compilerExtensions.forEach((Ye2) => Ye2(X2, W2)), X2.__beforeBegin = null, [
        Ie,
        // do this later so compiler extensions that come earlier have access to the
        // raw array if they wanted to perhaps manipulate it, etc.
        Ue,
        // default to 1 relevance if not specified
        Je2
      ].forEach((Ye2) => Ye2(X2, W2)), X2.isCompiled = true;
      let ze = null;
      return typeof X2.keywords == "object" && X2.keywords.$pattern && (X2.keywords = Object.assign({}, X2.keywords), ze = X2.keywords.$pattern, delete X2.keywords.$pattern), ze = ze || /\w+/, X2.keywords && (X2.keywords = U2(X2.keywords, N2.case_insensitive)), ee2.keywordPatternRe = P2(ze, true), W2 && (X2.begin || (X2.begin = /\B|\b/), ee2.beginRe = P2(ee2.begin), !X2.end && !X2.endsWithParent && (X2.end = /\B|\b/), X2.end && (ee2.endRe = P2(ee2.end)), ee2.terminatorEnd = d2(ee2.end) || "", X2.endsWithParent && W2.terminatorEnd && (ee2.terminatorEnd += (X2.end ? "|" : "") + W2.terminatorEnd)), X2.illegal && (ee2.illegalRe = P2(
        /** @type {RegExp | string} */
        X2.illegal
      )), X2.contains || (X2.contains = []), X2.contains = [].concat(...X2.contains.map(function(Ye2) {
        return Zn(Ye2 === "self" ? X2 : Ye2);
      })), X2.contains.forEach(function(Ye2) {
        Ge2(
          /** @type Mode */
          Ye2,
          ee2
        );
      }), X2.starts && Ge2(X2.starts, W2), ee2.matcher = Be2(ee2), ee2;
    }
    if (N2.compilerExtensions || (N2.compilerExtensions = []), N2.contains && N2.contains.includes("self"))
      throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
    return N2.classNameAliases = i2(N2.classNameAliases || {}), Ge2(
      /** @type Mode */
      N2
    );
  }
  function zt2(N2) {
    return N2 ? N2.endsWithParent || zt2(N2.starts) : false;
  }
  function Zn(N2) {
    return N2.variants && !N2.cachedVariants && (N2.cachedVariants = N2.variants.map(function(P2) {
      return i2(N2, { variants: null }, P2);
    })), N2.cachedVariants ? N2.cachedVariants : zt2(N2) ? i2(N2, { starts: N2.starts ? i2(N2.starts) : null }) : Object.isFrozen(N2) ? i2(N2) : N2;
  }
  var Jn = "11.11.1";
  class jn extends Error {
    constructor(P2, V) {
      super(P2), this.name = "HTMLInjectionError", this.html = V;
    }
  }
  const un2 = n, vn = i2, Oe = Symbol("nomatch"), tn2 = 7, Pt = function(N2) {
    const P2 = /* @__PURE__ */ Object.create(null), V = /* @__PURE__ */ Object.create(null), ie = [];
    let Be2 = true;
    const Ge2 = "Could not find the language '{}', did you forget to load/include a language module?", X2 = { disableAutodetect: true, name: "Plain text", contains: [] };
    let W2 = {
      ignoreUnescapedHTML: false,
      throwUnescapedHTML: false,
      noHighlightRe: /^(no-?highlight)$/i,
      languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
      classPrefix: "hljs-",
      cssSelector: "pre code",
      languages: null,
      // beta configuration options, subject to change, welcome to discuss
      // https://github.com/highlightjs/highlight.js/issues/1086
      __emitter: _
    };
    function ee2(Y) {
      return W2.noHighlightRe.test(Y);
    }
    function ze(Y) {
      let Z2 = Y.className + " ";
      Z2 += Y.parentNode ? Y.parentNode.className : "";
      const ge2 = W2.languageDetectRe.exec(Z2);
      if (ge2) {
        const Me2 = Ut2(ge2[1]);
        return Me2 || (k(Ge2.replace("{}", ge2[1])), k("Falling back to no-highlight mode for this block.", Y)), Me2 ? ge2[1] : "no-highlight";
      }
      return Z2.split(/\s+/).find((Me2) => ee2(Me2) || Ut2(Me2));
    }
    function Ye2(Y, Z2, ge2) {
      let Me2 = "", Ve = "";
      typeof Z2 == "object" ? (Me2 = Y, ge2 = Z2.ignoreIllegals, Ve = Z2.language) : (F("10.7.0", "highlight(lang, code, ...args) has been deprecated."), F("10.7.0", `Please use highlight(code, options) instead.
https://github.com/highlightjs/highlight.js/issues/2277`), Ve = Y, Me2 = Z2), ge2 === void 0 && (ge2 = true);
      const ut2 = {
        code: Me2,
        language: Ve
      };
      An("before:highlight", ut2);
      const Bt2 = ut2.result ? ut2.result : _n(ut2.language, ut2.code, ge2);
      return Bt2.code = ut2.code, An("after:highlight", Bt2), Bt2;
    }
    function _n(Y, Z2, ge2, Me2) {
      const Ve = /* @__PURE__ */ Object.create(null);
      function ut2(H2, K2) {
        return H2.keywords[K2];
      }
      function Bt2() {
        if (!oe.keywords) {
          $e.addText(Ae2);
          return;
        }
        let H2 = 0;
        oe.keywordPatternRe.lastIndex = 0;
        let K2 = oe.keywordPatternRe.exec(Ae2), ce2 = "";
        for (; K2; ) {
          ce2 += Ae2.substring(H2, K2.index);
          const he = _t2.case_insensitive ? K2[0].toLowerCase() : K2[0], We2 = ut2(oe, he);
          if (We2) {
            const [dt2, ec] = We2;
            if ($e.addText(ce2), ce2 = "", Ve[he] = (Ve[he] || 0) + 1, Ve[he] <= tn2 && (nn2 += ec), dt2.startsWith("_"))
              ce2 += K2[0];
            else {
              const tc = _t2.classNameAliases[dt2] || dt2;
              bt2(K2[0], tc);
            }
          } else
            ce2 += K2[0];
          H2 = oe.keywordPatternRe.lastIndex, K2 = oe.keywordPatternRe.exec(Ae2);
        }
        ce2 += Ae2.substring(H2), $e.addText(ce2);
      }
      function yn2() {
        if (Ae2 === "")
          return;
        let H2 = null;
        if (typeof oe.subLanguage == "string") {
          if (!P2[oe.subLanguage]) {
            $e.addText(Ae2);
            return;
          }
          H2 = _n(oe.subLanguage, Ae2, true, ar[oe.subLanguage]), ar[oe.subLanguage] = /** @type {CompiledMode} */
          H2._top;
        } else
          H2 = tr(Ae2, oe.subLanguage.length ? oe.subLanguage : null);
        oe.relevance > 0 && (nn2 += H2.relevance), $e.__addSublanguage(H2._emitter, H2.language);
      }
      function tt2() {
        oe.subLanguage != null ? yn2() : Bt2(), Ae2 = "";
      }
      function bt2(H2, K2) {
        H2 !== "" && ($e.startScope(K2), $e.addText(H2), $e.endScope());
      }
      function kr(H2, K2) {
        let ce2 = 1;
        const he = K2.length - 1;
        for (; ce2 <= he; ) {
          if (!H2._emit[ce2]) {
            ce2++;
            continue;
          }
          const We2 = _t2.classNameAliases[H2[ce2]] || H2[ce2], dt2 = K2[ce2];
          We2 ? bt2(dt2, We2) : (Ae2 = dt2, Bt2(), Ae2 = ""), ce2++;
        }
      }
      function Pr(H2, K2) {
        return H2.scope && typeof H2.scope == "string" && $e.openNode(_t2.classNameAliases[H2.scope] || H2.scope), H2.beginScope && (H2.beginScope._wrap ? (bt2(Ae2, _t2.classNameAliases[H2.beginScope._wrap] || H2.beginScope._wrap), Ae2 = "") : H2.beginScope._multi && (kr(H2.beginScope, K2), Ae2 = "")), oe = Object.create(H2, { parent: { value: oe } }), oe;
      }
      function Fr(H2, K2, ce2) {
        let he = m2(H2.endRe, ce2);
        if (he) {
          if (H2["on:end"]) {
            const We2 = new e2(H2);
            H2["on:end"](K2, We2), We2.isMatchIgnored && (he = false);
          }
          if (he) {
            for (; H2.endsParent && H2.parent; )
              H2 = H2.parent;
            return H2;
          }
        }
        if (H2.endsWithParent)
          return Fr(H2.parent, K2, ce2);
      }
      function Xl(H2) {
        return oe.matcher.regexIndex === 0 ? (Ae2 += H2[0], 1) : (Ln = true, 0);
      }
      function Zl(H2) {
        const K2 = H2[0], ce2 = H2.rule, he = new e2(ce2), We2 = [ce2.__beforeBegin, ce2["on:begin"]];
        for (const dt2 of We2)
          if (dt2 && (dt2(H2, he), he.isMatchIgnored))
            return Xl(K2);
        return ce2.skip ? Ae2 += K2 : (ce2.excludeBegin && (Ae2 += K2), tt2(), !ce2.returnBegin && !ce2.excludeBegin && (Ae2 = K2)), Pr(ce2, H2), ce2.returnBegin ? 0 : K2.length;
      }
      function Jl(H2) {
        const K2 = H2[0], ce2 = Z2.substring(H2.index), he = Fr(oe, H2, ce2);
        if (!he)
          return Oe;
        const We2 = oe;
        oe.endScope && oe.endScope._wrap ? (tt2(), bt2(K2, oe.endScope._wrap)) : oe.endScope && oe.endScope._multi ? (tt2(), kr(oe.endScope, H2)) : We2.skip ? Ae2 += K2 : (We2.returnEnd || We2.excludeEnd || (Ae2 += K2), tt2(), We2.excludeEnd && (Ae2 = K2));
        do
          oe.scope && $e.closeNode(), !oe.skip && !oe.subLanguage && (nn2 += oe.relevance), oe = oe.parent;
        while (oe !== he.parent);
        return he.starts && Pr(he.starts, H2), We2.returnEnd ? 0 : K2.length;
      }
      function jl() {
        const H2 = [];
        for (let K2 = oe; K2 !== _t2; K2 = K2.parent)
          K2.scope && H2.unshift(K2.scope);
        H2.forEach((K2) => $e.openNode(K2));
      }
      let In = {};
      function rr(H2, K2) {
        const ce2 = K2 && K2[0];
        if (Ae2 += H2, ce2 == null)
          return tt2(), 0;
        if (In.type === "begin" && K2.type === "end" && In.index === K2.index && ce2 === "") {
          if (Ae2 += Z2.slice(K2.index, K2.index + 1), !Be2) {
            const he = new Error(`0 width match regex (${Y})`);
            throw he.languageName = Y, he.badRule = In.rule, he;
          }
          return 1;
        }
        if (In = K2, K2.type === "begin")
          return Zl(K2);
        if (K2.type === "illegal" && !ge2) {
          const he = new Error('Illegal lexeme "' + ce2 + '" for mode "' + (oe.scope || "<unnamed>") + '"');
          throw he.mode = oe, he;
        } else if (K2.type === "end") {
          const he = Jl(K2);
          if (he !== Oe)
            return he;
        }
        if (K2.type === "illegal" && ce2 === "")
          return Ae2 += `
`, 1;
        if (xn > 1e5 && xn > K2.index * 3)
          throw new Error("potential infinite loop, way more iterations than matches");
        return Ae2 += ce2, ce2.length;
      }
      const _t2 = Ut2(Y);
      if (!_t2)
        throw le(Ge2.replace("{}", Y)), new Error('Unknown language: "' + Y + '"');
      const Ur = cn2(_t2);
      let Dn = "", oe = Me2 || Ur;
      const ar = {}, $e = new W2.__emitter(W2);
      jl();
      let Ae2 = "", nn2 = 0, Ct2 = 0, xn = 0, Ln = false;
      try {
        if (_t2.__emitTokens)
          _t2.__emitTokens(Z2, $e);
        else {
          for (oe.matcher.considerAll(); ; ) {
            xn++, Ln ? Ln = false : oe.matcher.considerAll(), oe.matcher.lastIndex = Ct2;
            const H2 = oe.matcher.exec(Z2);
            if (!H2)
              break;
            const K2 = Z2.substring(Ct2, H2.index), ce2 = rr(K2, H2);
            Ct2 = H2.index + ce2;
          }
          rr(Z2.substring(Ct2));
        }
        return $e.finalize(), Dn = $e.toHTML(), {
          language: Y,
          value: Dn,
          relevance: nn2,
          illegal: false,
          _emitter: $e,
          _top: oe
        };
      } catch (H2) {
        if (H2.message && H2.message.includes("Illegal"))
          return {
            language: Y,
            value: un2(Z2),
            illegal: true,
            relevance: 0,
            _illegalBy: {
              message: H2.message,
              index: Ct2,
              context: Z2.slice(Ct2 - 100, Ct2 + 100),
              mode: H2.mode,
              resultSoFar: Dn
            },
            _emitter: $e
          };
        if (Be2)
          return {
            language: Y,
            value: un2(Z2),
            illegal: false,
            relevance: 0,
            errorRaised: H2,
            _emitter: $e,
            _top: oe
          };
        throw H2;
      }
    }
    function er(Y) {
      const Z2 = {
        value: un2(Y),
        illegal: false,
        relevance: 0,
        _top: X2,
        _emitter: new W2.__emitter(W2)
      };
      return Z2._emitter.addText(Y), Z2;
    }
    function tr(Y, Z2) {
      Z2 = Z2 || W2.languages || Object.keys(P2);
      const ge2 = er(Y), Me2 = Z2.filter(Ut2).filter(wr).map(
        (tt2) => _n(tt2, Y, false)
      );
      Me2.unshift(ge2);
      const Ve = Me2.sort((tt2, bt2) => {
        if (tt2.relevance !== bt2.relevance)
          return bt2.relevance - tt2.relevance;
        if (tt2.language && bt2.language) {
          if (Ut2(tt2.language).supersetOf === bt2.language)
            return 1;
          if (Ut2(bt2.language).supersetOf === tt2.language)
            return -1;
        }
        return 0;
      }), [ut2, Bt2] = Ve, yn2 = ut2;
      return yn2.secondBest = Bt2, yn2;
    }
    function Bl(Y, Z2, ge2) {
      const Me2 = Z2 && V[Z2] || ge2;
      Y.classList.add("hljs"), Y.classList.add(`language-${Me2}`);
    }
    function nr(Y) {
      let Z2 = null;
      const ge2 = ze(Y);
      if (ee2(ge2))
        return;
      if (An(
        "before:highlightElement",
        { el: Y, language: ge2 }
      ), Y.dataset.highlighted) {
        console.log("Element previously highlighted. To highlight again, first unset `dataset.highlighted`.", Y);
        return;
      }
      if (Y.children.length > 0 && (W2.ignoreUnescapedHTML || (console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk."), console.warn("https://github.com/highlightjs/highlight.js/wiki/security"), console.warn("The element with unescaped HTML:"), console.warn(Y)), W2.throwUnescapedHTML))
        throw new jn(
          "One of your code blocks includes unescaped HTML.",
          Y.innerHTML
        );
      Z2 = Y;
      const Me2 = Z2.textContent, Ve = ge2 ? Ye2(Me2, { language: ge2, ignoreIllegals: true }) : tr(Me2);
      Y.innerHTML = Ve.value, Y.dataset.highlighted = "yes", Bl(Y, ge2, Ve.language), Y.result = {
        language: Ve.language,
        // TODO: remove with version 11.0
        re: Ve.relevance,
        relevance: Ve.relevance
      }, Ve.secondBest && (Y.secondBest = {
        language: Ve.secondBest.language,
        relevance: Ve.secondBest.relevance
      }), An("after:highlightElement", { el: Y, result: Ve, text: Me2 });
    }
    function Gl(Y) {
      W2 = vn(W2, Y);
    }
    const Yl = () => {
      On(), F("10.6.0", "initHighlighting() deprecated.  Use highlightAll() now.");
    };
    function ql() {
      On(), F("10.6.0", "initHighlightingOnLoad() deprecated.  Use highlightAll() now.");
    }
    let Lr = false;
    function On() {
      function Y() {
        On();
      }
      if (document.readyState === "loading") {
        Lr || window.addEventListener("DOMContentLoaded", Y, false), Lr = true;
        return;
      }
      document.querySelectorAll(W2.cssSelector).forEach(nr);
    }
    function Vl(Y, Z2) {
      let ge2 = null;
      try {
        ge2 = Z2(N2);
      } catch (Me2) {
        if (le("Language definition for '{}' could not be registered.".replace("{}", Y)), Be2)
          le(Me2);
        else
          throw Me2;
        ge2 = X2;
      }
      ge2.name || (ge2.name = Y), P2[Y] = ge2, ge2.rawDefinition = Z2.bind(null, N2), ge2.aliases && Mr(ge2.aliases, { languageName: Y });
    }
    function Hl(Y) {
      delete P2[Y];
      for (const Z2 of Object.keys(V))
        V[Z2] === Y && delete V[Z2];
    }
    function zl() {
      return Object.keys(P2);
    }
    function Ut2(Y) {
      return Y = (Y || "").toLowerCase(), P2[Y] || P2[V[Y]];
    }
    function Mr(Y, { languageName: Z2 }) {
      typeof Y == "string" && (Y = [Y]), Y.forEach((ge2) => {
        V[ge2.toLowerCase()] = Z2;
      });
    }
    function wr(Y) {
      const Z2 = Ut2(Y);
      return Z2 && !Z2.disableAutodetect;
    }
    function $l(Y) {
      Y["before:highlightBlock"] && !Y["before:highlightElement"] && (Y["before:highlightElement"] = (Z2) => {
        Y["before:highlightBlock"](
          Object.assign({ block: Z2.el }, Z2)
        );
      }), Y["after:highlightBlock"] && !Y["after:highlightElement"] && (Y["after:highlightElement"] = (Z2) => {
        Y["after:highlightBlock"](
          Object.assign({ block: Z2.el }, Z2)
        );
      });
    }
    function Wl(Y) {
      $l(Y), ie.push(Y);
    }
    function Kl(Y) {
      const Z2 = ie.indexOf(Y);
      Z2 !== -1 && ie.splice(Z2, 1);
    }
    function An(Y, Z2) {
      const ge2 = Y;
      ie.forEach(function(Me2) {
        Me2[ge2] && Me2[ge2](Z2);
      });
    }
    function Ql(Y) {
      return F("10.7.0", "highlightBlock will be removed entirely in v12.0"), F("10.7.0", "Please use highlightElement now."), nr(Y);
    }
    Object.assign(N2, {
      highlight: Ye2,
      highlightAuto: tr,
      highlightAll: On,
      highlightElement: nr,
      // TODO: Remove with v12 API
      highlightBlock: Ql,
      configure: Gl,
      initHighlighting: Yl,
      initHighlightingOnLoad: ql,
      registerLanguage: Vl,
      unregisterLanguage: Hl,
      listLanguages: zl,
      getLanguage: Ut2,
      registerAliases: Mr,
      autoDetection: wr,
      inherit: vn,
      addPlugin: Wl,
      removePlugin: Kl
    }), N2.debugMode = function() {
      Be2 = false;
    }, N2.safeMode = function() {
      Be2 = true;
    }, N2.versionString = Jn, N2.regex = {
      concat: E2,
      lookahead: f2,
      either: S,
      optional: c2,
      anyNumberOfTimes: b
    };
    for (const Y in fe2)
      typeof fe2[Y] == "object" && t2(fe2[Y]);
    return Object.assign(N2, fe2), N2;
  }, Ft2 = Pt({});
  return Ft2.newInstance = () => Pt({}), Ta = Ft2, Ft2.HighlightJS = Ft2, Ft2.default = Ft2, Ta;
}
var ha, yu;
function Sh() {
  if (yu)
    return ha;
  yu = 1;
  function t2(e2) {
    const n = "[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]+", a2 = "далее возврат вызватьисключение выполнить для если и из или иначе иначеесли исключение каждого конецесли конецпопытки конеццикла не новый перейти перем по пока попытка прервать продолжить тогда цикл экспорт ", l2 = "загрузитьизфайла вебклиент вместо внешнеесоединение клиент конецобласти мобильноеприложениеклиент мобильноеприложениесервер наклиенте наклиентенасервере наклиентенасерверебезконтекста насервере насерверебезконтекста область перед после сервер толстыйклиентобычноеприложение толстыйклиентуправляемоеприложение тонкийклиент ", b = "разделительстраниц разделительстрок символтабуляции ansitooem oemtoansi ввестивидсубконто ввестиперечисление ввестипериод ввестиплансчетов выбранныйплансчетов датагод датамесяц датачисло заголовоксистемы значениевстроку значениеизстроки каталогиб каталогпользователя кодсимв конгода конецпериодаби конецрассчитанногопериодаби конецстандартногоинтервала конквартала конмесяца коннедели лог лог10 максимальноеколичествосубконто названиеинтерфейса названиенабораправ назначитьвид назначитьсчет найтиссылки началопериодаби началостандартногоинтервала начгода начквартала начмесяца начнедели номерднягода номерднянедели номернеделигода обработкаожидания основнойжурналрасчетов основнойплансчетов основнойязык очиститьокносообщений периодстр получитьвремята получитьдатута получитьдокументта получитьзначенияотбора получитьпозициюта получитьпустоезначение получитьта префиксавтонумерации пропись пустоезначение разм разобратьпозициюдокумента рассчитатьрегистрына рассчитатьрегистрыпо симв создатьобъект статусвозврата стрколичествострок сформироватьпозициюдокумента счетпокоду текущеевремя типзначения типзначениястр установитьтана установитьтапо фиксшаблон шаблон acos asin atan base64значение base64строка cos exp log log10 pow sin sqrt tan xmlзначение xmlстрока xmlтип xmlтипзнч активноеокно безопасныйрежим безопасныйрежимразделенияданных булево ввестидату ввестизначение ввестистроку ввестичисло возможностьчтенияxml вопрос восстановитьзначение врег выгрузитьжурналрегистрации выполнитьобработкуоповещения выполнитьпроверкуправдоступа вычислить год данныеформывзначение дата день деньгода деньнедели добавитьмесяц заблокироватьданныедляредактирования заблокироватьработупользователя завершитьработусистемы загрузитьвнешнююкомпоненту закрытьсправку записатьjson записатьxml записатьдатуjson записьжурналарегистрации заполнитьзначениясвойств запроситьразрешениепользователя запуститьприложение запуститьсистему зафиксироватьтранзакцию значениевданныеформы значениевстрокувнутр значениевфайл значениезаполнено значениеизстрокивнутр значениеизфайла изxmlтипа импортмоделиxdto имякомпьютера имяпользователя инициализироватьпредопределенныеданные информацияобошибке каталогбиблиотекимобильногоустройства каталогвременныхфайлов каталогдокументов каталогпрограммы кодироватьстроку кодлокализацииинформационнойбазы кодсимвола командасистемы конецгода конецдня конецквартала конецмесяца конецминуты конецнедели конецчаса конфигурациябазыданныхизмененадинамически конфигурацияизменена копироватьданныеформы копироватьфайл краткоепредставлениеошибки лев макс местноевремя месяц мин минута монопольныйрежим найти найтинедопустимыесимволыxml найтиокнопонавигационнойссылке найтипомеченныенаудаление найтипоссылкам найтифайлы началогода началодня началоквартала началомесяца началоминуты началонедели началочаса начатьзапросразрешенияпользователя начатьзапускприложения начатькопированиефайла начатьперемещениефайла начатьподключениевнешнейкомпоненты начатьподключениерасширенияработыскриптографией начатьподключениерасширенияработысфайлами начатьпоискфайлов начатьполучениекаталогавременныхфайлов начатьполучениекаталогадокументов начатьполучениерабочегокаталогаданныхпользователя начатьполучениефайлов начатьпомещениефайла начатьпомещениефайлов начатьсозданиедвоичныхданныхизфайла начатьсозданиекаталога начатьтранзакцию начатьудалениефайлов начатьустановкувнешнейкомпоненты начатьустановкурасширенияработыскриптографией начатьустановкурасширенияработысфайлами неделягода необходимостьзавершениясоединения номерсеансаинформационнойбазы номерсоединенияинформационнойбазы нрег нстр обновитьинтерфейс обновитьнумерациюобъектов обновитьповторноиспользуемыезначения обработкапрерыванияпользователя объединитьфайлы окр описаниеошибки оповестить оповеститьобизменении отключитьобработчикзапросанастроекклиенталицензирования отключитьобработчикожидания отключитьобработчикоповещения открытьзначение открытьиндекссправки открытьсодержаниесправки открытьсправку открытьформу открытьформумодально отменитьтранзакцию очиститьжурналрегистрации очиститьнастройкипользователя очиститьсообщения параметрыдоступа перейтипонавигационнойссылке переместитьфайл подключитьвнешнююкомпоненту подключитьобработчикзапросанастроекклиенталицензирования подключитьобработчикожидания подключитьобработчикоповещения подключитьрасширениеработыскриптографией подключитьрасширениеработысфайлами подробноепредставлениеошибки показатьвводдаты показатьвводзначения показатьвводстроки показатьвводчисла показатьвопрос показатьзначение показатьинформациюобошибке показатьнакарте показатьоповещениепользователя показатьпредупреждение полноеимяпользователя получитьcomобъект получитьxmlтип получитьадреспоместоположению получитьблокировкусеансов получитьвремязавершенияспящегосеанса получитьвремязасыпанияпассивногосеанса получитьвремяожиданияблокировкиданных получитьданныевыбора получитьдополнительныйпараметрклиенталицензирования получитьдопустимыекодылокализации получитьдопустимыечасовыепояса получитьзаголовокклиентскогоприложения получитьзаголовоксистемы получитьзначенияотборажурналарегистрации получитьидентификаторконфигурации получитьизвременногохранилища получитьимявременногофайла получитьимяклиенталицензирования получитьинформациюэкрановклиента получитьиспользованиежурналарегистрации получитьиспользованиесобытияжурналарегистрации получитькраткийзаголовокприложения получитьмакетоформления получитьмаскувсефайлы получитьмаскувсефайлыклиента получитьмаскувсефайлысервера получитьместоположениепоадресу получитьминимальнуюдлинупаролейпользователей получитьнавигационнуюссылку получитьнавигационнуюссылкуинформационнойбазы получитьобновлениеконфигурациибазыданных получитьобновлениепредопределенныхданныхинформационнойбазы получитьобщиймакет получитьобщуюформу получитьокна получитьоперативнуюотметкувремени получитьотключениебезопасногорежима получитьпараметрыфункциональныхопцийинтерфейса получитьполноеимяпредопределенногозначения получитьпредставлениянавигационныхссылок получитьпроверкусложностипаролейпользователей получитьразделительпути получитьразделительпутиклиента получитьразделительпутисервера получитьсеансыинформационнойбазы получитьскоростьклиентскогосоединения получитьсоединенияинформационнойбазы получитьсообщенияпользователю получитьсоответствиеобъектаиформы получитьсоставстандартногоинтерфейсаodata получитьструктурухранениябазыданных получитьтекущийсеансинформационнойбазы получитьфайл получитьфайлы получитьформу получитьфункциональнуюопцию получитьфункциональнуюопциюинтерфейса получитьчасовойпоясинформационнойбазы пользователиос поместитьвовременноехранилище поместитьфайл поместитьфайлы прав праводоступа предопределенноезначение представлениекодалокализации представлениепериода представлениеправа представлениеприложения представлениесобытияжурналарегистрации представлениечасовогопояса предупреждение прекратитьработусистемы привилегированныйрежим продолжитьвызов прочитатьjson прочитатьxml прочитатьдатуjson пустаястрока рабочийкаталогданныхпользователя разблокироватьданныедляредактирования разделитьфайл разорватьсоединениесвнешнимисточникомданных раскодироватьстроку рольдоступна секунда сигнал символ скопироватьжурналрегистрации смещениелетнеговремени смещениестандартноговремени соединитьбуферыдвоичныхданных создатькаталог создатьфабрикуxdto сокрл сокрлп сокрп сообщить состояние сохранитьзначение сохранитьнастройкипользователя сред стрдлина стрзаканчиваетсяна стрзаменить стрнайти стрначинаетсяс строка строкасоединенияинформационнойбазы стрполучитьстроку стрразделить стрсоединить стрсравнить стрчисловхождений стрчислострок стршаблон текущаядата текущаядатасеанса текущаяуниверсальнаядата текущаяуниверсальнаядатавмиллисекундах текущийвариантинтерфейсаклиентскогоприложения текущийвариантосновногошрифтаклиентскогоприложения текущийкодлокализации текущийрежимзапуска текущийязык текущийязыксистемы тип типзнч транзакцияактивна трег удалитьданныеинформационнойбазы удалитьизвременногохранилища удалитьобъекты удалитьфайлы универсальноевремя установитьбезопасныйрежим установитьбезопасныйрежимразделенияданных установитьблокировкусеансов установитьвнешнююкомпоненту установитьвремязавершенияспящегосеанса установитьвремязасыпанияпассивногосеанса установитьвремяожиданияблокировкиданных установитьзаголовокклиентскогоприложения установитьзаголовоксистемы установитьиспользованиежурналарегистрации установитьиспользованиесобытияжурналарегистрации установитькраткийзаголовокприложения установитьминимальнуюдлинупаролейпользователей установитьмонопольныйрежим установитьнастройкиклиенталицензирования установитьобновлениепредопределенныхданныхинформационнойбазы установитьотключениебезопасногорежима установитьпараметрыфункциональныхопцийинтерфейса установитьпривилегированныйрежим установитьпроверкусложностипаролейпользователей установитьрасширениеработыскриптографией установитьрасширениеработысфайлами установитьсоединениесвнешнимисточникомданных установитьсоответствиеобъектаиформы установитьсоставстандартногоинтерфейсаodata установитьчасовойпоясинформационнойбазы установитьчасовойпояссеанса формат цел час часовойпояс часовойпояссеанса число числопрописью этоадресвременногохранилища wsссылки библиотекакартинок библиотекамакетовоформлениякомпоновкиданных библиотекастилей бизнеспроцессы внешниеисточникиданных внешниеобработки внешниеотчеты встроенныепокупки главныйинтерфейс главныйстиль документы доставляемыеуведомления журналыдокументов задачи информацияобинтернетсоединении использованиерабочейдаты историяработыпользователя константы критерииотбора метаданные обработки отображениерекламы отправкадоставляемыхуведомлений отчеты панельзадачос параметрзапуска параметрысеанса перечисления планывидоврасчета планывидовхарактеристик планыобмена планысчетов полнотекстовыйпоиск пользователиинформационнойбазы последовательности проверкавстроенныхпокупок рабочаядата расширенияконфигурации регистрыбухгалтерии регистрынакопления регистрырасчета регистрысведений регламентныезадания сериализаторxdto справочники средствагеопозиционирования средствакриптографии средствамультимедиа средстваотображениярекламы средствапочты средствателефонии фабрикаxdto файловыепотоки фоновыезадания хранилищанастроек хранилищевариантовотчетов хранилищенастроекданныхформ хранилищеобщихнастроек хранилищепользовательскихнастроекдинамическихсписков хранилищепользовательскихнастроекотчетов хранилищесистемныхнастроек ", re = "webцвета windowsцвета windowsшрифты библиотекакартинок рамкистиля символы цветастиля шрифтыстиля автоматическоесохранениеданныхформывнастройках автонумерациявформе автораздвижениесерий анимациядиаграммы вариантвыравниванияэлементовизаголовков вариантуправлениявысотойтаблицы вертикальнаяпрокруткаформы вертикальноеположение вертикальноеположениеэлемента видгруппыформы виддекорацииформы виддополненияэлементаформы видизмененияданных видкнопкиформы видпереключателя видподписейкдиаграмме видполяформы видфлажка влияниеразмеранапузырекдиаграммы горизонтальноеположение горизонтальноеположениеэлемента группировкаколонок группировкаподчиненныхэлементовформы группыиэлементы действиеперетаскивания дополнительныйрежимотображения допустимыедействияперетаскивания интервалмеждуэлементамиформы использованиевывода использованиеполосыпрокрутки используемоезначениеточкибиржевойдиаграммы историявыборапривводе источникзначенийоситочекдиаграммы источникзначенияразмерапузырькадиаграммы категориягруппыкоманд максимумсерий начальноеотображениедерева начальноеотображениесписка обновлениетекстаредактирования ориентациядендрограммы ориентациядиаграммы ориентацияметокдиаграммы ориентацияметоксводнойдиаграммы ориентацияэлементаформы отображениевдиаграмме отображениевлегендедиаграммы отображениегруппыкнопок отображениезаголовкашкалыдиаграммы отображениезначенийсводнойдиаграммы отображениезначенияизмерительнойдиаграммы отображениеинтерваладиаграммыганта отображениекнопки отображениекнопкивыбора отображениеобсужденийформы отображениеобычнойгруппы отображениеотрицательныхзначенийпузырьковойдиаграммы отображениепанелипоиска отображениеподсказки отображениепредупрежденияприредактировании отображениеразметкиполосырегулирования отображениестраницформы отображениетаблицы отображениетекстазначениядиаграммыганта отображениеуправленияобычнойгруппы отображениефигурыкнопки палитрацветовдиаграммы поведениеобычнойгруппы поддержкамасштабадендрограммы поддержкамасштабадиаграммыганта поддержкамасштабасводнойдиаграммы поисквтаблицепривводе положениезаголовкаэлементаформы положениекартинкикнопкиформы положениекартинкиэлементаграфическойсхемы положениекоманднойпанелиформы положениекоманднойпанелиэлементаформы положениеопорнойточкиотрисовки положениеподписейкдиаграмме положениеподписейшкалызначенийизмерительнойдиаграммы положениесостоянияпросмотра положениестрокипоиска положениетекстасоединительнойлинии положениеуправленияпоиском положениешкалывремени порядокотображенияточекгоризонтальнойгистограммы порядоксерийвлегендедиаграммы размеркартинки расположениезаголовкашкалыдиаграммы растягиваниеповертикалидиаграммыганта режимавтоотображениясостояния режимвводастроктаблицы режимвыборанезаполненного режимвыделениядаты режимвыделениястрокитаблицы режимвыделениятаблицы режимизмененияразмера режимизменениясвязанногозначения режимиспользованиядиалогапечати режимиспользованияпараметракоманды режиммасштабированияпросмотра режимосновногоокнаклиентскогоприложения режимоткрытияокнаформы режимотображениявыделения режимотображениягеографическойсхемы режимотображениязначенийсерии режимотрисовкисеткиграфическойсхемы режимполупрозрачностидиаграммы режимпробеловдиаграммы режимразмещениянастранице режимредактированияколонки режимсглаживаниядиаграммы режимсглаживанияиндикатора режимсписказадач сквозноевыравнивание сохранениеданныхформывнастройках способзаполнениятекстазаголовкашкалыдиаграммы способопределенияограничивающегозначениядиаграммы стандартнаягруппакоманд стандартноеоформление статусоповещенияпользователя стильстрелки типаппроксимациилиниитрендадиаграммы типдиаграммы типединицышкалывремени типимпортасерийслоягеографическойсхемы типлиниигеографическойсхемы типлиниидиаграммы типмаркерагеографическойсхемы типмаркерадиаграммы типобластиоформления типорганизацииисточникаданныхгеографическойсхемы типотображениясериислоягеографическойсхемы типотображенияточечногообъектагеографическойсхемы типотображенияшкалыэлементалегендыгеографическойсхемы типпоискаобъектовгеографическойсхемы типпроекциигеографическойсхемы типразмещенияизмерений типразмещенияреквизитовизмерений типрамкиэлементауправления типсводнойдиаграммы типсвязидиаграммыганта типсоединениязначенийпосериямдиаграммы типсоединенияточекдиаграммы типсоединительнойлинии типстороныэлементаграфическойсхемы типформыотчета типшкалырадарнойдиаграммы факторлиниитрендадиаграммы фигуракнопки фигурыграфическойсхемы фиксациявтаблице форматдняшкалывремени форматкартинки ширинаподчиненныхэлементовформы виддвижениябухгалтерии виддвижениянакопления видпериодарегистрарасчета видсчета видточкимаршрутабизнеспроцесса использованиеагрегатарегистранакопления использованиегруппиэлементов использованиережимапроведения использованиесреза периодичностьагрегатарегистранакопления режимавтовремя режимзаписидокумента режимпроведениядокумента авторегистрацияизменений допустимыйномерсообщения отправкаэлементаданных получениеэлементаданных использованиерасшифровкитабличногодокумента ориентациястраницы положениеитоговколоноксводнойтаблицы положениеитоговстроксводнойтаблицы положениетекстаотносительнокартинки расположениезаголовкагруппировкитабличногодокумента способчтениязначенийтабличногодокумента типдвустороннейпечати типзаполненияобластитабличногодокумента типкурсоровтабличногодокумента типлиниирисункатабличногодокумента типлинииячейкитабличногодокумента типнаправленияпереходатабличногодокумента типотображениявыделениятабличногодокумента типотображениялинийсводнойтаблицы типразмещениятекстатабличногодокумента типрисункатабличногодокумента типсмещениятабличногодокумента типузоратабличногодокумента типфайлатабличногодокумента точностьпечати чередованиерасположениястраниц отображениевремениэлементовпланировщика типфайлаформатированногодокумента обходрезультатазапроса типзаписизапроса видзаполнениярасшифровкипостроителяотчета типдобавленияпредставлений типизмеренияпостроителяотчета типразмещенияитогов доступкфайлу режимдиалогавыборафайла режимоткрытияфайла типизмеренияпостроителязапроса видданныханализа методкластеризации типединицыинтервалавременианализаданных типзаполнениятаблицырезультатаанализаданных типиспользованиячисловыхзначенийанализаданных типисточникаданныхпоискаассоциаций типколонкианализаданныхдереворешений типколонкианализаданныхкластеризация типколонкианализаданныхобщаястатистика типколонкианализаданныхпоискассоциаций типколонкианализаданныхпоискпоследовательностей типколонкимоделипрогноза типмерырасстоянияанализаданных типотсеченияправилассоциации типполяанализаданных типстандартизациианализаданных типупорядочиванияправилассоциациианализаданных типупорядочиванияшаблоновпоследовательностейанализаданных типупрощениядереварешений wsнаправлениепараметра вариантxpathxs вариантзаписидатыjson вариантпростоготипаxs видгруппымоделиxs видфасетаxdto действиепостроителяdom завершенностьпростоготипаxs завершенностьсоставноготипаxs завершенностьсхемыxs запрещенныеподстановкиxs исключениягруппподстановкиxs категорияиспользованияатрибутаxs категорияограниченияидентичностиxs категорияограниченияпространствименxs методнаследованияxs модельсодержимогоxs назначениетипаxml недопустимыеподстановкиxs обработкапробельныхсимволовxs обработкасодержимогоxs ограничениезначенияxs параметрыотбораузловdom переносстрокjson позициявдокументеdom пробельныесимволыxml типатрибутаxml типзначенияjson типканоническогоxml типкомпонентыxs типпроверкиxml типрезультатаdomxpath типузлаdom типузлаxml формаxml формапредставленияxs форматдатыjson экранированиесимволовjson видсравнениякомпоновкиданных действиеобработкирасшифровкикомпоновкиданных направлениесортировкикомпоновкиданных расположениевложенныхэлементоврезультатакомпоновкиданных расположениеитоговкомпоновкиданных расположениегруппировкикомпоновкиданных расположениеполейгруппировкикомпоновкиданных расположениеполякомпоновкиданных расположениереквизитовкомпоновкиданных расположениересурсовкомпоновкиданных типбухгалтерскогоостаткакомпоновкиданных типвыводатекстакомпоновкиданных типгруппировкикомпоновкиданных типгруппыэлементовотборакомпоновкиданных типдополненияпериодакомпоновкиданных типзаголовкаполейкомпоновкиданных типмакетагруппировкикомпоновкиданных типмакетаобластикомпоновкиданных типостаткакомпоновкиданных типпериодакомпоновкиданных типразмещениятекстакомпоновкиданных типсвязинаборовданныхкомпоновкиданных типэлементарезультатакомпоновкиданных расположениелегендыдиаграммыкомпоновкиданных типпримененияотборакомпоновкиданных режимотображенияэлементанастройкикомпоновкиданных режимотображениянастроеккомпоновкиданных состояниеэлементанастройкикомпоновкиданных способвосстановлениянастроеккомпоновкиданных режимкомпоновкирезультата использованиепараметракомпоновкиданных автопозицияресурсовкомпоновкиданных вариантиспользованиягруппировкикомпоновкиданных расположениересурсоввдиаграммекомпоновкиданных фиксациякомпоновкиданных использованиеусловногооформлениякомпоновкиданных важностьинтернетпочтовогосообщения обработкатекстаинтернетпочтовогосообщения способкодированияинтернетпочтовоговложения способкодированиянеasciiсимволовинтернетпочтовогосообщения типтекстапочтовогосообщения протоколинтернетпочты статусразборапочтовогосообщения режимтранзакциизаписижурналарегистрации статустранзакциизаписижурналарегистрации уровеньжурналарегистрации расположениехранилищасертификатовкриптографии режимвключениясертификатовкриптографии режимпроверкисертификатакриптографии типхранилищасертификатовкриптографии кодировкаименфайловвzipфайле методсжатияzip методшифрованияzip режимвосстановленияпутейфайловzip режимобработкиподкаталоговzip режимсохраненияпутейzip уровеньсжатияzip звуковоеоповещение направлениепереходакстроке позициявпотоке порядокбайтов режимблокировкиданных режимуправленияблокировкойданных сервисвстроенныхпокупок состояниефоновогозадания типподписчикадоставляемыхуведомлений уровеньиспользованиязащищенногосоединенияftp направлениепорядкасхемызапроса типдополненияпериодамисхемызапроса типконтрольнойточкисхемызапроса типобъединениясхемызапроса типпараметрадоступнойтаблицысхемызапроса типсоединениясхемызапроса httpметод автоиспользованиеобщегореквизита автопрефиксномеразадачи вариантвстроенногоязыка видиерархии видрегистранакопления видтаблицывнешнегоисточникаданных записьдвиженийприпроведении заполнениепоследовательностей индексирование использованиебазыпланавидоврасчета использованиебыстроговыбора использованиеобщегореквизита использованиеподчинения использованиеполнотекстовогопоиска использованиеразделяемыхданныхобщегореквизита использованиереквизита назначениеиспользованияприложения назначениерасширенияконфигурации направлениепередачи обновлениепредопределенныхданных оперативноепроведение основноепредставлениевидарасчета основноепредставлениевидахарактеристики основноепредставлениезадачи основноепредставлениепланаобмена основноепредставлениесправочника основноепредставлениесчета перемещениеграницыприпроведении периодичностьномерабизнеспроцесса периодичностьномерадокумента периодичностьрегистрарасчета периодичностьрегистрасведений повторноеиспользованиевозвращаемыхзначений полнотекстовыйпоискпривводепостроке принадлежностьобъекта проведение разделениеаутентификацииобщегореквизита разделениеданныхобщегореквизита разделениерасширенийконфигурацииобщегореквизита режимавтонумерацииобъектов режимзаписирегистра режимиспользованиямодальности режимиспользованиясинхронныхвызововрасширенийплатформыивнешнихкомпонент режимповторногоиспользованиясеансов режимполученияданныхвыборапривводепостроке режимсовместимости режимсовместимостиинтерфейса режимуправленияблокировкойданныхпоумолчанию сериикодовпланавидовхарактеристик сериикодовпланасчетов сериикодовсправочника созданиепривводе способвыбора способпоискастрокипривводепостроке способредактирования типданныхтаблицывнешнегоисточникаданных типкодапланавидоврасчета типкодасправочника типмакета типномерабизнеспроцесса типномерадокумента типномеразадачи типформы удалениедвижений важностьпроблемыприменениярасширенияконфигурации вариантинтерфейсаклиентскогоприложения вариантмасштабаформклиентскогоприложения вариантосновногошрифтаклиентскогоприложения вариантстандартногопериода вариантстандартнойдатыначала видграницы видкартинки видотображенияполнотекстовогопоиска видрамки видсравнения видцвета видчисловогозначения видшрифта допустимаядлина допустимыйзнак использованиеbyteordermark использованиеметаданныхполнотекстовогопоиска источникрасширенийконфигурации клавиша кодвозвратадиалога кодировкаxbase кодировкатекста направлениепоиска направлениесортировки обновлениепредопределенныхданных обновлениеприизмененииданных отображениепанелиразделов проверказаполнения режимдиалогавопрос режимзапускаклиентскогоприложения режимокругления режимоткрытияформприложения режимполнотекстовогопоиска скоростьклиентскогосоединения состояниевнешнегоисточникаданных состояниеобновленияконфигурациибазыданных способвыборасертификатаwindows способкодированиястроки статуссообщения типвнешнейкомпоненты типплатформы типповеденияклавишиenter типэлементаинформацииовыполненииобновленияконфигурациибазыданных уровеньизоляциитранзакций хешфункция частидаты", se2 = "comобъект ftpсоединение httpзапрос httpсервисответ httpсоединение wsопределения wsпрокси xbase анализданных аннотацияxs блокировкаданных буфердвоичныхданных включениеxs выражениекомпоновкиданных генераторслучайныхчисел географическаясхема географическиекоординаты графическаясхема группамоделиxs данныерасшифровкикомпоновкиданных двоичныеданные дендрограмма диаграмма диаграммаганта диалогвыборафайла диалогвыборацвета диалогвыборашрифта диалограсписаниярегламентногозадания диалогредактированиястандартногопериода диапазон документdom документhtml документацияxs доставляемоеуведомление записьdom записьfastinfoset записьhtml записьjson записьxml записьzipфайла записьданных записьтекста записьузловdom запрос защищенноесоединениеopenssl значенияполейрасшифровкикомпоновкиданных извлечениетекста импортxs интернетпочта интернетпочтовоесообщение интернетпочтовыйпрофиль интернетпрокси интернетсоединение информациядляприложенияxs использованиеатрибутаxs использованиесобытияжурналарегистрации источникдоступныхнастроеккомпоновкиданных итераторузловdom картинка квалификаторыдаты квалификаторыдвоичныхданных квалификаторыстроки квалификаторычисла компоновщикмакетакомпоновкиданных компоновщикнастроеккомпоновкиданных конструктормакетаоформлениякомпоновкиданных конструкторнастроеккомпоновкиданных конструкторформатнойстроки линия макеткомпоновкиданных макетобластикомпоновкиданных макетоформлениякомпоновкиданных маскаxs менеджеркриптографии наборсхемxml настройкикомпоновкиданных настройкисериализацииjson обработкакартинок обработкарасшифровкикомпоновкиданных обходдереваdom объявлениеатрибутаxs объявлениенотацииxs объявлениеэлементаxs описаниеиспользованиясобытиядоступжурналарегистрации описаниеиспользованиясобытияотказвдоступежурналарегистрации описаниеобработкирасшифровкикомпоновкиданных описаниепередаваемогофайла описаниетипов определениегруппыатрибутовxs определениегруппымоделиxs определениеограниченияидентичностиxs определениепростоготипаxs определениесоставноготипаxs определениетипадокументаdom определенияxpathxs отборкомпоновкиданных пакетотображаемыхдокументов параметрвыбора параметркомпоновкиданных параметрызаписиjson параметрызаписиxml параметрычтенияxml переопределениеxs планировщик полеанализаданных полекомпоновкиданных построительdom построительзапроса построительотчета построительотчетаанализаданных построительсхемxml поток потоквпамяти почта почтовоесообщение преобразованиеxsl преобразованиекканоническомуxml процессорвыводарезультатакомпоновкиданныхвколлекциюзначений процессорвыводарезультатакомпоновкиданныхвтабличныйдокумент процессоркомпоновкиданных разыменовательпространствименdom рамка расписаниерегламентногозадания расширенноеимяxml результатчтенияданных своднаядиаграмма связьпараметравыбора связьпотипу связьпотипукомпоновкиданных сериализаторxdto сертификатклиентаwindows сертификатклиентафайл сертификаткриптографии сертификатыудостоверяющихцентровwindows сертификатыудостоверяющихцентровфайл сжатиеданных системнаяинформация сообщениепользователю сочетаниеклавиш сравнениезначений стандартнаядатаначала стандартныйпериод схемаxml схемакомпоновкиданных табличныйдокумент текстовыйдокумент тестируемоеприложение типданныхxml уникальныйидентификатор фабрикаxdto файл файловыйпоток фасетдлиныxs фасетколичестваразрядовдробнойчастиxs фасетмаксимальноговключающегозначенияxs фасетмаксимальногоисключающегозначенияxs фасетмаксимальнойдлиныxs фасетминимальноговключающегозначенияxs фасетминимальногоисключающегозначенияxs фасетминимальнойдлиныxs фасетобразцаxs фасетобщегоколичестваразрядовxs фасетперечисленияxs фасетпробельныхсимволовxs фильтрузловdom форматированнаястрока форматированныйдокумент фрагментxs хешированиеданных хранилищезначения цвет чтениеfastinfoset чтениеhtml чтениеjson чтениеxml чтениеzipфайла чтениеданных чтениетекста чтениеузловdom шрифт элементрезультатакомпоновкиданных comsafearray деревозначений массив соответствие списокзначений структура таблицазначений фиксированнаяструктура фиксированноесоответствие фиксированныймассив ", Re2 = "null истина ложь неопределено", Ce = e2.inherit(e2.NUMBER_MODE), Te2 = {
      className: "string",
      begin: '"|\\|',
      end: '"|$',
      contains: [{ begin: '""' }]
    }, ne2 = {
      begin: "'",
      end: "'",
      excludeBegin: true,
      excludeEnd: true,
      contains: [
        {
          className: "number",
          begin: "\\d{4}([\\.\\\\/:-]?\\d{2}){0,5}"
        }
      ]
    }, ae = {
      match: /[;()+\-:=,]/,
      className: "punctuation",
      relevance: 0
    }, pe = e2.inherit(e2.C_LINE_COMMENT_MODE), fe2 = {
      className: "meta",
      begin: "#|&",
      end: "$",
      keywords: {
        $pattern: n,
        keyword: a2 + l2
      },
      contains: [pe]
    }, Ne = {
      className: "symbol",
      begin: "~",
      end: ";|:",
      excludeEnd: true
    }, ve2 = {
      className: "function",
      variants: [
        {
          begin: "процедура|функция",
          end: "\\)",
          keywords: "процедура функция"
        },
        {
          begin: "конецпроцедуры|конецфункции",
          keywords: "конецпроцедуры конецфункции"
        }
      ],
      contains: [
        {
          begin: "\\(",
          end: "\\)",
          endsParent: true,
          contains: [
            {
              className: "params",
              begin: n,
              end: ",",
              excludeEnd: true,
              endsWithParent: true,
              keywords: {
                $pattern: n,
                keyword: "знач",
                literal: Re2
              },
              contains: [
                Ce,
                Te2,
                ne2
              ]
            },
            pe
          ]
        },
        e2.inherit(e2.TITLE_MODE, { begin: n })
      ]
    };
    return {
      name: "1C:Enterprise",
      case_insensitive: true,
      keywords: {
        $pattern: n,
        keyword: a2,
        built_in: b,
        class: re,
        type: se2,
        literal: Re2
      },
      contains: [
        fe2,
        ve2,
        pe,
        Ne,
        Ce,
        Te2,
        ne2,
        ae
      ]
    };
  }
  return ha = t2, ha;
}
var Ra, Iu;
function bh() {
  if (Iu)
    return Ra;
  Iu = 1;
  function t2(e2) {
    const n = e2.regex, i2 = /^[a-zA-Z][a-zA-Z0-9-]*/, r2 = [
      "ALPHA",
      "BIT",
      "CHAR",
      "CR",
      "CRLF",
      "CTL",
      "DIGIT",
      "DQUOTE",
      "HEXDIG",
      "HTAB",
      "LF",
      "LWSP",
      "OCTET",
      "SP",
      "VCHAR",
      "WSP"
    ], a2 = e2.COMMENT(/;/, /$/), s2 = {
      scope: "symbol",
      match: /%b[0-1]+(-[0-1]+|(\.[0-1]+)+)?/
    }, o2 = {
      scope: "symbol",
      match: /%d[0-9]+(-[0-9]+|(\.[0-9]+)+)?/
    }, l2 = {
      scope: "symbol",
      match: /%x[0-9A-F]+(-[0-9A-F]+|(\.[0-9A-F]+)+)?/
    }, u2 = {
      scope: "symbol",
      match: /%[si](?=".*")/
    }, _ = {
      scope: "attribute",
      match: n.concat(i2, /(?=\s*=)/)
    };
    return {
      name: "Augmented Backus-Naur Form",
      illegal: /[!@#$^&',?+~`|:]/,
      keywords: r2,
      contains: [
        {
          scope: "operator",
          match: /=\/?/
        },
        _,
        a2,
        s2,
        o2,
        l2,
        u2,
        e2.QUOTE_STRING_MODE,
        e2.NUMBER_MODE
      ]
    };
  }
  return Ra = t2, Ra;
}
var Ca, Du;
function Th() {
  if (Du)
    return Ca;
  Du = 1;
  function t2(e2) {
    const n = e2.regex, i2 = [
      "GET",
      "POST",
      "HEAD",
      "PUT",
      "DELETE",
      "CONNECT",
      "OPTIONS",
      "PATCH",
      "TRACE"
    ];
    return {
      name: "Apache Access Log",
      contains: [
        // IP
        {
          className: "number",
          begin: /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(:\d{1,5})?\b/,
          relevance: 5
        },
        // Other numbers
        {
          className: "number",
          begin: /\b\d+\b/,
          relevance: 0
        },
        // Requests
        {
          className: "string",
          begin: n.concat(/"/, n.either(...i2)),
          end: /"/,
          keywords: i2,
          illegal: /\n/,
          relevance: 5,
          contains: [
            {
              begin: /HTTP\/[12]\.\d'/,
              relevance: 5
            }
          ]
        },
        // Dates
        {
          className: "string",
          // dates must have a certain length, this prevents matching
          // simple array accesses a[123] and [] and other common patterns
          // found in other languages
          begin: /\[\d[^\]\n]{8,}\]/,
          illegal: /\n/,
          relevance: 1
        },
        {
          className: "string",
          begin: /\[/,
          end: /\]/,
          illegal: /\n/,
          relevance: 0
        },
        // User agent / relevance boost
        {
          className: "string",
          begin: /"Mozilla\/\d\.\d \(/,
          end: /"/,
          illegal: /\n/,
          relevance: 3
        },
        // Strings
        {
          className: "string",
          begin: /"/,
          end: /"/,
          illegal: /\n/,
          relevance: 0
        }
      ]
    };
  }
  return Ca = t2, Ca;
}
var Na, xu;
function hh() {
  if (xu)
    return Na;
  xu = 1;
  function t2(e2) {
    const n = e2.regex, i2 = /[a-zA-Z_$][a-zA-Z0-9_$]*/, r2 = n.concat(
      i2,
      n.concat("(\\.", i2, ")*")
    ), a2 = /([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)/, s2 = {
      className: "rest_arg",
      begin: /[.]{3}/,
      end: i2,
      relevance: 10
    };
    return {
      name: "ActionScript",
      aliases: ["as"],
      keywords: {
        keyword: [
          "as",
          "break",
          "case",
          "catch",
          "class",
          "const",
          "continue",
          "default",
          "delete",
          "do",
          "dynamic",
          "each",
          "else",
          "extends",
          "final",
          "finally",
          "for",
          "function",
          "get",
          "if",
          "implements",
          "import",
          "in",
          "include",
          "instanceof",
          "interface",
          "internal",
          "is",
          "namespace",
          "native",
          "new",
          "override",
          "package",
          "private",
          "protected",
          "public",
          "return",
          "set",
          "static",
          "super",
          "switch",
          "this",
          "throw",
          "try",
          "typeof",
          "use",
          "var",
          "void",
          "while",
          "with"
        ],
        literal: [
          "true",
          "false",
          "null",
          "undefined"
        ]
      },
      contains: [
        e2.APOS_STRING_MODE,
        e2.QUOTE_STRING_MODE,
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        e2.C_NUMBER_MODE,
        {
          match: [
            /\bpackage/,
            /\s+/,
            r2
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          match: [
            /\b(?:class|interface|extends|implements)/,
            /\s+/,
            i2
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          className: "meta",
          beginKeywords: "import include",
          end: /;/,
          keywords: { keyword: "import include" }
        },
        {
          beginKeywords: "function",
          end: /[{;]/,
          excludeEnd: true,
          illegal: /\S/,
          contains: [
            e2.inherit(e2.TITLE_MODE, { className: "title.function" }),
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              contains: [
                e2.APOS_STRING_MODE,
                e2.QUOTE_STRING_MODE,
                e2.C_LINE_COMMENT_MODE,
                e2.C_BLOCK_COMMENT_MODE,
                s2
              ]
            },
            { begin: n.concat(/:\s*/, a2) }
          ]
        },
        e2.METHOD_GUARD
      ],
      illegal: /#/
    };
  }
  return Na = t2, Na;
}
var va, Lu;
function Rh() {
  if (Lu)
    return va;
  Lu = 1;
  function t2(e2) {
    const n = "\\d(_|\\d)*", i2 = "[eE][-+]?" + n, r2 = n + "(\\." + n + ")?(" + i2 + ")?", a2 = "\\w+", o2 = "\\b(" + (n + "#" + a2 + "(\\." + a2 + ")?#(" + i2 + ")?") + "|" + r2 + ")", l2 = "[A-Za-z](_?[A-Za-z0-9.])*", u2 = `[]\\{\\}%#'"`, _ = e2.COMMENT("--", "$"), d2 = {
      // TODO: These spaces are not required by the Ada syntax
      // however, I have yet to see handwritten Ada code where
      // someone does not put spaces around :
      begin: "\\s+:\\s+",
      end: "\\s*(:=|;|\\)|=>|$)",
      // endsWithParent: true,
      // returnBegin: true,
      illegal: u2,
      contains: [
        {
          // workaround to avoid highlighting
          // named loops and declare blocks
          beginKeywords: "loop for declare others",
          endsParent: true
        },
        {
          // properly highlight all modifiers
          className: "keyword",
          beginKeywords: "not null constant access function procedure in out aliased exception"
        },
        {
          className: "type",
          begin: l2,
          endsParent: true,
          relevance: 0
        }
      ]
    };
    return {
      name: "Ada",
      case_insensitive: true,
      keywords: {
        keyword: [
          "abort",
          "else",
          "new",
          "return",
          "abs",
          "elsif",
          "not",
          "reverse",
          "abstract",
          "end",
          "accept",
          "entry",
          "select",
          "access",
          "exception",
          "of",
          "separate",
          "aliased",
          "exit",
          "or",
          "some",
          "all",
          "others",
          "subtype",
          "and",
          "for",
          "out",
          "synchronized",
          "array",
          "function",
          "overriding",
          "at",
          "tagged",
          "generic",
          "package",
          "task",
          "begin",
          "goto",
          "pragma",
          "terminate",
          "body",
          "private",
          "then",
          "if",
          "procedure",
          "type",
          "case",
          "in",
          "protected",
          "constant",
          "interface",
          "is",
          "raise",
          "use",
          "declare",
          "range",
          "delay",
          "limited",
          "record",
          "when",
          "delta",
          "loop",
          "rem",
          "while",
          "digits",
          "renames",
          "with",
          "do",
          "mod",
          "requeue",
          "xor"
        ],
        literal: [
          "True",
          "False"
        ]
      },
      contains: [
        _,
        // strings "foobar"
        {
          className: "string",
          begin: /"/,
          end: /"/,
          contains: [
            {
              begin: /""/,
              relevance: 0
            }
          ]
        },
        // characters ''
        {
          // character literals always contain one char
          className: "string",
          begin: /'.'/
        },
        {
          // number literals
          className: "number",
          begin: o2,
          relevance: 0
        },
        {
          // Attributes
          className: "symbol",
          begin: "'" + l2
        },
        {
          // package definition, maybe inside generic
          className: "title",
          begin: "(\\bwith\\s+)?(\\bprivate\\s+)?\\bpackage\\s+(\\bbody\\s+)?",
          end: "(is|$)",
          keywords: "package body",
          excludeBegin: true,
          excludeEnd: true,
          illegal: u2
        },
        {
          // function/procedure declaration/definition
          // maybe inside generic
          begin: "(\\b(with|overriding)\\s+)?\\b(function|procedure)\\s+",
          end: "(\\bis|\\bwith|\\brenames|\\)\\s*;)",
          keywords: "overriding function procedure with is renames return",
          // we need to re-match the 'function' keyword, so that
          // the title mode below matches only exactly once
          returnBegin: true,
          contains: [
            _,
            {
              // name of the function/procedure
              className: "title",
              begin: "(\\bwith\\s+)?\\b(function|procedure)\\s+",
              end: "(\\(|\\s+|$)",
              excludeBegin: true,
              excludeEnd: true,
              illegal: u2
            },
            // 'self'
            // // parameter types
            d2,
            {
              // return type
              className: "type",
              begin: "\\breturn\\s+",
              end: "(\\s+|;|$)",
              keywords: "return",
              excludeBegin: true,
              excludeEnd: true,
              // we are done with functions
              endsParent: true,
              illegal: u2
            }
          ]
        },
        {
          // new type declarations
          // maybe inside generic
          className: "type",
          begin: "\\b(sub)?type\\s+",
          end: "\\s+",
          keywords: "type",
          excludeBegin: true,
          illegal: u2
        },
        // see comment above the definition
        d2
        // no markup
        // relevance boosters for small snippets
        // {begin: '\\s*=>\\s*'},
        // {begin: '\\s*:=\\s*'},
        // {begin: '\\s+:=\\s+'},
      ]
    };
  }
  return va = t2, va;
}
var Oa, Mu;
function Ch() {
  if (Mu)
    return Oa;
  Mu = 1;
  function t2(e2) {
    const n = {
      className: "built_in",
      begin: "\\b(void|bool|int8|int16|int32|int64|int|uint8|uint16|uint32|uint64|uint|string|ref|array|double|float|auto|dictionary)"
    }, i2 = {
      className: "symbol",
      begin: "[a-zA-Z0-9_]+@"
    }, r2 = {
      className: "keyword",
      begin: "<",
      end: ">",
      contains: [
        n,
        i2
      ]
    };
    return n.contains = [r2], i2.contains = [r2], {
      name: "AngelScript",
      aliases: ["asc"],
      keywords: [
        "for",
        "in|0",
        "break",
        "continue",
        "while",
        "do|0",
        "return",
        "if",
        "else",
        "case",
        "switch",
        "namespace",
        "is",
        "cast",
        "or",
        "and",
        "xor",
        "not",
        "get|0",
        "in",
        "inout|10",
        "out",
        "override",
        "set|0",
        "private",
        "public",
        "const",
        "default|0",
        "final",
        "shared",
        "external",
        "mixin|10",
        "enum",
        "typedef",
        "funcdef",
        "this",
        "super",
        "import",
        "from",
        "interface",
        "abstract|0",
        "try",
        "catch",
        "protected",
        "explicit",
        "property"
      ],
      // avoid close detection with C# and JS
      illegal: "(^using\\s+[A-Za-z0-9_\\.]+;$|\\bfunction\\s*[^\\(])",
      contains: [
        {
          // 'strings'
          className: "string",
          begin: "'",
          end: "'",
          illegal: "\\n",
          contains: [e2.BACKSLASH_ESCAPE],
          relevance: 0
        },
        // """heredoc strings"""
        {
          className: "string",
          begin: '"""',
          end: '"""'
        },
        {
          // "strings"
          className: "string",
          begin: '"',
          end: '"',
          illegal: "\\n",
          contains: [e2.BACKSLASH_ESCAPE],
          relevance: 0
        },
        e2.C_LINE_COMMENT_MODE,
        // single-line comments
        e2.C_BLOCK_COMMENT_MODE,
        // comment blocks
        {
          // metadata
          className: "string",
          begin: "^\\s*\\[",
          end: "\\]"
        },
        {
          // interface or namespace declaration
          beginKeywords: "interface namespace",
          end: /\{/,
          illegal: "[;.\\-]",
          contains: [
            {
              // interface or namespace name
              className: "symbol",
              begin: "[a-zA-Z0-9_]+"
            }
          ]
        },
        {
          // class declaration
          beginKeywords: "class",
          end: /\{/,
          illegal: "[;.\\-]",
          contains: [
            {
              // class name
              className: "symbol",
              begin: "[a-zA-Z0-9_]+",
              contains: [
                {
                  begin: "[:,]\\s*",
                  contains: [
                    {
                      className: "symbol",
                      begin: "[a-zA-Z0-9_]+"
                    }
                  ]
                }
              ]
            }
          ]
        },
        n,
        // built-in types
        i2,
        // object handles
        {
          // literals
          className: "literal",
          begin: "\\b(null|true|false)"
        },
        {
          // numbers
          className: "number",
          relevance: 0,
          begin: "(-?)(\\b0[xXbBoOdD][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?f?|\\.\\d+f?)([eE][-+]?\\d+f?)?)"
        }
      ]
    };
  }
  return Oa = t2, Oa;
}
var Aa, wu;
function Nh() {
  if (wu)
    return Aa;
  wu = 1;
  function t2(e2) {
    const n = {
      className: "number",
      begin: /[$%]\d+/
    }, i2 = {
      className: "number",
      begin: /\b\d+/
    }, r2 = {
      className: "number",
      begin: /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(:\d{1,5})?/
    }, a2 = {
      className: "number",
      begin: /:\d{1,5}/
    };
    return {
      name: "Apache config",
      aliases: ["apacheconf"],
      case_insensitive: true,
      contains: [
        e2.HASH_COMMENT_MODE,
        {
          className: "section",
          begin: /<\/?/,
          end: />/,
          contains: [
            r2,
            a2,
            // low relevance prevents us from claming XML/HTML where this rule would
            // match strings inside of XML tags
            e2.inherit(e2.QUOTE_STRING_MODE, { relevance: 0 })
          ]
        },
        {
          className: "attribute",
          begin: /\w+/,
          relevance: 0,
          // keywords aren’t needed for highlighting per se, they only boost relevance
          // for a very generally defined mode (starts with a word, ends with line-end
          keywords: { _: [
            "order",
            "deny",
            "allow",
            "setenv",
            "rewriterule",
            "rewriteengine",
            "rewritecond",
            "documentroot",
            "sethandler",
            "errordocument",
            "loadmodule",
            "options",
            "header",
            "listen",
            "serverroot",
            "servername"
          ] },
          starts: {
            end: /$/,
            relevance: 0,
            keywords: { literal: "on off all deny allow" },
            contains: [
              {
                scope: "punctuation",
                match: /\\\n/
              },
              {
                className: "meta",
                begin: /\s\[/,
                end: /\]$/
              },
              {
                className: "variable",
                begin: /[\$%]\{/,
                end: /\}/,
                contains: [
                  "self",
                  n
                ]
              },
              r2,
              i2,
              e2.QUOTE_STRING_MODE
            ]
          }
        }
      ],
      illegal: /\S/
    };
  }
  return Aa = t2, Aa;
}
var ya, ku;
function vh() {
  if (ku)
    return ya;
  ku = 1;
  function t2(e2) {
    const n = e2.regex, i2 = e2.inherit(
      e2.QUOTE_STRING_MODE,
      { illegal: null }
    ), r2 = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      contains: [
        "self",
        e2.C_NUMBER_MODE,
        i2
      ]
    }, a2 = e2.COMMENT(/--/, /$/), s2 = e2.COMMENT(
      /\(\*/,
      /\*\)/,
      { contains: [
        "self",
        // allow nesting
        a2
      ] }
    ), o2 = [
      a2,
      s2,
      e2.HASH_COMMENT_MODE
    ], l2 = [
      /apart from/,
      /aside from/,
      /instead of/,
      /out of/,
      /greater than/,
      /isn't|(doesn't|does not) (equal|come before|come after|contain)/,
      /(greater|less) than( or equal)?/,
      /(starts?|ends|begins?) with/,
      /contained by/,
      /comes (before|after)/,
      /a (ref|reference)/,
      /POSIX (file|path)/,
      /(date|time) string/,
      /quoted form/
    ], u2 = [
      /clipboard info/,
      /the clipboard/,
      /info for/,
      /list (disks|folder)/,
      /mount volume/,
      /path to/,
      /(close|open for) access/,
      /(get|set) eof/,
      /current date/,
      /do shell script/,
      /get volume settings/,
      /random number/,
      /set volume/,
      /system attribute/,
      /system info/,
      /time to GMT/,
      /(load|run|store) script/,
      /scripting components/,
      /ASCII (character|number)/,
      /localized string/,
      /choose (application|color|file|file name|folder|from list|remote application|URL)/,
      /display (alert|dialog)/
    ];
    return {
      name: "AppleScript",
      aliases: ["osascript"],
      keywords: {
        keyword: "about above after against and around as at back before beginning behind below beneath beside between but by considering contain contains continue copy div does eighth else end equal equals error every exit fifth first for fourth from front get given global if ignoring in into is it its last local me middle mod my ninth not of on onto or over prop property put ref reference repeat returning script second set seventh since sixth some tell tenth that the|0 then third through thru timeout times to transaction try until where while whose with without",
        literal: "AppleScript false linefeed return pi quote result space tab true",
        built_in: "alias application boolean class constant date file integer list number real record string text activate beep count delay launch log offset read round run say summarize write character characters contents day frontmost id item length month name|0 paragraph paragraphs rest reverse running time version weekday word words year"
      },
      contains: [
        i2,
        e2.C_NUMBER_MODE,
        {
          className: "built_in",
          begin: n.concat(
            /\b/,
            n.either(...u2),
            /\b/
          )
        },
        {
          className: "built_in",
          begin: /^\s*return\b/
        },
        {
          className: "literal",
          begin: /\b(text item delimiters|current application|missing value)\b/
        },
        {
          className: "keyword",
          begin: n.concat(
            /\b/,
            n.either(...l2),
            /\b/
          )
        },
        {
          beginKeywords: "on",
          illegal: /[${=;\n]/,
          contains: [
            e2.UNDERSCORE_TITLE_MODE,
            r2
          ]
        },
        ...o2
      ],
      illegal: /\/\/|->|=>|\[\[/
    };
  }
  return ya = t2, ya;
}
var Ia, Pu;
function Oh() {
  if (Pu)
    return Ia;
  Pu = 1;
  function t2(e2) {
    const n = e2.regex, i2 = "[A-Za-z_][0-9A-Za-z_]*", r2 = {
      keyword: [
        "break",
        "case",
        "catch",
        "continue",
        "debugger",
        "do",
        "else",
        "export",
        "for",
        "function",
        "if",
        "import",
        "in",
        "new",
        "of",
        "return",
        "switch",
        "try",
        "var",
        "void",
        "while"
      ],
      literal: [
        "BackSlash",
        "DoubleQuote",
        "ForwardSlash",
        "Infinity",
        "NaN",
        "NewLine",
        "PI",
        "SingleQuote",
        "Tab",
        "TextFormatting",
        "false",
        "null",
        "true",
        "undefined"
      ],
      built_in: [
        "Abs",
        "Acos",
        "All",
        "Angle",
        "Any",
        "Area",
        "AreaGeodetic",
        "Array",
        "Asin",
        "Atan",
        "Atan2",
        "Attachments",
        "Average",
        "Back",
        "Bearing",
        "Boolean",
        "Buffer",
        "BufferGeodetic",
        "Ceil",
        "Centroid",
        "ChangeTimeZone",
        "Clip",
        "Concatenate",
        "Console",
        "Constrain",
        "Contains",
        "ConvertDirection",
        "ConvexHull",
        "Cos",
        "Count",
        "Crosses",
        "Cut",
        "Date|0",
        "DateAdd",
        "DateDiff",
        "DateOnly",
        "Day",
        "Decode",
        "DefaultValue",
        "Densify",
        "DensifyGeodetic",
        "Dictionary",
        "Difference",
        "Disjoint",
        "Distance",
        "DistanceGeodetic",
        "DistanceToCoordinate",
        "Distinct",
        "Domain",
        "DomainCode",
        "DomainName",
        "EnvelopeIntersects",
        "Equals",
        "Erase",
        "Exp",
        "Expects",
        "Extent",
        "Feature",
        "FeatureInFilter",
        "FeatureSet",
        "FeatureSetByAssociation",
        "FeatureSetById",
        "FeatureSetByName",
        "FeatureSetByPortalItem",
        "FeatureSetByRelationshipClass",
        "FeatureSetByRelationshipName",
        "Filter",
        "FilterBySubtypeCode",
        "Find",
        "First|0",
        "Floor",
        "FromCharCode",
        "FromCodePoint",
        "FromJSON",
        "Front",
        "GdbVersion",
        "Generalize",
        "Geometry",
        "GetEnvironment",
        "GetFeatureSet",
        "GetFeatureSetInfo",
        "GetUser",
        "GroupBy",
        "Guid",
        "HasKey",
        "HasValue",
        "Hash",
        "Hour",
        "IIf",
        "ISOMonth",
        "ISOWeek",
        "ISOWeekday",
        "ISOYear",
        "Includes",
        "IndexOf",
        "Insert",
        "Intersection",
        "Intersects",
        "IsEmpty",
        "IsNan",
        "IsSelfIntersecting",
        "IsSimple",
        "KnowledgeGraphByPortalItem",
        "Left|0",
        "Length",
        "Length3D",
        "LengthGeodetic",
        "Log",
        "Lower",
        "Map",
        "Max",
        "Mean",
        "MeasureToCoordinate",
        "Mid",
        "Millisecond",
        "Min",
        "Minute",
        "Month",
        "MultiPartToSinglePart",
        "Multipoint",
        "NearestCoordinate",
        "NearestVertex",
        "NextSequenceValue",
        "None",
        "Now",
        "Number",
        "Offset",
        "OrderBy",
        "Overlaps",
        "Point",
        "PointToCoordinate",
        "Polygon",
        "Polyline",
        "Pop",
        "Portal",
        "Pow",
        "Proper",
        "Push",
        "QueryGraph",
        "Random",
        "Reduce",
        "Relate",
        "Replace",
        "Resize",
        "Reverse",
        "Right|0",
        "RingIsClockwise",
        "Rotate",
        "Round",
        "Schema",
        "Second",
        "SetGeometry",
        "Simplify",
        "Sin",
        "Slice",
        "Sort",
        "Splice",
        "Split",
        "Sqrt",
        "StandardizeFilename",
        "StandardizeGuid",
        "Stdev",
        "SubtypeCode",
        "SubtypeName",
        "Subtypes",
        "Sum",
        "SymmetricDifference",
        "Tan",
        "Text",
        "Time",
        "TimeZone",
        "TimeZoneOffset",
        "Timestamp",
        "ToCharCode",
        "ToCodePoint",
        "ToHex",
        "ToLocal",
        "ToUTC",
        "Today",
        "Top|0",
        "Touches",
        "TrackAccelerationAt",
        "TrackAccelerationWindow",
        "TrackCurrentAcceleration",
        "TrackCurrentDistance",
        "TrackCurrentSpeed",
        "TrackCurrentTime",
        "TrackDistanceAt",
        "TrackDistanceWindow",
        "TrackDuration",
        "TrackFieldWindow",
        "TrackGeometryWindow",
        "TrackIndex",
        "TrackSpeedAt",
        "TrackSpeedWindow",
        "TrackStartTime",
        "TrackWindow",
        "Trim",
        "TypeOf",
        "Union",
        "Upper",
        "UrlEncode",
        "Variance",
        "Week",
        "Weekday",
        "When|0",
        "Within",
        "Year|0"
      ]
    }, a2 = [
      "aggregatedFeatures",
      "analytic",
      "config",
      "datapoint",
      "datastore",
      "editcontext",
      "feature",
      "featureSet",
      "feedfeature",
      "fencefeature",
      "fencenotificationtype",
      "graph",
      "join",
      "layer",
      "locationupdate",
      "map",
      "measure",
      "measure",
      "originalFeature",
      "record",
      "reference",
      "rowindex",
      "sourcedatastore",
      "sourcefeature",
      "sourcelayer",
      "target",
      "targetdatastore",
      "targetfeature",
      "targetlayer",
      "userInput",
      "value",
      "variables",
      "view"
    ], s2 = {
      className: "symbol",
      begin: "\\$" + n.either(...a2)
    }, o2 = {
      className: "number",
      variants: [
        { begin: "\\b(0[bB][01]+)" },
        { begin: "\\b(0[oO][0-7]+)" },
        { begin: e2.C_NUMBER_RE }
      ],
      relevance: 0
    }, l2 = {
      className: "subst",
      begin: "\\$\\{",
      end: "\\}",
      keywords: r2,
      contains: []
      // defined later
    }, u2 = {
      className: "string",
      begin: "`",
      end: "`",
      contains: [
        e2.BACKSLASH_ESCAPE,
        l2
      ]
    };
    l2.contains = [
      e2.APOS_STRING_MODE,
      e2.QUOTE_STRING_MODE,
      u2,
      o2,
      e2.REGEXP_MODE
    ];
    const _ = l2.contains.concat([
      e2.C_BLOCK_COMMENT_MODE,
      e2.C_LINE_COMMENT_MODE
    ]);
    return {
      name: "ArcGIS Arcade",
      case_insensitive: true,
      keywords: r2,
      contains: [
        e2.APOS_STRING_MODE,
        e2.QUOTE_STRING_MODE,
        u2,
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        s2,
        o2,
        {
          // object attr container
          begin: /[{,]\s*/,
          relevance: 0,
          contains: [
            {
              begin: i2 + "\\s*:",
              returnBegin: true,
              relevance: 0,
              contains: [
                {
                  className: "attr",
                  begin: i2,
                  relevance: 0
                }
              ]
            }
          ]
        },
        {
          // "value" container
          begin: "(" + e2.RE_STARTERS_RE + "|\\b(return)\\b)\\s*",
          keywords: "return",
          contains: [
            e2.C_LINE_COMMENT_MODE,
            e2.C_BLOCK_COMMENT_MODE,
            e2.REGEXP_MODE,
            {
              className: "function",
              begin: "(\\(.*?\\)|" + i2 + ")\\s*=>",
              returnBegin: true,
              end: "\\s*=>",
              contains: [
                {
                  className: "params",
                  variants: [
                    { begin: i2 },
                    { begin: /\(\s*\)/ },
                    {
                      begin: /\(/,
                      end: /\)/,
                      excludeBegin: true,
                      excludeEnd: true,
                      keywords: r2,
                      contains: _
                    }
                  ]
                }
              ]
            }
          ],
          relevance: 0
        },
        {
          beginKeywords: "function",
          end: /\{/,
          excludeEnd: true,
          contains: [
            e2.inherit(e2.TITLE_MODE, {
              className: "title.function",
              begin: i2
            }),
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              excludeBegin: true,
              excludeEnd: true,
              contains: _
            }
          ],
          illegal: /\[|%/
        },
        { begin: /\$[(.]/ }
      ],
      illegal: /#(?!!)/
    };
  }
  return Ia = t2, Ia;
}
var Da, Fu;
function Ah() {
  if (Fu)
    return Da;
  Fu = 1;
  function t2(n) {
    const i2 = n.regex, r2 = n.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] }), a2 = "decltype\\(auto\\)", s2 = "[a-zA-Z_]\\w*::", l2 = "(?!struct)(" + a2 + "|" + i2.optional(s2) + "[a-zA-Z_]\\w*" + i2.optional("<[^<>]+>") + ")", u2 = {
      className: "type",
      begin: "\\b[a-z\\d_]*_t\\b"
    }, d2 = {
      className: "string",
      variants: [
        {
          begin: '(u8?|U|L)?"',
          end: '"',
          illegal: "\\n",
          contains: [n.BACKSLASH_ESCAPE]
        },
        {
          begin: "(u8?|U|L)?'(\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)|.)",
          end: "'",
          illegal: "."
        },
        n.END_SAME_AS_BEGIN({
          begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
          end: /\)([^()\\ ]{0,16})"/
        })
      ]
    }, f2 = {
      className: "number",
      variants: [
        // Floating-point literal.
        {
          begin: "[+-]?(?:(?:[0-9](?:'?[0-9])*\\.(?:[0-9](?:'?[0-9])*)?|\\.[0-9](?:'?[0-9])*)(?:[Ee][+-]?[0-9](?:'?[0-9])*)?|[0-9](?:'?[0-9])*[Ee][+-]?[0-9](?:'?[0-9])*|0[Xx](?:[0-9A-Fa-f](?:'?[0-9A-Fa-f])*(?:\\.(?:[0-9A-Fa-f](?:'?[0-9A-Fa-f])*)?)?|\\.[0-9A-Fa-f](?:'?[0-9A-Fa-f])*)[Pp][+-]?[0-9](?:'?[0-9])*)(?:[Ff](?:16|32|64|128)?|(BF|bf)16|[Ll]|)"
        },
        // Integer literal.
        {
          begin: "[+-]?\\b(?:0[Bb][01](?:'?[01])*|0[Xx][0-9A-Fa-f](?:'?[0-9A-Fa-f])*|0(?:'?[0-7])*|[1-9](?:'?[0-9])*)(?:[Uu](?:LL?|ll?)|[Uu][Zz]?|(?:LL?|ll?)[Uu]?|[Zz][Uu]|)"
          // Note: there are user-defined literal suffixes too, but perhaps having the custom suffix not part of the
          // literal highlight actually makes it stand out more.
        }
      ],
      relevance: 0
    }, b = {
      className: "meta",
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        n.inherit(d2, { className: "string" }),
        {
          className: "string",
          begin: /<.*?>/
        },
        r2,
        n.C_BLOCK_COMMENT_MODE
      ]
    }, c2 = {
      className: "title",
      begin: i2.optional(s2) + n.IDENT_RE,
      relevance: 0
    }, E2 = i2.optional(s2) + n.IDENT_RE + "\\s*\\(", g2 = [
      "alignas",
      "alignof",
      "and",
      "and_eq",
      "asm",
      "atomic_cancel",
      "atomic_commit",
      "atomic_noexcept",
      "auto",
      "bitand",
      "bitor",
      "break",
      "case",
      "catch",
      "class",
      "co_await",
      "co_return",
      "co_yield",
      "compl",
      "concept",
      "const_cast|10",
      "consteval",
      "constexpr",
      "constinit",
      "continue",
      "decltype",
      "default",
      "delete",
      "do",
      "dynamic_cast|10",
      "else",
      "enum",
      "explicit",
      "export",
      "extern",
      "false",
      "final",
      "for",
      "friend",
      "goto",
      "if",
      "import",
      "inline",
      "module",
      "mutable",
      "namespace",
      "new",
      "noexcept",
      "not",
      "not_eq",
      "nullptr",
      "operator",
      "or",
      "or_eq",
      "override",
      "private",
      "protected",
      "public",
      "reflexpr",
      "register",
      "reinterpret_cast|10",
      "requires",
      "return",
      "sizeof",
      "static_assert",
      "static_cast|10",
      "struct",
      "switch",
      "synchronized",
      "template",
      "this",
      "thread_local",
      "throw",
      "transaction_safe",
      "transaction_safe_dynamic",
      "true",
      "try",
      "typedef",
      "typeid",
      "typename",
      "union",
      "using",
      "virtual",
      "volatile",
      "while",
      "xor",
      "xor_eq"
    ], S = [
      "bool",
      "char",
      "char16_t",
      "char32_t",
      "char8_t",
      "double",
      "float",
      "int",
      "long",
      "short",
      "void",
      "wchar_t",
      "unsigned",
      "signed",
      "const",
      "static"
    ], p2 = [
      "any",
      "auto_ptr",
      "barrier",
      "binary_semaphore",
      "bitset",
      "complex",
      "condition_variable",
      "condition_variable_any",
      "counting_semaphore",
      "deque",
      "false_type",
      "flat_map",
      "flat_set",
      "future",
      "imaginary",
      "initializer_list",
      "istringstream",
      "jthread",
      "latch",
      "lock_guard",
      "multimap",
      "multiset",
      "mutex",
      "optional",
      "ostringstream",
      "packaged_task",
      "pair",
      "promise",
      "priority_queue",
      "queue",
      "recursive_mutex",
      "recursive_timed_mutex",
      "scoped_lock",
      "set",
      "shared_future",
      "shared_lock",
      "shared_mutex",
      "shared_timed_mutex",
      "shared_ptr",
      "stack",
      "string_view",
      "stringstream",
      "timed_mutex",
      "thread",
      "true_type",
      "tuple",
      "unique_lock",
      "unique_ptr",
      "unordered_map",
      "unordered_multimap",
      "unordered_multiset",
      "unordered_set",
      "variant",
      "vector",
      "weak_ptr",
      "wstring",
      "wstring_view"
    ], m2 = [
      "abort",
      "abs",
      "acos",
      "apply",
      "as_const",
      "asin",
      "atan",
      "atan2",
      "calloc",
      "ceil",
      "cerr",
      "cin",
      "clog",
      "cos",
      "cosh",
      "cout",
      "declval",
      "endl",
      "exchange",
      "exit",
      "exp",
      "fabs",
      "floor",
      "fmod",
      "forward",
      "fprintf",
      "fputs",
      "free",
      "frexp",
      "fscanf",
      "future",
      "invoke",
      "isalnum",
      "isalpha",
      "iscntrl",
      "isdigit",
      "isgraph",
      "islower",
      "isprint",
      "ispunct",
      "isspace",
      "isupper",
      "isxdigit",
      "labs",
      "launder",
      "ldexp",
      "log",
      "log10",
      "make_pair",
      "make_shared",
      "make_shared_for_overwrite",
      "make_tuple",
      "make_unique",
      "malloc",
      "memchr",
      "memcmp",
      "memcpy",
      "memset",
      "modf",
      "move",
      "pow",
      "printf",
      "putchar",
      "puts",
      "realloc",
      "scanf",
      "sin",
      "sinh",
      "snprintf",
      "sprintf",
      "sqrt",
      "sscanf",
      "std",
      "stderr",
      "stdin",
      "stdout",
      "strcat",
      "strchr",
      "strcmp",
      "strcpy",
      "strcspn",
      "strlen",
      "strncat",
      "strncmp",
      "strncpy",
      "strpbrk",
      "strrchr",
      "strspn",
      "strstr",
      "swap",
      "tan",
      "tanh",
      "terminate",
      "to_underlying",
      "tolower",
      "toupper",
      "vfprintf",
      "visit",
      "vprintf",
      "vsprintf"
    ], h2 = {
      type: S,
      keyword: g2,
      literal: [
        "NULL",
        "false",
        "nullopt",
        "nullptr",
        "true"
      ],
      built_in: ["_Pragma"],
      _type_hints: p2
    }, C2 = {
      className: "function.dispatch",
      relevance: 0,
      keywords: {
        // Only for relevance, not highlighting.
        _hint: m2
      },
      begin: i2.concat(
        /\b/,
        /(?!decltype)/,
        /(?!if)/,
        /(?!for)/,
        /(?!switch)/,
        /(?!while)/,
        n.IDENT_RE,
        i2.lookahead(/(<[^<>]+>|)\s*\(/)
      )
    }, A2 = [
      C2,
      b,
      u2,
      r2,
      n.C_BLOCK_COMMENT_MODE,
      f2,
      d2
    ], I2 = {
      // This mode covers expression context where we can't expect a function
      // definition and shouldn't highlight anything that looks like one:
      // `return some()`, `else if()`, `(x*sum(1, 2))`
      variants: [
        {
          begin: /=/,
          end: /;/
        },
        {
          begin: /\(/,
          end: /\)/
        },
        {
          beginKeywords: "new throw return else",
          end: /;/
        }
      ],
      keywords: h2,
      contains: A2.concat([
        {
          begin: /\(/,
          end: /\)/,
          keywords: h2,
          contains: A2.concat(["self"]),
          relevance: 0
        }
      ]),
      relevance: 0
    }, v2 = {
      className: "function",
      begin: "(" + l2 + "[\\*&\\s]+)+" + E2,
      returnBegin: true,
      end: /[{;=]/,
      excludeEnd: true,
      keywords: h2,
      illegal: /[^\w\s\*&:<>.]/,
      contains: [
        {
          // to prevent it from being confused as the function title
          begin: a2,
          keywords: h2,
          relevance: 0
        },
        {
          begin: E2,
          returnBegin: true,
          contains: [c2],
          relevance: 0
        },
        // needed because we do not have look-behind on the below rule
        // to prevent it from grabbing the final : in a :: pair
        {
          begin: /::/,
          relevance: 0
        },
        // initializers
        {
          begin: /:/,
          endsWithParent: true,
          contains: [
            d2,
            f2
          ]
        },
        // allow for multiple declarations, e.g.:
        // extern void f(int), g(char);
        {
          relevance: 0,
          match: /,/
        },
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: h2,
          relevance: 0,
          contains: [
            r2,
            n.C_BLOCK_COMMENT_MODE,
            d2,
            f2,
            u2,
            // Count matching parentheses.
            {
              begin: /\(/,
              end: /\)/,
              keywords: h2,
              relevance: 0,
              contains: [
                "self",
                r2,
                n.C_BLOCK_COMMENT_MODE,
                d2,
                f2,
                u2
              ]
            }
          ]
        },
        u2,
        r2,
        n.C_BLOCK_COMMENT_MODE,
        b
      ]
    };
    return {
      name: "C++",
      aliases: [
        "cc",
        "c++",
        "h++",
        "hpp",
        "hh",
        "hxx",
        "cxx"
      ],
      keywords: h2,
      illegal: "</",
      classNameAliases: { "function.dispatch": "built_in" },
      contains: [].concat(
        I2,
        v2,
        C2,
        A2,
        [
          b,
          {
            // containers: ie, `vector <int> rooms (9);`
            begin: "\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function|flat_map|flat_set)\\s*<(?!<)",
            end: ">",
            keywords: h2,
            contains: [
              "self",
              u2
            ]
          },
          {
            begin: n.IDENT_RE + "::",
            keywords: h2
          },
          {
            match: [
              // extra complexity to deal with `enum class` and `enum struct`
              /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
              /\s+/,
              /\w+/
            ],
            className: {
              1: "keyword",
              3: "title.class"
            }
          }
        ]
      )
    };
  }
  function e2(n) {
    const i2 = {
      type: [
        "boolean",
        "byte",
        "word",
        "String"
      ],
      built_in: [
        "KeyboardController",
        "MouseController",
        "SoftwareSerial",
        "EthernetServer",
        "EthernetClient",
        "LiquidCrystal",
        "RobotControl",
        "GSMVoiceCall",
        "EthernetUDP",
        "EsploraTFT",
        "HttpClient",
        "RobotMotor",
        "WiFiClient",
        "GSMScanner",
        "FileSystem",
        "Scheduler",
        "GSMServer",
        "YunClient",
        "YunServer",
        "IPAddress",
        "GSMClient",
        "GSMModem",
        "Keyboard",
        "Ethernet",
        "Console",
        "GSMBand",
        "Esplora",
        "Stepper",
        "Process",
        "WiFiUDP",
        "GSM_SMS",
        "Mailbox",
        "USBHost",
        "Firmata",
        "PImage",
        "Client",
        "Server",
        "GSMPIN",
        "FileIO",
        "Bridge",
        "Serial",
        "EEPROM",
        "Stream",
        "Mouse",
        "Audio",
        "Servo",
        "File",
        "Task",
        "GPRS",
        "WiFi",
        "Wire",
        "TFT",
        "GSM",
        "SPI",
        "SD"
      ],
      _hints: [
        "setup",
        "loop",
        "runShellCommandAsynchronously",
        "analogWriteResolution",
        "retrieveCallingNumber",
        "printFirmwareVersion",
        "analogReadResolution",
        "sendDigitalPortPair",
        "noListenOnLocalhost",
        "readJoystickButton",
        "setFirmwareVersion",
        "readJoystickSwitch",
        "scrollDisplayRight",
        "getVoiceCallStatus",
        "scrollDisplayLeft",
        "writeMicroseconds",
        "delayMicroseconds",
        "beginTransmission",
        "getSignalStrength",
        "runAsynchronously",
        "getAsynchronously",
        "listenOnLocalhost",
        "getCurrentCarrier",
        "readAccelerometer",
        "messageAvailable",
        "sendDigitalPorts",
        "lineFollowConfig",
        "countryNameWrite",
        "runShellCommand",
        "readStringUntil",
        "rewindDirectory",
        "readTemperature",
        "setClockDivider",
        "readLightSensor",
        "endTransmission",
        "analogReference",
        "detachInterrupt",
        "countryNameRead",
        "attachInterrupt",
        "encryptionType",
        "readBytesUntil",
        "robotNameWrite",
        "readMicrophone",
        "robotNameRead",
        "cityNameWrite",
        "userNameWrite",
        "readJoystickY",
        "readJoystickX",
        "mouseReleased",
        "openNextFile",
        "scanNetworks",
        "noInterrupts",
        "digitalWrite",
        "beginSpeaker",
        "mousePressed",
        "isActionDone",
        "mouseDragged",
        "displayLogos",
        "noAutoscroll",
        "addParameter",
        "remoteNumber",
        "getModifiers",
        "keyboardRead",
        "userNameRead",
        "waitContinue",
        "processInput",
        "parseCommand",
        "printVersion",
        "readNetworks",
        "writeMessage",
        "blinkVersion",
        "cityNameRead",
        "readMessage",
        "setDataMode",
        "parsePacket",
        "isListening",
        "setBitOrder",
        "beginPacket",
        "isDirectory",
        "motorsWrite",
        "drawCompass",
        "digitalRead",
        "clearScreen",
        "serialEvent",
        "rightToLeft",
        "setTextSize",
        "leftToRight",
        "requestFrom",
        "keyReleased",
        "compassRead",
        "analogWrite",
        "interrupts",
        "WiFiServer",
        "disconnect",
        "playMelody",
        "parseFloat",
        "autoscroll",
        "getPINUsed",
        "setPINUsed",
        "setTimeout",
        "sendAnalog",
        "readSlider",
        "analogRead",
        "beginWrite",
        "createChar",
        "motorsStop",
        "keyPressed",
        "tempoWrite",
        "readButton",
        "subnetMask",
        "debugPrint",
        "macAddress",
        "writeGreen",
        "randomSeed",
        "attachGPRS",
        "readString",
        "sendString",
        "remotePort",
        "releaseAll",
        "mouseMoved",
        "background",
        "getXChange",
        "getYChange",
        "answerCall",
        "getResult",
        "voiceCall",
        "endPacket",
        "constrain",
        "getSocket",
        "writeJSON",
        "getButton",
        "available",
        "connected",
        "findUntil",
        "readBytes",
        "exitValue",
        "readGreen",
        "writeBlue",
        "startLoop",
        "IPAddress",
        "isPressed",
        "sendSysex",
        "pauseMode",
        "gatewayIP",
        "setCursor",
        "getOemKey",
        "tuneWrite",
        "noDisplay",
        "loadImage",
        "switchPIN",
        "onRequest",
        "onReceive",
        "changePIN",
        "playFile",
        "noBuffer",
        "parseInt",
        "overflow",
        "checkPIN",
        "knobRead",
        "beginTFT",
        "bitClear",
        "updateIR",
        "bitWrite",
        "position",
        "writeRGB",
        "highByte",
        "writeRed",
        "setSpeed",
        "readBlue",
        "noStroke",
        "remoteIP",
        "transfer",
        "shutdown",
        "hangCall",
        "beginSMS",
        "endWrite",
        "attached",
        "maintain",
        "noCursor",
        "checkReg",
        "checkPUK",
        "shiftOut",
        "isValid",
        "shiftIn",
        "pulseIn",
        "connect",
        "println",
        "localIP",
        "pinMode",
        "getIMEI",
        "display",
        "noBlink",
        "process",
        "getBand",
        "running",
        "beginSD",
        "drawBMP",
        "lowByte",
        "setBand",
        "release",
        "bitRead",
        "prepare",
        "pointTo",
        "readRed",
        "setMode",
        "noFill",
        "remove",
        "listen",
        "stroke",
        "detach",
        "attach",
        "noTone",
        "exists",
        "buffer",
        "height",
        "bitSet",
        "circle",
        "config",
        "cursor",
        "random",
        "IRread",
        "setDNS",
        "endSMS",
        "getKey",
        "micros",
        "millis",
        "begin",
        "print",
        "write",
        "ready",
        "flush",
        "width",
        "isPIN",
        "blink",
        "clear",
        "press",
        "mkdir",
        "rmdir",
        "close",
        "point",
        "yield",
        "image",
        "BSSID",
        "click",
        "delay",
        "read",
        "text",
        "move",
        "peek",
        "beep",
        "rect",
        "line",
        "open",
        "seek",
        "fill",
        "size",
        "turn",
        "stop",
        "home",
        "find",
        "step",
        "tone",
        "sqrt",
        "RSSI",
        "SSID",
        "end",
        "bit",
        "tan",
        "cos",
        "sin",
        "pow",
        "map",
        "abs",
        "max",
        "min",
        "get",
        "run",
        "put"
      ],
      literal: [
        "DIGITAL_MESSAGE",
        "FIRMATA_STRING",
        "ANALOG_MESSAGE",
        "REPORT_DIGITAL",
        "REPORT_ANALOG",
        "INPUT_PULLUP",
        "SET_PIN_MODE",
        "INTERNAL2V56",
        "SYSTEM_RESET",
        "LED_BUILTIN",
        "INTERNAL1V1",
        "SYSEX_START",
        "INTERNAL",
        "EXTERNAL",
        "DEFAULT",
        "OUTPUT",
        "INPUT",
        "HIGH",
        "LOW"
      ]
    }, r2 = t2(n), a2 = (
      /** @type {Record<string,any>} */
      r2.keywords
    );
    return a2.type = [
      ...a2.type,
      ...i2.type
    ], a2.literal = [
      ...a2.literal,
      ...i2.literal
    ], a2.built_in = [
      ...a2.built_in,
      ...i2.built_in
    ], a2._hints = i2._hints, r2.name = "Arduino", r2.aliases = ["ino"], r2.supersetOf = "cpp", r2;
  }
  return Da = e2, Da;
}
var xa, Uu;
function yh() {
  if (Uu)
    return xa;
  Uu = 1;
  function t2(e2) {
    const n = { variants: [
      e2.COMMENT("^[ \\t]*(?=#)", "$", {
        relevance: 0,
        excludeBegin: true
      }),
      e2.COMMENT("[;@]", "$", { relevance: 0 }),
      e2.C_LINE_COMMENT_MODE,
      e2.C_BLOCK_COMMENT_MODE
    ] };
    return {
      name: "ARM Assembly",
      case_insensitive: true,
      aliases: ["arm"],
      keywords: {
        $pattern: "\\.?" + e2.IDENT_RE,
        meta: (
          // GNU preprocs
          ".2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .arm .thumb .code16 .code32 .force_thumb .thumb_func .ltorg ALIAS ALIGN ARM AREA ASSERT ATTR CN CODE CODE16 CODE32 COMMON CP DATA DCB DCD DCDU DCDO DCFD DCFDU DCI DCQ DCQU DCW DCWU DN ELIF ELSE END ENDFUNC ENDIF ENDP ENTRY EQU EXPORT EXPORTAS EXTERN FIELD FILL FUNCTION GBLA GBLL GBLS GET GLOBAL IF IMPORT INCBIN INCLUDE INFO KEEP LCLA LCLL LCLS LTORG MACRO MAP MEND MEXIT NOFP OPT PRESERVE8 PROC QN READONLY RELOC REQUIRE REQUIRE8 RLIST FN ROUT SETA SETL SETS SN SPACE SUBT THUMB THUMBX TTL WHILE WEND "
        ),
        built_in: "r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 w0 w1 w2 w3 w4 w5 w6 w7 w8 w9 w10 w11 w12 w13 w14 w15 w16 w17 w18 w19 w20 w21 w22 w23 w24 w25 w26 w27 w28 w29 w30 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 pc lr sp ip sl sb fp a1 a2 a3 a4 v1 v2 v3 v4 v5 v6 v7 v8 f0 f1 f2 f3 f4 f5 f6 f7 p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 cpsr_c cpsr_x cpsr_s cpsr_f cpsr_cx cpsr_cxs cpsr_xs cpsr_xsf cpsr_sf cpsr_cxsf spsr_c spsr_x spsr_s spsr_f spsr_cx spsr_cxs spsr_xs spsr_xsf spsr_sf spsr_cxsf s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 d16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 {PC} {VAR} {TRUE} {FALSE} {OPT} {CONFIG} {ENDIAN} {CODESIZE} {CPU} {FPU} {ARCHITECTURE} {PCSTOREOFFSET} {ARMASM_VERSION} {INTER} {ROPI} {RWPI} {SWST} {NOSWST} . @"
      },
      contains: [
        {
          className: "keyword",
          begin: "\\b(adc|(qd?|sh?|u[qh]?)?add(8|16)?|usada?8|(q|sh?|u[qh]?)?(as|sa)x|and|adrl?|sbc|rs[bc]|asr|b[lx]?|blx|bxj|cbn?z|tb[bh]|bic|bfc|bfi|[su]bfx|bkpt|cdp2?|clz|clrex|cmp|cmn|cpsi[ed]|cps|setend|dbg|dmb|dsb|eor|isb|it[te]{0,3}|lsl|lsr|ror|rrx|ldm(([id][ab])|f[ds])?|ldr((s|ex)?[bhd])?|movt?|mvn|mra|mar|mul|[us]mull|smul[bwt][bt]|smu[as]d|smmul|smmla|mla|umlaal|smlal?([wbt][bt]|d)|mls|smlsl?[ds]|smc|svc|sev|mia([bt]{2}|ph)?|mrr?c2?|mcrr2?|mrs|msr|orr|orn|pkh(tb|bt)|rbit|rev(16|sh)?|sel|[su]sat(16)?|nop|pop|push|rfe([id][ab])?|stm([id][ab])?|str(ex)?[bhd]?|(qd?)?sub|(sh?|q|u[qh]?)?sub(8|16)|[su]xt(a?h|a?b(16)?)|srs([id][ab])?|swpb?|swi|smi|tst|teq|wfe|wfi|yield)(eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|hs|lo)?[sptrx]?(?=\\s)"
          // followed by space
        },
        n,
        e2.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "'",
          end: "[^\\\\]'",
          relevance: 0
        },
        {
          className: "title",
          begin: "\\|",
          end: "\\|",
          illegal: "\\n",
          relevance: 0
        },
        {
          className: "number",
          variants: [
            {
              // hex
              begin: "[#$=]?0x[0-9a-f]+"
            },
            {
              // bin
              begin: "[#$=]?0b[01]+"
            },
            {
              // literal
              begin: "[#$=]\\d+"
            },
            {
              // bare number
              begin: "\\b\\d+"
            }
          ],
          relevance: 0
        },
        {
          className: "symbol",
          variants: [
            {
              // GNU ARM syntax
              begin: "^[ \\t]*[a-z_\\.\\$][a-z0-9_\\.\\$]+:"
            },
            {
              // ARM syntax
              begin: "^[a-z_\\.\\$][a-z0-9_\\.\\$]+"
            },
            {
              // label reference
              begin: "[=#]\\w+"
            }
          ],
          relevance: 0
        }
      ]
    };
  }
  return xa = t2, xa;
}
var La, Bu;
function Ih() {
  if (Bu)
    return La;
  Bu = 1;
  function t2(e2) {
    const n = e2.regex, i2 = n.concat(/[\p{L}_]/u, n.optional(/[\p{L}0-9_.-]*:/u), /[\p{L}0-9_.-]*/u), r2 = /[\p{L}0-9._:-]+/u, a2 = {
      className: "symbol",
      begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/
    }, s2 = {
      begin: /\s/,
      contains: [
        {
          className: "keyword",
          begin: /#?[a-z_][a-z1-9_-]+/,
          illegal: /\n/
        }
      ]
    }, o2 = e2.inherit(s2, {
      begin: /\(/,
      end: /\)/
    }), l2 = e2.inherit(e2.APOS_STRING_MODE, { className: "string" }), u2 = e2.inherit(e2.QUOTE_STRING_MODE, { className: "string" }), _ = {
      endsWithParent: true,
      illegal: /</,
      relevance: 0,
      contains: [
        {
          className: "attr",
          begin: r2,
          relevance: 0
        },
        {
          begin: /=\s*/,
          relevance: 0,
          contains: [
            {
              className: "string",
              endsParent: true,
              variants: [
                {
                  begin: /"/,
                  end: /"/,
                  contains: [a2]
                },
                {
                  begin: /'/,
                  end: /'/,
                  contains: [a2]
                },
                { begin: /[^\s"'=<>`]+/ }
              ]
            }
          ]
        }
      ]
    };
    return {
      name: "HTML, XML",
      aliases: [
        "html",
        "xhtml",
        "rss",
        "atom",
        "xjb",
        "xsd",
        "xsl",
        "plist",
        "wsf",
        "svg"
      ],
      case_insensitive: true,
      unicodeRegex: true,
      contains: [
        {
          className: "meta",
          begin: /<![a-z]/,
          end: />/,
          relevance: 10,
          contains: [
            s2,
            u2,
            l2,
            o2,
            {
              begin: /\[/,
              end: /\]/,
              contains: [
                {
                  className: "meta",
                  begin: /<![a-z]/,
                  end: />/,
                  contains: [
                    s2,
                    o2,
                    u2,
                    l2
                  ]
                }
              ]
            }
          ]
        },
        e2.COMMENT(
          /<!--/,
          /-->/,
          { relevance: 10 }
        ),
        {
          begin: /<!\[CDATA\[/,
          end: /\]\]>/,
          relevance: 10
        },
        a2,
        // xml processing instructions
        {
          className: "meta",
          end: /\?>/,
          variants: [
            {
              begin: /<\?xml/,
              relevance: 10,
              contains: [
                u2
              ]
            },
            {
              begin: /<\?[a-z][a-z0-9]+/
            }
          ]
        },
        {
          className: "tag",
          /*
          The lookahead pattern (?=...) ensures that 'begin' only matches
          '<style' as a single word, followed by a whitespace or an
          ending bracket.
          */
          begin: /<style(?=\s|>)/,
          end: />/,
          keywords: { name: "style" },
          contains: [_],
          starts: {
            end: /<\/style>/,
            returnEnd: true,
            subLanguage: [
              "css",
              "xml"
            ]
          }
        },
        {
          className: "tag",
          // See the comment in the <style tag about the lookahead pattern
          begin: /<script(?=\s|>)/,
          end: />/,
          keywords: { name: "script" },
          contains: [_],
          starts: {
            end: /<\/script>/,
            returnEnd: true,
            subLanguage: [
              "javascript",
              "handlebars",
              "xml"
            ]
          }
        },
        // we need this for now for jSX
        {
          className: "tag",
          begin: /<>|<\/>/
        },
        // open tag
        {
          className: "tag",
          begin: n.concat(
            /</,
            n.lookahead(n.concat(
              i2,
              // <tag/>
              // <tag>
              // <tag ...
              n.either(/\/>/, />/, /\s/)
            ))
          ),
          end: /\/?>/,
          contains: [
            {
              className: "name",
              begin: i2,
              relevance: 0,
              starts: _
            }
          ]
        },
        // close tag
        {
          className: "tag",
          begin: n.concat(
            /<\//,
            n.lookahead(n.concat(
              i2,
              />/
            ))
          ),
          contains: [
            {
              className: "name",
              begin: i2,
              relevance: 0
            },
            {
              begin: />/,
              relevance: 0,
              endsParent: true
            }
          ]
        }
      ]
    };
  }
  return La = t2, La;
}
var Ma, Gu;
function Dh() {
  if (Gu)
    return Ma;
  Gu = 1;
  function t2(e2) {
    const n = e2.regex, i2 = {
      begin: "^'{3,}[ \\t]*$",
      relevance: 10
    }, r2 = [
      // escaped constrained formatting marks (i.e., \* \_ or \`)
      { begin: /\\[*_`]/ },
      // escaped unconstrained formatting marks (i.e., \\** \\__ or \\``)
      // must ignore until the next formatting marks
      // this rule might not be 100% compliant with Asciidoctor 2.0 but we are entering undefined behavior territory...
      { begin: /\\\\\*{2}[^\n]*?\*{2}/ },
      { begin: /\\\\_{2}[^\n]*_{2}/ },
      { begin: /\\\\`{2}[^\n]*`{2}/ },
      // guard: constrained formatting mark may not be preceded by ":", ";" or
      // "}". match these so the constrained rule doesn't see them
      { begin: /[:;}][*_`](?![*_`])/ }
    ], a2 = [
      // inline unconstrained strong (single line)
      {
        className: "strong",
        begin: /\*{2}([^\n]+?)\*{2}/
      },
      // inline unconstrained strong (multi-line)
      {
        className: "strong",
        begin: n.concat(
          /\*\*/,
          /((\*(?!\*)|\\[^\n]|[^*\n\\])+\n)+/,
          /(\*(?!\*)|\\[^\n]|[^*\n\\])*/,
          /\*\*/
        ),
        relevance: 0
      },
      // inline constrained strong (single line)
      {
        className: "strong",
        // must not precede or follow a word character
        begin: /\B\*(\S|\S[^\n]*?\S)\*(?!\w)/
      },
      // inline constrained strong (multi-line)
      {
        className: "strong",
        // must not precede or follow a word character
        begin: /\*[^\s]([^\n]+\n)+([^\n]+)\*/
      }
    ], s2 = [
      // inline unconstrained emphasis (single line)
      {
        className: "emphasis",
        begin: /_{2}([^\n]+?)_{2}/
      },
      // inline unconstrained emphasis (multi-line)
      {
        className: "emphasis",
        begin: n.concat(
          /__/,
          /((_(?!_)|\\[^\n]|[^_\n\\])+\n)+/,
          /(_(?!_)|\\[^\n]|[^_\n\\])*/,
          /__/
        ),
        relevance: 0
      },
      // inline constrained emphasis (single line)
      {
        className: "emphasis",
        // must not precede or follow a word character
        begin: /\b_(\S|\S[^\n]*?\S)_(?!\w)/
      },
      // inline constrained emphasis (multi-line)
      {
        className: "emphasis",
        // must not precede or follow a word character
        begin: /_[^\s]([^\n]+\n)+([^\n]+)_/
      },
      // inline constrained emphasis using single quote (legacy)
      {
        className: "emphasis",
        // must not follow a word character or be followed by a single quote or space
        begin: "\\B'(?!['\\s])",
        end: "(\\n{2}|')",
        // allow escaped single quote followed by word char
        contains: [
          {
            begin: "\\\\'\\w",
            relevance: 0
          }
        ],
        relevance: 0
      }
    ], o2 = {
      className: "symbol",
      begin: "^(NOTE|TIP|IMPORTANT|WARNING|CAUTION):\\s+",
      relevance: 10
    }, l2 = {
      className: "bullet",
      begin: "^(\\*+|-+|\\.+|[^\\n]+?::)\\s+"
    };
    return {
      name: "AsciiDoc",
      aliases: ["adoc"],
      contains: [
        // block comment
        e2.COMMENT(
          "^/{4,}\\n",
          "\\n/{4,}$",
          // can also be done as...
          // '^/{4,}$',
          // '^/{4,}$',
          { relevance: 10 }
        ),
        // line comment
        e2.COMMENT(
          "^//",
          "$",
          { relevance: 0 }
        ),
        // title
        {
          className: "title",
          begin: "^\\.\\w.*$"
        },
        // example, admonition & sidebar blocks
        {
          begin: "^[=\\*]{4,}\\n",
          end: "\\n^[=\\*]{4,}$",
          relevance: 10
        },
        // headings
        {
          className: "section",
          relevance: 10,
          variants: [
            { begin: "^(={1,6})[ 	].+?([ 	]\\1)?$" },
            { begin: "^[^\\[\\]\\n]+?\\n[=\\-~\\^\\+]{2,}$" }
          ]
        },
        // document attributes
        {
          className: "meta",
          begin: "^:.+?:",
          end: "\\s",
          excludeEnd: true,
          relevance: 10
        },
        // block attributes
        {
          className: "meta",
          begin: "^\\[.+?\\]$",
          relevance: 0
        },
        // quoteblocks
        {
          className: "quote",
          begin: "^_{4,}\\n",
          end: "\\n_{4,}$",
          relevance: 10
        },
        // listing and literal blocks
        {
          className: "code",
          begin: "^[\\-\\.]{4,}\\n",
          end: "\\n[\\-\\.]{4,}$",
          relevance: 10
        },
        // passthrough blocks
        {
          begin: "^\\+{4,}\\n",
          end: "\\n\\+{4,}$",
          contains: [
            {
              begin: "<",
              end: ">",
              subLanguage: "xml",
              relevance: 0
            }
          ],
          relevance: 10
        },
        l2,
        o2,
        ...r2,
        ...a2,
        ...s2,
        // inline smart quotes
        {
          className: "string",
          variants: [
            { begin: "``.+?''" },
            { begin: "`.+?'" }
          ]
        },
        // inline unconstrained emphasis
        {
          className: "code",
          begin: /`{2}/,
          end: /(\n{2}|`{2})/
        },
        // inline code snippets (TODO should get same treatment as strong and emphasis)
        {
          className: "code",
          begin: "(`.+?`|\\+.+?\\+)",
          relevance: 0
        },
        // indented literal block
        {
          className: "code",
          begin: "^[ \\t]",
          end: "$",
          relevance: 0
        },
        i2,
        // images and links
        {
          begin: "(link:)?(http|https|ftp|file|irc|image:?):\\S+?\\[[^[]*?\\]",
          returnBegin: true,
          contains: [
            {
              begin: "(link|image:?):",
              relevance: 0
            },
            {
              className: "link",
              begin: "\\w",
              end: "[^\\[]+",
              relevance: 0
            },
            {
              className: "string",
              begin: "\\[",
              end: "\\]",
              excludeBegin: true,
              excludeEnd: true,
              relevance: 0
            }
          ],
          relevance: 10
        }
      ]
    };
  }
  return Ma = t2, Ma;
}
var wa, Yu;
function xh() {
  if (Yu)
    return wa;
  Yu = 1;
  function t2(e2) {
    const n = e2.regex, i2 = [
      "false",
      "synchronized",
      "int",
      "abstract",
      "float",
      "private",
      "char",
      "boolean",
      "static",
      "null",
      "if",
      "const",
      "for",
      "true",
      "while",
      "long",
      "throw",
      "strictfp",
      "finally",
      "protected",
      "import",
      "native",
      "final",
      "return",
      "void",
      "enum",
      "else",
      "extends",
      "implements",
      "break",
      "transient",
      "new",
      "catch",
      "instanceof",
      "byte",
      "super",
      "volatile",
      "case",
      "assert",
      "short",
      "package",
      "default",
      "double",
      "public",
      "try",
      "this",
      "switch",
      "continue",
      "throws",
      "privileged",
      "aspectOf",
      "adviceexecution",
      "proceed",
      "cflowbelow",
      "cflow",
      "initialization",
      "preinitialization",
      "staticinitialization",
      "withincode",
      "target",
      "within",
      "execution",
      "getWithinTypeName",
      "handler",
      "thisJoinPoint",
      "thisJoinPointStaticPart",
      "thisEnclosingJoinPointStaticPart",
      "declare",
      "parents",
      "warning",
      "error",
      "soft",
      "precedence",
      "thisAspectInstance"
    ], r2 = [
      "get",
      "set",
      "args",
      "call"
    ];
    return {
      name: "AspectJ",
      keywords: i2,
      illegal: /<\/|#/,
      contains: [
        e2.COMMENT(
          /\/\*\*/,
          /\*\//,
          {
            relevance: 0,
            contains: [
              {
                // eat up @'s in emails to prevent them to be recognized as doctags
                begin: /\w+@/,
                relevance: 0
              },
              {
                className: "doctag",
                begin: /@[A-Za-z]+/
              }
            ]
          }
        ),
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        e2.APOS_STRING_MODE,
        e2.QUOTE_STRING_MODE,
        {
          className: "class",
          beginKeywords: "aspect",
          end: /[{;=]/,
          excludeEnd: true,
          illegal: /[:;"\[\]]/,
          contains: [
            { beginKeywords: "extends implements pertypewithin perthis pertarget percflowbelow percflow issingleton" },
            e2.UNDERSCORE_TITLE_MODE,
            {
              begin: /\([^\)]*/,
              end: /[)]+/,
              keywords: i2.concat(r2),
              excludeEnd: false
            }
          ]
        },
        {
          className: "class",
          beginKeywords: "class interface",
          end: /[{;=]/,
          excludeEnd: true,
          relevance: 0,
          keywords: "class interface",
          illegal: /[:"\[\]]/,
          contains: [
            { beginKeywords: "extends implements" },
            e2.UNDERSCORE_TITLE_MODE
          ]
        },
        {
          // AspectJ Constructs
          beginKeywords: "pointcut after before around throwing returning",
          end: /[)]/,
          excludeEnd: false,
          illegal: /["\[\]]/,
          contains: [
            {
              begin: n.concat(e2.UNDERSCORE_IDENT_RE, /\s*\(/),
              returnBegin: true,
              contains: [e2.UNDERSCORE_TITLE_MODE]
            }
          ]
        },
        {
          begin: /[:]/,
          returnBegin: true,
          end: /[{;]/,
          relevance: 0,
          excludeEnd: false,
          keywords: i2,
          illegal: /["\[\]]/,
          contains: [
            {
              begin: n.concat(e2.UNDERSCORE_IDENT_RE, /\s*\(/),
              keywords: i2.concat(r2),
              relevance: 0
            },
            e2.QUOTE_STRING_MODE
          ]
        },
        {
          // this prevents 'new Name(...), or throw ...' from being recognized as a function definition
          beginKeywords: "new throw",
          relevance: 0
        },
        {
          // the function class is a bit different for AspectJ compared to the Java language
          className: "function",
          begin: /\w+ +\w+(\.\w+)?\s*\([^\)]*\)\s*((throws)[\w\s,]+)?[\{;]/,
          returnBegin: true,
          end: /[{;=]/,
          keywords: i2,
          excludeEnd: true,
          contains: [
            {
              begin: n.concat(e2.UNDERSCORE_IDENT_RE, /\s*\(/),
              returnBegin: true,
              relevance: 0,
              contains: [e2.UNDERSCORE_TITLE_MODE]
            },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              relevance: 0,
              keywords: i2,
              contains: [
                e2.APOS_STRING_MODE,
                e2.QUOTE_STRING_MODE,
                e2.C_NUMBER_MODE,
                e2.C_BLOCK_COMMENT_MODE
              ]
            },
            e2.C_LINE_COMMENT_MODE,
            e2.C_BLOCK_COMMENT_MODE
          ]
        },
        e2.C_NUMBER_MODE,
        {
          // annotation is also used in this language
          className: "meta",
          begin: /@[A-Za-z]+/
        }
      ]
    };
  }
  return wa = t2, wa;
}
var ka, qu;
function Lh() {
  if (qu)
    return ka;
  qu = 1;
  function t2(e2) {
    const n = { begin: "`[\\s\\S]" };
    return {
      name: "AutoHotkey",
      case_insensitive: true,
      aliases: ["ahk"],
      keywords: {
        keyword: "Break Continue Critical Exit ExitApp Gosub Goto New OnExit Pause return SetBatchLines SetTimer Suspend Thread Throw Until ahk_id ahk_class ahk_pid ahk_exe ahk_group",
        literal: "true false NOT AND OR",
        built_in: "ComSpec Clipboard ClipboardAll ErrorLevel"
      },
      contains: [
        n,
        e2.inherit(e2.QUOTE_STRING_MODE, { contains: [n] }),
        e2.COMMENT(";", "$", { relevance: 0 }),
        e2.C_BLOCK_COMMENT_MODE,
        {
          className: "number",
          begin: e2.NUMBER_RE,
          relevance: 0
        },
        {
          // subst would be the most accurate however fails the point of
          // highlighting. variable is comparably the most accurate that actually
          // has some effect
          className: "variable",
          begin: "%[a-zA-Z0-9#_$@]+%"
        },
        {
          className: "built_in",
          begin: "^\\s*\\w+\\s*(,|%)"
          // I don't really know if this is totally relevant
        },
        {
          // symbol would be most accurate however is highlighted just like
          // built_in and that makes up a lot of AutoHotkey code meaning that it
          // would fail to highlight anything
          className: "title",
          variants: [
            { begin: '^[^\\n";]+::(?!=)' },
            {
              begin: '^[^\\n";]+:(?!=)',
              // zero relevance as it catches a lot of things
              // followed by a single ':' in many languages
              relevance: 0
            }
          ]
        },
        {
          className: "meta",
          begin: "^\\s*#\\w+",
          end: "$",
          relevance: 0
        },
        {
          className: "built_in",
          begin: "A_[a-zA-Z0-9]+"
        },
        {
          // consecutive commas, not for highlighting but just for relevance
          begin: ",\\s*,"
        }
      ]
    };
  }
  return ka = t2, ka;
}
var Pa, Vu;
function Mh() {
  if (Vu)
    return Pa;
  Vu = 1;
  function t2(e2) {
    const n = "ByRef Case Const ContinueCase ContinueLoop Dim Do Else ElseIf EndFunc EndIf EndSelect EndSwitch EndWith Enum Exit ExitLoop For Func Global If In Local Next ReDim Return Select Static Step Switch Then To Until Volatile WEnd While With", i2 = [
      "EndRegion",
      "forcedef",
      "forceref",
      "ignorefunc",
      "include",
      "include-once",
      "NoTrayIcon",
      "OnAutoItStartRegister",
      "pragma",
      "Region",
      "RequireAdmin",
      "Tidy_Off",
      "Tidy_On",
      "Tidy_Parameters"
    ], r2 = "True False And Null Not Or Default", a2 = "Abs ACos AdlibRegister AdlibUnRegister Asc AscW ASin Assign ATan AutoItSetOption AutoItWinGetTitle AutoItWinSetTitle Beep Binary BinaryLen BinaryMid BinaryToString BitAND BitNOT BitOR BitRotate BitShift BitXOR BlockInput Break Call CDTray Ceiling Chr ChrW ClipGet ClipPut ConsoleRead ConsoleWrite ConsoleWriteError ControlClick ControlCommand ControlDisable ControlEnable ControlFocus ControlGetFocus ControlGetHandle ControlGetPos ControlGetText ControlHide ControlListView ControlMove ControlSend ControlSetText ControlShow ControlTreeView Cos Dec DirCopy DirCreate DirGetSize DirMove DirRemove DllCall DllCallAddress DllCallbackFree DllCallbackGetPtr DllCallbackRegister DllClose DllOpen DllStructCreate DllStructGetData DllStructGetPtr DllStructGetSize DllStructSetData DriveGetDrive DriveGetFileSystem DriveGetLabel DriveGetSerial DriveGetType DriveMapAdd DriveMapDel DriveMapGet DriveSetLabel DriveSpaceFree DriveSpaceTotal DriveStatus EnvGet EnvSet EnvUpdate Eval Execute Exp FileChangeDir FileClose FileCopy FileCreateNTFSLink FileCreateShortcut FileDelete FileExists FileFindFirstFile FileFindNextFile FileFlush FileGetAttrib FileGetEncoding FileGetLongName FileGetPos FileGetShortcut FileGetShortName FileGetSize FileGetTime FileGetVersion FileInstall FileMove FileOpen FileOpenDialog FileRead FileReadLine FileReadToArray FileRecycle FileRecycleEmpty FileSaveDialog FileSelectFolder FileSetAttrib FileSetEnd FileSetPos FileSetTime FileWrite FileWriteLine Floor FtpSetProxy FuncName GUICreate GUICtrlCreateAvi GUICtrlCreateButton GUICtrlCreateCheckbox GUICtrlCreateCombo GUICtrlCreateContextMenu GUICtrlCreateDate GUICtrlCreateDummy GUICtrlCreateEdit GUICtrlCreateGraphic GUICtrlCreateGroup GUICtrlCreateIcon GUICtrlCreateInput GUICtrlCreateLabel GUICtrlCreateList GUICtrlCreateListView GUICtrlCreateListViewItem GUICtrlCreateMenu GUICtrlCreateMenuItem GUICtrlCreateMonthCal GUICtrlCreateObj GUICtrlCreatePic GUICtrlCreateProgress GUICtrlCreateRadio GUICtrlCreateSlider GUICtrlCreateTab GUICtrlCreateTabItem GUICtrlCreateTreeView GUICtrlCreateTreeViewItem GUICtrlCreateUpdown GUICtrlDelete GUICtrlGetHandle GUICtrlGetState GUICtrlRead GUICtrlRecvMsg GUICtrlRegisterListViewSort GUICtrlSendMsg GUICtrlSendToDummy GUICtrlSetBkColor GUICtrlSetColor GUICtrlSetCursor GUICtrlSetData GUICtrlSetDefBkColor GUICtrlSetDefColor GUICtrlSetFont GUICtrlSetGraphic GUICtrlSetImage GUICtrlSetLimit GUICtrlSetOnEvent GUICtrlSetPos GUICtrlSetResizing GUICtrlSetState GUICtrlSetStyle GUICtrlSetTip GUIDelete GUIGetCursorInfo GUIGetMsg GUIGetStyle GUIRegisterMsg GUISetAccelerators GUISetBkColor GUISetCoord GUISetCursor GUISetFont GUISetHelp GUISetIcon GUISetOnEvent GUISetState GUISetStyle GUIStartGroup GUISwitch Hex HotKeySet HttpSetProxy HttpSetUserAgent HWnd InetClose InetGet InetGetInfo InetGetSize InetRead IniDelete IniRead IniReadSection IniReadSectionNames IniRenameSection IniWrite IniWriteSection InputBox Int IsAdmin IsArray IsBinary IsBool IsDeclared IsDllStruct IsFloat IsFunc IsHWnd IsInt IsKeyword IsNumber IsObj IsPtr IsString Log MemGetStats Mod MouseClick MouseClickDrag MouseDown MouseGetCursor MouseGetPos MouseMove MouseUp MouseWheel MsgBox Number ObjCreate ObjCreateInterface ObjEvent ObjGet ObjName OnAutoItExitRegister OnAutoItExitUnRegister Ping PixelChecksum PixelGetColor PixelSearch ProcessClose ProcessExists ProcessGetStats ProcessList ProcessSetPriority ProcessWait ProcessWaitClose ProgressOff ProgressOn ProgressSet Ptr Random RegDelete RegEnumKey RegEnumVal RegRead RegWrite Round Run RunAs RunAsWait RunWait Send SendKeepActive SetError SetExtended ShellExecute ShellExecuteWait Shutdown Sin Sleep SoundPlay SoundSetWaveVolume SplashImageOn SplashOff SplashTextOn Sqrt SRandom StatusbarGetText StderrRead StdinWrite StdioClose StdoutRead String StringAddCR StringCompare StringFormat StringFromASCIIArray StringInStr StringIsAlNum StringIsAlpha StringIsASCII StringIsDigit StringIsFloat StringIsInt StringIsLower StringIsSpace StringIsUpper StringIsXDigit StringLeft StringLen StringLower StringMid StringRegExp StringRegExpReplace StringReplace StringReverse StringRight StringSplit StringStripCR StringStripWS StringToASCIIArray StringToBinary StringTrimLeft StringTrimRight StringUpper Tan TCPAccept TCPCloseSocket TCPConnect TCPListen TCPNameToIP TCPRecv TCPSend TCPShutdown, UDPShutdown TCPStartup, UDPStartup TimerDiff TimerInit ToolTip TrayCreateItem TrayCreateMenu TrayGetMsg TrayItemDelete TrayItemGetHandle TrayItemGetState TrayItemGetText TrayItemSetOnEvent TrayItemSetState TrayItemSetText TraySetClick TraySetIcon TraySetOnEvent TraySetPauseIcon TraySetState TraySetToolTip TrayTip UBound UDPBind UDPCloseSocket UDPOpen UDPRecv UDPSend VarGetType WinActivate WinActive WinClose WinExists WinFlash WinGetCaretPos WinGetClassList WinGetClientSize WinGetHandle WinGetPos WinGetProcess WinGetState WinGetText WinGetTitle WinKill WinList WinMenuSelectItem WinMinimizeAll WinMinimizeAllUndo WinMove WinSetOnTop WinSetState WinSetTitle WinSetTrans WinWait WinWaitActive WinWaitClose WinWaitNotActive", s2 = { variants: [
      e2.COMMENT(";", "$", { relevance: 0 }),
      e2.COMMENT("#cs", "#ce"),
      e2.COMMENT("#comments-start", "#comments-end")
    ] }, o2 = { begin: "\\$[A-z0-9_]+" }, l2 = {
      className: "string",
      variants: [
        {
          begin: /"/,
          end: /"/,
          contains: [
            {
              begin: /""/,
              relevance: 0
            }
          ]
        },
        {
          begin: /'/,
          end: /'/,
          contains: [
            {
              begin: /''/,
              relevance: 0
            }
          ]
        }
      ]
    }, u2 = { variants: [
      e2.BINARY_NUMBER_MODE,
      e2.C_NUMBER_MODE
    ] }, _ = {
      className: "meta",
      begin: "#",
      end: "$",
      keywords: { keyword: i2 },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        {
          beginKeywords: "include",
          keywords: { keyword: "include" },
          end: "$",
          contains: [
            l2,
            {
              className: "string",
              variants: [
                {
                  begin: "<",
                  end: ">"
                },
                {
                  begin: /"/,
                  end: /"/,
                  contains: [
                    {
                      begin: /""/,
                      relevance: 0
                    }
                  ]
                },
                {
                  begin: /'/,
                  end: /'/,
                  contains: [
                    {
                      begin: /''/,
                      relevance: 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        l2,
        s2
      ]
    }, d2 = {
      className: "symbol",
      // begin: '@',
      // end: '$',
      // keywords: 'AppDataCommonDir AppDataDir AutoItExe AutoItPID AutoItVersion AutoItX64 COM_EventObj CommonFilesDir Compiled ComputerName ComSpec CPUArch CR CRLF DesktopCommonDir DesktopDepth DesktopDir DesktopHeight DesktopRefresh DesktopWidth DocumentsCommonDir error exitCode exitMethod extended FavoritesCommonDir FavoritesDir GUI_CtrlHandle GUI_CtrlId GUI_DragFile GUI_DragId GUI_DropId GUI_WinHandle HomeDrive HomePath HomeShare HotKeyPressed HOUR IPAddress1 IPAddress2 IPAddress3 IPAddress4 KBLayout LF LocalAppDataDir LogonDNSDomain LogonDomain LogonServer MDAY MIN MON MSEC MUILang MyDocumentsDir NumParams OSArch OSBuild OSLang OSServicePack OSType OSVersion ProgramFilesDir ProgramsCommonDir ProgramsDir ScriptDir ScriptFullPath ScriptLineNumber ScriptName SEC StartMenuCommonDir StartMenuDir StartupCommonDir StartupDir SW_DISABLE SW_ENABLE SW_HIDE SW_LOCK SW_MAXIMIZE SW_MINIMIZE SW_RESTORE SW_SHOW SW_SHOWDEFAULT SW_SHOWMAXIMIZED SW_SHOWMINIMIZED SW_SHOWMINNOACTIVE SW_SHOWNA SW_SHOWNOACTIVATE SW_SHOWNORMAL SW_UNLOCK SystemDir TAB TempDir TRAY_ID TrayIconFlashing TrayIconVisible UserName UserProfileDir WDAY WindowsDir WorkingDir YDAY YEAR',
      // relevance: 5
      begin: "@[A-z0-9_]+"
    }, f2 = {
      beginKeywords: "Func",
      end: "$",
      illegal: "\\$|\\[|%",
      contains: [
        e2.inherit(e2.UNDERSCORE_TITLE_MODE, { className: "title.function" }),
        {
          className: "params",
          begin: "\\(",
          end: "\\)",
          contains: [
            o2,
            l2,
            u2
          ]
        }
      ]
    };
    return {
      name: "AutoIt",
      case_insensitive: true,
      illegal: /\/\*/,
      keywords: {
        keyword: n,
        built_in: a2,
        literal: r2
      },
      contains: [
        s2,
        o2,
        l2,
        u2,
        _,
        d2,
        f2
      ]
    };
  }
  return Pa = t2, Pa;
}
var Fa, Hu;
function wh() {
  if (Hu)
    return Fa;
  Hu = 1;
  function t2(e2) {
    return {
      name: "AVR Assembly",
      case_insensitive: true,
      keywords: {
        $pattern: "\\.?" + e2.IDENT_RE,
        keyword: (
          /* mnemonic */
          "adc add adiw and andi asr bclr bld brbc brbs brcc brcs break breq brge brhc brhs brid brie brlo brlt brmi brne brpl brsh brtc brts brvc brvs bset bst call cbi cbr clc clh cli cln clr cls clt clv clz com cp cpc cpi cpse dec eicall eijmp elpm eor fmul fmuls fmulsu icall ijmp in inc jmp ld ldd ldi lds lpm lsl lsr mov movw mul muls mulsu neg nop or ori out pop push rcall ret reti rjmp rol ror sbc sbr sbrc sbrs sec seh sbi sbci sbic sbis sbiw sei sen ser ses set sev sez sleep spm st std sts sub subi swap tst wdr"
        ),
        built_in: (
          /* general purpose registers */
          "r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 x|0 xh xl y|0 yh yl z|0 zh zl ucsr1c udr1 ucsr1a ucsr1b ubrr1l ubrr1h ucsr0c ubrr0h tccr3c tccr3a tccr3b tcnt3h tcnt3l ocr3ah ocr3al ocr3bh ocr3bl ocr3ch ocr3cl icr3h icr3l etimsk etifr tccr1c ocr1ch ocr1cl twcr twdr twar twsr twbr osccal xmcra xmcrb eicra spmcsr spmcr portg ddrg ping portf ddrf sreg sph spl xdiv rampz eicrb eimsk gimsk gicr eifr gifr timsk tifr mcucr mcucsr tccr0 tcnt0 ocr0 assr tccr1a tccr1b tcnt1h tcnt1l ocr1ah ocr1al ocr1bh ocr1bl icr1h icr1l tccr2 tcnt2 ocr2 ocdr wdtcr sfior eearh eearl eedr eecr porta ddra pina portb ddrb pinb portc ddrc pinc portd ddrd pind spdr spsr spcr udr0 ucsr0a ucsr0b ubrr0l acsr admux adcsr adch adcl porte ddre pine pinf"
        ),
        meta: ".byte .cseg .db .def .device .dseg .dw .endmacro .equ .eseg .exit .include .list .listmac .macro .nolist .org .set"
      },
      contains: [
        e2.C_BLOCK_COMMENT_MODE,
        e2.COMMENT(
          ";",
          "$",
          { relevance: 0 }
        ),
        e2.C_NUMBER_MODE,
        // 0x..., decimal, float
        e2.BINARY_NUMBER_MODE,
        // 0b...
        {
          className: "number",
          begin: "\\b(\\$[a-zA-Z0-9]+|0o[0-7]+)"
          // $..., 0o...
        },
        e2.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "'",
          end: "[^\\\\]'",
          illegal: "[^\\\\][^']"
        },
        {
          className: "symbol",
          begin: "^[A-Za-z0-9_.$]+:"
        },
        {
          className: "meta",
          begin: "#",
          end: "$"
        },
        {
          // substitution within a macro
          className: "subst",
          begin: "@[0-9]+"
        }
      ]
    };
  }
  return Fa = t2, Fa;
}
var Ua, zu;
function kh() {
  if (zu)
    return Ua;
  zu = 1;
  function t2(e2) {
    const n = {
      className: "variable",
      variants: [
        { begin: /\$[\w\d#@][\w\d_]*/ },
        { begin: /\$\{(.*?)\}/ }
      ]
    }, i2 = "BEGIN END if else while do for in break continue delete next nextfile function func exit|10", r2 = {
      className: "string",
      contains: [e2.BACKSLASH_ESCAPE],
      variants: [
        {
          begin: /(u|b)?r?'''/,
          end: /'''/,
          relevance: 10
        },
        {
          begin: /(u|b)?r?"""/,
          end: /"""/,
          relevance: 10
        },
        {
          begin: /(u|r|ur)'/,
          end: /'/,
          relevance: 10
        },
        {
          begin: /(u|r|ur)"/,
          end: /"/,
          relevance: 10
        },
        {
          begin: /(b|br)'/,
          end: /'/
        },
        {
          begin: /(b|br)"/,
          end: /"/
        },
        e2.APOS_STRING_MODE,
        e2.QUOTE_STRING_MODE
      ]
    };
    return {
      name: "Awk",
      keywords: { keyword: i2 },
      contains: [
        n,
        r2,
        e2.REGEXP_MODE,
        e2.HASH_COMMENT_MODE,
        e2.NUMBER_MODE
      ]
    };
  }
  return Ua = t2, Ua;
}
var Ba, $u;
function Ph() {
  if ($u)
    return Ba;
  $u = 1;
  function t2(e2) {
    const n = e2.UNDERSCORE_IDENT_RE, s2 = {
      keyword: [
        "abstract",
        "as",
        "asc",
        "avg",
        "break",
        "breakpoint",
        "by",
        "byref",
        "case",
        "catch",
        "changecompany",
        "class",
        "client",
        "client",
        "common",
        "const",
        "continue",
        "count",
        "crosscompany",
        "delegate",
        "delete_from",
        "desc",
        "display",
        "div",
        "do",
        "edit",
        "else",
        "eventhandler",
        "exists",
        "extends",
        "final",
        "finally",
        "firstfast",
        "firstonly",
        "firstonly1",
        "firstonly10",
        "firstonly100",
        "firstonly1000",
        "flush",
        "for",
        "forceliterals",
        "forcenestedloop",
        "forceplaceholders",
        "forceselectorder",
        "forupdate",
        "from",
        "generateonly",
        "group",
        "hint",
        "if",
        "implements",
        "in",
        "index",
        "insert_recordset",
        "interface",
        "internal",
        "is",
        "join",
        "like",
        "maxof",
        "minof",
        "mod",
        "namespace",
        "new",
        "next",
        "nofetch",
        "notexists",
        "optimisticlock",
        "order",
        "outer",
        "pessimisticlock",
        "print",
        "private",
        "protected",
        "public",
        "readonly",
        "repeatableread",
        "retry",
        "return",
        "reverse",
        "select",
        "server",
        "setting",
        "static",
        "sum",
        "super",
        "switch",
        "this",
        "throw",
        "try",
        "ttsabort",
        "ttsbegin",
        "ttscommit",
        "unchecked",
        "update_recordset",
        "using",
        "validtimestate",
        "void",
        "where",
        "while"
      ],
      built_in: [
        "anytype",
        "boolean",
        "byte",
        "char",
        "container",
        "date",
        "double",
        "enum",
        "guid",
        "int",
        "int64",
        "long",
        "real",
        "short",
        "str",
        "utcdatetime",
        "var"
      ],
      literal: [
        "default",
        "false",
        "null",
        "true"
      ]
    }, o2 = {
      variants: [
        { match: [
          /(class|interface)\s+/,
          n,
          /\s+(extends|implements)\s+/,
          n
        ] },
        { match: [
          /class\s+/,
          n
        ] }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: s2
    };
    return {
      name: "X++",
      aliases: ["x++"],
      keywords: s2,
      contains: [
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        e2.APOS_STRING_MODE,
        e2.QUOTE_STRING_MODE,
        e2.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "#",
          end: "$"
        },
        o2
      ]
    };
  }
  return Ba = t2, Ba;
}
var Ga, Wu;
function Fh() {
  if (Wu)
    return Ga;
  Wu = 1;
  function t2(e2) {
    const n = e2.regex, i2 = {}, r2 = {
      begin: /\$\{/,
      end: /\}/,
      contains: [
        "self",
        {
          begin: /:-/,
          contains: [i2]
        }
        // default values
      ]
    };
    Object.assign(i2, {
      className: "variable",
      variants: [
        { begin: n.concat(
          /\$[\w\d#@][\w\d_]*/,
          // negative look-ahead tries to avoid matching patterns that are not
          // Perl at all like $ident$, @ident@, etc.
          "(?![\\w\\d])(?![$])"
        ) },
        r2
      ]
    });
    const a2 = {
      className: "subst",
      begin: /\$\(/,
      end: /\)/,
      contains: [e2.BACKSLASH_ESCAPE]
    }, s2 = e2.inherit(
      e2.COMMENT(),
      {
        match: [
          /(^|\s)/,
          /#.*$/
        ],
        scope: {
          2: "comment"
        }
      }
    ), o2 = {
      begin: /<<-?\s*(?=\w+)/,
      starts: { contains: [
        e2.END_SAME_AS_BEGIN({
          begin: /(\w+)/,
          end: /(\w+)/,
          className: "string"
        })
      ] }
    }, l2 = {
      className: "string",
      begin: /"/,
      end: /"/,
      contains: [
        e2.BACKSLASH_ESCAPE,
        i2,
        a2
      ]
    };
    a2.contains.push(l2);
    const u2 = {
      match: /\\"/
    }, _ = {
      className: "string",
      begin: /'/,
      end: /'/
    }, d2 = {
      match: /\\'/
    }, f2 = {
      begin: /\$?\(\(/,
      end: /\)\)/,
      contains: [
        {
          begin: /\d+#[0-9a-f]+/,
          className: "number"
        },
        e2.NUMBER_MODE,
        i2
      ]
    }, b = [
      "fish",
      "bash",
      "zsh",
      "sh",
      "csh",
      "ksh",
      "tcsh",
      "dash",
      "scsh"
    ], c2 = e2.SHEBANG({
      binary: `(${b.join("|")})`,
      relevance: 10
    }), E2 = {
      className: "function",
      begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
      returnBegin: true,
      contains: [e2.inherit(e2.TITLE_MODE, { begin: /\w[\w\d_]*/ })],
      relevance: 0
    }, g2 = [
      "if",
      "then",
      "else",
      "elif",
      "fi",
      "time",
      "for",
      "while",
      "until",
      "in",
      "do",
      "done",
      "case",
      "esac",
      "coproc",
      "function",
      "select"
    ], S = [
      "true",
      "false"
    ], p2 = { match: /(\/[a-z._-]+)+/ }, m2 = [
      "break",
      "cd",
      "continue",
      "eval",
      "exec",
      "exit",
      "export",
      "getopts",
      "hash",
      "pwd",
      "readonly",
      "return",
      "shift",
      "test",
      "times",
      "trap",
      "umask",
      "unset"
    ], R2 = [
      "alias",
      "bind",
      "builtin",
      "caller",
      "command",
      "declare",
      "echo",
      "enable",
      "help",
      "let",
      "local",
      "logout",
      "mapfile",
      "printf",
      "read",
      "readarray",
      "source",
      "sudo",
      "type",
      "typeset",
      "ulimit",
      "unalias"
    ], T = [
      "autoload",
      "bg",
      "bindkey",
      "bye",
      "cap",
      "chdir",
      "clone",
      "comparguments",
      "compcall",
      "compctl",
      "compdescribe",
      "compfiles",
      "compgroups",
      "compquote",
      "comptags",
      "comptry",
      "compvalues",
      "dirs",
      "disable",
      "disown",
      "echotc",
      "echoti",
      "emulate",
      "fc",
      "fg",
      "float",
      "functions",
      "getcap",
      "getln",
      "history",
      "integer",
      "jobs",
      "kill",
      "limit",
      "log",
      "noglob",
      "popd",
      "print",
      "pushd",
      "pushln",
      "rehash",
      "sched",
      "setcap",
      "setopt",
      "stat",
      "suspend",
      "ttyctl",
      "unfunction",
      "unhash",
      "unlimit",
      "unsetopt",
      "vared",
      "wait",
      "whence",
      "where",
      "which",
      "zcompile",
      "zformat",
      "zftp",
      "zle",
      "zmodload",
      "zparseopts",
      "zprof",
      "zpty",
      "zregexparse",
      "zsocket",
      "zstyle",
      "ztcp"
    ], h2 = [
      "chcon",
      "chgrp",
      "chown",
      "chmod",
      "cp",
      "dd",
      "df",
      "dir",
      "dircolors",
      "ln",
      "ls",
      "mkdir",
      "mkfifo",
      "mknod",
      "mktemp",
      "mv",
      "realpath",
      "rm",
      "rmdir",
      "shred",
      "sync",
      "touch",
      "truncate",
      "vdir",
      "b2sum",
      "base32",
      "base64",
      "cat",
      "cksum",
      "comm",
      "csplit",
      "cut",
      "expand",
      "fmt",
      "fold",
      "head",
      "join",
      "md5sum",
      "nl",
      "numfmt",
      "od",
      "paste",
      "ptx",
      "pr",
      "sha1sum",
      "sha224sum",
      "sha256sum",
      "sha384sum",
      "sha512sum",
      "shuf",
      "sort",
      "split",
      "sum",
      "tac",
      "tail",
      "tr",
      "tsort",
      "unexpand",
      "uniq",
      "wc",
      "arch",
      "basename",
      "chroot",
      "date",
      "dirname",
      "du",
      "echo",
      "env",
      "expr",
      "factor",
      // "false", // keyword literal already
      "groups",
      "hostid",
      "id",
      "link",
      "logname",
      "nice",
      "nohup",
      "nproc",
      "pathchk",
      "pinky",
      "printenv",
      "printf",
      "pwd",
      "readlink",
      "runcon",
      "seq",
      "sleep",
      "stat",
      "stdbuf",
      "stty",
      "tee",
      "test",
      "timeout",
      // "true", // keyword literal already
      "tty",
      "uname",
      "unlink",
      "uptime",
      "users",
      "who",
      "whoami",
      "yes"
    ];
    return {
      name: "Bash",
      aliases: [
        "sh",
        "zsh"
      ],
      keywords: {
        $pattern: /\b[a-z][a-z0-9._-]+\b/,
        keyword: g2,
        literal: S,
        built_in: [
          ...m2,
          ...R2,
          // Shell modifiers
          "set",
          "shopt",
          ...T,
          ...h2
        ]
      },
      contains: [
        c2,
        // to catch known shells and boost relevancy
        e2.SHEBANG(),
        // to catch unknown shells but still highlight the shebang
        E2,
        f2,
        s2,
        o2,
        p2,
        l2,
        u2,
        _,
        d2,
        i2
      ]
    };
  }
  return Ga = t2, Ga;
}
var Ya, Ku;
function Uh() {
  if (Ku)
    return Ya;
  Ku = 1;
  function t2(e2) {
    return {
      name: "BASIC",
      case_insensitive: true,
      illegal: "^.",
      // Support explicitly typed variables that end with $%! or #.
      keywords: {
        $pattern: "[a-zA-Z][a-zA-Z0-9_$%!#]*",
        keyword: [
          "ABS",
          "ASC",
          "AND",
          "ATN",
          "AUTO|0",
          "BEEP",
          "BLOAD|10",
          "BSAVE|10",
          "CALL",
          "CALLS",
          "CDBL",
          "CHAIN",
          "CHDIR",
          "CHR$|10",
          "CINT",
          "CIRCLE",
          "CLEAR",
          "CLOSE",
          "CLS",
          "COLOR",
          "COM",
          "COMMON",
          "CONT",
          "COS",
          "CSNG",
          "CSRLIN",
          "CVD",
          "CVI",
          "CVS",
          "DATA",
          "DATE$",
          "DEFDBL",
          "DEFINT",
          "DEFSNG",
          "DEFSTR",
          "DEF|0",
          "SEG",
          "USR",
          "DELETE",
          "DIM",
          "DRAW",
          "EDIT",
          "END",
          "ENVIRON",
          "ENVIRON$",
          "EOF",
          "EQV",
          "ERASE",
          "ERDEV",
          "ERDEV$",
          "ERL",
          "ERR",
          "ERROR",
          "EXP",
          "FIELD",
          "FILES",
          "FIX",
          "FOR|0",
          "FRE",
          "GET",
          "GOSUB|10",
          "GOTO",
          "HEX$",
          "IF",
          "THEN",
          "ELSE|0",
          "INKEY$",
          "INP",
          "INPUT",
          "INPUT#",
          "INPUT$",
          "INSTR",
          "IMP",
          "INT",
          "IOCTL",
          "IOCTL$",
          "KEY",
          "ON",
          "OFF",
          "LIST",
          "KILL",
          "LEFT$",
          "LEN",
          "LET",
          "LINE",
          "LLIST",
          "LOAD",
          "LOC",
          "LOCATE",
          "LOF",
          "LOG",
          "LPRINT",
          "USING",
          "LSET",
          "MERGE",
          "MID$",
          "MKDIR",
          "MKD$",
          "MKI$",
          "MKS$",
          "MOD",
          "NAME",
          "NEW",
          "NEXT",
          "NOISE",
          "NOT",
          "OCT$",
          "ON",
          "OR",
          "PEN",
          "PLAY",
          "STRIG",
          "OPEN",
          "OPTION",
          "BASE",
          "OUT",
          "PAINT",
          "PALETTE",
          "PCOPY",
          "PEEK",
          "PMAP",
          "POINT",
          "POKE",
          "POS",
          "PRINT",
          "PRINT]",
          "PSET",
          "PRESET",
          "PUT",
          "RANDOMIZE",
          "READ",
          "REM",
          "RENUM",
          "RESET|0",
          "RESTORE",
          "RESUME",
          "RETURN|0",
          "RIGHT$",
          "RMDIR",
          "RND",
          "RSET",
          "RUN",
          "SAVE",
          "SCREEN",
          "SGN",
          "SHELL",
          "SIN",
          "SOUND",
          "SPACE$",
          "SPC",
          "SQR",
          "STEP",
          "STICK",
          "STOP",
          "STR$",
          "STRING$",
          "SWAP",
          "SYSTEM",
          "TAB",
          "TAN",
          "TIME$",
          "TIMER",
          "TROFF",
          "TRON",
          "TO",
          "USR",
          "VAL",
          "VARPTR",
          "VARPTR$",
          "VIEW",
          "WAIT",
          "WHILE",
          "WEND",
          "WIDTH",
          "WINDOW",
          "WRITE",
          "XOR"
        ]
      },
      contains: [
        {
          // Match strings that start with " and end with " or a line break
          scope: "string",
          begin: /"/,
          end: /"|$/,
          contains: [e2.BACKSLASH_ESCAPE]
        },
        e2.COMMENT("REM", "$", { relevance: 10 }),
        e2.COMMENT("'", "$", { relevance: 0 }),
        {
          // Match line numbers
          className: "symbol",
          begin: "^[0-9]+ ",
          relevance: 10
        },
        {
          // Match typed numeric constants (1000, 12.34!, 1.2e5, 1.5#, 1.2D2)
          className: "number",
          begin: "\\b\\d+(\\.\\d+)?([edED]\\d+)?[#!]?",
          relevance: 0
        },
        {
          // Match hexadecimal numbers (&Hxxxx)
          className: "number",
          begin: "(&[hH][0-9a-fA-F]{1,4})"
        },
        {
          // Match octal numbers (&Oxxxxxx)
          className: "number",
          begin: "(&[oO][0-7]{1,6})"
        }
      ]
    };
  }
  return Ya = t2, Ya;
}
var qa, Qu;
function Bh() {
  if (Qu)
    return qa;
  Qu = 1;
  function t2(e2) {
    return {
      name: "Backus–Naur Form",
      contains: [
        // Attribute
        {
          className: "attribute",
          begin: /</,
          end: />/
        },
        // Specific
        {
          begin: /::=/,
          end: /$/,
          contains: [
            {
              begin: /</,
              end: />/
            },
            // Common
            e2.C_LINE_COMMENT_MODE,
            e2.C_BLOCK_COMMENT_MODE,
            e2.APOS_STRING_MODE,
            e2.QUOTE_STRING_MODE
          ]
        }
      ]
    };
  }
  return qa = t2, qa;
}
var Va, Xu;
function Gh() {
  if (Xu)
    return Va;
  Xu = 1;
  function t2(e2) {
    const n = {
      className: "literal",
      begin: /[+-]+/,
      relevance: 0
    };
    return {
      name: "Brainfuck",
      aliases: ["bf"],
      contains: [
        e2.COMMENT(
          /[^\[\]\.,\+\-<> \r\n]/,
          /[\[\]\.,\+\-<> \r\n]/,
          {
            contains: [
              {
                match: /[ ]+[^\[\]\.,\+\-<> \r\n]/,
                relevance: 0
              }
            ],
            returnEnd: true,
            relevance: 0
          }
        ),
        {
          className: "title",
          begin: "[\\[\\]]",
          relevance: 0
        },
        {
          className: "string",
          begin: "[\\.,]",
          relevance: 0
        },
        {
          // this mode works as the only relevance counter
          // it looks ahead to find the start of a run of literals
          // so only the runs are counted as relevant
          begin: /(?=\+\+|--)/,
          contains: [n]
        },
        n
      ]
    };
  }
  return Va = t2, Va;
}
var Ha, Zu;
function Yh() {
  if (Zu)
    return Ha;
  Zu = 1;
  function t2(e2) {
    const n = e2.regex, i2 = e2.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] }), r2 = "decltype\\(auto\\)", a2 = "[a-zA-Z_]\\w*::", o2 = "(" + r2 + "|" + n.optional(a2) + "[a-zA-Z_]\\w*" + n.optional("<[^<>]+>") + ")", l2 = {
      className: "type",
      variants: [
        { begin: "\\b[a-z\\d_]*_t\\b" },
        { match: /\batomic_[a-z]{3,6}\b/ }
      ]
    }, _ = {
      className: "string",
      variants: [
        {
          begin: '(u8?|U|L)?"',
          end: '"',
          illegal: "\\n",
          contains: [e2.BACKSLASH_ESCAPE]
        },
        {
          begin: "(u8?|U|L)?'(\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)|.)",
          end: "'",
          illegal: "."
        },
        e2.END_SAME_AS_BEGIN({
          begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
          end: /\)([^()\\ ]{0,16})"/
        })
      ]
    }, d2 = {
      className: "number",
      variants: [
        { match: /\b(0b[01']+)/ },
        { match: /(-?)\b([\d']+(\.[\d']*)?|\.[\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)/ },
        { match: /(-?)\b(0[xX][a-fA-F0-9]+(?:'[a-fA-F0-9]+)*(?:\.[a-fA-F0-9]*(?:'[a-fA-F0-9]*)*)?(?:[pP][-+]?[0-9]+)?(l|L)?(u|U)?)/ },
        { match: /(-?)\b\d+(?:'\d+)*(?:\.\d*(?:'\d*)*)?(?:[eE][-+]?\d+)?/ }
      ],
      relevance: 0
    }, f2 = {
      className: "meta",
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef elifdef elifndef include" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        e2.inherit(_, { className: "string" }),
        {
          className: "string",
          begin: /<.*?>/
        },
        i2,
        e2.C_BLOCK_COMMENT_MODE
      ]
    }, b = {
      className: "title",
      begin: n.optional(a2) + e2.IDENT_RE,
      relevance: 0
    }, c2 = n.optional(a2) + e2.IDENT_RE + "\\s*\\(", S = {
      keyword: [
        "asm",
        "auto",
        "break",
        "case",
        "continue",
        "default",
        "do",
        "else",
        "enum",
        "extern",
        "for",
        "fortran",
        "goto",
        "if",
        "inline",
        "register",
        "restrict",
        "return",
        "sizeof",
        "typeof",
        "typeof_unqual",
        "struct",
        "switch",
        "typedef",
        "union",
        "volatile",
        "while",
        "_Alignas",
        "_Alignof",
        "_Atomic",
        "_Generic",
        "_Noreturn",
        "_Static_assert",
        "_Thread_local",
        // aliases
        "alignas",
        "alignof",
        "noreturn",
        "static_assert",
        "thread_local",
        // not a C keyword but is, for all intents and purposes, treated exactly like one.
        "_Pragma"
      ],
      type: [
        "float",
        "double",
        "signed",
        "unsigned",
        "int",
        "short",
        "long",
        "char",
        "void",
        "_Bool",
        "_BitInt",
        "_Complex",
        "_Imaginary",
        "_Decimal32",
        "_Decimal64",
        "_Decimal96",
        "_Decimal128",
        "_Decimal64x",
        "_Decimal128x",
        "_Float16",
        "_Float32",
        "_Float64",
        "_Float128",
        "_Float32x",
        "_Float64x",
        "_Float128x",
        // modifiers
        "const",
        "static",
        "constexpr",
        // aliases
        "complex",
        "bool",
        "imaginary"
      ],
      literal: "true false NULL",
      // TODO: apply hinting work similar to what was done in cpp.js
      built_in: "std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr"
    }, p2 = [
      f2,
      l2,
      i2,
      e2.C_BLOCK_COMMENT_MODE,
      d2,
      _
    ], m2 = {
      // This mode covers expression context where we can't expect a function
      // definition and shouldn't highlight anything that looks like one:
      // `return some()`, `else if()`, `(x*sum(1, 2))`
      variants: [
        {
          begin: /=/,
          end: /;/
        },
        {
          begin: /\(/,
          end: /\)/
        },
        {
          beginKeywords: "new throw return else",
          end: /;/
        }
      ],
      keywords: S,
      contains: p2.concat([
        {
          begin: /\(/,
          end: /\)/,
          keywords: S,
          contains: p2.concat(["self"]),
          relevance: 0
        }
      ]),
      relevance: 0
    }, R2 = {
      begin: "(" + o2 + "[\\*&\\s]+)+" + c2,
      returnBegin: true,
      end: /[{;=]/,
      excludeEnd: true,
      keywords: S,
      illegal: /[^\w\s\*&:<>.]/,
      contains: [
        {
          // to prevent it from being confused as the function title
          begin: r2,
          keywords: S,
          relevance: 0
        },
        {
          begin: c2,
          returnBegin: true,
          contains: [e2.inherit(b, { className: "title.function" })],
          relevance: 0
        },
        // allow for multiple declarations, e.g.:
        // extern void f(int), g(char);
        {
          relevance: 0,
          match: /,/
        },
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: S,
          relevance: 0,
          contains: [
            i2,
            e2.C_BLOCK_COMMENT_MODE,
            _,
            d2,
            l2,
            // Count matching parentheses.
            {
              begin: /\(/,
              end: /\)/,
              keywords: S,
              relevance: 0,
              contains: [
                "self",
                i2,
                e2.C_BLOCK_COMMENT_MODE,
                _,
                d2,
                l2
              ]
            }
          ]
        },
        l2,
        i2,
        e2.C_BLOCK_COMMENT_MODE,
        f2
      ]
    };
    return {
      name: "C",
      aliases: ["h"],
      keywords: S,
      // Until differentiations are added between `c` and `cpp`, `c` will
      // not be auto-detected to avoid auto-detect conflicts between C and C++
      disableAutodetect: true,
      illegal: "</",
      contains: [].concat(
        m2,
        R2,
        p2,
        [
          f2,
          {
            begin: e2.IDENT_RE + "::",
            keywords: S
          },
          {
            className: "class",
            beginKeywords: "enum class struct union",
            end: /[{;:<>=]/,
            contains: [
              { beginKeywords: "final class struct" },
              e2.TITLE_MODE
            ]
          }
        ]
      ),
      exports: {
        preprocessor: f2,
        strings: _,
        keywords: S
      }
    };
  }
  return Ha = t2, Ha;
}
var za, Ju;
function qh() {
  if (Ju)
    return za;
  Ju = 1;
  function t2(e2) {
    const n = e2.regex, i2 = [
      "div",
      "mod",
      "in",
      "and",
      "or",
      "not",
      "xor",
      "asserterror",
      "begin",
      "case",
      "do",
      "downto",
      "else",
      "end",
      "exit",
      "for",
      "local",
      "if",
      "of",
      "repeat",
      "then",
      "to",
      "until",
      "while",
      "with",
      "var"
    ], r2 = "false true", a2 = [
      e2.C_LINE_COMMENT_MODE,
      e2.COMMENT(
        /\{/,
        /\}/,
        { relevance: 0 }
      ),
      e2.COMMENT(
        /\(\*/,
        /\*\)/,
        { relevance: 10 }
      )
    ], s2 = {
      className: "string",
      begin: /'/,
      end: /'/,
      contains: [{ begin: /''/ }]
    }, o2 = {
      className: "string",
      begin: /(#\d+)+/
    }, l2 = {
      className: "number",
      begin: "\\b\\d+(\\.\\d+)?(DT|D|T)",
      relevance: 0
    }, u2 = {
      className: "string",
      // not a string technically but makes sense to be highlighted in the same style
      begin: '"',
      end: '"'
    }, _ = {
      match: [
        /procedure/,
        /\s+/,
        /[a-zA-Z_][\w@]*/,
        /\s*/
      ],
      scope: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: i2,
          contains: [
            s2,
            o2,
            e2.NUMBER_MODE
          ]
        },
        ...a2
      ]
    }, d2 = [
      "Table",
      "Form",
      "Report",
      "Dataport",
      "Codeunit",
      "XMLport",
      "MenuSuite",
      "Page",
      "Query"
    ], f2 = {
      match: [
        /OBJECT/,
        /\s+/,
        n.either(...d2),
        /\s+/,
        /\d+/,
        /\s+(?=[^\s])/,
        /.*/,
        /$/
      ],
      relevance: 3,
      scope: {
        1: "keyword",
        3: "type",
        5: "number",
        7: "title"
      }
    };
    return {
      name: "C/AL",
      case_insensitive: true,
      keywords: {
        keyword: i2,
        literal: r2
      },
      illegal: /\/\*/,
      contains: [
        {
          match: /[\w]+(?=\=)/,
          scope: "attribute",
          relevance: 0
        },
        s2,
        o2,
        l2,
        u2,
        e2.NUMBER_MODE,
        f2,
        _
      ]
    };
  }
  return za = t2, za;
}
var $a, ju;
function Vh() {
  if (ju)
    return $a;
  ju = 1;
  function t2(e2) {
    const n = [
      "struct",
      "enum",
      "interface",
      "union",
      "group",
      "import",
      "using",
      "const",
      "annotation",
      "extends",
      "in",
      "of",
      "on",
      "as",
      "with",
      "from",
      "fixed"
    ], i2 = [
      "Void",
      "Bool",
      "Int8",
      "Int16",
      "Int32",
      "Int64",
      "UInt8",
      "UInt16",
      "UInt32",
      "UInt64",
      "Float32",
      "Float64",
      "Text",
      "Data",
      "AnyPointer",
      "AnyStruct",
      "Capability",
      "List"
    ], r2 = [
      "true",
      "false"
    ], a2 = {
      variants: [
        { match: [
          /(struct|enum|interface)/,
          /\s+/,
          e2.IDENT_RE
        ] },
        { match: [
          /extends/,
          /\s*\(/,
          e2.IDENT_RE,
          /\s*\)/
        ] }
      ],
      scope: {
        1: "keyword",
        3: "title.class"
      }
    };
    return {
      name: "Cap’n Proto",
      aliases: ["capnp"],
      keywords: {
        keyword: n,
        type: i2,
        literal: r2
      },
      contains: [
        e2.QUOTE_STRING_MODE,
        e2.NUMBER_MODE,
        e2.HASH_COMMENT_MODE,
        {
          className: "meta",
          begin: /@0x[\w\d]{16};/,
          illegal: /\n/
        },
        {
          className: "symbol",
          begin: /@\d+\b/
        },
        a2
      ]
    };
  }
  return $a = t2, $a;
}
var Wa, e_;
function Hh() {
  if (e_)
    return Wa;
  e_ = 1;
  function t2(e2) {
    const n = [
      "assembly",
      "module",
      "package",
      "import",
      "alias",
      "class",
      "interface",
      "object",
      "given",
      "value",
      "assign",
      "void",
      "function",
      "new",
      "of",
      "extends",
      "satisfies",
      "abstracts",
      "in",
      "out",
      "return",
      "break",
      "continue",
      "throw",
      "assert",
      "dynamic",
      "if",
      "else",
      "switch",
      "case",
      "for",
      "while",
      "try",
      "catch",
      "finally",
      "then",
      "let",
      "this",
      "outer",
      "super",
      "is",
      "exists",
      "nonempty"
    ], i2 = [
      "shared",
      "abstract",
      "formal",
      "default",
      "actual",
      "variable",
      "late",
      "native",
      "deprecated",
      "final",
      "sealed",
      "annotation",
      "suppressWarnings",
      "small"
    ], r2 = [
      "doc",
      "by",
      "license",
      "see",
      "throws",
      "tagged"
    ], a2 = {
      className: "subst",
      excludeBegin: true,
      excludeEnd: true,
      begin: /``/,
      end: /``/,
      keywords: n,
      relevance: 10
    }, s2 = [
      {
        // verbatim string
        className: "string",
        begin: '"""',
        end: '"""',
        relevance: 10
      },
      {
        // string literal or template
        className: "string",
        begin: '"',
        end: '"',
        contains: [a2]
      },
      {
        // character literal
        className: "string",
        begin: "'",
        end: "'"
      },
      {
        // numeric literal
        className: "number",
        begin: "#[0-9a-fA-F_]+|\\$[01_]+|[0-9_]+(?:\\.[0-9_](?:[eE][+-]?\\d+)?)?[kMGTPmunpf]?",
        relevance: 0
      }
    ];
    return a2.contains = s2, {
      name: "Ceylon",
      keywords: {
        keyword: n.concat(i2),
        meta: r2
      },
      illegal: "\\$[^01]|#[^0-9a-fA-F]",
      contains: [
        e2.C_LINE_COMMENT_MODE,
        e2.COMMENT("/\\*", "\\*/", { contains: ["self"] }),
        {
          // compiler annotation
          className: "meta",
          begin: '@[a-z]\\w*(?::"[^"]*")?'
        }
      ].concat(s2)
    };
  }
  return Wa = t2, Wa;
}
var Ka, t_;
function zh() {
  if (t_)
    return Ka;
  t_ = 1;
  function t2(e2) {
    return {
      name: "Clean",
      aliases: [
        "icl",
        "dcl"
      ],
      keywords: {
        keyword: [
          "if",
          "let",
          "in",
          "with",
          "where",
          "case",
          "of",
          "class",
          "instance",
          "otherwise",
          "implementation",
          "definition",
          "system",
          "module",
          "from",
          "import",
          "qualified",
          "as",
          "special",
          "code",
          "inline",
          "foreign",
          "export",
          "ccall",
          "stdcall",
          "generic",
          "derive",
          "infix",
          "infixl",
          "infixr"
        ],
        built_in: "Int Real Char Bool",
        literal: "True False"
      },
      contains: [
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        e2.APOS_STRING_MODE,
        e2.QUOTE_STRING_MODE,
        e2.C_NUMBER_MODE,
        {
          // relevance booster
          begin: "->|<-[|:]?|#!?|>>=|\\{\\||\\|\\}|:==|=:|<>"
        }
      ]
    };
  }
  return Ka = t2, Ka;
}
var Qa, n_;
function $h() {
  if (n_)
    return Qa;
  n_ = 1;
  function t2(e2) {
    const n = "a-zA-Z_\\-!.?+*=<>&'", i2 = "[#]?[" + n + "][" + n + "0-9/;:$#]*", r2 = "def defonce defprotocol defstruct defmulti defmethod defn- defn defmacro deftype defrecord", a2 = {
      $pattern: i2,
      built_in: (
        // Clojure keywords
        r2 + " cond apply if-not if-let if not not= =|0 <|0 >|0 <=|0 >=|0 ==|0 +|0 /|0 *|0 -|0 rem quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last drop-while while intern condp case reduced cycle split-at split-with repeat replicate iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter monitor-exit macroexpand macroexpand-1 for dosync and or when when-not when-let comp juxt partial sequence memoize constantly complement identity assert peek pop doto proxy first rest cons cast coll last butlast sigs reify second ffirst fnext nfirst nnext meta with-meta ns in-ns create-ns import refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize"
      )
    }, s2 = {
      begin: i2,
      relevance: 0
    }, o2 = {
      scope: "number",
      relevance: 0,
      variants: [
        { match: /[-+]?0[xX][0-9a-fA-F]+N?/ },
        // hexadecimal                 // 0x2a
        { match: /[-+]?0[0-7]+N?/ },
        // octal                       // 052
        { match: /[-+]?[1-9][0-9]?[rR][0-9a-zA-Z]+N?/ },
        // variable radix from 2 to 36 // 2r101010, 8r52, 36r16
        { match: /[-+]?[0-9]+\/[0-9]+N?/ },
        // ratio                       // 1/2
        { match: /[-+]?[0-9]+((\.[0-9]*([eE][+-]?[0-9]+)?M?)|([eE][+-]?[0-9]+M?|M))/ },
        // float        // 0.42 4.2E-1M 42E1 42M
        { match: /[-+]?([1-9][0-9]*|0)N?/ }
        // int (don't match leading 0) // 42 42N
      ]
    }, l2 = {
      scope: "character",
      variants: [
        { match: /\\o[0-3]?[0-7]{1,2}/ },
        // Unicode Octal 0 - 377
        { match: /\\u[0-9a-fA-F]{4}/ },
        // Unicode Hex 0000 - FFFF
        { match: /\\(newline|space|tab|formfeed|backspace|return)/ },
        // special characters
        {
          match: /\\\S/,
          relevance: 0
        }
        // any non-whitespace char
      ]
    }, u2 = {
      scope: "regex",
      begin: /#"/,
      end: /"/,
      contains: [e2.BACKSLASH_ESCAPE]
    }, _ = e2.inherit(e2.QUOTE_STRING_MODE, { illegal: null }), d2 = {
      scope: "punctuation",
      match: /,/,
      relevance: 0
    }, f2 = e2.COMMENT(
      ";",
      "$",
      { relevance: 0 }
    ), b = {
      className: "literal",
      begin: /\b(true|false|nil)\b/
    }, c2 = {
      begin: "\\[|(#::?" + i2 + ")?\\{",
      end: "[\\]\\}]",
      relevance: 0
    }, E2 = {
      className: "symbol",
      begin: "[:]{1,2}" + i2
    }, g2 = {
      begin: "\\(",
      end: "\\)"
    }, S = {
      endsWithParent: true,
      relevance: 0
    }, p2 = {
      keywords: a2,
      className: "name",
      begin: i2,
      relevance: 0,
      starts: S
    }, m2 = [
      d2,
      g2,
      l2,
      u2,
      _,
      f2,
      E2,
      c2,
      o2,
      b,
      s2
    ], R2 = {
      beginKeywords: r2,
      keywords: {
        $pattern: i2,
        keyword: r2
      },
      end: '(\\[|#|\\d|"|:|\\{|\\)|\\(|$)',
      contains: [
        {
          className: "title",
          begin: i2,
          relevance: 0,
          excludeEnd: true,
          // we can only have a single title
          endsParent: true
        }
      ].concat(m2)
    };
    return g2.contains = [
      R2,
      p2,
      S
    ], S.contains = m2, c2.contains = m2, {
      name: "Clojure",
      aliases: [
        "clj",
        "edn"
      ],
      illegal: /\S/,
      contains: [
        d2,
        g2,
        l2,
        u2,
        _,
        f2,
        E2,
        c2,
        o2,
        b
      ]
    };
  }
  return Qa = t2, Qa;
}
var Xa, r_;
function Wh() {
  if (r_)
    return Xa;
  r_ = 1;
  function t2(e2) {
    return {
      name: "Clojure REPL",
      contains: [
        {
          className: "meta.prompt",
          begin: /^([\w.-]+|\s*#_)?=>/,
          starts: {
            end: /$/,
            subLanguage: "clojure"
          }
        }
      ]
    };
  }
  return Xa = t2, Xa;
}
var Za, a_;
function Kh() {
  if (a_)
    return Za;
  a_ = 1;
  function t2(e2) {
    return {
      name: "CMake",
      aliases: ["cmake.in"],
      case_insensitive: true,
      keywords: { keyword: (
        // scripting commands
        "break cmake_host_system_information cmake_minimum_required cmake_parse_arguments cmake_policy configure_file continue elseif else endforeach endfunction endif endmacro endwhile execute_process file find_file find_library find_package find_path find_program foreach function get_cmake_property get_directory_property get_filename_component get_property if include include_guard list macro mark_as_advanced math message option return separate_arguments set_directory_properties set_property set site_name string unset variable_watch while add_compile_definitions add_compile_options add_custom_command add_custom_target add_definitions add_dependencies add_executable add_library add_link_options add_subdirectory add_test aux_source_directory build_command create_test_sourcelist define_property enable_language enable_testing export fltk_wrap_ui get_source_file_property get_target_property get_test_property include_directories include_external_msproject include_regular_expression install link_directories link_libraries load_cache project qt_wrap_cpp qt_wrap_ui remove_definitions set_source_files_properties set_target_properties set_tests_properties source_group target_compile_definitions target_compile_features target_compile_options target_include_directories target_link_directories target_link_libraries target_link_options target_sources try_compile try_run ctest_build ctest_configure ctest_coverage ctest_empty_binary_directory ctest_memcheck ctest_read_custom_files ctest_run_script ctest_sleep ctest_start ctest_submit ctest_test ctest_update ctest_upload build_name exec_program export_library_dependencies install_files install_programs install_targets load_command make_directory output_required_files remove subdir_depends subdirs use_mangled_mesa utility_source variable_requires write_file qt5_use_modules qt5_use_package qt5_wrap_cpp on off true false and or not command policy target test exists is_newer_than is_directory is_symlink is_absolute matches less greater equal less_equal greater_equal strless strgreater strequal strless_equal strgreater_equal version_less version_greater version_equal version_less_equal version_greater_equal in_list defined"
      ) },
      contains: [
        {
          className: "variable",
          begin: /\$\{/,
          end: /\}/
        },
        e2.COMMENT(/#\[\[/, /]]/),
        e2.HASH_COMMENT_MODE,
        e2.QUOTE_STRING_MODE,
        e2.NUMBER_MODE
      ]
    };
  }
  return Za = t2, Za;
}
var Ja, i_;
function Qh() {
  if (i_)
    return Ja;
  i_ = 1;
  const t2 = [
    "as",
    // for exports
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    // JS handles these with a special rule
    // "get",
    // "set",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends",
    // It's reached stage 3, which is "recommended for implementation":
    "using"
  ], e2 = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
  ], n = [
    // Fundamental objects
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    // numbers and dates
    "Math",
    "Date",
    "Number",
    "BigInt",
    // text
    "String",
    "RegExp",
    // Indexed collections
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    // Keyed collections
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    // Structured data
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    // Control abstraction objects
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    // Reflection
    "Reflect",
    "Proxy",
    // Internationalization
    "Intl",
    // WebAssembly
    "WebAssembly"
  ], i2 = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
  ], r2 = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
  ], a2 = [].concat(
    r2,
    n,
    i2
  );
  function s2(o2) {
    const l2 = [
      "npm",
      "print"
    ], u2 = [
      "yes",
      "no",
      "on",
      "off"
    ], _ = [
      "then",
      "unless",
      "until",
      "loop",
      "by",
      "when",
      "and",
      "or",
      "is",
      "isnt",
      "not"
    ], d2 = [
      "var",
      "const",
      "let",
      "function",
      "static"
    ], f2 = (T) => (h2) => !T.includes(h2), b = {
      keyword: t2.concat(_).filter(f2(d2)),
      literal: e2.concat(u2),
      built_in: a2.concat(l2)
    }, c2 = "[A-Za-z$_][0-9A-Za-z$_]*", E2 = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: b
    }, g2 = [
      o2.BINARY_NUMBER_MODE,
      o2.inherit(o2.C_NUMBER_MODE, { starts: {
        end: "(\\s*/)?",
        relevance: 0
      } }),
      // a number tries to eat the following slash to prevent treating it as a regexp
      {
        className: "string",
        variants: [
          {
            begin: /'''/,
            end: /'''/,
            contains: [o2.BACKSLASH_ESCAPE]
          },
          {
            begin: /'/,
            end: /'/,
            contains: [o2.BACKSLASH_ESCAPE]
          },
          {
            begin: /"""/,
            end: /"""/,
            contains: [
              o2.BACKSLASH_ESCAPE,
              E2
            ]
          },
          {
            begin: /"/,
            end: /"/,
            contains: [
              o2.BACKSLASH_ESCAPE,
              E2
            ]
          }
        ]
      },
      {
        className: "regexp",
        variants: [
          {
            begin: "///",
            end: "///",
            contains: [
              E2,
              o2.HASH_COMMENT_MODE
            ]
          },
          {
            begin: "//[gim]{0,3}(?=\\W)",
            relevance: 0
          },
          {
            // regex can't start with space to parse x / 2 / 3 as two divisions
            // regex can't start with *, and it supports an "illegal" in the main mode
            begin: /\/(?![ *]).*?(?![\\]).\/[gim]{0,3}(?=\W)/
          }
        ]
      },
      {
        begin: "@" + c2
        // relevance booster
      },
      {
        subLanguage: "javascript",
        excludeBegin: true,
        excludeEnd: true,
        variants: [
          {
            begin: "```",
            end: "```"
          },
          {
            begin: "`",
            end: "`"
          }
        ]
      }
    ];
    E2.contains = g2;
    const S = o2.inherit(o2.TITLE_MODE, { begin: c2 }), p2 = "(\\(.*\\)\\s*)?\\B[-=]>", m2 = {
      className: "params",
      begin: "\\([^\\(]",
      returnBegin: true,
      /* We need another contained nameless mode to not have every nested
      pair of parens to be called "params" */
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          keywords: b,
          contains: ["self"].concat(g2)
        }
      ]
    }, R2 = {
      variants: [
        { match: [
          /class\s+/,
          c2,
          /\s+extends\s+/,
          c2
        ] },
        { match: [
          /class\s+/,
          c2
        ] }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: b
    };
    return {
      name: "CoffeeScript",
      aliases: [
        "coffee",
        "cson",
        "iced"
      ],
      keywords: b,
      illegal: /\/\*/,
      contains: [
        ...g2,
        o2.COMMENT("###", "###"),
        o2.HASH_COMMENT_MODE,
        {
          className: "function",
          begin: "^\\s*" + c2 + "\\s*=\\s*" + p2,
          end: "[-=]>",
          returnBegin: true,
          contains: [
            S,
            m2
          ]
        },
        {
          // anonymous function start
          begin: /[:\(,=]\s*/,
          relevance: 0,
          contains: [
            {
              className: "function",
              begin: p2,
              end: "[-=]>",
              returnBegin: true,
              contains: [m2]
            }
          ]
        },
        R2,
        {
          begin: c2 + ":",
          end: ":",
          returnBegin: true,
          returnEnd: true,
          relevance: 0
        }
      ]
    };
  }
  return Ja = s2, Ja;
}
var ja$1, o_;
function Xh() {
  if (o_)
    return ja$1;
  o_ = 1;
  function t2(e2) {
    return {
      name: "Coq",
      keywords: {
        keyword: [
          "_|0",
          "as",
          "at",
          "cofix",
          "else",
          "end",
          "exists",
          "exists2",
          "fix",
          "for",
          "forall",
          "fun",
          "if",
          "IF",
          "in",
          "let",
          "match",
          "mod",
          "Prop",
          "return",
          "Set",
          "then",
          "Type",
          "using",
          "where",
          "with",
          "Abort",
          "About",
          "Add",
          "Admit",
          "Admitted",
          "All",
          "Arguments",
          "Assumptions",
          "Axiom",
          "Back",
          "BackTo",
          "Backtrack",
          "Bind",
          "Blacklist",
          "Canonical",
          "Cd",
          "Check",
          "Class",
          "Classes",
          "Close",
          "Coercion",
          "Coercions",
          "CoFixpoint",
          "CoInductive",
          "Collection",
          "Combined",
          "Compute",
          "Conjecture",
          "Conjectures",
          "Constant",
          "constr",
          "Constraint",
          "Constructors",
          "Context",
          "Corollary",
          "CreateHintDb",
          "Cut",
          "Declare",
          "Defined",
          "Definition",
          "Delimit",
          "Dependencies",
          "Dependent",
          "Derive",
          "Drop",
          "eauto",
          "End",
          "Equality",
          "Eval",
          "Example",
          "Existential",
          "Existentials",
          "Existing",
          "Export",
          "exporting",
          "Extern",
          "Extract",
          "Extraction",
          "Fact",
          "Field",
          "Fields",
          "File",
          "Fixpoint",
          "Focus",
          "for",
          "From",
          "Function",
          "Functional",
          "Generalizable",
          "Global",
          "Goal",
          "Grab",
          "Grammar",
          "Graph",
          "Guarded",
          "Heap",
          "Hint",
          "HintDb",
          "Hints",
          "Hypotheses",
          "Hypothesis",
          "ident",
          "Identity",
          "If",
          "Immediate",
          "Implicit",
          "Import",
          "Include",
          "Inductive",
          "Infix",
          "Info",
          "Initial",
          "Inline",
          "Inspect",
          "Instance",
          "Instances",
          "Intro",
          "Intros",
          "Inversion",
          "Inversion_clear",
          "Language",
          "Left",
          "Lemma",
          "Let",
          "Libraries",
          "Library",
          "Load",
          "LoadPath",
          "Local",
          "Locate",
          "Ltac",
          "ML",
          "Mode",
          "Module",
          "Modules",
          "Monomorphic",
          "Morphism",
          "Next",
          "NoInline",
          "Notation",
          "Obligation",
          "Obligations",
          "Opaque",
          "Open",
          "Optimize",
          "Options",
          "Parameter",
          "Parameters",
          "Parametric",
          "Path",
          "Paths",
          "pattern",
          "Polymorphic",
          "Preterm",
          "Print",
          "Printing",
          "Program",
          "Projections",
          "Proof",
          "Proposition",
          "Pwd",
          "Qed",
          "Quit",
          "Rec",
          "Record",
          "Recursive",
          "Redirect",
          "Relation",
          "Remark",
          "Remove",
          "Require",
          "Reserved",
          "Reset",
          "Resolve",
          "Restart",
          "Rewrite",
          "Right",
          "Ring",
          "Rings",
          "Save",
          "Scheme",
          "Scope",
          "Scopes",
          "Script",
          "Search",
          "SearchAbout",
          "SearchHead",
          "SearchPattern",
          "SearchRewrite",
          "Section",
          "Separate",
          "Set",
          "Setoid",
          "Show",
          "Solve",
          "Sorted",
          "Step",
          "Strategies",
          "Strategy",
          "Structure",
          "SubClass",
          "Table",
          "Tables",
          "Tactic",
          "Term",
          "Test",
          "Theorem",
          "Time",
          "Timeout",
          "Transparent",
          "Type",
          "Typeclasses",
          "Types",
          "Undelimit",
          "Undo",
          "Unfocus",
          "Unfocused",
          "Unfold",
          "Universe",
          "Universes",
          "Unset",
          "Unshelve",
          "using",
          "Variable",
          "Variables",
          "Variant",
          "Verbose",
          "Visibility",
          "where",
          "with"
        ],
        built_in: [
          "abstract",
          "absurd",
          "admit",
          "after",
          "apply",
          "as",
          "assert",
          "assumption",
          "at",
          "auto",
          "autorewrite",
          "autounfold",
          "before",
          "bottom",
          "btauto",
          "by",
          "case",
          "case_eq",
          "cbn",
          "cbv",
          "change",
          "classical_left",
          "classical_right",
          "clear",
          "clearbody",
          "cofix",
          "compare",
          "compute",
          "congruence",
          "constr_eq",
          "constructor",
          "contradict",
          "contradiction",
          "cut",
          "cutrewrite",
          "cycle",
          "decide",
          "decompose",
          "dependent",
          "destruct",
          "destruction",
          "dintuition",
          "discriminate",
          "discrR",
          "do",
          "double",
          "dtauto",
          "eapply",
          "eassumption",
          "eauto",
          "ecase",
          "econstructor",
          "edestruct",
          "ediscriminate",
          "eelim",
          "eexact",
          "eexists",
          "einduction",
          "einjection",
          "eleft",
          "elim",
          "elimtype",
          "enough",
          "equality",
          "erewrite",
          "eright",
          "esimplify_eq",
          "esplit",
          "evar",
          "exact",
          "exactly_once",
          "exfalso",
          "exists",
          "f_equal",
          "fail",
          "field",
          "field_simplify",
          "field_simplify_eq",
          "first",
          "firstorder",
          "fix",
          "fold",
          "fourier",
          "functional",
          "generalize",
          "generalizing",
          "gfail",
          "give_up",
          "has_evar",
          "hnf",
          "idtac",
          "in",
          "induction",
          "injection",
          "instantiate",
          "intro",
          "intro_pattern",
          "intros",
          "intuition",
          "inversion",
          "inversion_clear",
          "is_evar",
          "is_var",
          "lapply",
          "lazy",
          "left",
          "lia",
          "lra",
          "move",
          "native_compute",
          "nia",
          "nsatz",
          "omega",
          "once",
          "pattern",
          "pose",
          "progress",
          "proof",
          "psatz",
          "quote",
          "record",
          "red",
          "refine",
          "reflexivity",
          "remember",
          "rename",
          "repeat",
          "replace",
          "revert",
          "revgoals",
          "rewrite",
          "rewrite_strat",
          "right",
          "ring",
          "ring_simplify",
          "rtauto",
          "set",
          "setoid_reflexivity",
          "setoid_replace",
          "setoid_rewrite",
          "setoid_symmetry",
          "setoid_transitivity",
          "shelve",
          "shelve_unifiable",
          "simpl",
          "simple",
          "simplify_eq",
          "solve",
          "specialize",
          "split",
          "split_Rabs",
          "split_Rmult",
          "stepl",
          "stepr",
          "subst",
          "sum",
          "swap",
          "symmetry",
          "tactic",
          "tauto",
          "time",
          "timeout",
          "top",
          "transitivity",
          "trivial",
          "try",
          "tryif",
          "unfold",
          "unify",
          "until",
          "using",
          "vm_compute",
          "with"
        ]
      },
      contains: [
        e2.QUOTE_STRING_MODE,
        e2.COMMENT("\\(\\*", "\\*\\)"),
        e2.C_NUMBER_MODE,
        {
          className: "type",
          excludeBegin: true,
          begin: "\\|\\s*",
          end: "\\w+"
        },
        {
          // relevance booster
          begin: /[-=]>/
        }
      ]
    };
  }
  return ja$1 = t2, ja$1;
}
var ei, s_;
function Zh() {
  if (s_)
    return ei;
  s_ = 1;
  function t2(e2) {
    return {
      name: "Caché Object Script",
      case_insensitive: true,
      aliases: ["cls"],
      keywords: "property parameter class classmethod clientmethod extends as break catch close continue do d|0 else elseif for goto halt hang h|0 if job j|0 kill k|0 lock l|0 merge new open quit q|0 read r|0 return set s|0 tcommit throw trollback try tstart use view while write w|0 xecute x|0 zkill znspace zn ztrap zwrite zw zzdump zzwrite print zbreak zinsert zload zprint zremove zsave zzprint mv mvcall mvcrt mvdim mvprint zquit zsync ascii",
      contains: [
        {
          className: "number",
          begin: "\\b(\\d+(\\.\\d*)?|\\.\\d+)",
          relevance: 0
        },
        {
          className: "string",
          variants: [
            {
              begin: '"',
              end: '"',
              contains: [
                {
                  // escaped
                  begin: '""',
                  relevance: 0
                }
              ]
            }
          ]
        },
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        {
          className: "comment",
          begin: /;/,
          end: "$",
          relevance: 0
        },
        {
          // Functions and user-defined functions: write $ztime(60*60*3), $$myFunc(10), $$^Val(1)
          className: "built_in",
          begin: /(?:\$\$?|\.\.)\^?[a-zA-Z]+/
        },
        {
          // Macro command: quit $$$OK
          className: "built_in",
          begin: /\$\$\$[a-zA-Z]+/
        },
        {
          // Special (global) variables: write %request.Content; Built-in classes: %Library.Integer
          className: "built_in",
          begin: /%[a-z]+(?:\.[a-z]+)*/
        },
        {
          // Global variable: set ^globalName = 12 write ^globalName
          className: "symbol",
          begin: /\^%?[a-zA-Z][\w]*/
        },
        {
          // Some control constructions: do ##class(Package.ClassName).Method(), ##super()
          className: "keyword",
          begin: /##class|##super|#define|#dim/
        },
        // sub-languages: are not fully supported by hljs by 11/15/2015
        // left for the future implementation.
        {
          begin: /&sql\(/,
          end: /\)/,
          excludeBegin: true,
          excludeEnd: true,
          subLanguage: "sql"
        },
        {
          begin: /&(js|jscript|javascript)</,
          end: />/,
          excludeBegin: true,
          excludeEnd: true,
          subLanguage: "javascript"
        },
        {
          // this brakes first and last tag, but this is the only way to embed a valid html
          begin: /&html<\s*</,
          end: />\s*>/,
          subLanguage: "xml"
        }
      ]
    };
  }
  return ei = t2, ei;
}
var ti, l_;
function Jh() {
  if (l_)
    return ti;
  l_ = 1;
  function t2(e2) {
    const n = e2.regex, i2 = e2.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] }), r2 = "decltype\\(auto\\)", a2 = "[a-zA-Z_]\\w*::", o2 = "(?!struct)(" + r2 + "|" + n.optional(a2) + "[a-zA-Z_]\\w*" + n.optional("<[^<>]+>") + ")", l2 = {
      className: "type",
      begin: "\\b[a-z\\d_]*_t\\b"
    }, _ = {
      className: "string",
      variants: [
        {
          begin: '(u8?|U|L)?"',
          end: '"',
          illegal: "\\n",
          contains: [e2.BACKSLASH_ESCAPE]
        },
        {
          begin: "(u8?|U|L)?'(\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)|.)",
          end: "'",
          illegal: "."
        },
        e2.END_SAME_AS_BEGIN({
          begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
          end: /\)([^()\\ ]{0,16})"/
        })
      ]
    }, d2 = {
      className: "number",
      variants: [
        // Floating-point literal.
        {
          begin: "[+-]?(?:(?:[0-9](?:'?[0-9])*\\.(?:[0-9](?:'?[0-9])*)?|\\.[0-9](?:'?[0-9])*)(?:[Ee][+-]?[0-9](?:'?[0-9])*)?|[0-9](?:'?[0-9])*[Ee][+-]?[0-9](?:'?[0-9])*|0[Xx](?:[0-9A-Fa-f](?:'?[0-9A-Fa-f])*(?:\\.(?:[0-9A-Fa-f](?:'?[0-9A-Fa-f])*)?)?|\\.[0-9A-Fa-f](?:'?[0-9A-Fa-f])*)[Pp][+-]?[0-9](?:'?[0-9])*)(?:[Ff](?:16|32|64|128)?|(BF|bf)16|[Ll]|)"
        },
        // Integer literal.
        {
          begin: "[+-]?\\b(?:0[Bb][01](?:'?[01])*|0[Xx][0-9A-Fa-f](?:'?[0-9A-Fa-f])*|0(?:'?[0-7])*|[1-9](?:'?[0-9])*)(?:[Uu](?:LL?|ll?)|[Uu][Zz]?|(?:LL?|ll?)[Uu]?|[Zz][Uu]|)"
          // Note: there are user-defined literal suffixes too, but perhaps having the custom suffix not part of the
          // literal highlight actually makes it stand out more.
        }
      ],
      relevance: 0
    }, f2 = {
      className: "meta",
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        e2.inherit(_, { className: "string" }),
        {
          className: "string",
          begin: /<.*?>/
        },
        i2,
        e2.C_BLOCK_COMMENT_MODE
      ]
    }, b = {
      className: "title",
      begin: n.optional(a2) + e2.IDENT_RE,
      relevance: 0
    }, c2 = n.optional(a2) + e2.IDENT_RE + "\\s*\\(", E2 = [
      "alignas",
      "alignof",
      "and",
      "and_eq",
      "asm",
      "atomic_cancel",
      "atomic_commit",
      "atomic_noexcept",
      "auto",
      "bitand",
      "bitor",
      "break",
      "case",
      "catch",
      "class",
      "co_await",
      "co_return",
      "co_yield",
      "compl",
      "concept",
      "const_cast|10",
      "consteval",
      "constexpr",
      "constinit",
      "continue",
      "decltype",
      "default",
      "delete",
      "do",
      "dynamic_cast|10",
      "else",
      "enum",
      "explicit",
      "export",
      "extern",
      "false",
      "final",
      "for",
      "friend",
      "goto",
      "if",
      "import",
      "inline",
      "module",
      "mutable",
      "namespace",
      "new",
      "noexcept",
      "not",
      "not_eq",
      "nullptr",
      "operator",
      "or",
      "or_eq",
      "override",
      "private",
      "protected",
      "public",
      "reflexpr",
      "register",
      "reinterpret_cast|10",
      "requires",
      "return",
      "sizeof",
      "static_assert",
      "static_cast|10",
      "struct",
      "switch",
      "synchronized",
      "template",
      "this",
      "thread_local",
      "throw",
      "transaction_safe",
      "transaction_safe_dynamic",
      "true",
      "try",
      "typedef",
      "typeid",
      "typename",
      "union",
      "using",
      "virtual",
      "volatile",
      "while",
      "xor",
      "xor_eq"
    ], g2 = [
      "bool",
      "char",
      "char16_t",
      "char32_t",
      "char8_t",
      "double",
      "float",
      "int",
      "long",
      "short",
      "void",
      "wchar_t",
      "unsigned",
      "signed",
      "const",
      "static"
    ], S = [
      "any",
      "auto_ptr",
      "barrier",
      "binary_semaphore",
      "bitset",
      "complex",
      "condition_variable",
      "condition_variable_any",
      "counting_semaphore",
      "deque",
      "false_type",
      "flat_map",
      "flat_set",
      "future",
      "imaginary",
      "initializer_list",
      "istringstream",
      "jthread",
      "latch",
      "lock_guard",
      "multimap",
      "multiset",
      "mutex",
      "optional",
      "ostringstream",
      "packaged_task",
      "pair",
      "promise",
      "priority_queue",
      "queue",
      "recursive_mutex",
      "recursive_timed_mutex",
      "scoped_lock",
      "set",
      "shared_future",
      "shared_lock",
      "shared_mutex",
      "shared_timed_mutex",
      "shared_ptr",
      "stack",
      "string_view",
      "stringstream",
      "timed_mutex",
      "thread",
      "true_type",
      "tuple",
      "unique_lock",
      "unique_ptr",
      "unordered_map",
      "unordered_multimap",
      "unordered_multiset",
      "unordered_set",
      "variant",
      "vector",
      "weak_ptr",
      "wstring",
      "wstring_view"
    ], p2 = [
      "abort",
      "abs",
      "acos",
      "apply",
      "as_const",
      "asin",
      "atan",
      "atan2",
      "calloc",
      "ceil",
      "cerr",
      "cin",
      "clog",
      "cos",
      "cosh",
      "cout",
      "declval",
      "endl",
      "exchange",
      "exit",
      "exp",
      "fabs",
      "floor",
      "fmod",
      "forward",
      "fprintf",
      "fputs",
      "free",
      "frexp",
      "fscanf",
      "future",
      "invoke",
      "isalnum",
      "isalpha",
      "iscntrl",
      "isdigit",
      "isgraph",
      "islower",
      "isprint",
      "ispunct",
      "isspace",
      "isupper",
      "isxdigit",
      "labs",
      "launder",
      "ldexp",
      "log",
      "log10",
      "make_pair",
      "make_shared",
      "make_shared_for_overwrite",
      "make_tuple",
      "make_unique",
      "malloc",
      "memchr",
      "memcmp",
      "memcpy",
      "memset",
      "modf",
      "move",
      "pow",
      "printf",
      "putchar",
      "puts",
      "realloc",
      "scanf",
      "sin",
      "sinh",
      "snprintf",
      "sprintf",
      "sqrt",
      "sscanf",
      "std",
      "stderr",
      "stdin",
      "stdout",
      "strcat",
      "strchr",
      "strcmp",
      "strcpy",
      "strcspn",
      "strlen",
      "strncat",
      "strncmp",
      "strncpy",
      "strpbrk",
      "strrchr",
      "strspn",
      "strstr",
      "swap",
      "tan",
      "tanh",
      "terminate",
      "to_underlying",
      "tolower",
      "toupper",
      "vfprintf",
      "visit",
      "vprintf",
      "vsprintf"
    ], T = {
      type: g2,
      keyword: E2,
      literal: [
        "NULL",
        "false",
        "nullopt",
        "nullptr",
        "true"
      ],
      built_in: ["_Pragma"],
      _type_hints: S
    }, h2 = {
      className: "function.dispatch",
      relevance: 0,
      keywords: {
        // Only for relevance, not highlighting.
        _hint: p2
      },
      begin: n.concat(
        /\b/,
        /(?!decltype)/,
        /(?!if)/,
        /(?!for)/,
        /(?!switch)/,
        /(?!while)/,
        e2.IDENT_RE,
        n.lookahead(/(<[^<>]+>|)\s*\(/)
      )
    }, C2 = [
      h2,
      f2,
      l2,
      i2,
      e2.C_BLOCK_COMMENT_MODE,
      d2,
      _
    ], A2 = {
      // This mode covers expression context where we can't expect a function
      // definition and shouldn't highlight anything that looks like one:
      // `return some()`, `else if()`, `(x*sum(1, 2))`
      variants: [
        {
          begin: /=/,
          end: /;/
        },
        {
          begin: /\(/,
          end: /\)/
        },
        {
          beginKeywords: "new throw return else",
          end: /;/
        }
      ],
      keywords: T,
      contains: C2.concat([
        {
          begin: /\(/,
          end: /\)/,
          keywords: T,
          contains: C2.concat(["self"]),
          relevance: 0
        }
      ]),
      relevance: 0
    }, I2 = {
      className: "function",
      begin: "(" + o2 + "[\\*&\\s]+)+" + c2,
      returnBegin: true,
      end: /[{;=]/,
      excludeEnd: true,
      keywords: T,
      illegal: /[^\w\s\*&:<>.]/,
      contains: [
        {
          // to prevent it from being confused as the function title
          begin: r2,
          keywords: T,
          relevance: 0
        },
        {
          begin: c2,
          returnBegin: true,
          contains: [b],
          relevance: 0
        },
        // needed because we do not have look-behind on the below rule
        // to prevent it from grabbing the final : in a :: pair
        {
          begin: /::/,
          relevance: 0
        },
        // initializers
        {
          begin: /:/,
          endsWithParent: true,
          contains: [
            _,
            d2
          ]
        },
        // allow for multiple declarations, e.g.:
        // extern void f(int), g(char);
        {
          relevance: 0,
          match: /,/
        },
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: T,
          relevance: 0,
          contains: [
            i2,
            e2.C_BLOCK_COMMENT_MODE,
            _,
            d2,
            l2,
            // Count matching parentheses.
            {
              begin: /\(/,
              end: /\)/,
              keywords: T,
              relevance: 0,
              contains: [
                "self",
                i2,
                e2.C_BLOCK_COMMENT_MODE,
                _,
                d2,
                l2
              ]
            }
          ]
        },
        l2,
        i2,
        e2.C_BLOCK_COMMENT_MODE,
        f2
      ]
    };
    return {
      name: "C++",
      aliases: [
        "cc",
        "c++",
        "h++",
        "hpp",
        "hh",
        "hxx",
        "cxx"
      ],
      keywords: T,
      illegal: "</",
      classNameAliases: { "function.dispatch": "built_in" },
      contains: [].concat(
        A2,
        I2,
        h2,
        C2,
        [
          f2,
          {
            // containers: ie, `vector <int> rooms (9);`
            begin: "\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function|flat_map|flat_set)\\s*<(?!<)",
            end: ">",
            keywords: T,
            contains: [
              "self",
              l2
            ]
          },
          {
            begin: e2.IDENT_RE + "::",
            keywords: T
          },
          {
            match: [
              // extra complexity to deal with `enum class` and `enum struct`
              /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
              /\s+/,
              /\w+/
            ],
            className: {
              1: "keyword",
              3: "title.class"
            }
          }
        ]
      )
    };
  }
  return ti = t2, ti;
}
var ni, c_;
function jh() {
  if (c_)
    return ni;
  c_ = 1;
  function t2(e2) {
    const n = "primitive rsc_template", i2 = "group clone ms master location colocation order fencing_topology rsc_ticket acl_target acl_group user role tag xml";
    return {
      name: "crmsh",
      aliases: [
        "crm",
        "pcmk"
      ],
      case_insensitive: true,
      keywords: {
        keyword: "params meta operations op rule attributes utilization read write deny defined not_defined in_range date spec in ref reference attribute type xpath version and or lt gt tag lte gte eq ne \\ number string",
        literal: "Master Started Slave Stopped start promote demote stop monitor true false"
      },
      contains: [
        e2.HASH_COMMENT_MODE,
        {
          beginKeywords: "node",
          starts: {
            end: "\\s*([\\w_-]+:)?",
            starts: {
              className: "title",
              end: "\\s*[\\$\\w_][\\w_-]*"
            }
          }
        },
        {
          beginKeywords: n,
          starts: {
            className: "title",
            end: "\\s*[\\$\\w_][\\w_-]*",
            starts: { end: "\\s*@?[\\w_][\\w_\\.:-]*" }
          }
        },
        {
          begin: "\\b(" + i2.split(" ").join("|") + ")\\s+",
          keywords: i2,
          starts: {
            className: "title",
            end: "[\\$\\w_][\\w_-]*"
          }
        },
        {
          beginKeywords: "property rsc_defaults op_defaults",
          starts: {
            className: "title",
            end: "\\s*([\\w_-]+:)?"
          }
        },
        e2.QUOTE_STRING_MODE,
        {
          className: "meta",
          begin: "(ocf|systemd|service|lsb):[\\w_:-]+",
          relevance: 0
        },
        {
          className: "number",
          begin: "\\b\\d+(\\.\\d+)?(ms|s|h|m)?",
          relevance: 0
        },
        {
          className: "literal",
          begin: "[-]?(infinity|inf)",
          relevance: 0
        },
        {
          className: "attr",
          begin: /([A-Za-z$_#][\w_-]+)=/,
          relevance: 0
        },
        {
          className: "tag",
          begin: "</?",
          end: "/?>",
          relevance: 0
        }
      ]
    };
  }
  return ni = t2, ni;
}
var ri, u_;
function eR() {
  if (u_)
    return ri;
  u_ = 1;
  function t2(e2) {
    const n = "(_?[ui](8|16|32|64|128))?", i2 = "(_?f(32|64))?", r2 = "[a-zA-Z_]\\w*[!?=]?", a2 = "[a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|[=!]~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~|]|//|//=|&[-+*]=?|&\\*\\*|\\[\\][=?]?", s2 = "[A-Za-z_]\\w*(::\\w+)*(\\?|!)?", o2 = {
      $pattern: r2,
      keyword: "abstract alias annotation as as? asm begin break case class def do else elsif end ensure enum extend for fun if include instance_sizeof is_a? lib macro module next nil? of out pointerof private protected rescue responds_to? return require select self sizeof struct super then type typeof union uninitialized unless until verbatim when while with yield __DIR__ __END_LINE__ __FILE__ __LINE__",
      literal: "false nil true"
    }, l2 = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: o2
    }, u2 = {
      // negative-look forward attemps to prevent false matches like:
      // @ident@ or $ident$ that might indicate this is not ruby at all
      className: "variable",
      begin: "(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])(?![A-Za-z])(?![@$?'])"
    }, _ = {
      className: "template-variable",
      variants: [
        {
          begin: "\\{\\{",
          end: "\\}\\}"
        },
        {
          begin: "\\{%",
          end: "%\\}"
        }
      ],
      keywords: o2
    };
    function d2(p2, m2) {
      const R2 = [
        {
          begin: p2,
          end: m2
        }
      ];
      return R2[0].contains = R2, R2;
    }
    const f2 = {
      className: "string",
      contains: [
        e2.BACKSLASH_ESCAPE,
        l2
      ],
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        },
        {
          begin: /`/,
          end: /`/
        },
        {
          begin: "%[Qwi]?\\(",
          end: "\\)",
          contains: d2("\\(", "\\)")
        },
        {
          begin: "%[Qwi]?\\[",
          end: "\\]",
          contains: d2("\\[", "\\]")
        },
        {
          begin: "%[Qwi]?\\{",
          end: /\}/,
          contains: d2(/\{/, /\}/)
        },
        {
          begin: "%[Qwi]?<",
          end: ">",
          contains: d2("<", ">")
        },
        {
          begin: "%[Qwi]?\\|",
          end: "\\|"
        },
        {
          begin: /<<-\w+$/,
          end: /^\s*\w+$/
        }
      ],
      relevance: 0
    }, b = {
      className: "string",
      variants: [
        {
          begin: "%q\\(",
          end: "\\)",
          contains: d2("\\(", "\\)")
        },
        {
          begin: "%q\\[",
          end: "\\]",
          contains: d2("\\[", "\\]")
        },
        {
          begin: "%q\\{",
          end: /\}/,
          contains: d2(/\{/, /\}/)
        },
        {
          begin: "%q<",
          end: ">",
          contains: d2("<", ">")
        },
        {
          begin: "%q\\|",
          end: "\\|"
        },
        {
          begin: /<<-'\w+'$/,
          end: /^\s*\w+$/
        }
      ],
      relevance: 0
    }, c2 = {
      begin: "(?!%\\})(" + e2.RE_STARTERS_RE + "|\\n|\\b(case|if|select|unless|until|when|while)\\b)\\s*",
      keywords: "case if select unless until when while",
      contains: [
        {
          className: "regexp",
          contains: [
            e2.BACKSLASH_ESCAPE,
            l2
          ],
          variants: [
            {
              begin: "//[a-z]*",
              relevance: 0
            },
            {
              begin: "/(?!\\/)",
              end: "/[a-z]*"
            }
          ]
        }
      ],
      relevance: 0
    }, E2 = {
      className: "regexp",
      contains: [
        e2.BACKSLASH_ESCAPE,
        l2
      ],
      variants: [
        {
          begin: "%r\\(",
          end: "\\)",
          contains: d2("\\(", "\\)")
        },
        {
          begin: "%r\\[",
          end: "\\]",
          contains: d2("\\[", "\\]")
        },
        {
          begin: "%r\\{",
          end: /\}/,
          contains: d2(/\{/, /\}/)
        },
        {
          begin: "%r<",
          end: ">",
          contains: d2("<", ">")
        },
        {
          begin: "%r\\|",
          end: "\\|"
        }
      ],
      relevance: 0
    }, g2 = {
      className: "meta",
      begin: "@\\[",
      end: "\\]",
      contains: [e2.inherit(e2.QUOTE_STRING_MODE, { className: "string" })]
    }, S = [
      _,
      f2,
      b,
      E2,
      c2,
      g2,
      u2,
      e2.HASH_COMMENT_MODE,
      {
        className: "class",
        beginKeywords: "class module struct",
        end: "$|;",
        illegal: /=/,
        contains: [
          e2.HASH_COMMENT_MODE,
          e2.inherit(e2.TITLE_MODE, { begin: s2 }),
          {
            // relevance booster for inheritance
            begin: "<"
          }
        ]
      },
      {
        className: "class",
        beginKeywords: "lib enum union",
        end: "$|;",
        illegal: /=/,
        contains: [
          e2.HASH_COMMENT_MODE,
          e2.inherit(e2.TITLE_MODE, { begin: s2 })
        ]
      },
      {
        beginKeywords: "annotation",
        end: "$|;",
        illegal: /=/,
        contains: [
          e2.HASH_COMMENT_MODE,
          e2.inherit(e2.TITLE_MODE, { begin: s2 })
        ],
        relevance: 2
      },
      {
        className: "function",
        beginKeywords: "def",
        end: /\B\b/,
        contains: [
          e2.inherit(e2.TITLE_MODE, {
            begin: a2,
            endsParent: true
          })
        ]
      },
      {
        className: "function",
        beginKeywords: "fun macro",
        end: /\B\b/,
        contains: [
          e2.inherit(e2.TITLE_MODE, {
            begin: a2,
            endsParent: true
          })
        ],
        relevance: 2
      },
      {
        className: "symbol",
        begin: e2.UNDERSCORE_IDENT_RE + "(!|\\?)?:",
        relevance: 0
      },
      {
        className: "symbol",
        begin: ":",
        contains: [
          f2,
          { begin: a2 }
        ],
        relevance: 0
      },
      {
        className: "number",
        variants: [
          { begin: "\\b0b([01_]+)" + n },
          { begin: "\\b0o([0-7_]+)" + n },
          { begin: "\\b0x([A-Fa-f0-9_]+)" + n },
          { begin: "\\b([1-9][0-9_]*[0-9]|[0-9])(\\.[0-9][0-9_]*)?([eE]_?[-+]?[0-9_]*)?" + i2 + "(?!_)" },
          { begin: "\\b([1-9][0-9_]*|0)" + n }
        ],
        relevance: 0
      }
    ];
    return l2.contains = S, _.contains = S.slice(1), {
      name: "Crystal",
      aliases: ["cr"],
      keywords: o2,
      contains: S
    };
  }
  return ri = t2, ri;
}
var ai, __;
function tR() {
  if (__)
    return ai;
  __ = 1;
  function t2(e2) {
    const n = [
      "bool",
      "byte",
      "char",
      "decimal",
      "delegate",
      "double",
      "dynamic",
      "enum",
      "float",
      "int",
      "long",
      "nint",
      "nuint",
      "object",
      "sbyte",
      "short",
      "string",
      "ulong",
      "uint",
      "ushort"
    ], i2 = [
      "public",
      "private",
      "protected",
      "static",
      "internal",
      "protected",
      "abstract",
      "async",
      "extern",
      "override",
      "unsafe",
      "virtual",
      "new",
      "sealed",
      "partial"
    ], r2 = [
      "default",
      "false",
      "null",
      "true"
    ], a2 = [
      "abstract",
      "as",
      "base",
      "break",
      "case",
      "catch",
      "class",
      "const",
      "continue",
      "do",
      "else",
      "event",
      "explicit",
      "extern",
      "finally",
      "fixed",
      "for",
      "foreach",
      "goto",
      "if",
      "implicit",
      "in",
      "interface",
      "internal",
      "is",
      "lock",
      "namespace",
      "new",
      "operator",
      "out",
      "override",
      "params",
      "private",
      "protected",
      "public",
      "readonly",
      "record",
      "ref",
      "return",
      "scoped",
      "sealed",
      "sizeof",
      "stackalloc",
      "static",
      "struct",
      "switch",
      "this",
      "throw",
      "try",
      "typeof",
      "unchecked",
      "unsafe",
      "using",
      "virtual",
      "void",
      "volatile",
      "while"
    ], s2 = [
      "add",
      "alias",
      "and",
      "ascending",
      "args",
      "async",
      "await",
      "by",
      "descending",
      "dynamic",
      "equals",
      "file",
      "from",
      "get",
      "global",
      "group",
      "init",
      "into",
      "join",
      "let",
      "nameof",
      "not",
      "notnull",
      "on",
      "or",
      "orderby",
      "partial",
      "record",
      "remove",
      "required",
      "scoped",
      "select",
      "set",
      "unmanaged",
      "value|0",
      "var",
      "when",
      "where",
      "with",
      "yield"
    ], o2 = {
      keyword: a2.concat(s2),
      built_in: n,
      literal: r2
    }, l2 = e2.inherit(e2.TITLE_MODE, { begin: "[a-zA-Z](\\.?\\w)*" }), u2 = {
      className: "number",
      variants: [
        { begin: "\\b(0b[01']+)" },
        { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)" },
        { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
      ],
      relevance: 0
    }, _ = {
      className: "string",
      begin: /"""("*)(?!")(.|\n)*?"""\1/,
      relevance: 1
    }, d2 = {
      className: "string",
      begin: '@"',
      end: '"',
      contains: [{ begin: '""' }]
    }, f2 = e2.inherit(d2, { illegal: /\n/ }), b = {
      className: "subst",
      begin: /\{/,
      end: /\}/,
      keywords: o2
    }, c2 = e2.inherit(b, { illegal: /\n/ }), E2 = {
      className: "string",
      begin: /\$"/,
      end: '"',
      illegal: /\n/,
      contains: [
        { begin: /\{\{/ },
        { begin: /\}\}/ },
        e2.BACKSLASH_ESCAPE,
        c2
      ]
    }, g2 = {
      className: "string",
      begin: /\$@"/,
      end: '"',
      contains: [
        { begin: /\{\{/ },
        { begin: /\}\}/ },
        { begin: '""' },
        b
      ]
    }, S = e2.inherit(g2, {
      illegal: /\n/,
      contains: [
        { begin: /\{\{/ },
        { begin: /\}\}/ },
        { begin: '""' },
        c2
      ]
    });
    b.contains = [
      g2,
      E2,
      d2,
      e2.APOS_STRING_MODE,
      e2.QUOTE_STRING_MODE,
      u2,
      e2.C_BLOCK_COMMENT_MODE
    ], c2.contains = [
      S,
      E2,
      f2,
      e2.APOS_STRING_MODE,
      e2.QUOTE_STRING_MODE,
      u2,
      e2.inherit(e2.C_BLOCK_COMMENT_MODE, { illegal: /\n/ })
    ];
    const p2 = { variants: [
      _,
      g2,
      E2,
      d2,
      e2.APOS_STRING_MODE,
      e2.QUOTE_STRING_MODE
    ] }, m2 = {
      begin: "<",
      end: ">",
      contains: [
        { beginKeywords: "in out" },
        l2
      ]
    }, R2 = e2.IDENT_RE + "(<" + e2.IDENT_RE + "(\\s*,\\s*" + e2.IDENT_RE + ")*>)?(\\[\\])?", T = {
      // prevents expressions like `@class` from incorrect flagging
      // `class` as a keyword
      begin: "@" + e2.IDENT_RE,
      relevance: 0
    };
    return {
      name: "C#",
      aliases: [
        "cs",
        "c#"
      ],
      keywords: o2,
      illegal: /::/,
      contains: [
        e2.COMMENT(
          "///",
          "$",
          {
            returnBegin: true,
            contains: [
              {
                className: "doctag",
                variants: [
                  {
                    begin: "///",
                    relevance: 0
                  },
                  { begin: "<!--|-->" },
                  {
                    begin: "</?",
                    end: ">"
                  }
                ]
              }
            ]
          }
        ),
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        {
          className: "meta",
          begin: "#",
          end: "$",
          keywords: { keyword: "if else elif endif define undef warning error line region endregion pragma checksum" }
        },
        p2,
        u2,
        {
          beginKeywords: "class interface",
          relevance: 0,
          end: /[{;=]/,
          illegal: /[^\s:,]/,
          contains: [
            { beginKeywords: "where class" },
            l2,
            m2,
            e2.C_LINE_COMMENT_MODE,
            e2.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          beginKeywords: "namespace",
          relevance: 0,
          end: /[{;=]/,
          illegal: /[^\s:]/,
          contains: [
            l2,
            e2.C_LINE_COMMENT_MODE,
            e2.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          beginKeywords: "record",
          relevance: 0,
          end: /[{;=]/,
          illegal: /[^\s:]/,
          contains: [
            l2,
            m2,
            e2.C_LINE_COMMENT_MODE,
            e2.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          // [Attributes("")]
          className: "meta",
          begin: "^\\s*\\[(?=[\\w])",
          excludeBegin: true,
          end: "\\]",
          excludeEnd: true,
          contains: [
            {
              className: "string",
              begin: /"/,
              end: /"/
            }
          ]
        },
        {
          // Expression keywords prevent 'keyword Name(...)' from being
          // recognized as a function definition
          beginKeywords: "new return throw await else",
          relevance: 0
        },
        {
          className: "function",
          begin: "(" + R2 + "\\s+)+" + e2.IDENT_RE + "\\s*(<[^=]+>\\s*)?\\(",
          returnBegin: true,
          end: /\s*[{;=]/,
          excludeEnd: true,
          keywords: o2,
          contains: [
            // prevents these from being highlighted `title`
            {
              beginKeywords: i2.join(" "),
              relevance: 0
            },
            {
              begin: e2.IDENT_RE + "\\s*(<[^=]+>\\s*)?\\(",
              returnBegin: true,
              contains: [
                e2.TITLE_MODE,
                m2
              ],
              relevance: 0
            },
            { match: /\(\)/ },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              excludeBegin: true,
              excludeEnd: true,
              keywords: o2,
              relevance: 0,
              contains: [
                p2,
                u2,
                e2.C_BLOCK_COMMENT_MODE
              ]
            },
            e2.C_LINE_COMMENT_MODE,
            e2.C_BLOCK_COMMENT_MODE
          ]
        },
        T
      ]
    };
  }
  return ai = t2, ai;
}
var ii, d_;
function nR() {
  if (d_)
    return ii;
  d_ = 1;
  function t2(e2) {
    return {
      name: "CSP",
      case_insensitive: false,
      keywords: {
        $pattern: "[a-zA-Z][a-zA-Z0-9_-]*",
        keyword: [
          "base-uri",
          "child-src",
          "connect-src",
          "default-src",
          "font-src",
          "form-action",
          "frame-ancestors",
          "frame-src",
          "img-src",
          "manifest-src",
          "media-src",
          "object-src",
          "plugin-types",
          "report-uri",
          "sandbox",
          "script-src",
          "style-src",
          "trusted-types",
          "unsafe-hashes",
          "worker-src"
        ]
      },
      contains: [
        {
          className: "string",
          begin: "'",
          end: "'"
        },
        {
          className: "attribute",
          begin: "^Content",
          end: ":",
          excludeEnd: true
        }
      ]
    };
  }
  return ii = t2, ii;
}
var oi, p_;
function rR() {
  if (p_)
    return oi;
  p_ = 1;
  const t2 = (u2) => ({
    IMPORTANT: {
      scope: "meta",
      begin: "!important"
    },
    BLOCK_COMMENT: u2.C_BLOCK_COMMENT_MODE,
    HEXCOLOR: {
      scope: "number",
      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
    },
    FUNCTION_DISPATCH: {
      className: "built_in",
      begin: /[\w-]+(?=\()/
    },
    ATTRIBUTE_SELECTOR_MODE: {
      scope: "selector-attr",
      begin: /\[/,
      end: /\]/,
      illegal: "$",
      contains: [
        u2.APOS_STRING_MODE,
        u2.QUOTE_STRING_MODE
      ]
    },
    CSS_NUMBER_MODE: {
      scope: "number",
      begin: u2.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
      relevance: 0
    },
    CSS_VARIABLE: {
      className: "attr",
      begin: /--[A-Za-z_][A-Za-z0-9_-]*/
    }
  }), e2 = [
    "a",
    "abbr",
    "address",
    "article",
    "aside",
    "audio",
    "b",
    "blockquote",
    "body",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "dd",
    "del",
    "details",
    "dfn",
    "div",
    "dl",
    "dt",
    "em",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "main",
    "mark",
    "menu",
    "nav",
    "object",
    "ol",
    "optgroup",
    "option",
    "p",
    "picture",
    "q",
    "quote",
    "samp",
    "section",
    "select",
    "source",
    "span",
    "strong",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "ul",
    "var",
    "video"
  ], n = [
    "defs",
    "g",
    "marker",
    "mask",
    "pattern",
    "svg",
    "switch",
    "symbol",
    "feBlend",
    "feColorMatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feFlood",
    "feGaussianBlur",
    "feImage",
    "feMerge",
    "feMorphology",
    "feOffset",
    "feSpecularLighting",
    "feTile",
    "feTurbulence",
    "linearGradient",
    "radialGradient",
    "stop",
    "circle",
    "ellipse",
    "image",
    "line",
    "path",
    "polygon",
    "polyline",
    "rect",
    "text",
    "use",
    "textPath",
    "tspan",
    "foreignObject",
    "clipPath"
  ], i2 = [
    ...e2,
    ...n
  ], r2 = [
    "any-hover",
    "any-pointer",
    "aspect-ratio",
    "color",
    "color-gamut",
    "color-index",
    "device-aspect-ratio",
    "device-height",
    "device-width",
    "display-mode",
    "forced-colors",
    "grid",
    "height",
    "hover",
    "inverted-colors",
    "monochrome",
    "orientation",
    "overflow-block",
    "overflow-inline",
    "pointer",
    "prefers-color-scheme",
    "prefers-contrast",
    "prefers-reduced-motion",
    "prefers-reduced-transparency",
    "resolution",
    "scan",
    "scripting",
    "update",
    "width",
    // TODO: find a better solution?
    "min-width",
    "max-width",
    "min-height",
    "max-height"
  ].sort().reverse(), a2 = [
    "active",
    "any-link",
    "blank",
    "checked",
    "current",
    "default",
    "defined",
    "dir",
    // dir()
    "disabled",
    "drop",
    "empty",
    "enabled",
    "first",
    "first-child",
    "first-of-type",
    "fullscreen",
    "future",
    "focus",
    "focus-visible",
    "focus-within",
    "has",
    // has()
    "host",
    // host or host()
    "host-context",
    // host-context()
    "hover",
    "indeterminate",
    "in-range",
    "invalid",
    "is",
    // is()
    "lang",
    // lang()
    "last-child",
    "last-of-type",
    "left",
    "link",
    "local-link",
    "not",
    // not()
    "nth-child",
    // nth-child()
    "nth-col",
    // nth-col()
    "nth-last-child",
    // nth-last-child()
    "nth-last-col",
    // nth-last-col()
    "nth-last-of-type",
    //nth-last-of-type()
    "nth-of-type",
    //nth-of-type()
    "only-child",
    "only-of-type",
    "optional",
    "out-of-range",
    "past",
    "placeholder-shown",
    "read-only",
    "read-write",
    "required",
    "right",
    "root",
    "scope",
    "target",
    "target-within",
    "user-invalid",
    "valid",
    "visited",
    "where"
    // where()
  ].sort().reverse(), s2 = [
    "after",
    "backdrop",
    "before",
    "cue",
    "cue-region",
    "first-letter",
    "first-line",
    "grammar-error",
    "marker",
    "part",
    "placeholder",
    "selection",
    "slotted",
    "spelling-error"
  ].sort().reverse(), o2 = [
    "accent-color",
    "align-content",
    "align-items",
    "align-self",
    "alignment-baseline",
    "all",
    "anchor-name",
    "animation",
    "animation-composition",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-range",
    "animation-range-end",
    "animation-range-start",
    "animation-timeline",
    "animation-timing-function",
    "appearance",
    "aspect-ratio",
    "backdrop-filter",
    "backface-visibility",
    "background",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-position-x",
    "background-position-y",
    "background-repeat",
    "background-size",
    "baseline-shift",
    "block-size",
    "border",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-collapse",
    "border-color",
    "border-end-end-radius",
    "border-end-start-radius",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-start-end-radius",
    "border-start-start-radius",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "bottom",
    "box-align",
    "box-decoration-break",
    "box-direction",
    "box-flex",
    "box-flex-group",
    "box-lines",
    "box-ordinal-group",
    "box-orient",
    "box-pack",
    "box-shadow",
    "box-sizing",
    "break-after",
    "break-before",
    "break-inside",
    "caption-side",
    "caret-color",
    "clear",
    "clip",
    "clip-path",
    "clip-rule",
    "color",
    "color-interpolation",
    "color-interpolation-filters",
    "color-profile",
    "color-rendering",
    "color-scheme",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columns",
    "contain",
    "contain-intrinsic-block-size",
    "contain-intrinsic-height",
    "contain-intrinsic-inline-size",
    "contain-intrinsic-size",
    "contain-intrinsic-width",
    "container",
    "container-name",
    "container-type",
    "content",
    "content-visibility",
    "counter-increment",
    "counter-reset",
    "counter-set",
    "cue",
    "cue-after",
    "cue-before",
    "cursor",
    "cx",
    "cy",
    "direction",
    "display",
    "dominant-baseline",
    "empty-cells",
    "enable-background",
    "field-sizing",
    "fill",
    "fill-opacity",
    "fill-rule",
    "filter",
    "flex",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-shrink",
    "flex-wrap",
    "float",
    "flood-color",
    "flood-opacity",
    "flow",
    "font",
    "font-display",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-optical-sizing",
    "font-palette",
    "font-size",
    "font-size-adjust",
    "font-smooth",
    "font-smoothing",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-synthesis-position",
    "font-synthesis-small-caps",
    "font-synthesis-style",
    "font-synthesis-weight",
    "font-variant",
    "font-variant-alternates",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-emoji",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-variation-settings",
    "font-weight",
    "forced-color-adjust",
    "gap",
    "glyph-orientation-horizontal",
    "glyph-orientation-vertical",
    "grid",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-start",
    "grid-gap",
    "grid-row",
    "grid-row-end",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "hanging-punctuation",
    "height",
    "hyphenate-character",
    "hyphenate-limit-chars",
    "hyphens",
    "icon",
    "image-orientation",
    "image-rendering",
    "image-resolution",
    "ime-mode",
    "initial-letter",
    "initial-letter-align",
    "inline-size",
    "inset",
    "inset-area",
    "inset-block",
    "inset-block-end",
    "inset-block-start",
    "inset-inline",
    "inset-inline-end",
    "inset-inline-start",
    "isolation",
    "justify-content",
    "justify-items",
    "justify-self",
    "kerning",
    "left",
    "letter-spacing",
    "lighting-color",
    "line-break",
    "line-height",
    "line-height-step",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "margin",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "margin-trim",
    "marker",
    "marker-end",
    "marker-mid",
    "marker-start",
    "marks",
    "mask",
    "mask-border",
    "mask-border-mode",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-border-slice",
    "mask-border-source",
    "mask-border-width",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "masonry-auto-flow",
    "math-depth",
    "math-shift",
    "math-style",
    "max-block-size",
    "max-height",
    "max-inline-size",
    "max-width",
    "min-block-size",
    "min-height",
    "min-inline-size",
    "min-width",
    "mix-blend-mode",
    "nav-down",
    "nav-index",
    "nav-left",
    "nav-right",
    "nav-up",
    "none",
    "normal",
    "object-fit",
    "object-position",
    "offset",
    "offset-anchor",
    "offset-distance",
    "offset-path",
    "offset-position",
    "offset-rotate",
    "opacity",
    "order",
    "orphans",
    "outline",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "overflow",
    "overflow-anchor",
    "overflow-block",
    "overflow-clip-margin",
    "overflow-inline",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "overlay",
    "overscroll-behavior",
    "overscroll-behavior-block",
    "overscroll-behavior-inline",
    "overscroll-behavior-x",
    "overscroll-behavior-y",
    "padding",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "page",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "paint-order",
    "pause",
    "pause-after",
    "pause-before",
    "perspective",
    "perspective-origin",
    "place-content",
    "place-items",
    "place-self",
    "pointer-events",
    "position",
    "position-anchor",
    "position-visibility",
    "print-color-adjust",
    "quotes",
    "r",
    "resize",
    "rest",
    "rest-after",
    "rest-before",
    "right",
    "rotate",
    "row-gap",
    "ruby-align",
    "ruby-position",
    "scale",
    "scroll-behavior",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-stop",
    "scroll-snap-type",
    "scroll-timeline",
    "scroll-timeline-axis",
    "scroll-timeline-name",
    "scrollbar-color",
    "scrollbar-gutter",
    "scrollbar-width",
    "shape-image-threshold",
    "shape-margin",
    "shape-outside",
    "shape-rendering",
    "speak",
    "speak-as",
    "src",
    // @font-face
    "stop-color",
    "stop-opacity",
    "stroke",
    "stroke-dasharray",
    "stroke-dashoffset",
    "stroke-linecap",
    "stroke-linejoin",
    "stroke-miterlimit",
    "stroke-opacity",
    "stroke-width",
    "tab-size",
    "table-layout",
    "text-align",
    "text-align-all",
    "text-align-last",
    "text-anchor",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-line",
    "text-decoration-skip",
    "text-decoration-skip-ink",
    "text-decoration-style",
    "text-decoration-thickness",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-style",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-size-adjust",
    "text-transform",
    "text-underline-offset",
    "text-underline-position",
    "text-wrap",
    "text-wrap-mode",
    "text-wrap-style",
    "timeline-scope",
    "top",
    "touch-action",
    "transform",
    "transform-box",
    "transform-origin",
    "transform-style",
    "transition",
    "transition-behavior",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "translate",
    "unicode-bidi",
    "user-modify",
    "user-select",
    "vector-effect",
    "vertical-align",
    "view-timeline",
    "view-timeline-axis",
    "view-timeline-inset",
    "view-timeline-name",
    "view-transition-name",
    "visibility",
    "voice-balance",
    "voice-duration",
    "voice-family",
    "voice-pitch",
    "voice-range",
    "voice-rate",
    "voice-stress",
    "voice-volume",
    "white-space",
    "white-space-collapse",
    "widows",
    "width",
    "will-change",
    "word-break",
    "word-spacing",
    "word-wrap",
    "writing-mode",
    "x",
    "y",
    "z-index",
    "zoom"
  ].sort().reverse();
  function l2(u2) {
    const _ = u2.regex, d2 = t2(u2), f2 = { begin: /-(webkit|moz|ms|o)-(?=[a-z])/ }, b = "and or not only", c2 = /@-?\w[\w]*(-\w+)*/, E2 = "[a-zA-Z-][a-zA-Z0-9_-]*", g2 = [
      u2.APOS_STRING_MODE,
      u2.QUOTE_STRING_MODE
    ];
    return {
      name: "CSS",
      case_insensitive: true,
      illegal: /[=|'\$]/,
      keywords: { keyframePosition: "from to" },
      classNameAliases: {
        // for visual continuity with `tag {}` and because we
        // don't have a great class for this?
        keyframePosition: "selector-tag"
      },
      contains: [
        d2.BLOCK_COMMENT,
        f2,
        // to recognize keyframe 40% etc which are outside the scope of our
        // attribute value mode
        d2.CSS_NUMBER_MODE,
        {
          className: "selector-id",
          begin: /#[A-Za-z0-9_-]+/,
          relevance: 0
        },
        {
          className: "selector-class",
          begin: "\\." + E2,
          relevance: 0
        },
        d2.ATTRIBUTE_SELECTOR_MODE,
        {
          className: "selector-pseudo",
          variants: [
            { begin: ":(" + a2.join("|") + ")" },
            { begin: ":(:)?(" + s2.join("|") + ")" }
          ]
        },
        // we may actually need this (12/2020)
        // { // pseudo-selector params
        //   begin: /\(/,
        //   end: /\)/,
        //   contains: [ hljs.CSS_NUMBER_MODE ]
        // },
        d2.CSS_VARIABLE,
        {
          className: "attribute",
          begin: "\\b(" + o2.join("|") + ")\\b"
        },
        // attribute values
        {
          begin: /:/,
          end: /[;}{]/,
          contains: [
            d2.BLOCK_COMMENT,
            d2.HEXCOLOR,
            d2.IMPORTANT,
            d2.CSS_NUMBER_MODE,
            ...g2,
            // needed to highlight these as strings and to avoid issues with
            // illegal characters that might be inside urls that would tigger the
            // languages illegal stack
            {
              begin: /(url|data-uri)\(/,
              end: /\)/,
              relevance: 0,
              // from keywords
              keywords: { built_in: "url data-uri" },
              contains: [
                ...g2,
                {
                  className: "string",
                  // any character other than `)` as in `url()` will be the start
                  // of a string, which ends with `)` (from the parent mode)
                  begin: /[^)]/,
                  endsWithParent: true,
                  excludeEnd: true
                }
              ]
            },
            d2.FUNCTION_DISPATCH
          ]
        },
        {
          begin: _.lookahead(/@/),
          end: "[{;]",
          relevance: 0,
          illegal: /:/,
          // break on Less variables @var: ...
          contains: [
            {
              className: "keyword",
              begin: c2
            },
            {
              begin: /\s/,
              endsWithParent: true,
              excludeEnd: true,
              relevance: 0,
              keywords: {
                $pattern: /[a-z-]+/,
                keyword: b,
                attribute: r2.join(" ")
              },
              contains: [
                {
                  begin: /[a-z-]+(?=:)/,
                  className: "attribute"
                },
                ...g2,
                d2.CSS_NUMBER_MODE
              ]
            }
          ]
        },
        {
          className: "selector-tag",
          begin: "\\b(" + i2.join("|") + ")\\b"
        }
      ]
    };
  }
  return oi = l2, oi;
}
var si, m_;
function aR() {
  if (m_)
    return si;
  m_ = 1;
  function t2(e2) {
    const n = {
      $pattern: e2.UNDERSCORE_IDENT_RE,
      keyword: "abstract alias align asm assert auto body break byte case cast catch class const continue debug default delete deprecated do else enum export extern final finally for foreach foreach_reverse|10 goto if immutable import in inout int interface invariant is lazy macro mixin module new nothrow out override package pragma private protected public pure ref return scope shared static struct super switch synchronized template this throw try typedef typeid typeof union unittest version void volatile while with __FILE__ __LINE__ __gshared|10 __thread __traits __DATE__ __EOF__ __TIME__ __TIMESTAMP__ __VENDOR__ __VERSION__",
      built_in: "bool cdouble cent cfloat char creal dchar delegate double dstring float function idouble ifloat ireal long real short string ubyte ucent uint ulong ushort wchar wstring",
      literal: "false null true"
    }, i2 = "(0|[1-9][\\d_]*)", r2 = "(0|[1-9][\\d_]*|\\d[\\d_]*|[\\d_]+?\\d)", a2 = "0[bB][01_]+", s2 = "([\\da-fA-F][\\da-fA-F_]*|_[\\da-fA-F][\\da-fA-F_]*)", o2 = "0[xX]" + s2, l2 = "([eE][+-]?" + r2 + ")", u2 = "(" + r2 + "(\\.\\d*|" + l2 + ")|\\d+\\." + r2 + "|\\." + i2 + l2 + "?)", _ = "(0[xX](" + s2 + "\\." + s2 + "|\\.?" + s2 + ")[pP][+-]?" + r2 + ")", d2 = "(" + i2 + "|" + a2 + "|" + o2 + ")", f2 = "(" + _ + "|" + u2 + ")", b = `\\\\(['"\\?\\\\abfnrtv]|u[\\dA-Fa-f]{4}|[0-7]{1,3}|x[\\dA-Fa-f]{2}|U[\\dA-Fa-f]{8})|&[a-zA-Z\\d]{2,};`, c2 = {
      className: "number",
      begin: "\\b" + d2 + "(L|u|U|Lu|LU|uL|UL)?",
      relevance: 0
    }, E2 = {
      className: "number",
      begin: "\\b(" + f2 + "([fF]|L|i|[fF]i|Li)?|" + d2 + "(i|[fF]i|Li))",
      relevance: 0
    }, g2 = {
      className: "string",
      begin: "'(" + b + "|.)",
      end: "'",
      illegal: "."
    }, p2 = {
      className: "string",
      begin: '"',
      contains: [{
        begin: b,
        relevance: 0
      }],
      end: '"[cwd]?'
    }, m2 = {
      className: "string",
      begin: '[rq]"',
      end: '"[cwd]?',
      relevance: 5
    }, R2 = {
      className: "string",
      begin: "`",
      end: "`[cwd]?"
    }, T = {
      className: "string",
      begin: 'x"[\\da-fA-F\\s\\n\\r]*"[cwd]?',
      relevance: 10
    }, h2 = {
      className: "string",
      begin: 'q"\\{',
      end: '\\}"'
    }, C2 = {
      className: "meta",
      begin: "^#!",
      end: "$",
      relevance: 5
    }, A2 = {
      className: "meta",
      begin: "#(line)",
      end: "$",
      relevance: 5
    }, I2 = {
      className: "keyword",
      begin: "@[a-zA-Z_][a-zA-Z_\\d]*"
    }, v2 = e2.COMMENT(
      "\\/\\+",
      "\\+\\/",
      {
        contains: ["self"],
        relevance: 10
      }
    );
    return {
      name: "D",
      keywords: n,
      contains: [
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        v2,
        T,
        p2,
        m2,
        R2,
        h2,
        E2,
        c2,
        g2,
        C2,
        A2,
        I2
      ]
    };
  }
  return si = t2, si;
}
var li, E_;
function iR() {
  if (E_)
    return li;
  E_ = 1;
  function t2(e2) {
    const n = e2.regex, i2 = {
      begin: /<\/?[A-Za-z_]/,
      end: ">",
      subLanguage: "xml",
      relevance: 0
    }, r2 = {
      begin: "^[-\\*]{3,}",
      end: "$"
    }, a2 = {
      className: "code",
      variants: [
        // TODO: fix to allow these to work with sublanguage also
        { begin: "(`{3,})[^`](.|\\n)*?\\1`*[ ]*" },
        { begin: "(~{3,})[^~](.|\\n)*?\\1~*[ ]*" },
        // needed to allow markdown as a sublanguage to work
        {
          begin: "```",
          end: "```+[ ]*$"
        },
        {
          begin: "~~~",
          end: "~~~+[ ]*$"
        },
        { begin: "`.+?`" },
        {
          begin: "(?=^( {4}|\\t))",
          // use contains to gobble up multiple lines to allow the block to be whatever size
          // but only have a single open/close tag vs one per line
          contains: [
            {
              begin: "^( {4}|\\t)",
              end: "(\\n)$"
            }
          ],
          relevance: 0
        }
      ]
    }, s2 = {
      className: "bullet",
      begin: "^[ 	]*([*+-]|(\\d+\\.))(?=\\s+)",
      end: "\\s+",
      excludeEnd: true
    }, o2 = {
      begin: /^\[[^\n]+\]:/,
      returnBegin: true,
      contains: [
        {
          className: "symbol",
          begin: /\[/,
          end: /\]/,
          excludeBegin: true,
          excludeEnd: true
        },
        {
          className: "link",
          begin: /:\s*/,
          end: /$/,
          excludeBegin: true
        }
      ]
    }, l2 = /[A-Za-z][A-Za-z0-9+.-]*/, u2 = {
      variants: [
        // too much like nested array access in so many languages
        // to have any real relevance
        {
          begin: /\[.+?\]\[.*?\]/,
          relevance: 0
        },
        // popular internet URLs
        {
          begin: /\[.+?\]\(((data|javascript|mailto):|(?:http|ftp)s?:\/\/).*?\)/,
          relevance: 2
        },
        {
          begin: n.concat(/\[.+?\]\(/, l2, /:\/\/.*?\)/),
          relevance: 2
        },
        // relative urls
        {
          begin: /\[.+?\]\([./?&#].*?\)/,
          relevance: 1
        },
        // whatever else, lower relevance (might not be a link at all)
        {
          begin: /\[.*?\]\(.*?\)/,
          relevance: 0
        }
      ],
      returnBegin: true,
      contains: [
        {
          // empty strings for alt or link text
          match: /\[(?=\])/
        },
        {
          className: "string",
          relevance: 0,
          begin: "\\[",
          end: "\\]",
          excludeBegin: true,
          returnEnd: true
        },
        {
          className: "link",
          relevance: 0,
          begin: "\\]\\(",
          end: "\\)",
          excludeBegin: true,
          excludeEnd: true
        },
        {
          className: "symbol",
          relevance: 0,
          begin: "\\]\\[",
          end: "\\]",
          excludeBegin: true,
          excludeEnd: true
        }
      ]
    }, _ = {
      className: "strong",
      contains: [],
      // defined later
      variants: [
        {
          begin: /_{2}(?!\s)/,
          end: /_{2}/
        },
        {
          begin: /\*{2}(?!\s)/,
          end: /\*{2}/
        }
      ]
    }, d2 = {
      className: "emphasis",
      contains: [],
      // defined later
      variants: [
        {
          begin: /\*(?![*\s])/,
          end: /\*/
        },
        {
          begin: /_(?![_\s])/,
          end: /_/,
          relevance: 0
        }
      ]
    }, f2 = e2.inherit(_, { contains: [] }), b = e2.inherit(d2, { contains: [] });
    _.contains.push(b), d2.contains.push(f2);
    let c2 = [
      i2,
      u2
    ];
    return [
      _,
      d2,
      f2,
      b
    ].forEach((p2) => {
      p2.contains = p2.contains.concat(c2);
    }), c2 = c2.concat(_, d2), {
      name: "Markdown",
      aliases: [
        "md",
        "mkdown",
        "mkd"
      ],
      contains: [
        {
          className: "section",
          variants: [
            {
              begin: "^#{1,6}",
              end: "$",
              contains: c2
            },
            {
              begin: "(?=^.+?\\n[=-]{2,}$)",
              contains: [
                { begin: "^[=-]*$" },
                {
                  begin: "^",
                  end: "\\n",
                  contains: c2
                }
              ]
            }
          ]
        },
        i2,
        s2,
        _,
        d2,
        {
          className: "quote",
          begin: "^>\\s+",
          contains: c2,
          end: "$"
        },
        a2,
        r2,
        u2,
        o2,
        {
          //https://spec.commonmark.org/0.31.2/#entity-references
          scope: "literal",
          match: /&([a-zA-Z0-9]+|#[0-9]{1,7}|#[Xx][0-9a-fA-F]{1,6});/
        }
      ]
    };
  }
  return li = t2, li;
}
var ci, g_;
function oR() {
  if (g_)
    return ci;
  g_ = 1;
  function t2(e2) {
    const n = {
      className: "subst",
      variants: [{ begin: "\\$[A-Za-z0-9_]+" }]
    }, i2 = {
      className: "subst",
      variants: [
        {
          begin: /\$\{/,
          end: /\}/
        }
      ],
      keywords: "true false null this is new super"
    }, r2 = {
      className: "number",
      relevance: 0,
      variants: [
        { match: /\b[0-9][0-9_]*(\.[0-9][0-9_]*)?([eE][+-]?[0-9][0-9_]*)?\b/ },
        { match: /\b0[xX][0-9A-Fa-f][0-9A-Fa-f_]*\b/ }
      ]
    }, a2 = {
      className: "string",
      variants: [
        {
          begin: "r'''",
          end: "'''"
        },
        {
          begin: 'r"""',
          end: '"""'
        },
        {
          begin: "r'",
          end: "'",
          illegal: "\\n"
        },
        {
          begin: 'r"',
          end: '"',
          illegal: "\\n"
        },
        {
          begin: "'''",
          end: "'''",
          contains: [
            e2.BACKSLASH_ESCAPE,
            n,
            i2
          ]
        },
        {
          begin: '"""',
          end: '"""',
          contains: [
            e2.BACKSLASH_ESCAPE,
            n,
            i2
          ]
        },
        {
          begin: "'",
          end: "'",
          illegal: "\\n",
          contains: [
            e2.BACKSLASH_ESCAPE,
            n,
            i2
          ]
        },
        {
          begin: '"',
          end: '"',
          illegal: "\\n",
          contains: [
            e2.BACKSLASH_ESCAPE,
            n,
            i2
          ]
        }
      ]
    };
    i2.contains = [
      r2,
      a2
    ];
    const s2 = [
      // dart:core
      "Comparable",
      "DateTime",
      "Duration",
      "Function",
      "Iterable",
      "Iterator",
      "List",
      "Map",
      "Match",
      "Object",
      "Pattern",
      "RegExp",
      "Set",
      "Stopwatch",
      "String",
      "StringBuffer",
      "StringSink",
      "Symbol",
      "Type",
      "Uri",
      "bool",
      "double",
      "int",
      "num",
      // dart:html
      "Element",
      "ElementList"
    ], o2 = s2.map((_) => `${_}?`);
    return {
      name: "Dart",
      keywords: {
        keyword: [
          "abstract",
          "as",
          "assert",
          "async",
          "await",
          "base",
          "break",
          "case",
          "catch",
          "class",
          "const",
          "continue",
          "covariant",
          "default",
          "deferred",
          "do",
          "dynamic",
          "else",
          "enum",
          "export",
          "extends",
          "extension",
          "external",
          "factory",
          "false",
          "final",
          "finally",
          "for",
          "Function",
          "get",
          "hide",
          "if",
          "implements",
          "import",
          "in",
          "interface",
          "is",
          "late",
          "library",
          "mixin",
          "new",
          "null",
          "on",
          "operator",
          "part",
          "required",
          "rethrow",
          "return",
          "sealed",
          "set",
          "show",
          "static",
          "super",
          "switch",
          "sync",
          "this",
          "throw",
          "true",
          "try",
          "typedef",
          "var",
          "void",
          "when",
          "while",
          "with",
          "yield"
        ],
        built_in: s2.concat(o2).concat([
          // dart:core
          "Never",
          "Null",
          "dynamic",
          "print",
          // dart:html
          "document",
          "querySelector",
          "querySelectorAll",
          "window"
        ]),
        $pattern: /[A-Za-z][A-Za-z0-9_]*\??/
      },
      contains: [
        a2,
        e2.COMMENT(
          /\/\*\*(?!\/)/,
          /\*\//,
          {
            subLanguage: "markdown",
            relevance: 0
          }
        ),
        e2.COMMENT(
          /\/{3,} ?/,
          /$/,
          { contains: [
            {
              subLanguage: "markdown",
              begin: ".",
              end: "$",
              relevance: 0
            }
          ] }
        ),
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        {
          className: "class",
          beginKeywords: "class interface",
          end: /\{/,
          excludeEnd: true,
          contains: [
            { beginKeywords: "extends implements" },
            e2.UNDERSCORE_TITLE_MODE
          ]
        },
        r2,
        {
          className: "meta",
          begin: "@[A-Za-z]+"
        },
        {
          begin: "=>"
          // No markup, just a relevance booster
        }
      ]
    };
  }
  return ci = t2, ci;
}
var ui, f_;
function sR() {
  if (f_)
    return ui;
  f_ = 1;
  function t2(e2) {
    const n = [
      "exports",
      "register",
      "file",
      "shl",
      "array",
      "record",
      "property",
      "for",
      "mod",
      "while",
      "set",
      "ally",
      "label",
      "uses",
      "raise",
      "not",
      "stored",
      "class",
      "safecall",
      "var",
      "interface",
      "or",
      "private",
      "static",
      "exit",
      "index",
      "inherited",
      "to",
      "else",
      "stdcall",
      "override",
      "shr",
      "asm",
      "far",
      "resourcestring",
      "finalization",
      "packed",
      "virtual",
      "out",
      "and",
      "protected",
      "library",
      "do",
      "xorwrite",
      "goto",
      "near",
      "function",
      "end",
      "div",
      "overload",
      "object",
      "unit",
      "begin",
      "string",
      "on",
      "inline",
      "repeat",
      "until",
      "destructor",
      "write",
      "message",
      "program",
      "with",
      "read",
      "initialization",
      "except",
      "default",
      "nil",
      "if",
      "case",
      "cdecl",
      "in",
      "downto",
      "threadvar",
      "of",
      "try",
      "pascal",
      "const",
      "external",
      "constructor",
      "type",
      "public",
      "then",
      "implementation",
      "finally",
      "published",
      "procedure",
      "absolute",
      "reintroduce",
      "operator",
      "as",
      "is",
      "abstract",
      "alias",
      "assembler",
      "bitpacked",
      "break",
      "continue",
      "cppdecl",
      "cvar",
      "enumerator",
      "experimental",
      "platform",
      "deprecated",
      "unimplemented",
      "dynamic",
      "export",
      "far16",
      "forward",
      "generic",
      "helper",
      "implements",
      "interrupt",
      "iochecks",
      "local",
      "name",
      "nodefault",
      "noreturn",
      "nostackframe",
      "oldfpccall",
      "otherwise",
      "saveregisters",
      "softfloat",
      "specialize",
      "strict",
      "unaligned",
      "varargs"
    ], i2 = [
      e2.C_LINE_COMMENT_MODE,
      e2.COMMENT(/\{/, /\}/, { relevance: 0 }),
      e2.COMMENT(/\(\*/, /\*\)/, { relevance: 10 })
    ], r2 = {
      className: "meta",
      variants: [
        {
          begin: /\{\$/,
          end: /\}/
        },
        {
          begin: /\(\*\$/,
          end: /\*\)/
        }
      ]
    }, a2 = {
      className: "string",
      begin: /'/,
      end: /'/,
      contains: [{ begin: /''/ }]
    }, s2 = {
      className: "number",
      relevance: 0,
      // Source: https://www.freepascal.org/docs-html/ref/refse6.html
      variants: [
        {
          // Regular numbers, e.g., 123, 123.456.
          match: /\b\d[\d_]*(\.\d[\d_]*)?/
        },
        {
          // Hexadecimal notation, e.g., $7F.
          match: /\$[\dA-Fa-f_]+/
        },
        {
          // Hexadecimal literal with no digits
          match: /\$/,
          relevance: 0
        },
        {
          // Octal notation, e.g., &42.
          match: /&[0-7][0-7_]*/
        },
        {
          // Binary notation, e.g., %1010.
          match: /%[01_]+/
        },
        {
          // Binary literal with no digits
          match: /%/,
          relevance: 0
        }
      ]
    }, o2 = {
      className: "string",
      variants: [
        { match: /#\d[\d_]*/ },
        { match: /#\$[\dA-Fa-f][\dA-Fa-f_]*/ },
        { match: /#&[0-7][0-7_]*/ },
        { match: /#%[01][01_]*/ }
      ]
    }, l2 = {
      begin: e2.IDENT_RE + "\\s*=\\s*class\\s*\\(",
      returnBegin: true,
      contains: [e2.TITLE_MODE]
    }, u2 = {
      className: "function",
      beginKeywords: "function constructor destructor procedure",
      end: /[:;]/,
      keywords: "function constructor|10 destructor|10 procedure|10",
      contains: [
        e2.TITLE_MODE,
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: n,
          contains: [
            a2,
            o2,
            r2
          ].concat(i2)
        },
        r2
      ].concat(i2)
    };
    return {
      name: "Delphi",
      aliases: [
        "dpr",
        "dfm",
        "pas",
        "pascal"
      ],
      case_insensitive: true,
      keywords: n,
      illegal: /"|\$[G-Zg-z]|\/\*|<\/|\|/,
      contains: [
        a2,
        o2,
        s2,
        l2,
        u2,
        r2
      ].concat(i2)
    };
  }
  return ui = t2, ui;
}
var _i, S_;
function lR() {
  if (S_)
    return _i;
  S_ = 1;
  function t2(e2) {
    const n = e2.regex;
    return {
      name: "Diff",
      aliases: ["patch"],
      contains: [
        {
          className: "meta",
          relevance: 10,
          match: n.either(
            /^@@ +-\d+,\d+ +\+\d+,\d+ +@@/,
            /^\*\*\* +\d+,\d+ +\*\*\*\*$/,
            /^--- +\d+,\d+ +----$/
          )
        },
        {
          className: "comment",
          variants: [
            {
              begin: n.either(
                /Index: /,
                /^index/,
                /={3,}/,
                /^-{3}/,
                /^\*{3} /,
                /^\+{3}/,
                /^diff --git/
              ),
              end: /$/
            },
            { match: /^\*{15}$/ }
          ]
        },
        {
          className: "addition",
          begin: /^\+/,
          end: /$/
        },
        {
          className: "deletion",
          begin: /^-/,
          end: /$/
        },
        {
          className: "addition",
          begin: /^!/,
          end: /$/
        }
      ]
    };
  }
  return _i = t2, _i;
}
var di, b_;
function cR() {
  if (b_)
    return di;
  b_ = 1;
  function t2(e2) {
    const n = {
      begin: /\|[A-Za-z]+:?/,
      keywords: { name: "truncatewords removetags linebreaksbr yesno get_digit timesince random striptags filesizeformat escape linebreaks length_is ljust rjust cut urlize fix_ampersands title floatformat capfirst pprint divisibleby add make_list unordered_list urlencode timeuntil urlizetrunc wordcount stringformat linenumbers slice date dictsort dictsortreversed default_if_none pluralize lower join center default truncatewords_html upper length phone2numeric wordwrap time addslashes slugify first escapejs force_escape iriencode last safe safeseq truncatechars localize unlocalize localtime utc timezone" },
      contains: [
        e2.QUOTE_STRING_MODE,
        e2.APOS_STRING_MODE
      ]
    };
    return {
      name: "Django",
      aliases: ["jinja"],
      case_insensitive: true,
      subLanguage: "xml",
      contains: [
        e2.COMMENT(/\{%\s*comment\s*%\}/, /\{%\s*endcomment\s*%\}/),
        e2.COMMENT(/\{#/, /#\}/),
        {
          className: "template-tag",
          begin: /\{%/,
          end: /%\}/,
          contains: [
            {
              className: "name",
              begin: /\w+/,
              keywords: { name: "comment endcomment load templatetag ifchanged endifchanged if endif firstof for endfor ifnotequal endifnotequal widthratio extends include spaceless endspaceless regroup ifequal endifequal ssi now with cycle url filter endfilter debug block endblock else autoescape endautoescape csrf_token empty elif endwith static trans blocktrans endblocktrans get_static_prefix get_media_prefix plural get_current_language language get_available_languages get_current_language_bidi get_language_info get_language_info_list localize endlocalize localtime endlocaltime timezone endtimezone get_current_timezone verbatim" },
              starts: {
                endsWithParent: true,
                keywords: "in by as",
                contains: [n],
                relevance: 0
              }
            }
          ]
        },
        {
          className: "template-variable",
          begin: /\{\{/,
          end: /\}\}/,
          contains: [n]
        }
      ]
    };
  }
  return di = t2, di;
}
var pi, T_;
function uR() {
  if (T_)
    return pi;
  T_ = 1;
  function t2(e2) {
    return {
      name: "DNS Zone",
      aliases: [
        "bind",
        "zone"
      ],
      keywords: [
        "IN",
        "A",
        "AAAA",
        "AFSDB",
        "APL",
        "CAA",
        "CDNSKEY",
        "CDS",
        "CERT",
        "CNAME",
        "DHCID",
        "DLV",
        "DNAME",
        "DNSKEY",
        "DS",
        "HIP",
        "IPSECKEY",
        "KEY",
        "KX",
        "LOC",
        "MX",
        "NAPTR",
        "NS",
        "NSEC",
        "NSEC3",
        "NSEC3PARAM",
        "PTR",
        "RRSIG",
        "RP",
        "SIG",
        "SOA",
        "SRV",
        "SSHFP",
        "TA",
        "TKEY",
        "TLSA",
        "TSIG",
        "TXT"
      ],
      contains: [
        e2.COMMENT(";", "$", { relevance: 0 }),
        {
          className: "meta",
          begin: /^\$(TTL|GENERATE|INCLUDE|ORIGIN)\b/
        },
        // IPv6
        {
          className: "number",
          begin: "((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))\\b"
        },
        // IPv4
        {
          className: "number",
          begin: "((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\b"
        },
        e2.inherit(e2.NUMBER_MODE, { begin: /\b\d+[dhwm]?/ })
      ]
    };
  }
  return pi = t2, pi;
}
var mi, h_;
function _R() {
  if (h_)
    return mi;
  h_ = 1;
  function t2(e2) {
    return {
      name: "Dockerfile",
      aliases: ["docker"],
      case_insensitive: true,
      keywords: [
        "from",
        "maintainer",
        "expose",
        "env",
        "arg",
        "user",
        "onbuild",
        "stopsignal"
      ],
      contains: [
        e2.HASH_COMMENT_MODE,
        e2.APOS_STRING_MODE,
        e2.QUOTE_STRING_MODE,
        e2.NUMBER_MODE,
        {
          beginKeywords: "run cmd entrypoint volume add copy workdir label healthcheck shell",
          starts: {
            end: /[^\\]$/,
            subLanguage: "bash"
          }
        }
      ],
      illegal: "</"
    };
  }
  return mi = t2, mi;
}
var Ei, R_;
function dR() {
  if (R_)
    return Ei;
  R_ = 1;
  function t2(e2) {
    const n = e2.COMMENT(
      /^\s*@?rem\b/,
      /$/,
      { relevance: 10 }
    );
    return {
      name: "Batch file (DOS)",
      aliases: [
        "bat",
        "cmd"
      ],
      case_insensitive: true,
      illegal: /\/\*/,
      keywords: {
        keyword: [
          "if",
          "else",
          "goto",
          "for",
          "in",
          "do",
          "call",
          "exit",
          "not",
          "exist",
          "errorlevel",
          "defined",
          "equ",
          "neq",
          "lss",
          "leq",
          "gtr",
          "geq"
        ],
        built_in: [
          "prn",
          "nul",
          "lpt3",
          "lpt2",
          "lpt1",
          "con",
          "com4",
          "com3",
          "com2",
          "com1",
          "aux",
          "shift",
          "cd",
          "dir",
          "echo",
          "setlocal",
          "endlocal",
          "set",
          "pause",
          "copy",
          "append",
          "assoc",
          "at",
          "attrib",
          "break",
          "cacls",
          "cd",
          "chcp",
          "chdir",
          "chkdsk",
          "chkntfs",
          "cls",
          "cmd",
          "color",
          "comp",
          "compact",
          "convert",
          "date",
          "dir",
          "diskcomp",
          "diskcopy",
          "doskey",
          "erase",
          "fs",
          "find",
          "findstr",
          "format",
          "ftype",
          "graftabl",
          "help",
          "keyb",
          "label",
          "md",
          "mkdir",
          "mode",
          "more",
          "move",
          "path",
          "pause",
          "print",
          "popd",
          "pushd",
          "promt",
          "rd",
          "recover",
          "rem",
          "rename",
          "replace",
          "restore",
          "rmdir",
          "shift",
          "sort",
          "start",
          "subst",
          "time",
          "title",
          "tree",
          "type",
          "ver",
          "verify",
          "vol",
          // winutils
          "ping",
          "net",
          "ipconfig",
          "taskkill",
          "xcopy",
          "ren",
          "del"
        ]
      },
      contains: [
        {
          className: "variable",
          begin: /%%[^ ]|%[^ ]+?%|![^ ]+?!/
        },
        {
          className: "function",
          begin: {
            begin: "^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)"
          }.begin,
          end: "goto:eof",
          contains: [
            e2.inherit(e2.TITLE_MODE, { begin: "([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*" }),
            n
          ]
        },
        {
          className: "number",
          begin: "\\b\\d+",
          relevance: 0
        },
        n
      ]
    };
  }
  return Ei = t2, Ei;
}
var gi, C_;
function pR() {
  if (C_)
    return gi;
  C_ = 1;
  function t2(e2) {
    return {
      keywords: "dsconfig",
      contains: [
        {
          className: "keyword",
          begin: "^dsconfig",
          end: /\s/,
          excludeEnd: true,
          relevance: 10
        },
        {
          className: "built_in",
          begin: /(list|create|get|set|delete)-(\w+)/,
          end: /\s/,
          excludeEnd: true,
          illegal: "!@#$%^&*()",
          relevance: 10
        },
        {
          className: "built_in",
          begin: /--(\w+)/,
          end: /\s/,
          excludeEnd: true
        },
        {
          className: "string",
          begin: /"/,
          end: /"/
        },
        {
          className: "string",
          begin: /'/,
          end: /'/
        },
        {
          className: "string",
          begin: /[\w\-?]+:\w+/,
          end: /\W/,
          relevance: 0
        },
        {
          className: "string",
          begin: /\w+(\-\w+)*/,
          end: /(?=\W)/,
          relevance: 0
        },
        e2.HASH_COMMENT_MODE
      ]
    };
  }
  return gi = t2, gi;
}
var fi, N_;
function mR() {
  if (N_)
    return fi;
  N_ = 1;
  function t2(e2) {
    const n = {
      className: "string",
      variants: [
        e2.inherit(e2.QUOTE_STRING_MODE, { begin: '((u8?|U)|L)?"' }),
        {
          begin: '(u8?|U)?R"',
          end: '"',
          contains: [e2.BACKSLASH_ESCAPE]
        },
        {
          begin: "'\\\\?.",
          end: "'",
          illegal: "."
        }
      ]
    }, i2 = {
      className: "number",
      variants: [
        { begin: "\\b(\\d+(\\.\\d*)?|\\.\\d+)(u|U|l|L|ul|UL|f|F)" },
        { begin: e2.C_NUMBER_RE }
      ],
      relevance: 0
    }, r2 = {
      className: "meta",
      begin: "#",
      end: "$",
      keywords: { keyword: "if else elif endif define undef ifdef ifndef" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        {
          beginKeywords: "include",
          end: "$",
          keywords: { keyword: "include" },
          contains: [
            e2.inherit(n, { className: "string" }),
            {
              className: "string",
              begin: "<",
              end: ">",
              illegal: "\\n"
            }
          ]
        },
        n,
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE
      ]
    }, a2 = {
      className: "variable",
      begin: /&[a-z\d_]*\b/
    }, s2 = {
      className: "keyword",
      begin: "/[a-z][a-z\\d-]*/"
    }, o2 = {
      className: "symbol",
      begin: "^\\s*[a-zA-Z_][a-zA-Z\\d_]*:"
    }, l2 = {
      className: "params",
      relevance: 0,
      begin: "<",
      end: ">",
      contains: [
        i2,
        a2
      ]
    }, u2 = {
      className: "title.class",
      begin: /[a-zA-Z_][a-zA-Z\d_@-]*(?=\s\{)/,
      relevance: 0.2
    }, _ = {
      className: "title.class",
      begin: /^\/(?=\s*\{)/,
      relevance: 10
    }, d2 = {
      match: /[a-z][a-z-,]+(?=;)/,
      relevance: 0,
      scope: "attr"
    }, f2 = {
      relevance: 0,
      match: [
        /[a-z][a-z-,]+/,
        /\s*/,
        /=/
      ],
      scope: {
        1: "attr",
        3: "operator"
      }
    }, b = {
      scope: "punctuation",
      relevance: 0,
      // `};` combined is just to avoid tons of useless punctuation nodes
      match: /\};|[;{}]/
    };
    return {
      name: "Device Tree",
      contains: [
        _,
        a2,
        s2,
        o2,
        u2,
        f2,
        d2,
        l2,
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        i2,
        n,
        r2,
        b,
        {
          begin: e2.IDENT_RE + "::",
          keywords: ""
        }
      ]
    };
  }
  return fi = t2, fi;
}
var Si, v_;
function ER() {
  if (v_)
    return Si;
  v_ = 1;
  function t2(e2) {
    return {
      name: "Dust",
      aliases: ["dst"],
      case_insensitive: true,
      subLanguage: "xml",
      contains: [
        {
          className: "template-tag",
          begin: /\{[#\/]/,
          end: /\}/,
          illegal: /;/,
          contains: [
            {
              className: "name",
              begin: /[a-zA-Z\.-]+/,
              starts: {
                endsWithParent: true,
                relevance: 0,
                contains: [e2.QUOTE_STRING_MODE]
              }
            }
          ]
        },
        {
          className: "template-variable",
          begin: /\{/,
          end: /\}/,
          illegal: /;/,
          keywords: "if eq ne lt lte gt gte select default math sep"
        }
      ]
    };
  }
  return Si = t2, Si;
}
var bi, O_;
function gR() {
  if (O_)
    return bi;
  O_ = 1;
  function t2(e2) {
    const n = e2.COMMENT(/\(\*/, /\*\)/), i2 = {
      className: "attribute",
      begin: /^[ ]*[a-zA-Z]+([\s_-]+[a-zA-Z]+)*/
    }, a2 = {
      begin: /=/,
      end: /[.;]/,
      contains: [
        n,
        {
          className: "meta",
          begin: /\?.*\?/
        },
        {
          // terminals
          className: "string",
          variants: [
            e2.APOS_STRING_MODE,
            e2.QUOTE_STRING_MODE,
            {
              begin: "`",
              end: "`"
            }
          ]
        }
      ]
    };
    return {
      name: "Extended Backus-Naur Form",
      illegal: /\S/,
      contains: [
        n,
        i2,
        a2
      ]
    };
  }
  return bi = t2, bi;
}
var Ti, A_;
function fR() {
  if (A_)
    return Ti;
  A_ = 1;
  function t2(e2) {
    const n = e2.regex, i2 = "[a-zA-Z_][a-zA-Z0-9_.]*(!|\\?)?", r2 = "[a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?", o2 = {
      $pattern: i2,
      keyword: [
        "after",
        "alias",
        "and",
        "case",
        "catch",
        "cond",
        "defstruct",
        "defguard",
        "do",
        "else",
        "end",
        "fn",
        "for",
        "if",
        "import",
        "in",
        "not",
        "or",
        "quote",
        "raise",
        "receive",
        "require",
        "reraise",
        "rescue",
        "try",
        "unless",
        "unquote",
        "unquote_splicing",
        "use",
        "when",
        "with|0"
      ],
      literal: [
        "false",
        "nil",
        "true"
      ]
    }, l2 = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: o2
    }, u2 = {
      className: "number",
      begin: "(\\b0o[0-7_]+)|(\\b0b[01_]+)|(\\b0x[0-9a-fA-F_]+)|(-?\\b[0-9][0-9_]*(\\.[0-9_]+([eE][-+]?[0-9]+)?)?)",
      relevance: 0
    }, d2 = {
      match: /\\[\s\S]/,
      scope: "char.escape",
      relevance: 0
    }, f2 = `[/|([{<"']`, b = [
      {
        begin: /"/,
        end: /"/
      },
      {
        begin: /'/,
        end: /'/
      },
      {
        begin: /\//,
        end: /\//
      },
      {
        begin: /\|/,
        end: /\|/
      },
      {
        begin: /\(/,
        end: /\)/
      },
      {
        begin: /\[/,
        end: /\]/
      },
      {
        begin: /\{/,
        end: /\}/
      },
      {
        begin: /</,
        end: />/
      }
    ], c2 = (h2) => ({
      scope: "char.escape",
      begin: n.concat(/\\/, h2),
      relevance: 0
    }), E2 = {
      className: "string",
      begin: "~[a-z](?=" + f2 + ")",
      contains: b.map((h2) => e2.inherit(
        h2,
        { contains: [
          c2(h2.end),
          d2,
          l2
        ] }
      ))
    }, g2 = {
      className: "string",
      begin: "~[A-Z](?=" + f2 + ")",
      contains: b.map((h2) => e2.inherit(
        h2,
        { contains: [c2(h2.end)] }
      ))
    }, S = {
      className: "regex",
      variants: [
        {
          begin: "~r(?=" + f2 + ")",
          contains: b.map((h2) => e2.inherit(
            h2,
            {
              end: n.concat(h2.end, /[uismxfU]{0,7}/),
              contains: [
                c2(h2.end),
                d2,
                l2
              ]
            }
          ))
        },
        {
          begin: "~R(?=" + f2 + ")",
          contains: b.map(
            (h2) => e2.inherit(
              h2,
              {
                end: n.concat(h2.end, /[uismxfU]{0,7}/),
                contains: [c2(h2.end)]
              }
            )
          )
        }
      ]
    }, p2 = {
      className: "string",
      contains: [
        e2.BACKSLASH_ESCAPE,
        l2
      ],
      variants: [
        {
          begin: /"""/,
          end: /"""/
        },
        {
          begin: /'''/,
          end: /'''/
        },
        {
          begin: /~S"""/,
          end: /"""/,
          contains: []
          // override default
        },
        {
          begin: /~S"/,
          end: /"/,
          contains: []
          // override default
        },
        {
          begin: /~S'''/,
          end: /'''/,
          contains: []
          // override default
        },
        {
          begin: /~S'/,
          end: /'/,
          contains: []
          // override default
        },
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        }
      ]
    }, m2 = {
      className: "function",
      beginKeywords: "def defp defmacro defmacrop",
      end: /\B\b/,
      // the mode is ended by the title
      contains: [
        e2.inherit(e2.TITLE_MODE, {
          begin: i2,
          endsParent: true
        })
      ]
    }, R2 = e2.inherit(m2, {
      className: "class",
      beginKeywords: "defimpl defmodule defprotocol defrecord",
      end: /\bdo\b|$|;/
    }), T = [
      p2,
      S,
      g2,
      E2,
      e2.HASH_COMMENT_MODE,
      R2,
      m2,
      { begin: "::" },
      {
        className: "symbol",
        begin: ":(?![\\s:])",
        contains: [
          p2,
          { begin: r2 }
        ],
        relevance: 0
      },
      {
        className: "symbol",
        begin: i2 + ":(?!:)",
        relevance: 0
      },
      {
        // Usage of a module, struct, etc.
        className: "title.class",
        begin: /(\b[A-Z][a-zA-Z0-9_]+)/,
        relevance: 0
      },
      u2,
      {
        className: "variable",
        begin: "(\\$\\W)|((\\$|@@?)(\\w+))"
      }
      // -> has been removed, capnproto always uses this grammar construct
    ];
    return l2.contains = T, {
      name: "Elixir",
      aliases: [
        "ex",
        "exs"
      ],
      keywords: o2,
      contains: T
    };
  }
  return Ti = t2, Ti;
}
var hi, y_;
function SR() {
  if (y_)
    return hi;
  y_ = 1;
  function t2(e2) {
    const n = { variants: [
      e2.COMMENT("--", "$"),
      e2.COMMENT(
        /\{-/,
        /-\}/,
        { contains: ["self"] }
      )
    ] }, i2 = {
      className: "type",
      begin: "\\b[A-Z][\\w']*",
      // TODO: other constructors (built-in, infix).
      relevance: 0
    }, r2 = {
      begin: "\\(",
      end: "\\)",
      illegal: '"',
      contains: [
        {
          className: "type",
          begin: "\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?"
        },
        n
      ]
    }, a2 = {
      begin: /\{/,
      end: /\}/,
      contains: r2.contains
    }, s2 = {
      className: "string",
      begin: "'\\\\?.",
      end: "'",
      illegal: "."
    };
    return {
      name: "Elm",
      keywords: [
        "let",
        "in",
        "if",
        "then",
        "else",
        "case",
        "of",
        "where",
        "module",
        "import",
        "exposing",
        "type",
        "alias",
        "as",
        "infix",
        "infixl",
        "infixr",
        "port",
        "effect",
        "command",
        "subscription"
      ],
      contains: [
        // Top-level constructions.
        {
          beginKeywords: "port effect module",
          end: "exposing",
          keywords: "port effect module where command subscription exposing",
          contains: [
            r2,
            n
          ],
          illegal: "\\W\\.|;"
        },
        {
          begin: "import",
          end: "$",
          keywords: "import as exposing",
          contains: [
            r2,
            n
          ],
          illegal: "\\W\\.|;"
        },
        {
          begin: "type",
          end: "$",
          keywords: "type alias",
          contains: [
            i2,
            r2,
            a2,
            n
          ]
        },
        {
          beginKeywords: "infix infixl infixr",
          end: "$",
          contains: [
            e2.C_NUMBER_MODE,
            n
          ]
        },
        {
          begin: "port",
          end: "$",
          keywords: "port",
          contains: [n]
        },
        // Literals and names.
        s2,
        e2.QUOTE_STRING_MODE,
        e2.C_NUMBER_MODE,
        i2,
        e2.inherit(e2.TITLE_MODE, { begin: "^[_a-z][\\w']*" }),
        n,
        {
          // No markup, relevance booster
          begin: "->|<-"
        }
      ],
      illegal: /;/
    };
  }
  return hi = t2, hi;
}
var Ri, I_;
function bR() {
  if (I_)
    return Ri;
  I_ = 1;
  function t2(e2) {
    const n = e2.regex, i2 = "([a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?)", r2 = n.either(
      /\b([A-Z]+[a-z0-9]+)+/,
      // ends in caps
      /\b([A-Z]+[a-z0-9]+)+[A-Z]+/
    ), a2 = n.concat(r2, /(::\w+)*/), o2 = {
      "variable.constant": [
        "__FILE__",
        "__LINE__",
        "__ENCODING__"
      ],
      "variable.language": [
        "self",
        "super"
      ],
      keyword: [
        "alias",
        "and",
        "begin",
        "BEGIN",
        "break",
        "case",
        "class",
        "defined",
        "do",
        "else",
        "elsif",
        "end",
        "END",
        "ensure",
        "for",
        "if",
        "in",
        "module",
        "next",
        "not",
        "or",
        "redo",
        "require",
        "rescue",
        "retry",
        "return",
        "then",
        "undef",
        "unless",
        "until",
        "when",
        "while",
        "yield",
        ...[
          "include",
          "extend",
          "prepend",
          "public",
          "private",
          "protected",
          "raise",
          "throw"
        ]
      ],
      built_in: [
        "proc",
        "lambda",
        "attr_accessor",
        "attr_reader",
        "attr_writer",
        "define_method",
        "private_constant",
        "module_function"
      ],
      literal: [
        "true",
        "false",
        "nil"
      ]
    }, l2 = {
      className: "doctag",
      begin: "@[A-Za-z]+"
    }, u2 = {
      begin: "#<",
      end: ">"
    }, _ = [
      e2.COMMENT(
        "#",
        "$",
        { contains: [l2] }
      ),
      e2.COMMENT(
        "^=begin",
        "^=end",
        {
          contains: [l2],
          relevance: 10
        }
      ),
      e2.COMMENT("^__END__", e2.MATCH_NOTHING_RE)
    ], d2 = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: o2
    }, f2 = {
      className: "string",
      contains: [
        e2.BACKSLASH_ESCAPE,
        d2
      ],
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        },
        {
          begin: /`/,
          end: /`/
        },
        {
          begin: /%[qQwWx]?\(/,
          end: /\)/
        },
        {
          begin: /%[qQwWx]?\[/,
          end: /\]/
        },
        {
          begin: /%[qQwWx]?\{/,
          end: /\}/
        },
        {
          begin: /%[qQwWx]?</,
          end: />/
        },
        {
          begin: /%[qQwWx]?\//,
          end: /\//
        },
        {
          begin: /%[qQwWx]?%/,
          end: /%/
        },
        {
          begin: /%[qQwWx]?-/,
          end: /-/
        },
        {
          begin: /%[qQwWx]?\|/,
          end: /\|/
        },
        // in the following expressions, \B in the beginning suppresses recognition of ?-sequences
        // where ? is the last character of a preceding identifier, as in: `func?4`
        { begin: /\B\?(\\\d{1,3})/ },
        { begin: /\B\?(\\x[A-Fa-f0-9]{1,2})/ },
        { begin: /\B\?(\\u\{?[A-Fa-f0-9]{1,6}\}?)/ },
        { begin: /\B\?(\\M-\\C-|\\M-\\c|\\c\\M-|\\M-|\\C-\\M-)[\x20-\x7e]/ },
        { begin: /\B\?\\(c|C-)[\x20-\x7e]/ },
        { begin: /\B\?\\?\S/ },
        // heredocs
        {
          // this guard makes sure that we have an entire heredoc and not a false
          // positive (auto-detect, etc.)
          begin: n.concat(
            /<<[-~]?'?/,
            n.lookahead(/(\w+)(?=\W)[^\n]*\n(?:[^\n]*\n)*?\s*\1\b/)
          ),
          contains: [
            e2.END_SAME_AS_BEGIN({
              begin: /(\w+)/,
              end: /(\w+)/,
              contains: [
                e2.BACKSLASH_ESCAPE,
                d2
              ]
            })
          ]
        }
      ]
    }, b = "[1-9](_?[0-9])*|0", c2 = "[0-9](_?[0-9])*", E2 = {
      className: "number",
      relevance: 0,
      variants: [
        // decimal integer/float, optionally exponential or rational, optionally imaginary
        { begin: `\\b(${b})(\\.(${c2}))?([eE][+-]?(${c2})|r)?i?\\b` },
        // explicit decimal/binary/octal/hexadecimal integer,
        // optionally rational and/or imaginary
        { begin: "\\b0[dD][0-9](_?[0-9])*r?i?\\b" },
        { begin: "\\b0[bB][0-1](_?[0-1])*r?i?\\b" },
        { begin: "\\b0[oO][0-7](_?[0-7])*r?i?\\b" },
        { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\b" },
        // 0-prefixed implicit octal integer, optionally rational and/or imaginary
        { begin: "\\b0(_?[0-7])+r?i?\\b" }
      ]
    }, g2 = {
      variants: [
        {
          match: /\(\)/
        },
        {
          className: "params",
          begin: /\(/,
          end: /(?=\))/,
          excludeBegin: true,
          endsParent: true,
          keywords: o2
        }
      ]
    }, C2 = [
      f2,
      {
        variants: [
          {
            match: [
              /class\s+/,
              a2,
              /\s+<\s+/,
              a2
            ]
          },
          {
            match: [
              /\b(class|module)\s+/,
              a2
            ]
          }
        ],
        scope: {
          2: "title.class",
          4: "title.class.inherited"
        },
        keywords: o2
      },
      {
        match: [
          /(include|extend)\s+/,
          a2
        ],
        scope: {
          2: "title.class"
        },
        keywords: o2
      },
      {
        relevance: 0,
        match: [
          a2,
          /\.new[. (]/
        ],
        scope: {
          1: "title.class"
        }
      },
      {
        relevance: 0,
        match: /\b[A-Z][A-Z_0-9]+\b/,
        className: "variable.constant"
      },
      {
        relevance: 0,
        match: r2,
        scope: "title.class"
      },
      {
        match: [
          /def/,
          /\s+/,
          i2
        ],
        scope: {
          1: "keyword",
          3: "title.function"
        },
        contains: [
          g2
        ]
      },
      {
        // swallow namespace qualifiers before symbols
        begin: e2.IDENT_RE + "::"
      },
      {
        className: "symbol",
        begin: e2.UNDERSCORE_IDENT_RE + "(!|\\?)?:",
        relevance: 0
      },
      {
        className: "symbol",
        begin: ":(?!\\s)",
        contains: [
          f2,
          { begin: i2 }
        ],
        relevance: 0
      },
      E2,
      {
        // negative-look forward attempts to prevent false matches like:
        // @ident@ or $ident$ that might indicate this is not ruby at all
        className: "variable",
        begin: "(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])(?![A-Za-z])(?![@$?'])"
      },
      {
        className: "params",
        begin: /\|(?!=)/,
        end: /\|/,
        excludeBegin: true,
        excludeEnd: true,
        relevance: 0,
        // this could be a lot of things (in other languages) other than params
        keywords: o2
      },
      {
        // regexp container
        begin: "(" + e2.RE_STARTERS_RE + "|unless)\\s*",
        keywords: "unless",
        contains: [
          {
            className: "regexp",
            contains: [
              e2.BACKSLASH_ESCAPE,
              d2
            ],
            illegal: /\n/,
            variants: [
              {
                begin: "/",
                end: "/[a-z]*"
              },
              {
                begin: /%r\{/,
                end: /\}[a-z]*/
              },
              {
                begin: "%r\\(",
                end: "\\)[a-z]*"
              },
              {
                begin: "%r!",
                end: "![a-z]*"
              },
              {
                begin: "%r\\[",
                end: "\\][a-z]*"
              }
            ]
          }
        ].concat(u2, _),
        relevance: 0
      }
    ].concat(u2, _);
    d2.contains = C2, g2.contains = C2;
    const x = [
      {
        begin: /^\s*=>/,
        starts: {
          end: "$",
          contains: C2
        }
      },
      {
        className: "meta.prompt",
        begin: "^([>?]>|[\\w#]+\\(\\w+\\):\\d+:\\d+[>*]|(\\w+-)?\\d+\\.\\d+\\.\\d+(p\\d+)?[^\\d][^>]+>)(?=[ ])",
        starts: {
          end: "$",
          keywords: o2,
          contains: C2
        }
      }
    ];
    return _.unshift(u2), {
      name: "Ruby",
      aliases: [
        "rb",
        "gemspec",
        "podspec",
        "thor",
        "irb"
      ],
      keywords: o2,
      illegal: /\/\*/,
      contains: [e2.SHEBANG({ binary: "ruby" })].concat(x).concat(_).concat(C2)
    };
  }
  return Ri = t2, Ri;
}
var Ci, D_;
function TR() {
  if (D_)
    return Ci;
  D_ = 1;
  function t2(e2) {
    return {
      name: "ERB",
      subLanguage: "xml",
      contains: [
        e2.COMMENT("<%#", "%>"),
        {
          begin: "<%[%=-]?",
          end: "[%-]?%>",
          subLanguage: "ruby",
          excludeBegin: true,
          excludeEnd: true
        }
      ]
    };
  }
  return Ci = t2, Ci;
}
var Ni, x_;
function hR() {
  if (x_)
    return Ni;
  x_ = 1;
  function t2(e2) {
    const n = e2.regex;
    return {
      name: "Erlang REPL",
      keywords: {
        built_in: "spawn spawn_link self",
        keyword: "after and andalso|10 band begin bnot bor bsl bsr bxor case catch cond div end fun if let not of or orelse|10 query receive rem try when xor"
      },
      contains: [
        {
          className: "meta.prompt",
          begin: "^[0-9]+> ",
          relevance: 10
        },
        e2.COMMENT("%", "$"),
        {
          className: "number",
          begin: "\\b(\\d+(_\\d+)*#[a-fA-F0-9]+(_[a-fA-F0-9]+)*|\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?([eE][-+]?\\d+)?)",
          relevance: 0
        },
        e2.APOS_STRING_MODE,
        e2.QUOTE_STRING_MODE,
        { begin: n.concat(
          /\?(::)?/,
          /([A-Z]\w*)/,
          // at least one identifier
          /((::)[A-Z]\w*)*/
          // perhaps more
        ) },
        { begin: "->" },
        { begin: "ok" },
        { begin: "!" },
        {
          begin: "(\\b[a-z'][a-zA-Z0-9_']*:[a-z'][a-zA-Z0-9_']*)|(\\b[a-z'][a-zA-Z0-9_']*)",
          relevance: 0
        },
        {
          begin: "[A-Z][a-zA-Z0-9_']*",
          relevance: 0
        }
      ]
    };
  }
  return Ni = t2, Ni;
}
var vi, L_;
function RR() {
  if (L_)
    return vi;
  L_ = 1;
  function t2(e2) {
    const n = "[a-z'][a-zA-Z0-9_']*", i2 = "(" + n + ":" + n + "|" + n + ")", r2 = {
      keyword: "after and andalso|10 band begin bnot bor bsl bzr bxor case catch cond div end fun if let not of orelse|10 query receive rem try when xor maybe else",
      literal: "false true"
    }, a2 = e2.COMMENT("%", "$"), s2 = {
      className: "number",
      begin: "\\b(\\d+(_\\d+)*#[a-fA-F0-9]+(_[a-fA-F0-9]+)*|\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?([eE][-+]?\\d+)?)",
      relevance: 0
    }, o2 = { begin: "fun\\s+" + n + "/\\d+" }, l2 = {
      begin: i2 + "\\(",
      end: "\\)",
      returnBegin: true,
      relevance: 0,
      contains: [
        {
          begin: i2,
          relevance: 0
        },
        {
          begin: "\\(",
          end: "\\)",
          endsWithParent: true,
          returnEnd: true,
          relevance: 0
          // "contains" defined later
        }
      ]
    }, u2 = {
      begin: /\{/,
      end: /\}/,
      relevance: 0
      // "contains" defined later
    }, _ = {
      begin: "\\b_([A-Z][A-Za-z0-9_]*)?",
      relevance: 0
    }, d2 = {
      begin: "[A-Z][a-zA-Z0-9_]*",
      relevance: 0
    }, f2 = {
      begin: "#" + e2.UNDERSCORE_IDENT_RE,
      relevance: 0,
      returnBegin: true,
      contains: [
        {
          begin: "#" + e2.UNDERSCORE_IDENT_RE,
          relevance: 0
        },
        {
          begin: /\{/,
          end: /\}/,
          relevance: 0
          // "contains" defined later
        }
      ]
    }, b = {
      scope: "string",
      match: /\$(\\([^0-9]|[0-9]{1,3}|)|.)/
    }, c2 = {
      scope: "string",
      match: /"""("*)(?!")[\s\S]*?"""\1/
    }, E2 = {
      scope: "string",
      contains: [e2.BACKSLASH_ESCAPE],
      variants: [
        { match: /~\w?"""("*)(?!")[\s\S]*?"""\1/ },
        { begin: /~\w?\(/, end: /\)/ },
        { begin: /~\w?\[/, end: /\]/ },
        { begin: /~\w?{/, end: /}/ },
        { begin: /~\w?</, end: />/ },
        { begin: /~\w?\//, end: /\// },
        { begin: /~\w?\|/, end: /\|/ },
        { begin: /~\w?'/, end: /'/ },
        { begin: /~\w?"/, end: /"/ },
        { begin: /~\w?`/, end: /`/ },
        { begin: /~\w?#/, end: /#/ }
      ]
    }, g2 = {
      beginKeywords: "fun receive if try case maybe",
      end: "end",
      keywords: r2
    };
    g2.contains = [
      a2,
      o2,
      e2.inherit(e2.APOS_STRING_MODE, { className: "" }),
      g2,
      l2,
      E2,
      c2,
      e2.QUOTE_STRING_MODE,
      s2,
      u2,
      _,
      d2,
      f2,
      b
    ];
    const S = [
      a2,
      o2,
      g2,
      l2,
      E2,
      c2,
      e2.QUOTE_STRING_MODE,
      s2,
      u2,
      _,
      d2,
      f2,
      b
    ];
    l2.contains[1].contains = S, u2.contains = S, f2.contains[1].contains = S;
    const p2 = [
      "-module",
      "-record",
      "-undef",
      "-export",
      "-ifdef",
      "-ifndef",
      "-author",
      "-copyright",
      "-doc",
      "-moduledoc",
      "-vsn",
      "-import",
      "-include",
      "-include_lib",
      "-compile",
      "-define",
      "-else",
      "-endif",
      "-file",
      "-behaviour",
      "-behavior",
      "-spec",
      "-on_load",
      "-nifs"
    ], m2 = {
      className: "params",
      begin: "\\(",
      end: "\\)",
      contains: S
    };
    return {
      name: "Erlang",
      aliases: ["erl"],
      keywords: r2,
      illegal: "(</|\\*=|\\+=|-=|/\\*|\\*/|\\(\\*|\\*\\))",
      contains: [
        {
          className: "function",
          begin: "^" + n + "\\s*\\(",
          end: "->",
          returnBegin: true,
          illegal: "\\(|#|//|/\\*|\\\\|:|;",
          contains: [
            m2,
            e2.inherit(e2.TITLE_MODE, { begin: n })
          ],
          starts: {
            end: ";|\\.",
            keywords: r2,
            contains: S
          }
        },
        a2,
        {
          begin: "^-",
          end: "\\.",
          relevance: 0,
          excludeEnd: true,
          returnBegin: true,
          keywords: {
            $pattern: "-" + e2.IDENT_RE,
            keyword: p2.map((R2) => `${R2}|1.5`).join(" ")
          },
          contains: [
            m2,
            E2,
            c2,
            e2.QUOTE_STRING_MODE
          ]
        },
        s2,
        E2,
        c2,
        e2.QUOTE_STRING_MODE,
        f2,
        _,
        d2,
        u2,
        b,
        { begin: /\.$/ }
        // relevance booster
      ]
    };
  }
  return vi = t2, vi;
}
var Oi, M_;
function CR() {
  if (M_)
    return Oi;
  M_ = 1;
  function t2(e2) {
    return {
      name: "Excel formulae",
      aliases: [
        "xlsx",
        "xls"
      ],
      case_insensitive: true,
      keywords: {
        $pattern: /[a-zA-Z][\w\.]*/,
        built_in: [
          "ABS",
          "ACCRINT",
          "ACCRINTM",
          "ACOS",
          "ACOSH",
          "ACOT",
          "ACOTH",
          "AGGREGATE",
          "ADDRESS",
          "AMORDEGRC",
          "AMORLINC",
          "AND",
          "ARABIC",
          "AREAS",
          "ARRAYTOTEXT",
          "ASC",
          "ASIN",
          "ASINH",
          "ATAN",
          "ATAN2",
          "ATANH",
          "AVEDEV",
          "AVERAGE",
          "AVERAGEA",
          "AVERAGEIF",
          "AVERAGEIFS",
          "BAHTTEXT",
          "BASE",
          "BESSELI",
          "BESSELJ",
          "BESSELK",
          "BESSELY",
          "BETADIST",
          "BETA.DIST",
          "BETAINV",
          "BETA.INV",
          "BIN2DEC",
          "BIN2HEX",
          "BIN2OCT",
          "BINOMDIST",
          "BINOM.DIST",
          "BINOM.DIST.RANGE",
          "BINOM.INV",
          "BITAND",
          "BITLSHIFT",
          "BITOR",
          "BITRSHIFT",
          "BITXOR",
          "BYCOL",
          "BYROW",
          "CALL",
          "CEILING",
          "CEILING.MATH",
          "CEILING.PRECISE",
          "CELL",
          "CHAR",
          "CHIDIST",
          "CHIINV",
          "CHITEST",
          "CHISQ.DIST",
          "CHISQ.DIST.RT",
          "CHISQ.INV",
          "CHISQ.INV.RT",
          "CHISQ.TEST",
          "CHOOSE",
          "CHOOSECOLS",
          "CHOOSEROWS",
          "CLEAN",
          "CODE",
          "COLUMN",
          "COLUMNS",
          "COMBIN",
          "COMBINA",
          "COMPLEX",
          "CONCAT",
          "CONCATENATE",
          "CONFIDENCE",
          "CONFIDENCE.NORM",
          "CONFIDENCE.T",
          "CONVERT",
          "CORREL",
          "COS",
          "COSH",
          "COT",
          "COTH",
          "COUNT",
          "COUNTA",
          "COUNTBLANK",
          "COUNTIF",
          "COUNTIFS",
          "COUPDAYBS",
          "COUPDAYS",
          "COUPDAYSNC",
          "COUPNCD",
          "COUPNUM",
          "COUPPCD",
          "COVAR",
          "COVARIANCE.P",
          "COVARIANCE.S",
          "CRITBINOM",
          "CSC",
          "CSCH",
          "CUBEKPIMEMBER",
          "CUBEMEMBER",
          "CUBEMEMBERPROPERTY",
          "CUBERANKEDMEMBER",
          "CUBESET",
          "CUBESETCOUNT",
          "CUBEVALUE",
          "CUMIPMT",
          "CUMPRINC",
          "DATE",
          "DATEDIF",
          "DATEVALUE",
          "DAVERAGE",
          "DAY",
          "DAYS",
          "DAYS360",
          "DB",
          "DBCS",
          "DCOUNT",
          "DCOUNTA",
          "DDB",
          "DEC2BIN",
          "DEC2HEX",
          "DEC2OCT",
          "DECIMAL",
          "DEGREES",
          "DELTA",
          "DEVSQ",
          "DGET",
          "DISC",
          "DMAX",
          "DMIN",
          "DOLLAR",
          "DOLLARDE",
          "DOLLARFR",
          "DPRODUCT",
          "DROP",
          "DSTDEV",
          "DSTDEVP",
          "DSUM",
          "DURATION",
          "DVAR",
          "DVARP",
          "EDATE",
          "EFFECT",
          "ENCODEURL",
          "EOMONTH",
          "ERF",
          "ERF.PRECISE",
          "ERFC",
          "ERFC.PRECISE",
          "ERROR.TYPE",
          "EUROCONVERT",
          "EVEN",
          "EXACT",
          "EXP",
          "EXPAND",
          "EXPON.DIST",
          "EXPONDIST",
          "FACT",
          "FACTDOUBLE",
          "FALSE",
          "F.DIST",
          "FDIST",
          "F.DIST.RT",
          "FILTER",
          "FILTERXML",
          "FIND",
          "FINDB",
          "F.INV",
          "F.INV.RT",
          "FINV",
          "FISHER",
          "FISHERINV",
          "FIXED",
          "FLOOR",
          "FLOOR.MATH",
          "FLOOR.PRECISE",
          "FORECAST",
          "FORECAST.ETS",
          "FORECAST.ETS.CONFINT",
          "FORECAST.ETS.SEASONALITY",
          "FORECAST.ETS.STAT",
          "FORECAST.LINEAR",
          "FORMULATEXT",
          "FREQUENCY",
          "F.TEST",
          "FTEST",
          "FV",
          "FVSCHEDULE",
          "GAMMA",
          "GAMMA.DIST",
          "GAMMADIST",
          "GAMMA.INV",
          "GAMMAINV",
          "GAMMALN",
          "GAMMALN.PRECISE",
          "GAUSS",
          "GCD",
          "GEOMEAN",
          "GESTEP",
          "GETPIVOTDATA",
          "GROWTH",
          "HARMEAN",
          "HEX2BIN",
          "HEX2DEC",
          "HEX2OCT",
          "HLOOKUP",
          "HOUR",
          "HSTACK",
          "HYPERLINK",
          "HYPGEOM.DIST",
          "HYPGEOMDIST",
          "IF",
          "IFERROR",
          "IFNA",
          "IFS",
          "IMABS",
          "IMAGE",
          "IMAGINARY",
          "IMARGUMENT",
          "IMCONJUGATE",
          "IMCOS",
          "IMCOSH",
          "IMCOT",
          "IMCSC",
          "IMCSCH",
          "IMDIV",
          "IMEXP",
          "IMLN",
          "IMLOG10",
          "IMLOG2",
          "IMPOWER",
          "IMPRODUCT",
          "IMREAL",
          "IMSEC",
          "IMSECH",
          "IMSIN",
          "IMSINH",
          "IMSQRT",
          "IMSUB",
          "IMSUM",
          "IMTAN",
          "INDEX",
          "INDIRECT",
          "INFO",
          "INT",
          "INTERCEPT",
          "INTRATE",
          "IPMT",
          "IRR",
          "ISBLANK",
          "ISERR",
          "ISERROR",
          "ISEVEN",
          "ISFORMULA",
          "ISLOGICAL",
          "ISNA",
          "ISNONTEXT",
          "ISNUMBER",
          "ISODD",
          "ISOMITTED",
          "ISREF",
          "ISTEXT",
          "ISO.CEILING",
          "ISOWEEKNUM",
          "ISPMT",
          "JIS",
          "KURT",
          "LAMBDA",
          "LARGE",
          "LCM",
          "LEFT",
          "LEFTB",
          "LEN",
          "LENB",
          "LET",
          "LINEST",
          "LN",
          "LOG",
          "LOG10",
          "LOGEST",
          "LOGINV",
          "LOGNORM.DIST",
          "LOGNORMDIST",
          "LOGNORM.INV",
          "LOOKUP",
          "LOWER",
          "MAKEARRAY",
          "MAP",
          "MATCH",
          "MAX",
          "MAXA",
          "MAXIFS",
          "MDETERM",
          "MDURATION",
          "MEDIAN",
          "MID",
          "MIDB",
          "MIN",
          "MINIFS",
          "MINA",
          "MINUTE",
          "MINVERSE",
          "MIRR",
          "MMULT",
          "MOD",
          "MODE",
          "MODE.MULT",
          "MODE.SNGL",
          "MONTH",
          "MROUND",
          "MULTINOMIAL",
          "MUNIT",
          "N",
          "NA",
          "NEGBINOM.DIST",
          "NEGBINOMDIST",
          "NETWORKDAYS",
          "NETWORKDAYS.INTL",
          "NOMINAL",
          "NORM.DIST",
          "NORMDIST",
          "NORMINV",
          "NORM.INV",
          "NORM.S.DIST",
          "NORMSDIST",
          "NORM.S.INV",
          "NORMSINV",
          "NOT",
          "NOW",
          "NPER",
          "NPV",
          "NUMBERVALUE",
          "OCT2BIN",
          "OCT2DEC",
          "OCT2HEX",
          "ODD",
          "ODDFPRICE",
          "ODDFYIELD",
          "ODDLPRICE",
          "ODDLYIELD",
          "OFFSET",
          "OR",
          "PDURATION",
          "PEARSON",
          "PERCENTILE.EXC",
          "PERCENTILE.INC",
          "PERCENTILE",
          "PERCENTRANK.EXC",
          "PERCENTRANK.INC",
          "PERCENTRANK",
          "PERMUT",
          "PERMUTATIONA",
          "PHI",
          "PHONETIC",
          "PI",
          "PMT",
          "POISSON.DIST",
          "POISSON",
          "POWER",
          "PPMT",
          "PRICE",
          "PRICEDISC",
          "PRICEMAT",
          "PROB",
          "PRODUCT",
          "PROPER",
          "PV",
          "QUARTILE",
          "QUARTILE.EXC",
          "QUARTILE.INC",
          "QUOTIENT",
          "RADIANS",
          "RAND",
          "RANDARRAY",
          "RANDBETWEEN",
          "RANK.AVG",
          "RANK.EQ",
          "RANK",
          "RATE",
          "RECEIVED",
          "REDUCE",
          "REGISTER.ID",
          "REPLACE",
          "REPLACEB",
          "REPT",
          "RIGHT",
          "RIGHTB",
          "ROMAN",
          "ROUND",
          "ROUNDDOWN",
          "ROUNDUP",
          "ROW",
          "ROWS",
          "RRI",
          "RSQ",
          "RTD",
          "SCAN",
          "SEARCH",
          "SEARCHB",
          "SEC",
          "SECH",
          "SECOND",
          "SEQUENCE",
          "SERIESSUM",
          "SHEET",
          "SHEETS",
          "SIGN",
          "SIN",
          "SINH",
          "SKEW",
          "SKEW.P",
          "SLN",
          "SLOPE",
          "SMALL",
          "SORT",
          "SORTBY",
          "SQRT",
          "SQRTPI",
          "SQL.REQUEST",
          "STANDARDIZE",
          "STOCKHISTORY",
          "STDEV",
          "STDEV.P",
          "STDEV.S",
          "STDEVA",
          "STDEVP",
          "STDEVPA",
          "STEYX",
          "SUBSTITUTE",
          "SUBTOTAL",
          "SUM",
          "SUMIF",
          "SUMIFS",
          "SUMPRODUCT",
          "SUMSQ",
          "SUMX2MY2",
          "SUMX2PY2",
          "SUMXMY2",
          "SWITCH",
          "SYD",
          "T",
          "TAN",
          "TANH",
          "TAKE",
          "TBILLEQ",
          "TBILLPRICE",
          "TBILLYIELD",
          "T.DIST",
          "T.DIST.2T",
          "T.DIST.RT",
          "TDIST",
          "TEXT",
          "TEXTAFTER",
          "TEXTBEFORE",
          "TEXTJOIN",
          "TEXTSPLIT",
          "TIME",
          "TIMEVALUE",
          "T.INV",
          "T.INV.2T",
          "TINV",
          "TOCOL",
          "TOROW",
          "TODAY",
          "TRANSPOSE",
          "TREND",
          "TRIM",
          "TRIMMEAN",
          "TRUE",
          "TRUNC",
          "T.TEST",
          "TTEST",
          "TYPE",
          "UNICHAR",
          "UNICODE",
          "UNIQUE",
          "UPPER",
          "VALUE",
          "VALUETOTEXT",
          "VAR",
          "VAR.P",
          "VAR.S",
          "VARA",
          "VARP",
          "VARPA",
          "VDB",
          "VLOOKUP",
          "VSTACK",
          "WEBSERVICE",
          "WEEKDAY",
          "WEEKNUM",
          "WEIBULL",
          "WEIBULL.DIST",
          "WORKDAY",
          "WORKDAY.INTL",
          "WRAPCOLS",
          "WRAPROWS",
          "XIRR",
          "XLOOKUP",
          "XMATCH",
          "XNPV",
          "XOR",
          "YEAR",
          "YEARFRAC",
          "YIELD",
          "YIELDDISC",
          "YIELDMAT",
          "Z.TEST",
          "ZTEST"
        ]
      },
      contains: [
        {
          /* matches a beginning equal sign found in Excel formula examples */
          begin: /^=/,
          end: /[^=]/,
          returnEnd: true,
          illegal: /=/,
          /* only allow single equal sign at front of line */
          relevance: 10
        },
        /* technically, there can be more than 2 letters in column names, but this prevents conflict with some keywords */
        {
          /* matches a reference to a single cell */
          className: "symbol",
          begin: /\b[A-Z]{1,2}\d+\b/,
          end: /[^\d]/,
          excludeEnd: true,
          relevance: 0
        },
        {
          /* matches a reference to a range of cells */
          className: "symbol",
          begin: /[A-Z]{0,2}\d*:[A-Z]{0,2}\d*/,
          relevance: 0
        },
        e2.BACKSLASH_ESCAPE,
        e2.QUOTE_STRING_MODE,
        {
          className: "number",
          begin: e2.NUMBER_RE + "(%)?",
          relevance: 0
        },
        /* Excel formula comments are done by putting the comment in a function call to N() */
        e2.COMMENT(
          /\bN\(/,
          /\)/,
          {
            excludeBegin: true,
            excludeEnd: true,
            illegal: /\n/
          }
        )
      ]
    };
  }
  return Oi = t2, Oi;
}
var Ai, w_;
function NR() {
  if (w_)
    return Ai;
  w_ = 1;
  function t2(e2) {
    return {
      name: "FIX",
      contains: [
        {
          begin: /[^\u2401\u0001]+/,
          end: /[\u2401\u0001]/,
          excludeEnd: true,
          returnBegin: true,
          returnEnd: false,
          contains: [
            {
              begin: /([^\u2401\u0001=]+)/,
              end: /=([^\u2401\u0001=]+)/,
              returnEnd: true,
              returnBegin: false,
              className: "attr"
            },
            {
              begin: /=/,
              end: /([\u2401\u0001])/,
              excludeEnd: true,
              excludeBegin: true,
              className: "string"
            }
          ]
        }
      ],
      case_insensitive: true
    };
  }
  return Ai = t2, Ai;
}
var yi, k_;
function vR() {
  if (k_)
    return yi;
  k_ = 1;
  function t2(e2) {
    const n = {
      className: "string",
      begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
    }, i2 = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"'
        }
      ]
    }, a2 = {
      className: "function",
      beginKeywords: "def",
      end: /[:={\[(\n;]/,
      excludeEnd: true,
      contains: [{
        className: "title",
        relevance: 0,
        begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/
      }]
    };
    return {
      name: "Flix",
      keywords: {
        keyword: [
          "case",
          "class",
          "def",
          "else",
          "enum",
          "if",
          "impl",
          "import",
          "in",
          "lat",
          "rel",
          "index",
          "let",
          "match",
          "namespace",
          "switch",
          "type",
          "yield",
          "with"
        ],
        literal: [
          "true",
          "false"
        ]
      },
      contains: [
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        n,
        i2,
        a2,
        e2.C_NUMBER_MODE
      ]
    };
  }
  return yi = t2, yi;
}
var Ii, P_;
function OR() {
  if (P_)
    return Ii;
  P_ = 1;
  function t2(e2) {
    const n = e2.regex, i2 = {
      className: "params",
      begin: "\\(",
      end: "\\)"
    }, r2 = { variants: [
      e2.COMMENT("!", "$", { relevance: 0 }),
      // allow FORTRAN 77 style comments
      e2.COMMENT("^C[ ]", "$", { relevance: 0 }),
      e2.COMMENT("^C$", "$", { relevance: 0 })
    ] }, a2 = /(_[a-z_\d]+)?/, s2 = /([de][+-]?\d+)?/, o2 = {
      className: "number",
      variants: [
        { begin: n.concat(/\b\d+/, /\.(\d*)/, s2, a2) },
        { begin: n.concat(/\b\d+/, s2, a2) },
        { begin: n.concat(/\.\d+/, s2, a2) }
      ],
      relevance: 0
    }, l2 = {
      className: "function",
      beginKeywords: "subroutine function program",
      illegal: "[${=\\n]",
      contains: [
        e2.UNDERSCORE_TITLE_MODE,
        i2
      ]
    }, u2 = {
      className: "string",
      relevance: 0,
      variants: [
        e2.APOS_STRING_MODE,
        e2.QUOTE_STRING_MODE
      ]
    };
    return {
      name: "Fortran",
      case_insensitive: true,
      aliases: [
        "f90",
        "f95"
      ],
      keywords: {
        $pattern: /\b[a-z][a-z0-9_]+\b|\.[a-z][a-z0-9_]+\./,
        keyword: [
          "kind",
          "do",
          "concurrent",
          "local",
          "shared",
          "while",
          "private",
          "call",
          "intrinsic",
          "where",
          "elsewhere",
          "type",
          "endtype",
          "endmodule",
          "endselect",
          "endinterface",
          "end",
          "enddo",
          "endif",
          "if",
          "forall",
          "endforall",
          "only",
          "contains",
          "default",
          "return",
          "stop",
          "then",
          "block",
          "endblock",
          "endassociate",
          "public",
          "subroutine|10",
          "function",
          "program",
          ".and.",
          ".or.",
          ".not.",
          ".le.",
          ".eq.",
          ".ge.",
          ".gt.",
          ".lt.",
          "goto",
          "save",
          "else",
          "use",
          "module",
          "select",
          "case",
          "access",
          "blank",
          "direct",
          "exist",
          "file",
          "fmt",
          "form",
          "formatted",
          "iostat",
          "name",
          "named",
          "nextrec",
          "number",
          "opened",
          "rec",
          "recl",
          "sequential",
          "status",
          "unformatted",
          "unit",
          "continue",
          "format",
          "pause",
          "cycle",
          "exit",
          "c_null_char",
          "c_alert",
          "c_backspace",
          "c_form_feed",
          "flush",
          "wait",
          "decimal",
          "round",
          "iomsg",
          "synchronous",
          "nopass",
          "non_overridable",
          "pass",
          "protected",
          "volatile",
          "abstract",
          "extends",
          "import",
          "non_intrinsic",
          "value",
          "deferred",
          "generic",
          "final",
          "enumerator",
          "class",
          "associate",
          "bind",
          "enum",
          "c_int",
          "c_short",
          "c_long",
          "c_long_long",
          "c_signed_char",
          "c_size_t",
          "c_int8_t",
          "c_int16_t",
          "c_int32_t",
          "c_int64_t",
          "c_int_least8_t",
          "c_int_least16_t",
          "c_int_least32_t",
          "c_int_least64_t",
          "c_int_fast8_t",
          "c_int_fast16_t",
          "c_int_fast32_t",
          "c_int_fast64_t",
          "c_intmax_t",
          "C_intptr_t",
          "c_float",
          "c_double",
          "c_long_double",
          "c_float_complex",
          "c_double_complex",
          "c_long_double_complex",
          "c_bool",
          "c_char",
          "c_null_ptr",
          "c_null_funptr",
          "c_new_line",
          "c_carriage_return",
          "c_horizontal_tab",
          "c_vertical_tab",
          "iso_c_binding",
          "c_loc",
          "c_funloc",
          "c_associated",
          "c_f_pointer",
          "c_ptr",
          "c_funptr",
          "iso_fortran_env",
          "character_storage_size",
          "error_unit",
          "file_storage_size",
          "input_unit",
          "iostat_end",
          "iostat_eor",
          "numeric_storage_size",
          "output_unit",
          "c_f_procpointer",
          "ieee_arithmetic",
          "ieee_support_underflow_control",
          "ieee_get_underflow_mode",
          "ieee_set_underflow_mode",
          "newunit",
          "contiguous",
          "recursive",
          "pad",
          "position",
          "action",
          "delim",
          "readwrite",
          "eor",
          "advance",
          "nml",
          "interface",
          "procedure",
          "namelist",
          "include",
          "sequence",
          "elemental",
          "pure",
          "impure",
          "integer",
          "real",
          "character",
          "complex",
          "logical",
          "codimension",
          "dimension",
          "allocatable|10",
          "parameter",
          "external",
          "implicit|10",
          "none",
          "double",
          "precision",
          "assign",
          "intent",
          "optional",
          "pointer",
          "target",
          "in",
          "out",
          "common",
          "equivalence",
          "data"
        ],
        literal: [
          ".False.",
          ".True."
        ],
        built_in: [
          "alog",
          "alog10",
          "amax0",
          "amax1",
          "amin0",
          "amin1",
          "amod",
          "cabs",
          "ccos",
          "cexp",
          "clog",
          "csin",
          "csqrt",
          "dabs",
          "dacos",
          "dasin",
          "datan",
          "datan2",
          "dcos",
          "dcosh",
          "ddim",
          "dexp",
          "dint",
          "dlog",
          "dlog10",
          "dmax1",
          "dmin1",
          "dmod",
          "dnint",
          "dsign",
          "dsin",
          "dsinh",
          "dsqrt",
          "dtan",
          "dtanh",
          "float",
          "iabs",
          "idim",
          "idint",
          "idnint",
          "ifix",
          "isign",
          "max0",
          "max1",
          "min0",
          "min1",
          "sngl",
          "algama",
          "cdabs",
          "cdcos",
          "cdexp",
          "cdlog",
          "cdsin",
          "cdsqrt",
          "cqabs",
          "cqcos",
          "cqexp",
          "cqlog",
          "cqsin",
          "cqsqrt",
          "dcmplx",
          "dconjg",
          "derf",
          "derfc",
          "dfloat",
          "dgamma",
          "dimag",
          "dlgama",
          "iqint",
          "qabs",
          "qacos",
          "qasin",
          "qatan",
          "qatan2",
          "qcmplx",
          "qconjg",
          "qcos",
          "qcosh",
          "qdim",
          "qerf",
          "qerfc",
          "qexp",
          "qgamma",
          "qimag",
          "qlgama",
          "qlog",
          "qlog10",
          "qmax1",
          "qmin1",
          "qmod",
          "qnint",
          "qsign",
          "qsin",
          "qsinh",
          "qsqrt",
          "qtan",
          "qtanh",
          "abs",
          "acos",
          "aimag",
          "aint",
          "anint",
          "asin",
          "atan",
          "atan2",
          "char",
          "cmplx",
          "conjg",
          "cos",
          "cosh",
          "exp",
          "ichar",
          "index",
          "int",
          "log",
          "log10",
          "max",
          "min",
          "nint",
          "sign",
          "sin",
          "sinh",
          "sqrt",
          "tan",
          "tanh",
          "print",
          "write",
          "dim",
          "lge",
          "lgt",
          "lle",
          "llt",
          "mod",
          "nullify",
          "allocate",
          "deallocate",
          "adjustl",
          "adjustr",
          "all",
          "allocated",
          "any",
          "associated",
          "bit_size",
          "btest",
          "ceiling",
          "count",
          "cshift",
          "date_and_time",
          "digits",
          "dot_product",
          "eoshift",
          "epsilon",
          "exponent",
          "floor",
          "fraction",
          "huge",
          "iand",
          "ibclr",
          "ibits",
          "ibset",
          "ieor",
          "ior",
          "ishft",
          "ishftc",
          "lbound",
          "len_trim",
          "matmul",
          "maxexponent",
          "maxloc",
          "maxval",
          "merge",
          "minexponent",
          "minloc",
          "minval",
          "modulo",
          "mvbits",
          "nearest",
          "pack",
          "present",
          "product",
          "radix",
          "random_number",
          "random_seed",
          "range",
          "repeat",
          "reshape",
          "rrspacing",
          "scale",
          "scan",
          "selected_int_kind",
          "selected_real_kind",
          "set_exponent",
          "shape",
          "size",
          "spacing",
          "spread",
          "sum",
          "system_clock",
          "tiny",
          "transpose",
          "trim",
          "ubound",
          "unpack",
          "verify",
          "achar",
          "iachar",
          "transfer",
          "dble",
          "entry",
          "dprod",
          "cpu_time",
          "command_argument_count",
          "get_command",
          "get_command_argument",
          "get_environment_variable",
          "is_iostat_end",
          "ieee_arithmetic",
          "ieee_support_underflow_control",
          "ieee_get_underflow_mode",
          "ieee_set_underflow_mode",
          "is_iostat_eor",
          "move_alloc",
          "new_line",
          "selected_char_kind",
          "same_type_as",
          "extends_type_of",
          "acosh",
          "asinh",
          "atanh",
          "bessel_j0",
          "bessel_j1",
          "bessel_jn",
          "bessel_y0",
          "bessel_y1",
          "bessel_yn",
          "erf",
          "erfc",
          "erfc_scaled",
          "gamma",
          "log_gamma",
          "hypot",
          "norm2",
          "atomic_define",
          "atomic_ref",
          "execute_command_line",
          "leadz",
          "trailz",
          "storage_size",
          "merge_bits",
          "bge",
          "bgt",
          "ble",
          "blt",
          "dshiftl",
          "dshiftr",
          "findloc",
          "iall",
          "iany",
          "iparity",
          "image_index",
          "lcobound",
          "ucobound",
          "maskl",
          "maskr",
          "num_images",
          "parity",
          "popcnt",
          "poppar",
          "shifta",
          "shiftl",
          "shiftr",
          "this_image",
          "sync",
          "change",
          "team",
          "co_broadcast",
          "co_max",
          "co_min",
          "co_sum",
          "co_reduce"
        ]
      },
      illegal: /\/\*/,
      contains: [
        u2,
        l2,
        // allow `C = value` for assignments so they aren't misdetected
        // as Fortran 77 style comments
        {
          begin: /^C\s*=(?!=)/,
          relevance: 0
        },
        r2,
        o2
      ]
    };
  }
  return Ii = t2, Ii;
}
var Di, F_;
function AR() {
  if (F_)
    return Di;
  F_ = 1;
  function t2(o2) {
    return new RegExp(o2.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&"), "m");
  }
  function e2(o2) {
    return o2 ? typeof o2 == "string" ? o2 : o2.source : null;
  }
  function n(o2) {
    return i2("(?=", o2, ")");
  }
  function i2(...o2) {
    return o2.map((u2) => e2(u2)).join("");
  }
  function r2(o2) {
    const l2 = o2[o2.length - 1];
    return typeof l2 == "object" && l2.constructor === Object ? (o2.splice(o2.length - 1, 1), l2) : {};
  }
  function a2(...o2) {
    return "(" + (r2(o2).capture ? "" : "?:") + o2.map((_) => e2(_)).join("|") + ")";
  }
  function s2(o2) {
    const l2 = [
      "abstract",
      "and",
      "as",
      "assert",
      "base",
      "begin",
      "class",
      "default",
      "delegate",
      "do",
      "done",
      "downcast",
      "downto",
      "elif",
      "else",
      "end",
      "exception",
      "extern",
      // "false", // literal
      "finally",
      "fixed",
      "for",
      "fun",
      "function",
      "global",
      "if",
      "in",
      "inherit",
      "inline",
      "interface",
      "internal",
      "lazy",
      "let",
      "match",
      "member",
      "module",
      "mutable",
      "namespace",
      "new",
      // "not", // built_in
      // "null", // literal
      "of",
      "open",
      "or",
      "override",
      "private",
      "public",
      "rec",
      "return",
      "static",
      "struct",
      "then",
      "to",
      // "true", // literal
      "try",
      "type",
      "upcast",
      "use",
      "val",
      "void",
      "when",
      "while",
      "with",
      "yield"
    ], u2 = {
      // monad builder keywords (matches before non-bang keywords)
      scope: "keyword",
      match: /\b(yield|return|let|do|match|use)!/
    }, _ = [
      "if",
      "else",
      "endif",
      "line",
      "nowarn",
      "light",
      "r",
      "i",
      "I",
      "load",
      "time",
      "help",
      "quit"
    ], d2 = [
      "true",
      "false",
      "null",
      "Some",
      "None",
      "Ok",
      "Error",
      "infinity",
      "infinityf",
      "nan",
      "nanf"
    ], f2 = [
      "__LINE__",
      "__SOURCE_DIRECTORY__",
      "__SOURCE_FILE__"
    ], b = [
      // basic types
      "bool",
      "byte",
      "sbyte",
      "int8",
      "int16",
      "int32",
      "uint8",
      "uint16",
      "uint32",
      "int",
      "uint",
      "int64",
      "uint64",
      "nativeint",
      "unativeint",
      "decimal",
      "float",
      "double",
      "float32",
      "single",
      "char",
      "string",
      "unit",
      "bigint",
      // other native types or lowercase aliases
      "option",
      "voption",
      "list",
      "array",
      "seq",
      "byref",
      "exn",
      "inref",
      "nativeptr",
      "obj",
      "outref",
      "voidptr",
      // other important FSharp types
      "Result"
    ], E2 = {
      keyword: l2,
      literal: d2,
      built_in: [
        // Somewhat arbitrary list of builtin functions and values.
        // Most of them are declared in Microsoft.FSharp.Core
        // I tried to stay relevant by adding only the most idiomatic
        // and most used symbols that are not already declared as types.
        "not",
        "ref",
        "raise",
        "reraise",
        "dict",
        "readOnlyDict",
        "set",
        "get",
        "enum",
        "sizeof",
        "typeof",
        "typedefof",
        "nameof",
        "nullArg",
        "invalidArg",
        "invalidOp",
        "id",
        "fst",
        "snd",
        "ignore",
        "lock",
        "using",
        "box",
        "unbox",
        "tryUnbox",
        "printf",
        "printfn",
        "sprintf",
        "eprintf",
        "eprintfn",
        "fprintf",
        "fprintfn",
        "failwith",
        "failwithf"
      ],
      "variable.constant": f2
    }, S = {
      variants: [
        o2.COMMENT(/\(\*(?!\))/, /\*\)/, {
          contains: ["self"]
        }),
        o2.C_LINE_COMMENT_MODE
      ]
    }, p2 = /[a-zA-Z_](\w|')*/, m2 = {
      scope: "variable",
      begin: /``/,
      end: /``/
    }, R2 = /\B('|\^)/, T = {
      scope: "symbol",
      variants: [
        // the type name is a quoted identifier:
        { match: i2(R2, /``.*?``/) },
        // the type name is a normal identifier (we don't use IDENTIFIER_RE because there cannot be another apostrophe here):
        { match: i2(R2, o2.UNDERSCORE_IDENT_RE) }
      ],
      relevance: 0
    }, h2 = function({ includeEqual: Ce }) {
      let Te2;
      Ce ? Te2 = "!%&*+-/<=>@^|~?" : Te2 = "!%&*+-/<>@^|~?";
      const ne2 = Array.from(Te2), ae = i2("[", ...ne2.map(t2), "]"), pe = a2(ae, /\./), fe2 = i2(pe, n(pe)), Ne = a2(
        i2(fe2, pe, "*"),
        // Matches at least 2 chars operators
        i2(ae, "+")
        // Matches at least one char operators
      );
      return {
        scope: "operator",
        match: a2(
          // symbolic operators:
          Ne,
          // other symbolic keywords:
          // Type casting and conversion operators:
          /:\?>/,
          /:\?/,
          /:>/,
          /:=/,
          // Reference cell assignment
          /::?/,
          // : or ::
          /\$/
        ),
        // A single $ can be used as an operator
        relevance: 0
      };
    }, C2 = h2({ includeEqual: true }), A2 = h2({ includeEqual: false }), I2 = function(Ce, Te2) {
      return {
        begin: i2(
          // a type annotation is a
          Ce,
          // should be a colon or the 'of' keyword
          n(
            // that has to be followed by
            i2(
              /\s*/,
              // optional space
              a2(
                // then either of:
                /\w/,
                // word
                /'/,
                // generic type name
                /\^/,
                // generic type name
                /#/,
                // flexible type name
                /``/,
                // quoted type name
                /\(/,
                // parens type expression
                /{\|/
                // anonymous type annotation
              )
            )
          )
        ),
        beginScope: Te2,
        // BUG: because ending with \n is necessary for some cases, multi-line type annotations are not properly supported.
        // Examples where \n is required at the end:
        // - abstract member definitions in classes: abstract Property : int * string
        // - return type annotations: let f f' = f' () : returnTypeAnnotation
        // - record fields definitions: { A : int \n B : string }
        end: n(
          a2(
            /\n/,
            /=/
          )
        ),
        relevance: 0,
        // we need the known types, and we need the type constraint keywords and literals. e.g.: when 'a : null
        keywords: o2.inherit(E2, { type: b }),
        contains: [
          S,
          T,
          o2.inherit(m2, { scope: null }),
          // match to avoid strange patterns inside that may break the parsing
          A2
        ]
      };
    }, v2 = I2(/:/, "operator"), x = I2(/\bof\b/, "keyword"), M = {
      begin: [
        /(^|\s+)/,
        // prevents matching the following: `match s.stype with`
        /type/,
        /\s+/,
        p2
      ],
      beginScope: {
        2: "keyword",
        4: "title.class"
      },
      end: n(/\(|=|$/),
      keywords: E2,
      // match keywords in type constraints. e.g.: when 'a : null
      contains: [
        S,
        o2.inherit(m2, { scope: null }),
        // match to avoid strange patterns inside that may break the parsing
        T,
        {
          // For visual consistency, highlight type brackets as operators.
          scope: "operator",
          match: /<|>/
        },
        v2
        // generic types can have constraints, which are type annotations. e.g. type MyType<'T when 'T : delegate<obj * string>> =
      ]
    }, B2 = {
      // computation expressions:
      scope: "computation-expression",
      // BUG: might conflict with record deconstruction. e.g. let f { Name = name } = name // will highlight f
      match: /\b[_a-z]\w*(?=\s*\{)/
    }, G2 = {
      // preprocessor directives and fsi commands:
      begin: [
        /^\s*/,
        i2(/#/, a2(..._)),
        /\b/
      ],
      beginScope: { 2: "meta" },
      end: n(/\s|$/)
    }, D = {
      variants: [
        o2.BINARY_NUMBER_MODE,
        o2.C_NUMBER_MODE
      ]
    }, w = {
      scope: "string",
      begin: /"/,
      end: /"/,
      contains: [
        o2.BACKSLASH_ESCAPE
      ]
    }, L = {
      scope: "string",
      begin: /@"/,
      end: /"/,
      contains: [
        {
          match: /""/
          // escaped "
        },
        o2.BACKSLASH_ESCAPE
      ]
    }, q2 = {
      scope: "string",
      begin: /"""/,
      end: /"""/,
      relevance: 2
    }, z = {
      scope: "subst",
      begin: /\{/,
      end: /\}/,
      keywords: E2
    }, re = {
      scope: "string",
      begin: /\$"/,
      end: /"/,
      contains: [
        {
          match: /\{\{/
          // escaped {
        },
        {
          match: /\}\}/
          // escaped }
        },
        o2.BACKSLASH_ESCAPE,
        z
      ]
    }, j = {
      scope: "string",
      begin: /(\$@|@\$)"/,
      end: /"/,
      contains: [
        {
          match: /\{\{/
          // escaped {
        },
        {
          match: /\}\}/
          // escaped }
        },
        {
          match: /""/
        },
        o2.BACKSLASH_ESCAPE,
        z
      ]
    }, ue = {
      scope: "string",
      begin: /\$"""/,
      end: /"""/,
      contains: [
        {
          match: /\{\{/
          // escaped {
        },
        {
          match: /\}\}/
          // escaped }
        },
        z
      ],
      relevance: 2
    }, se2 = {
      scope: "string",
      match: i2(
        /'/,
        a2(
          /[^\\']/,
          // either a single non escaped char...
          /\\(?:.|\d{3}|x[a-fA-F\d]{2}|u[a-fA-F\d]{4}|U[a-fA-F\d]{8})/
          // ...or an escape sequence
        ),
        /'/
      )
    };
    return z.contains = [
      j,
      re,
      L,
      w,
      se2,
      u2,
      S,
      m2,
      v2,
      B2,
      G2,
      D,
      T,
      C2
    ], {
      name: "F#",
      aliases: [
        "fs",
        "f#"
      ],
      keywords: E2,
      illegal: /\/\*/,
      classNameAliases: {
        "computation-expression": "keyword"
      },
      contains: [
        u2,
        {
          variants: [
            ue,
            j,
            re,
            q2,
            L,
            w,
            se2
          ]
        },
        S,
        m2,
        M,
        {
          // e.g. [<Attributes("")>] or [<``module``: MyCustomAttributeThatWorksOnModules>]
          // or [<Sealed; NoEquality; NoComparison; CompiledName("FSharpAsync`1")>]
          scope: "meta",
          begin: /\[</,
          end: />\]/,
          relevance: 2,
          contains: [
            m2,
            // can contain any constant value
            q2,
            L,
            w,
            se2,
            D
          ]
        },
        x,
        v2,
        B2,
        G2,
        D,
        T,
        C2
      ]
    };
  }
  return Di = s2, Di;
}
var xi, U_;
function yR() {
  if (U_)
    return xi;
  U_ = 1;
  function t2(e2) {
    const n = e2.regex, i2 = {
      keyword: "abort acronym acronyms alias all and assign binary card diag display else eq file files for free ge gt if integer le loop lt maximizing minimizing model models ne negative no not option options or ord positive prod put putpage puttl repeat sameas semicont semiint smax smin solve sos1 sos2 sum system table then until using while xor yes",
      literal: "eps inf na",
      built_in: "abs arccos arcsin arctan arctan2 Beta betaReg binomial ceil centropy cos cosh cvPower div div0 eDist entropy errorf execSeed exp fact floor frac gamma gammaReg log logBeta logGamma log10 log2 mapVal max min mod ncpCM ncpF ncpVUpow ncpVUsin normal pi poly power randBinomial randLinear randTriangle round rPower sigmoid sign signPower sin sinh slexp sllog10 slrec sqexp sqlog10 sqr sqrec sqrt tan tanh trunc uniform uniformInt vcPower bool_and bool_eqv bool_imp bool_not bool_or bool_xor ifThen rel_eq rel_ge rel_gt rel_le rel_lt rel_ne gday gdow ghour gleap gmillisec gminute gmonth gsecond gyear jdate jnow jstart jtime errorLevel execError gamsRelease gamsVersion handleCollect handleDelete handleStatus handleSubmit heapFree heapLimit heapSize jobHandle jobKill jobStatus jobTerminate licenseLevel licenseStatus maxExecError sleep timeClose timeComp timeElapsed timeExec timeStart"
    }, r2 = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      excludeBegin: true,
      excludeEnd: true
    }, a2 = {
      className: "symbol",
      variants: [
        { begin: /=[lgenxc]=/ },
        { begin: /\$/ }
      ]
    }, s2 = {
      // One-line quoted comment string
      className: "comment",
      variants: [
        {
          begin: "'",
          end: "'"
        },
        {
          begin: '"',
          end: '"'
        }
      ],
      illegal: "\\n",
      contains: [e2.BACKSLASH_ESCAPE]
    }, o2 = {
      begin: "/",
      end: "/",
      keywords: i2,
      contains: [
        s2,
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        e2.QUOTE_STRING_MODE,
        e2.APOS_STRING_MODE,
        e2.C_NUMBER_MODE
      ]
    }, l2 = /[a-z0-9&#*=?@\\><:,()$[\]_.{}!+%^-]+/, u2 = {
      // Parameter/set/variable description text
      begin: /[a-z][a-z0-9_]*(\([a-z0-9_, ]*\))?[ \t]+/,
      excludeBegin: true,
      end: "$",
      endsWithParent: true,
      contains: [
        s2,
        o2,
        {
          className: "comment",
          // one comment word, then possibly more
          begin: n.concat(
            l2,
            // [ ] because \s would be too broad (matching newlines)
            n.anyNumberOfTimes(n.concat(/[ ]+/, l2))
          ),
          relevance: 0
        }
      ]
    };
    return {
      name: "GAMS",
      aliases: ["gms"],
      case_insensitive: true,
      keywords: i2,
      contains: [
        e2.COMMENT(/^\$ontext/, /^\$offtext/),
        {
          className: "meta",
          begin: "^\\$[a-z0-9]+",
          end: "$",
          returnBegin: true,
          contains: [
            {
              className: "keyword",
              begin: "^\\$[a-z0-9]+"
            }
          ]
        },
        e2.COMMENT("^\\*", "$"),
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        e2.QUOTE_STRING_MODE,
        e2.APOS_STRING_MODE,
        // Declarations
        {
          beginKeywords: "set sets parameter parameters variable variables scalar scalars equation equations",
          end: ";",
          contains: [
            e2.COMMENT("^\\*", "$"),
            e2.C_LINE_COMMENT_MODE,
            e2.C_BLOCK_COMMENT_MODE,
            e2.QUOTE_STRING_MODE,
            e2.APOS_STRING_MODE,
            o2,
            u2
          ]
        },
        {
          // table environment
          beginKeywords: "table",
          end: ";",
          returnBegin: true,
          contains: [
            {
              // table header row
              beginKeywords: "table",
              end: "$",
              contains: [u2]
            },
            e2.COMMENT("^\\*", "$"),
            e2.C_LINE_COMMENT_MODE,
            e2.C_BLOCK_COMMENT_MODE,
            e2.QUOTE_STRING_MODE,
            e2.APOS_STRING_MODE,
            e2.C_NUMBER_MODE
            // Table does not contain DESCTEXT or ASSIGNMENT
          ]
        },
        // Function definitions
        {
          className: "function",
          begin: /^[a-z][a-z0-9_,\-+' ()$]+\.{2}/,
          returnBegin: true,
          contains: [
            {
              // Function title
              className: "title",
              begin: /^[a-z0-9_]+/
            },
            r2,
            a2
          ]
        },
        e2.C_NUMBER_MODE,
        a2
      ]
    };
  }
  return xi = t2, xi;
}
var Li, B_;
function IR() {
  if (B_)
    return Li;
  B_ = 1;
  function t2(e2) {
    const n = {
      keyword: "bool break call callexe checkinterrupt clear clearg closeall cls comlog compile continue create debug declare delete disable dlibrary dllcall do dos ed edit else elseif enable end endfor endif endp endo errorlog errorlogat expr external fn for format goto gosub graph if keyword let lib library line load loadarray loadexe loadf loadk loadm loadp loads loadx local locate loopnextindex lprint lpwidth lshow matrix msym ndpclex new open output outwidth plot plotsym pop prcsn print printdos proc push retp return rndcon rndmod rndmult rndseed run save saveall screen scroll setarray show sparse stop string struct system trace trap threadfor threadendfor threadbegin threadjoin threadstat threadend until use while winprint ne ge le gt lt and xor or not eq eqv",
      built_in: "abs acf aconcat aeye amax amean AmericanBinomCall AmericanBinomCall_Greeks AmericanBinomCall_ImpVol AmericanBinomPut AmericanBinomPut_Greeks AmericanBinomPut_ImpVol AmericanBSCall AmericanBSCall_Greeks AmericanBSCall_ImpVol AmericanBSPut AmericanBSPut_Greeks AmericanBSPut_ImpVol amin amult annotationGetDefaults annotationSetBkd annotationSetFont annotationSetLineColor annotationSetLineStyle annotationSetLineThickness annualTradingDays arccos arcsin areshape arrayalloc arrayindex arrayinit arraytomat asciiload asclabel astd astds asum atan atan2 atranspose axmargin balance band bandchol bandcholsol bandltsol bandrv bandsolpd bar base10 begwind besselj bessely beta box boxcox cdfBeta cdfBetaInv cdfBinomial cdfBinomialInv cdfBvn cdfBvn2 cdfBvn2e cdfCauchy cdfCauchyInv cdfChic cdfChii cdfChinc cdfChincInv cdfExp cdfExpInv cdfFc cdfFnc cdfFncInv cdfGam cdfGenPareto cdfHyperGeo cdfLaplace cdfLaplaceInv cdfLogistic cdfLogisticInv cdfmControlCreate cdfMvn cdfMvn2e cdfMvnce cdfMvne cdfMvt2e cdfMvtce cdfMvte cdfN cdfN2 cdfNc cdfNegBinomial cdfNegBinomialInv cdfNi cdfPoisson cdfPoissonInv cdfRayleigh cdfRayleighInv cdfTc cdfTci cdfTnc cdfTvn cdfWeibull cdfWeibullInv cdir ceil ChangeDir chdir chiBarSquare chol choldn cholsol cholup chrs close code cols colsf combinate combinated complex con cond conj cons ConScore contour conv convertsatostr convertstrtosa corrm corrms corrvc corrx corrxs cos cosh counts countwts crossprd crout croutp csrcol csrlin csvReadM csvReadSA cumprodc cumsumc curve cvtos datacreate datacreatecomplex datalist dataload dataloop dataopen datasave date datestr datestring datestrymd dayinyr dayofweek dbAddDatabase dbClose dbCommit dbCreateQuery dbExecQuery dbGetConnectOptions dbGetDatabaseName dbGetDriverName dbGetDrivers dbGetHostName dbGetLastErrorNum dbGetLastErrorText dbGetNumericalPrecPolicy dbGetPassword dbGetPort dbGetTableHeaders dbGetTables dbGetUserName dbHasFeature dbIsDriverAvailable dbIsOpen dbIsOpenError dbOpen dbQueryBindValue dbQueryClear dbQueryCols dbQueryExecPrepared dbQueryFetchAllM dbQueryFetchAllSA dbQueryFetchOneM dbQueryFetchOneSA dbQueryFinish dbQueryGetBoundValue dbQueryGetBoundValues dbQueryGetField dbQueryGetLastErrorNum dbQueryGetLastErrorText dbQueryGetLastInsertID dbQueryGetLastQuery dbQueryGetPosition dbQueryIsActive dbQueryIsForwardOnly dbQueryIsNull dbQueryIsSelect dbQueryIsValid dbQueryPrepare dbQueryRows dbQuerySeek dbQuerySeekFirst dbQuerySeekLast dbQuerySeekNext dbQuerySeekPrevious dbQuerySetForwardOnly dbRemoveDatabase dbRollback dbSetConnectOptions dbSetDatabaseName dbSetHostName dbSetNumericalPrecPolicy dbSetPort dbSetUserName dbTransaction DeleteFile delif delrows denseToSp denseToSpRE denToZero design det detl dfft dffti diag diagrv digamma doswin DOSWinCloseall DOSWinOpen dotfeq dotfeqmt dotfge dotfgemt dotfgt dotfgtmt dotfle dotflemt dotflt dotfltmt dotfne dotfnemt draw drop dsCreate dstat dstatmt dstatmtControlCreate dtdate dtday dttime dttodtv dttostr dttoutc dtvnormal dtvtodt dtvtoutc dummy dummybr dummydn eig eigh eighv eigv elapsedTradingDays endwind envget eof eqSolve eqSolvemt eqSolvemtControlCreate eqSolvemtOutCreate eqSolveset erf erfc erfccplx erfcplx error etdays ethsec etstr EuropeanBinomCall EuropeanBinomCall_Greeks EuropeanBinomCall_ImpVol EuropeanBinomPut EuropeanBinomPut_Greeks EuropeanBinomPut_ImpVol EuropeanBSCall EuropeanBSCall_Greeks EuropeanBSCall_ImpVol EuropeanBSPut EuropeanBSPut_Greeks EuropeanBSPut_ImpVol exctsmpl exec execbg exp extern eye fcheckerr fclearerr feq feqmt fflush fft ffti fftm fftmi fftn fge fgemt fgets fgetsa fgetsat fgetst fgt fgtmt fileinfo filesa fle flemt floor flt fltmt fmod fne fnemt fonts fopen formatcv formatnv fputs fputst fseek fstrerror ftell ftocv ftos ftostrC gamma gammacplx gammaii gausset gdaAppend gdaCreate gdaDStat gdaDStatMat gdaGetIndex gdaGetName gdaGetNames gdaGetOrders gdaGetType gdaGetTypes gdaGetVarInfo gdaIsCplx gdaLoad gdaPack gdaRead gdaReadByIndex gdaReadSome gdaReadSparse gdaReadStruct gdaReportVarInfo gdaSave gdaUpdate gdaUpdateAndPack gdaVars gdaWrite gdaWrite32 gdaWriteSome getarray getdims getf getGAUSShome getmatrix getmatrix4D getname getnamef getNextTradingDay getNextWeekDay getnr getorders getpath getPreviousTradingDay getPreviousWeekDay getRow getscalar3D getscalar4D getTrRow getwind glm gradcplx gradMT gradMTm gradMTT gradMTTm gradp graphprt graphset hasimag header headermt hess hessMT hessMTg hessMTgw hessMTm hessMTmw hessMTT hessMTTg hessMTTgw hessMTTm hessMTw hessp hist histf histp hsec imag indcv indexcat indices indices2 indicesf indicesfn indnv indsav integrate1d integrateControlCreate intgrat2 intgrat3 inthp1 inthp2 inthp3 inthp4 inthpControlCreate intquad1 intquad2 intquad3 intrleav intrleavsa intrsect intsimp inv invpd invswp iscplx iscplxf isden isinfnanmiss ismiss key keyav keyw lag lag1 lagn lapEighb lapEighi lapEighvb lapEighvi lapgEig lapgEigh lapgEighv lapgEigv lapgSchur lapgSvdcst lapgSvds lapgSvdst lapSvdcusv lapSvds lapSvdusv ldlp ldlsol linSolve listwise ln lncdfbvn lncdfbvn2 lncdfmvn lncdfn lncdfn2 lncdfnc lnfact lngammacplx lnpdfmvn lnpdfmvt lnpdfn lnpdft loadd loadstruct loadwind loess loessmt loessmtControlCreate log loglog logx logy lower lowmat lowmat1 ltrisol lu lusol machEpsilon make makevars makewind margin matalloc matinit mattoarray maxbytes maxc maxindc maxv maxvec mbesselei mbesselei0 mbesselei1 mbesseli mbesseli0 mbesseli1 meanc median mergeby mergevar minc minindc minv miss missex missrv moment momentd movingave movingaveExpwgt movingaveWgt nextindex nextn nextnevn nextwind ntos null null1 numCombinations ols olsmt olsmtControlCreate olsqr olsqr2 olsqrmt ones optn optnevn orth outtyp pacf packedToSp packr parse pause pdfCauchy pdfChi pdfExp pdfGenPareto pdfHyperGeo pdfLaplace pdfLogistic pdfn pdfPoisson pdfRayleigh pdfWeibull pi pinv pinvmt plotAddArrow plotAddBar plotAddBox plotAddHist plotAddHistF plotAddHistP plotAddPolar plotAddScatter plotAddShape plotAddTextbox plotAddTS plotAddXY plotArea plotBar plotBox plotClearLayout plotContour plotCustomLayout plotGetDefaults plotHist plotHistF plotHistP plotLayout plotLogLog plotLogX plotLogY plotOpenWindow plotPolar plotSave plotScatter plotSetAxesPen plotSetBar plotSetBarFill plotSetBarStacked plotSetBkdColor plotSetFill plotSetGrid plotSetLegend plotSetLineColor plotSetLineStyle plotSetLineSymbol plotSetLineThickness plotSetNewWindow plotSetTitle plotSetWhichYAxis plotSetXAxisShow plotSetXLabel plotSetXRange plotSetXTicInterval plotSetXTicLabel plotSetYAxisShow plotSetYLabel plotSetYRange plotSetZAxisShow plotSetZLabel plotSurface plotTS plotXY polar polychar polyeval polygamma polyint polymake polymat polymroot polymult polyroot pqgwin previousindex princomp printfm printfmt prodc psi putarray putf putvals pvCreate pvGetIndex pvGetParNames pvGetParVector pvLength pvList pvPack pvPacki pvPackm pvPackmi pvPacks pvPacksi pvPacksm pvPacksmi pvPutParVector pvTest pvUnpack QNewton QNewtonmt QNewtonmtControlCreate QNewtonmtOutCreate QNewtonSet QProg QProgmt QProgmtInCreate qqr qqre qqrep qr qre qrep qrsol qrtsol qtyr qtyre qtyrep quantile quantiled qyr qyre qyrep qz rank rankindx readr real reclassify reclassifyCuts recode recserar recsercp recserrc rerun rescale reshape rets rev rfft rffti rfftip rfftn rfftnp rfftp rndBernoulli rndBeta rndBinomial rndCauchy rndChiSquare rndCon rndCreateState rndExp rndGamma rndGeo rndGumbel rndHyperGeo rndi rndKMbeta rndKMgam rndKMi rndKMn rndKMnb rndKMp rndKMu rndKMvm rndLaplace rndLCbeta rndLCgam rndLCi rndLCn rndLCnb rndLCp rndLCu rndLCvm rndLogNorm rndMTu rndMVn rndMVt rndn rndnb rndNegBinomial rndp rndPoisson rndRayleigh rndStateSkip rndu rndvm rndWeibull rndWishart rotater round rows rowsf rref sampleData satostrC saved saveStruct savewind scale scale3d scalerr scalinfnanmiss scalmiss schtoc schur searchsourcepath seekr select selif seqa seqm setdif setdifsa setvars setvwrmode setwind shell shiftr sin singleindex sinh sleep solpd sortc sortcc sortd sorthc sorthcc sortind sortindc sortmc sortr sortrc spBiconjGradSol spChol spConjGradSol spCreate spDenseSubmat spDiagRvMat spEigv spEye spLDL spline spLU spNumNZE spOnes spreadSheetReadM spreadSheetReadSA spreadSheetWrite spScale spSubmat spToDense spTrTDense spTScalar spZeros sqpSolve sqpSolveMT sqpSolveMTControlCreate sqpSolveMTlagrangeCreate sqpSolveMToutCreate sqpSolveSet sqrt statements stdc stdsc stocv stof strcombine strindx strlen strput strrindx strsect strsplit strsplitPad strtodt strtof strtofcplx strtriml strtrimr strtrunc strtruncl strtruncpad strtruncr submat subscat substute subvec sumc sumr surface svd svd1 svd2 svdcusv svds svdusv sysstate tab tan tanh tempname time timedt timestr timeutc title tkf2eps tkf2ps tocart todaydt toeplitz token topolar trapchk trigamma trimr trunc type typecv typef union unionsa uniqindx uniqindxsa unique uniquesa upmat upmat1 upper utctodt utctodtv utrisol vals varCovMS varCovXS varget vargetl varmall varmares varput varputl vartypef vcm vcms vcx vcxs vec vech vecr vector vget view viewxyz vlist vnamecv volume vput vread vtypecv wait waitc walkindex where window writer xlabel xlsGetSheetCount xlsGetSheetSize xlsGetSheetTypes xlsMakeRange xlsReadM xlsReadSA xlsWrite xlsWriteM xlsWriteSA xpnd xtics xy xyz ylabel ytics zeros zeta zlabel ztics cdfEmpirical dot h5create h5open h5read h5readAttribute h5write h5writeAttribute ldl plotAddErrorBar plotAddSurface plotCDFEmpirical plotSetColormap plotSetContourLabels plotSetLegendFont plotSetTextInterpreter plotSetXTicCount plotSetYTicCount plotSetZLevels powerm strjoin sylvester strtrim",
      literal: "DB_AFTER_LAST_ROW DB_ALL_TABLES DB_BATCH_OPERATIONS DB_BEFORE_FIRST_ROW DB_BLOB DB_EVENT_NOTIFICATIONS DB_FINISH_QUERY DB_HIGH_PRECISION DB_LAST_INSERT_ID DB_LOW_PRECISION_DOUBLE DB_LOW_PRECISION_INT32 DB_LOW_PRECISION_INT64 DB_LOW_PRECISION_NUMBERS DB_MULTIPLE_RESULT_SETS DB_NAMED_PLACEHOLDERS DB_POSITIONAL_PLACEHOLDERS DB_PREPARED_QUERIES DB_QUERY_SIZE DB_SIMPLE_LOCKING DB_SYSTEM_TABLES DB_TABLES DB_TRANSACTIONS DB_UNICODE DB_VIEWS __STDIN __STDOUT __STDERR __FILE_DIR"
    }, i2 = e2.COMMENT("@", "@"), r2 = {
      className: "meta",
      begin: "#",
      end: "$",
      keywords: { keyword: "define definecs|10 undef ifdef ifndef iflight ifdllcall ifmac ifos2win ifunix else endif lineson linesoff srcfile srcline" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        {
          beginKeywords: "include",
          end: "$",
          keywords: { keyword: "include" },
          contains: [
            {
              className: "string",
              begin: '"',
              end: '"',
              illegal: "\\n"
            }
          ]
        },
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        i2
      ]
    }, a2 = {
      begin: /\bstruct\s+/,
      end: /\s/,
      keywords: "struct",
      contains: [
        {
          className: "type",
          begin: e2.UNDERSCORE_IDENT_RE,
          relevance: 0
        }
      ]
    }, s2 = [
      {
        className: "params",
        begin: /\(/,
        end: /\)/,
        excludeBegin: true,
        excludeEnd: true,
        endsWithParent: true,
        relevance: 0,
        contains: [
          {
            // dots
            className: "literal",
            begin: /\.\.\./
          },
          e2.C_NUMBER_MODE,
          e2.C_BLOCK_COMMENT_MODE,
          i2,
          a2
        ]
      }
    ], o2 = {
      className: "title",
      begin: e2.UNDERSCORE_IDENT_RE,
      relevance: 0
    }, l2 = function(b, c2, E2) {
      const g2 = e2.inherit(
        {
          className: "function",
          beginKeywords: b,
          end: c2,
          excludeEnd: true,
          contains: [].concat(s2)
        },
        {}
      );
      return g2.contains.push(o2), g2.contains.push(e2.C_NUMBER_MODE), g2.contains.push(e2.C_BLOCK_COMMENT_MODE), g2.contains.push(i2), g2;
    }, u2 = {
      // these are explicitly named internal function calls
      className: "built_in",
      begin: "\\b(" + n.built_in.split(" ").join("|") + ")\\b"
    }, _ = {
      className: "string",
      begin: '"',
      end: '"',
      contains: [e2.BACKSLASH_ESCAPE],
      relevance: 0
    }, d2 = {
      // className: "fn_ref",
      begin: e2.UNDERSCORE_IDENT_RE + "\\s*\\(",
      returnBegin: true,
      keywords: n,
      relevance: 0,
      contains: [
        { beginKeywords: n.keyword },
        u2,
        {
          // ambiguously named function calls get a relevance of 0
          className: "built_in",
          begin: e2.UNDERSCORE_IDENT_RE,
          relevance: 0
        }
      ]
    }, f2 = {
      // className: "fn_ref_params",
      begin: /\(/,
      end: /\)/,
      relevance: 0,
      keywords: {
        built_in: n.built_in,
        literal: n.literal
      },
      contains: [
        e2.C_NUMBER_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        i2,
        u2,
        d2,
        _,
        "self"
      ]
    };
    return d2.contains.push(f2), {
      name: "GAUSS",
      aliases: ["gss"],
      case_insensitive: true,
      // language is case-insensitive
      keywords: n,
      illegal: /(\{[%#]|[%#]\}| <- )/,
      contains: [
        e2.C_NUMBER_MODE,
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        i2,
        _,
        r2,
        {
          className: "keyword",
          begin: /\bexternal (matrix|string|array|sparse matrix|struct|proc|keyword|fn)/
        },
        l2("proc keyword", ";"),
        l2("fn", "="),
        {
          beginKeywords: "for threadfor",
          end: /;/,
          // end: /\(/,
          relevance: 0,
          contains: [
            e2.C_BLOCK_COMMENT_MODE,
            i2,
            f2
          ]
        },
        {
          // custom method guard
          // excludes method names from keyword processing
          variants: [
            { begin: e2.UNDERSCORE_IDENT_RE + "\\." + e2.UNDERSCORE_IDENT_RE },
            { begin: e2.UNDERSCORE_IDENT_RE + "\\s*=" }
          ],
          relevance: 0
        },
        d2,
        a2
      ]
    };
  }
  return Li = t2, Li;
}
var Mi, G_;
function DR() {
  if (G_)
    return Mi;
  G_ = 1;
  function t2(e2) {
    const n = e2.regex, i2 = {
      $pattern: /[A-Z]+|%/,
      keyword: [
        // conditions
        "THEN",
        "ELSE",
        "ENDIF",
        "IF",
        // controls
        "GOTO",
        "DO",
        "WHILE",
        "WH",
        "END",
        "CALL",
        // scoping
        "SUB",
        "ENDSUB",
        // comparisons
        "EQ",
        "NE",
        "LT",
        "GT",
        "LE",
        "GE",
        "AND",
        "OR",
        "XOR",
        // start/end of program
        "%"
      ],
      built_in: [
        "ATAN",
        "ABS",
        "ACOS",
        "ASIN",
        "COS",
        "EXP",
        "FIX",
        "FUP",
        "ROUND",
        "LN",
        "SIN",
        "SQRT",
        "TAN",
        "EXISTS"
      ]
    }, r2 = /\b/;
    function a2(c2, E2) {
      if (c2.index === 0)
        return;
      const g2 = c2.input[c2.index - 1];
      g2 >= "0" && g2 <= "9" || g2 !== "_" && E2.ignoreMatch();
    }
    const s2 = /[+-]?((\.\d+)|(\d+)(\.\d*)?)/, o2 = /[GM]\s*\d+(\.\d+)?/, l2 = /T\s*\d+/, u2 = /O\s*\d+/, _ = /O<.+>/, d2 = /[ABCUVWXYZ]\s*/, f2 = /[FHIJKPQRS]\s*/, b = [
      // comments
      e2.COMMENT(/\(/, /\)/),
      e2.COMMENT(/;/, /$/),
      e2.APOS_STRING_MODE,
      e2.QUOTE_STRING_MODE,
      e2.C_NUMBER_MODE,
      // gcodes
      {
        scope: "title.function",
        variants: [
          // G General functions: G0, G5.1, G5.2, …
          // M Misc functions: M0, M55.6, M199, …
          { match: n.concat(r2, o2) },
          {
            begin: o2,
            "on:begin": a2
          },
          // T Tools
          { match: n.concat(r2, l2) },
          {
            begin: l2,
            "on:begin": a2
          }
        ]
      },
      {
        scope: "symbol",
        variants: [
          // O Subroutine ID: O100, O110, …
          { match: n.concat(r2, u2) },
          {
            begin: u2,
            "on:begin": a2
          },
          // O Subroutine name: O<some>, …
          { match: n.concat(r2, _) },
          {
            begin: _,
            "on:begin": a2
          },
          // Checksum at end of line: *71, *199, …
          { match: /\*\s*\d+\s*$/ }
        ]
      },
      {
        scope: "operator",
        // N Line number: N1, N2, N1020, …
        match: /^N\s*\d+/
      },
      {
        scope: "variable",
        match: /-?#\s*\d+/
      },
      {
        scope: "property",
        // Physical axes,
        variants: [
          { match: n.concat(r2, d2, s2) },
          {
            begin: n.concat(d2, s2),
            "on:begin": a2
          }
        ]
      },
      {
        scope: "params",
        // Different types of parameters
        variants: [
          { match: n.concat(r2, f2, s2) },
          {
            begin: n.concat(f2, s2),
            "on:begin": a2
          }
        ]
      }
    ];
    return {
      name: "G-code (ISO 6983)",
      aliases: ["nc"],
      // Some implementations (CNC controls) of G-code are interoperable with uppercase and lowercase letters seamlessly.
      // However, most prefer all uppercase and uppercase is customary.
      case_insensitive: true,
      // TODO: post v12 with the use of look-behind this can be enabled
      disableAutodetect: true,
      keywords: i2,
      contains: b
    };
  }
  return Mi = t2, Mi;
}
var wi, Y_;
function xR() {
  if (Y_)
    return wi;
  Y_ = 1;
  function t2(e2) {
    return {
      name: "Gherkin",
      aliases: ["feature"],
      keywords: "Feature Background Ability Business Need Scenario Scenarios Scenario Outline Scenario Template Examples Given And Then But When",
      contains: [
        {
          className: "symbol",
          begin: "\\*",
          relevance: 0
        },
        {
          className: "meta",
          begin: "@[^@\\s]+"
        },
        {
          begin: "\\|",
          end: "\\|\\w*$",
          contains: [
            {
              className: "string",
              begin: "[^|]+"
            }
          ]
        },
        {
          className: "variable",
          begin: "<",
          end: ">"
        },
        e2.HASH_COMMENT_MODE,
        {
          className: "string",
          begin: '"""',
          end: '"""'
        },
        e2.QUOTE_STRING_MODE
      ]
    };
  }
  return wi = t2, wi;
}
var ki, q_;
function LR() {
  if (q_)
    return ki;
  q_ = 1;
  function t2(e2) {
    return {
      name: "GLSL",
      keywords: {
        keyword: (
          // Statements
          "break continue discard do else for if return while switch case default attribute binding buffer ccw centroid centroid varying coherent column_major const cw depth_any depth_greater depth_less depth_unchanged early_fragment_tests equal_spacing flat fractional_even_spacing fractional_odd_spacing highp in index inout invariant invocations isolines layout line_strip lines lines_adjacency local_size_x local_size_y local_size_z location lowp max_vertices mediump noperspective offset origin_upper_left out packed patch pixel_center_integer point_mode points precise precision quads r11f_g11f_b10f r16 r16_snorm r16f r16i r16ui r32f r32i r32ui r8 r8_snorm r8i r8ui readonly restrict rg16 rg16_snorm rg16f rg16i rg16ui rg32f rg32i rg32ui rg8 rg8_snorm rg8i rg8ui rgb10_a2 rgb10_a2ui rgba16 rgba16_snorm rgba16f rgba16i rgba16ui rgba32f rgba32i rgba32ui rgba8 rgba8_snorm rgba8i rgba8ui row_major sample shared smooth std140 std430 stream triangle_strip triangles triangles_adjacency uniform varying vertices volatile writeonly"
        ),
        type: "atomic_uint bool bvec2 bvec3 bvec4 dmat2 dmat2x2 dmat2x3 dmat2x4 dmat3 dmat3x2 dmat3x3 dmat3x4 dmat4 dmat4x2 dmat4x3 dmat4x4 double dvec2 dvec3 dvec4 float iimage1D iimage1DArray iimage2D iimage2DArray iimage2DMS iimage2DMSArray iimage2DRect iimage3D iimageBuffer iimageCube iimageCubeArray image1D image1DArray image2D image2DArray image2DMS image2DMSArray image2DRect image3D imageBuffer imageCube imageCubeArray int isampler1D isampler1DArray isampler2D isampler2DArray isampler2DMS isampler2DMSArray isampler2DRect isampler3D isamplerBuffer isamplerCube isamplerCubeArray ivec2 ivec3 ivec4 mat2 mat2x2 mat2x3 mat2x4 mat3 mat3x2 mat3x3 mat3x4 mat4 mat4x2 mat4x3 mat4x4 sampler1D sampler1DArray sampler1DArrayShadow sampler1DShadow sampler2D sampler2DArray sampler2DArrayShadow sampler2DMS sampler2DMSArray sampler2DRect sampler2DRectShadow sampler2DShadow sampler3D samplerBuffer samplerCube samplerCubeArray samplerCubeArrayShadow samplerCubeShadow image1D uimage1DArray uimage2D uimage2DArray uimage2DMS uimage2DMSArray uimage2DRect uimage3D uimageBuffer uimageCube uimageCubeArray uint usampler1D usampler1DArray usampler2D usampler2DArray usampler2DMS usampler2DMSArray usampler2DRect usampler3D samplerBuffer usamplerCube usamplerCubeArray uvec2 uvec3 uvec4 vec2 vec3 vec4 void",
        built_in: (
          // Constants
          "gl_MaxAtomicCounterBindings gl_MaxAtomicCounterBufferSize gl_MaxClipDistances gl_MaxClipPlanes gl_MaxCombinedAtomicCounterBuffers gl_MaxCombinedAtomicCounters gl_MaxCombinedImageUniforms gl_MaxCombinedImageUnitsAndFragmentOutputs gl_MaxCombinedTextureImageUnits gl_MaxComputeAtomicCounterBuffers gl_MaxComputeAtomicCounters gl_MaxComputeImageUniforms gl_MaxComputeTextureImageUnits gl_MaxComputeUniformComponents gl_MaxComputeWorkGroupCount gl_MaxComputeWorkGroupSize gl_MaxDrawBuffers gl_MaxFragmentAtomicCounterBuffers gl_MaxFragmentAtomicCounters gl_MaxFragmentImageUniforms gl_MaxFragmentInputComponents gl_MaxFragmentInputVectors gl_MaxFragmentUniformComponents gl_MaxFragmentUniformVectors gl_MaxGeometryAtomicCounterBuffers gl_MaxGeometryAtomicCounters gl_MaxGeometryImageUniforms gl_MaxGeometryInputComponents gl_MaxGeometryOutputComponents gl_MaxGeometryOutputVertices gl_MaxGeometryTextureImageUnits gl_MaxGeometryTotalOutputComponents gl_MaxGeometryUniformComponents gl_MaxGeometryVaryingComponents gl_MaxImageSamples gl_MaxImageUnits gl_MaxLights gl_MaxPatchVertices gl_MaxProgramTexelOffset gl_MaxTessControlAtomicCounterBuffers gl_MaxTessControlAtomicCounters gl_MaxTessControlImageUniforms gl_MaxTessControlInputComponents gl_MaxTessControlOutputComponents gl_MaxTessControlTextureImageUnits gl_MaxTessControlTotalOutputComponents gl_MaxTessControlUniformComponents gl_MaxTessEvaluationAtomicCounterBuffers gl_MaxTessEvaluationAtomicCounters gl_MaxTessEvaluationImageUniforms gl_MaxTessEvaluationInputComponents gl_MaxTessEvaluationOutputComponents gl_MaxTessEvaluationTextureImageUnits gl_MaxTessEvaluationUniformComponents gl_MaxTessGenLevel gl_MaxTessPatchComponents gl_MaxTextureCoords gl_MaxTextureImageUnits gl_MaxTextureUnits gl_MaxVaryingComponents gl_MaxVaryingFloats gl_MaxVaryingVectors gl_MaxVertexAtomicCounterBuffers gl_MaxVertexAtomicCounters gl_MaxVertexAttribs gl_MaxVertexImageUniforms gl_MaxVertexOutputComponents gl_MaxVertexOutputVectors gl_MaxVertexTextureImageUnits gl_MaxVertexUniformComponents gl_MaxVertexUniformVectors gl_MaxViewports gl_MinProgramTexelOffset gl_BackColor gl_BackLightModelProduct gl_BackLightProduct gl_BackMaterial gl_BackSecondaryColor gl_ClipDistance gl_ClipPlane gl_ClipVertex gl_Color gl_DepthRange gl_EyePlaneQ gl_EyePlaneR gl_EyePlaneS gl_EyePlaneT gl_Fog gl_FogCoord gl_FogFragCoord gl_FragColor gl_FragCoord gl_FragData gl_FragDepth gl_FrontColor gl_FrontFacing gl_FrontLightModelProduct gl_FrontLightProduct gl_FrontMaterial gl_FrontSecondaryColor gl_GlobalInvocationID gl_InstanceID gl_InvocationID gl_Layer gl_LightModel gl_LightSource gl_LocalInvocationID gl_LocalInvocationIndex gl_ModelViewMatrix gl_ModelViewMatrixInverse gl_ModelViewMatrixInverseTranspose gl_ModelViewMatrixTranspose gl_ModelViewProjectionMatrix gl_ModelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverseTranspose gl_ModelViewProjectionMatrixTranspose gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 gl_Normal gl_NormalMatrix gl_NormalScale gl_NumSamples gl_NumWorkGroups gl_ObjectPlaneQ gl_ObjectPlaneR gl_ObjectPlaneS gl_ObjectPlaneT gl_PatchVerticesIn gl_Point gl_PointCoord gl_PointSize gl_Position gl_PrimitiveID gl_PrimitiveIDIn gl_ProjectionMatrix gl_ProjectionMatrixInverse gl_ProjectionMatrixInverseTranspose gl_ProjectionMatrixTranspose gl_SampleID gl_SampleMask gl_SampleMaskIn gl_SamplePosition gl_SecondaryColor gl_TessCoord gl_TessLevelInner gl_TessLevelOuter gl_TexCoord gl_TextureEnvColor gl_TextureMatrix gl_TextureMatrixInverse gl_TextureMatrixInverseTranspose gl_TextureMatrixTranspose gl_Vertex gl_VertexID gl_ViewportIndex gl_WorkGroupID gl_WorkGroupSize gl_in gl_out EmitStreamVertex EmitVertex EndPrimitive EndStreamPrimitive abs acos acosh all any asin asinh atan atanh atomicAdd atomicAnd atomicCompSwap atomicCounter atomicCounterDecrement atomicCounterIncrement atomicExchange atomicMax atomicMin atomicOr atomicXor barrier bitCount bitfieldExtract bitfieldInsert bitfieldReverse ceil clamp cos cosh cross dFdx dFdy degrees determinant distance dot equal exp exp2 faceforward findLSB findMSB floatBitsToInt floatBitsToUint floor fma fract frexp ftransform fwidth greaterThan greaterThanEqual groupMemoryBarrier imageAtomicAdd imageAtomicAnd imageAtomicCompSwap imageAtomicExchange imageAtomicMax imageAtomicMin imageAtomicOr imageAtomicXor imageLoad imageSize imageStore imulExtended intBitsToFloat interpolateAtCentroid interpolateAtOffset interpolateAtSample inverse inversesqrt isinf isnan ldexp length lessThan lessThanEqual log log2 matrixCompMult max memoryBarrier memoryBarrierAtomicCounter memoryBarrierBuffer memoryBarrierImage memoryBarrierShared min mix mod modf noise1 noise2 noise3 noise4 normalize not notEqual outerProduct packDouble2x32 packHalf2x16 packSnorm2x16 packSnorm4x8 packUnorm2x16 packUnorm4x8 pow radians reflect refract round roundEven shadow1D shadow1DLod shadow1DProj shadow1DProjLod shadow2D shadow2DLod shadow2DProj shadow2DProjLod sign sin sinh smoothstep sqrt step tan tanh texelFetch texelFetchOffset texture texture1D texture1DLod texture1DProj texture1DProjLod texture2D texture2DLod texture2DProj texture2DProjLod texture3D texture3DLod texture3DProj texture3DProjLod textureCube textureCubeLod textureGather textureGatherOffset textureGatherOffsets textureGrad textureGradOffset textureLod textureLodOffset textureOffset textureProj textureProjGrad textureProjGradOffset textureProjLod textureProjLodOffset textureProjOffset textureQueryLevels textureQueryLod textureSize transpose trunc uaddCarry uintBitsToFloat umulExtended unpackDouble2x32 unpackHalf2x16 unpackSnorm2x16 unpackSnorm4x8 unpackUnorm2x16 unpackUnorm4x8 usubBorrow"
        ),
        literal: "true false"
      },
      illegal: '"',
      contains: [
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        e2.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "#",
          end: "$"
        }
      ]
    };
  }
  return ki = t2, ki;
}
var Pi, V_;
function MR() {
  if (V_)
    return Pi;
  V_ = 1;
  function t2(e2) {
    return {
      name: "GML",
      case_insensitive: false,
      // language is case-insensitive
      keywords: {
        keyword: [
          "#endregion",
          "#macro",
          "#region",
          "and",
          "begin",
          "break",
          "case",
          "constructor",
          "continue",
          "default",
          "delete",
          "div",
          "do",
          "else",
          "end",
          "enum",
          "exit",
          "for",
          "function",
          "globalvar",
          "if",
          "mod",
          "new",
          "not",
          "or",
          "repeat",
          "return",
          "static",
          "switch",
          "then",
          "until",
          "var",
          "while",
          "with",
          "xor"
        ],
        built_in: [
          "abs",
          "alarm_get",
          "alarm_set",
          "angle_difference",
          "animcurve_channel_evaluate",
          "animcurve_channel_new",
          "animcurve_create",
          "animcurve_destroy",
          "animcurve_exists",
          "animcurve_get",
          "animcurve_get_channel",
          "animcurve_get_channel_index",
          "animcurve_point_new",
          "ansi_char",
          "application_get_position",
          "application_surface_draw_enable",
          "application_surface_enable",
          "application_surface_is_enabled",
          "arccos",
          "arcsin",
          "arctan",
          "arctan2",
          "array_all",
          "array_any",
          "array_concat",
          "array_contains",
          "array_contains_ext",
          "array_copy",
          "array_copy_while",
          "array_create",
          "array_create_ext",
          "array_delete",
          "array_equals",
          "array_filter",
          "array_filter_ext",
          "array_find_index",
          "array_first",
          "array_foreach",
          "array_get",
          "array_get_index",
          "array_insert",
          "array_intersection",
          "array_last",
          "array_length",
          "array_map",
          "array_map_ext",
          "array_pop",
          "array_push",
          "array_reduce",
          "array_resize",
          "array_reverse",
          "array_reverse_ext",
          "array_set",
          "array_shuffle",
          "array_shuffle_ext",
          "array_sort",
          "array_union",
          "array_unique",
          "array_unique_ext",
          "asset_add_tags",
          "asset_clear_tags",
          "asset_get_ids",
          "asset_get_index",
          "asset_get_tags",
          "asset_get_type",
          "asset_has_any_tag",
          "asset_has_tags",
          "asset_remove_tags",
          "audio_bus_clear_emitters",
          "audio_bus_create",
          "audio_bus_get_emitters",
          "audio_channel_num",
          "audio_create_buffer_sound",
          "audio_create_play_queue",
          "audio_create_stream",
          "audio_create_sync_group",
          "audio_debug",
          "audio_destroy_stream",
          "audio_destroy_sync_group",
          "audio_effect_create",
          "audio_emitter_bus",
          "audio_emitter_create",
          "audio_emitter_exists",
          "audio_emitter_falloff",
          "audio_emitter_free",
          "audio_emitter_gain",
          "audio_emitter_get_bus",
          "audio_emitter_get_gain",
          "audio_emitter_get_listener_mask",
          "audio_emitter_get_pitch",
          "audio_emitter_get_vx",
          "audio_emitter_get_vy",
          "audio_emitter_get_vz",
          "audio_emitter_get_x",
          "audio_emitter_get_y",
          "audio_emitter_get_z",
          "audio_emitter_pitch",
          "audio_emitter_position",
          "audio_emitter_set_listener_mask",
          "audio_emitter_velocity",
          "audio_exists",
          "audio_falloff_set_model",
          "audio_free_buffer_sound",
          "audio_free_play_queue",
          "audio_get_listener_count",
          "audio_get_listener_info",
          "audio_get_listener_mask",
          "audio_get_master_gain",
          "audio_get_name",
          "audio_get_recorder_count",
          "audio_get_recorder_info",
          "audio_get_type",
          "audio_group_get_assets",
          "audio_group_get_gain",
          "audio_group_is_loaded",
          "audio_group_load",
          "audio_group_load_progress",
          "audio_group_name",
          "audio_group_set_gain",
          "audio_group_stop_all",
          "audio_group_unload",
          "audio_is_paused",
          "audio_is_playing",
          "audio_listener_get_data",
          "audio_listener_orientation",
          "audio_listener_position",
          "audio_listener_set_orientation",
          "audio_listener_set_position",
          "audio_listener_set_velocity",
          "audio_listener_velocity",
          "audio_master_gain",
          "audio_pause_all",
          "audio_pause_sound",
          "audio_pause_sync_group",
          "audio_play_in_sync_group",
          "audio_play_sound",
          "audio_play_sound_at",
          "audio_play_sound_ext",
          "audio_play_sound_on",
          "audio_queue_sound",
          "audio_resume_all",
          "audio_resume_sound",
          "audio_resume_sync_group",
          "audio_set_listener_mask",
          "audio_set_master_gain",
          "audio_sound_gain",
          "audio_sound_get_audio_group",
          "audio_sound_get_gain",
          "audio_sound_get_listener_mask",
          "audio_sound_get_loop",
          "audio_sound_get_loop_end",
          "audio_sound_get_loop_start",
          "audio_sound_get_pitch",
          "audio_sound_get_track_position",
          "audio_sound_is_playable",
          "audio_sound_length",
          "audio_sound_loop",
          "audio_sound_loop_end",
          "audio_sound_loop_start",
          "audio_sound_pitch",
          "audio_sound_set_listener_mask",
          "audio_sound_set_track_position",
          "audio_start_recording",
          "audio_start_sync_group",
          "audio_stop_all",
          "audio_stop_recording",
          "audio_stop_sound",
          "audio_stop_sync_group",
          "audio_sync_group_debug",
          "audio_sync_group_get_track_pos",
          "audio_sync_group_is_paused",
          "audio_sync_group_is_playing",
          "audio_system_is_available",
          "audio_system_is_initialised",
          "base64_decode",
          "base64_encode",
          "bool",
          "browser_input_capture",
          "buffer_async_group_begin",
          "buffer_async_group_end",
          "buffer_async_group_option",
          "buffer_base64_decode",
          "buffer_base64_decode_ext",
          "buffer_base64_encode",
          "buffer_compress",
          "buffer_copy",
          "buffer_copy_from_vertex_buffer",
          "buffer_copy_stride",
          "buffer_crc32",
          "buffer_create",
          "buffer_create_from_vertex_buffer",
          "buffer_create_from_vertex_buffer_ext",
          "buffer_decompress",
          "buffer_delete",
          "buffer_exists",
          "buffer_fill",
          "buffer_get_address",
          "buffer_get_alignment",
          "buffer_get_size",
          "buffer_get_surface",
          "buffer_get_type",
          "buffer_load",
          "buffer_load_async",
          "buffer_load_ext",
          "buffer_load_partial",
          "buffer_md5",
          "buffer_peek",
          "buffer_poke",
          "buffer_read",
          "buffer_resize",
          "buffer_save",
          "buffer_save_async",
          "buffer_save_ext",
          "buffer_seek",
          "buffer_set_surface",
          "buffer_set_used_size",
          "buffer_sha1",
          "buffer_sizeof",
          "buffer_tell",
          "buffer_write",
          "call_cancel",
          "call_later",
          "camera_apply",
          "camera_copy_transforms",
          "camera_create",
          "camera_create_view",
          "camera_destroy",
          "camera_get_active",
          "camera_get_begin_script",
          "camera_get_default",
          "camera_get_end_script",
          "camera_get_proj_mat",
          "camera_get_update_script",
          "camera_get_view_angle",
          "camera_get_view_border_x",
          "camera_get_view_border_y",
          "camera_get_view_height",
          "camera_get_view_mat",
          "camera_get_view_speed_x",
          "camera_get_view_speed_y",
          "camera_get_view_target",
          "camera_get_view_width",
          "camera_get_view_x",
          "camera_get_view_y",
          "camera_set_begin_script",
          "camera_set_default",
          "camera_set_end_script",
          "camera_set_proj_mat",
          "camera_set_update_script",
          "camera_set_view_angle",
          "camera_set_view_border",
          "camera_set_view_mat",
          "camera_set_view_pos",
          "camera_set_view_size",
          "camera_set_view_speed",
          "camera_set_view_target",
          "ceil",
          "choose",
          "chr",
          "clamp",
          "clickable_add",
          "clickable_add_ext",
          "clickable_change",
          "clickable_change_ext",
          "clickable_delete",
          "clickable_exists",
          "clickable_set_style",
          "clipboard_get_text",
          "clipboard_has_text",
          "clipboard_set_text",
          "cloud_file_save",
          "cloud_string_save",
          "cloud_synchronise",
          "code_is_compiled",
          "collision_circle",
          "collision_circle_list",
          "collision_ellipse",
          "collision_ellipse_list",
          "collision_line",
          "collision_line_list",
          "collision_point",
          "collision_point_list",
          "collision_rectangle",
          "collision_rectangle_list",
          "color_get_blue",
          "color_get_green",
          "color_get_hue",
          "color_get_red",
          "color_get_saturation",
          "color_get_value",
          "colour_get_blue",
          "colour_get_green",
          "colour_get_hue",
          "colour_get_red",
          "colour_get_saturation",
          "colour_get_value",
          "cos",
          "darccos",
          "darcsin",
          "darctan",
          "darctan2",
          "date_compare_date",
          "date_compare_datetime",
          "date_compare_time",
          "date_create_datetime",
          "date_current_datetime",
          "date_date_of",
          "date_date_string",
          "date_datetime_string",
          "date_day_span",
          "date_days_in_month",
          "date_days_in_year",
          "date_get_day",
          "date_get_day_of_year",
          "date_get_hour",
          "date_get_hour_of_year",
          "date_get_minute",
          "date_get_minute_of_year",
          "date_get_month",
          "date_get_second",
          "date_get_second_of_year",
          "date_get_timezone",
          "date_get_week",
          "date_get_weekday",
          "date_get_year",
          "date_hour_span",
          "date_inc_day",
          "date_inc_hour",
          "date_inc_minute",
          "date_inc_month",
          "date_inc_second",
          "date_inc_week",
          "date_inc_year",
          "date_is_today",
          "date_leap_year",
          "date_minute_span",
          "date_month_span",
          "date_second_span",
          "date_set_timezone",
          "date_time_of",
          "date_time_string",
          "date_valid_datetime",
          "date_week_span",
          "date_year_span",
          "db_to_lin",
          "dbg_add_font_glyphs",
          "dbg_button",
          "dbg_checkbox",
          "dbg_color",
          "dbg_colour",
          "dbg_drop_down",
          "dbg_same_line",
          "dbg_section",
          "dbg_section_delete",
          "dbg_section_exists",
          "dbg_slider",
          "dbg_slider_int",
          "dbg_sprite",
          "dbg_text",
          "dbg_text_input",
          "dbg_view",
          "dbg_view_delete",
          "dbg_view_exists",
          "dbg_watch",
          "dcos",
          "debug_event",
          "debug_get_callstack",
          "degtorad",
          "device_get_tilt_x",
          "device_get_tilt_y",
          "device_get_tilt_z",
          "device_is_keypad_open",
          "device_mouse_check_button",
          "device_mouse_check_button_pressed",
          "device_mouse_check_button_released",
          "device_mouse_dbclick_enable",
          "device_mouse_raw_x",
          "device_mouse_raw_y",
          "device_mouse_x",
          "device_mouse_x_to_gui",
          "device_mouse_y",
          "device_mouse_y_to_gui",
          "directory_create",
          "directory_destroy",
          "directory_exists",
          "display_get_dpi_x",
          "display_get_dpi_y",
          "display_get_frequency",
          "display_get_gui_height",
          "display_get_gui_width",
          "display_get_height",
          "display_get_orientation",
          "display_get_sleep_margin",
          "display_get_timing_method",
          "display_get_width",
          "display_mouse_get_x",
          "display_mouse_get_y",
          "display_mouse_set",
          "display_reset",
          "display_set_gui_maximise",
          "display_set_gui_maximize",
          "display_set_gui_size",
          "display_set_sleep_margin",
          "display_set_timing_method",
          "display_set_ui_visibility",
          "distance_to_object",
          "distance_to_point",
          "dot_product",
          "dot_product_3d",
          "dot_product_3d_normalised",
          "dot_product_3d_normalized",
          "dot_product_normalised",
          "dot_product_normalized",
          "draw_arrow",
          "draw_button",
          "draw_circle",
          "draw_circle_color",
          "draw_circle_colour",
          "draw_clear",
          "draw_clear_alpha",
          "draw_ellipse",
          "draw_ellipse_color",
          "draw_ellipse_colour",
          "draw_enable_drawevent",
          "draw_enable_skeleton_blendmodes",
          "draw_enable_swf_aa",
          "draw_flush",
          "draw_get_alpha",
          "draw_get_color",
          "draw_get_colour",
          "draw_get_enable_skeleton_blendmodes",
          "draw_get_font",
          "draw_get_halign",
          "draw_get_lighting",
          "draw_get_swf_aa_level",
          "draw_get_valign",
          "draw_getpixel",
          "draw_getpixel_ext",
          "draw_healthbar",
          "draw_highscore",
          "draw_light_define_ambient",
          "draw_light_define_direction",
          "draw_light_define_point",
          "draw_light_enable",
          "draw_light_get",
          "draw_light_get_ambient",
          "draw_line",
          "draw_line_color",
          "draw_line_colour",
          "draw_line_width",
          "draw_line_width_color",
          "draw_line_width_colour",
          "draw_path",
          "draw_point",
          "draw_point_color",
          "draw_point_colour",
          "draw_primitive_begin",
          "draw_primitive_begin_texture",
          "draw_primitive_end",
          "draw_rectangle",
          "draw_rectangle_color",
          "draw_rectangle_colour",
          "draw_roundrect",
          "draw_roundrect_color",
          "draw_roundrect_color_ext",
          "draw_roundrect_colour",
          "draw_roundrect_colour_ext",
          "draw_roundrect_ext",
          "draw_self",
          "draw_set_alpha",
          "draw_set_circle_precision",
          "draw_set_color",
          "draw_set_colour",
          "draw_set_font",
          "draw_set_halign",
          "draw_set_lighting",
          "draw_set_swf_aa_level",
          "draw_set_valign",
          "draw_skeleton",
          "draw_skeleton_collision",
          "draw_skeleton_instance",
          "draw_skeleton_time",
          "draw_sprite",
          "draw_sprite_ext",
          "draw_sprite_general",
          "draw_sprite_part",
          "draw_sprite_part_ext",
          "draw_sprite_pos",
          "draw_sprite_stretched",
          "draw_sprite_stretched_ext",
          "draw_sprite_tiled",
          "draw_sprite_tiled_ext",
          "draw_surface",
          "draw_surface_ext",
          "draw_surface_general",
          "draw_surface_part",
          "draw_surface_part_ext",
          "draw_surface_stretched",
          "draw_surface_stretched_ext",
          "draw_surface_tiled",
          "draw_surface_tiled_ext",
          "draw_text",
          "draw_text_color",
          "draw_text_colour",
          "draw_text_ext",
          "draw_text_ext_color",
          "draw_text_ext_colour",
          "draw_text_ext_transformed",
          "draw_text_ext_transformed_color",
          "draw_text_ext_transformed_colour",
          "draw_text_transformed",
          "draw_text_transformed_color",
          "draw_text_transformed_colour",
          "draw_texture_flush",
          "draw_tile",
          "draw_tilemap",
          "draw_triangle",
          "draw_triangle_color",
          "draw_triangle_colour",
          "draw_vertex",
          "draw_vertex_color",
          "draw_vertex_colour",
          "draw_vertex_texture",
          "draw_vertex_texture_color",
          "draw_vertex_texture_colour",
          "ds_exists",
          "ds_grid_add",
          "ds_grid_add_disk",
          "ds_grid_add_grid_region",
          "ds_grid_add_region",
          "ds_grid_clear",
          "ds_grid_copy",
          "ds_grid_create",
          "ds_grid_destroy",
          "ds_grid_get",
          "ds_grid_get_disk_max",
          "ds_grid_get_disk_mean",
          "ds_grid_get_disk_min",
          "ds_grid_get_disk_sum",
          "ds_grid_get_max",
          "ds_grid_get_mean",
          "ds_grid_get_min",
          "ds_grid_get_sum",
          "ds_grid_height",
          "ds_grid_multiply",
          "ds_grid_multiply_disk",
          "ds_grid_multiply_grid_region",
          "ds_grid_multiply_region",
          "ds_grid_read",
          "ds_grid_resize",
          "ds_grid_set",
          "ds_grid_set_disk",
          "ds_grid_set_grid_region",
          "ds_grid_set_region",
          "ds_grid_shuffle",
          "ds_grid_sort",
          "ds_grid_to_mp_grid",
          "ds_grid_value_disk_exists",
          "ds_grid_value_disk_x",
          "ds_grid_value_disk_y",
          "ds_grid_value_exists",
          "ds_grid_value_x",
          "ds_grid_value_y",
          "ds_grid_width",
          "ds_grid_write",
          "ds_list_add",
          "ds_list_clear",
          "ds_list_copy",
          "ds_list_create",
          "ds_list_delete",
          "ds_list_destroy",
          "ds_list_empty",
          "ds_list_find_index",
          "ds_list_find_value",
          "ds_list_insert",
          "ds_list_is_list",
          "ds_list_is_map",
          "ds_list_mark_as_list",
          "ds_list_mark_as_map",
          "ds_list_read",
          "ds_list_replace",
          "ds_list_set",
          "ds_list_shuffle",
          "ds_list_size",
          "ds_list_sort",
          "ds_list_write",
          "ds_map_add",
          "ds_map_add_list",
          "ds_map_add_map",
          "ds_map_clear",
          "ds_map_copy",
          "ds_map_create",
          "ds_map_delete",
          "ds_map_destroy",
          "ds_map_empty",
          "ds_map_exists",
          "ds_map_find_first",
          "ds_map_find_last",
          "ds_map_find_next",
          "ds_map_find_previous",
          "ds_map_find_value",
          "ds_map_is_list",
          "ds_map_is_map",
          "ds_map_keys_to_array",
          "ds_map_read",
          "ds_map_replace",
          "ds_map_replace_list",
          "ds_map_replace_map",
          "ds_map_secure_load",
          "ds_map_secure_load_buffer",
          "ds_map_secure_save",
          "ds_map_secure_save_buffer",
          "ds_map_set",
          "ds_map_size",
          "ds_map_values_to_array",
          "ds_map_write",
          "ds_priority_add",
          "ds_priority_change_priority",
          "ds_priority_clear",
          "ds_priority_copy",
          "ds_priority_create",
          "ds_priority_delete_max",
          "ds_priority_delete_min",
          "ds_priority_delete_value",
          "ds_priority_destroy",
          "ds_priority_empty",
          "ds_priority_find_max",
          "ds_priority_find_min",
          "ds_priority_find_priority",
          "ds_priority_read",
          "ds_priority_size",
          "ds_priority_write",
          "ds_queue_clear",
          "ds_queue_copy",
          "ds_queue_create",
          "ds_queue_dequeue",
          "ds_queue_destroy",
          "ds_queue_empty",
          "ds_queue_enqueue",
          "ds_queue_head",
          "ds_queue_read",
          "ds_queue_size",
          "ds_queue_tail",
          "ds_queue_write",
          "ds_set_precision",
          "ds_stack_clear",
          "ds_stack_copy",
          "ds_stack_create",
          "ds_stack_destroy",
          "ds_stack_empty",
          "ds_stack_pop",
          "ds_stack_push",
          "ds_stack_read",
          "ds_stack_size",
          "ds_stack_top",
          "ds_stack_write",
          "dsin",
          "dtan",
          "effect_clear",
          "effect_create_above",
          "effect_create_below",
          "effect_create_depth",
          "effect_create_layer",
          "environment_get_variable",
          "event_inherited",
          "event_perform",
          "event_perform_async",
          "event_perform_object",
          "event_user",
          "exception_unhandled_handler",
          "exp",
          "extension_exists",
          "extension_get_option_count",
          "extension_get_option_names",
          "extension_get_option_value",
          "extension_get_options",
          "extension_get_version",
          "external_call",
          "external_define",
          "external_free",
          "file_attributes",
          "file_bin_close",
          "file_bin_open",
          "file_bin_position",
          "file_bin_read_byte",
          "file_bin_rewrite",
          "file_bin_seek",
          "file_bin_size",
          "file_bin_write_byte",
          "file_copy",
          "file_delete",
          "file_exists",
          "file_find_close",
          "file_find_first",
          "file_find_next",
          "file_rename",
          "file_text_close",
          "file_text_eof",
          "file_text_eoln",
          "file_text_open_append",
          "file_text_open_from_string",
          "file_text_open_read",
          "file_text_open_write",
          "file_text_read_real",
          "file_text_read_string",
          "file_text_readln",
          "file_text_write_real",
          "file_text_write_string",
          "file_text_writeln",
          "filename_change_ext",
          "filename_dir",
          "filename_drive",
          "filename_ext",
          "filename_name",
          "filename_path",
          "floor",
          "font_add",
          "font_add_enable_aa",
          "font_add_get_enable_aa",
          "font_add_sprite",
          "font_add_sprite_ext",
          "font_cache_glyph",
          "font_delete",
          "font_enable_effects",
          "font_enable_sdf",
          "font_exists",
          "font_get_bold",
          "font_get_first",
          "font_get_fontname",
          "font_get_info",
          "font_get_italic",
          "font_get_last",
          "font_get_name",
          "font_get_sdf_enabled",
          "font_get_sdf_spread",
          "font_get_size",
          "font_get_texture",
          "font_get_uvs",
          "font_replace_sprite",
          "font_replace_sprite_ext",
          "font_sdf_spread",
          "font_set_cache_size",
          "frac",
          "fx_create",
          "fx_get_name",
          "fx_get_parameter",
          "fx_get_parameter_names",
          "fx_get_parameters",
          "fx_get_single_layer",
          "fx_set_parameter",
          "fx_set_parameters",
          "fx_set_single_layer",
          "game_change",
          "game_end",
          "game_get_speed",
          "game_load",
          "game_load_buffer",
          "game_restart",
          "game_save",
          "game_save_buffer",
          "game_set_speed",
          "gamepad_axis_count",
          "gamepad_axis_value",
          "gamepad_button_check",
          "gamepad_button_check_pressed",
          "gamepad_button_check_released",
          "gamepad_button_count",
          "gamepad_button_value",
          "gamepad_get_axis_deadzone",
          "gamepad_get_button_threshold",
          "gamepad_get_description",
          "gamepad_get_device_count",
          "gamepad_get_guid",
          "gamepad_get_mapping",
          "gamepad_get_option",
          "gamepad_hat_count",
          "gamepad_hat_value",
          "gamepad_is_connected",
          "gamepad_is_supported",
          "gamepad_remove_mapping",
          "gamepad_set_axis_deadzone",
          "gamepad_set_button_threshold",
          "gamepad_set_color",
          "gamepad_set_colour",
          "gamepad_set_option",
          "gamepad_set_vibration",
          "gamepad_test_mapping",
          "gc_collect",
          "gc_enable",
          "gc_get_stats",
          "gc_get_target_frame_time",
          "gc_is_enabled",
          "gc_target_frame_time",
          "gesture_double_tap_distance",
          "gesture_double_tap_time",
          "gesture_drag_distance",
          "gesture_drag_time",
          "gesture_flick_speed",
          "gesture_get_double_tap_distance",
          "gesture_get_double_tap_time",
          "gesture_get_drag_distance",
          "gesture_get_drag_time",
          "gesture_get_flick_speed",
          "gesture_get_pinch_angle_away",
          "gesture_get_pinch_angle_towards",
          "gesture_get_pinch_distance",
          "gesture_get_rotate_angle",
          "gesture_get_rotate_time",
          "gesture_get_tap_count",
          "gesture_pinch_angle_away",
          "gesture_pinch_angle_towards",
          "gesture_pinch_distance",
          "gesture_rotate_angle",
          "gesture_rotate_time",
          "gesture_tap_count",
          "get_integer",
          "get_integer_async",
          "get_login_async",
          "get_open_filename",
          "get_open_filename_ext",
          "get_save_filename",
          "get_save_filename_ext",
          "get_string",
          "get_string_async",
          "get_timer",
          "gif_add_surface",
          "gif_open",
          "gif_save",
          "gif_save_buffer",
          "gml_pragma",
          "gml_release_mode",
          "gpu_get_alphatestenable",
          "gpu_get_alphatestref",
          "gpu_get_blendenable",
          "gpu_get_blendmode",
          "gpu_get_blendmode_dest",
          "gpu_get_blendmode_destalpha",
          "gpu_get_blendmode_ext",
          "gpu_get_blendmode_ext_sepalpha",
          "gpu_get_blendmode_src",
          "gpu_get_blendmode_srcalpha",
          "gpu_get_colorwriteenable",
          "gpu_get_colourwriteenable",
          "gpu_get_cullmode",
          "gpu_get_depth",
          "gpu_get_fog",
          "gpu_get_state",
          "gpu_get_tex_filter",
          "gpu_get_tex_filter_ext",
          "gpu_get_tex_max_aniso",
          "gpu_get_tex_max_aniso_ext",
          "gpu_get_tex_max_mip",
          "gpu_get_tex_max_mip_ext",
          "gpu_get_tex_min_mip",
          "gpu_get_tex_min_mip_ext",
          "gpu_get_tex_mip_bias",
          "gpu_get_tex_mip_bias_ext",
          "gpu_get_tex_mip_enable",
          "gpu_get_tex_mip_enable_ext",
          "gpu_get_tex_mip_filter",
          "gpu_get_tex_mip_filter_ext",
          "gpu_get_tex_repeat",
          "gpu_get_tex_repeat_ext",
          "gpu_get_texfilter",
          "gpu_get_texfilter_ext",
          "gpu_get_texrepeat",
          "gpu_get_texrepeat_ext",
          "gpu_get_zfunc",
          "gpu_get_ztestenable",
          "gpu_get_zwriteenable",
          "gpu_pop_state",
          "gpu_push_state",
          "gpu_set_alphatestenable",
          "gpu_set_alphatestref",
          "gpu_set_blendenable",
          "gpu_set_blendmode",
          "gpu_set_blendmode_ext",
          "gpu_set_blendmode_ext_sepalpha",
          "gpu_set_colorwriteenable",
          "gpu_set_colourwriteenable",
          "gpu_set_cullmode",
          "gpu_set_depth",
          "gpu_set_fog",
          "gpu_set_state",
          "gpu_set_tex_filter",
          "gpu_set_tex_filter_ext",
          "gpu_set_tex_max_aniso",
          "gpu_set_tex_max_aniso_ext",
          "gpu_set_tex_max_mip",
          "gpu_set_tex_max_mip_ext",
          "gpu_set_tex_min_mip",
          "gpu_set_tex_min_mip_ext",
          "gpu_set_tex_mip_bias",
          "gpu_set_tex_mip_bias_ext",
          "gpu_set_tex_mip_enable",
          "gpu_set_tex_mip_enable_ext",
          "gpu_set_tex_mip_filter",
          "gpu_set_tex_mip_filter_ext",
          "gpu_set_tex_repeat",
          "gpu_set_tex_repeat_ext",
          "gpu_set_texfilter",
          "gpu_set_texfilter_ext",
          "gpu_set_texrepeat",
          "gpu_set_texrepeat_ext",
          "gpu_set_zfunc",
          "gpu_set_ztestenable",
          "gpu_set_zwriteenable",
          "handle_parse",
          "highscore_add",
          "highscore_clear",
          "highscore_name",
          "highscore_value",
          "http_get",
          "http_get_file",
          "http_get_request_crossorigin",
          "http_post_string",
          "http_request",
          "http_set_request_crossorigin",
          "iap_acquire",
          "iap_activate",
          "iap_consume",
          "iap_enumerate_products",
          "iap_product_details",
          "iap_purchase_details",
          "iap_restore_all",
          "iap_status",
          "ini_close",
          "ini_key_delete",
          "ini_key_exists",
          "ini_open",
          "ini_open_from_string",
          "ini_read_real",
          "ini_read_string",
          "ini_section_delete",
          "ini_section_exists",
          "ini_write_real",
          "ini_write_string",
          "instance_activate_all",
          "instance_activate_layer",
          "instance_activate_object",
          "instance_activate_region",
          "instance_change",
          "instance_copy",
          "instance_create_depth",
          "instance_create_layer",
          "instance_deactivate_all",
          "instance_deactivate_layer",
          "instance_deactivate_object",
          "instance_deactivate_region",
          "instance_destroy",
          "instance_exists",
          "instance_find",
          "instance_furthest",
          "instance_id_get",
          "instance_nearest",
          "instance_number",
          "instance_place",
          "instance_place_list",
          "instance_position",
          "instance_position_list",
          "instanceof",
          "int64",
          "io_clear",
          "irandom",
          "irandom_range",
          "is_array",
          "is_bool",
          "is_callable",
          "is_debug_overlay_open",
          "is_handle",
          "is_infinity",
          "is_instanceof",
          "is_int32",
          "is_int64",
          "is_keyboard_used_debug_overlay",
          "is_method",
          "is_mouse_over_debug_overlay",
          "is_nan",
          "is_numeric",
          "is_ptr",
          "is_real",
          "is_string",
          "is_struct",
          "is_undefined",
          "json_decode",
          "json_encode",
          "json_parse",
          "json_stringify",
          "keyboard_check",
          "keyboard_check_direct",
          "keyboard_check_pressed",
          "keyboard_check_released",
          "keyboard_clear",
          "keyboard_get_map",
          "keyboard_get_numlock",
          "keyboard_key_press",
          "keyboard_key_release",
          "keyboard_set_map",
          "keyboard_set_numlock",
          "keyboard_unset_map",
          "keyboard_virtual_height",
          "keyboard_virtual_hide",
          "keyboard_virtual_show",
          "keyboard_virtual_status",
          "layer_add_instance",
          "layer_background_alpha",
          "layer_background_blend",
          "layer_background_change",
          "layer_background_create",
          "layer_background_destroy",
          "layer_background_exists",
          "layer_background_get_alpha",
          "layer_background_get_blend",
          "layer_background_get_htiled",
          "layer_background_get_id",
          "layer_background_get_index",
          "layer_background_get_speed",
          "layer_background_get_sprite",
          "layer_background_get_stretch",
          "layer_background_get_visible",
          "layer_background_get_vtiled",
          "layer_background_get_xscale",
          "layer_background_get_yscale",
          "layer_background_htiled",
          "layer_background_index",
          "layer_background_speed",
          "layer_background_sprite",
          "layer_background_stretch",
          "layer_background_visible",
          "layer_background_vtiled",
          "layer_background_xscale",
          "layer_background_yscale",
          "layer_clear_fx",
          "layer_create",
          "layer_depth",
          "layer_destroy",
          "layer_destroy_instances",
          "layer_element_move",
          "layer_enable_fx",
          "layer_exists",
          "layer_force_draw_depth",
          "layer_fx_is_enabled",
          "layer_get_all",
          "layer_get_all_elements",
          "layer_get_depth",
          "layer_get_element_layer",
          "layer_get_element_type",
          "layer_get_forced_depth",
          "layer_get_fx",
          "layer_get_hspeed",
          "layer_get_id",
          "layer_get_id_at_depth",
          "layer_get_name",
          "layer_get_script_begin",
          "layer_get_script_end",
          "layer_get_shader",
          "layer_get_target_room",
          "layer_get_visible",
          "layer_get_vspeed",
          "layer_get_x",
          "layer_get_y",
          "layer_has_instance",
          "layer_hspeed",
          "layer_instance_get_instance",
          "layer_is_draw_depth_forced",
          "layer_reset_target_room",
          "layer_script_begin",
          "layer_script_end",
          "layer_sequence_angle",
          "layer_sequence_create",
          "layer_sequence_destroy",
          "layer_sequence_exists",
          "layer_sequence_get_angle",
          "layer_sequence_get_headdir",
          "layer_sequence_get_headpos",
          "layer_sequence_get_instance",
          "layer_sequence_get_length",
          "layer_sequence_get_sequence",
          "layer_sequence_get_speedscale",
          "layer_sequence_get_x",
          "layer_sequence_get_xscale",
          "layer_sequence_get_y",
          "layer_sequence_get_yscale",
          "layer_sequence_headdir",
          "layer_sequence_headpos",
          "layer_sequence_is_finished",
          "layer_sequence_is_paused",
          "layer_sequence_pause",
          "layer_sequence_play",
          "layer_sequence_speedscale",
          "layer_sequence_x",
          "layer_sequence_xscale",
          "layer_sequence_y",
          "layer_sequence_yscale",
          "layer_set_fx",
          "layer_set_target_room",
          "layer_set_visible",
          "layer_shader",
          "layer_sprite_alpha",
          "layer_sprite_angle",
          "layer_sprite_blend",
          "layer_sprite_change",
          "layer_sprite_create",
          "layer_sprite_destroy",
          "layer_sprite_exists",
          "layer_sprite_get_alpha",
          "layer_sprite_get_angle",
          "layer_sprite_get_blend",
          "layer_sprite_get_id",
          "layer_sprite_get_index",
          "layer_sprite_get_speed",
          "layer_sprite_get_sprite",
          "layer_sprite_get_x",
          "layer_sprite_get_xscale",
          "layer_sprite_get_y",
          "layer_sprite_get_yscale",
          "layer_sprite_index",
          "layer_sprite_speed",
          "layer_sprite_x",
          "layer_sprite_xscale",
          "layer_sprite_y",
          "layer_sprite_yscale",
          "layer_tile_alpha",
          "layer_tile_blend",
          "layer_tile_change",
          "layer_tile_create",
          "layer_tile_destroy",
          "layer_tile_exists",
          "layer_tile_get_alpha",
          "layer_tile_get_blend",
          "layer_tile_get_region",
          "layer_tile_get_sprite",
          "layer_tile_get_visible",
          "layer_tile_get_x",
          "layer_tile_get_xscale",
          "layer_tile_get_y",
          "layer_tile_get_yscale",
          "layer_tile_region",
          "layer_tile_visible",
          "layer_tile_x",
          "layer_tile_xscale",
          "layer_tile_y",
          "layer_tile_yscale",
          "layer_tilemap_create",
          "layer_tilemap_destroy",
          "layer_tilemap_exists",
          "layer_tilemap_get_id",
          "layer_vspeed",
          "layer_x",
          "layer_y",
          "lengthdir_x",
          "lengthdir_y",
          "lerp",
          "lin_to_db",
          "ln",
          "load_csv",
          "log10",
          "log2",
          "logn",
          "make_color_hsv",
          "make_color_rgb",
          "make_colour_hsv",
          "make_colour_rgb",
          "math_get_epsilon",
          "math_set_epsilon",
          "matrix_build",
          "matrix_build_identity",
          "matrix_build_lookat",
          "matrix_build_projection_ortho",
          "matrix_build_projection_perspective",
          "matrix_build_projection_perspective_fov",
          "matrix_get",
          "matrix_multiply",
          "matrix_set",
          "matrix_stack_clear",
          "matrix_stack_is_empty",
          "matrix_stack_pop",
          "matrix_stack_push",
          "matrix_stack_set",
          "matrix_stack_top",
          "matrix_transform_vertex",
          "max",
          "md5_file",
          "md5_string_unicode",
          "md5_string_utf8",
          "mean",
          "median",
          "merge_color",
          "merge_colour",
          "method",
          "method_call",
          "method_get_index",
          "method_get_self",
          "min",
          "motion_add",
          "motion_set",
          "mouse_check_button",
          "mouse_check_button_pressed",
          "mouse_check_button_released",
          "mouse_clear",
          "mouse_wheel_down",
          "mouse_wheel_up",
          "move_and_collide",
          "move_bounce_all",
          "move_bounce_solid",
          "move_contact_all",
          "move_contact_solid",
          "move_outside_all",
          "move_outside_solid",
          "move_random",
          "move_snap",
          "move_towards_point",
          "move_wrap",
          "mp_grid_add_cell",
          "mp_grid_add_instances",
          "mp_grid_add_rectangle",
          "mp_grid_clear_all",
          "mp_grid_clear_cell",
          "mp_grid_clear_rectangle",
          "mp_grid_create",
          "mp_grid_destroy",
          "mp_grid_draw",
          "mp_grid_get_cell",
          "mp_grid_path",
          "mp_grid_to_ds_grid",
          "mp_linear_path",
          "mp_linear_path_object",
          "mp_linear_step",
          "mp_linear_step_object",
          "mp_potential_path",
          "mp_potential_path_object",
          "mp_potential_settings",
          "mp_potential_step",
          "mp_potential_step_object",
          "nameof",
          "network_connect",
          "network_connect_async",
          "network_connect_raw",
          "network_connect_raw_async",
          "network_create_server",
          "network_create_server_raw",
          "network_create_socket",
          "network_create_socket_ext",
          "network_destroy",
          "network_resolve",
          "network_send_broadcast",
          "network_send_packet",
          "network_send_raw",
          "network_send_udp",
          "network_send_udp_raw",
          "network_set_config",
          "network_set_timeout",
          "object_exists",
          "object_get_mask",
          "object_get_name",
          "object_get_parent",
          "object_get_persistent",
          "object_get_physics",
          "object_get_solid",
          "object_get_sprite",
          "object_get_visible",
          "object_is_ancestor",
          "object_set_mask",
          "object_set_persistent",
          "object_set_solid",
          "object_set_sprite",
          "object_set_visible",
          "ord",
          "os_check_permission",
          "os_get_config",
          "os_get_info",
          "os_get_language",
          "os_get_region",
          "os_is_network_connected",
          "os_is_paused",
          "os_lock_orientation",
          "os_powersave_enable",
          "os_request_permission",
          "os_set_orientation_lock",
          "parameter_count",
          "parameter_string",
          "part_emitter_burst",
          "part_emitter_clear",
          "part_emitter_create",
          "part_emitter_delay",
          "part_emitter_destroy",
          "part_emitter_destroy_all",
          "part_emitter_enable",
          "part_emitter_exists",
          "part_emitter_interval",
          "part_emitter_region",
          "part_emitter_relative",
          "part_emitter_stream",
          "part_particles_burst",
          "part_particles_clear",
          "part_particles_count",
          "part_particles_create",
          "part_particles_create_color",
          "part_particles_create_colour",
          "part_system_angle",
          "part_system_automatic_draw",
          "part_system_automatic_update",
          "part_system_clear",
          "part_system_color",
          "part_system_colour",
          "part_system_create",
          "part_system_create_layer",
          "part_system_depth",
          "part_system_destroy",
          "part_system_draw_order",
          "part_system_drawit",
          "part_system_exists",
          "part_system_get_info",
          "part_system_get_layer",
          "part_system_global_space",
          "part_system_layer",
          "part_system_position",
          "part_system_update",
          "part_type_alpha1",
          "part_type_alpha2",
          "part_type_alpha3",
          "part_type_blend",
          "part_type_clear",
          "part_type_color1",
          "part_type_color2",
          "part_type_color3",
          "part_type_color_hsv",
          "part_type_color_mix",
          "part_type_color_rgb",
          "part_type_colour1",
          "part_type_colour2",
          "part_type_colour3",
          "part_type_colour_hsv",
          "part_type_colour_mix",
          "part_type_colour_rgb",
          "part_type_create",
          "part_type_death",
          "part_type_destroy",
          "part_type_direction",
          "part_type_exists",
          "part_type_gravity",
          "part_type_life",
          "part_type_orientation",
          "part_type_scale",
          "part_type_shape",
          "part_type_size",
          "part_type_size_x",
          "part_type_size_y",
          "part_type_speed",
          "part_type_sprite",
          "part_type_step",
          "part_type_subimage",
          "particle_exists",
          "particle_get_info",
          "path_add",
          "path_add_point",
          "path_append",
          "path_assign",
          "path_change_point",
          "path_clear_points",
          "path_delete",
          "path_delete_point",
          "path_duplicate",
          "path_end",
          "path_exists",
          "path_flip",
          "path_get_closed",
          "path_get_kind",
          "path_get_length",
          "path_get_name",
          "path_get_number",
          "path_get_point_speed",
          "path_get_point_x",
          "path_get_point_y",
          "path_get_precision",
          "path_get_speed",
          "path_get_x",
          "path_get_y",
          "path_insert_point",
          "path_mirror",
          "path_rescale",
          "path_reverse",
          "path_rotate",
          "path_set_closed",
          "path_set_kind",
          "path_set_precision",
          "path_shift",
          "path_start",
          "physics_apply_angular_impulse",
          "physics_apply_force",
          "physics_apply_impulse",
          "physics_apply_local_force",
          "physics_apply_local_impulse",
          "physics_apply_torque",
          "physics_draw_debug",
          "physics_fixture_add_point",
          "physics_fixture_bind",
          "physics_fixture_bind_ext",
          "physics_fixture_create",
          "physics_fixture_delete",
          "physics_fixture_set_angular_damping",
          "physics_fixture_set_awake",
          "physics_fixture_set_box_shape",
          "physics_fixture_set_chain_shape",
          "physics_fixture_set_circle_shape",
          "physics_fixture_set_collision_group",
          "physics_fixture_set_density",
          "physics_fixture_set_edge_shape",
          "physics_fixture_set_friction",
          "physics_fixture_set_kinematic",
          "physics_fixture_set_linear_damping",
          "physics_fixture_set_polygon_shape",
          "physics_fixture_set_restitution",
          "physics_fixture_set_sensor",
          "physics_get_density",
          "physics_get_friction",
          "physics_get_restitution",
          "physics_joint_delete",
          "physics_joint_distance_create",
          "physics_joint_enable_motor",
          "physics_joint_friction_create",
          "physics_joint_gear_create",
          "physics_joint_get_value",
          "physics_joint_prismatic_create",
          "physics_joint_pulley_create",
          "physics_joint_revolute_create",
          "physics_joint_rope_create",
          "physics_joint_set_value",
          "physics_joint_weld_create",
          "physics_joint_wheel_create",
          "physics_mass_properties",
          "physics_particle_count",
          "physics_particle_create",
          "physics_particle_delete",
          "physics_particle_delete_region_box",
          "physics_particle_delete_region_circle",
          "physics_particle_delete_region_poly",
          "physics_particle_draw",
          "physics_particle_draw_ext",
          "physics_particle_get_damping",
          "physics_particle_get_data",
          "physics_particle_get_data_particle",
          "physics_particle_get_density",
          "physics_particle_get_gravity_scale",
          "physics_particle_get_group_flags",
          "physics_particle_get_max_count",
          "physics_particle_get_radius",
          "physics_particle_group_add_point",
          "physics_particle_group_begin",
          "physics_particle_group_box",
          "physics_particle_group_circle",
          "physics_particle_group_count",
          "physics_particle_group_delete",
          "physics_particle_group_end",
          "physics_particle_group_get_ang_vel",
          "physics_particle_group_get_angle",
          "physics_particle_group_get_centre_x",
          "physics_particle_group_get_centre_y",
          "physics_particle_group_get_data",
          "physics_particle_group_get_inertia",
          "physics_particle_group_get_mass",
          "physics_particle_group_get_vel_x",
          "physics_particle_group_get_vel_y",
          "physics_particle_group_get_x",
          "physics_particle_group_get_y",
          "physics_particle_group_join",
          "physics_particle_group_polygon",
          "physics_particle_set_category_flags",
          "physics_particle_set_damping",
          "physics_particle_set_density",
          "physics_particle_set_flags",
          "physics_particle_set_gravity_scale",
          "physics_particle_set_group_flags",
          "physics_particle_set_max_count",
          "physics_particle_set_radius",
          "physics_pause_enable",
          "physics_remove_fixture",
          "physics_set_density",
          "physics_set_friction",
          "physics_set_restitution",
          "physics_test_overlap",
          "physics_world_create",
          "physics_world_draw_debug",
          "physics_world_gravity",
          "physics_world_update_iterations",
          "physics_world_update_speed",
          "place_empty",
          "place_free",
          "place_meeting",
          "place_snapped",
          "point_direction",
          "point_distance",
          "point_distance_3d",
          "point_in_circle",
          "point_in_rectangle",
          "point_in_triangle",
          "position_change",
          "position_destroy",
          "position_empty",
          "position_meeting",
          "power",
          "ptr",
          "radtodeg",
          "random",
          "random_get_seed",
          "random_range",
          "random_set_seed",
          "randomise",
          "randomize",
          "real",
          "rectangle_in_circle",
          "rectangle_in_rectangle",
          "rectangle_in_triangle",
          "ref_create",
          "rollback_chat",
          "rollback_create_game",
          "rollback_define_extra_network_latency",
          "rollback_define_input",
          "rollback_define_input_frame_delay",
          "rollback_define_mock_input",
          "rollback_define_player",
          "rollback_display_events",
          "rollback_get_info",
          "rollback_get_input",
          "rollback_get_player_prefs",
          "rollback_join_game",
          "rollback_leave_game",
          "rollback_set_player_prefs",
          "rollback_start_game",
          "rollback_sync_on_frame",
          "rollback_use_late_join",
          "rollback_use_manual_start",
          "rollback_use_player_prefs",
          "rollback_use_random_input",
          "room_add",
          "room_assign",
          "room_duplicate",
          "room_exists",
          "room_get_camera",
          "room_get_info",
          "room_get_name",
          "room_get_viewport",
          "room_goto",
          "room_goto_next",
          "room_goto_previous",
          "room_instance_add",
          "room_instance_clear",
          "room_next",
          "room_previous",
          "room_restart",
          "room_set_camera",
          "room_set_height",
          "room_set_persistent",
          "room_set_view_enabled",
          "room_set_viewport",
          "room_set_width",
          "round",
          "scheduler_resolution_get",
          "scheduler_resolution_set",
          "screen_save",
          "screen_save_part",
          "script_execute",
          "script_execute_ext",
          "script_exists",
          "script_get_name",
          "sequence_create",
          "sequence_destroy",
          "sequence_exists",
          "sequence_get",
          "sequence_get_objects",
          "sequence_instance_override_object",
          "sequence_keyframe_new",
          "sequence_keyframedata_new",
          "sequence_track_new",
          "sha1_file",
          "sha1_string_unicode",
          "sha1_string_utf8",
          "shader_current",
          "shader_enable_corner_id",
          "shader_get_name",
          "shader_get_sampler_index",
          "shader_get_uniform",
          "shader_is_compiled",
          "shader_reset",
          "shader_set",
          "shader_set_uniform_f",
          "shader_set_uniform_f_array",
          "shader_set_uniform_f_buffer",
          "shader_set_uniform_i",
          "shader_set_uniform_i_array",
          "shader_set_uniform_matrix",
          "shader_set_uniform_matrix_array",
          "shaders_are_supported",
          "shop_leave_rating",
          "show_debug_message",
          "show_debug_message_ext",
          "show_debug_overlay",
          "show_error",
          "show_message",
          "show_message_async",
          "show_question",
          "show_question_async",
          "sign",
          "sin",
          "skeleton_animation_clear",
          "skeleton_animation_get",
          "skeleton_animation_get_duration",
          "skeleton_animation_get_event_frames",
          "skeleton_animation_get_ext",
          "skeleton_animation_get_frame",
          "skeleton_animation_get_frames",
          "skeleton_animation_get_position",
          "skeleton_animation_is_finished",
          "skeleton_animation_is_looping",
          "skeleton_animation_list",
          "skeleton_animation_mix",
          "skeleton_animation_set",
          "skeleton_animation_set_ext",
          "skeleton_animation_set_frame",
          "skeleton_animation_set_position",
          "skeleton_attachment_create",
          "skeleton_attachment_create_color",
          "skeleton_attachment_create_colour",
          "skeleton_attachment_destroy",
          "skeleton_attachment_exists",
          "skeleton_attachment_get",
          "skeleton_attachment_replace",
          "skeleton_attachment_replace_color",
          "skeleton_attachment_replace_colour",
          "skeleton_attachment_set",
          "skeleton_bone_data_get",
          "skeleton_bone_data_set",
          "skeleton_bone_list",
          "skeleton_bone_state_get",
          "skeleton_bone_state_set",
          "skeleton_collision_draw_set",
          "skeleton_find_slot",
          "skeleton_get_bounds",
          "skeleton_get_minmax",
          "skeleton_get_num_bounds",
          "skeleton_skin_create",
          "skeleton_skin_get",
          "skeleton_skin_list",
          "skeleton_skin_set",
          "skeleton_slot_alpha_get",
          "skeleton_slot_color_get",
          "skeleton_slot_color_set",
          "skeleton_slot_colour_get",
          "skeleton_slot_colour_set",
          "skeleton_slot_data",
          "skeleton_slot_data_instance",
          "skeleton_slot_list",
          "sprite_add",
          "sprite_add_ext",
          "sprite_add_from_surface",
          "sprite_assign",
          "sprite_collision_mask",
          "sprite_create_from_surface",
          "sprite_delete",
          "sprite_duplicate",
          "sprite_exists",
          "sprite_flush",
          "sprite_flush_multi",
          "sprite_get_bbox_bottom",
          "sprite_get_bbox_left",
          "sprite_get_bbox_mode",
          "sprite_get_bbox_right",
          "sprite_get_bbox_top",
          "sprite_get_height",
          "sprite_get_info",
          "sprite_get_name",
          "sprite_get_nineslice",
          "sprite_get_number",
          "sprite_get_speed",
          "sprite_get_speed_type",
          "sprite_get_texture",
          "sprite_get_tpe",
          "sprite_get_uvs",
          "sprite_get_width",
          "sprite_get_xoffset",
          "sprite_get_yoffset",
          "sprite_merge",
          "sprite_nineslice_create",
          "sprite_prefetch",
          "sprite_prefetch_multi",
          "sprite_replace",
          "sprite_save",
          "sprite_save_strip",
          "sprite_set_alpha_from_sprite",
          "sprite_set_bbox",
          "sprite_set_bbox_mode",
          "sprite_set_cache_size",
          "sprite_set_cache_size_ext",
          "sprite_set_nineslice",
          "sprite_set_offset",
          "sprite_set_speed",
          "sqr",
          "sqrt",
          "static_get",
          "static_set",
          "string",
          "string_byte_at",
          "string_byte_length",
          "string_char_at",
          "string_concat",
          "string_concat_ext",
          "string_copy",
          "string_count",
          "string_delete",
          "string_digits",
          "string_ends_with",
          "string_ext",
          "string_foreach",
          "string_format",
          "string_hash_to_newline",
          "string_height",
          "string_height_ext",
          "string_insert",
          "string_join",
          "string_join_ext",
          "string_last_pos",
          "string_last_pos_ext",
          "string_length",
          "string_letters",
          "string_lettersdigits",
          "string_lower",
          "string_ord_at",
          "string_pos",
          "string_pos_ext",
          "string_repeat",
          "string_replace",
          "string_replace_all",
          "string_set_byte_at",
          "string_split",
          "string_split_ext",
          "string_starts_with",
          "string_trim",
          "string_trim_end",
          "string_trim_start",
          "string_upper",
          "string_width",
          "string_width_ext",
          "struct_exists",
          "struct_foreach",
          "struct_get",
          "struct_get_from_hash",
          "struct_get_names",
          "struct_names_count",
          "struct_remove",
          "struct_set",
          "struct_set_from_hash",
          "surface_copy",
          "surface_copy_part",
          "surface_create",
          "surface_create_ext",
          "surface_depth_disable",
          "surface_exists",
          "surface_format_is_supported",
          "surface_free",
          "surface_get_depth_disable",
          "surface_get_format",
          "surface_get_height",
          "surface_get_target",
          "surface_get_target_ext",
          "surface_get_texture",
          "surface_get_width",
          "surface_getpixel",
          "surface_getpixel_ext",
          "surface_reset_target",
          "surface_resize",
          "surface_save",
          "surface_save_part",
          "surface_set_target",
          "surface_set_target_ext",
          "tag_get_asset_ids",
          "tag_get_assets",
          "tan",
          "texture_debug_messages",
          "texture_flush",
          "texture_get_height",
          "texture_get_texel_height",
          "texture_get_texel_width",
          "texture_get_uvs",
          "texture_get_width",
          "texture_global_scale",
          "texture_is_ready",
          "texture_prefetch",
          "texture_set_stage",
          "texturegroup_get_fonts",
          "texturegroup_get_names",
          "texturegroup_get_sprites",
          "texturegroup_get_status",
          "texturegroup_get_textures",
          "texturegroup_get_tilesets",
          "texturegroup_load",
          "texturegroup_set_mode",
          "texturegroup_unload",
          "tile_get_empty",
          "tile_get_flip",
          "tile_get_index",
          "tile_get_mirror",
          "tile_get_rotate",
          "tile_set_empty",
          "tile_set_flip",
          "tile_set_index",
          "tile_set_mirror",
          "tile_set_rotate",
          "tilemap_clear",
          "tilemap_get",
          "tilemap_get_at_pixel",
          "tilemap_get_cell_x_at_pixel",
          "tilemap_get_cell_y_at_pixel",
          "tilemap_get_frame",
          "tilemap_get_global_mask",
          "tilemap_get_height",
          "tilemap_get_mask",
          "tilemap_get_tile_height",
          "tilemap_get_tile_width",
          "tilemap_get_tileset",
          "tilemap_get_width",
          "tilemap_get_x",
          "tilemap_get_y",
          "tilemap_set",
          "tilemap_set_at_pixel",
          "tilemap_set_global_mask",
          "tilemap_set_height",
          "tilemap_set_mask",
          "tilemap_set_width",
          "tilemap_tileset",
          "tilemap_x",
          "tilemap_y",
          "tileset_get_info",
          "tileset_get_name",
          "tileset_get_texture",
          "tileset_get_uvs",
          "time_bpm_to_seconds",
          "time_seconds_to_bpm",
          "time_source_create",
          "time_source_destroy",
          "time_source_exists",
          "time_source_get_children",
          "time_source_get_parent",
          "time_source_get_period",
          "time_source_get_reps_completed",
          "time_source_get_reps_remaining",
          "time_source_get_state",
          "time_source_get_time_remaining",
          "time_source_get_units",
          "time_source_pause",
          "time_source_reconfigure",
          "time_source_reset",
          "time_source_resume",
          "time_source_start",
          "time_source_stop",
          "timeline_add",
          "timeline_clear",
          "timeline_delete",
          "timeline_exists",
          "timeline_get_name",
          "timeline_max_moment",
          "timeline_moment_add_script",
          "timeline_moment_clear",
          "timeline_size",
          "typeof",
          "url_get_domain",
          "url_open",
          "url_open_ext",
          "url_open_full",
          "uwp_device_touchscreen_available",
          "uwp_livetile_badge_clear",
          "uwp_livetile_badge_notification",
          "uwp_livetile_notification_begin",
          "uwp_livetile_notification_end",
          "uwp_livetile_notification_expiry",
          "uwp_livetile_notification_image_add",
          "uwp_livetile_notification_secondary_begin",
          "uwp_livetile_notification_tag",
          "uwp_livetile_notification_template_add",
          "uwp_livetile_notification_text_add",
          "uwp_livetile_queue_enable",
          "uwp_livetile_tile_clear",
          "uwp_secondarytile_badge_clear",
          "uwp_secondarytile_badge_notification",
          "uwp_secondarytile_delete",
          "uwp_secondarytile_pin",
          "uwp_secondarytile_tile_clear",
          "variable_clone",
          "variable_get_hash",
          "variable_global_exists",
          "variable_global_get",
          "variable_global_set",
          "variable_instance_exists",
          "variable_instance_get",
          "variable_instance_get_names",
          "variable_instance_names_count",
          "variable_instance_set",
          "variable_struct_exists",
          "variable_struct_get",
          "variable_struct_get_names",
          "variable_struct_names_count",
          "variable_struct_remove",
          "variable_struct_set",
          "vertex_argb",
          "vertex_begin",
          "vertex_color",
          "vertex_colour",
          "vertex_create_buffer",
          "vertex_create_buffer_ext",
          "vertex_create_buffer_from_buffer",
          "vertex_create_buffer_from_buffer_ext",
          "vertex_delete_buffer",
          "vertex_end",
          "vertex_float1",
          "vertex_float2",
          "vertex_float3",
          "vertex_float4",
          "vertex_format_add_color",
          "vertex_format_add_colour",
          "vertex_format_add_custom",
          "vertex_format_add_normal",
          "vertex_format_add_position",
          "vertex_format_add_position_3d",
          "vertex_format_add_texcoord",
          "vertex_format_begin",
          "vertex_format_delete",
          "vertex_format_end",
          "vertex_format_get_info",
          "vertex_freeze",
          "vertex_get_buffer_size",
          "vertex_get_number",
          "vertex_normal",
          "vertex_position",
          "vertex_position_3d",
          "vertex_submit",
          "vertex_submit_ext",
          "vertex_texcoord",
          "vertex_ubyte4",
          "vertex_update_buffer_from_buffer",
          "vertex_update_buffer_from_vertex",
          "video_close",
          "video_draw",
          "video_enable_loop",
          "video_get_duration",
          "video_get_format",
          "video_get_position",
          "video_get_status",
          "video_get_volume",
          "video_is_looping",
          "video_open",
          "video_pause",
          "video_resume",
          "video_seek_to",
          "video_set_volume",
          "view_get_camera",
          "view_get_hport",
          "view_get_surface_id",
          "view_get_visible",
          "view_get_wport",
          "view_get_xport",
          "view_get_yport",
          "view_set_camera",
          "view_set_hport",
          "view_set_surface_id",
          "view_set_visible",
          "view_set_wport",
          "view_set_xport",
          "view_set_yport",
          "virtual_key_add",
          "virtual_key_delete",
          "virtual_key_hide",
          "virtual_key_show",
          "wallpaper_set_config",
          "wallpaper_set_subscriptions",
          "weak_ref_alive",
          "weak_ref_any_alive",
          "weak_ref_create",
          "window_center",
          "window_device",
          "window_enable_borderless_fullscreen",
          "window_get_borderless_fullscreen",
          "window_get_caption",
          "window_get_color",
          "window_get_colour",
          "window_get_cursor",
          "window_get_fullscreen",
          "window_get_height",
          "window_get_showborder",
          "window_get_visible_rects",
          "window_get_width",
          "window_get_x",
          "window_get_y",
          "window_handle",
          "window_has_focus",
          "window_mouse_get_delta_x",
          "window_mouse_get_delta_y",
          "window_mouse_get_locked",
          "window_mouse_get_x",
          "window_mouse_get_y",
          "window_mouse_set",
          "window_mouse_set_locked",
          "window_set_caption",
          "window_set_color",
          "window_set_colour",
          "window_set_cursor",
          "window_set_fullscreen",
          "window_set_max_height",
          "window_set_max_width",
          "window_set_min_height",
          "window_set_min_width",
          "window_set_position",
          "window_set_rectangle",
          "window_set_showborder",
          "window_set_size",
          "window_view_mouse_get_x",
          "window_view_mouse_get_y",
          "window_views_mouse_get_x",
          "window_views_mouse_get_y",
          "winphone_tile_background_color",
          "winphone_tile_background_colour",
          "zip_add_file",
          "zip_create",
          "zip_save",
          "zip_unzip",
          "zip_unzip_async"
        ],
        symbol: [
          "AudioEffect",
          "AudioEffectType",
          "AudioLFOType",
          "GM_build_date",
          "GM_build_type",
          "GM_is_sandboxed",
          "GM_project_filename",
          "GM_runtime_version",
          "GM_version",
          "NaN",
          "_GMFILE_",
          "_GMFUNCTION_",
          "_GMLINE_",
          "alignmentH",
          "alignmentV",
          "all",
          "animcurvetype_bezier",
          "animcurvetype_catmullrom",
          "animcurvetype_linear",
          "asset_animationcurve",
          "asset_font",
          "asset_object",
          "asset_path",
          "asset_room",
          "asset_script",
          "asset_sequence",
          "asset_shader",
          "asset_sound",
          "asset_sprite",
          "asset_tiles",
          "asset_timeline",
          "asset_unknown",
          "audio_3D",
          "audio_bus_main",
          "audio_falloff_exponent_distance",
          "audio_falloff_exponent_distance_clamped",
          "audio_falloff_exponent_distance_scaled",
          "audio_falloff_inverse_distance",
          "audio_falloff_inverse_distance_clamped",
          "audio_falloff_inverse_distance_scaled",
          "audio_falloff_linear_distance",
          "audio_falloff_linear_distance_clamped",
          "audio_falloff_none",
          "audio_mono",
          "audio_stereo",
          "bboxkind_diamond",
          "bboxkind_ellipse",
          "bboxkind_precise",
          "bboxkind_rectangular",
          "bboxmode_automatic",
          "bboxmode_fullimage",
          "bboxmode_manual",
          "bm_add",
          "bm_dest_alpha",
          "bm_dest_color",
          "bm_dest_colour",
          "bm_inv_dest_alpha",
          "bm_inv_dest_color",
          "bm_inv_dest_colour",
          "bm_inv_src_alpha",
          "bm_inv_src_color",
          "bm_inv_src_colour",
          "bm_max",
          "bm_normal",
          "bm_one",
          "bm_src_alpha",
          "bm_src_alpha_sat",
          "bm_src_color",
          "bm_src_colour",
          "bm_subtract",
          "bm_zero",
          "browser_chrome",
          "browser_edge",
          "browser_firefox",
          "browser_ie",
          "browser_ie_mobile",
          "browser_not_a_browser",
          "browser_opera",
          "browser_safari",
          "browser_safari_mobile",
          "browser_tizen",
          "browser_unknown",
          "browser_windows_store",
          "buffer_bool",
          "buffer_f16",
          "buffer_f32",
          "buffer_f64",
          "buffer_fast",
          "buffer_fixed",
          "buffer_grow",
          "buffer_s16",
          "buffer_s32",
          "buffer_s8",
          "buffer_seek_end",
          "buffer_seek_relative",
          "buffer_seek_start",
          "buffer_string",
          "buffer_text",
          "buffer_u16",
          "buffer_u32",
          "buffer_u64",
          "buffer_u8",
          "buffer_vbuffer",
          "buffer_wrap",
          "c_aqua",
          "c_black",
          "c_blue",
          "c_dkgray",
          "c_dkgrey",
          "c_fuchsia",
          "c_gray",
          "c_green",
          "c_grey",
          "c_lime",
          "c_ltgray",
          "c_ltgrey",
          "c_maroon",
          "c_navy",
          "c_olive",
          "c_orange",
          "c_purple",
          "c_red",
          "c_silver",
          "c_teal",
          "c_white",
          "c_yellow",
          "cache_directory",
          "characterSpacing",
          "cmpfunc_always",
          "cmpfunc_equal",
          "cmpfunc_greater",
          "cmpfunc_greaterequal",
          "cmpfunc_less",
          "cmpfunc_lessequal",
          "cmpfunc_never",
          "cmpfunc_notequal",
          "coreColor",
          "coreColour",
          "cr_appstart",
          "cr_arrow",
          "cr_beam",
          "cr_cross",
          "cr_default",
          "cr_drag",
          "cr_handpoint",
          "cr_hourglass",
          "cr_none",
          "cr_size_all",
          "cr_size_nesw",
          "cr_size_ns",
          "cr_size_nwse",
          "cr_size_we",
          "cr_uparrow",
          "cull_clockwise",
          "cull_counterclockwise",
          "cull_noculling",
          "device_emulator",
          "device_ios_ipad",
          "device_ios_ipad_retina",
          "device_ios_iphone",
          "device_ios_iphone5",
          "device_ios_iphone6",
          "device_ios_iphone6plus",
          "device_ios_iphone_retina",
          "device_ios_unknown",
          "device_tablet",
          "display_landscape",
          "display_landscape_flipped",
          "display_portrait",
          "display_portrait_flipped",
          "dll_cdecl",
          "dll_stdcall",
          "dropShadowEnabled",
          "dropShadowEnabled",
          "ds_type_grid",
          "ds_type_list",
          "ds_type_map",
          "ds_type_priority",
          "ds_type_queue",
          "ds_type_stack",
          "ef_cloud",
          "ef_ellipse",
          "ef_explosion",
          "ef_firework",
          "ef_flare",
          "ef_rain",
          "ef_ring",
          "ef_smoke",
          "ef_smokeup",
          "ef_snow",
          "ef_spark",
          "ef_star",
          "effectsEnabled",
          "effectsEnabled",
          "ev_alarm",
          "ev_animation_end",
          "ev_animation_event",
          "ev_animation_update",
          "ev_async_audio_playback",
          "ev_async_audio_playback_ended",
          "ev_async_audio_recording",
          "ev_async_dialog",
          "ev_async_push_notification",
          "ev_async_save_load",
          "ev_async_save_load",
          "ev_async_social",
          "ev_async_system_event",
          "ev_async_web",
          "ev_async_web_cloud",
          "ev_async_web_iap",
          "ev_async_web_image_load",
          "ev_async_web_networking",
          "ev_async_web_steam",
          "ev_audio_playback",
          "ev_audio_playback_ended",
          "ev_audio_recording",
          "ev_boundary",
          "ev_boundary_view0",
          "ev_boundary_view1",
          "ev_boundary_view2",
          "ev_boundary_view3",
          "ev_boundary_view4",
          "ev_boundary_view5",
          "ev_boundary_view6",
          "ev_boundary_view7",
          "ev_broadcast_message",
          "ev_cleanup",
          "ev_collision",
          "ev_create",
          "ev_destroy",
          "ev_dialog_async",
          "ev_draw",
          "ev_draw_begin",
          "ev_draw_end",
          "ev_draw_normal",
          "ev_draw_post",
          "ev_draw_pre",
          "ev_end_of_path",
          "ev_game_end",
          "ev_game_start",
          "ev_gesture",
          "ev_gesture_double_tap",
          "ev_gesture_drag_end",
          "ev_gesture_drag_start",
          "ev_gesture_dragging",
          "ev_gesture_flick",
          "ev_gesture_pinch_end",
          "ev_gesture_pinch_in",
          "ev_gesture_pinch_out",
          "ev_gesture_pinch_start",
          "ev_gesture_rotate_end",
          "ev_gesture_rotate_start",
          "ev_gesture_rotating",
          "ev_gesture_tap",
          "ev_global_gesture_double_tap",
          "ev_global_gesture_drag_end",
          "ev_global_gesture_drag_start",
          "ev_global_gesture_dragging",
          "ev_global_gesture_flick",
          "ev_global_gesture_pinch_end",
          "ev_global_gesture_pinch_in",
          "ev_global_gesture_pinch_out",
          "ev_global_gesture_pinch_start",
          "ev_global_gesture_rotate_end",
          "ev_global_gesture_rotate_start",
          "ev_global_gesture_rotating",
          "ev_global_gesture_tap",
          "ev_global_left_button",
          "ev_global_left_press",
          "ev_global_left_release",
          "ev_global_middle_button",
          "ev_global_middle_press",
          "ev_global_middle_release",
          "ev_global_right_button",
          "ev_global_right_press",
          "ev_global_right_release",
          "ev_gui",
          "ev_gui_begin",
          "ev_gui_end",
          "ev_joystick1_button1",
          "ev_joystick1_button2",
          "ev_joystick1_button3",
          "ev_joystick1_button4",
          "ev_joystick1_button5",
          "ev_joystick1_button6",
          "ev_joystick1_button7",
          "ev_joystick1_button8",
          "ev_joystick1_down",
          "ev_joystick1_left",
          "ev_joystick1_right",
          "ev_joystick1_up",
          "ev_joystick2_button1",
          "ev_joystick2_button2",
          "ev_joystick2_button3",
          "ev_joystick2_button4",
          "ev_joystick2_button5",
          "ev_joystick2_button6",
          "ev_joystick2_button7",
          "ev_joystick2_button8",
          "ev_joystick2_down",
          "ev_joystick2_left",
          "ev_joystick2_right",
          "ev_joystick2_up",
          "ev_keyboard",
          "ev_keypress",
          "ev_keyrelease",
          "ev_left_button",
          "ev_left_press",
          "ev_left_release",
          "ev_middle_button",
          "ev_middle_press",
          "ev_middle_release",
          "ev_mouse",
          "ev_mouse_enter",
          "ev_mouse_leave",
          "ev_mouse_wheel_down",
          "ev_mouse_wheel_up",
          "ev_no_button",
          "ev_no_more_health",
          "ev_no_more_lives",
          "ev_other",
          "ev_outside",
          "ev_outside_view0",
          "ev_outside_view1",
          "ev_outside_view2",
          "ev_outside_view3",
          "ev_outside_view4",
          "ev_outside_view5",
          "ev_outside_view6",
          "ev_outside_view7",
          "ev_pre_create",
          "ev_push_notification",
          "ev_right_button",
          "ev_right_press",
          "ev_right_release",
          "ev_room_end",
          "ev_room_start",
          "ev_social",
          "ev_step",
          "ev_step_begin",
          "ev_step_end",
          "ev_step_normal",
          "ev_system_event",
          "ev_trigger",
          "ev_user0",
          "ev_user1",
          "ev_user10",
          "ev_user11",
          "ev_user12",
          "ev_user13",
          "ev_user14",
          "ev_user15",
          "ev_user2",
          "ev_user3",
          "ev_user4",
          "ev_user5",
          "ev_user6",
          "ev_user7",
          "ev_user8",
          "ev_user9",
          "ev_web_async",
          "ev_web_cloud",
          "ev_web_iap",
          "ev_web_image_load",
          "ev_web_networking",
          "ev_web_sound_load",
          "ev_web_steam",
          "fa_archive",
          "fa_bottom",
          "fa_center",
          "fa_directory",
          "fa_hidden",
          "fa_left",
          "fa_middle",
          "fa_none",
          "fa_readonly",
          "fa_right",
          "fa_sysfile",
          "fa_top",
          "fa_volumeid",
          "false",
          "frameSizeX",
          "frameSizeY",
          "gamespeed_fps",
          "gamespeed_microseconds",
          "global",
          "glowColor",
          "glowColour",
          "glowEnabled",
          "glowEnabled",
          "glowEnd",
          "glowStart",
          "gp_axis_acceleration_x",
          "gp_axis_acceleration_y",
          "gp_axis_acceleration_z",
          "gp_axis_angular_velocity_x",
          "gp_axis_angular_velocity_y",
          "gp_axis_angular_velocity_z",
          "gp_axis_orientation_w",
          "gp_axis_orientation_x",
          "gp_axis_orientation_y",
          "gp_axis_orientation_z",
          "gp_axislh",
          "gp_axislv",
          "gp_axisrh",
          "gp_axisrv",
          "gp_face1",
          "gp_face2",
          "gp_face3",
          "gp_face4",
          "gp_padd",
          "gp_padl",
          "gp_padr",
          "gp_padu",
          "gp_select",
          "gp_shoulderl",
          "gp_shoulderlb",
          "gp_shoulderr",
          "gp_shoulderrb",
          "gp_start",
          "gp_stickl",
          "gp_stickr",
          "iap_available",
          "iap_canceled",
          "iap_ev_consume",
          "iap_ev_product",
          "iap_ev_purchase",
          "iap_ev_restore",
          "iap_ev_storeload",
          "iap_failed",
          "iap_purchased",
          "iap_refunded",
          "iap_status_available",
          "iap_status_loading",
          "iap_status_processing",
          "iap_status_restoring",
          "iap_status_unavailable",
          "iap_status_uninitialised",
          "iap_storeload_failed",
          "iap_storeload_ok",
          "iap_unavailable",
          "infinity",
          "kbv_autocapitalize_characters",
          "kbv_autocapitalize_none",
          "kbv_autocapitalize_sentences",
          "kbv_autocapitalize_words",
          "kbv_returnkey_continue",
          "kbv_returnkey_default",
          "kbv_returnkey_done",
          "kbv_returnkey_emergency",
          "kbv_returnkey_go",
          "kbv_returnkey_google",
          "kbv_returnkey_join",
          "kbv_returnkey_next",
          "kbv_returnkey_route",
          "kbv_returnkey_search",
          "kbv_returnkey_send",
          "kbv_returnkey_yahoo",
          "kbv_type_ascii",
          "kbv_type_default",
          "kbv_type_email",
          "kbv_type_numbers",
          "kbv_type_phone",
          "kbv_type_phone_name",
          "kbv_type_url",
          "layerelementtype_background",
          "layerelementtype_instance",
          "layerelementtype_oldtilemap",
          "layerelementtype_particlesystem",
          "layerelementtype_sequence",
          "layerelementtype_sprite",
          "layerelementtype_tile",
          "layerelementtype_tilemap",
          "layerelementtype_undefined",
          "leaderboard_type_number",
          "leaderboard_type_time_mins_secs",
          "lighttype_dir",
          "lighttype_point",
          "lineSpacing",
          "m_axisx",
          "m_axisx_gui",
          "m_axisy",
          "m_axisy_gui",
          "m_scroll_down",
          "m_scroll_up",
          "matrix_projection",
          "matrix_view",
          "matrix_world",
          "mb_any",
          "mb_left",
          "mb_middle",
          "mb_none",
          "mb_right",
          "mb_side1",
          "mb_side2",
          "mip_markedonly",
          "mip_off",
          "mip_on",
          "network_config_avoid_time_wait",
          "network_config_connect_timeout",
          "network_config_disable_multicast",
          "network_config_disable_reliable_udp",
          "network_config_enable_multicast",
          "network_config_enable_reliable_udp",
          "network_config_use_non_blocking_socket",
          "network_config_websocket_protocol",
          "network_connect_active",
          "network_connect_blocking",
          "network_connect_nonblocking",
          "network_connect_none",
          "network_connect_passive",
          "network_send_binary",
          "network_send_text",
          "network_socket_bluetooth",
          "network_socket_tcp",
          "network_socket_udp",
          "network_socket_ws",
          "network_socket_wss",
          "network_type_connect",
          "network_type_data",
          "network_type_disconnect",
          "network_type_down",
          "network_type_non_blocking_connect",
          "network_type_up",
          "network_type_up_failed",
          "nineslice_blank",
          "nineslice_bottom",
          "nineslice_center",
          "nineslice_centre",
          "nineslice_hide",
          "nineslice_left",
          "nineslice_mirror",
          "nineslice_repeat",
          "nineslice_right",
          "nineslice_stretch",
          "nineslice_top",
          "noone",
          "of_challenge_lose",
          "of_challenge_tie",
          "of_challenge_win",
          "os_android",
          "os_gdk",
          "os_gxgames",
          "os_ios",
          "os_linux",
          "os_macosx",
          "os_operagx",
          "os_permission_denied",
          "os_permission_denied_dont_request",
          "os_permission_granted",
          "os_ps3",
          "os_ps4",
          "os_ps5",
          "os_psvita",
          "os_switch",
          "os_tvos",
          "os_unknown",
          "os_uwp",
          "os_win8native",
          "os_windows",
          "os_winphone",
          "os_xboxone",
          "os_xboxseriesxs",
          "other",
          "outlineColor",
          "outlineColour",
          "outlineDist",
          "outlineEnabled",
          "outlineEnabled",
          "paragraphSpacing",
          "path_action_continue",
          "path_action_restart",
          "path_action_reverse",
          "path_action_stop",
          "phy_debug_render_aabb",
          "phy_debug_render_collision_pairs",
          "phy_debug_render_coms",
          "phy_debug_render_core_shapes",
          "phy_debug_render_joints",
          "phy_debug_render_obb",
          "phy_debug_render_shapes",
          "phy_joint_anchor_1_x",
          "phy_joint_anchor_1_y",
          "phy_joint_anchor_2_x",
          "phy_joint_anchor_2_y",
          "phy_joint_angle",
          "phy_joint_angle_limits",
          "phy_joint_damping_ratio",
          "phy_joint_frequency",
          "phy_joint_length_1",
          "phy_joint_length_2",
          "phy_joint_lower_angle_limit",
          "phy_joint_max_force",
          "phy_joint_max_length",
          "phy_joint_max_motor_force",
          "phy_joint_max_motor_torque",
          "phy_joint_max_torque",
          "phy_joint_motor_force",
          "phy_joint_motor_speed",
          "phy_joint_motor_torque",
          "phy_joint_reaction_force_x",
          "phy_joint_reaction_force_y",
          "phy_joint_reaction_torque",
          "phy_joint_speed",
          "phy_joint_translation",
          "phy_joint_upper_angle_limit",
          "phy_particle_data_flag_category",
          "phy_particle_data_flag_color",
          "phy_particle_data_flag_colour",
          "phy_particle_data_flag_position",
          "phy_particle_data_flag_typeflags",
          "phy_particle_data_flag_velocity",
          "phy_particle_flag_colormixing",
          "phy_particle_flag_colourmixing",
          "phy_particle_flag_elastic",
          "phy_particle_flag_powder",
          "phy_particle_flag_spring",
          "phy_particle_flag_tensile",
          "phy_particle_flag_viscous",
          "phy_particle_flag_wall",
          "phy_particle_flag_water",
          "phy_particle_flag_zombie",
          "phy_particle_group_flag_rigid",
          "phy_particle_group_flag_solid",
          "pi",
          "pointer_invalid",
          "pointer_null",
          "pr_linelist",
          "pr_linestrip",
          "pr_pointlist",
          "pr_trianglefan",
          "pr_trianglelist",
          "pr_trianglestrip",
          "ps_distr_gaussian",
          "ps_distr_invgaussian",
          "ps_distr_linear",
          "ps_mode_burst",
          "ps_mode_stream",
          "ps_shape_diamond",
          "ps_shape_ellipse",
          "ps_shape_line",
          "ps_shape_rectangle",
          "pt_shape_circle",
          "pt_shape_cloud",
          "pt_shape_disk",
          "pt_shape_explosion",
          "pt_shape_flare",
          "pt_shape_line",
          "pt_shape_pixel",
          "pt_shape_ring",
          "pt_shape_smoke",
          "pt_shape_snow",
          "pt_shape_spark",
          "pt_shape_sphere",
          "pt_shape_square",
          "pt_shape_star",
          "rollback_chat_message",
          "rollback_connect_error",
          "rollback_connect_info",
          "rollback_connected_to_peer",
          "rollback_connection_rejected",
          "rollback_disconnected_from_peer",
          "rollback_end_game",
          "rollback_game_full",
          "rollback_game_info",
          "rollback_game_interrupted",
          "rollback_game_resumed",
          "rollback_high_latency",
          "rollback_player_prefs",
          "rollback_protocol_rejected",
          "rollback_synchronized_with_peer",
          "rollback_synchronizing_with_peer",
          "self",
          "seqaudiokey_loop",
          "seqaudiokey_oneshot",
          "seqdir_left",
          "seqdir_right",
          "seqinterpolation_assign",
          "seqinterpolation_lerp",
          "seqplay_loop",
          "seqplay_oneshot",
          "seqplay_pingpong",
          "seqtextkey_bottom",
          "seqtextkey_center",
          "seqtextkey_justify",
          "seqtextkey_left",
          "seqtextkey_middle",
          "seqtextkey_right",
          "seqtextkey_top",
          "seqtracktype_audio",
          "seqtracktype_bool",
          "seqtracktype_clipmask",
          "seqtracktype_clipmask_mask",
          "seqtracktype_clipmask_subject",
          "seqtracktype_color",
          "seqtracktype_colour",
          "seqtracktype_empty",
          "seqtracktype_graphic",
          "seqtracktype_group",
          "seqtracktype_instance",
          "seqtracktype_message",
          "seqtracktype_moment",
          "seqtracktype_particlesystem",
          "seqtracktype_real",
          "seqtracktype_sequence",
          "seqtracktype_spriteframes",
          "seqtracktype_string",
          "seqtracktype_text",
          "shadowColor",
          "shadowColour",
          "shadowOffsetX",
          "shadowOffsetY",
          "shadowSoftness",
          "sprite_add_ext_error_cancelled",
          "sprite_add_ext_error_decompressfailed",
          "sprite_add_ext_error_loadfailed",
          "sprite_add_ext_error_setupfailed",
          "sprite_add_ext_error_spritenotfound",
          "sprite_add_ext_error_unknown",
          "spritespeed_framespergameframe",
          "spritespeed_framespersecond",
          "surface_r16float",
          "surface_r32float",
          "surface_r8unorm",
          "surface_rg8unorm",
          "surface_rgba16float",
          "surface_rgba32float",
          "surface_rgba4unorm",
          "surface_rgba8unorm",
          "texturegroup_status_fetched",
          "texturegroup_status_loaded",
          "texturegroup_status_loading",
          "texturegroup_status_unloaded",
          "tf_anisotropic",
          "tf_linear",
          "tf_point",
          "thickness",
          "tile_flip",
          "tile_index_mask",
          "tile_mirror",
          "tile_rotate",
          "time_source_expire_after",
          "time_source_expire_nearest",
          "time_source_game",
          "time_source_global",
          "time_source_state_active",
          "time_source_state_initial",
          "time_source_state_paused",
          "time_source_state_stopped",
          "time_source_units_frames",
          "time_source_units_seconds",
          "timezone_local",
          "timezone_utc",
          "tm_countvsyncs",
          "tm_sleep",
          "tm_systemtiming",
          "true",
          "ty_real",
          "ty_string",
          "undefined",
          "vertex_type_color",
          "vertex_type_colour",
          "vertex_type_float1",
          "vertex_type_float2",
          "vertex_type_float3",
          "vertex_type_float4",
          "vertex_type_ubyte4",
          "vertex_usage_binormal",
          "vertex_usage_blendindices",
          "vertex_usage_blendweight",
          "vertex_usage_color",
          "vertex_usage_colour",
          "vertex_usage_depth",
          "vertex_usage_fog",
          "vertex_usage_normal",
          "vertex_usage_position",
          "vertex_usage_psize",
          "vertex_usage_sample",
          "vertex_usage_tangent",
          "vertex_usage_texcoord",
          "video_format_rgba",
          "video_format_yuv",
          "video_status_closed",
          "video_status_paused",
          "video_status_playing",
          "video_status_preparing",
          "vk_add",
          "vk_alt",
          "vk_anykey",
          "vk_backspace",
          "vk_control",
          "vk_decimal",
          "vk_delete",
          "vk_divide",
          "vk_down",
          "vk_end",
          "vk_enter",
          "vk_escape",
          "vk_f1",
          "vk_f10",
          "vk_f11",
          "vk_f12",
          "vk_f2",
          "vk_f3",
          "vk_f4",
          "vk_f5",
          "vk_f6",
          "vk_f7",
          "vk_f8",
          "vk_f9",
          "vk_home",
          "vk_insert",
          "vk_lalt",
          "vk_lcontrol",
          "vk_left",
          "vk_lshift",
          "vk_multiply",
          "vk_nokey",
          "vk_numpad0",
          "vk_numpad1",
          "vk_numpad2",
          "vk_numpad3",
          "vk_numpad4",
          "vk_numpad5",
          "vk_numpad6",
          "vk_numpad7",
          "vk_numpad8",
          "vk_numpad9",
          "vk_pagedown",
          "vk_pageup",
          "vk_pause",
          "vk_printscreen",
          "vk_ralt",
          "vk_rcontrol",
          "vk_return",
          "vk_right",
          "vk_rshift",
          "vk_shift",
          "vk_space",
          "vk_subtract",
          "vk_tab",
          "vk_up",
          "wallpaper_config",
          "wallpaper_subscription_data",
          "wrap"
        ],
        "variable.language": [
          "alarm",
          "application_surface",
          "argument",
          "argument0",
          "argument1",
          "argument2",
          "argument3",
          "argument4",
          "argument5",
          "argument6",
          "argument7",
          "argument8",
          "argument9",
          "argument10",
          "argument11",
          "argument12",
          "argument13",
          "argument14",
          "argument15",
          "argument_count",
          "async_load",
          "background_color",
          "background_colour",
          "background_showcolor",
          "background_showcolour",
          "bbox_bottom",
          "bbox_left",
          "bbox_right",
          "bbox_top",
          "browser_height",
          "browser_width",
          "colour?ColourTrack",
          "current_day",
          "current_hour",
          "current_minute",
          "current_month",
          "current_second",
          "current_time",
          "current_weekday",
          "current_year",
          "cursor_sprite",
          "debug_mode",
          "delta_time",
          "depth",
          "direction",
          "display_aa",
          "drawn_by_sequence",
          "event_action",
          "event_data",
          "event_number",
          "event_object",
          "event_type",
          "font_texture_page_size",
          "fps",
          "fps_real",
          "friction",
          "game_display_name",
          "game_id",
          "game_project_name",
          "game_save_id",
          "gravity",
          "gravity_direction",
          "health",
          "hspeed",
          "iap_data",
          "id",
          "image_alpha",
          "image_angle",
          "image_blend",
          "image_index",
          "image_number",
          "image_speed",
          "image_xscale",
          "image_yscale",
          "in_collision_tree",
          "in_sequence",
          "instance_count",
          "instance_id",
          "keyboard_key",
          "keyboard_lastchar",
          "keyboard_lastkey",
          "keyboard_string",
          "layer",
          "lives",
          "longMessage",
          "managed",
          "mask_index",
          "message",
          "mouse_button",
          "mouse_lastbutton",
          "mouse_x",
          "mouse_y",
          "object_index",
          "os_browser",
          "os_device",
          "os_type",
          "os_version",
          "path_endaction",
          "path_index",
          "path_orientation",
          "path_position",
          "path_positionprevious",
          "path_scale",
          "path_speed",
          "persistent",
          "phy_active",
          "phy_angular_damping",
          "phy_angular_velocity",
          "phy_bullet",
          "phy_col_normal_x",
          "phy_col_normal_y",
          "phy_collision_points",
          "phy_collision_x",
          "phy_collision_y",
          "phy_com_x",
          "phy_com_y",
          "phy_dynamic",
          "phy_fixed_rotation",
          "phy_inertia",
          "phy_kinematic",
          "phy_linear_damping",
          "phy_linear_velocity_x",
          "phy_linear_velocity_y",
          "phy_mass",
          "phy_position_x",
          "phy_position_xprevious",
          "phy_position_y",
          "phy_position_yprevious",
          "phy_rotation",
          "phy_sleeping",
          "phy_speed",
          "phy_speed_x",
          "phy_speed_y",
          "player_avatar_sprite",
          "player_avatar_url",
          "player_id",
          "player_local",
          "player_type",
          "player_user_id",
          "program_directory",
          "rollback_api_server",
          "rollback_confirmed_frame",
          "rollback_current_frame",
          "rollback_event_id",
          "rollback_event_param",
          "rollback_game_running",
          "room",
          "room_first",
          "room_height",
          "room_last",
          "room_persistent",
          "room_speed",
          "room_width",
          "score",
          "script",
          "sequence_instance",
          "solid",
          "speed",
          "sprite_height",
          "sprite_index",
          "sprite_width",
          "sprite_xoffset",
          "sprite_yoffset",
          "stacktrace",
          "temp_directory",
          "timeline_index",
          "timeline_loop",
          "timeline_position",
          "timeline_running",
          "timeline_speed",
          "view_camera",
          "view_current",
          "view_enabled",
          "view_hport",
          "view_surface_id",
          "view_visible",
          "view_wport",
          "view_xport",
          "view_yport",
          "visible",
          "vspeed",
          "webgl_enabled",
          "working_directory",
          "x",
          "xprevious",
          "xstart",
          "y",
          "yprevious",
          "ystart"
        ]
      },
      contains: [
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        e2.APOS_STRING_MODE,
        e2.QUOTE_STRING_MODE,
        e2.C_NUMBER_MODE
      ]
    };
  }
  return Pi = t2, Pi;
}
var Fi, H_;
function wR() {
  if (H_)
    return Fi;
  H_ = 1;
  function t2(e2) {
    const s2 = {
      keyword: [
        "break",
        "case",
        "chan",
        "const",
        "continue",
        "default",
        "defer",
        "else",
        "fallthrough",
        "for",
        "func",
        "go",
        "goto",
        "if",
        "import",
        "interface",
        "map",
        "package",
        "range",
        "return",
        "select",
        "struct",
        "switch",
        "type",
        "var"
      ],
      type: [
        "bool",
        "byte",
        "complex64",
        "complex128",
        "error",
        "float32",
        "float64",
        "int8",
        "int16",
        "int32",
        "int64",
        "string",
        "uint8",
        "uint16",
        "uint32",
        "uint64",
        "int",
        "uint",
        "uintptr",
        "rune"
      ],
      literal: [
        "true",
        "false",
        "iota",
        "nil"
      ],
      built_in: [
        "append",
        "cap",
        "close",
        "complex",
        "copy",
        "imag",
        "len",
        "make",
        "new",
        "panic",
        "print",
        "println",
        "real",
        "recover",
        "delete"
      ]
    };
    return {
      name: "Go",
      aliases: ["golang"],
      keywords: s2,
      illegal: "</",
      contains: [
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        {
          className: "string",
          variants: [
            e2.QUOTE_STRING_MODE,
            e2.APOS_STRING_MODE,
            {
              begin: "`",
              end: "`"
            }
          ]
        },
        {
          className: "number",
          variants: [
            {
              match: /-?\b0[xX]\.[a-fA-F0-9](_?[a-fA-F0-9])*[pP][+-]?\d(_?\d)*i?/,
              // hex without a present digit before . (making a digit afterwards required)
              relevance: 0
            },
            {
              match: /-?\b0[xX](_?[a-fA-F0-9])+((\.([a-fA-F0-9](_?[a-fA-F0-9])*)?)?[pP][+-]?\d(_?\d)*)?i?/,
              // hex with a present digit before . (making a digit afterwards optional)
              relevance: 0
            },
            {
              match: /-?\b0[oO](_?[0-7])*i?/,
              // leading 0o octal
              relevance: 0
            },
            {
              match: /-?\.\d(_?\d)*([eE][+-]?\d(_?\d)*)?i?/,
              // decimal without a present digit before . (making a digit afterwards required)
              relevance: 0
            },
            {
              match: /-?\b\d(_?\d)*(\.(\d(_?\d)*)?)?([eE][+-]?\d(_?\d)*)?i?/,
              // decimal with a present digit before . (making a digit afterwards optional)
              relevance: 0
            }
          ]
        },
        {
          begin: /:=/
          // relevance booster
        },
        {
          className: "function",
          beginKeywords: "func",
          end: "\\s*(\\{|$)",
          excludeEnd: true,
          contains: [
            e2.TITLE_MODE,
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              endsParent: true,
              keywords: s2,
              illegal: /["']/
            }
          ]
        }
      ]
    };
  }
  return Fi = t2, Fi;
}
var Ui, z_;
function kR() {
  if (z_)
    return Ui;
  z_ = 1;
  function t2(e2) {
    return {
      name: "Golo",
      keywords: {
        keyword: [
          "println",
          "readln",
          "print",
          "import",
          "module",
          "function",
          "local",
          "return",
          "let",
          "var",
          "while",
          "for",
          "foreach",
          "times",
          "in",
          "case",
          "when",
          "match",
          "with",
          "break",
          "continue",
          "augment",
          "augmentation",
          "each",
          "find",
          "filter",
          "reduce",
          "if",
          "then",
          "else",
          "otherwise",
          "try",
          "catch",
          "finally",
          "raise",
          "throw",
          "orIfNull",
          "DynamicObject|10",
          "DynamicVariable",
          "struct",
          "Observable",
          "map",
          "set",
          "vector",
          "list",
          "array"
        ],
        literal: [
          "true",
          "false",
          "null"
        ]
      },
      contains: [
        e2.HASH_COMMENT_MODE,
        e2.QUOTE_STRING_MODE,
        e2.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "@[A-Za-z]+"
        }
      ]
    };
  }
  return Ui = t2, Ui;
}
var Bi, $_;
function PR() {
  if ($_)
    return Bi;
  $_ = 1;
  function t2(e2) {
    return {
      name: "Gradle",
      case_insensitive: true,
      keywords: [
        "task",
        "project",
        "allprojects",
        "subprojects",
        "artifacts",
        "buildscript",
        "configurations",
        "dependencies",
        "repositories",
        "sourceSets",
        "description",
        "delete",
        "from",
        "into",
        "include",
        "exclude",
        "source",
        "classpath",
        "destinationDir",
        "includes",
        "options",
        "sourceCompatibility",
        "targetCompatibility",
        "group",
        "flatDir",
        "doLast",
        "doFirst",
        "flatten",
        "todir",
        "fromdir",
        "ant",
        "def",
        "abstract",
        "break",
        "case",
        "catch",
        "continue",
        "default",
        "do",
        "else",
        "extends",
        "final",
        "finally",
        "for",
        "if",
        "implements",
        "instanceof",
        "native",
        "new",
        "private",
        "protected",
        "public",
        "return",
        "static",
        "switch",
        "synchronized",
        "throw",
        "throws",
        "transient",
        "try",
        "volatile",
        "while",
        "strictfp",
        "package",
        "import",
        "false",
        "null",
        "super",
        "this",
        "true",
        "antlrtask",
        "checkstyle",
        "codenarc",
        "copy",
        "boolean",
        "byte",
        "char",
        "class",
        "double",
        "float",
        "int",
        "interface",
        "long",
        "short",
        "void",
        "compile",
        "runTime",
        "file",
        "fileTree",
        "abs",
        "any",
        "append",
        "asList",
        "asWritable",
        "call",
        "collect",
        "compareTo",
        "count",
        "div",
        "dump",
        "each",
        "eachByte",
        "eachFile",
        "eachLine",
        "every",
        "find",
        "findAll",
        "flatten",
        "getAt",
        "getErr",
        "getIn",
        "getOut",
        "getText",
        "grep",
        "immutable",
        "inject",
        "inspect",
        "intersect",
        "invokeMethods",
        "isCase",
        "join",
        "leftShift",
        "minus",
        "multiply",
        "newInputStream",
        "newOutputStream",
        "newPrintWriter",
        "newReader",
        "newWriter",
        "next",
        "plus",
        "pop",
        "power",
        "previous",
        "print",
        "println",
        "push",
        "putAt",
        "read",
        "readBytes",
        "readLines",
        "reverse",
        "reverseEach",
        "round",
        "size",
        "sort",
        "splitEachLine",
        "step",
        "subMap",
        "times",
        "toInteger",
        "toList",
        "tokenize",
        "upto",
        "waitForOrKill",
        "withPrintWriter",
        "withReader",
        "withStream",
        "withWriter",
        "withWriterAppend",
        "write",
        "writeLine"
      ],
      contains: [
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        e2.APOS_STRING_MODE,
        e2.QUOTE_STRING_MODE,
        e2.NUMBER_MODE,
        e2.REGEXP_MODE
      ]
    };
  }
  return Bi = t2, Bi;
}
var Gi, W_;
function FR() {
  if (W_)
    return Gi;
  W_ = 1;
  function t2(e2) {
    const n = e2.regex, i2 = /[_A-Za-z][_0-9A-Za-z]*/;
    return {
      name: "GraphQL",
      aliases: ["gql"],
      case_insensitive: true,
      disableAutodetect: false,
      keywords: {
        keyword: [
          "query",
          "mutation",
          "subscription",
          "type",
          "input",
          "schema",
          "directive",
          "interface",
          "union",
          "scalar",
          "fragment",
          "enum",
          "on"
        ],
        literal: [
          "true",
          "false",
          "null"
        ]
      },
      contains: [
        e2.HASH_COMMENT_MODE,
        e2.QUOTE_STRING_MODE,
        e2.NUMBER_MODE,
        {
          scope: "punctuation",
          match: /[.]{3}/,
          relevance: 0
        },
        {
          scope: "punctuation",
          begin: /[\!\(\)\:\=\[\]\{\|\}]{1}/,
          relevance: 0
        },
        {
          scope: "variable",
          begin: /\$/,
          end: /\W/,
          excludeEnd: true,
          relevance: 0
        },
        {
          scope: "meta",
          match: /@\w+/,
          excludeEnd: true
        },
        {
          scope: "symbol",
          begin: n.concat(i2, n.lookahead(/\s*:/)),
          relevance: 0
        }
      ],
      illegal: [
        /[;<']/,
        /BEGIN/
      ]
    };
  }
  return Gi = t2, Gi;
}
var Yi, K_;
function UR() {
  if (K_)
    return Yi;
  K_ = 1;
  function t2(n, i2 = {}) {
    return i2.variants = n, i2;
  }
  function e2(n) {
    const i2 = n.regex, r2 = "[A-Za-z0-9_$]+", a2 = t2([
      n.C_LINE_COMMENT_MODE,
      n.C_BLOCK_COMMENT_MODE,
      n.COMMENT(
        "/\\*\\*",
        "\\*/",
        {
          relevance: 0,
          contains: [
            {
              // eat up @'s in emails to prevent them to be recognized as doctags
              begin: /\w+@/,
              relevance: 0
            },
            {
              className: "doctag",
              begin: "@[A-Za-z]+"
            }
          ]
        }
      )
    ]), s2 = {
      className: "regexp",
      begin: /~?\/[^\/\n]+\//,
      contains: [n.BACKSLASH_ESCAPE]
    }, o2 = t2([
      n.BINARY_NUMBER_MODE,
      n.C_NUMBER_MODE
    ]), l2 = t2(
      [
        {
          begin: /"""/,
          end: /"""/
        },
        {
          begin: /'''/,
          end: /'''/
        },
        {
          begin: "\\$/",
          end: "/\\$",
          relevance: 10
        },
        n.APOS_STRING_MODE,
        n.QUOTE_STRING_MODE
      ],
      { className: "string" }
    ), u2 = {
      match: [
        /(class|interface|trait|enum|record|extends|implements)/,
        /\s+/,
        n.UNDERSCORE_IDENT_RE
      ],
      scope: {
        1: "keyword",
        3: "title.class"
      }
    };
    return {
      name: "Groovy",
      keywords: {
        "variable.language": "this super",
        literal: "true false null",
        type: [
          "byte",
          "short",
          "char",
          "int",
          "long",
          "boolean",
          "float",
          "double",
          "void"
        ],
        keyword: [
          // groovy specific keywords
          "def",
          "as",
          "in",
          "assert",
          "trait",
          // common keywords with Java
          "abstract",
          "static",
          "volatile",
          "transient",
          "public",
          "private",
          "protected",
          "synchronized",
          "final",
          "class",
          "interface",
          "enum",
          "if",
          "else",
          "for",
          "while",
          "switch",
          "case",
          "break",
          "default",
          "continue",
          "throw",
          "throws",
          "try",
          "catch",
          "finally",
          "implements",
          "extends",
          "new",
          "import",
          "package",
          "return",
          "instanceof",
          "var"
        ]
      },
      contains: [
        n.SHEBANG({
          binary: "groovy",
          relevance: 10
        }),
        a2,
        l2,
        s2,
        o2,
        u2,
        {
          className: "meta",
          begin: "@[A-Za-z]+",
          relevance: 0
        },
        {
          // highlight map keys and named parameters as attrs
          className: "attr",
          begin: r2 + "[ 	]*:",
          relevance: 0
        },
        {
          // catch middle element of the ternary operator
          // to avoid highlight it as a label, named parameter, or map key
          begin: /\?/,
          end: /:/,
          relevance: 0,
          contains: [
            a2,
            l2,
            s2,
            o2,
            "self"
          ]
        },
        {
          // highlight labeled statements
          className: "symbol",
          begin: "^[ 	]*" + i2.lookahead(r2 + ":"),
          excludeBegin: true,
          end: r2 + ":",
          relevance: 0
        }
      ],
      illegal: /#|<\//
    };
  }
  return Yi = e2, Yi;
}
var qi, Q_;
function BR() {
  if (Q_)
    return qi;
  Q_ = 1;
  function t2(e2) {
    return {
      name: "HAML",
      case_insensitive: true,
      contains: [
        {
          className: "meta",
          begin: "^!!!( (5|1\\.1|Strict|Frameset|Basic|Mobile|RDFa|XML\\b.*))?$",
          relevance: 10
        },
        // FIXME these comments should be allowed to span indented lines
        e2.COMMENT(
          "^\\s*(!=#|=#|-#|/).*$",
          null,
          { relevance: 0 }
        ),
        {
          begin: "^\\s*(-|=|!=)(?!#)",
          end: /$/,
          subLanguage: "ruby",
          excludeBegin: true,
          excludeEnd: true
        },
        {
          className: "tag",
          begin: "^\\s*%",
          contains: [
            {
              className: "selector-tag",
              begin: "\\w+"
            },
            {
              className: "selector-id",
              begin: "#[\\w-]+"
            },
            {
              className: "selector-class",
              begin: "\\.[\\w-]+"
            },
            {
              begin: /\{\s*/,
              end: /\s*\}/,
              contains: [
                {
                  begin: ":\\w+\\s*=>",
                  end: ",\\s+",
                  returnBegin: true,
                  endsWithParent: true,
                  contains: [
                    {
                      className: "attr",
                      begin: ":\\w+"
                    },
                    e2.APOS_STRING_MODE,
                    e2.QUOTE_STRING_MODE,
                    {
                      begin: "\\w+",
                      relevance: 0
                    }
                  ]
                }
              ]
            },
            {
              begin: "\\(\\s*",
              end: "\\s*\\)",
              excludeEnd: true,
              contains: [
                {
                  begin: "\\w+\\s*=",
                  end: "\\s+",
                  returnBegin: true,
                  endsWithParent: true,
                  contains: [
                    {
                      className: "attr",
                      begin: "\\w+",
                      relevance: 0
                    },
                    e2.APOS_STRING_MODE,
                    e2.QUOTE_STRING_MODE,
                    {
                      begin: "\\w+",
                      relevance: 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        { begin: "^\\s*[=~]\\s*" },
        {
          begin: /#\{/,
          end: /\}/,
          subLanguage: "ruby",
          excludeBegin: true,
          excludeEnd: true
        }
      ]
    };
  }
  return qi = t2, qi;
}
var Vi, X_;
function GR() {
  if (X_)
    return Vi;
  X_ = 1;
  function t2(e2) {
    const n = e2.regex, i2 = {
      $pattern: /[\w.\/]+/,
      built_in: [
        "action",
        "bindattr",
        "collection",
        "component",
        "concat",
        "debugger",
        "each",
        "each-in",
        "get",
        "hash",
        "if",
        "in",
        "input",
        "link-to",
        "loc",
        "log",
        "lookup",
        "mut",
        "outlet",
        "partial",
        "query-params",
        "render",
        "template",
        "textarea",
        "unbound",
        "unless",
        "view",
        "with",
        "yield"
      ]
    }, r2 = {
      $pattern: /[\w.\/]+/,
      literal: [
        "true",
        "false",
        "undefined",
        "null"
      ]
    }, a2 = /""|"[^"]+"/, s2 = /''|'[^']+'/, o2 = /\[\]|\[[^\]]+\]/, l2 = /[^\s!"#%&'()*+,.\/;<=>@\[\\\]^`{|}~]+/, u2 = /(\.|\/)/, _ = n.either(
      a2,
      s2,
      o2,
      l2
    ), d2 = n.concat(
      n.optional(/\.|\.\/|\//),
      // relative or absolute path
      _,
      n.anyNumberOfTimes(n.concat(
        u2,
        _
      ))
    ), f2 = n.concat(
      "(",
      o2,
      "|",
      l2,
      ")(?==)"
    ), b = { begin: d2 }, c2 = e2.inherit(b, { keywords: r2 }), E2 = {
      begin: /\(/,
      end: /\)/
      // the "contains" is added below when all necessary sub-modes are defined
    }, g2 = {
      // fka "attribute-assignment", parameters of the form 'key=value'
      className: "attr",
      begin: f2,
      relevance: 0,
      starts: {
        begin: /=/,
        end: /=/,
        starts: { contains: [
          e2.NUMBER_MODE,
          e2.QUOTE_STRING_MODE,
          e2.APOS_STRING_MODE,
          c2,
          E2
        ] }
      }
    }, S = {
      // parameters of the form '{{#with x as | y |}}...{{/with}}'
      begin: /as\s+\|/,
      keywords: { keyword: "as" },
      end: /\|/,
      contains: [
        {
          // define sub-mode in order to prevent highlighting of block-parameter named "as"
          begin: /\w+/
        }
      ]
    }, p2 = {
      contains: [
        e2.NUMBER_MODE,
        e2.QUOTE_STRING_MODE,
        e2.APOS_STRING_MODE,
        S,
        g2,
        c2,
        E2
      ],
      returnEnd: true
      // the property "end" is defined through inheritance when the mode is used. If depends
      // on the surrounding mode, but "endsWithParent" does not work here (i.e. it includes the
      // end-token of the surrounding mode)
    }, m2 = e2.inherit(b, {
      className: "name",
      keywords: i2,
      starts: e2.inherit(p2, { end: /\)/ })
    });
    E2.contains = [m2];
    const R2 = e2.inherit(b, {
      keywords: i2,
      className: "name",
      starts: e2.inherit(p2, { end: /\}\}/ })
    }), T = e2.inherit(b, {
      keywords: i2,
      className: "name"
    }), h2 = e2.inherit(b, {
      className: "name",
      keywords: i2,
      starts: e2.inherit(p2, { end: /\}\}/ })
    });
    return {
      name: "Handlebars",
      aliases: [
        "hbs",
        "html.hbs",
        "html.handlebars",
        "htmlbars"
      ],
      case_insensitive: true,
      subLanguage: "xml",
      contains: [
        {
          begin: /\\\{\{/,
          skip: true
        },
        {
          begin: /\\\\(?=\{\{)/,
          skip: true
        },
        e2.COMMENT(/\{\{!--/, /--\}\}/),
        e2.COMMENT(/\{\{!/, /\}\}/),
        {
          // open raw block "{{{{raw}}}} content not evaluated {{{{/raw}}}}"
          className: "template-tag",
          begin: /\{\{\{\{(?!\/)/,
          end: /\}\}\}\}/,
          contains: [R2],
          starts: {
            end: /\{\{\{\{\//,
            returnEnd: true,
            subLanguage: "xml"
          }
        },
        {
          // close raw block
          className: "template-tag",
          begin: /\{\{\{\{\//,
          end: /\}\}\}\}/,
          contains: [T]
        },
        {
          // open block statement
          className: "template-tag",
          begin: /\{\{#/,
          end: /\}\}/,
          contains: [R2]
        },
        {
          className: "template-tag",
          begin: /\{\{(?=else\}\})/,
          end: /\}\}/,
          keywords: "else"
        },
        {
          className: "template-tag",
          begin: /\{\{(?=else if)/,
          end: /\}\}/,
          keywords: "else if"
        },
        {
          // closing block statement
          className: "template-tag",
          begin: /\{\{\//,
          end: /\}\}/,
          contains: [T]
        },
        {
          // template variable or helper-call that is NOT html-escaped
          className: "template-variable",
          begin: /\{\{\{/,
          end: /\}\}\}/,
          contains: [h2]
        },
        {
          // template variable or helper-call that is html-escaped
          className: "template-variable",
          begin: /\{\{/,
          end: /\}\}/,
          contains: [h2]
        }
      ]
    };
  }
  return Vi = t2, Vi;
}
var Hi, Z_;
function YR() {
  if (Z_)
    return Hi;
  Z_ = 1;
  function t2(e2) {
    const n = "([0-9]_*)+", i2 = "([0-9a-fA-F]_*)+", r2 = "([01]_*)+", a2 = "([0-7]_*)+", u2 = "([!#$%&*+.\\/<=>?@\\\\^~-]|(?!([(),;\\[\\]`|{}]|[_:\"']))(\\p{S}|\\p{P}))", _ = { variants: [
      // Double dash forms a valid comment only if it's not part of legal lexeme.
      // See: Haskell 98 report: https://www.haskell.org/onlinereport/lexemes.html
      //
      // The commented code does the job, but we can't use negative lookbehind,
      // due to poor support by Safari browser.
      // > hljs.COMMENT(`(?<!${symbol})--+(?!${symbol})`, '$'),
      // So instead, we'll add a no-markup rule before the COMMENT rule in the rules list
      // to match the problematic infix operators that contain double dash.
      e2.COMMENT("--+", "$"),
      e2.COMMENT(
        /\{-/,
        /-\}/,
        { contains: ["self"] }
      )
    ] }, d2 = {
      className: "meta",
      begin: /\{-#/,
      end: /#-\}/
    }, f2 = {
      className: "meta",
      begin: "^#",
      end: "$"
    }, b = {
      className: "type",
      begin: "\\b[A-Z][\\w']*",
      // TODO: other constructors (build-in, infix).
      relevance: 0
    }, c2 = {
      begin: "\\(",
      end: "\\)",
      illegal: '"',
      contains: [
        d2,
        f2,
        {
          className: "type",
          begin: "\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?"
        },
        e2.inherit(e2.TITLE_MODE, { begin: "[_a-z][\\w']*" }),
        _
      ]
    }, E2 = {
      begin: /\{/,
      end: /\}/,
      contains: c2.contains
    }, g2 = {
      className: "number",
      relevance: 0,
      variants: [
        // decimal floating-point-literal (subsumes decimal-literal)
        { match: `\\b(${n})(\\.(${n}))?([eE][+-]?(${n}))?\\b` },
        // hexadecimal floating-point-literal (subsumes hexadecimal-literal)
        { match: `\\b0[xX]_*(${i2})(\\.(${i2}))?([pP][+-]?(${n}))?\\b` },
        // octal-literal
        { match: `\\b0[oO](${a2})\\b` },
        // binary-literal
        { match: `\\b0[bB](${r2})\\b` }
      ]
    };
    return {
      name: "Haskell",
      aliases: ["hs"],
      keywords: "let in if then else case of where do module import hiding qualified type data newtype deriving class instance as default infix infixl infixr foreign export ccall stdcall cplusplus jvm dotnet safe unsafe family forall mdo proc rec",
      unicodeRegex: true,
      contains: [
        // Top-level constructions.
        {
          beginKeywords: "module",
          end: "where",
          keywords: "module where",
          contains: [
            c2,
            _
          ],
          illegal: "\\W\\.|;"
        },
        {
          begin: "\\bimport\\b",
          end: "$",
          keywords: "import qualified as hiding",
          contains: [
            c2,
            _
          ],
          illegal: "\\W\\.|;"
        },
        {
          className: "class",
          begin: "^(\\s*)?(class|instance)\\b",
          end: "where",
          keywords: "class family instance where",
          contains: [
            b,
            c2,
            _
          ]
        },
        {
          className: "class",
          begin: "\\b(data|(new)?type)\\b",
          end: "$",
          keywords: "data family type newtype deriving",
          contains: [
            d2,
            b,
            c2,
            E2,
            _
          ]
        },
        {
          beginKeywords: "default",
          end: "$",
          contains: [
            b,
            c2,
            _
          ]
        },
        {
          beginKeywords: "infix infixl infixr",
          end: "$",
          contains: [
            e2.C_NUMBER_MODE,
            _
          ]
        },
        {
          begin: "\\bforeign\\b",
          end: "$",
          keywords: "foreign import export ccall stdcall cplusplus jvm dotnet safe unsafe",
          contains: [
            b,
            e2.QUOTE_STRING_MODE,
            _
          ]
        },
        {
          className: "meta",
          begin: "#!\\/usr\\/bin\\/env runhaskell",
          end: "$"
        },
        // "Whitespaces".
        d2,
        f2,
        // Literals and names.
        // Single characters.
        {
          scope: "string",
          begin: /'(?=\\?.')/,
          end: /'/,
          contains: [
            {
              scope: "char.escape",
              match: /\\./
            }
          ]
        },
        e2.QUOTE_STRING_MODE,
        g2,
        b,
        e2.inherit(e2.TITLE_MODE, { begin: "^[_a-z][\\w']*" }),
        // No markup, prevents infix operators from being recognized as comments.
        { begin: `(?!-)${u2}--+|--+(?!-)${u2}` },
        _,
        {
          // No markup, relevance booster
          begin: "->|<-"
        }
      ]
    };
  }
  return Hi = t2, Hi;
}
var zi, J_;
function qR() {
  if (J_)
    return zi;
  J_ = 1;
  function t2(e2) {
    const n = "[a-zA-Z_$][a-zA-Z0-9_$]*", i2 = /(-?)(\b0[xX][a-fA-F0-9_]+|(\b\d+(\.[\d_]*)?|\.[\d_]+)(([eE][-+]?\d+)|i32|u32|i64|f64)?)/;
    return {
      name: "Haxe",
      aliases: ["hx"],
      keywords: {
        keyword: "abstract break case cast catch continue default do dynamic else enum extern final for function here if import in inline is macro never new override package private get set public return static super switch this throw trace try typedef untyped using var while Int Float String Bool Dynamic Void Array ",
        built_in: "trace this",
        literal: "true false null _"
      },
      contains: [
        {
          className: "string",
          // interpolate-able strings
          begin: "'",
          end: "'",
          contains: [
            e2.BACKSLASH_ESCAPE,
            {
              className: "subst",
              // interpolation
              begin: /\$\{/,
              end: /\}/
            },
            {
              className: "subst",
              // interpolation
              begin: /\$/,
              end: /\W\}/
            }
          ]
        },
        e2.QUOTE_STRING_MODE,
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        {
          className: "number",
          begin: i2,
          relevance: 0
        },
        {
          className: "variable",
          begin: "\\$" + n
        },
        {
          className: "meta",
          // compiler meta
          begin: /@:?/,
          end: /\(|$/,
          excludeEnd: true
        },
        {
          className: "meta",
          // compiler conditionals
          begin: "#",
          end: "$",
          keywords: { keyword: "if else elseif end error" }
        },
        {
          className: "type",
          // function types
          begin: /:[ \t]*/,
          end: /[^A-Za-z0-9_ \t\->]/,
          excludeBegin: true,
          excludeEnd: true,
          relevance: 0
        },
        {
          className: "type",
          // types
          begin: /:[ \t]*/,
          end: /\W/,
          excludeBegin: true,
          excludeEnd: true
        },
        {
          className: "type",
          // instantiation
          beginKeywords: "new",
          end: /\W/,
          excludeBegin: true,
          excludeEnd: true
        },
        {
          className: "title.class",
          // enums
          beginKeywords: "enum",
          end: /\{/,
          contains: [e2.TITLE_MODE]
        },
        {
          className: "title.class",
          // abstracts
          begin: "\\babstract\\b(?=\\s*" + e2.IDENT_RE + "\\s*\\()",
          end: /[\{$]/,
          contains: [
            {
              className: "type",
              begin: /\(/,
              end: /\)/,
              excludeBegin: true,
              excludeEnd: true
            },
            {
              className: "type",
              begin: /from +/,
              end: /\W/,
              excludeBegin: true,
              excludeEnd: true
            },
            {
              className: "type",
              begin: /to +/,
              end: /\W/,
              excludeBegin: true,
              excludeEnd: true
            },
            e2.TITLE_MODE
          ],
          keywords: { keyword: "abstract from to" }
        },
        {
          className: "title.class",
          // classes
          begin: /\b(class|interface) +/,
          end: /[\{$]/,
          excludeEnd: true,
          keywords: "class interface",
          contains: [
            {
              className: "keyword",
              begin: /\b(extends|implements) +/,
              keywords: "extends implements",
              contains: [
                {
                  className: "type",
                  begin: e2.IDENT_RE,
                  relevance: 0
                }
              ]
            },
            e2.TITLE_MODE
          ]
        },
        {
          className: "title.function",
          beginKeywords: "function",
          end: /\(/,
          excludeEnd: true,
          illegal: /\S/,
          contains: [e2.TITLE_MODE]
        }
      ],
      illegal: /<\//
    };
  }
  return zi = t2, zi;
}
var $i, j_;
function VR() {
  if (j_)
    return $i;
  j_ = 1;
  function t2(e2) {
    return {
      name: "HSP",
      case_insensitive: true,
      keywords: {
        $pattern: /[\w._]+/,
        keyword: "goto gosub return break repeat loop continue wait await dim sdim foreach dimtype dup dupptr end stop newmod delmod mref run exgoto on mcall assert logmes newlab resume yield onexit onerror onkey onclick oncmd exist delete mkdir chdir dirlist bload bsave bcopy memfile if else poke wpoke lpoke getstr chdpm memexpand memcpy memset notesel noteadd notedel noteload notesave randomize noteunsel noteget split strrep setease button chgdisp exec dialog mmload mmplay mmstop mci pset pget syscolor mes print title pos circle cls font sysfont objsize picload color palcolor palette redraw width gsel gcopy gzoom gmode bmpsave hsvcolor getkey listbox chkbox combox input mesbox buffer screen bgscr mouse objsel groll line clrobj boxf objprm objmode stick grect grotate gsquare gradf objimage objskip objenable celload celdiv celput newcom querycom delcom cnvstow comres axobj winobj sendmsg comevent comevarg sarrayconv callfunc cnvwtos comevdisp libptr system hspstat hspver stat cnt err strsize looplev sublev iparam wparam lparam refstr refdval int rnd strlen length length2 length3 length4 vartype gettime peek wpeek lpeek varptr varuse noteinfo instr abs limit getease str strmid strf getpath strtrim sin cos tan atan sqrt double absf expf logf limitf powf geteasef mousex mousey mousew hwnd hinstance hdc ginfo objinfo dirinfo sysinfo thismod __hspver__ __hsp30__ __date__ __time__ __line__ __file__ _debug __hspdef__ and or xor not screen_normal screen_palette screen_hide screen_fixedsize screen_tool screen_frame gmode_gdi gmode_mem gmode_rgb0 gmode_alpha gmode_rgb0alpha gmode_add gmode_sub gmode_pixela ginfo_mx ginfo_my ginfo_act ginfo_sel ginfo_wx1 ginfo_wy1 ginfo_wx2 ginfo_wy2 ginfo_vx ginfo_vy ginfo_sizex ginfo_sizey ginfo_winx ginfo_winy ginfo_mesx ginfo_mesy ginfo_r ginfo_g ginfo_b ginfo_paluse ginfo_dispx ginfo_dispy ginfo_cx ginfo_cy ginfo_intid ginfo_newid ginfo_sx ginfo_sy objinfo_mode objinfo_bmscr objinfo_hwnd notemax notesize dir_cur dir_exe dir_win dir_sys dir_cmdline dir_desktop dir_mydoc dir_tv font_normal font_bold font_italic font_underline font_strikeout font_antialias objmode_normal objmode_guifont objmode_usefont gsquare_grad msgothic msmincho do until while wend for next _break _continue switch case default swbreak swend ddim ldim alloc m_pi rad2deg deg2rad ease_linear ease_quad_in ease_quad_out ease_quad_inout ease_cubic_in ease_cubic_out ease_cubic_inout ease_quartic_in ease_quartic_out ease_quartic_inout ease_bounce_in ease_bounce_out ease_bounce_inout ease_shake_in ease_shake_out ease_shake_inout ease_loop"
      },
      contains: [
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        e2.QUOTE_STRING_MODE,
        e2.APOS_STRING_MODE,
        {
          // multi-line string
          className: "string",
          begin: /\{"/,
          end: /"\}/,
          contains: [e2.BACKSLASH_ESCAPE]
        },
        e2.COMMENT(";", "$", { relevance: 0 }),
        {
          // pre-processor
          className: "meta",
          begin: "#",
          end: "$",
          keywords: { keyword: "addion cfunc cmd cmpopt comfunc const defcfunc deffunc define else endif enum epack func global if ifdef ifndef include modcfunc modfunc modinit modterm module pack packopt regcmd runtime undef usecom uselib" },
          contains: [
            e2.inherit(e2.QUOTE_STRING_MODE, { className: "string" }),
            e2.NUMBER_MODE,
            e2.C_NUMBER_MODE,
            e2.C_LINE_COMMENT_MODE,
            e2.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          // label
          className: "symbol",
          begin: "^\\*(\\w+|@)"
        },
        e2.NUMBER_MODE,
        e2.C_NUMBER_MODE
      ]
    };
  }
  return $i = t2, $i;
}
var Wi, ed;
function HR() {
  if (ed)
    return Wi;
  ed = 1;
  function t2(e2) {
    const n = e2.regex, i2 = "HTTP/([32]|1\\.[01])", r2 = /[A-Za-z][A-Za-z0-9-]*/, a2 = {
      className: "attribute",
      begin: n.concat("^", r2, "(?=\\:\\s)"),
      starts: { contains: [
        {
          className: "punctuation",
          begin: /: /,
          relevance: 0,
          starts: {
            end: "$",
            relevance: 0
          }
        }
      ] }
    }, s2 = [
      a2,
      {
        begin: "\\n\\n",
        starts: {
          subLanguage: [],
          endsWithParent: true
        }
      }
    ];
    return {
      name: "HTTP",
      aliases: ["https"],
      illegal: /\S/,
      contains: [
        // response
        {
          begin: "^(?=" + i2 + " \\d{3})",
          end: /$/,
          contains: [
            {
              className: "meta",
              begin: i2
            },
            {
              className: "number",
              begin: "\\b\\d{3}\\b"
            }
          ],
          starts: {
            end: /\b\B/,
            illegal: /\S/,
            contains: s2
          }
        },
        // request
        {
          begin: "(?=^[A-Z]+ (.*?) " + i2 + "$)",
          end: /$/,
          contains: [
            {
              className: "string",
              begin: " ",
              end: " ",
              excludeBegin: true,
              excludeEnd: true
            },
            {
              className: "meta",
              begin: i2
            },
            {
              className: "keyword",
              begin: "[A-Z]+"
            }
          ],
          starts: {
            end: /\b\B/,
            illegal: /\S/,
            contains: s2
          }
        },
        // to allow headers to work even without a preamble
        e2.inherit(a2, { relevance: 0 })
      ]
    };
  }
  return Wi = t2, Wi;
}
var Ki, td;
function zR() {
  if (td)
    return Ki;
  td = 1;
  function t2(e2) {
    const n = "a-zA-Z_\\-!.?+*=<>&#'", i2 = "[" + n + "][" + n + "0-9/;:]*", r2 = {
      $pattern: i2,
      built_in: (
        // keywords
        "!= % %= & &= * ** **= *= *map + += , --build-class-- --import-- -= . / // //= /= < << <<= <= = > >= >> >>= @ @= ^ ^= abs accumulate all and any ap-compose ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast callable calling-module-name car case cdr chain chr coll? combinations compile compress cond cons cons? continue count curry cut cycle dec def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first flatten float? fn fnc fnr for for* format fraction genexpr gensym get getattr global globals group-by hasattr hash hex id identity if if* if-not if-python2 import in inc input instance? integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass iter iterable? iterate iterator? keyword keyword? lambda last len let lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all map max merge-with method-decorator min multi-decorator multicombinations name neg? next none? nonlocal not not-in not? nth numeric? oct odd? open or ord partition permutations pos? post-route postwalk pow prewalk print product profile/calls profile/cpu put-route quasiquote quote raise range read read-str recursive-replace reduce remove repeat repeatedly repr require rest round route route-with-methods rwm second seq set-comp setattr setv some sorted string string? sum switch symbol? take take-nth take-while tee try unless unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms xi xor yield yield-from zero? zip zip-longest | |= ~"
      )
    }, a2 = "[-+]?\\d+(\\.\\d+)?", s2 = {
      begin: i2,
      relevance: 0
    }, o2 = {
      className: "number",
      begin: a2,
      relevance: 0
    }, l2 = e2.inherit(e2.QUOTE_STRING_MODE, { illegal: null }), u2 = e2.COMMENT(
      ";",
      "$",
      { relevance: 0 }
    ), _ = {
      className: "literal",
      begin: /\b([Tt]rue|[Ff]alse|nil|None)\b/
    }, d2 = {
      begin: "[\\[\\{]",
      end: "[\\]\\}]",
      relevance: 0
    }, f2 = {
      className: "comment",
      begin: "\\^" + i2
    }, b = e2.COMMENT("\\^\\{", "\\}"), c2 = {
      className: "symbol",
      begin: "[:]{1,2}" + i2
    }, E2 = {
      begin: "\\(",
      end: "\\)"
    }, g2 = {
      endsWithParent: true,
      relevance: 0
    }, S = {
      className: "name",
      relevance: 0,
      keywords: r2,
      begin: i2,
      starts: g2
    }, p2 = [
      E2,
      l2,
      f2,
      b,
      u2,
      c2,
      d2,
      o2,
      _,
      s2
    ];
    return E2.contains = [
      e2.COMMENT("comment", ""),
      S,
      g2
    ], g2.contains = p2, d2.contains = p2, {
      name: "Hy",
      aliases: ["hylang"],
      illegal: /\S/,
      contains: [
        e2.SHEBANG(),
        E2,
        l2,
        f2,
        b,
        u2,
        c2,
        d2,
        o2,
        _
      ]
    };
  }
  return Ki = t2, Ki;
}
var Qi, nd;
function $R() {
  if (nd)
    return Qi;
  nd = 1;
  function t2(e2) {
    const n = "\\[", i2 = "\\]";
    return {
      name: "Inform 7",
      aliases: ["i7"],
      case_insensitive: true,
      keywords: {
        // Some keywords more or less unique to I7, for relevance.
        keyword: (
          // kind:
          "thing room person man woman animal container supporter backdrop door scenery open closed locked inside gender is are say understand kind of rule"
        )
      },
      contains: [
        {
          className: "string",
          begin: '"',
          end: '"',
          relevance: 0,
          contains: [
            {
              className: "subst",
              begin: n,
              end: i2
            }
          ]
        },
        {
          className: "section",
          begin: /^(Volume|Book|Part|Chapter|Section|Table)\b/,
          end: "$"
        },
        {
          // Rule definition
          // This is here for relevance.
          begin: /^(Check|Carry out|Report|Instead of|To|Rule|When|Before|After)\b/,
          end: ":",
          contains: [
            {
              // Rule name
              begin: "\\(This",
              end: "\\)"
            }
          ]
        },
        {
          className: "comment",
          begin: n,
          end: i2,
          contains: ["self"]
        }
      ]
    };
  }
  return Qi = t2, Qi;
}
var Xi, rd;
function WR() {
  if (rd)
    return Xi;
  rd = 1;
  function t2(e2) {
    const n = e2.regex, i2 = {
      className: "number",
      relevance: 0,
      variants: [
        { begin: /([+-]+)?[\d]+_[\d_]+/ },
        { begin: e2.NUMBER_RE }
      ]
    }, r2 = e2.COMMENT();
    r2.variants = [
      {
        begin: /;/,
        end: /$/
      },
      {
        begin: /#/,
        end: /$/
      }
    ];
    const a2 = {
      className: "variable",
      variants: [
        { begin: /\$[\w\d"][\w\d_]*/ },
        { begin: /\$\{(.*?)\}/ }
      ]
    }, s2 = {
      className: "literal",
      begin: /\bon|off|true|false|yes|no\b/
    }, o2 = {
      className: "string",
      contains: [e2.BACKSLASH_ESCAPE],
      variants: [
        {
          begin: "'''",
          end: "'''",
          relevance: 10
        },
        {
          begin: '"""',
          end: '"""',
          relevance: 10
        },
        {
          begin: '"',
          end: '"'
        },
        {
          begin: "'",
          end: "'"
        }
      ]
    }, l2 = {
      begin: /\[/,
      end: /\]/,
      contains: [
        r2,
        s2,
        a2,
        o2,
        i2,
        "self"
      ],
      relevance: 0
    }, u2 = /[A-Za-z0-9_-]+/, _ = /"(\\"|[^"])*"/, d2 = /'[^']*'/, f2 = n.either(
      u2,
      _,
      d2
    ), b = n.concat(
      f2,
      "(\\s*\\.\\s*",
      f2,
      ")*",
      n.lookahead(/\s*=\s*[^#\s]/)
    );
    return {
      name: "TOML, also INI",
      aliases: ["toml"],
      case_insensitive: true,
      illegal: /\S/,
      contains: [
        r2,
        {
          className: "section",
          begin: /\[+/,
          end: /\]+/
        },
        {
          begin: b,
          className: "attr",
          starts: {
            end: /$/,
            contains: [
              r2,
              l2,
              s2,
              a2,
              o2,
              i2
            ]
          }
        }
      ]
    };
  }
  return Xi = t2, Xi;
}
var Zi, ad;
function KR() {
  if (ad)
    return Zi;
  ad = 1;
  function t2(e2) {
    const n = e2.regex, i2 = {
      className: "params",
      begin: "\\(",
      end: "\\)"
    }, r2 = /(_[a-z_\d]+)?/, a2 = /([de][+-]?\d+)?/, s2 = {
      className: "number",
      variants: [
        { begin: n.concat(/\b\d+/, /\.(\d*)/, a2, r2) },
        { begin: n.concat(/\b\d+/, a2, r2) },
        { begin: n.concat(/\.\d+/, a2, r2) }
      ],
      relevance: 0
    };
    return {
      name: "IRPF90",
      case_insensitive: true,
      keywords: {
        literal: ".False. .True.",
        keyword: "kind do while private call intrinsic where elsewhere type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. goto save else use module select case access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit continue format pause cycle exit c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg synchronous nopass non_overridable pass protected volatile abstract extends import non_intrinsic value deferred generic final enumerator class associate bind enum c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure integer real character complex logical dimension allocatable|10 parameter external implicit|10 none double precision assign intent optional pointer target in out common equivalence data begin_provider &begin_provider end_provider begin_shell end_shell begin_template end_template subst assert touch soft_touch provide no_dep free irp_if irp_else irp_endif irp_write irp_read",
        built_in: "alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr num_images parity popcnt poppar shifta shiftl shiftr this_image IRP_ALIGN irp_here"
      },
      illegal: /\/\*/,
      contains: [
        e2.inherit(e2.APOS_STRING_MODE, {
          className: "string",
          relevance: 0
        }),
        e2.inherit(e2.QUOTE_STRING_MODE, {
          className: "string",
          relevance: 0
        }),
        {
          className: "function",
          beginKeywords: "subroutine function program",
          illegal: "[${=\\n]",
          contains: [
            e2.UNDERSCORE_TITLE_MODE,
            i2
          ]
        },
        e2.COMMENT("!", "$", { relevance: 0 }),
        e2.COMMENT("begin_doc", "end_doc", { relevance: 10 }),
        s2
      ]
    };
  }
  return Zi = t2, Zi;
}
var Ji, id;
function QR() {
  if (id)
    return Ji;
  id = 1;
  function t2(e2) {
    const n = "[A-Za-zА-Яа-яёЁ_!][A-Za-zА-Яа-яёЁ_0-9]*", i2 = "[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]*", r2 = "and и else иначе endexcept endfinally endforeach конецвсе endif конецесли endwhile конецпока except exitfor finally foreach все if если in в not не or или try while пока ", Ce = "SYSRES_CONST_ACCES_RIGHT_TYPE_EDIT SYSRES_CONST_ACCES_RIGHT_TYPE_FULL SYSRES_CONST_ACCES_RIGHT_TYPE_VIEW SYSRES_CONST_ACCESS_MODE_REQUISITE_CODE SYSRES_CONST_ACCESS_NO_ACCESS_VIEW SYSRES_CONST_ACCESS_NO_ACCESS_VIEW_CODE SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_VIEW SYSRES_CONST_ACCESS_RIGHTS_VIEW_CODE SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_TYPE_CHANGE SYSRES_CONST_ACCESS_TYPE_CHANGE_CODE SYSRES_CONST_ACCESS_TYPE_EXISTS SYSRES_CONST_ACCESS_TYPE_EXISTS_CODE SYSRES_CONST_ACCESS_TYPE_FULL SYSRES_CONST_ACCESS_TYPE_FULL_CODE SYSRES_CONST_ACCESS_TYPE_VIEW SYSRES_CONST_ACCESS_TYPE_VIEW_CODE SYSRES_CONST_ACTION_TYPE_ABORT SYSRES_CONST_ACTION_TYPE_ACCEPT SYSRES_CONST_ACTION_TYPE_ACCESS_RIGHTS SYSRES_CONST_ACTION_TYPE_ADD_ATTACHMENT SYSRES_CONST_ACTION_TYPE_CHANGE_CARD SYSRES_CONST_ACTION_TYPE_CHANGE_KIND SYSRES_CONST_ACTION_TYPE_CHANGE_STORAGE SYSRES_CONST_ACTION_TYPE_CONTINUE SYSRES_CONST_ACTION_TYPE_COPY SYSRES_CONST_ACTION_TYPE_CREATE SYSRES_CONST_ACTION_TYPE_CREATE_VERSION SYSRES_CONST_ACTION_TYPE_DELETE SYSRES_CONST_ACTION_TYPE_DELETE_ATTACHMENT SYSRES_CONST_ACTION_TYPE_DELETE_VERSION SYSRES_CONST_ACTION_TYPE_DISABLE_DELEGATE_ACCESS_RIGHTS SYSRES_CONST_ACTION_TYPE_ENABLE_DELEGATE_ACCESS_RIGHTS SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE_AND_PASSWORD SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_PASSWORD SYSRES_CONST_ACTION_TYPE_EXPORT_WITH_LOCK SYSRES_CONST_ACTION_TYPE_EXPORT_WITHOUT_LOCK SYSRES_CONST_ACTION_TYPE_IMPORT_WITH_UNLOCK SYSRES_CONST_ACTION_TYPE_IMPORT_WITHOUT_UNLOCK SYSRES_CONST_ACTION_TYPE_LIFE_CYCLE_STAGE SYSRES_CONST_ACTION_TYPE_LOCK SYSRES_CONST_ACTION_TYPE_LOCK_FOR_SERVER SYSRES_CONST_ACTION_TYPE_LOCK_MODIFY SYSRES_CONST_ACTION_TYPE_MARK_AS_READED SYSRES_CONST_ACTION_TYPE_MARK_AS_UNREADED SYSRES_CONST_ACTION_TYPE_MODIFY SYSRES_CONST_ACTION_TYPE_MODIFY_CARD SYSRES_CONST_ACTION_TYPE_MOVE_TO_ARCHIVE SYSRES_CONST_ACTION_TYPE_OFF_ENCRYPTION SYSRES_CONST_ACTION_TYPE_PASSWORD_CHANGE SYSRES_CONST_ACTION_TYPE_PERFORM SYSRES_CONST_ACTION_TYPE_RECOVER_FROM_LOCAL_COPY SYSRES_CONST_ACTION_TYPE_RESTART SYSRES_CONST_ACTION_TYPE_RESTORE_FROM_ARCHIVE SYSRES_CONST_ACTION_TYPE_REVISION SYSRES_CONST_ACTION_TYPE_SEND_BY_MAIL SYSRES_CONST_ACTION_TYPE_SIGN SYSRES_CONST_ACTION_TYPE_START SYSRES_CONST_ACTION_TYPE_UNLOCK SYSRES_CONST_ACTION_TYPE_UNLOCK_FROM_SERVER SYSRES_CONST_ACTION_TYPE_VERSION_STATE SYSRES_CONST_ACTION_TYPE_VERSION_VISIBILITY SYSRES_CONST_ACTION_TYPE_VIEW SYSRES_CONST_ACTION_TYPE_VIEW_SHADOW_COPY SYSRES_CONST_ACTION_TYPE_WORKFLOW_DESCRIPTION_MODIFY SYSRES_CONST_ACTION_TYPE_WRITE_HISTORY SYSRES_CONST_ACTIVE_VERSION_STATE_PICK_VALUE SYSRES_CONST_ADD_REFERENCE_MODE_NAME SYSRES_CONST_ADDITION_REQUISITE_CODE SYSRES_CONST_ADDITIONAL_PARAMS_REQUISITE_CODE SYSRES_CONST_ADITIONAL_JOB_END_DATE_REQUISITE_NAME SYSRES_CONST_ADITIONAL_JOB_READ_REQUISITE_NAME SYSRES_CONST_ADITIONAL_JOB_START_DATE_REQUISITE_NAME SYSRES_CONST_ADITIONAL_JOB_STATE_REQUISITE_NAME SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE_ACTION SYSRES_CONST_ALL_ACCEPT_CONDITION_RUS SYSRES_CONST_ALL_USERS_GROUP SYSRES_CONST_ALL_USERS_GROUP_NAME SYSRES_CONST_ALL_USERS_SERVER_GROUP_NAME SYSRES_CONST_ALLOWED_ACCESS_TYPE_CODE SYSRES_CONST_ALLOWED_ACCESS_TYPE_NAME SYSRES_CONST_APP_VIEWER_TYPE_REQUISITE_CODE SYSRES_CONST_APPROVING_SIGNATURE_NAME SYSRES_CONST_APPROVING_SIGNATURE_REQUISITE_CODE SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE_CODE SYSRES_CONST_ATTACH_TYPE_COMPONENT_TOKEN SYSRES_CONST_ATTACH_TYPE_DOC SYSRES_CONST_ATTACH_TYPE_EDOC SYSRES_CONST_ATTACH_TYPE_FOLDER SYSRES_CONST_ATTACH_TYPE_JOB SYSRES_CONST_ATTACH_TYPE_REFERENCE SYSRES_CONST_ATTACH_TYPE_TASK SYSRES_CONST_AUTH_ENCODED_PASSWORD SYSRES_CONST_AUTH_ENCODED_PASSWORD_CODE SYSRES_CONST_AUTH_NOVELL SYSRES_CONST_AUTH_PASSWORD SYSRES_CONST_AUTH_PASSWORD_CODE SYSRES_CONST_AUTH_WINDOWS SYSRES_CONST_AUTHENTICATING_SIGNATURE_NAME SYSRES_CONST_AUTHENTICATING_SIGNATURE_REQUISITE_CODE SYSRES_CONST_AUTO_ENUM_METHOD_FLAG SYSRES_CONST_AUTO_NUMERATION_CODE SYSRES_CONST_AUTO_STRONG_ENUM_METHOD_FLAG SYSRES_CONST_AUTOTEXT_NAME_REQUISITE_CODE SYSRES_CONST_AUTOTEXT_TEXT_REQUISITE_CODE SYSRES_CONST_AUTOTEXT_USAGE_ALL SYSRES_CONST_AUTOTEXT_USAGE_ALL_CODE SYSRES_CONST_AUTOTEXT_USAGE_SIGN SYSRES_CONST_AUTOTEXT_USAGE_SIGN_CODE SYSRES_CONST_AUTOTEXT_USAGE_WORK SYSRES_CONST_AUTOTEXT_USAGE_WORK_CODE SYSRES_CONST_AUTOTEXT_USE_ANYWHERE_CODE SYSRES_CONST_AUTOTEXT_USE_ON_SIGNING_CODE SYSRES_CONST_AUTOTEXT_USE_ON_WORK_CODE SYSRES_CONST_BEGIN_DATE_REQUISITE_CODE SYSRES_CONST_BLACK_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_BLUE_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_BTN_PART SYSRES_CONST_CALCULATED_ROLE_TYPE_CODE SYSRES_CONST_CALL_TYPE_VARIABLE_BUTTON_VALUE SYSRES_CONST_CALL_TYPE_VARIABLE_PROGRAM_VALUE SYSRES_CONST_CANCEL_MESSAGE_FUNCTION_RESULT SYSRES_CONST_CARD_PART SYSRES_CONST_CARD_REFERENCE_MODE_NAME SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_ENCRYPT_VALUE SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_AND_ENCRYPT_VALUE SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_VALUE SYSRES_CONST_CHECK_PARAM_VALUE_DATE_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_FLOAT_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_INTEGER_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_PICK_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_REEFRENCE_PARAM_TYPE SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_FEMININE SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_MASCULINE SYSRES_CONST_CODE_COMPONENT_TYPE_ADMIN SYSRES_CONST_CODE_COMPONENT_TYPE_DEVELOPER SYSRES_CONST_CODE_COMPONENT_TYPE_DOCS SYSRES_CONST_CODE_COMPONENT_TYPE_EDOC_CARDS SYSRES_CONST_CODE_COMPONENT_TYPE_EXTERNAL_EXECUTABLE SYSRES_CONST_CODE_COMPONENT_TYPE_OTHER SYSRES_CONST_CODE_COMPONENT_TYPE_REFERENCE SYSRES_CONST_CODE_COMPONENT_TYPE_REPORT SYSRES_CONST_CODE_COMPONENT_TYPE_SCRIPT SYSRES_CONST_CODE_COMPONENT_TYPE_URL SYSRES_CONST_CODE_REQUISITE_ACCESS SYSRES_CONST_CODE_REQUISITE_CODE SYSRES_CONST_CODE_REQUISITE_COMPONENT SYSRES_CONST_CODE_REQUISITE_DESCRIPTION SYSRES_CONST_CODE_REQUISITE_EXCLUDE_COMPONENT SYSRES_CONST_CODE_REQUISITE_RECORD SYSRES_CONST_COMMENT_REQ_CODE SYSRES_CONST_COMMON_SETTINGS_REQUISITE_CODE SYSRES_CONST_COMP_CODE_GRD SYSRES_CONST_COMPONENT_GROUP_TYPE_REQUISITE_CODE SYSRES_CONST_COMPONENT_TYPE_ADMIN_COMPONENTS SYSRES_CONST_COMPONENT_TYPE_DEVELOPER_COMPONENTS SYSRES_CONST_COMPONENT_TYPE_DOCS SYSRES_CONST_COMPONENT_TYPE_EDOC_CARDS SYSRES_CONST_COMPONENT_TYPE_EDOCS SYSRES_CONST_COMPONENT_TYPE_EXTERNAL_EXECUTABLE SYSRES_CONST_COMPONENT_TYPE_OTHER SYSRES_CONST_COMPONENT_TYPE_REFERENCE_TYPES SYSRES_CONST_COMPONENT_TYPE_REFERENCES SYSRES_CONST_COMPONENT_TYPE_REPORTS SYSRES_CONST_COMPONENT_TYPE_SCRIPTS SYSRES_CONST_COMPONENT_TYPE_URL SYSRES_CONST_COMPONENTS_REMOTE_SERVERS_VIEW_CODE SYSRES_CONST_CONDITION_BLOCK_DESCRIPTION SYSRES_CONST_CONST_FIRM_STATUS_COMMON SYSRES_CONST_CONST_FIRM_STATUS_INDIVIDUAL SYSRES_CONST_CONST_NEGATIVE_VALUE SYSRES_CONST_CONST_POSITIVE_VALUE SYSRES_CONST_CONST_SERVER_STATUS_DONT_REPLICATE SYSRES_CONST_CONST_SERVER_STATUS_REPLICATE SYSRES_CONST_CONTENTS_REQUISITE_CODE SYSRES_CONST_DATA_TYPE_BOOLEAN SYSRES_CONST_DATA_TYPE_DATE SYSRES_CONST_DATA_TYPE_FLOAT SYSRES_CONST_DATA_TYPE_INTEGER SYSRES_CONST_DATA_TYPE_PICK SYSRES_CONST_DATA_TYPE_REFERENCE SYSRES_CONST_DATA_TYPE_STRING SYSRES_CONST_DATA_TYPE_TEXT SYSRES_CONST_DATA_TYPE_VARIANT SYSRES_CONST_DATE_CLOSE_REQ_CODE SYSRES_CONST_DATE_FORMAT_DATE_ONLY_CHAR SYSRES_CONST_DATE_OPEN_REQ_CODE SYSRES_CONST_DATE_REQUISITE SYSRES_CONST_DATE_REQUISITE_CODE SYSRES_CONST_DATE_REQUISITE_NAME SYSRES_CONST_DATE_REQUISITE_TYPE SYSRES_CONST_DATE_TYPE_CHAR SYSRES_CONST_DATETIME_FORMAT_VALUE SYSRES_CONST_DEA_ACCESS_RIGHTS_ACTION_CODE SYSRES_CONST_DESCRIPTION_LOCALIZE_ID_REQUISITE_CODE SYSRES_CONST_DESCRIPTION_REQUISITE_CODE SYSRES_CONST_DET1_PART SYSRES_CONST_DET2_PART SYSRES_CONST_DET3_PART SYSRES_CONST_DET4_PART SYSRES_CONST_DET5_PART SYSRES_CONST_DET6_PART SYSRES_CONST_DETAIL_DATASET_KEY_REQUISITE_CODE SYSRES_CONST_DETAIL_PICK_REQUISITE_CODE SYSRES_CONST_DETAIL_REQ_CODE SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_CODE SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_NAME SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_CODE SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_NAME SYSRES_CONST_DOCUMENT_STORAGES_CODE SYSRES_CONST_DOCUMENT_TEMPLATES_TYPE_NAME SYSRES_CONST_DOUBLE_REQUISITE_CODE SYSRES_CONST_EDITOR_CLOSE_FILE_OBSERV_TYPE_CODE SYSRES_CONST_EDITOR_CLOSE_PROCESS_OBSERV_TYPE_CODE SYSRES_CONST_EDITOR_TYPE_REQUISITE_CODE SYSRES_CONST_EDITORS_APPLICATION_NAME_REQUISITE_CODE SYSRES_CONST_EDITORS_CREATE_SEVERAL_PROCESSES_REQUISITE_CODE SYSRES_CONST_EDITORS_EXTENSION_REQUISITE_CODE SYSRES_CONST_EDITORS_OBSERVER_BY_PROCESS_TYPE SYSRES_CONST_EDITORS_REFERENCE_CODE SYSRES_CONST_EDITORS_REPLACE_SPEC_CHARS_REQUISITE_CODE SYSRES_CONST_EDITORS_USE_PLUGINS_REQUISITE_CODE SYSRES_CONST_EDITORS_VIEW_DOCUMENT_OPENED_TO_EDIT_CODE SYSRES_CONST_EDOC_CARD_TYPE_REQUISITE_CODE SYSRES_CONST_EDOC_CARD_TYPES_LINK_REQUISITE_CODE SYSRES_CONST_EDOC_CERTIFICATE_AND_PASSWORD_ENCODE_CODE SYSRES_CONST_EDOC_CERTIFICATE_ENCODE_CODE SYSRES_CONST_EDOC_DATE_REQUISITE_CODE SYSRES_CONST_EDOC_KIND_REFERENCE_CODE SYSRES_CONST_EDOC_KINDS_BY_TEMPLATE_ACTION_CODE SYSRES_CONST_EDOC_MANAGE_ACCESS_CODE SYSRES_CONST_EDOC_NONE_ENCODE_CODE SYSRES_CONST_EDOC_NUMBER_REQUISITE_CODE SYSRES_CONST_EDOC_PASSWORD_ENCODE_CODE SYSRES_CONST_EDOC_READONLY_ACCESS_CODE SYSRES_CONST_EDOC_SHELL_LIFE_TYPE_VIEW_VALUE SYSRES_CONST_EDOC_SIZE_RESTRICTION_PRIORITY_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_CHECK_ACCESS_RIGHTS_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_COMPUTER_NAME_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_DATABASE_NAME_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_EDIT_IN_STORAGE_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_LOCAL_PATH_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_SHARED_SOURCE_NAME_REQUISITE_CODE SYSRES_CONST_EDOC_TEMPLATE_REQUISITE_CODE SYSRES_CONST_EDOC_TYPES_REFERENCE_CODE SYSRES_CONST_EDOC_VERSION_ACTIVE_STAGE_CODE SYSRES_CONST_EDOC_VERSION_DESIGN_STAGE_CODE SYSRES_CONST_EDOC_VERSION_OBSOLETE_STAGE_CODE SYSRES_CONST_EDOC_WRITE_ACCES_CODE SYSRES_CONST_EDOCUMENT_CARD_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE SYSRES_CONST_ENCODE_CERTIFICATE_TYPE_CODE SYSRES_CONST_END_DATE_REQUISITE_CODE SYSRES_CONST_ENUMERATION_TYPE_REQUISITE_CODE SYSRES_CONST_EXECUTE_ACCESS_RIGHTS_TYPE_CODE SYSRES_CONST_EXECUTIVE_FILE_STORAGE_TYPE SYSRES_CONST_EXIST_CONST SYSRES_CONST_EXIST_VALUE SYSRES_CONST_EXPORT_LOCK_TYPE_ASK SYSRES_CONST_EXPORT_LOCK_TYPE_WITH_LOCK SYSRES_CONST_EXPORT_LOCK_TYPE_WITHOUT_LOCK SYSRES_CONST_EXPORT_VERSION_TYPE_ASK SYSRES_CONST_EXPORT_VERSION_TYPE_LAST SYSRES_CONST_EXPORT_VERSION_TYPE_LAST_ACTIVE SYSRES_CONST_EXTENSION_REQUISITE_CODE SYSRES_CONST_FILTER_NAME_REQUISITE_CODE SYSRES_CONST_FILTER_REQUISITE_CODE SYSRES_CONST_FILTER_TYPE_COMMON_CODE SYSRES_CONST_FILTER_TYPE_COMMON_NAME SYSRES_CONST_FILTER_TYPE_USER_CODE SYSRES_CONST_FILTER_TYPE_USER_NAME SYSRES_CONST_FILTER_VALUE_REQUISITE_NAME SYSRES_CONST_FLOAT_NUMBER_FORMAT_CHAR SYSRES_CONST_FLOAT_REQUISITE_TYPE SYSRES_CONST_FOLDER_AUTHOR_VALUE SYSRES_CONST_FOLDER_KIND_ANY_OBJECTS SYSRES_CONST_FOLDER_KIND_COMPONENTS SYSRES_CONST_FOLDER_KIND_EDOCS SYSRES_CONST_FOLDER_KIND_JOBS SYSRES_CONST_FOLDER_KIND_TASKS SYSRES_CONST_FOLDER_TYPE_COMMON SYSRES_CONST_FOLDER_TYPE_COMPONENT SYSRES_CONST_FOLDER_TYPE_FAVORITES SYSRES_CONST_FOLDER_TYPE_INBOX SYSRES_CONST_FOLDER_TYPE_OUTBOX SYSRES_CONST_FOLDER_TYPE_QUICK_LAUNCH SYSRES_CONST_FOLDER_TYPE_SEARCH SYSRES_CONST_FOLDER_TYPE_SHORTCUTS SYSRES_CONST_FOLDER_TYPE_USER SYSRES_CONST_FROM_DICTIONARY_ENUM_METHOD_FLAG SYSRES_CONST_FULL_SUBSTITUTE_TYPE SYSRES_CONST_FULL_SUBSTITUTE_TYPE_CODE SYSRES_CONST_FUNCTION_CANCEL_RESULT SYSRES_CONST_FUNCTION_CATEGORY_SYSTEM SYSRES_CONST_FUNCTION_CATEGORY_USER SYSRES_CONST_FUNCTION_FAILURE_RESULT SYSRES_CONST_FUNCTION_SAVE_RESULT SYSRES_CONST_GENERATED_REQUISITE SYSRES_CONST_GREEN_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_GROUP_ACCOUNT_TYPE_VALUE_CODE SYSRES_CONST_GROUP_CATEGORY_NORMAL_CODE SYSRES_CONST_GROUP_CATEGORY_NORMAL_NAME SYSRES_CONST_GROUP_CATEGORY_SERVICE_CODE SYSRES_CONST_GROUP_CATEGORY_SERVICE_NAME SYSRES_CONST_GROUP_COMMON_CATEGORY_FIELD_VALUE SYSRES_CONST_GROUP_FULL_NAME_REQUISITE_CODE SYSRES_CONST_GROUP_NAME_REQUISITE_CODE SYSRES_CONST_GROUP_RIGHTS_T_REQUISITE_CODE SYSRES_CONST_GROUP_SERVER_CODES_REQUISITE_CODE SYSRES_CONST_GROUP_SERVER_NAME_REQUISITE_CODE SYSRES_CONST_GROUP_SERVICE_CATEGORY_FIELD_VALUE SYSRES_CONST_GROUP_USER_REQUISITE_CODE SYSRES_CONST_GROUPS_REFERENCE_CODE SYSRES_CONST_GROUPS_REQUISITE_CODE SYSRES_CONST_HIDDEN_MODE_NAME SYSRES_CONST_HIGH_LVL_REQUISITE_CODE SYSRES_CONST_HISTORY_ACTION_CREATE_CODE SYSRES_CONST_HISTORY_ACTION_DELETE_CODE SYSRES_CONST_HISTORY_ACTION_EDIT_CODE SYSRES_CONST_HOUR_CHAR SYSRES_CONST_ID_REQUISITE_CODE SYSRES_CONST_IDSPS_REQUISITE_CODE SYSRES_CONST_IMAGE_MODE_COLOR SYSRES_CONST_IMAGE_MODE_GREYSCALE SYSRES_CONST_IMAGE_MODE_MONOCHROME SYSRES_CONST_IMPORTANCE_HIGH SYSRES_CONST_IMPORTANCE_LOW SYSRES_CONST_IMPORTANCE_NORMAL SYSRES_CONST_IN_DESIGN_VERSION_STATE_PICK_VALUE SYSRES_CONST_INCOMING_WORK_RULE_TYPE_CODE SYSRES_CONST_INT_REQUISITE SYSRES_CONST_INT_REQUISITE_TYPE SYSRES_CONST_INTEGER_NUMBER_FORMAT_CHAR SYSRES_CONST_INTEGER_TYPE_CHAR SYSRES_CONST_IS_GENERATED_REQUISITE_NEGATIVE_VALUE SYSRES_CONST_IS_PUBLIC_ROLE_REQUISITE_CODE SYSRES_CONST_IS_REMOTE_USER_NEGATIVE_VALUE SYSRES_CONST_IS_REMOTE_USER_POSITIVE_VALUE SYSRES_CONST_IS_STORED_REQUISITE_NEGATIVE_VALUE SYSRES_CONST_IS_STORED_REQUISITE_STORED_VALUE SYSRES_CONST_ITALIC_LIFE_CYCLE_STAGE_DRAW_STYLE SYSRES_CONST_JOB_BLOCK_DESCRIPTION SYSRES_CONST_JOB_KIND_CONTROL_JOB SYSRES_CONST_JOB_KIND_JOB SYSRES_CONST_JOB_KIND_NOTICE SYSRES_CONST_JOB_STATE_ABORTED SYSRES_CONST_JOB_STATE_COMPLETE SYSRES_CONST_JOB_STATE_WORKING SYSRES_CONST_KIND_REQUISITE_CODE SYSRES_CONST_KIND_REQUISITE_NAME SYSRES_CONST_KINDS_CREATE_SHADOW_COPIES_REQUISITE_CODE SYSRES_CONST_KINDS_DEFAULT_EDOC_LIFE_STAGE_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_ALL_TEPLATES_ALLOWED_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_ALLOW_LIFE_CYCLE_STAGE_CHANGING_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_ALLOW_MULTIPLE_ACTIVE_VERSIONS_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_SHARE_ACCES_RIGHTS_BY_DEFAULT_CODE SYSRES_CONST_KINDS_EDOC_TEMPLATE_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_TYPE_REQUISITE_CODE SYSRES_CONST_KINDS_SIGNERS_REQUISITES_CODE SYSRES_CONST_KOD_INPUT_TYPE SYSRES_CONST_LAST_UPDATE_DATE_REQUISITE_CODE SYSRES_CONST_LIFE_CYCLE_START_STAGE_REQUISITE_CODE SYSRES_CONST_LILAC_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_LINK_OBJECT_KIND_COMPONENT SYSRES_CONST_LINK_OBJECT_KIND_DOCUMENT SYSRES_CONST_LINK_OBJECT_KIND_EDOC SYSRES_CONST_LINK_OBJECT_KIND_FOLDER SYSRES_CONST_LINK_OBJECT_KIND_JOB SYSRES_CONST_LINK_OBJECT_KIND_REFERENCE SYSRES_CONST_LINK_OBJECT_KIND_TASK SYSRES_CONST_LINK_REF_TYPE_REQUISITE_CODE SYSRES_CONST_LIST_REFERENCE_MODE_NAME SYSRES_CONST_LOCALIZATION_DICTIONARY_MAIN_VIEW_CODE SYSRES_CONST_MAIN_VIEW_CODE SYSRES_CONST_MANUAL_ENUM_METHOD_FLAG SYSRES_CONST_MASTER_COMP_TYPE_REQUISITE_CODE SYSRES_CONST_MASTER_TABLE_REC_ID_REQUISITE_CODE SYSRES_CONST_MAXIMIZED_MODE_NAME SYSRES_CONST_ME_VALUE SYSRES_CONST_MESSAGE_ATTENTION_CAPTION SYSRES_CONST_MESSAGE_CONFIRMATION_CAPTION SYSRES_CONST_MESSAGE_ERROR_CAPTION SYSRES_CONST_MESSAGE_INFORMATION_CAPTION SYSRES_CONST_MINIMIZED_MODE_NAME SYSRES_CONST_MINUTE_CHAR SYSRES_CONST_MODULE_REQUISITE_CODE SYSRES_CONST_MONITORING_BLOCK_DESCRIPTION SYSRES_CONST_MONTH_FORMAT_VALUE SYSRES_CONST_NAME_LOCALIZE_ID_REQUISITE_CODE SYSRES_CONST_NAME_REQUISITE_CODE SYSRES_CONST_NAME_SINGULAR_REQUISITE_CODE SYSRES_CONST_NAMEAN_INPUT_TYPE SYSRES_CONST_NEGATIVE_PICK_VALUE SYSRES_CONST_NEGATIVE_VALUE SYSRES_CONST_NO SYSRES_CONST_NO_PICK_VALUE SYSRES_CONST_NO_SIGNATURE_REQUISITE_CODE SYSRES_CONST_NO_VALUE SYSRES_CONST_NONE_ACCESS_RIGHTS_TYPE_CODE SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE_MASCULINE SYSRES_CONST_NORMAL_ACCESS_RIGHTS_TYPE_CODE SYSRES_CONST_NORMAL_LIFE_CYCLE_STAGE_DRAW_STYLE SYSRES_CONST_NORMAL_MODE_NAME SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_CODE SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_NAME SYSRES_CONST_NOTE_REQUISITE_CODE SYSRES_CONST_NOTICE_BLOCK_DESCRIPTION SYSRES_CONST_NUM_REQUISITE SYSRES_CONST_NUM_STR_REQUISITE_CODE SYSRES_CONST_NUMERATION_AUTO_NOT_STRONG SYSRES_CONST_NUMERATION_AUTO_STRONG SYSRES_CONST_NUMERATION_FROM_DICTONARY SYSRES_CONST_NUMERATION_MANUAL SYSRES_CONST_NUMERIC_TYPE_CHAR SYSRES_CONST_NUMREQ_REQUISITE_CODE SYSRES_CONST_OBSOLETE_VERSION_STATE_PICK_VALUE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_CODE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_FEMININE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_MASCULINE SYSRES_CONST_OPTIONAL_FORM_COMP_REQCODE_PREFIX SYSRES_CONST_ORANGE_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_ORIGINALREF_REQUISITE_CODE SYSRES_CONST_OURFIRM_REF_CODE SYSRES_CONST_OURFIRM_REQUISITE_CODE SYSRES_CONST_OURFIRM_VAR SYSRES_CONST_OUTGOING_WORK_RULE_TYPE_CODE SYSRES_CONST_PICK_NEGATIVE_RESULT SYSRES_CONST_PICK_POSITIVE_RESULT SYSRES_CONST_PICK_REQUISITE SYSRES_CONST_PICK_REQUISITE_TYPE SYSRES_CONST_PICK_TYPE_CHAR SYSRES_CONST_PLAN_STATUS_REQUISITE_CODE SYSRES_CONST_PLATFORM_VERSION_COMMENT SYSRES_CONST_PLUGINS_SETTINGS_DESCRIPTION_REQUISITE_CODE SYSRES_CONST_POSITIVE_PICK_VALUE SYSRES_CONST_POWER_TO_CREATE_ACTION_CODE SYSRES_CONST_POWER_TO_SIGN_ACTION_CODE SYSRES_CONST_PRIORITY_REQUISITE_CODE SYSRES_CONST_QUALIFIED_TASK_TYPE SYSRES_CONST_QUALIFIED_TASK_TYPE_CODE SYSRES_CONST_RECSTAT_REQUISITE_CODE SYSRES_CONST_RED_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_REF_ID_T_REF_TYPE_REQUISITE_CODE SYSRES_CONST_REF_REQUISITE SYSRES_CONST_REF_REQUISITE_TYPE SYSRES_CONST_REF_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE SYSRES_CONST_REFERENCE_RECORD_HISTORY_CREATE_ACTION_CODE SYSRES_CONST_REFERENCE_RECORD_HISTORY_DELETE_ACTION_CODE SYSRES_CONST_REFERENCE_RECORD_HISTORY_MODIFY_ACTION_CODE SYSRES_CONST_REFERENCE_TYPE_CHAR SYSRES_CONST_REFERENCE_TYPE_REQUISITE_NAME SYSRES_CONST_REFERENCES_ADD_PARAMS_REQUISITE_CODE SYSRES_CONST_REFERENCES_DISPLAY_REQUISITE_REQUISITE_CODE SYSRES_CONST_REMOTE_SERVER_STATUS_WORKING SYSRES_CONST_REMOTE_SERVER_TYPE_MAIN SYSRES_CONST_REMOTE_SERVER_TYPE_SECONDARY SYSRES_CONST_REMOTE_USER_FLAG_VALUE_CODE SYSRES_CONST_REPORT_APP_EDITOR_INTERNAL SYSRES_CONST_REPORT_BASE_REPORT_ID_REQUISITE_CODE SYSRES_CONST_REPORT_BASE_REPORT_REQUISITE_CODE SYSRES_CONST_REPORT_SCRIPT_REQUISITE_CODE SYSRES_CONST_REPORT_TEMPLATE_REQUISITE_CODE SYSRES_CONST_REPORT_VIEWER_CODE_REQUISITE_CODE SYSRES_CONST_REQ_ALLOW_COMPONENT_DEFAULT_VALUE SYSRES_CONST_REQ_ALLOW_RECORD_DEFAULT_VALUE SYSRES_CONST_REQ_ALLOW_SERVER_COMPONENT_DEFAULT_VALUE SYSRES_CONST_REQ_MODE_AVAILABLE_CODE SYSRES_CONST_REQ_MODE_EDIT_CODE SYSRES_CONST_REQ_MODE_HIDDEN_CODE SYSRES_CONST_REQ_MODE_NOT_AVAILABLE_CODE SYSRES_CONST_REQ_MODE_VIEW_CODE SYSRES_CONST_REQ_NUMBER_REQUISITE_CODE SYSRES_CONST_REQ_SECTION_VALUE SYSRES_CONST_REQ_TYPE_VALUE SYSRES_CONST_REQUISITE_FORMAT_BY_UNIT SYSRES_CONST_REQUISITE_FORMAT_DATE_FULL SYSRES_CONST_REQUISITE_FORMAT_DATE_TIME SYSRES_CONST_REQUISITE_FORMAT_LEFT SYSRES_CONST_REQUISITE_FORMAT_RIGHT SYSRES_CONST_REQUISITE_FORMAT_WITHOUT_UNIT SYSRES_CONST_REQUISITE_NUMBER_REQUISITE_CODE SYSRES_CONST_REQUISITE_SECTION_ACTIONS SYSRES_CONST_REQUISITE_SECTION_BUTTON SYSRES_CONST_REQUISITE_SECTION_BUTTONS SYSRES_CONST_REQUISITE_SECTION_CARD SYSRES_CONST_REQUISITE_SECTION_TABLE SYSRES_CONST_REQUISITE_SECTION_TABLE10 SYSRES_CONST_REQUISITE_SECTION_TABLE11 SYSRES_CONST_REQUISITE_SECTION_TABLE12 SYSRES_CONST_REQUISITE_SECTION_TABLE13 SYSRES_CONST_REQUISITE_SECTION_TABLE14 SYSRES_CONST_REQUISITE_SECTION_TABLE15 SYSRES_CONST_REQUISITE_SECTION_TABLE16 SYSRES_CONST_REQUISITE_SECTION_TABLE17 SYSRES_CONST_REQUISITE_SECTION_TABLE18 SYSRES_CONST_REQUISITE_SECTION_TABLE19 SYSRES_CONST_REQUISITE_SECTION_TABLE2 SYSRES_CONST_REQUISITE_SECTION_TABLE20 SYSRES_CONST_REQUISITE_SECTION_TABLE21 SYSRES_CONST_REQUISITE_SECTION_TABLE22 SYSRES_CONST_REQUISITE_SECTION_TABLE23 SYSRES_CONST_REQUISITE_SECTION_TABLE24 SYSRES_CONST_REQUISITE_SECTION_TABLE3 SYSRES_CONST_REQUISITE_SECTION_TABLE4 SYSRES_CONST_REQUISITE_SECTION_TABLE5 SYSRES_CONST_REQUISITE_SECTION_TABLE6 SYSRES_CONST_REQUISITE_SECTION_TABLE7 SYSRES_CONST_REQUISITE_SECTION_TABLE8 SYSRES_CONST_REQUISITE_SECTION_TABLE9 SYSRES_CONST_REQUISITES_PSEUDOREFERENCE_REQUISITE_NUMBER_REQUISITE_CODE SYSRES_CONST_RIGHT_ALIGNMENT_CODE SYSRES_CONST_ROLES_REFERENCE_CODE SYSRES_CONST_ROUTE_STEP_AFTER_RUS SYSRES_CONST_ROUTE_STEP_AND_CONDITION_RUS SYSRES_CONST_ROUTE_STEP_OR_CONDITION_RUS SYSRES_CONST_ROUTE_TYPE_COMPLEX SYSRES_CONST_ROUTE_TYPE_PARALLEL SYSRES_CONST_ROUTE_TYPE_SERIAL SYSRES_CONST_SBDATASETDESC_NEGATIVE_VALUE SYSRES_CONST_SBDATASETDESC_POSITIVE_VALUE SYSRES_CONST_SBVIEWSDESC_POSITIVE_VALUE SYSRES_CONST_SCRIPT_BLOCK_DESCRIPTION SYSRES_CONST_SEARCH_BY_TEXT_REQUISITE_CODE SYSRES_CONST_SEARCHES_COMPONENT_CONTENT SYSRES_CONST_SEARCHES_CRITERIA_ACTION_NAME SYSRES_CONST_SEARCHES_EDOC_CONTENT SYSRES_CONST_SEARCHES_FOLDER_CONTENT SYSRES_CONST_SEARCHES_JOB_CONTENT SYSRES_CONST_SEARCHES_REFERENCE_CODE SYSRES_CONST_SEARCHES_TASK_CONTENT SYSRES_CONST_SECOND_CHAR SYSRES_CONST_SECTION_REQUISITE_ACTIONS_VALUE SYSRES_CONST_SECTION_REQUISITE_CARD_VALUE SYSRES_CONST_SECTION_REQUISITE_CODE SYSRES_CONST_SECTION_REQUISITE_DETAIL_1_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_2_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_3_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_4_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_5_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_6_VALUE SYSRES_CONST_SELECT_REFERENCE_MODE_NAME SYSRES_CONST_SELECT_TYPE_SELECTABLE SYSRES_CONST_SELECT_TYPE_SELECTABLE_ONLY_CHILD SYSRES_CONST_SELECT_TYPE_SELECTABLE_WITH_CHILD SYSRES_CONST_SELECT_TYPE_UNSLECTABLE SYSRES_CONST_SERVER_TYPE_MAIN SYSRES_CONST_SERVICE_USER_CATEGORY_FIELD_VALUE SYSRES_CONST_SETTINGS_USER_REQUISITE_CODE SYSRES_CONST_SIGNATURE_AND_ENCODE_CERTIFICATE_TYPE_CODE SYSRES_CONST_SIGNATURE_CERTIFICATE_TYPE_CODE SYSRES_CONST_SINGULAR_TITLE_REQUISITE_CODE SYSRES_CONST_SQL_SERVER_AUTHENTIFICATION_FLAG_VALUE_CODE SYSRES_CONST_SQL_SERVER_ENCODE_AUTHENTIFICATION_FLAG_VALUE_CODE SYSRES_CONST_STANDART_ROUTE_REFERENCE_CODE SYSRES_CONST_STANDART_ROUTE_REFERENCE_COMMENT_REQUISITE_CODE SYSRES_CONST_STANDART_ROUTES_GROUPS_REFERENCE_CODE SYSRES_CONST_STATE_REQ_NAME SYSRES_CONST_STATE_REQUISITE_ACTIVE_VALUE SYSRES_CONST_STATE_REQUISITE_CLOSED_VALUE SYSRES_CONST_STATE_REQUISITE_CODE SYSRES_CONST_STATIC_ROLE_TYPE_CODE SYSRES_CONST_STATUS_PLAN_DEFAULT_VALUE SYSRES_CONST_STATUS_VALUE_AUTOCLEANING SYSRES_CONST_STATUS_VALUE_BLUE_SQUARE SYSRES_CONST_STATUS_VALUE_COMPLETE SYSRES_CONST_STATUS_VALUE_GREEN_SQUARE SYSRES_CONST_STATUS_VALUE_ORANGE_SQUARE SYSRES_CONST_STATUS_VALUE_PURPLE_SQUARE SYSRES_CONST_STATUS_VALUE_RED_SQUARE SYSRES_CONST_STATUS_VALUE_SUSPEND SYSRES_CONST_STATUS_VALUE_YELLOW_SQUARE SYSRES_CONST_STDROUTE_SHOW_TO_USERS_REQUISITE_CODE SYSRES_CONST_STORAGE_TYPE_FILE SYSRES_CONST_STORAGE_TYPE_SQL_SERVER SYSRES_CONST_STR_REQUISITE SYSRES_CONST_STRIKEOUT_LIFE_CYCLE_STAGE_DRAW_STYLE SYSRES_CONST_STRING_FORMAT_LEFT_ALIGN_CHAR SYSRES_CONST_STRING_FORMAT_RIGHT_ALIGN_CHAR SYSRES_CONST_STRING_REQUISITE_CODE SYSRES_CONST_STRING_REQUISITE_TYPE SYSRES_CONST_STRING_TYPE_CHAR SYSRES_CONST_SUBSTITUTES_PSEUDOREFERENCE_CODE SYSRES_CONST_SUBTASK_BLOCK_DESCRIPTION SYSRES_CONST_SYSTEM_SETTING_CURRENT_USER_PARAM_VALUE SYSRES_CONST_SYSTEM_SETTING_EMPTY_VALUE_PARAM_VALUE SYSRES_CONST_SYSTEM_VERSION_COMMENT SYSRES_CONST_TASK_ACCESS_TYPE_ALL SYSRES_CONST_TASK_ACCESS_TYPE_ALL_MEMBERS SYSRES_CONST_TASK_ACCESS_TYPE_MANUAL SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION_AND_PASSWORD SYSRES_CONST_TASK_ENCODE_TYPE_NONE SYSRES_CONST_TASK_ENCODE_TYPE_PASSWORD SYSRES_CONST_TASK_ROUTE_ALL_CONDITION SYSRES_CONST_TASK_ROUTE_AND_CONDITION SYSRES_CONST_TASK_ROUTE_OR_CONDITION SYSRES_CONST_TASK_STATE_ABORTED SYSRES_CONST_TASK_STATE_COMPLETE SYSRES_CONST_TASK_STATE_CONTINUED SYSRES_CONST_TASK_STATE_CONTROL SYSRES_CONST_TASK_STATE_INIT SYSRES_CONST_TASK_STATE_WORKING SYSRES_CONST_TASK_TITLE SYSRES_CONST_TASK_TYPES_GROUPS_REFERENCE_CODE SYSRES_CONST_TASK_TYPES_REFERENCE_CODE SYSRES_CONST_TEMPLATES_REFERENCE_CODE SYSRES_CONST_TEST_DATE_REQUISITE_NAME SYSRES_CONST_TEST_DEV_DATABASE_NAME SYSRES_CONST_TEST_DEV_SYSTEM_CODE SYSRES_CONST_TEST_EDMS_DATABASE_NAME SYSRES_CONST_TEST_EDMS_MAIN_CODE SYSRES_CONST_TEST_EDMS_MAIN_DB_NAME SYSRES_CONST_TEST_EDMS_SECOND_CODE SYSRES_CONST_TEST_EDMS_SECOND_DB_NAME SYSRES_CONST_TEST_EDMS_SYSTEM_CODE SYSRES_CONST_TEST_NUMERIC_REQUISITE_NAME SYSRES_CONST_TEXT_REQUISITE SYSRES_CONST_TEXT_REQUISITE_CODE SYSRES_CONST_TEXT_REQUISITE_TYPE SYSRES_CONST_TEXT_TYPE_CHAR SYSRES_CONST_TYPE_CODE_REQUISITE_CODE SYSRES_CONST_TYPE_REQUISITE_CODE SYSRES_CONST_UNDEFINED_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_UNITS_SECTION_ID_REQUISITE_CODE SYSRES_CONST_UNITS_SECTION_REQUISITE_CODE SYSRES_CONST_UNOPERATING_RECORD_FLAG_VALUE_CODE SYSRES_CONST_UNSTORED_DATA_REQUISITE_CODE SYSRES_CONST_UNSTORED_DATA_REQUISITE_NAME SYSRES_CONST_USE_ACCESS_TYPE_CODE SYSRES_CONST_USE_ACCESS_TYPE_NAME SYSRES_CONST_USER_ACCOUNT_TYPE_VALUE_CODE SYSRES_CONST_USER_ADDITIONAL_INFORMATION_REQUISITE_CODE SYSRES_CONST_USER_AND_GROUP_ID_FROM_PSEUDOREFERENCE_REQUISITE_CODE SYSRES_CONST_USER_CATEGORY_NORMAL SYSRES_CONST_USER_CERTIFICATE_REQUISITE_CODE SYSRES_CONST_USER_CERTIFICATE_STATE_REQUISITE_CODE SYSRES_CONST_USER_CERTIFICATE_SUBJECT_NAME_REQUISITE_CODE SYSRES_CONST_USER_CERTIFICATE_THUMBPRINT_REQUISITE_CODE SYSRES_CONST_USER_COMMON_CATEGORY SYSRES_CONST_USER_COMMON_CATEGORY_CODE SYSRES_CONST_USER_FULL_NAME_REQUISITE_CODE SYSRES_CONST_USER_GROUP_TYPE_REQUISITE_CODE SYSRES_CONST_USER_LOGIN_REQUISITE_CODE SYSRES_CONST_USER_REMOTE_CONTROLLER_REQUISITE_CODE SYSRES_CONST_USER_REMOTE_SYSTEM_REQUISITE_CODE SYSRES_CONST_USER_RIGHTS_T_REQUISITE_CODE SYSRES_CONST_USER_SERVER_NAME_REQUISITE_CODE SYSRES_CONST_USER_SERVICE_CATEGORY SYSRES_CONST_USER_SERVICE_CATEGORY_CODE SYSRES_CONST_USER_STATUS_ADMINISTRATOR_CODE SYSRES_CONST_USER_STATUS_ADMINISTRATOR_NAME SYSRES_CONST_USER_STATUS_DEVELOPER_CODE SYSRES_CONST_USER_STATUS_DEVELOPER_NAME SYSRES_CONST_USER_STATUS_DISABLED_CODE SYSRES_CONST_USER_STATUS_DISABLED_NAME SYSRES_CONST_USER_STATUS_SYSTEM_DEVELOPER_CODE SYSRES_CONST_USER_STATUS_USER_CODE SYSRES_CONST_USER_STATUS_USER_NAME SYSRES_CONST_USER_STATUS_USER_NAME_DEPRECATED SYSRES_CONST_USER_TYPE_FIELD_VALUE_USER SYSRES_CONST_USER_TYPE_REQUISITE_CODE SYSRES_CONST_USERS_CONTROLLER_REQUISITE_CODE SYSRES_CONST_USERS_IS_MAIN_SERVER_REQUISITE_CODE SYSRES_CONST_USERS_REFERENCE_CODE SYSRES_CONST_USERS_REGISTRATION_CERTIFICATES_ACTION_NAME SYSRES_CONST_USERS_REQUISITE_CODE SYSRES_CONST_USERS_SYSTEM_REQUISITE_CODE SYSRES_CONST_USERS_USER_ACCESS_RIGHTS_TYPR_REQUISITE_CODE SYSRES_CONST_USERS_USER_AUTHENTICATION_REQUISITE_CODE SYSRES_CONST_USERS_USER_COMPONENT_REQUISITE_CODE SYSRES_CONST_USERS_USER_GROUP_REQUISITE_CODE SYSRES_CONST_USERS_VIEW_CERTIFICATES_ACTION_NAME SYSRES_CONST_VIEW_DEFAULT_CODE SYSRES_CONST_VIEW_DEFAULT_NAME SYSRES_CONST_VIEWER_REQUISITE_CODE SYSRES_CONST_WAITING_BLOCK_DESCRIPTION SYSRES_CONST_WIZARD_FORM_LABEL_TEST_STRING  SYSRES_CONST_WIZARD_QUERY_PARAM_HEIGHT_ETALON_STRING SYSRES_CONST_WIZARD_REFERENCE_COMMENT_REQUISITE_CODE SYSRES_CONST_WORK_RULES_DESCRIPTION_REQUISITE_CODE SYSRES_CONST_WORK_TIME_CALENDAR_REFERENCE_CODE SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE_RUS SYSRES_CONST_WORK_WORKFLOW_SOFT_ROUTE_TYPE_VALUE_CODE_RUS SYSRES_CONST_WORKFLOW_ROUTE_TYPR_HARD SYSRES_CONST_WORKFLOW_ROUTE_TYPR_SOFT SYSRES_CONST_XML_ENCODING SYSRES_CONST_XREC_STAT_REQUISITE_CODE SYSRES_CONST_XRECID_FIELD_NAME SYSRES_CONST_YES SYSRES_CONST_YES_NO_2_REQUISITE_CODE SYSRES_CONST_YES_NO_REQUISITE_CODE SYSRES_CONST_YES_NO_T_REF_TYPE_REQUISITE_CODE SYSRES_CONST_YES_PICK_VALUE SYSRES_CONST_YES_VALUE CR FALSE nil NO_VALUE NULL TAB TRUE YES_VALUE ADMINISTRATORS_GROUP_NAME CUSTOMIZERS_GROUP_NAME DEVELOPERS_GROUP_NAME SERVICE_USERS_GROUP_NAME DECISION_BLOCK_FIRST_OPERAND_PROPERTY DECISION_BLOCK_NAME_PROPERTY DECISION_BLOCK_OPERATION_PROPERTY DECISION_BLOCK_RESULT_TYPE_PROPERTY DECISION_BLOCK_SECOND_OPERAND_PROPERTY ANY_FILE_EXTENTION COMPRESSED_DOCUMENT_EXTENSION EXTENDED_DOCUMENT_EXTENSION SHORT_COMPRESSED_DOCUMENT_EXTENSION SHORT_EXTENDED_DOCUMENT_EXTENSION JOB_BLOCK_ABORT_DEADLINE_PROPERTY JOB_BLOCK_AFTER_FINISH_EVENT JOB_BLOCK_AFTER_QUERY_PARAMETERS_EVENT JOB_BLOCK_ATTACHMENT_PROPERTY JOB_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY JOB_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY JOB_BLOCK_BEFORE_QUERY_PARAMETERS_EVENT JOB_BLOCK_BEFORE_START_EVENT JOB_BLOCK_CREATED_JOBS_PROPERTY JOB_BLOCK_DEADLINE_PROPERTY JOB_BLOCK_EXECUTION_RESULTS_PROPERTY JOB_BLOCK_IS_PARALLEL_PROPERTY JOB_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY JOB_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY JOB_BLOCK_JOB_TEXT_PROPERTY JOB_BLOCK_NAME_PROPERTY JOB_BLOCK_NEED_SIGN_ON_PERFORM_PROPERTY JOB_BLOCK_PERFORMER_PROPERTY JOB_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY JOB_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY JOB_BLOCK_SUBJECT_PROPERTY ENGLISH_LANGUAGE_CODE RUSSIAN_LANGUAGE_CODE smHidden smMaximized smMinimized smNormal wmNo wmYes COMPONENT_TOKEN_LINK_KIND DOCUMENT_LINK_KIND EDOCUMENT_LINK_KIND FOLDER_LINK_KIND JOB_LINK_KIND REFERENCE_LINK_KIND TASK_LINK_KIND COMPONENT_TOKEN_LOCK_TYPE EDOCUMENT_VERSION_LOCK_TYPE MONITOR_BLOCK_AFTER_FINISH_EVENT MONITOR_BLOCK_BEFORE_START_EVENT MONITOR_BLOCK_DEADLINE_PROPERTY MONITOR_BLOCK_INTERVAL_PROPERTY MONITOR_BLOCK_INTERVAL_TYPE_PROPERTY MONITOR_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY MONITOR_BLOCK_NAME_PROPERTY MONITOR_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY MONITOR_BLOCK_SEARCH_SCRIPT_PROPERTY NOTICE_BLOCK_AFTER_FINISH_EVENT NOTICE_BLOCK_ATTACHMENT_PROPERTY NOTICE_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY NOTICE_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY NOTICE_BLOCK_BEFORE_START_EVENT NOTICE_BLOCK_CREATED_NOTICES_PROPERTY NOTICE_BLOCK_DEADLINE_PROPERTY NOTICE_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY NOTICE_BLOCK_NAME_PROPERTY NOTICE_BLOCK_NOTICE_TEXT_PROPERTY NOTICE_BLOCK_PERFORMER_PROPERTY NOTICE_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY NOTICE_BLOCK_SUBJECT_PROPERTY dseAfterCancel dseAfterClose dseAfterDelete dseAfterDeleteOutOfTransaction dseAfterInsert dseAfterOpen dseAfterScroll dseAfterUpdate dseAfterUpdateOutOfTransaction dseBeforeCancel dseBeforeClose dseBeforeDelete dseBeforeDetailUpdate dseBeforeInsert dseBeforeOpen dseBeforeUpdate dseOnAnyRequisiteChange dseOnCloseRecord dseOnDeleteError dseOnOpenRecord dseOnPrepareUpdate dseOnUpdateError dseOnUpdateRatifiedRecord dseOnValidDelete dseOnValidUpdate reOnChange reOnChangeValues SELECTION_BEGIN_ROUTE_EVENT SELECTION_END_ROUTE_EVENT CURRENT_PERIOD_IS_REQUIRED PREVIOUS_CARD_TYPE_NAME SHOW_RECORD_PROPERTIES_FORM ACCESS_RIGHTS_SETTING_DIALOG_CODE ADMINISTRATOR_USER_CODE ANALYTIC_REPORT_TYPE asrtHideLocal asrtHideRemote CALCULATED_ROLE_TYPE_CODE COMPONENTS_REFERENCE_DEVELOPER_VIEW_CODE DCTS_TEST_PROTOCOLS_FOLDER_PATH E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED_BY_USER E_EDOC_VERSION_ALREDY_SIGNED E_EDOC_VERSION_ALREDY_SIGNED_BY_USER EDOC_TYPES_CODE_REQUISITE_FIELD_NAME EDOCUMENTS_ALIAS_NAME FILES_FOLDER_PATH FILTER_OPERANDS_DELIMITER FILTER_OPERATIONS_DELIMITER FORMCARD_NAME FORMLIST_NAME GET_EXTENDED_DOCUMENT_EXTENSION_CREATION_MODE GET_EXTENDED_DOCUMENT_EXTENSION_IMPORT_MODE INTEGRATED_REPORT_TYPE IS_BUILDER_APPLICATION_ROLE IS_BUILDER_APPLICATION_ROLE2 IS_BUILDER_USERS ISBSYSDEV LOG_FOLDER_PATH mbCancel mbNo mbNoToAll mbOK mbYes mbYesToAll MEMORY_DATASET_DESRIPTIONS_FILENAME mrNo mrNoToAll mrYes mrYesToAll MULTIPLE_SELECT_DIALOG_CODE NONOPERATING_RECORD_FLAG_FEMININE NONOPERATING_RECORD_FLAG_MASCULINE OPERATING_RECORD_FLAG_FEMININE OPERATING_RECORD_FLAG_MASCULINE PROFILING_SETTINGS_COMMON_SETTINGS_CODE_VALUE PROGRAM_INITIATED_LOOKUP_ACTION ratDelete ratEdit ratInsert REPORT_TYPE REQUIRED_PICK_VALUES_VARIABLE rmCard rmList SBRTE_PROGID_DEV SBRTE_PROGID_RELEASE STATIC_ROLE_TYPE_CODE SUPPRESS_EMPTY_TEMPLATE_CREATION SYSTEM_USER_CODE UPDATE_DIALOG_DATASET USED_IN_OBJECT_HINT_PARAM USER_INITIATED_LOOKUP_ACTION USER_NAME_FORMAT USER_SELECTION_RESTRICTIONS WORKFLOW_TEST_PROTOCOLS_FOLDER_PATH ELS_SUBTYPE_CONTROL_NAME ELS_FOLDER_KIND_CONTROL_NAME REPEAT_PROCESS_CURRENT_OBJECT_EXCEPTION_NAME PRIVILEGE_COMPONENT_FULL_ACCESS PRIVILEGE_DEVELOPMENT_EXPORT PRIVILEGE_DEVELOPMENT_IMPORT PRIVILEGE_DOCUMENT_DELETE PRIVILEGE_ESD PRIVILEGE_FOLDER_DELETE PRIVILEGE_MANAGE_ACCESS_RIGHTS PRIVILEGE_MANAGE_REPLICATION PRIVILEGE_MANAGE_SESSION_SERVER PRIVILEGE_OBJECT_FULL_ACCESS PRIVILEGE_OBJECT_VIEW PRIVILEGE_RESERVE_LICENSE PRIVILEGE_SYSTEM_CUSTOMIZE PRIVILEGE_SYSTEM_DEVELOP PRIVILEGE_SYSTEM_INSTALL PRIVILEGE_TASK_DELETE PRIVILEGE_USER_PLUGIN_SETTINGS_CUSTOMIZE PRIVILEGES_PSEUDOREFERENCE_CODE ACCESS_TYPES_PSEUDOREFERENCE_CODE ALL_AVAILABLE_COMPONENTS_PSEUDOREFERENCE_CODE ALL_AVAILABLE_PRIVILEGES_PSEUDOREFERENCE_CODE ALL_REPLICATE_COMPONENTS_PSEUDOREFERENCE_CODE AVAILABLE_DEVELOPERS_COMPONENTS_PSEUDOREFERENCE_CODE COMPONENTS_PSEUDOREFERENCE_CODE FILTRATER_SETTINGS_CONFLICTS_PSEUDOREFERENCE_CODE GROUPS_PSEUDOREFERENCE_CODE RECEIVE_PROTOCOL_PSEUDOREFERENCE_CODE REFERENCE_REQUISITE_PSEUDOREFERENCE_CODE REFERENCE_REQUISITES_PSEUDOREFERENCE_CODE REFTYPES_PSEUDOREFERENCE_CODE REPLICATION_SEANCES_DIARY_PSEUDOREFERENCE_CODE SEND_PROTOCOL_PSEUDOREFERENCE_CODE SUBSTITUTES_PSEUDOREFERENCE_CODE SYSTEM_SETTINGS_PSEUDOREFERENCE_CODE UNITS_PSEUDOREFERENCE_CODE USERS_PSEUDOREFERENCE_CODE VIEWERS_PSEUDOREFERENCE_CODE CERTIFICATE_TYPE_ENCRYPT CERTIFICATE_TYPE_SIGN CERTIFICATE_TYPE_SIGN_AND_ENCRYPT STORAGE_TYPE_FILE STORAGE_TYPE_NAS_CIFS STORAGE_TYPE_SAPERION STORAGE_TYPE_SQL_SERVER COMPTYPE2_REQUISITE_DOCUMENTS_VALUE COMPTYPE2_REQUISITE_TASKS_VALUE COMPTYPE2_REQUISITE_FOLDERS_VALUE COMPTYPE2_REQUISITE_REFERENCES_VALUE SYSREQ_CODE SYSREQ_COMPTYPE2 SYSREQ_CONST_AVAILABLE_FOR_WEB SYSREQ_CONST_COMMON_CODE SYSREQ_CONST_COMMON_VALUE SYSREQ_CONST_FIRM_CODE SYSREQ_CONST_FIRM_STATUS SYSREQ_CONST_FIRM_VALUE SYSREQ_CONST_SERVER_STATUS SYSREQ_CONTENTS SYSREQ_DATE_OPEN SYSREQ_DATE_CLOSE SYSREQ_DESCRIPTION SYSREQ_DESCRIPTION_LOCALIZE_ID SYSREQ_DOUBLE SYSREQ_EDOC_ACCESS_TYPE SYSREQ_EDOC_AUTHOR SYSREQ_EDOC_CREATED SYSREQ_EDOC_DELEGATE_RIGHTS_REQUISITE_CODE SYSREQ_EDOC_EDITOR SYSREQ_EDOC_ENCODE_TYPE SYSREQ_EDOC_ENCRYPTION_PLUGIN_NAME SYSREQ_EDOC_ENCRYPTION_PLUGIN_VERSION SYSREQ_EDOC_EXPORT_DATE SYSREQ_EDOC_EXPORTER SYSREQ_EDOC_KIND SYSREQ_EDOC_LIFE_STAGE_NAME SYSREQ_EDOC_LOCKED_FOR_SERVER_CODE SYSREQ_EDOC_MODIFIED SYSREQ_EDOC_NAME SYSREQ_EDOC_NOTE SYSREQ_EDOC_QUALIFIED_ID SYSREQ_EDOC_SESSION_KEY SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_NAME SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_VERSION SYSREQ_EDOC_SIGNATURE_TYPE SYSREQ_EDOC_SIGNED SYSREQ_EDOC_STORAGE SYSREQ_EDOC_STORAGES_ARCHIVE_STORAGE SYSREQ_EDOC_STORAGES_CHECK_RIGHTS SYSREQ_EDOC_STORAGES_COMPUTER_NAME SYSREQ_EDOC_STORAGES_EDIT_IN_STORAGE SYSREQ_EDOC_STORAGES_EXECUTIVE_STORAGE SYSREQ_EDOC_STORAGES_FUNCTION SYSREQ_EDOC_STORAGES_INITIALIZED SYSREQ_EDOC_STORAGES_LOCAL_PATH SYSREQ_EDOC_STORAGES_SAPERION_DATABASE_NAME SYSREQ_EDOC_STORAGES_SEARCH_BY_TEXT SYSREQ_EDOC_STORAGES_SERVER_NAME SYSREQ_EDOC_STORAGES_SHARED_SOURCE_NAME SYSREQ_EDOC_STORAGES_TYPE SYSREQ_EDOC_TEXT_MODIFIED SYSREQ_EDOC_TYPE_ACT_CODE SYSREQ_EDOC_TYPE_ACT_DESCRIPTION SYSREQ_EDOC_TYPE_ACT_DESCRIPTION_LOCALIZE_ID SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE_EXISTS SYSREQ_EDOC_TYPE_ACT_SECTION SYSREQ_EDOC_TYPE_ADD_PARAMS SYSREQ_EDOC_TYPE_COMMENT SYSREQ_EDOC_TYPE_EVENT_TEXT SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID SYSREQ_EDOC_TYPE_NAME_LOCALIZE_ID SYSREQ_EDOC_TYPE_NUMERATION_METHOD SYSREQ_EDOC_TYPE_PSEUDO_REQUISITE_CODE SYSREQ_EDOC_TYPE_REQ_CODE SYSREQ_EDOC_TYPE_REQ_DESCRIPTION SYSREQ_EDOC_TYPE_REQ_DESCRIPTION_LOCALIZE_ID SYSREQ_EDOC_TYPE_REQ_IS_LEADING SYSREQ_EDOC_TYPE_REQ_IS_REQUIRED SYSREQ_EDOC_TYPE_REQ_NUMBER SYSREQ_EDOC_TYPE_REQ_ON_CHANGE SYSREQ_EDOC_TYPE_REQ_ON_CHANGE_EXISTS SYSREQ_EDOC_TYPE_REQ_ON_SELECT SYSREQ_EDOC_TYPE_REQ_ON_SELECT_KIND SYSREQ_EDOC_TYPE_REQ_SECTION SYSREQ_EDOC_TYPE_VIEW_CARD SYSREQ_EDOC_TYPE_VIEW_CODE SYSREQ_EDOC_TYPE_VIEW_COMMENT SYSREQ_EDOC_TYPE_VIEW_IS_MAIN SYSREQ_EDOC_TYPE_VIEW_NAME SYSREQ_EDOC_TYPE_VIEW_NAME_LOCALIZE_ID SYSREQ_EDOC_VERSION_AUTHOR SYSREQ_EDOC_VERSION_CRC SYSREQ_EDOC_VERSION_DATA SYSREQ_EDOC_VERSION_EDITOR SYSREQ_EDOC_VERSION_EXPORT_DATE SYSREQ_EDOC_VERSION_EXPORTER SYSREQ_EDOC_VERSION_HIDDEN SYSREQ_EDOC_VERSION_LIFE_STAGE SYSREQ_EDOC_VERSION_MODIFIED SYSREQ_EDOC_VERSION_NOTE SYSREQ_EDOC_VERSION_SIGNATURE_TYPE SYSREQ_EDOC_VERSION_SIGNED SYSREQ_EDOC_VERSION_SIZE SYSREQ_EDOC_VERSION_SOURCE SYSREQ_EDOC_VERSION_TEXT_MODIFIED SYSREQ_EDOCKIND_DEFAULT_VERSION_STATE_CODE SYSREQ_FOLDER_KIND SYSREQ_FUNC_CATEGORY SYSREQ_FUNC_COMMENT SYSREQ_FUNC_GROUP SYSREQ_FUNC_GROUP_COMMENT SYSREQ_FUNC_GROUP_NUMBER SYSREQ_FUNC_HELP SYSREQ_FUNC_PARAM_DEF_VALUE SYSREQ_FUNC_PARAM_IDENT SYSREQ_FUNC_PARAM_NUMBER SYSREQ_FUNC_PARAM_TYPE SYSREQ_FUNC_TEXT SYSREQ_GROUP_CATEGORY SYSREQ_ID SYSREQ_LAST_UPDATE SYSREQ_LEADER_REFERENCE SYSREQ_LINE_NUMBER SYSREQ_MAIN_RECORD_ID SYSREQ_NAME SYSREQ_NAME_LOCALIZE_ID SYSREQ_NOTE SYSREQ_ORIGINAL_RECORD SYSREQ_OUR_FIRM SYSREQ_PROFILING_SETTINGS_BATCH_LOGING SYSREQ_PROFILING_SETTINGS_BATCH_SIZE SYSREQ_PROFILING_SETTINGS_PROFILING_ENABLED SYSREQ_PROFILING_SETTINGS_SQL_PROFILING_ENABLED SYSREQ_PROFILING_SETTINGS_START_LOGGED SYSREQ_RECORD_STATUS SYSREQ_REF_REQ_FIELD_NAME SYSREQ_REF_REQ_FORMAT SYSREQ_REF_REQ_GENERATED SYSREQ_REF_REQ_LENGTH SYSREQ_REF_REQ_PRECISION SYSREQ_REF_REQ_REFERENCE SYSREQ_REF_REQ_SECTION SYSREQ_REF_REQ_STORED SYSREQ_REF_REQ_TOKENS SYSREQ_REF_REQ_TYPE SYSREQ_REF_REQ_VIEW SYSREQ_REF_TYPE_ACT_CODE SYSREQ_REF_TYPE_ACT_DESCRIPTION SYSREQ_REF_TYPE_ACT_DESCRIPTION_LOCALIZE_ID SYSREQ_REF_TYPE_ACT_ON_EXECUTE SYSREQ_REF_TYPE_ACT_ON_EXECUTE_EXISTS SYSREQ_REF_TYPE_ACT_SECTION SYSREQ_REF_TYPE_ADD_PARAMS SYSREQ_REF_TYPE_COMMENT SYSREQ_REF_TYPE_COMMON_SETTINGS SYSREQ_REF_TYPE_DISPLAY_REQUISITE_NAME SYSREQ_REF_TYPE_EVENT_TEXT SYSREQ_REF_TYPE_MAIN_LEADING_REF SYSREQ_REF_TYPE_NAME_IN_SINGULAR SYSREQ_REF_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID SYSREQ_REF_TYPE_NAME_LOCALIZE_ID SYSREQ_REF_TYPE_NUMERATION_METHOD SYSREQ_REF_TYPE_REQ_CODE SYSREQ_REF_TYPE_REQ_DESCRIPTION SYSREQ_REF_TYPE_REQ_DESCRIPTION_LOCALIZE_ID SYSREQ_REF_TYPE_REQ_IS_CONTROL SYSREQ_REF_TYPE_REQ_IS_FILTER SYSREQ_REF_TYPE_REQ_IS_LEADING SYSREQ_REF_TYPE_REQ_IS_REQUIRED SYSREQ_REF_TYPE_REQ_NUMBER SYSREQ_REF_TYPE_REQ_ON_CHANGE SYSREQ_REF_TYPE_REQ_ON_CHANGE_EXISTS SYSREQ_REF_TYPE_REQ_ON_SELECT SYSREQ_REF_TYPE_REQ_ON_SELECT_KIND SYSREQ_REF_TYPE_REQ_SECTION SYSREQ_REF_TYPE_VIEW_CARD SYSREQ_REF_TYPE_VIEW_CODE SYSREQ_REF_TYPE_VIEW_COMMENT SYSREQ_REF_TYPE_VIEW_IS_MAIN SYSREQ_REF_TYPE_VIEW_NAME SYSREQ_REF_TYPE_VIEW_NAME_LOCALIZE_ID SYSREQ_REFERENCE_TYPE_ID SYSREQ_STATE SYSREQ_STATЕ SYSREQ_SYSTEM_SETTINGS_VALUE SYSREQ_TYPE SYSREQ_UNIT SYSREQ_UNIT_ID SYSREQ_USER_GROUPS_GROUP_FULL_NAME SYSREQ_USER_GROUPS_GROUP_NAME SYSREQ_USER_GROUPS_GROUP_SERVER_NAME SYSREQ_USERS_ACCESS_RIGHTS SYSREQ_USERS_AUTHENTICATION SYSREQ_USERS_CATEGORY SYSREQ_USERS_COMPONENT SYSREQ_USERS_COMPONENT_USER_IS_PUBLIC SYSREQ_USERS_DOMAIN SYSREQ_USERS_FULL_USER_NAME SYSREQ_USERS_GROUP SYSREQ_USERS_IS_MAIN_SERVER SYSREQ_USERS_LOGIN SYSREQ_USERS_REFERENCE_USER_IS_PUBLIC SYSREQ_USERS_STATUS SYSREQ_USERS_USER_CERTIFICATE SYSREQ_USERS_USER_CERTIFICATE_INFO SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_NAME SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_VERSION SYSREQ_USERS_USER_CERTIFICATE_STATE SYSREQ_USERS_USER_CERTIFICATE_SUBJECT_NAME SYSREQ_USERS_USER_CERTIFICATE_THUMBPRINT SYSREQ_USERS_USER_DEFAULT_CERTIFICATE SYSREQ_USERS_USER_DESCRIPTION SYSREQ_USERS_USER_GLOBAL_NAME SYSREQ_USERS_USER_LOGIN SYSREQ_USERS_USER_MAIN_SERVER SYSREQ_USERS_USER_TYPE SYSREQ_WORK_RULES_FOLDER_ID RESULT_VAR_NAME RESULT_VAR_NAME_ENG AUTO_NUMERATION_RULE_ID CANT_CHANGE_ID_REQUISITE_RULE_ID CANT_CHANGE_OURFIRM_REQUISITE_RULE_ID CHECK_CHANGING_REFERENCE_RECORD_USE_RULE_ID CHECK_CODE_REQUISITE_RULE_ID CHECK_DELETING_REFERENCE_RECORD_USE_RULE_ID CHECK_FILTRATER_CHANGES_RULE_ID CHECK_RECORD_INTERVAL_RULE_ID CHECK_REFERENCE_INTERVAL_RULE_ID CHECK_REQUIRED_DATA_FULLNESS_RULE_ID CHECK_REQUIRED_REQUISITES_FULLNESS_RULE_ID MAKE_RECORD_UNRATIFIED_RULE_ID RESTORE_AUTO_NUMERATION_RULE_ID SET_FIRM_CONTEXT_FROM_RECORD_RULE_ID SET_FIRST_RECORD_IN_LIST_FORM_RULE_ID SET_IDSPS_VALUE_RULE_ID SET_NEXT_CODE_VALUE_RULE_ID SET_OURFIRM_BOUNDS_RULE_ID SET_OURFIRM_REQUISITE_RULE_ID SCRIPT_BLOCK_AFTER_FINISH_EVENT SCRIPT_BLOCK_BEFORE_START_EVENT SCRIPT_BLOCK_EXECUTION_RESULTS_PROPERTY SCRIPT_BLOCK_NAME_PROPERTY SCRIPT_BLOCK_SCRIPT_PROPERTY SUBTASK_BLOCK_ABORT_DEADLINE_PROPERTY SUBTASK_BLOCK_AFTER_FINISH_EVENT SUBTASK_BLOCK_ASSIGN_PARAMS_EVENT SUBTASK_BLOCK_ATTACHMENTS_PROPERTY SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY SUBTASK_BLOCK_BEFORE_START_EVENT SUBTASK_BLOCK_CREATED_TASK_PROPERTY SUBTASK_BLOCK_CREATION_EVENT SUBTASK_BLOCK_DEADLINE_PROPERTY SUBTASK_BLOCK_IMPORTANCE_PROPERTY SUBTASK_BLOCK_INITIATOR_PROPERTY SUBTASK_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY SUBTASK_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY SUBTASK_BLOCK_JOBS_TYPE_PROPERTY SUBTASK_BLOCK_NAME_PROPERTY SUBTASK_BLOCK_PARALLEL_ROUTE_PROPERTY SUBTASK_BLOCK_PERFORMERS_PROPERTY SUBTASK_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY SUBTASK_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY SUBTASK_BLOCK_REQUIRE_SIGN_PROPERTY SUBTASK_BLOCK_STANDARD_ROUTE_PROPERTY SUBTASK_BLOCK_START_EVENT SUBTASK_BLOCK_STEP_CONTROL_PROPERTY SUBTASK_BLOCK_SUBJECT_PROPERTY SUBTASK_BLOCK_TASK_CONTROL_PROPERTY SUBTASK_BLOCK_TEXT_PROPERTY SUBTASK_BLOCK_UNLOCK_ATTACHMENTS_ON_STOP_PROPERTY SUBTASK_BLOCK_USE_STANDARD_ROUTE_PROPERTY SUBTASK_BLOCK_WAIT_FOR_TASK_COMPLETE_PROPERTY SYSCOMP_CONTROL_JOBS SYSCOMP_FOLDERS SYSCOMP_JOBS SYSCOMP_NOTICES SYSCOMP_TASKS SYSDLG_CREATE_EDOCUMENT SYSDLG_CREATE_EDOCUMENT_VERSION SYSDLG_CURRENT_PERIOD SYSDLG_EDIT_FUNCTION_HELP SYSDLG_EDOCUMENT_KINDS_FOR_TEMPLATE SYSDLG_EXPORT_MULTIPLE_EDOCUMENTS SYSDLG_EXPORT_SINGLE_EDOCUMENT SYSDLG_IMPORT_EDOCUMENT SYSDLG_MULTIPLE_SELECT SYSDLG_SETUP_ACCESS_RIGHTS SYSDLG_SETUP_DEFAULT_RIGHTS SYSDLG_SETUP_FILTER_CONDITION SYSDLG_SETUP_SIGN_RIGHTS SYSDLG_SETUP_TASK_OBSERVERS SYSDLG_SETUP_TASK_ROUTE SYSDLG_SETUP_USERS_LIST SYSDLG_SIGN_EDOCUMENT SYSDLG_SIGN_MULTIPLE_EDOCUMENTS SYSREF_ACCESS_RIGHTS_TYPES SYSREF_ADMINISTRATION_HISTORY SYSREF_ALL_AVAILABLE_COMPONENTS SYSREF_ALL_AVAILABLE_PRIVILEGES SYSREF_ALL_REPLICATING_COMPONENTS SYSREF_AVAILABLE_DEVELOPERS_COMPONENTS SYSREF_CALENDAR_EVENTS SYSREF_COMPONENT_TOKEN_HISTORY SYSREF_COMPONENT_TOKENS SYSREF_COMPONENTS SYSREF_CONSTANTS SYSREF_DATA_RECEIVE_PROTOCOL SYSREF_DATA_SEND_PROTOCOL SYSREF_DIALOGS SYSREF_DIALOGS_REQUISITES SYSREF_EDITORS SYSREF_EDOC_CARDS SYSREF_EDOC_TYPES SYSREF_EDOCUMENT_CARD_REQUISITES SYSREF_EDOCUMENT_CARD_TYPES SYSREF_EDOCUMENT_CARD_TYPES_REFERENCE SYSREF_EDOCUMENT_CARDS SYSREF_EDOCUMENT_HISTORY SYSREF_EDOCUMENT_KINDS SYSREF_EDOCUMENT_REQUISITES SYSREF_EDOCUMENT_SIGNATURES SYSREF_EDOCUMENT_TEMPLATES SYSREF_EDOCUMENT_TEXT_STORAGES SYSREF_EDOCUMENT_VIEWS SYSREF_FILTERER_SETUP_CONFLICTS SYSREF_FILTRATER_SETTING_CONFLICTS SYSREF_FOLDER_HISTORY SYSREF_FOLDERS SYSREF_FUNCTION_GROUPS SYSREF_FUNCTION_PARAMS SYSREF_FUNCTIONS SYSREF_JOB_HISTORY SYSREF_LINKS SYSREF_LOCALIZATION_DICTIONARY SYSREF_LOCALIZATION_LANGUAGES SYSREF_MODULES SYSREF_PRIVILEGES SYSREF_RECORD_HISTORY SYSREF_REFERENCE_REQUISITES SYSREF_REFERENCE_TYPE_VIEWS SYSREF_REFERENCE_TYPES SYSREF_REFERENCES SYSREF_REFERENCES_REQUISITES SYSREF_REMOTE_SERVERS SYSREF_REPLICATION_SESSIONS_LOG SYSREF_REPLICATION_SESSIONS_PROTOCOL SYSREF_REPORTS SYSREF_ROLES SYSREF_ROUTE_BLOCK_GROUPS SYSREF_ROUTE_BLOCKS SYSREF_SCRIPTS SYSREF_SEARCHES SYSREF_SERVER_EVENTS SYSREF_SERVER_EVENTS_HISTORY SYSREF_STANDARD_ROUTE_GROUPS SYSREF_STANDARD_ROUTES SYSREF_STATUSES SYSREF_SYSTEM_SETTINGS SYSREF_TASK_HISTORY SYSREF_TASK_KIND_GROUPS SYSREF_TASK_KINDS SYSREF_TASK_RIGHTS SYSREF_TASK_SIGNATURES SYSREF_TASKS SYSREF_UNITS SYSREF_USER_GROUPS SYSREF_USER_GROUPS_REFERENCE SYSREF_USER_SUBSTITUTION SYSREF_USERS SYSREF_USERS_REFERENCE SYSREF_VIEWERS SYSREF_WORKING_TIME_CALENDARS ACCESS_RIGHTS_TABLE_NAME EDMS_ACCESS_TABLE_NAME EDOC_TYPES_TABLE_NAME TEST_DEV_DB_NAME TEST_DEV_SYSTEM_CODE TEST_EDMS_DB_NAME TEST_EDMS_MAIN_CODE TEST_EDMS_MAIN_DB_NAME TEST_EDMS_SECOND_CODE TEST_EDMS_SECOND_DB_NAME TEST_EDMS_SYSTEM_CODE TEST_ISB5_MAIN_CODE TEST_ISB5_SECOND_CODE TEST_SQL_SERVER_2005_NAME TEST_SQL_SERVER_NAME ATTENTION_CAPTION cbsCommandLinks cbsDefault CONFIRMATION_CAPTION ERROR_CAPTION INFORMATION_CAPTION mrCancel mrOk EDOC_VERSION_ACTIVE_STAGE_CODE EDOC_VERSION_DESIGN_STAGE_CODE EDOC_VERSION_OBSOLETE_STAGE_CODE cpDataEnciphermentEnabled cpDigitalSignatureEnabled cpID cpIssuer cpPluginVersion cpSerial cpSubjectName cpSubjSimpleName cpValidFromDate cpValidToDate ISBL_SYNTAX NO_SYNTAX XML_SYNTAX WAIT_BLOCK_AFTER_FINISH_EVENT WAIT_BLOCK_BEFORE_START_EVENT WAIT_BLOCK_DEADLINE_PROPERTY WAIT_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY WAIT_BLOCK_NAME_PROPERTY WAIT_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY SYSRES_COMMON SYSRES_CONST SYSRES_MBFUNC SYSRES_SBDATA SYSRES_SBGUI SYSRES_SBINTF SYSRES_SBREFDSC SYSRES_SQLERRORS SYSRES_SYSCOMP ", rr = "atUser atGroup atRole aemEnabledAlways aemDisabledAlways aemEnabledOnBrowse aemEnabledOnEdit aemDisabledOnBrowseEmpty apBegin apEnd alLeft alRight asmNever asmNoButCustomize asmAsLastTime asmYesButCustomize asmAlways cirCommon cirRevoked ctSignature ctEncode ctSignatureEncode clbUnchecked clbChecked clbGrayed ceISB ceAlways ceNever ctDocument ctReference ctScript ctUnknown ctReport ctDialog ctFunction ctFolder ctEDocument ctTask ctJob ctNotice ctControlJob cfInternal cfDisplay ciUnspecified ciWrite ciRead ckFolder ckEDocument ckTask ckJob ckComponentToken ckAny ckReference ckScript ckReport ckDialog ctISBLEditor ctBevel ctButton ctCheckListBox ctComboBox ctComboEdit ctGrid ctDBCheckBox ctDBComboBox ctDBEdit ctDBEllipsis ctDBMemo ctDBNavigator ctDBRadioGroup ctDBStatusLabel ctEdit ctGroupBox ctInplaceHint ctMemo ctPanel ctListBox ctRadioButton ctRichEdit ctTabSheet ctWebBrowser ctImage ctHyperLink ctLabel ctDBMultiEllipsis ctRibbon ctRichView ctInnerPanel ctPanelGroup ctBitButton cctDate cctInteger cctNumeric cctPick cctReference cctString cctText cltInternal cltPrimary cltGUI dseBeforeOpen dseAfterOpen dseBeforeClose dseAfterClose dseOnValidDelete dseBeforeDelete dseAfterDelete dseAfterDeleteOutOfTransaction dseOnDeleteError dseBeforeInsert dseAfterInsert dseOnValidUpdate dseBeforeUpdate dseOnUpdateRatifiedRecord dseAfterUpdate dseAfterUpdateOutOfTransaction dseOnUpdateError dseAfterScroll dseOnOpenRecord dseOnCloseRecord dseBeforeCancel dseAfterCancel dseOnUpdateDeadlockError dseBeforeDetailUpdate dseOnPrepareUpdate dseOnAnyRequisiteChange dssEdit dssInsert dssBrowse dssInActive dftDate dftShortDate dftDateTime dftTimeStamp dotDays dotHours dotMinutes dotSeconds dtkndLocal dtkndUTC arNone arView arEdit arFull ddaView ddaEdit emLock emEdit emSign emExportWithLock emImportWithUnlock emChangeVersionNote emOpenForModify emChangeLifeStage emDelete emCreateVersion emImport emUnlockExportedWithLock emStart emAbort emReInit emMarkAsReaded emMarkAsUnreaded emPerform emAccept emResume emChangeRights emEditRoute emEditObserver emRecoveryFromLocalCopy emChangeWorkAccessType emChangeEncodeTypeToCertificate emChangeEncodeTypeToPassword emChangeEncodeTypeToNone emChangeEncodeTypeToCertificatePassword emChangeStandardRoute emGetText emOpenForView emMoveToStorage emCreateObject emChangeVersionHidden emDeleteVersion emChangeLifeCycleStage emApprovingSign emExport emContinue emLockFromEdit emUnLockForEdit emLockForServer emUnlockFromServer emDelegateAccessRights emReEncode ecotFile ecotProcess eaGet eaCopy eaCreate eaCreateStandardRoute edltAll edltNothing edltQuery essmText essmCard esvtLast esvtLastActive esvtSpecified edsfExecutive edsfArchive edstSQLServer edstFile edvstNone edvstEDocumentVersionCopy edvstFile edvstTemplate edvstScannedFile vsDefault vsDesign vsActive vsObsolete etNone etCertificate etPassword etCertificatePassword ecException ecWarning ecInformation estAll estApprovingOnly evtLast evtLastActive evtQuery fdtString fdtNumeric fdtInteger fdtDate fdtText fdtUnknown fdtWideString fdtLargeInteger ftInbox ftOutbox ftFavorites ftCommonFolder ftUserFolder ftComponents ftQuickLaunch ftShortcuts ftSearch grhAuto grhX1 grhX2 grhX3 hltText hltRTF hltHTML iffBMP iffJPEG iffMultiPageTIFF iffSinglePageTIFF iffTIFF iffPNG im8bGrayscale im24bRGB im1bMonochrome itBMP itJPEG itWMF itPNG ikhInformation ikhWarning ikhError ikhNoIcon icUnknown icScript icFunction icIntegratedReport icAnalyticReport icDataSetEventHandler icActionHandler icFormEventHandler icLookUpEventHandler icRequisiteChangeEventHandler icBeforeSearchEventHandler icRoleCalculation icSelectRouteEventHandler icBlockPropertyCalculation icBlockQueryParamsEventHandler icChangeSearchResultEventHandler icBlockEventHandler icSubTaskInitEventHandler icEDocDataSetEventHandler icEDocLookUpEventHandler icEDocActionHandler icEDocFormEventHandler icEDocRequisiteChangeEventHandler icStructuredConversionRule icStructuredConversionEventBefore icStructuredConversionEventAfter icWizardEventHandler icWizardFinishEventHandler icWizardStepEventHandler icWizardStepFinishEventHandler icWizardActionEnableEventHandler icWizardActionExecuteEventHandler icCreateJobsHandler icCreateNoticesHandler icBeforeLookUpEventHandler icAfterLookUpEventHandler icTaskAbortEventHandler icWorkflowBlockActionHandler icDialogDataSetEventHandler icDialogActionHandler icDialogLookUpEventHandler icDialogRequisiteChangeEventHandler icDialogFormEventHandler icDialogValidCloseEventHandler icBlockFormEventHandler icTaskFormEventHandler icReferenceMethod icEDocMethod icDialogMethod icProcessMessageHandler isShow isHide isByUserSettings jkJob jkNotice jkControlJob jtInner jtLeft jtRight jtFull jtCross lbpAbove lbpBelow lbpLeft lbpRight eltPerConnection eltPerUser sfcUndefined sfcBlack sfcGreen sfcRed sfcBlue sfcOrange sfcLilac sfsItalic sfsStrikeout sfsNormal ldctStandardRoute ldctWizard ldctScript ldctFunction ldctRouteBlock ldctIntegratedReport ldctAnalyticReport ldctReferenceType ldctEDocumentType ldctDialog ldctServerEvents mrcrtNone mrcrtUser mrcrtMaximal mrcrtCustom vtEqual vtGreaterOrEqual vtLessOrEqual vtRange rdYesterday rdToday rdTomorrow rdThisWeek rdThisMonth rdThisYear rdNextMonth rdNextWeek rdLastWeek rdLastMonth rdWindow rdFile rdPrinter rdtString rdtNumeric rdtInteger rdtDate rdtReference rdtAccount rdtText rdtPick rdtUnknown rdtLargeInteger rdtDocument reOnChange reOnChangeValues ttGlobal ttLocal ttUser ttSystem ssmBrowse ssmSelect ssmMultiSelect ssmBrowseModal smSelect smLike smCard stNone stAuthenticating stApproving sctString sctStream sstAnsiSort sstNaturalSort svtEqual svtContain soatString soatNumeric soatInteger soatDatetime soatReferenceRecord soatText soatPick soatBoolean soatEDocument soatAccount soatIntegerCollection soatNumericCollection soatStringCollection soatPickCollection soatDatetimeCollection soatBooleanCollection soatReferenceRecordCollection soatEDocumentCollection soatAccountCollection soatContents soatUnknown tarAbortByUser tarAbortByWorkflowException tvtAllWords tvtExactPhrase tvtAnyWord usNone usCompleted usRedSquare usBlueSquare usYellowSquare usGreenSquare usOrangeSquare usPurpleSquare usFollowUp utUnknown utUser utDeveloper utAdministrator utSystemDeveloper utDisconnected btAnd btDetailAnd btOr btNotOr btOnly vmView vmSelect vmNavigation vsmSingle vsmMultiple vsmMultipleCheck vsmNoSelection wfatPrevious wfatNext wfatCancel wfatFinish wfepUndefined wfepText3 wfepText6 wfepText9 wfepSpinEdit wfepDropDown wfepRadioGroup wfepFlag wfepText12 wfepText15 wfepText18 wfepText21 wfepText24 wfepText27 wfepText30 wfepRadioGroupColumn1 wfepRadioGroupColumn2 wfepRadioGroupColumn3 wfetQueryParameter wfetText wfetDelimiter wfetLabel wptString wptInteger wptNumeric wptBoolean wptDateTime wptPick wptText wptUser wptUserList wptEDocumentInfo wptEDocumentInfoList wptReferenceRecordInfo wptReferenceRecordInfoList wptFolderInfo wptTaskInfo wptContents wptFileName wptDate wsrComplete wsrGoNext wsrGoPrevious wsrCustom wsrCancel wsrGoFinal wstForm wstEDocument wstTaskCard wstReferenceRecordCard wstFinal waAll waPerformers waManual wsbStart wsbFinish wsbNotice wsbStep wsbDecision wsbWait wsbMonitor wsbScript wsbConnector wsbSubTask wsbLifeCycleStage wsbPause wdtInteger wdtFloat wdtString wdtPick wdtDateTime wdtBoolean wdtTask wdtJob wdtFolder wdtEDocument wdtReferenceRecord wdtUser wdtGroup wdtRole wdtIntegerCollection wdtFloatCollection wdtStringCollection wdtPickCollection wdtDateTimeCollection wdtBooleanCollection wdtTaskCollection wdtJobCollection wdtFolderCollection wdtEDocumentCollection wdtReferenceRecordCollection wdtUserCollection wdtGroupCollection wdtRoleCollection wdtContents wdtUserList wdtSearchDescription wdtDeadLine wdtPickSet wdtAccountCollection wiLow wiNormal wiHigh wrtSoft wrtHard wsInit wsRunning wsDone wsControlled wsAborted wsContinued wtmFull wtmFromCurrent wtmOnlyCurrent ", _t2 = "AddSubString AdjustLineBreaks AmountInWords Analysis ArrayDimCount ArrayHighBound ArrayLowBound ArrayOf ArrayReDim Assert Assigned BeginOfMonth BeginOfPeriod BuildProfilingOperationAnalysis CallProcedure CanReadFile CArrayElement CDataSetRequisite ChangeDate ChangeReferenceDataset Char CharPos CheckParam CheckParamValue CompareStrings ConstantExists ControlState ConvertDateStr Copy CopyFile CreateArray CreateCachedReference CreateConnection CreateDialog CreateDualListDialog CreateEditor CreateException CreateFile CreateFolderDialog CreateInputDialog CreateLinkFile CreateList CreateLock CreateMemoryDataSet CreateObject CreateOpenDialog CreateProgress CreateQuery CreateReference CreateReport CreateSaveDialog CreateScript CreateSQLPivotFunction CreateStringList CreateTreeListSelectDialog CSelectSQL CSQL CSubString CurrentUserID CurrentUserName CurrentVersion DataSetLocateEx DateDiff DateTimeDiff DateToStr DayOfWeek DeleteFile DirectoryExists DisableCheckAccessRights DisableCheckFullShowingRestriction DisableMassTaskSendingRestrictions DropTable DupeString EditText EnableCheckAccessRights EnableCheckFullShowingRestriction EnableMassTaskSendingRestrictions EndOfMonth EndOfPeriod ExceptionExists ExceptionsOff ExceptionsOn Execute ExecuteProcess Exit ExpandEnvironmentVariables ExtractFileDrive ExtractFileExt ExtractFileName ExtractFilePath ExtractParams FileExists FileSize FindFile FindSubString FirmContext ForceDirectories Format FormatDate FormatNumeric FormatSQLDate FormatString FreeException GetComponent GetComponentLaunchParam GetConstant GetLastException GetReferenceRecord GetRefTypeByRefID GetTableID GetTempFolder IfThen In IndexOf InputDialog InputDialogEx InteractiveMode IsFileLocked IsGraphicFile IsNumeric Length LoadString LoadStringFmt LocalTimeToUTC LowerCase Max MessageBox MessageBoxEx MimeDecodeBinary MimeDecodeString MimeEncodeBinary MimeEncodeString Min MoneyInWords MoveFile NewID Now OpenFile Ord Precision Raise ReadCertificateFromFile ReadFile ReferenceCodeByID ReferenceNumber ReferenceRequisiteMode ReferenceRequisiteValue RegionDateSettings RegionNumberSettings RegionTimeSettings RegRead RegWrite RenameFile Replace Round SelectServerCode SelectSQL ServerDateTime SetConstant SetManagedFolderFieldsState ShowConstantsInputDialog ShowMessage Sleep Split SQL SQL2XLSTAB SQLProfilingSendReport StrToDate SubString SubStringCount SystemSetting Time TimeDiff Today Transliterate Trim UpperCase UserStatus UTCToLocalTime ValidateXML VarIsClear VarIsEmpty VarIsNull WorkTimeDiff WriteFile WriteFileEx WriteObjectHistory Анализ БазаДанных БлокЕсть БлокЕстьРасш БлокИнфо БлокСнять БлокСнятьРасш БлокУстановить Ввод ВводМеню ВедС ВедСпр ВерхняяГраницаМассива ВнешПрогр Восст ВременнаяПапка Время ВыборSQL ВыбратьЗапись ВыделитьСтр Вызвать Выполнить ВыпПрогр ГрафическийФайл ГруппаДополнительно ДатаВремяСерв ДеньНедели ДиалогДаНет ДлинаСтр ДобПодстр ЕПусто ЕслиТо ЕЧисло ЗамПодстр ЗаписьСправочника ЗначПоляСпр ИДТипСпр ИзвлечьДиск ИзвлечьИмяФайла ИзвлечьПуть ИзвлечьРасширение ИзмДат ИзменитьРазмерМассива ИзмеренийМассива ИмяОрг ИмяПоляСпр Индекс ИндикаторЗакрыть ИндикаторОткрыть ИндикаторШаг ИнтерактивныйРежим ИтогТблСпр КодВидВедСпр КодВидСпрПоИД КодПоAnalit КодСимвола КодСпр КолПодстр КолПроп КонМес Конст КонстЕсть КонстЗнач КонТран КопироватьФайл КопияСтр КПериод КСтрТблСпр Макс МаксСтрТблСпр Массив Меню МенюРасш Мин НаборДанныхНайтиРасш НаимВидСпр НаимПоAnalit НаимСпр НастроитьПереводыСтрок НачМес НачТран НижняяГраницаМассива НомерСпр НПериод Окно Окр Окружение ОтлИнфДобавить ОтлИнфУдалить Отчет ОтчетАнал ОтчетИнт ПапкаСуществует Пауза ПВыборSQL ПереименоватьФайл Переменные ПереместитьФайл Подстр ПоискПодстр ПоискСтр ПолучитьИДТаблицы ПользовательДополнительно ПользовательИД ПользовательИмя ПользовательСтатус Прервать ПроверитьПараметр ПроверитьПараметрЗнач ПроверитьУсловие РазбСтр РазнВремя РазнДат РазнДатаВремя РазнРабВремя РегУстВрем РегУстДат РегУстЧсл РедТекст РеестрЗапись РеестрСписокИменПарам РеестрЧтение РеквСпр РеквСпрПр Сегодня Сейчас Сервер СерверПроцессИД СертификатФайлСчитать СжПроб Символ СистемаДиректумКод СистемаИнформация СистемаКод Содержит СоединениеЗакрыть СоединениеОткрыть СоздатьДиалог СоздатьДиалогВыбораИзДвухСписков СоздатьДиалогВыбораПапки СоздатьДиалогОткрытияФайла СоздатьДиалогСохраненияФайла СоздатьЗапрос СоздатьИндикатор СоздатьИсключение СоздатьКэшированныйСправочник СоздатьМассив СоздатьНаборДанных СоздатьОбъект СоздатьОтчет СоздатьПапку СоздатьРедактор СоздатьСоединение СоздатьСписок СоздатьСписокСтрок СоздатьСправочник СоздатьСценарий СоздСпр СостСпр Сохр СохрСпр СписокСистем Спр Справочник СпрБлокЕсть СпрБлокСнять СпрБлокСнятьРасш СпрБлокУстановить СпрИзмНабДан СпрКод СпрНомер СпрОбновить СпрОткрыть СпрОтменить СпрПарам СпрПолеЗнач СпрПолеИмя СпрРекв СпрРеквВведЗн СпрРеквНовые СпрРеквПр СпрРеквПредЗн СпрРеквРежим СпрРеквТипТекст СпрСоздать СпрСост СпрСохранить СпрТблИтог СпрТблСтр СпрТблСтрКол СпрТблСтрМакс СпрТблСтрМин СпрТблСтрПред СпрТблСтрСлед СпрТблСтрСозд СпрТблСтрУд СпрТекПредст СпрУдалить СравнитьСтр СтрВерхРегистр СтрНижнРегистр СтрТблСпр СумПроп Сценарий СценарийПарам ТекВерсия ТекОрг Точн Тран Транслитерация УдалитьТаблицу УдалитьФайл УдСпр УдСтрТблСпр Уст УстановкиКонстант ФайлАтрибутСчитать ФайлАтрибутУстановить ФайлВремя ФайлВремяУстановить ФайлВыбрать ФайлЗанят ФайлЗаписать ФайлИскать ФайлКопировать ФайлМожноЧитать ФайлОткрыть ФайлПереименовать ФайлПерекодировать ФайлПереместить ФайлПросмотреть ФайлРазмер ФайлСоздать ФайлСсылкаСоздать ФайлСуществует ФайлСчитать ФайлУдалить ФмтSQLДат ФмтДат ФмтСтр ФмтЧсл Формат ЦМассивЭлемент ЦНаборДанныхРеквизит ЦПодстр ", Ur = "AltState Application CallType ComponentTokens CreatedJobs CreatedNotices ControlState DialogResult Dialogs EDocuments EDocumentVersionSource Folders GlobalIDs Job Jobs InputValue LookUpReference LookUpRequisiteNames LookUpSearch Object ParentComponent Processes References Requisite ReportName Reports Result Scripts Searches SelectedAttachments SelectedItems SelectMode Sender ServerEvents ServiceFactory ShiftState SubTask SystemDialogs Tasks Wizard Wizards Work ВызовСпособ ИмяОтчета РеквЗнач ", Dn = "IApplication IAccessRights IAccountRepository IAccountSelectionRestrictions IAction IActionList IAdministrationHistoryDescription IAnchors IApplication IArchiveInfo IAttachment IAttachmentList ICheckListBox ICheckPointedList IColumn IComponent IComponentDescription IComponentToken IComponentTokenFactory IComponentTokenInfo ICompRecordInfo IConnection IContents IControl IControlJob IControlJobInfo IControlList ICrypto ICrypto2 ICustomJob ICustomJobInfo ICustomListBox ICustomObjectWizardStep ICustomWork ICustomWorkInfo IDataSet IDataSetAccessInfo IDataSigner IDateCriterion IDateRequisite IDateRequisiteDescription IDateValue IDeaAccessRights IDeaObjectInfo IDevelopmentComponentLock IDialog IDialogFactory IDialogPickRequisiteItems IDialogsFactory IDICSFactory IDocRequisite IDocumentInfo IDualListDialog IECertificate IECertificateInfo IECertificates IEditControl IEditorForm IEdmsExplorer IEdmsObject IEdmsObjectDescription IEdmsObjectFactory IEdmsObjectInfo IEDocument IEDocumentAccessRights IEDocumentDescription IEDocumentEditor IEDocumentFactory IEDocumentInfo IEDocumentStorage IEDocumentVersion IEDocumentVersionListDialog IEDocumentVersionSource IEDocumentWizardStep IEDocVerSignature IEDocVersionState IEnabledMode IEncodeProvider IEncrypter IEvent IEventList IException IExternalEvents IExternalHandler IFactory IField IFileDialog IFolder IFolderDescription IFolderDialog IFolderFactory IFolderInfo IForEach IForm IFormTitle IFormWizardStep IGlobalIDFactory IGlobalIDInfo IGrid IHasher IHistoryDescription IHyperLinkControl IImageButton IImageControl IInnerPanel IInplaceHint IIntegerCriterion IIntegerList IIntegerRequisite IIntegerValue IISBLEditorForm IJob IJobDescription IJobFactory IJobForm IJobInfo ILabelControl ILargeIntegerCriterion ILargeIntegerRequisite ILargeIntegerValue ILicenseInfo ILifeCycleStage IList IListBox ILocalIDInfo ILocalization ILock IMemoryDataSet IMessagingFactory IMetadataRepository INotice INoticeInfo INumericCriterion INumericRequisite INumericValue IObject IObjectDescription IObjectImporter IObjectInfo IObserver IPanelGroup IPickCriterion IPickProperty IPickRequisite IPickRequisiteDescription IPickRequisiteItem IPickRequisiteItems IPickValue IPrivilege IPrivilegeList IProcess IProcessFactory IProcessMessage IProgress IProperty IPropertyChangeEvent IQuery IReference IReferenceCriterion IReferenceEnabledMode IReferenceFactory IReferenceHistoryDescription IReferenceInfo IReferenceRecordCardWizardStep IReferenceRequisiteDescription IReferencesFactory IReferenceValue IRefRequisite IReport IReportFactory IRequisite IRequisiteDescription IRequisiteDescriptionList IRequisiteFactory IRichEdit IRouteStep IRule IRuleList ISchemeBlock IScript IScriptFactory ISearchCriteria ISearchCriterion ISearchDescription ISearchFactory ISearchFolderInfo ISearchForObjectDescription ISearchResultRestrictions ISecuredContext ISelectDialog IServerEvent IServerEventFactory IServiceDialog IServiceFactory ISignature ISignProvider ISignProvider2 ISignProvider3 ISimpleCriterion IStringCriterion IStringList IStringRequisite IStringRequisiteDescription IStringValue ISystemDialogsFactory ISystemInfo ITabSheet ITask ITaskAbortReasonInfo ITaskCardWizardStep ITaskDescription ITaskFactory ITaskInfo ITaskRoute ITextCriterion ITextRequisite ITextValue ITreeListSelectDialog IUser IUserList IValue IView IWebBrowserControl IWizard IWizardAction IWizardFactory IWizardFormElement IWizardParam IWizardPickParam IWizardReferenceParam IWizardStep IWorkAccessRights IWorkDescription IWorkflowAskableParam IWorkflowAskableParams IWorkflowBlock IWorkflowBlockResult IWorkflowEnabledMode IWorkflowParam IWorkflowPickParam IWorkflowReferenceParam IWorkState IWorkTreeCustomNode IWorkTreeJobNode IWorkTreeTaskNode IXMLEditorForm SBCrypto ", oe = Ce + rr, ar = Ur, $e = "null true false nil ", Ae2 = {
      className: "number",
      begin: e2.NUMBER_RE,
      relevance: 0
    }, nn2 = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"'
        },
        {
          begin: "'",
          end: "'"
        }
      ]
    }, Ct2 = {
      className: "doctag",
      begin: "\\b(?:TODO|DONE|BEGIN|END|STUB|CHG|FIXME|NOTE|BUG|XXX)\\b",
      relevance: 0
    }, xn = {
      className: "comment",
      begin: "//",
      end: "$",
      relevance: 0,
      contains: [
        e2.PHRASAL_WORDS_MODE,
        Ct2
      ]
    }, Ln = {
      className: "comment",
      begin: "/\\*",
      end: "\\*/",
      relevance: 0,
      contains: [
        e2.PHRASAL_WORDS_MODE,
        Ct2
      ]
    }, H2 = { variants: [
      xn,
      Ln
    ] }, K2 = {
      $pattern: n,
      keyword: r2,
      built_in: oe,
      class: ar,
      literal: $e
    }, ce2 = {
      begin: "\\.\\s*" + e2.UNDERSCORE_IDENT_RE,
      keywords: K2,
      relevance: 0
    }, he = {
      className: "type",
      begin: ":[ \\t]*(" + Dn.trim().replace(/\s/g, "|") + ")",
      end: "[ \\t]*=",
      excludeEnd: true
    }, We2 = {
      className: "variable",
      keywords: K2,
      begin: n,
      relevance: 0,
      contains: [
        he,
        ce2
      ]
    }, dt2 = i2 + "\\(";
    return {
      name: "ISBL",
      case_insensitive: true,
      keywords: K2,
      illegal: "\\$|\\?|%|,|;$|~|#|@|</",
      contains: [
        {
          className: "function",
          begin: dt2,
          end: "\\)$",
          returnBegin: true,
          keywords: K2,
          illegal: "[\\[\\]\\|\\$\\?%,~#@]",
          contains: [
            {
              className: "title",
              keywords: {
                $pattern: n,
                built_in: _t2
              },
              begin: dt2,
              end: "\\(",
              returnBegin: true,
              excludeEnd: true
            },
            ce2,
            We2,
            nn2,
            Ae2,
            H2
          ]
        },
        he,
        ce2,
        We2,
        nn2,
        Ae2,
        H2
      ]
    };
  }
  return Ji = t2, Ji;
}
var ji, od;
function XR() {
  if (od)
    return ji;
  od = 1;
  var t2 = "[0-9](_*[0-9])*", e2 = `\\.(${t2})`, n = "[0-9a-fA-F](_*[0-9a-fA-F])*", i2 = {
    className: "number",
    variants: [
      // DecimalFloatingPointLiteral
      // including ExponentPart
      { begin: `(\\b(${t2})((${e2})|\\.)?|(${e2}))[eE][+-]?(${t2})[fFdD]?\\b` },
      // excluding ExponentPart
      { begin: `\\b(${t2})((${e2})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
      { begin: `(${e2})[fFdD]?\\b` },
      { begin: `\\b(${t2})[fFdD]\\b` },
      // HexadecimalFloatingPointLiteral
      { begin: `\\b0[xX]((${n})\\.?|(${n})?\\.(${n}))[pP][+-]?(${t2})[fFdD]?\\b` },
      // DecimalIntegerLiteral
      { begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b" },
      // HexIntegerLiteral
      { begin: `\\b0[xX](${n})[lL]?\\b` },
      // OctalIntegerLiteral
      { begin: "\\b0(_*[0-7])*[lL]?\\b" },
      // BinaryIntegerLiteral
      { begin: "\\b0[bB][01](_*[01])*[lL]?\\b" }
    ],
    relevance: 0
  };
  function r2(s2, o2, l2) {
    return l2 === -1 ? "" : s2.replace(o2, (u2) => r2(s2, o2, l2 - 1));
  }
  function a2(s2) {
    const o2 = s2.regex, l2 = "[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*", u2 = l2 + r2("(?:<" + l2 + "~~~(?:\\s*,\\s*" + l2 + "~~~)*>)?", /~~~/g, 2), c2 = {
      keyword: [
        "synchronized",
        "abstract",
        "private",
        "var",
        "static",
        "if",
        "const ",
        "for",
        "while",
        "strictfp",
        "finally",
        "protected",
        "import",
        "native",
        "final",
        "void",
        "enum",
        "else",
        "break",
        "transient",
        "catch",
        "instanceof",
        "volatile",
        "case",
        "assert",
        "package",
        "default",
        "public",
        "try",
        "switch",
        "continue",
        "throws",
        "protected",
        "public",
        "private",
        "module",
        "requires",
        "exports",
        "do",
        "sealed",
        "yield",
        "permits",
        "goto",
        "when"
      ],
      literal: [
        "false",
        "true",
        "null"
      ],
      type: [
        "char",
        "boolean",
        "long",
        "float",
        "int",
        "byte",
        "short",
        "double"
      ],
      built_in: [
        "super",
        "this"
      ]
    }, E2 = {
      className: "meta",
      begin: "@" + l2,
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          contains: ["self"]
          // allow nested () inside our annotation
        }
      ]
    }, g2 = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      keywords: c2,
      relevance: 0,
      contains: [s2.C_BLOCK_COMMENT_MODE],
      endsParent: true
    };
    return {
      name: "Java",
      aliases: ["jsp"],
      keywords: c2,
      illegal: /<\/|#/,
      contains: [
        s2.COMMENT(
          "/\\*\\*",
          "\\*/",
          {
            relevance: 0,
            contains: [
              {
                // eat up @'s in emails to prevent them to be recognized as doctags
                begin: /\w+@/,
                relevance: 0
              },
              {
                className: "doctag",
                begin: "@[A-Za-z]+"
              }
            ]
          }
        ),
        // relevance boost
        {
          begin: /import java\.[a-z]+\./,
          keywords: "import",
          relevance: 2
        },
        s2.C_LINE_COMMENT_MODE,
        s2.C_BLOCK_COMMENT_MODE,
        {
          begin: /"""/,
          end: /"""/,
          className: "string",
          contains: [s2.BACKSLASH_ESCAPE]
        },
        s2.APOS_STRING_MODE,
        s2.QUOTE_STRING_MODE,
        {
          match: [
            /\b(?:class|interface|enum|extends|implements|new)/,
            /\s+/,
            l2
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          // Exceptions for hyphenated keywords
          match: /non-sealed/,
          scope: "keyword"
        },
        {
          begin: [
            o2.concat(/(?!else)/, l2),
            /\s+/,
            l2,
            /\s+/,
            /=(?!=)/
          ],
          className: {
            1: "type",
            3: "variable",
            5: "operator"
          }
        },
        {
          begin: [
            /record/,
            /\s+/,
            l2
          ],
          className: {
            1: "keyword",
            3: "title.class"
          },
          contains: [
            g2,
            s2.C_LINE_COMMENT_MODE,
            s2.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          // Expression keywords prevent 'keyword Name(...)' from being
          // recognized as a function definition
          beginKeywords: "new throw return else",
          relevance: 0
        },
        {
          begin: [
            "(?:" + u2 + "\\s+)",
            s2.UNDERSCORE_IDENT_RE,
            /\s*(?=\()/
          ],
          className: { 2: "title.function" },
          keywords: c2,
          contains: [
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              keywords: c2,
              relevance: 0,
              contains: [
                E2,
                s2.APOS_STRING_MODE,
                s2.QUOTE_STRING_MODE,
                i2,
                s2.C_BLOCK_COMMENT_MODE
              ]
            },
            s2.C_LINE_COMMENT_MODE,
            s2.C_BLOCK_COMMENT_MODE
          ]
        },
        i2,
        E2
      ]
    };
  }
  return ji = a2, ji;
}
var eo, sd;
function ZR() {
  if (sd)
    return eo;
  sd = 1;
  const t2 = "[A-Za-z$_][0-9A-Za-z$_]*", e2 = [
    "as",
    // for exports
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    // JS handles these with a special rule
    // "get",
    // "set",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends",
    // It's reached stage 3, which is "recommended for implementation":
    "using"
  ], n = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
  ], i2 = [
    // Fundamental objects
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    // numbers and dates
    "Math",
    "Date",
    "Number",
    "BigInt",
    // text
    "String",
    "RegExp",
    // Indexed collections
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    // Keyed collections
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    // Structured data
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    // Control abstraction objects
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    // Reflection
    "Reflect",
    "Proxy",
    // Internationalization
    "Intl",
    // WebAssembly
    "WebAssembly"
  ], r2 = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
  ], a2 = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
  ], s2 = [
    "arguments",
    "this",
    "super",
    "console",
    "window",
    "document",
    "localStorage",
    "sessionStorage",
    "module",
    "global"
    // Node.js
  ], o2 = [].concat(
    a2,
    i2,
    r2
  );
  function l2(u2) {
    const _ = u2.regex, d2 = (ne2, { after: ae }) => {
      const pe = "</" + ne2[0].slice(1);
      return ne2.input.indexOf(pe, ae) !== -1;
    }, f2 = t2, b = {
      begin: "<>",
      end: "</>"
    }, c2 = /<[A-Za-z0-9\\._:-]+\s*\/>/, E2 = {
      begin: /<[A-Za-z0-9\\._:-]+/,
      end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
      /**
       * @param {RegExpMatchArray} match
       * @param {CallbackResponse} response
       */
      isTrulyOpeningTag: (ne2, ae) => {
        const pe = ne2[0].length + ne2.index, fe2 = ne2.input[pe];
        if (
          // HTML should not include another raw `<` inside a tag
          // nested type?
          // `<Array<Array<number>>`, etc.
          fe2 === "<" || // the , gives away that this is not HTML
          // `<T, A extends keyof T, V>`
          fe2 === ","
        ) {
          ae.ignoreMatch();
          return;
        }
        fe2 === ">" && (d2(ne2, { after: pe }) || ae.ignoreMatch());
        let Ne;
        const ve2 = ne2.input.substring(pe);
        if (Ne = ve2.match(/^\s*=/)) {
          ae.ignoreMatch();
          return;
        }
        if ((Ne = ve2.match(/^\s+extends\s+/)) && Ne.index === 0) {
          ae.ignoreMatch();
          return;
        }
      }
    }, g2 = {
      $pattern: t2,
      keyword: e2,
      literal: n,
      built_in: o2,
      "variable.language": s2
    }, S = "[0-9](_?[0-9])*", p2 = `\\.(${S})`, m2 = "0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*", R2 = {
      className: "number",
      variants: [
        // DecimalLiteral
        { begin: `(\\b(${m2})((${p2})|\\.)?|(${p2}))[eE][+-]?(${S})\\b` },
        { begin: `\\b(${m2})\\b((${p2})\\b|\\.)?|(${p2})\\b` },
        // DecimalBigIntegerLiteral
        { begin: "\\b(0|[1-9](_?[0-9])*)n\\b" },
        // NonDecimalIntegerLiteral
        { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
        { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
        { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
        // LegacyOctalIntegerLiteral (does not include underscore separators)
        // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
        { begin: "\\b0[0-7]+n?\\b" }
      ],
      relevance: 0
    }, T = {
      className: "subst",
      begin: "\\$\\{",
      end: "\\}",
      keywords: g2,
      contains: []
      // defined later
    }, h2 = {
      begin: ".?html`",
      end: "",
      starts: {
        end: "`",
        returnEnd: false,
        contains: [
          u2.BACKSLASH_ESCAPE,
          T
        ],
        subLanguage: "xml"
      }
    }, C2 = {
      begin: ".?css`",
      end: "",
      starts: {
        end: "`",
        returnEnd: false,
        contains: [
          u2.BACKSLASH_ESCAPE,
          T
        ],
        subLanguage: "css"
      }
    }, A2 = {
      begin: ".?gql`",
      end: "",
      starts: {
        end: "`",
        returnEnd: false,
        contains: [
          u2.BACKSLASH_ESCAPE,
          T
        ],
        subLanguage: "graphql"
      }
    }, I2 = {
      className: "string",
      begin: "`",
      end: "`",
      contains: [
        u2.BACKSLASH_ESCAPE,
        T
      ]
    }, x = {
      className: "comment",
      variants: [
        u2.COMMENT(
          /\/\*\*(?!\/)/,
          "\\*/",
          {
            relevance: 0,
            contains: [
              {
                begin: "(?=@[A-Za-z]+)",
                relevance: 0,
                contains: [
                  {
                    className: "doctag",
                    begin: "@[A-Za-z]+"
                  },
                  {
                    className: "type",
                    begin: "\\{",
                    end: "\\}",
                    excludeEnd: true,
                    excludeBegin: true,
                    relevance: 0
                  },
                  {
                    className: "variable",
                    begin: f2 + "(?=\\s*(-)|$)",
                    endsParent: true,
                    relevance: 0
                  },
                  // eat spaces (not newlines) so we can find
                  // types or variables
                  {
                    begin: /(?=[^\n])\s/,
                    relevance: 0
                  }
                ]
              }
            ]
          }
        ),
        u2.C_BLOCK_COMMENT_MODE,
        u2.C_LINE_COMMENT_MODE
      ]
    }, M = [
      u2.APOS_STRING_MODE,
      u2.QUOTE_STRING_MODE,
      h2,
      C2,
      A2,
      I2,
      // Skip numbers when they are part of a variable name
      { match: /\$\d+/ },
      R2
      // This is intentional:
      // See https://github.com/highlightjs/highlight.js/issues/3288
      // hljs.REGEXP_MODE
    ];
    T.contains = M.concat({
      // we need to pair up {} inside our subst to prevent
      // it from ending too early by matching another }
      begin: /\{/,
      end: /\}/,
      keywords: g2,
      contains: [
        "self"
      ].concat(M)
    });
    const B2 = [].concat(x, T.contains), G2 = B2.concat([
      // eat recursive parens in sub expressions
      {
        begin: /(\s*)\(/,
        end: /\)/,
        keywords: g2,
        contains: ["self"].concat(B2)
      }
    ]), D = {
      className: "params",
      // convert this to negative lookbehind in v12
      begin: /(\s*)\(/,
      // to match the parms with
      end: /\)/,
      excludeBegin: true,
      excludeEnd: true,
      keywords: g2,
      contains: G2
    }, w = {
      variants: [
        // class Car extends vehicle
        {
          match: [
            /class/,
            /\s+/,
            f2,
            /\s+/,
            /extends/,
            /\s+/,
            _.concat(f2, "(", _.concat(/\./, f2), ")*")
          ],
          scope: {
            1: "keyword",
            3: "title.class",
            5: "keyword",
            7: "title.class.inherited"
          }
        },
        // class Car
        {
          match: [
            /class/,
            /\s+/,
            f2
          ],
          scope: {
            1: "keyword",
            3: "title.class"
          }
        }
      ]
    }, L = {
      relevance: 0,
      match: _.either(
        // Hard coded exceptions
        /\bJSON/,
        // Float32Array, OutT
        /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
        // CSSFactory, CSSFactoryT
        /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
        // FPs, FPsT
        /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/
        // P
        // single letters are not highlighted
        // BLAH
        // this will be flagged as a UPPER_CASE_CONSTANT instead
      ),
      className: "title.class",
      keywords: {
        _: [
          // se we still get relevance credit for JS library classes
          ...i2,
          ...r2
        ]
      }
    }, q2 = {
      label: "use_strict",
      className: "meta",
      relevance: 10,
      begin: /^\s*['"]use (strict|asm)['"]/
    }, z = {
      variants: [
        {
          match: [
            /function/,
            /\s+/,
            f2,
            /(?=\s*\()/
          ]
        },
        // anonymous function
        {
          match: [
            /function/,
            /\s*(?=\()/
          ]
        }
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      label: "func.def",
      contains: [D],
      illegal: /%/
    }, re = {
      relevance: 0,
      match: /\b[A-Z][A-Z_0-9]+\b/,
      className: "variable.constant"
    };
    function j(ne2) {
      return _.concat("(?!", ne2.join("|"), ")");
    }
    const ue = {
      match: _.concat(
        /\b/,
        j([
          ...a2,
          "super",
          "import"
        ].map((ne2) => `${ne2}\\s*\\(`)),
        f2,
        _.lookahead(/\s*\(/)
      ),
      className: "title.function",
      relevance: 0
    }, se2 = {
      begin: _.concat(/\./, _.lookahead(
        _.concat(f2, /(?![0-9A-Za-z$_(])/)
      )),
      end: f2,
      excludeBegin: true,
      keywords: "prototype",
      className: "property",
      relevance: 0
    }, Re2 = {
      match: [
        /get|set/,
        /\s+/,
        f2,
        /(?=\()/
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        {
          // eat to avoid empty params
          begin: /\(\)/
        },
        D
      ]
    }, Ce = "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" + u2.UNDERSCORE_IDENT_RE + ")\\s*=>", Te2 = {
      match: [
        /const|var|let/,
        /\s+/,
        f2,
        /\s*/,
        /=\s*/,
        /(async\s*)?/,
        // async is optional
        _.lookahead(Ce)
      ],
      keywords: "async",
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        D
      ]
    };
    return {
      name: "JavaScript",
      aliases: ["js", "jsx", "mjs", "cjs"],
      keywords: g2,
      // this will be extended by TypeScript
      exports: { PARAMS_CONTAINS: G2, CLASS_REFERENCE: L },
      illegal: /#(?![$_A-z])/,
      contains: [
        u2.SHEBANG({
          label: "shebang",
          binary: "node",
          relevance: 5
        }),
        q2,
        u2.APOS_STRING_MODE,
        u2.QUOTE_STRING_MODE,
        h2,
        C2,
        A2,
        I2,
        x,
        // Skip numbers when they are part of a variable name
        { match: /\$\d+/ },
        R2,
        L,
        {
          scope: "attr",
          match: f2 + _.lookahead(":"),
          relevance: 0
        },
        Te2,
        {
          // "value" container
          begin: "(" + u2.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
          keywords: "return throw case",
          relevance: 0,
          contains: [
            x,
            u2.REGEXP_MODE,
            {
              className: "function",
              // we have to count the parens to make sure we actually have the
              // correct bounding ( ) before the =>.  There could be any number of
              // sub-expressions inside also surrounded by parens.
              begin: Ce,
              returnBegin: true,
              end: "\\s*=>",
              contains: [
                {
                  className: "params",
                  variants: [
                    {
                      begin: u2.UNDERSCORE_IDENT_RE,
                      relevance: 0
                    },
                    {
                      className: null,
                      begin: /\(\s*\)/,
                      skip: true
                    },
                    {
                      begin: /(\s*)\(/,
                      end: /\)/,
                      excludeBegin: true,
                      excludeEnd: true,
                      keywords: g2,
                      contains: G2
                    }
                  ]
                }
              ]
            },
            {
              // could be a comma delimited list of params to a function call
              begin: /,/,
              relevance: 0
            },
            {
              match: /\s+/,
              relevance: 0
            },
            {
              // JSX
              variants: [
                { begin: b.begin, end: b.end },
                { match: c2 },
                {
                  begin: E2.begin,
                  // we carefully check the opening tag to see if it truly
                  // is a tag and not a false positive
                  "on:begin": E2.isTrulyOpeningTag,
                  end: E2.end
                }
              ],
              subLanguage: "xml",
              contains: [
                {
                  begin: E2.begin,
                  end: E2.end,
                  skip: true,
                  contains: ["self"]
                }
              ]
            }
          ]
        },
        z,
        {
          // prevent this from getting swallowed up by function
          // since they appear "function like"
          beginKeywords: "while if switch catch for"
        },
        {
          // we have to count the parens to make sure we actually have the correct
          // bounding ( ).  There could be any number of sub-expressions inside
          // also surrounded by parens.
          begin: "\\b(?!function)" + u2.UNDERSCORE_IDENT_RE + "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
          // end parens
          returnBegin: true,
          label: "func.def",
          contains: [
            D,
            u2.inherit(u2.TITLE_MODE, { begin: f2, className: "title.function" })
          ]
        },
        // catch ... so it won't trigger the property rule below
        {
          match: /\.\.\./,
          relevance: 0
        },
        se2,
        // hack: prevents detection of keywords in some circumstances
        // .keyword()
        // $keyword = x
        {
          match: "\\$" + f2,
          relevance: 0
        },
        {
          match: [/\bconstructor(?=\s*\()/],
          className: { 1: "title.function" },
          contains: [D]
        },
        ue,
        re,
        w,
        Re2,
        {
          match: /\$[(.]/
          // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
        }
      ]
    };
  }
  return eo = l2, eo;
}
var to, ld;
function JR() {
  if (ld)
    return to;
  ld = 1;
  function t2(e2) {
    const i2 = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      contains: [{
        begin: /[\w-]+ *=/,
        returnBegin: true,
        relevance: 0,
        contains: [
          {
            className: "attr",
            begin: /[\w-]+/
          }
        ]
      }],
      relevance: 0
    }, r2 = {
      className: "function",
      begin: /:[\w\-.]+/,
      relevance: 0
    }, a2 = {
      className: "string",
      begin: /\B([\/.])[\w\-.\/=]+/
    }, s2 = {
      className: "params",
      begin: /--[\w\-=\/]+/
    };
    return {
      name: "JBoss CLI",
      aliases: ["wildfly-cli"],
      keywords: {
        $pattern: "[a-z-]+",
        keyword: "alias batch cd clear command connect connection-factory connection-info data-source deploy deployment-info deployment-overlay echo echo-dmr help history if jdbc-driver-info jms-queue|20 jms-topic|20 ls patch pwd quit read-attribute read-operation reload rollout-plan run-batch set shutdown try unalias undeploy unset version xa-data-source",
        // module
        literal: "true false"
      },
      contains: [
        e2.HASH_COMMENT_MODE,
        e2.QUOTE_STRING_MODE,
        s2,
        r2,
        a2,
        i2
      ]
    };
  }
  return to = t2, to;
}
var no, cd;
function jR() {
  if (cd)
    return no;
  cd = 1;
  function t2(e2) {
    const n = {
      className: "attr",
      begin: /"(\\.|[^\\"\r\n])*"(?=\s*:)/,
      relevance: 1.01
    }, i2 = {
      match: /[{}[\],:]/,
      className: "punctuation",
      relevance: 0
    }, r2 = [
      "true",
      "false",
      "null"
    ], a2 = {
      scope: "literal",
      beginKeywords: r2.join(" ")
    };
    return {
      name: "JSON",
      aliases: ["jsonc"],
      keywords: {
        literal: r2
      },
      contains: [
        n,
        i2,
        e2.QUOTE_STRING_MODE,
        a2,
        e2.C_NUMBER_MODE,
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE
      ],
      illegal: "\\S"
    };
  }
  return no = t2, no;
}
var ro, ud;
function eC() {
  if (ud)
    return ro;
  ud = 1;
  function t2(e2) {
    const n = "[A-Za-z_\\u00A1-\\uFFFF][A-Za-z_0-9\\u00A1-\\uFFFF]*", s2 = {
      $pattern: n,
      keyword: [
        "baremodule",
        "begin",
        "break",
        "catch",
        "ccall",
        "const",
        "continue",
        "do",
        "else",
        "elseif",
        "end",
        "export",
        "false",
        "finally",
        "for",
        "function",
        "global",
        "if",
        "import",
        "in",
        "isa",
        "let",
        "local",
        "macro",
        "module",
        "quote",
        "return",
        "true",
        "try",
        "using",
        "where",
        "while"
      ],
      literal: [
        "ARGS",
        "C_NULL",
        "DEPOT_PATH",
        "ENDIAN_BOM",
        "ENV",
        "Inf",
        "Inf16",
        "Inf32",
        "Inf64",
        "InsertionSort",
        "LOAD_PATH",
        "MergeSort",
        "NaN",
        "NaN16",
        "NaN32",
        "NaN64",
        "PROGRAM_FILE",
        "QuickSort",
        "RoundDown",
        "RoundFromZero",
        "RoundNearest",
        "RoundNearestTiesAway",
        "RoundNearestTiesUp",
        "RoundToZero",
        "RoundUp",
        "VERSION|0",
        "devnull",
        "false",
        "im",
        "missing",
        "nothing",
        "pi",
        "stderr",
        "stdin",
        "stdout",
        "true",
        "undef",
        "π",
        "ℯ"
      ],
      built_in: [
        "AbstractArray",
        "AbstractChannel",
        "AbstractChar",
        "AbstractDict",
        "AbstractDisplay",
        "AbstractFloat",
        "AbstractIrrational",
        "AbstractMatrix",
        "AbstractRange",
        "AbstractSet",
        "AbstractString",
        "AbstractUnitRange",
        "AbstractVecOrMat",
        "AbstractVector",
        "Any",
        "ArgumentError",
        "Array",
        "AssertionError",
        "BigFloat",
        "BigInt",
        "BitArray",
        "BitMatrix",
        "BitSet",
        "BitVector",
        "Bool",
        "BoundsError",
        "CapturedException",
        "CartesianIndex",
        "CartesianIndices",
        "Cchar",
        "Cdouble",
        "Cfloat",
        "Channel",
        "Char",
        "Cint",
        "Cintmax_t",
        "Clong",
        "Clonglong",
        "Cmd",
        "Colon",
        "Complex",
        "ComplexF16",
        "ComplexF32",
        "ComplexF64",
        "CompositeException",
        "Condition",
        "Cptrdiff_t",
        "Cshort",
        "Csize_t",
        "Cssize_t",
        "Cstring",
        "Cuchar",
        "Cuint",
        "Cuintmax_t",
        "Culong",
        "Culonglong",
        "Cushort",
        "Cvoid",
        "Cwchar_t",
        "Cwstring",
        "DataType",
        "DenseArray",
        "DenseMatrix",
        "DenseVecOrMat",
        "DenseVector",
        "Dict",
        "DimensionMismatch",
        "Dims",
        "DivideError",
        "DomainError",
        "EOFError",
        "Enum",
        "ErrorException",
        "Exception",
        "ExponentialBackOff",
        "Expr",
        "Float16",
        "Float32",
        "Float64",
        "Function",
        "GlobalRef",
        "HTML",
        "IO",
        "IOBuffer",
        "IOContext",
        "IOStream",
        "IdDict",
        "IndexCartesian",
        "IndexLinear",
        "IndexStyle",
        "InexactError",
        "InitError",
        "Int",
        "Int128",
        "Int16",
        "Int32",
        "Int64",
        "Int8",
        "Integer",
        "InterruptException",
        "InvalidStateException",
        "Irrational",
        "KeyError",
        "LinRange",
        "LineNumberNode",
        "LinearIndices",
        "LoadError",
        "MIME",
        "Matrix",
        "Method",
        "MethodError",
        "Missing",
        "MissingException",
        "Module",
        "NTuple",
        "NamedTuple",
        "Nothing",
        "Number",
        "OrdinalRange",
        "OutOfMemoryError",
        "OverflowError",
        "Pair",
        "PartialQuickSort",
        "PermutedDimsArray",
        "Pipe",
        "ProcessFailedException",
        "Ptr",
        "QuoteNode",
        "Rational",
        "RawFD",
        "ReadOnlyMemoryError",
        "Real",
        "ReentrantLock",
        "Ref",
        "Regex",
        "RegexMatch",
        "RoundingMode",
        "SegmentationFault",
        "Set",
        "Signed",
        "Some",
        "StackOverflowError",
        "StepRange",
        "StepRangeLen",
        "StridedArray",
        "StridedMatrix",
        "StridedVecOrMat",
        "StridedVector",
        "String",
        "StringIndexError",
        "SubArray",
        "SubString",
        "SubstitutionString",
        "Symbol",
        "SystemError",
        "Task",
        "TaskFailedException",
        "Text",
        "TextDisplay",
        "Timer",
        "Tuple",
        "Type",
        "TypeError",
        "TypeVar",
        "UInt",
        "UInt128",
        "UInt16",
        "UInt32",
        "UInt64",
        "UInt8",
        "UndefInitializer",
        "UndefKeywordError",
        "UndefRefError",
        "UndefVarError",
        "Union",
        "UnionAll",
        "UnitRange",
        "Unsigned",
        "Val",
        "Vararg",
        "VecElement",
        "VecOrMat",
        "Vector",
        "VersionNumber",
        "WeakKeyDict",
        "WeakRef"
      ]
    }, o2 = {
      keywords: s2,
      illegal: /<\//
    }, l2 = {
      className: "number",
      // supported numeric literals:
      //  * binary literal (e.g. 0x10)
      //  * octal literal (e.g. 0o76543210)
      //  * hexadecimal literal (e.g. 0xfedcba876543210)
      //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)
      //  * decimal literal (e.g. 9876543210, 100_000_000)
      //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)
      begin: /(\b0x[\d_]*(\.[\d_]*)?|0x\.\d[\d_]*)p[-+]?\d+|\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\b\d[\d_]*(\.[\d_]*)?|\.\d[\d_]*)([eEfF][-+]?\d+)?/,
      relevance: 0
    }, u2 = {
      className: "string",
      begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
    }, _ = {
      className: "subst",
      begin: /\$\(/,
      end: /\)/,
      keywords: s2
    }, d2 = {
      className: "variable",
      begin: "\\$" + n
    }, f2 = {
      className: "string",
      contains: [
        e2.BACKSLASH_ESCAPE,
        _,
        d2
      ],
      variants: [
        {
          begin: /\w*"""/,
          end: /"""\w*/,
          relevance: 10
        },
        {
          begin: /\w*"/,
          end: /"\w*/
        }
      ]
    }, b = {
      className: "string",
      contains: [
        e2.BACKSLASH_ESCAPE,
        _,
        d2
      ],
      begin: "`",
      end: "`"
    }, c2 = {
      className: "meta",
      begin: "@" + n
    }, E2 = {
      className: "comment",
      variants: [
        {
          begin: "#=",
          end: "=#",
          relevance: 10
        },
        {
          begin: "#",
          end: "$"
        }
      ]
    };
    return o2.name = "Julia", o2.contains = [
      l2,
      u2,
      f2,
      b,
      c2,
      E2,
      e2.HASH_COMMENT_MODE,
      {
        className: "keyword",
        begin: "\\b(((abstract|primitive)\\s+)type|(mutable\\s+)?struct)\\b"
      },
      { begin: /<:/ }
      // relevance booster
    ], _.contains = o2.contains, o2;
  }
  return ro = t2, ro;
}
var ao, _d;
function tC() {
  if (_d)
    return ao;
  _d = 1;
  function t2(e2) {
    return {
      name: "Julia REPL",
      contains: [
        {
          className: "meta.prompt",
          begin: /^julia>/,
          relevance: 10,
          starts: {
            // end the highlighting if we are on a new line and the line does not have at
            // least six spaces in the beginning
            end: /^(?![ ]{6})/,
            subLanguage: "julia"
          }
        }
      ],
      // jldoctest Markdown blocks are used in the Julia manual and package docs indicate
      // code snippets that should be verified when the documentation is built. They can be
      // either REPL-like or script-like, but are usually REPL-like and therefore we apply
      // julia-repl highlighting to them. More information can be found in Documenter's
      // manual: https://juliadocs.github.io/Documenter.jl/latest/man/doctests.html
      aliases: ["jldoctest"]
    };
  }
  return ao = t2, ao;
}
var io, dd;
function nC() {
  if (dd)
    return io;
  dd = 1;
  var t2 = "[0-9](_*[0-9])*", e2 = `\\.(${t2})`, n = "[0-9a-fA-F](_*[0-9a-fA-F])*", i2 = {
    className: "number",
    variants: [
      // DecimalFloatingPointLiteral
      // including ExponentPart
      { begin: `(\\b(${t2})((${e2})|\\.)?|(${e2}))[eE][+-]?(${t2})[fFdD]?\\b` },
      // excluding ExponentPart
      { begin: `\\b(${t2})((${e2})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
      { begin: `(${e2})[fFdD]?\\b` },
      { begin: `\\b(${t2})[fFdD]\\b` },
      // HexadecimalFloatingPointLiteral
      { begin: `\\b0[xX]((${n})\\.?|(${n})?\\.(${n}))[pP][+-]?(${t2})[fFdD]?\\b` },
      // DecimalIntegerLiteral
      { begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b" },
      // HexIntegerLiteral
      { begin: `\\b0[xX](${n})[lL]?\\b` },
      // OctalIntegerLiteral
      { begin: "\\b0(_*[0-7])*[lL]?\\b" },
      // BinaryIntegerLiteral
      { begin: "\\b0[bB][01](_*[01])*[lL]?\\b" }
    ],
    relevance: 0
  };
  function r2(a2) {
    const s2 = {
      keyword: "abstract as val var vararg get set class object open private protected public noinline crossinline dynamic final enum if else do while for when throw try catch finally import package is in fun override companion reified inline lateinit init interface annotation data sealed internal infix operator out by constructor super tailrec where const inner suspend typealias external expect actual",
      built_in: "Byte Short Char Int Long Boolean Float Double Void Unit Nothing",
      literal: "true false null"
    }, o2 = {
      className: "keyword",
      begin: /\b(break|continue|return|this)\b/,
      starts: { contains: [
        {
          className: "symbol",
          begin: /@\w+/
        }
      ] }
    }, l2 = {
      className: "symbol",
      begin: a2.UNDERSCORE_IDENT_RE + "@"
    }, u2 = {
      className: "subst",
      begin: /\$\{/,
      end: /\}/,
      contains: [a2.C_NUMBER_MODE]
    }, _ = {
      className: "variable",
      begin: "\\$" + a2.UNDERSCORE_IDENT_RE
    }, d2 = {
      className: "string",
      variants: [
        {
          begin: '"""',
          end: '"""(?=[^"])',
          contains: [
            _,
            u2
          ]
        },
        // Can't use built-in modes easily, as we want to use STRING in the meta
        // context as 'meta-string' and there's no syntax to remove explicitly set
        // classNames in built-in modes.
        {
          begin: "'",
          end: "'",
          illegal: /\n/,
          contains: [a2.BACKSLASH_ESCAPE]
        },
        {
          begin: '"',
          end: '"',
          illegal: /\n/,
          contains: [
            a2.BACKSLASH_ESCAPE,
            _,
            u2
          ]
        }
      ]
    };
    u2.contains.push(d2);
    const f2 = {
      className: "meta",
      begin: "@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*" + a2.UNDERSCORE_IDENT_RE + ")?"
    }, b = {
      className: "meta",
      begin: "@" + a2.UNDERSCORE_IDENT_RE,
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          contains: [
            a2.inherit(d2, { className: "string" }),
            "self"
          ]
        }
      ]
    }, c2 = i2, E2 = a2.COMMENT(
      "/\\*",
      "\\*/",
      { contains: [a2.C_BLOCK_COMMENT_MODE] }
    ), g2 = { variants: [
      {
        className: "type",
        begin: a2.UNDERSCORE_IDENT_RE
      },
      {
        begin: /\(/,
        end: /\)/,
        contains: []
        // defined later
      }
    ] }, S = g2;
    return S.variants[1].contains = [g2], g2.variants[1].contains = [S], {
      name: "Kotlin",
      aliases: [
        "kt",
        "kts"
      ],
      keywords: s2,
      contains: [
        a2.COMMENT(
          "/\\*\\*",
          "\\*/",
          {
            relevance: 0,
            contains: [
              {
                className: "doctag",
                begin: "@[A-Za-z]+"
              }
            ]
          }
        ),
        a2.C_LINE_COMMENT_MODE,
        E2,
        o2,
        l2,
        f2,
        b,
        {
          className: "function",
          beginKeywords: "fun",
          end: "[(]|$",
          returnBegin: true,
          excludeEnd: true,
          keywords: s2,
          relevance: 5,
          contains: [
            {
              begin: a2.UNDERSCORE_IDENT_RE + "\\s*\\(",
              returnBegin: true,
              relevance: 0,
              contains: [a2.UNDERSCORE_TITLE_MODE]
            },
            {
              className: "type",
              begin: /</,
              end: />/,
              keywords: "reified",
              relevance: 0
            },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              endsParent: true,
              keywords: s2,
              relevance: 0,
              contains: [
                {
                  begin: /:/,
                  end: /[=,\/]/,
                  endsWithParent: true,
                  contains: [
                    g2,
                    a2.C_LINE_COMMENT_MODE,
                    E2
                  ],
                  relevance: 0
                },
                a2.C_LINE_COMMENT_MODE,
                E2,
                f2,
                b,
                d2,
                a2.C_NUMBER_MODE
              ]
            },
            E2
          ]
        },
        {
          begin: [
            /class|interface|trait/,
            /\s+/,
            a2.UNDERSCORE_IDENT_RE
          ],
          beginScope: {
            3: "title.class"
          },
          keywords: "class interface trait",
          end: /[:\{(]|$/,
          excludeEnd: true,
          illegal: "extends implements",
          contains: [
            { beginKeywords: "public protected internal private constructor" },
            a2.UNDERSCORE_TITLE_MODE,
            {
              className: "type",
              begin: /</,
              end: />/,
              excludeBegin: true,
              excludeEnd: true,
              relevance: 0
            },
            {
              className: "type",
              begin: /[,:]\s*/,
              end: /[<\(,){\s]|$/,
              excludeBegin: true,
              returnEnd: true
            },
            f2,
            b
          ]
        },
        d2,
        {
          className: "meta",
          begin: "^#!/usr/bin/env",
          end: "$",
          illegal: `
`
        },
        c2
      ]
    };
  }
  return io = r2, io;
}
var oo, pd;
function rC() {
  if (pd)
    return oo;
  pd = 1;
  function t2(e2) {
    const n = "[a-zA-Z_][\\w.]*", i2 = "<\\?(lasso(script)?|=)", r2 = "\\]|\\?>", a2 = {
      $pattern: n + "|&[lg]t;",
      literal: "true false none minimal full all void and or not bw nbw ew new cn ncn lt lte gt gte eq neq rx nrx ft",
      built_in: "array date decimal duration integer map pair string tag xml null boolean bytes keyword list locale queue set stack staticarray local var variable global data self inherited currentcapture givenblock",
      keyword: "cache database_names database_schemanames database_tablenames define_tag define_type email_batch encode_set html_comment handle handle_error header if inline iterate ljax_target link link_currentaction link_currentgroup link_currentrecord link_detail link_firstgroup link_firstrecord link_lastgroup link_lastrecord link_nextgroup link_nextrecord link_prevgroup link_prevrecord log loop namespace_using output_none portal private protect records referer referrer repeating resultset rows search_args search_arguments select sort_args sort_arguments thread_atomic value_list while abort case else fail_if fail_ifnot fail if_empty if_false if_null if_true loop_abort loop_continue loop_count params params_up return return_value run_children soap_definetag soap_lastrequest soap_lastresponse tag_name ascending average by define descending do equals frozen group handle_failure import in into join let match max min on order parent protected provide public require returnhome skip split_thread sum take thread to trait type where with yield yieldhome"
    }, s2 = e2.COMMENT(
      "<!--",
      "-->",
      { relevance: 0 }
    ), o2 = {
      className: "meta",
      begin: "\\[noprocess\\]",
      starts: {
        end: "\\[/noprocess\\]",
        returnEnd: true,
        contains: [s2]
      }
    }, l2 = {
      className: "meta",
      begin: "\\[/noprocess|" + i2
    }, u2 = {
      className: "symbol",
      begin: "'" + n + "'"
    }, _ = [
      e2.C_LINE_COMMENT_MODE,
      e2.C_BLOCK_COMMENT_MODE,
      e2.inherit(e2.C_NUMBER_MODE, { begin: e2.C_NUMBER_RE + "|(-?infinity|NaN)\\b" }),
      e2.inherit(e2.APOS_STRING_MODE, { illegal: null }),
      e2.inherit(e2.QUOTE_STRING_MODE, { illegal: null }),
      {
        className: "string",
        begin: "`",
        end: "`"
      },
      {
        // variables
        variants: [
          { begin: "[#$]" + n },
          {
            begin: "#",
            end: "\\d+",
            illegal: "\\W"
          }
        ]
      },
      {
        className: "type",
        begin: "::\\s*",
        end: n,
        illegal: "\\W"
      },
      {
        className: "params",
        variants: [
          {
            begin: "-(?!infinity)" + n,
            relevance: 0
          },
          { begin: "(\\.\\.\\.)" }
        ]
      },
      {
        begin: /(->|\.)\s*/,
        relevance: 0,
        contains: [u2]
      },
      {
        className: "class",
        beginKeywords: "define",
        returnEnd: true,
        end: "\\(|=>",
        contains: [e2.inherit(e2.TITLE_MODE, { begin: n + "(=(?!>))?|[-+*/%](?!>)" })]
      }
    ];
    return {
      name: "Lasso",
      aliases: [
        "ls",
        "lassoscript"
      ],
      case_insensitive: true,
      keywords: a2,
      contains: [
        {
          className: "meta",
          begin: r2,
          relevance: 0,
          starts: {
            // markup
            end: "\\[|" + i2,
            returnEnd: true,
            relevance: 0,
            contains: [s2]
          }
        },
        o2,
        l2,
        {
          className: "meta",
          begin: "\\[no_square_brackets",
          starts: {
            end: "\\[/no_square_brackets\\]",
            // not implemented in the language
            keywords: a2,
            contains: [
              {
                className: "meta",
                begin: r2,
                relevance: 0,
                starts: {
                  end: "\\[noprocess\\]|" + i2,
                  returnEnd: true,
                  contains: [s2]
                }
              },
              o2,
              l2
            ].concat(_)
          }
        },
        {
          className: "meta",
          begin: "\\[",
          relevance: 0
        },
        {
          className: "meta",
          begin: "^#!",
          end: "lasso9$",
          relevance: 10
        }
      ].concat(_)
    };
  }
  return oo = t2, oo;
}
var so, md;
function aC() {
  if (md)
    return so;
  md = 1;
  function t2(e2) {
    const i2 = e2.regex.either(...[
      "(?:NeedsTeXFormat|RequirePackage|GetIdInfo)",
      "Provides(?:Expl)?(?:Package|Class|File)",
      "(?:DeclareOption|ProcessOptions)",
      "(?:documentclass|usepackage|input|include)",
      "makeat(?:letter|other)",
      "ExplSyntax(?:On|Off)",
      "(?:new|renew|provide)?command",
      "(?:re)newenvironment",
      "(?:New|Renew|Provide|Declare)(?:Expandable)?DocumentCommand",
      "(?:New|Renew|Provide|Declare)DocumentEnvironment",
      "(?:(?:e|g|x)?def|let)",
      "(?:begin|end)",
      "(?:part|chapter|(?:sub){0,2}section|(?:sub)?paragraph)",
      "caption",
      "(?:label|(?:eq|page|name)?ref|(?:paren|foot|super)?cite)",
      "(?:alpha|beta|[Gg]amma|[Dd]elta|(?:var)?epsilon|zeta|eta|[Tt]heta|vartheta)",
      "(?:iota|(?:var)?kappa|[Ll]ambda|mu|nu|[Xx]i|[Pp]i|varpi|(?:var)rho)",
      "(?:[Ss]igma|varsigma|tau|[Uu]psilon|[Pp]hi|varphi|chi|[Pp]si|[Oo]mega)",
      "(?:frac|sum|prod|lim|infty|times|sqrt|leq|geq|left|right|middle|[bB]igg?)",
      "(?:[lr]angle|q?quad|[lcvdi]?dots|d?dot|hat|tilde|bar)"
    ].map((x) => x + "(?![a-zA-Z@:_])")), r2 = new RegExp([
      // A function \module_function_name:signature or \__module_function_name:signature,
      // where both module and function_name need at least two characters and
      // function_name may contain single underscores.
      "(?:__)?[a-zA-Z]{2,}_[a-zA-Z](?:_?[a-zA-Z])+:[a-zA-Z]*",
      // A variable \scope_module_and_name_type or \scope__module_ane_name_type,
      // where scope is one of l, g or c, type needs at least two characters
      // and module_and_name may contain single underscores.
      "[lgc]__?[a-zA-Z](?:_?[a-zA-Z])*_[a-zA-Z]{2,}",
      // A quark \q_the_name or \q__the_name or
      // scan mark \s_the_name or \s__vthe_name,
      // where variable_name needs at least two characters and
      // may contain single underscores.
      "[qs]__?[a-zA-Z](?:_?[a-zA-Z])+",
      // Other LaTeX3 macro names that are not covered by the three rules above.
      "use(?:_i)?:[a-zA-Z]*",
      "(?:else|fi|or):",
      "(?:if|cs|exp):w",
      "(?:hbox|vbox):n",
      "::[a-zA-Z]_unbraced",
      "::[a-zA-Z:]"
    ].map((x) => x + "(?![a-zA-Z:_])").join("|")), a2 = [
      { begin: /[a-zA-Z@]+/ },
      // control word
      { begin: /[^a-zA-Z@]?/ }
      // control symbol
    ], s2 = [
      { begin: /\^{6}[0-9a-f]{6}/ },
      { begin: /\^{5}[0-9a-f]{5}/ },
      { begin: /\^{4}[0-9a-f]{4}/ },
      { begin: /\^{3}[0-9a-f]{3}/ },
      { begin: /\^{2}[0-9a-f]{2}/ },
      { begin: /\^{2}[\u0000-\u007f]/ }
    ], o2 = {
      className: "keyword",
      begin: /\\/,
      relevance: 0,
      contains: [
        {
          endsParent: true,
          begin: i2
        },
        {
          endsParent: true,
          begin: r2
        },
        {
          endsParent: true,
          variants: s2
        },
        {
          endsParent: true,
          relevance: 0,
          variants: a2
        }
      ]
    }, l2 = {
      className: "params",
      relevance: 0,
      begin: /#+\d?/
    }, u2 = {
      // relevance: 1
      variants: s2
    }, _ = {
      className: "built_in",
      relevance: 0,
      begin: /[$&^_]/
    }, d2 = {
      className: "meta",
      begin: /% ?!(T[eE]X|tex|BIB|bib)/,
      end: "$",
      relevance: 10
    }, f2 = e2.COMMENT(
      "%",
      "$",
      { relevance: 0 }
    ), b = [
      o2,
      l2,
      u2,
      _,
      d2,
      f2
    ], c2 = {
      begin: /\{/,
      end: /\}/,
      relevance: 0,
      contains: [
        "self",
        ...b
      ]
    }, E2 = e2.inherit(
      c2,
      {
        relevance: 0,
        endsParent: true,
        contains: [
          c2,
          ...b
        ]
      }
    ), g2 = {
      begin: /\[/,
      end: /\]/,
      endsParent: true,
      relevance: 0,
      contains: [
        c2,
        ...b
      ]
    }, S = {
      begin: /\s+/,
      relevance: 0
    }, p2 = [E2], m2 = [g2], R2 = function(x, M) {
      return {
        contains: [S],
        starts: {
          relevance: 0,
          contains: x,
          starts: M
        }
      };
    }, T = function(x, M) {
      return {
        begin: "\\\\" + x + "(?![a-zA-Z@:_])",
        keywords: {
          $pattern: /\\[a-zA-Z]+/,
          keyword: "\\" + x
        },
        relevance: 0,
        contains: [S],
        starts: M
      };
    }, h2 = function(x, M) {
      return e2.inherit(
        {
          begin: "\\\\begin(?=[ 	]*(\\r?\\n[ 	]*)?\\{" + x + "\\})",
          keywords: {
            $pattern: /\\[a-zA-Z]+/,
            keyword: "\\begin"
          },
          relevance: 0
        },
        R2(p2, M)
      );
    }, C2 = (x = "string") => e2.END_SAME_AS_BEGIN({
      className: x,
      begin: /(.|\r?\n)/,
      end: /(.|\r?\n)/,
      excludeBegin: true,
      excludeEnd: true,
      endsParent: true
    }), A2 = function(x) {
      return {
        className: "string",
        end: "(?=\\\\end\\{" + x + "\\})"
      };
    }, I2 = (x = "string") => ({
      relevance: 0,
      begin: /\{/,
      starts: {
        endsParent: true,
        contains: [
          {
            className: x,
            end: /(?=\})/,
            endsParent: true,
            contains: [
              {
                begin: /\{/,
                end: /\}/,
                relevance: 0,
                contains: ["self"]
              }
            ]
          }
        ]
      }
    }), v2 = [
      ...[
        "verb",
        "lstinline"
      ].map((x) => T(x, { contains: [C2()] })),
      T("mint", R2(p2, { contains: [C2()] })),
      T("mintinline", R2(p2, { contains: [
        I2(),
        C2()
      ] })),
      T("url", { contains: [
        I2("link"),
        I2("link")
      ] }),
      T("hyperref", { contains: [I2("link")] }),
      T("href", R2(m2, { contains: [I2("link")] })),
      ...[].concat(...[
        "",
        "\\*"
      ].map((x) => [
        h2("verbatim" + x, A2("verbatim" + x)),
        h2("filecontents" + x, R2(p2, A2("filecontents" + x))),
        ...[
          "",
          "B",
          "L"
        ].map(
          (M) => h2(M + "Verbatim" + x, R2(m2, A2(M + "Verbatim" + x)))
        )
      ])),
      h2("minted", R2(m2, R2(p2, A2("minted"))))
    ];
    return {
      name: "LaTeX",
      aliases: ["tex"],
      contains: [
        ...v2,
        ...b
      ]
    };
  }
  return so = t2, so;
}
var lo, Ed;
function iC() {
  if (Ed)
    return lo;
  Ed = 1;
  function t2(e2) {
    return {
      name: "LDIF",
      contains: [
        {
          className: "attribute",
          match: "^dn(?=:)",
          relevance: 10
        },
        {
          className: "attribute",
          match: "^\\w+(?=:)"
        },
        {
          className: "literal",
          match: "^-"
        },
        e2.HASH_COMMENT_MODE
      ]
    };
  }
  return lo = t2, lo;
}
var co, gd;
function oC() {
  if (gd)
    return co;
  gd = 1;
  function t2(e2) {
    const n = /([A-Za-z_][A-Za-z_0-9]*)?/, r2 = {
      scope: "params",
      begin: /\(/,
      end: /\)(?=\:?)/,
      endsParent: true,
      relevance: 7,
      contains: [
        {
          scope: "string",
          begin: '"',
          end: '"'
        },
        {
          scope: "keyword",
          match: [
            "true",
            "false",
            "in"
          ].join("|")
        },
        {
          scope: "variable",
          match: /[A-Za-z_][A-Za-z_0-9]*/
        },
        {
          scope: "operator",
          match: /\+|\-|\*|\/|\%|\=\=|\=|\!|\>|\<|\&\&|\|\|/
        }
      ]
    }, a2 = {
      match: [
        n,
        /(?=\()/
      ],
      scope: {
        1: "keyword"
      },
      contains: [r2]
    };
    return r2.contains.unshift(a2), {
      name: "Leaf",
      contains: [
        // #ident():
        {
          match: [
            /#+/,
            n,
            /(?=\()/
          ],
          scope: {
            1: "punctuation",
            2: "keyword"
          },
          // will start up after the ending `)` match from line ~44
          // just to grab the trailing `:` if we can match it
          starts: {
            contains: [
              {
                match: /\:/,
                scope: "punctuation"
              }
            ]
          },
          contains: [
            r2
          ]
        },
        // #ident or #ident:
        {
          match: [
            /#+/,
            n,
            /:?/
          ],
          scope: {
            1: "punctuation",
            2: "keyword",
            3: "punctuation"
          }
        }
      ]
    };
  }
  return co = t2, co;
}
var uo, fd;
function sC() {
  if (fd)
    return uo;
  fd = 1;
  const t2 = (_) => ({
    IMPORTANT: {
      scope: "meta",
      begin: "!important"
    },
    BLOCK_COMMENT: _.C_BLOCK_COMMENT_MODE,
    HEXCOLOR: {
      scope: "number",
      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
    },
    FUNCTION_DISPATCH: {
      className: "built_in",
      begin: /[\w-]+(?=\()/
    },
    ATTRIBUTE_SELECTOR_MODE: {
      scope: "selector-attr",
      begin: /\[/,
      end: /\]/,
      illegal: "$",
      contains: [
        _.APOS_STRING_MODE,
        _.QUOTE_STRING_MODE
      ]
    },
    CSS_NUMBER_MODE: {
      scope: "number",
      begin: _.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
      relevance: 0
    },
    CSS_VARIABLE: {
      className: "attr",
      begin: /--[A-Za-z_][A-Za-z0-9_-]*/
    }
  }), e2 = [
    "a",
    "abbr",
    "address",
    "article",
    "aside",
    "audio",
    "b",
    "blockquote",
    "body",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "dd",
    "del",
    "details",
    "dfn",
    "div",
    "dl",
    "dt",
    "em",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "main",
    "mark",
    "menu",
    "nav",
    "object",
    "ol",
    "optgroup",
    "option",
    "p",
    "picture",
    "q",
    "quote",
    "samp",
    "section",
    "select",
    "source",
    "span",
    "strong",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "ul",
    "var",
    "video"
  ], n = [
    "defs",
    "g",
    "marker",
    "mask",
    "pattern",
    "svg",
    "switch",
    "symbol",
    "feBlend",
    "feColorMatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feFlood",
    "feGaussianBlur",
    "feImage",
    "feMerge",
    "feMorphology",
    "feOffset",
    "feSpecularLighting",
    "feTile",
    "feTurbulence",
    "linearGradient",
    "radialGradient",
    "stop",
    "circle",
    "ellipse",
    "image",
    "line",
    "path",
    "polygon",
    "polyline",
    "rect",
    "text",
    "use",
    "textPath",
    "tspan",
    "foreignObject",
    "clipPath"
  ], i2 = [
    ...e2,
    ...n
  ], r2 = [
    "any-hover",
    "any-pointer",
    "aspect-ratio",
    "color",
    "color-gamut",
    "color-index",
    "device-aspect-ratio",
    "device-height",
    "device-width",
    "display-mode",
    "forced-colors",
    "grid",
    "height",
    "hover",
    "inverted-colors",
    "monochrome",
    "orientation",
    "overflow-block",
    "overflow-inline",
    "pointer",
    "prefers-color-scheme",
    "prefers-contrast",
    "prefers-reduced-motion",
    "prefers-reduced-transparency",
    "resolution",
    "scan",
    "scripting",
    "update",
    "width",
    // TODO: find a better solution?
    "min-width",
    "max-width",
    "min-height",
    "max-height"
  ].sort().reverse(), a2 = [
    "active",
    "any-link",
    "blank",
    "checked",
    "current",
    "default",
    "defined",
    "dir",
    // dir()
    "disabled",
    "drop",
    "empty",
    "enabled",
    "first",
    "first-child",
    "first-of-type",
    "fullscreen",
    "future",
    "focus",
    "focus-visible",
    "focus-within",
    "has",
    // has()
    "host",
    // host or host()
    "host-context",
    // host-context()
    "hover",
    "indeterminate",
    "in-range",
    "invalid",
    "is",
    // is()
    "lang",
    // lang()
    "last-child",
    "last-of-type",
    "left",
    "link",
    "local-link",
    "not",
    // not()
    "nth-child",
    // nth-child()
    "nth-col",
    // nth-col()
    "nth-last-child",
    // nth-last-child()
    "nth-last-col",
    // nth-last-col()
    "nth-last-of-type",
    //nth-last-of-type()
    "nth-of-type",
    //nth-of-type()
    "only-child",
    "only-of-type",
    "optional",
    "out-of-range",
    "past",
    "placeholder-shown",
    "read-only",
    "read-write",
    "required",
    "right",
    "root",
    "scope",
    "target",
    "target-within",
    "user-invalid",
    "valid",
    "visited",
    "where"
    // where()
  ].sort().reverse(), s2 = [
    "after",
    "backdrop",
    "before",
    "cue",
    "cue-region",
    "first-letter",
    "first-line",
    "grammar-error",
    "marker",
    "part",
    "placeholder",
    "selection",
    "slotted",
    "spelling-error"
  ].sort().reverse(), o2 = [
    "accent-color",
    "align-content",
    "align-items",
    "align-self",
    "alignment-baseline",
    "all",
    "anchor-name",
    "animation",
    "animation-composition",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-range",
    "animation-range-end",
    "animation-range-start",
    "animation-timeline",
    "animation-timing-function",
    "appearance",
    "aspect-ratio",
    "backdrop-filter",
    "backface-visibility",
    "background",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-position-x",
    "background-position-y",
    "background-repeat",
    "background-size",
    "baseline-shift",
    "block-size",
    "border",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-collapse",
    "border-color",
    "border-end-end-radius",
    "border-end-start-radius",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-start-end-radius",
    "border-start-start-radius",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "bottom",
    "box-align",
    "box-decoration-break",
    "box-direction",
    "box-flex",
    "box-flex-group",
    "box-lines",
    "box-ordinal-group",
    "box-orient",
    "box-pack",
    "box-shadow",
    "box-sizing",
    "break-after",
    "break-before",
    "break-inside",
    "caption-side",
    "caret-color",
    "clear",
    "clip",
    "clip-path",
    "clip-rule",
    "color",
    "color-interpolation",
    "color-interpolation-filters",
    "color-profile",
    "color-rendering",
    "color-scheme",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columns",
    "contain",
    "contain-intrinsic-block-size",
    "contain-intrinsic-height",
    "contain-intrinsic-inline-size",
    "contain-intrinsic-size",
    "contain-intrinsic-width",
    "container",
    "container-name",
    "container-type",
    "content",
    "content-visibility",
    "counter-increment",
    "counter-reset",
    "counter-set",
    "cue",
    "cue-after",
    "cue-before",
    "cursor",
    "cx",
    "cy",
    "direction",
    "display",
    "dominant-baseline",
    "empty-cells",
    "enable-background",
    "field-sizing",
    "fill",
    "fill-opacity",
    "fill-rule",
    "filter",
    "flex",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-shrink",
    "flex-wrap",
    "float",
    "flood-color",
    "flood-opacity",
    "flow",
    "font",
    "font-display",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-optical-sizing",
    "font-palette",
    "font-size",
    "font-size-adjust",
    "font-smooth",
    "font-smoothing",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-synthesis-position",
    "font-synthesis-small-caps",
    "font-synthesis-style",
    "font-synthesis-weight",
    "font-variant",
    "font-variant-alternates",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-emoji",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-variation-settings",
    "font-weight",
    "forced-color-adjust",
    "gap",
    "glyph-orientation-horizontal",
    "glyph-orientation-vertical",
    "grid",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-start",
    "grid-gap",
    "grid-row",
    "grid-row-end",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "hanging-punctuation",
    "height",
    "hyphenate-character",
    "hyphenate-limit-chars",
    "hyphens",
    "icon",
    "image-orientation",
    "image-rendering",
    "image-resolution",
    "ime-mode",
    "initial-letter",
    "initial-letter-align",
    "inline-size",
    "inset",
    "inset-area",
    "inset-block",
    "inset-block-end",
    "inset-block-start",
    "inset-inline",
    "inset-inline-end",
    "inset-inline-start",
    "isolation",
    "justify-content",
    "justify-items",
    "justify-self",
    "kerning",
    "left",
    "letter-spacing",
    "lighting-color",
    "line-break",
    "line-height",
    "line-height-step",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "margin",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "margin-trim",
    "marker",
    "marker-end",
    "marker-mid",
    "marker-start",
    "marks",
    "mask",
    "mask-border",
    "mask-border-mode",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-border-slice",
    "mask-border-source",
    "mask-border-width",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "masonry-auto-flow",
    "math-depth",
    "math-shift",
    "math-style",
    "max-block-size",
    "max-height",
    "max-inline-size",
    "max-width",
    "min-block-size",
    "min-height",
    "min-inline-size",
    "min-width",
    "mix-blend-mode",
    "nav-down",
    "nav-index",
    "nav-left",
    "nav-right",
    "nav-up",
    "none",
    "normal",
    "object-fit",
    "object-position",
    "offset",
    "offset-anchor",
    "offset-distance",
    "offset-path",
    "offset-position",
    "offset-rotate",
    "opacity",
    "order",
    "orphans",
    "outline",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "overflow",
    "overflow-anchor",
    "overflow-block",
    "overflow-clip-margin",
    "overflow-inline",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "overlay",
    "overscroll-behavior",
    "overscroll-behavior-block",
    "overscroll-behavior-inline",
    "overscroll-behavior-x",
    "overscroll-behavior-y",
    "padding",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "page",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "paint-order",
    "pause",
    "pause-after",
    "pause-before",
    "perspective",
    "perspective-origin",
    "place-content",
    "place-items",
    "place-self",
    "pointer-events",
    "position",
    "position-anchor",
    "position-visibility",
    "print-color-adjust",
    "quotes",
    "r",
    "resize",
    "rest",
    "rest-after",
    "rest-before",
    "right",
    "rotate",
    "row-gap",
    "ruby-align",
    "ruby-position",
    "scale",
    "scroll-behavior",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-stop",
    "scroll-snap-type",
    "scroll-timeline",
    "scroll-timeline-axis",
    "scroll-timeline-name",
    "scrollbar-color",
    "scrollbar-gutter",
    "scrollbar-width",
    "shape-image-threshold",
    "shape-margin",
    "shape-outside",
    "shape-rendering",
    "speak",
    "speak-as",
    "src",
    // @font-face
    "stop-color",
    "stop-opacity",
    "stroke",
    "stroke-dasharray",
    "stroke-dashoffset",
    "stroke-linecap",
    "stroke-linejoin",
    "stroke-miterlimit",
    "stroke-opacity",
    "stroke-width",
    "tab-size",
    "table-layout",
    "text-align",
    "text-align-all",
    "text-align-last",
    "text-anchor",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-line",
    "text-decoration-skip",
    "text-decoration-skip-ink",
    "text-decoration-style",
    "text-decoration-thickness",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-style",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-size-adjust",
    "text-transform",
    "text-underline-offset",
    "text-underline-position",
    "text-wrap",
    "text-wrap-mode",
    "text-wrap-style",
    "timeline-scope",
    "top",
    "touch-action",
    "transform",
    "transform-box",
    "transform-origin",
    "transform-style",
    "transition",
    "transition-behavior",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "translate",
    "unicode-bidi",
    "user-modify",
    "user-select",
    "vector-effect",
    "vertical-align",
    "view-timeline",
    "view-timeline-axis",
    "view-timeline-inset",
    "view-timeline-name",
    "view-transition-name",
    "visibility",
    "voice-balance",
    "voice-duration",
    "voice-family",
    "voice-pitch",
    "voice-range",
    "voice-rate",
    "voice-stress",
    "voice-volume",
    "white-space",
    "white-space-collapse",
    "widows",
    "width",
    "will-change",
    "word-break",
    "word-spacing",
    "word-wrap",
    "writing-mode",
    "x",
    "y",
    "z-index",
    "zoom"
  ].sort().reverse(), l2 = a2.concat(s2).sort().reverse();
  function u2(_) {
    const d2 = t2(_), f2 = l2, b = "and or not only", c2 = "[\\w-]+", E2 = "(" + c2 + "|@\\{" + c2 + "\\})", g2 = [], S = [], p2 = function(B2) {
      return {
        // Less strings are not multiline (also include '~' for more consistent coloring of "escaped" strings)
        className: "string",
        begin: "~?" + B2 + ".*?" + B2
      };
    }, m2 = function(B2, G2, D) {
      return {
        className: B2,
        begin: G2,
        relevance: D
      };
    }, R2 = {
      $pattern: /[a-z-]+/,
      keyword: b,
      attribute: r2.join(" ")
    }, T = {
      // used only to properly balance nested parens inside mixin call, def. arg list
      begin: "\\(",
      end: "\\)",
      contains: S,
      keywords: R2,
      relevance: 0
    };
    S.push(
      _.C_LINE_COMMENT_MODE,
      _.C_BLOCK_COMMENT_MODE,
      p2("'"),
      p2('"'),
      d2.CSS_NUMBER_MODE,
      // fixme: it does not include dot for numbers like .5em :(
      {
        begin: "(url|data-uri)\\(",
        starts: {
          className: "string",
          end: "[\\)\\n]",
          excludeEnd: true
        }
      },
      d2.HEXCOLOR,
      T,
      m2("variable", "@@?" + c2, 10),
      m2("variable", "@\\{" + c2 + "\\}"),
      m2("built_in", "~?`[^`]*?`"),
      // inline javascript (or whatever host language) *multiline* string
      {
        // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):
        className: "attribute",
        begin: c2 + "\\s*:",
        end: ":",
        returnBegin: true,
        excludeEnd: true
      },
      d2.IMPORTANT,
      { beginKeywords: "and not" },
      d2.FUNCTION_DISPATCH
    );
    const h2 = S.concat({
      begin: /\{/,
      end: /\}/,
      contains: g2
    }), C2 = {
      beginKeywords: "when",
      endsWithParent: true,
      contains: [{ beginKeywords: "and not" }].concat(S)
      // using this form to override VALUE’s 'function' match
    }, A2 = {
      begin: E2 + "\\s*:",
      returnBegin: true,
      end: /[;}]/,
      relevance: 0,
      contains: [
        { begin: /-(webkit|moz|ms|o)-/ },
        d2.CSS_VARIABLE,
        {
          className: "attribute",
          begin: "\\b(" + o2.join("|") + ")\\b",
          end: /(?=:)/,
          starts: {
            endsWithParent: true,
            illegal: "[<=$]",
            relevance: 0,
            contains: S
          }
        }
      ]
    }, I2 = {
      className: "keyword",
      begin: "@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b",
      starts: {
        end: "[;{}]",
        keywords: R2,
        returnEnd: true,
        contains: S,
        relevance: 0
      }
    }, v2 = {
      className: "variable",
      variants: [
        // using more strict pattern for higher relevance to increase chances of Less detection.
        // this is *the only* Less specific statement used in most of the sources, so...
        // (we’ll still often loose to the css-parser unless there's '//' comment,
        // simply because 1 variable just can't beat 99 properties :)
        {
          begin: "@" + c2 + "\\s*:",
          relevance: 15
        },
        { begin: "@" + c2 }
      ],
      starts: {
        end: "[;}]",
        returnEnd: true,
        contains: h2
      }
    }, x = {
      // first parse unambiguous selectors (i.e. those not starting with tag)
      // then fall into the scary lookahead-discriminator variant.
      // this mode also handles mixin definitions and calls
      variants: [
        {
          begin: "[\\.#:&\\[>]",
          end: "[;{}]"
          // mixin calls end with ';'
        },
        {
          begin: E2,
          end: /\{/
        }
      ],
      returnBegin: true,
      returnEnd: true,
      illegal: `[<='$"]`,
      relevance: 0,
      contains: [
        _.C_LINE_COMMENT_MODE,
        _.C_BLOCK_COMMENT_MODE,
        C2,
        m2("keyword", "all\\b"),
        m2("variable", "@\\{" + c2 + "\\}"),
        // otherwise it’s identified as tag
        {
          begin: "\\b(" + i2.join("|") + ")\\b",
          className: "selector-tag"
        },
        d2.CSS_NUMBER_MODE,
        m2("selector-tag", E2, 0),
        m2("selector-id", "#" + E2),
        m2("selector-class", "\\." + E2, 0),
        m2("selector-tag", "&", 0),
        d2.ATTRIBUTE_SELECTOR_MODE,
        {
          className: "selector-pseudo",
          begin: ":(" + a2.join("|") + ")"
        },
        {
          className: "selector-pseudo",
          begin: ":(:)?(" + s2.join("|") + ")"
        },
        {
          begin: /\(/,
          end: /\)/,
          relevance: 0,
          contains: h2
        },
        // argument list of parametric mixins
        { begin: "!important" },
        // eat !important after mixin call or it will be colored as tag
        d2.FUNCTION_DISPATCH
      ]
    }, M = {
      begin: c2 + `:(:)?(${f2.join("|")})`,
      returnBegin: true,
      contains: [x]
    };
    return g2.push(
      _.C_LINE_COMMENT_MODE,
      _.C_BLOCK_COMMENT_MODE,
      I2,
      v2,
      M,
      A2,
      x,
      C2,
      d2.FUNCTION_DISPATCH
    ), {
      name: "Less",
      case_insensitive: true,
      illegal: `[=>'/<($"]`,
      contains: g2
    };
  }
  return uo = u2, uo;
}
var _o, Sd;
function lC() {
  if (Sd)
    return _o;
  Sd = 1;
  function t2(e2) {
    const n = "[a-zA-Z_\\-+\\*\\/<=>&#][a-zA-Z0-9_\\-+*\\/<=>&#!]*", i2 = "\\|[^]*?\\|", r2 = "(-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|-)?\\d+)?", a2 = {
      className: "literal",
      begin: "\\b(t{1}|nil)\\b"
    }, s2 = {
      className: "number",
      variants: [
        {
          begin: r2,
          relevance: 0
        },
        { begin: "#(b|B)[0-1]+(/[0-1]+)?" },
        { begin: "#(o|O)[0-7]+(/[0-7]+)?" },
        { begin: "#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?" },
        {
          begin: "#(c|C)\\(" + r2 + " +" + r2,
          end: "\\)"
        }
      ]
    }, o2 = e2.inherit(e2.QUOTE_STRING_MODE, { illegal: null }), l2 = e2.COMMENT(
      ";",
      "$",
      { relevance: 0 }
    ), u2 = {
      begin: "\\*",
      end: "\\*"
    }, _ = {
      className: "symbol",
      begin: "[:&]" + n
    }, d2 = {
      begin: n,
      relevance: 0
    }, f2 = { begin: i2 }, c2 = {
      contains: [
        s2,
        o2,
        u2,
        _,
        {
          begin: "\\(",
          end: "\\)",
          contains: [
            "self",
            a2,
            o2,
            s2,
            d2
          ]
        },
        d2
      ],
      variants: [
        {
          begin: "['`]\\(",
          end: "\\)"
        },
        {
          begin: "\\(quote ",
          end: "\\)",
          keywords: { name: "quote" }
        },
        { begin: "'" + i2 }
      ]
    }, E2 = { variants: [
      { begin: "'" + n },
      { begin: "#'" + n + "(::" + n + ")*" }
    ] }, g2 = {
      begin: "\\(\\s*",
      end: "\\)"
    }, S = {
      endsWithParent: true,
      relevance: 0
    };
    return g2.contains = [
      {
        className: "name",
        variants: [
          {
            begin: n,
            relevance: 0
          },
          { begin: i2 }
        ]
      },
      S
    ], S.contains = [
      c2,
      E2,
      g2,
      a2,
      s2,
      o2,
      l2,
      u2,
      _,
      f2,
      d2
    ], {
      name: "Lisp",
      illegal: /\S/,
      contains: [
        s2,
        e2.SHEBANG(),
        a2,
        o2,
        l2,
        c2,
        E2,
        g2,
        d2
      ]
    };
  }
  return _o = t2, _o;
}
var po, bd;
function cC() {
  if (bd)
    return po;
  bd = 1;
  function t2(e2) {
    const n = {
      className: "variable",
      variants: [
        { begin: "\\b([gtps][A-Z]{1}[a-zA-Z0-9]*)(\\[.+\\])?(?:\\s*?)" },
        { begin: "\\$_[A-Z]+" }
      ],
      relevance: 0
    }, i2 = [
      e2.C_BLOCK_COMMENT_MODE,
      e2.HASH_COMMENT_MODE,
      e2.COMMENT("--", "$"),
      e2.COMMENT("[^:]//", "$")
    ], r2 = e2.inherit(e2.TITLE_MODE, { variants: [
      { begin: "\\b_*rig[A-Z][A-Za-z0-9_\\-]*" },
      { begin: "\\b_[a-z0-9\\-]+" }
    ] }), a2 = e2.inherit(e2.TITLE_MODE, { begin: "\\b([A-Za-z0-9_\\-]+)\\b" });
    return {
      name: "LiveCode",
      case_insensitive: false,
      keywords: {
        keyword: "$_COOKIE $_FILES $_GET $_GET_BINARY $_GET_RAW $_POST $_POST_BINARY $_POST_RAW $_SESSION $_SERVER codepoint codepoints segment segments codeunit codeunits sentence sentences trueWord trueWords paragraph after byte bytes english the until http forever descending using line real8 with seventh for stdout finally element word words fourth before black ninth sixth characters chars stderr uInt1 uInt1s uInt2 uInt2s stdin string lines relative rel any fifth items from middle mid at else of catch then third it file milliseconds seconds second secs sec int1 int1s int4 int4s internet int2 int2s normal text item last long detailed effective uInt4 uInt4s repeat end repeat URL in try into switch to words https token binfile each tenth as ticks tick system real4 by dateItems without char character ascending eighth whole dateTime numeric short first ftp integer abbreviated abbr abbrev private case while if div mod wrap and or bitAnd bitNot bitOr bitXor among not in a an within contains ends with begins the keys of keys",
        literal: "SIX TEN FORMFEED NINE ZERO NONE SPACE FOUR FALSE COLON CRLF PI COMMA ENDOFFILE EOF EIGHT FIVE QUOTE EMPTY ONE TRUE RETURN CR LINEFEED RIGHT BACKSLASH NULL SEVEN TAB THREE TWO six ten formfeed nine zero none space four false colon crlf pi comma endoffile eof eight five quote empty one true return cr linefeed right backslash null seven tab three two RIVERSION RISTATE FILE_READ_MODE FILE_WRITE_MODE FILE_WRITE_MODE DIR_WRITE_MODE FILE_READ_UMASK FILE_WRITE_UMASK DIR_READ_UMASK DIR_WRITE_UMASK",
        built_in: "put abs acos aliasReference annuity arrayDecode arrayEncode asin atan atan2 average avg avgDev base64Decode base64Encode baseConvert binaryDecode binaryEncode byteOffset byteToNum cachedURL cachedURLs charToNum cipherNames codepointOffset codepointProperty codepointToNum codeunitOffset commandNames compound compress constantNames cos date dateFormat decompress difference directories diskSpace DNSServers exp exp1 exp2 exp10 extents files flushEvents folders format functionNames geometricMean global globals hasMemory harmonicMean hostAddress hostAddressToName hostName hostNameToAddress isNumber ISOToMac itemOffset keys len length libURLErrorData libUrlFormData libURLftpCommand libURLLastHTTPHeaders libURLLastRHHeaders libUrlMultipartFormAddPart libUrlMultipartFormData libURLVersion lineOffset ln ln1 localNames log log2 log10 longFilePath lower macToISO matchChunk matchText matrixMultiply max md5Digest median merge messageAuthenticationCode messageDigest millisec millisecs millisecond milliseconds min monthNames nativeCharToNum normalizeText num number numToByte numToChar numToCodepoint numToNativeChar offset open openfiles openProcesses openProcessIDs openSockets paragraphOffset paramCount param params peerAddress pendingMessages platform popStdDev populationStandardDeviation populationVariance popVariance processID random randomBytes replaceText result revCreateXMLTree revCreateXMLTreeFromFile revCurrentRecord revCurrentRecordIsFirst revCurrentRecordIsLast revDatabaseColumnCount revDatabaseColumnIsNull revDatabaseColumnLengths revDatabaseColumnNames revDatabaseColumnNamed revDatabaseColumnNumbered revDatabaseColumnTypes revDatabaseConnectResult revDatabaseCursors revDatabaseID revDatabaseTableNames revDatabaseType revDataFromQuery revdb_closeCursor revdb_columnbynumber revdb_columncount revdb_columnisnull revdb_columnlengths revdb_columnnames revdb_columntypes revdb_commit revdb_connect revdb_connections revdb_connectionerr revdb_currentrecord revdb_cursorconnection revdb_cursorerr revdb_cursors revdb_dbtype revdb_disconnect revdb_execute revdb_iseof revdb_isbof revdb_movefirst revdb_movelast revdb_movenext revdb_moveprev revdb_query revdb_querylist revdb_recordcount revdb_rollback revdb_tablenames revGetDatabaseDriverPath revNumberOfRecords revOpenDatabase revOpenDatabases revQueryDatabase revQueryDatabaseBlob revQueryResult revQueryIsAtStart revQueryIsAtEnd revUnixFromMacPath revXMLAttribute revXMLAttributes revXMLAttributeValues revXMLChildContents revXMLChildNames revXMLCreateTreeFromFileWithNamespaces revXMLCreateTreeWithNamespaces revXMLDataFromXPathQuery revXMLEvaluateXPath revXMLFirstChild revXMLMatchingNode revXMLNextSibling revXMLNodeContents revXMLNumberOfChildren revXMLParent revXMLPreviousSibling revXMLRootNode revXMLRPC_CreateRequest revXMLRPC_Documents revXMLRPC_Error revXMLRPC_GetHost revXMLRPC_GetMethod revXMLRPC_GetParam revXMLText revXMLRPC_Execute revXMLRPC_GetParamCount revXMLRPC_GetParamNode revXMLRPC_GetParamType revXMLRPC_GetPath revXMLRPC_GetPort revXMLRPC_GetProtocol revXMLRPC_GetRequest revXMLRPC_GetResponse revXMLRPC_GetSocket revXMLTree revXMLTrees revXMLValidateDTD revZipDescribeItem revZipEnumerateItems revZipOpenArchives round sampVariance sec secs seconds sentenceOffset sha1Digest shell shortFilePath sin specialFolderPath sqrt standardDeviation statRound stdDev sum sysError systemVersion tan tempName textDecode textEncode tick ticks time to tokenOffset toLower toUpper transpose truewordOffset trunc uniDecode uniEncode upper URLDecode URLEncode URLStatus uuid value variableNames variance version waitDepth weekdayNames wordOffset xsltApplyStylesheet xsltApplyStylesheetFromFile xsltLoadStylesheet xsltLoadStylesheetFromFile add breakpoint cancel clear local variable file word line folder directory URL close socket process combine constant convert create new alias folder directory decrypt delete variable word line folder directory URL dispatch divide do encrypt filter get include intersect kill libURLDownloadToFile libURLFollowHttpRedirects libURLftpUpload libURLftpUploadFile libURLresetAll libUrlSetAuthCallback libURLSetDriver libURLSetCustomHTTPHeaders libUrlSetExpect100 libURLSetFTPListCommand libURLSetFTPMode libURLSetFTPStopTime libURLSetStatusCallback load extension loadedExtensions multiply socket prepare process post seek rel relative read from process rename replace require resetAll resolve revAddXMLNode revAppendXML revCloseCursor revCloseDatabase revCommitDatabase revCopyFile revCopyFolder revCopyXMLNode revDeleteFolder revDeleteXMLNode revDeleteAllXMLTrees revDeleteXMLTree revExecuteSQL revGoURL revInsertXMLNode revMoveFolder revMoveToFirstRecord revMoveToLastRecord revMoveToNextRecord revMoveToPreviousRecord revMoveToRecord revMoveXMLNode revPutIntoXMLNode revRollBackDatabase revSetDatabaseDriverPath revSetXMLAttribute revXMLRPC_AddParam revXMLRPC_DeleteAllDocuments revXMLAddDTD revXMLRPC_Free revXMLRPC_FreeAll revXMLRPC_DeleteDocument revXMLRPC_DeleteParam revXMLRPC_SetHost revXMLRPC_SetMethod revXMLRPC_SetPort revXMLRPC_SetProtocol revXMLRPC_SetSocket revZipAddItemWithData revZipAddItemWithFile revZipAddUncompressedItemWithData revZipAddUncompressedItemWithFile revZipCancel revZipCloseArchive revZipDeleteItem revZipExtractItemToFile revZipExtractItemToVariable revZipSetProgressCallback revZipRenameItem revZipReplaceItemWithData revZipReplaceItemWithFile revZipOpenArchive send set sort split start stop subtract symmetric union unload vectorDotProduct wait write"
      },
      contains: [
        n,
        {
          className: "keyword",
          begin: "\\bend\\sif\\b"
        },
        {
          className: "function",
          beginKeywords: "function",
          end: "$",
          contains: [
            n,
            a2,
            e2.APOS_STRING_MODE,
            e2.QUOTE_STRING_MODE,
            e2.BINARY_NUMBER_MODE,
            e2.C_NUMBER_MODE,
            r2
          ]
        },
        {
          className: "function",
          begin: "\\bend\\s+",
          end: "$",
          keywords: "end",
          contains: [
            a2,
            r2
          ],
          relevance: 0
        },
        {
          beginKeywords: "command on",
          end: "$",
          contains: [
            n,
            a2,
            e2.APOS_STRING_MODE,
            e2.QUOTE_STRING_MODE,
            e2.BINARY_NUMBER_MODE,
            e2.C_NUMBER_MODE,
            r2
          ]
        },
        {
          className: "meta",
          variants: [
            {
              begin: "<\\?(rev|lc|livecode)",
              relevance: 10
            },
            { begin: "<\\?" },
            { begin: "\\?>" }
          ]
        },
        e2.APOS_STRING_MODE,
        e2.QUOTE_STRING_MODE,
        e2.BINARY_NUMBER_MODE,
        e2.C_NUMBER_MODE,
        r2
      ].concat(i2),
      illegal: ";$|^\\[|^=|&|\\{"
    };
  }
  return po = t2, po;
}
var mo, Td;
function uC() {
  if (Td)
    return mo;
  Td = 1;
  const t2 = [
    "as",
    // for exports
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    // JS handles these with a special rule
    // "get",
    // "set",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends",
    // It's reached stage 3, which is "recommended for implementation":
    "using"
  ], e2 = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
  ], n = [
    // Fundamental objects
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    // numbers and dates
    "Math",
    "Date",
    "Number",
    "BigInt",
    // text
    "String",
    "RegExp",
    // Indexed collections
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    // Keyed collections
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    // Structured data
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    // Control abstraction objects
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    // Reflection
    "Reflect",
    "Proxy",
    // Internationalization
    "Intl",
    // WebAssembly
    "WebAssembly"
  ], i2 = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
  ], r2 = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
  ], a2 = [].concat(
    r2,
    n,
    i2
  );
  function s2(o2) {
    const l2 = [
      "npm",
      "print"
    ], u2 = [
      "yes",
      "no",
      "on",
      "off",
      "it",
      "that",
      "void"
    ], _ = [
      "then",
      "unless",
      "until",
      "loop",
      "of",
      "by",
      "when",
      "and",
      "or",
      "is",
      "isnt",
      "not",
      "it",
      "that",
      "otherwise",
      "from",
      "to",
      "til",
      "fallthrough",
      "case",
      "enum",
      "native",
      "list",
      "map",
      "__hasProp",
      "__extends",
      "__slice",
      "__bind",
      "__indexOf"
    ], d2 = {
      keyword: t2.concat(_),
      literal: e2.concat(u2),
      built_in: a2.concat(l2)
    }, f2 = "[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*", b = o2.inherit(o2.TITLE_MODE, { begin: f2 }), c2 = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: d2
    }, E2 = {
      className: "subst",
      begin: /#[A-Za-z$_]/,
      end: /(?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*/,
      keywords: d2
    }, g2 = [
      o2.BINARY_NUMBER_MODE,
      {
        className: "number",
        begin: "(\\b0[xX][a-fA-F0-9_]+)|(\\b\\d(\\d|_\\d)*(\\.(\\d(\\d|_\\d)*)?)?(_*[eE]([-+]\\d(_\\d|\\d)*)?)?[_a-z]*)",
        relevance: 0,
        starts: {
          end: "(\\s*/)?",
          relevance: 0
        }
        // a number tries to eat the following slash to prevent treating it as a regexp
      },
      {
        className: "string",
        variants: [
          {
            begin: /'''/,
            end: /'''/,
            contains: [o2.BACKSLASH_ESCAPE]
          },
          {
            begin: /'/,
            end: /'/,
            contains: [o2.BACKSLASH_ESCAPE]
          },
          {
            begin: /"""/,
            end: /"""/,
            contains: [
              o2.BACKSLASH_ESCAPE,
              c2,
              E2
            ]
          },
          {
            begin: /"/,
            end: /"/,
            contains: [
              o2.BACKSLASH_ESCAPE,
              c2,
              E2
            ]
          },
          {
            begin: /\\/,
            end: /(\s|$)/,
            excludeEnd: true
          }
        ]
      },
      {
        className: "regexp",
        variants: [
          {
            begin: "//",
            end: "//[gim]*",
            contains: [
              c2,
              o2.HASH_COMMENT_MODE
            ]
          },
          {
            // regex can't start with space to parse x / 2 / 3 as two divisions
            // regex can't start with *, and it supports an "illegal" in the main mode
            begin: /\/(?![ *])(\\.|[^\\\n])*?\/[gim]*(?=\W)/
          }
        ]
      },
      { begin: "@" + f2 },
      {
        begin: "``",
        end: "``",
        excludeBegin: true,
        excludeEnd: true,
        subLanguage: "javascript"
      }
    ];
    c2.contains = g2;
    const S = {
      className: "params",
      begin: "\\(",
      returnBegin: true,
      /* We need another contained nameless mode to not have every nested
      pair of parens to be called "params" */
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          keywords: d2,
          contains: ["self"].concat(g2)
        }
      ]
    }, p2 = { begin: "(#=>|=>|\\|>>|-?->|!->)" }, m2 = {
      variants: [
        { match: [
          /class\s+/,
          f2,
          /\s+extends\s+/,
          f2
        ] },
        { match: [
          /class\s+/,
          f2
        ] }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: d2
    };
    return {
      name: "LiveScript",
      aliases: ["ls"],
      keywords: d2,
      illegal: /\/\*/,
      contains: g2.concat([
        o2.COMMENT("\\/\\*", "\\*\\/"),
        o2.HASH_COMMENT_MODE,
        p2,
        // relevance booster
        {
          className: "function",
          contains: [
            b,
            S
          ],
          returnBegin: true,
          variants: [
            {
              begin: "(" + f2 + "\\s*(?:=|:=)\\s*)?(\\(.*\\)\\s*)?\\B->\\*?",
              end: "->\\*?"
            },
            {
              begin: "(" + f2 + "\\s*(?:=|:=)\\s*)?!?(\\(.*\\)\\s*)?\\B[-~]{1,2}>\\*?",
              end: "[-~]{1,2}>\\*?"
            },
            {
              begin: "(" + f2 + "\\s*(?:=|:=)\\s*)?(\\(.*\\)\\s*)?\\B!?[-~]{1,2}>\\*?",
              end: "!?[-~]{1,2}>\\*?"
            }
          ]
        },
        m2,
        {
          begin: f2 + ":",
          end: ":",
          returnBegin: true,
          returnEnd: true,
          relevance: 0
        }
      ])
    };
  }
  return mo = s2, mo;
}
var Eo, hd;
function _C() {
  if (hd)
    return Eo;
  hd = 1;
  function t2(e2) {
    const n = e2.regex, i2 = /([-a-zA-Z$._][\w$.-]*)/, r2 = {
      className: "type",
      begin: /\bi\d+(?=\s|\b)/
    }, a2 = {
      className: "operator",
      relevance: 0,
      begin: /=/
    }, s2 = {
      className: "punctuation",
      relevance: 0,
      begin: /,/
    }, o2 = {
      className: "number",
      variants: [
        { begin: /[su]?0[xX][KMLHR]?[a-fA-F0-9]+/ },
        { begin: /[-+]?\d+(?:[.]\d+)?(?:[eE][-+]?\d+(?:[.]\d+)?)?/ }
      ],
      relevance: 0
    }, l2 = {
      className: "symbol",
      variants: [
        { begin: /^\s*[a-z]+:/ }
        // labels
      ],
      relevance: 0
    }, u2 = {
      className: "variable",
      variants: [
        { begin: n.concat(/%/, i2) },
        { begin: /%\d+/ },
        { begin: /#\d+/ }
      ]
    }, _ = {
      className: "title",
      variants: [
        { begin: n.concat(/@/, i2) },
        { begin: /@\d+/ },
        { begin: n.concat(/!/, i2) },
        { begin: n.concat(/!\d+/, i2) },
        // https://llvm.org/docs/LangRef.html#namedmetadatastructure
        // obviously a single digit can also be used in this fashion
        { begin: /!\d+/ }
      ]
    };
    return {
      name: "LLVM IR",
      // TODO: split into different categories of keywords
      keywords: {
        keyword: "begin end true false declare define global constant private linker_private internal available_externally linkonce linkonce_odr weak weak_odr appending dllimport dllexport common default hidden protected extern_weak external thread_local zeroinitializer undef null to tail target triple datalayout volatile nuw nsw nnan ninf nsz arcp fast exact inbounds align addrspace section alias module asm sideeffect gc dbg linker_private_weak attributes blockaddress initialexec localdynamic localexec prefix unnamed_addr ccc fastcc coldcc x86_stdcallcc x86_fastcallcc arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device ptx_kernel intel_ocl_bicc msp430_intrcc spir_func spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc cc c signext zeroext inreg sret nounwind noreturn noalias nocapture byval nest readnone readonly inlinehint noinline alwaysinline optsize ssp sspreq noredzone noimplicitfloat naked builtin cold nobuiltin noduplicate nonlazybind optnone returns_twice sanitize_address sanitize_memory sanitize_thread sspstrong uwtable returned type opaque eq ne slt sgt sle sge ult ugt ule uge oeq one olt ogt ole oge ord uno ueq une x acq_rel acquire alignstack atomic catch cleanup filter inteldialect max min monotonic nand personality release seq_cst singlethread umax umin unordered xchg add fadd sub fsub mul fmul udiv sdiv fdiv urem srem frem shl lshr ashr and or xor icmp fcmp phi call trunc zext sext fptrunc fpext uitofp sitofp fptoui fptosi inttoptr ptrtoint bitcast addrspacecast select va_arg ret br switch invoke unwind unreachable indirectbr landingpad resume malloc alloca free load store getelementptr extractelement insertelement shufflevector getresult extractvalue insertvalue atomicrmw cmpxchg fence argmemonly",
        type: "void half bfloat float double fp128 x86_fp80 ppc_fp128 x86_amx x86_mmx ptr label token metadata opaque"
      },
      contains: [
        r2,
        // this matches "empty comments"...
        // ...because it's far more likely this is a statement terminator in
        // another language than an actual comment
        e2.COMMENT(/;\s*$/, null, { relevance: 0 }),
        e2.COMMENT(/;/, /$/),
        {
          className: "string",
          begin: /"/,
          end: /"/,
          contains: [
            {
              className: "char.escape",
              match: /\\\d\d/
            }
          ]
        },
        _,
        s2,
        a2,
        u2,
        l2,
        o2
      ]
    };
  }
  return Eo = t2, Eo;
}
var go, Rd;
function dC() {
  if (Rd)
    return go;
  Rd = 1;
  function t2(e2) {
    const i2 = {
      className: "string",
      begin: '"',
      end: '"',
      contains: [{
        className: "subst",
        begin: /\\[tn"\\]/
      }]
    }, r2 = {
      className: "number",
      relevance: 0,
      begin: e2.C_NUMBER_RE
    }, a2 = {
      className: "literal",
      variants: [
        { begin: "\\b(PI|TWO_PI|PI_BY_TWO|DEG_TO_RAD|RAD_TO_DEG|SQRT2)\\b" },
        { begin: "\\b(XP_ERROR_(EXPERIENCES_DISABLED|EXPERIENCE_(DISABLED|SUSPENDED)|INVALID_(EXPERIENCE|PARAMETERS)|KEY_NOT_FOUND|MATURITY_EXCEEDED|NONE|NOT_(FOUND|PERMITTED(_LAND)?)|NO_EXPERIENCE|QUOTA_EXCEEDED|RETRY_UPDATE|STORAGE_EXCEPTION|STORE_DISABLED|THROTTLED|UNKNOWN_ERROR)|JSON_APPEND|STATUS_(PHYSICS|ROTATE_[XYZ]|PHANTOM|SANDBOX|BLOCK_GRAB(_OBJECT)?|(DIE|RETURN)_AT_EDGE|CAST_SHADOWS|OK|MALFORMED_PARAMS|TYPE_MISMATCH|BOUNDS_ERROR|NOT_(FOUND|SUPPORTED)|INTERNAL_ERROR|WHITELIST_FAILED)|AGENT(_(BY_(LEGACY_|USER)NAME|FLYING|ATTACHMENTS|SCRIPTED|MOUSELOOK|SITTING|ON_OBJECT|AWAY|WALKING|IN_AIR|TYPING|CROUCHING|BUSY|ALWAYS_RUN|AUTOPILOT|LIST_(PARCEL(_OWNER)?|REGION)))?|CAMERA_(PITCH|DISTANCE|BEHINDNESS_(ANGLE|LAG)|(FOCUS|POSITION)(_(THRESHOLD|LOCKED|LAG))?|FOCUS_OFFSET|ACTIVE)|ANIM_ON|LOOP|REVERSE|PING_PONG|SMOOTH|ROTATE|SCALE|ALL_SIDES|LINK_(ROOT|SET|ALL_(OTHERS|CHILDREN)|THIS)|ACTIVE|PASS(IVE|_(ALWAYS|IF_NOT_HANDLED|NEVER))|SCRIPTED|CONTROL_(FWD|BACK|(ROT_)?(LEFT|RIGHT)|UP|DOWN|(ML_)?LBUTTON)|PERMISSION_(RETURN_OBJECTS|DEBIT|OVERRIDE_ANIMATIONS|SILENT_ESTATE_MANAGEMENT|TAKE_CONTROLS|TRIGGER_ANIMATION|ATTACH|CHANGE_LINKS|(CONTROL|TRACK)_CAMERA|TELEPORT)|INVENTORY_(TEXTURE|SOUND|OBJECT|SCRIPT|LANDMARK|CLOTHING|NOTECARD|BODYPART|ANIMATION|GESTURE|ALL|NONE)|CHANGED_(INVENTORY|COLOR|SHAPE|SCALE|TEXTURE|LINK|ALLOWED_DROP|OWNER|REGION(_START)?|TELEPORT|MEDIA)|OBJECT_(CLICK_ACTION|HOVER_HEIGHT|LAST_OWNER_ID|(PHYSICS|SERVER|STREAMING)_COST|UNKNOWN_DETAIL|CHARACTER_TIME|PHANTOM|PHYSICS|TEMP_(ATTACHED|ON_REZ)|NAME|DESC|POS|PRIM_(COUNT|EQUIVALENCE)|RETURN_(PARCEL(_OWNER)?|REGION)|REZZER_KEY|ROO?T|VELOCITY|OMEGA|OWNER|GROUP(_TAG)?|CREATOR|ATTACHED_(POINT|SLOTS_AVAILABLE)|RENDER_WEIGHT|(BODY_SHAPE|PATHFINDING)_TYPE|(RUNNING|TOTAL)_SCRIPT_COUNT|TOTAL_INVENTORY_COUNT|SCRIPT_(MEMORY|TIME))|TYPE_(INTEGER|FLOAT|STRING|KEY|VECTOR|ROTATION|INVALID)|(DEBUG|PUBLIC)_CHANNEL|ATTACH_(AVATAR_CENTER|CHEST|HEAD|BACK|PELVIS|MOUTH|CHIN|NECK|NOSE|BELLY|[LR](SHOULDER|HAND|FOOT|EAR|EYE|[UL](ARM|LEG)|HIP)|(LEFT|RIGHT)_PEC|HUD_(CENTER_[12]|TOP_(RIGHT|CENTER|LEFT)|BOTTOM(_(RIGHT|LEFT))?)|[LR]HAND_RING1|TAIL_(BASE|TIP)|[LR]WING|FACE_(JAW|[LR]EAR|[LR]EYE|TOUNGE)|GROIN|HIND_[LR]FOOT)|LAND_(LEVEL|RAISE|LOWER|SMOOTH|NOISE|REVERT)|DATA_(ONLINE|NAME|BORN|SIM_(POS|STATUS|RATING)|PAYINFO)|PAYMENT_INFO_(ON_FILE|USED)|REMOTE_DATA_(CHANNEL|REQUEST|REPLY)|PSYS_(PART_(BF_(ZERO|ONE(_MINUS_(DEST_COLOR|SOURCE_(ALPHA|COLOR)))?|DEST_COLOR|SOURCE_(ALPHA|COLOR))|BLEND_FUNC_(DEST|SOURCE)|FLAGS|(START|END)_(COLOR|ALPHA|SCALE|GLOW)|MAX_AGE|(RIBBON|WIND|INTERP_(COLOR|SCALE)|BOUNCE|FOLLOW_(SRC|VELOCITY)|TARGET_(POS|LINEAR)|EMISSIVE)_MASK)|SRC_(MAX_AGE|PATTERN|ANGLE_(BEGIN|END)|BURST_(RATE|PART_COUNT|RADIUS|SPEED_(MIN|MAX))|ACCEL|TEXTURE|TARGET_KEY|OMEGA|PATTERN_(DROP|EXPLODE|ANGLE(_CONE(_EMPTY)?)?)))|VEHICLE_(REFERENCE_FRAME|TYPE_(NONE|SLED|CAR|BOAT|AIRPLANE|BALLOON)|(LINEAR|ANGULAR)_(FRICTION_TIMESCALE|MOTOR_DIRECTION)|LINEAR_MOTOR_OFFSET|HOVER_(HEIGHT|EFFICIENCY|TIMESCALE)|BUOYANCY|(LINEAR|ANGULAR)_(DEFLECTION_(EFFICIENCY|TIMESCALE)|MOTOR_(DECAY_)?TIMESCALE)|VERTICAL_ATTRACTION_(EFFICIENCY|TIMESCALE)|BANKING_(EFFICIENCY|MIX|TIMESCALE)|FLAG_(NO_DEFLECTION_UP|LIMIT_(ROLL_ONLY|MOTOR_UP)|HOVER_((WATER|TERRAIN|UP)_ONLY|GLOBAL_HEIGHT)|MOUSELOOK_(STEER|BANK)|CAMERA_DECOUPLED))|PRIM_(ALLOW_UNSIT|ALPHA_MODE(_(BLEND|EMISSIVE|MASK|NONE))?|NORMAL|SPECULAR|TYPE(_(BOX|CYLINDER|PRISM|SPHERE|TORUS|TUBE|RING|SCULPT))?|HOLE_(DEFAULT|CIRCLE|SQUARE|TRIANGLE)|MATERIAL(_(STONE|METAL|GLASS|WOOD|FLESH|PLASTIC|RUBBER))?|SHINY_(NONE|LOW|MEDIUM|HIGH)|BUMP_(NONE|BRIGHT|DARK|WOOD|BARK|BRICKS|CHECKER|CONCRETE|TILE|STONE|DISKS|GRAVEL|BLOBS|SIDING|LARGETILE|STUCCO|SUCTION|WEAVE)|TEXGEN_(DEFAULT|PLANAR)|SCRIPTED_SIT_ONLY|SCULPT_(TYPE_(SPHERE|TORUS|PLANE|CYLINDER|MASK)|FLAG_(MIRROR|INVERT))|PHYSICS(_(SHAPE_(CONVEX|NONE|PRIM|TYPE)))?|(POS|ROT)_LOCAL|SLICE|TEXT|FLEXIBLE|POINT_LIGHT|TEMP_ON_REZ|PHANTOM|POSITION|SIT_TARGET|SIZE|ROTATION|TEXTURE|NAME|OMEGA|DESC|LINK_TARGET|COLOR|BUMP_SHINY|FULLBRIGHT|TEXGEN|GLOW|MEDIA_(ALT_IMAGE_ENABLE|CONTROLS|(CURRENT|HOME)_URL|AUTO_(LOOP|PLAY|SCALE|ZOOM)|FIRST_CLICK_INTERACT|(WIDTH|HEIGHT)_PIXELS|WHITELIST(_ENABLE)?|PERMS_(INTERACT|CONTROL)|PARAM_MAX|CONTROLS_(STANDARD|MINI)|PERM_(NONE|OWNER|GROUP|ANYONE)|MAX_(URL_LENGTH|WHITELIST_(SIZE|COUNT)|(WIDTH|HEIGHT)_PIXELS)))|MASK_(BASE|OWNER|GROUP|EVERYONE|NEXT)|PERM_(TRANSFER|MODIFY|COPY|MOVE|ALL)|PARCEL_(MEDIA_COMMAND_(STOP|PAUSE|PLAY|LOOP|TEXTURE|URL|TIME|AGENT|UNLOAD|AUTO_ALIGN|TYPE|SIZE|DESC|LOOP_SET)|FLAG_(ALLOW_(FLY|(GROUP_)?SCRIPTS|LANDMARK|TERRAFORM|DAMAGE|CREATE_(GROUP_)?OBJECTS)|USE_(ACCESS_(GROUP|LIST)|BAN_LIST|LAND_PASS_LIST)|LOCAL_SOUND_ONLY|RESTRICT_PUSHOBJECT|ALLOW_(GROUP|ALL)_OBJECT_ENTRY)|COUNT_(TOTAL|OWNER|GROUP|OTHER|SELECTED|TEMP)|DETAILS_(NAME|DESC|OWNER|GROUP|AREA|ID|SEE_AVATARS))|LIST_STAT_(MAX|MIN|MEAN|MEDIAN|STD_DEV|SUM(_SQUARES)?|NUM_COUNT|GEOMETRIC_MEAN|RANGE)|PAY_(HIDE|DEFAULT)|REGION_FLAG_(ALLOW_DAMAGE|FIXED_SUN|BLOCK_TERRAFORM|SANDBOX|DISABLE_(COLLISIONS|PHYSICS)|BLOCK_FLY|ALLOW_DIRECT_TELEPORT|RESTRICT_PUSHOBJECT)|HTTP_(METHOD|MIMETYPE|BODY_(MAXLENGTH|TRUNCATED)|CUSTOM_HEADER|PRAGMA_NO_CACHE|VERBOSE_THROTTLE|VERIFY_CERT)|SIT_(INVALID_(AGENT|LINK_OBJECT)|NO(T_EXPERIENCE|_(ACCESS|EXPERIENCE_PERMISSION|SIT_TARGET)))|STRING_(TRIM(_(HEAD|TAIL))?)|CLICK_ACTION_(NONE|TOUCH|SIT|BUY|PAY|OPEN(_MEDIA)?|PLAY|ZOOM)|TOUCH_INVALID_FACE|PROFILE_(NONE|SCRIPT_MEMORY)|RC_(DATA_FLAGS|DETECT_PHANTOM|GET_(LINK_NUM|NORMAL|ROOT_KEY)|MAX_HITS|REJECT_(TYPES|AGENTS|(NON)?PHYSICAL|LAND))|RCERR_(CAST_TIME_EXCEEDED|SIM_PERF_LOW|UNKNOWN)|ESTATE_ACCESS_(ALLOWED_(AGENT|GROUP)_(ADD|REMOVE)|BANNED_AGENT_(ADD|REMOVE))|DENSITY|FRICTION|RESTITUTION|GRAVITY_MULTIPLIER|KFM_(COMMAND|CMD_(PLAY|STOP|PAUSE)|MODE|FORWARD|LOOP|PING_PONG|REVERSE|DATA|ROTATION|TRANSLATION)|ERR_(GENERIC|PARCEL_PERMISSIONS|MALFORMED_PARAMS|RUNTIME_PERMISSIONS|THROTTLED)|CHARACTER_(CMD_((SMOOTH_)?STOP|JUMP)|DESIRED_(TURN_)?SPEED|RADIUS|STAY_WITHIN_PARCEL|LENGTH|ORIENTATION|ACCOUNT_FOR_SKIPPED_FRAMES|AVOIDANCE_MODE|TYPE(_([ABCD]|NONE))?|MAX_(DECEL|TURN_RADIUS|(ACCEL|SPEED)))|PURSUIT_(OFFSET|FUZZ_FACTOR|GOAL_TOLERANCE|INTERCEPT)|REQUIRE_LINE_OF_SIGHT|FORCE_DIRECT_PATH|VERTICAL|HORIZONTAL|AVOID_(CHARACTERS|DYNAMIC_OBSTACLES|NONE)|PU_(EVADE_(HIDDEN|SPOTTED)|FAILURE_(DYNAMIC_PATHFINDING_DISABLED|INVALID_(GOAL|START)|NO_(NAVMESH|VALID_DESTINATION)|OTHER|TARGET_GONE|(PARCEL_)?UNREACHABLE)|(GOAL|SLOWDOWN_DISTANCE)_REACHED)|TRAVERSAL_TYPE(_(FAST|NONE|SLOW))?|CONTENT_TYPE_(ATOM|FORM|HTML|JSON|LLSD|RSS|TEXT|XHTML|XML)|GCNP_(RADIUS|STATIC)|(PATROL|WANDER)_PAUSE_AT_WAYPOINTS|OPT_(AVATAR|CHARACTER|EXCLUSION_VOLUME|LEGACY_LINKSET|MATERIAL_VOLUME|OTHER|STATIC_OBSTACLE|WALKABLE)|SIM_STAT_PCT_CHARS_STEPPED)\\b" },
        { begin: "\\b(FALSE|TRUE)\\b" },
        { begin: "\\b(ZERO_ROTATION)\\b" },
        { begin: "\\b(EOF|JSON_(ARRAY|DELETE|FALSE|INVALID|NULL|NUMBER|OBJECT|STRING|TRUE)|NULL_KEY|TEXTURE_(BLANK|DEFAULT|MEDIA|PLYWOOD|TRANSPARENT)|URL_REQUEST_(GRANTED|DENIED))\\b" },
        { begin: "\\b(ZERO_VECTOR|TOUCH_INVALID_(TEXCOORD|VECTOR))\\b" }
      ]
    }, s2 = {
      className: "built_in",
      begin: "\\b(ll(AgentInExperience|(Create|DataSize|Delete|KeyCount|Keys|Read|Update)KeyValue|GetExperience(Details|ErrorMessage)|ReturnObjectsBy(ID|Owner)|Json(2List|[GS]etValue|ValueType)|Sin|Cos|Tan|Atan2|Sqrt|Pow|Abs|Fabs|Frand|Floor|Ceil|Round|Vec(Mag|Norm|Dist)|Rot(Between|2(Euler|Fwd|Left|Up))|(Euler|Axes)2Rot|Whisper|(Region|Owner)?Say|Shout|Listen(Control|Remove)?|Sensor(Repeat|Remove)?|Detected(Name|Key|Owner|Type|Pos|Vel|Grab|Rot|Group|LinkNumber)|Die|Ground|Wind|([GS]et)(AnimationOverride|MemoryLimit|PrimMediaParams|ParcelMusicURL|Object(Desc|Name)|PhysicsMaterial|Status|Scale|Color|Alpha|Texture|Pos|Rot|Force|Torque)|ResetAnimationOverride|(Scale|Offset|Rotate)Texture|(Rot)?Target(Remove)?|(Stop)?MoveToTarget|Apply(Rotational)?Impulse|Set(KeyframedMotion|ContentType|RegionPos|(Angular)?Velocity|Buoyancy|HoverHeight|ForceAndTorque|TimerEvent|ScriptState|Damage|TextureAnim|Sound(Queueing|Radius)|Vehicle(Type|(Float|Vector|Rotation)Param)|(Touch|Sit)?Text|Camera(Eye|At)Offset|PrimitiveParams|ClickAction|Link(Alpha|Color|PrimitiveParams(Fast)?|Texture(Anim)?|Camera|Media)|RemoteScriptAccessPin|PayPrice|LocalRot)|ScaleByFactor|Get((Max|Min)ScaleFactor|ClosestNavPoint|StaticPath|SimStats|Env|PrimitiveParams|Link(PrimitiveParams|Number(OfSides)?|Key|Name|Media)|HTTPHeader|FreeURLs|Object(Details|PermMask|PrimCount)|Parcel(MaxPrims|Details|Prim(Count|Owners))|Attached(List)?|(SPMax|Free|Used)Memory|Region(Name|TimeDilation|FPS|Corner|AgentCount)|Root(Position|Rotation)|UnixTime|(Parcel|Region)Flags|(Wall|GMT)clock|SimulatorHostname|BoundingBox|GeometricCenter|Creator|NumberOf(Prims|NotecardLines|Sides)|Animation(List)?|(Camera|Local)(Pos|Rot)|Vel|Accel|Omega|Time(stamp|OfDay)|(Object|CenterOf)?Mass|MassMKS|Energy|Owner|(Owner)?Key|SunDirection|Texture(Offset|Scale|Rot)|Inventory(Number|Name|Key|Type|Creator|PermMask)|Permissions(Key)?|StartParameter|List(Length|EntryType)|Date|Agent(Size|Info|Language|List)|LandOwnerAt|NotecardLine|Script(Name|State))|(Get|Reset|GetAndReset)Time|PlaySound(Slave)?|LoopSound(Master|Slave)?|(Trigger|Stop|Preload)Sound|((Get|Delete)Sub|Insert)String|To(Upper|Lower)|Give(InventoryList|Money)|RezObject|(Stop)?LookAt|Sleep|CollisionFilter|(Take|Release)Controls|DetachFromAvatar|AttachToAvatar(Temp)?|InstantMessage|(GetNext)?Email|StopHover|MinEventDelay|RotLookAt|String(Length|Trim)|(Start|Stop)Animation|TargetOmega|Request(Experience)?Permissions|(Create|Break)Link|BreakAllLinks|(Give|Remove)Inventory|Water|PassTouches|Request(Agent|Inventory)Data|TeleportAgent(Home|GlobalCoords)?|ModifyLand|CollisionSound|ResetScript|MessageLinked|PushObject|PassCollisions|AxisAngle2Rot|Rot2(Axis|Angle)|A(cos|sin)|AngleBetween|AllowInventoryDrop|SubStringIndex|List2(CSV|Integer|Json|Float|String|Key|Vector|Rot|List(Strided)?)|DeleteSubList|List(Statistics|Sort|Randomize|(Insert|Find|Replace)List)|EdgeOfWorld|AdjustSoundVolume|Key2Name|TriggerSoundLimited|EjectFromLand|(CSV|ParseString)2List|OverMyLand|SameGroup|UnSit|Ground(Slope|Normal|Contour)|GroundRepel|(Set|Remove)VehicleFlags|SitOnLink|(AvatarOn)?(Link)?SitTarget|Script(Danger|Profiler)|Dialog|VolumeDetect|ResetOtherScript|RemoteLoadScriptPin|(Open|Close)RemoteDataChannel|SendRemoteData|RemoteDataReply|(Integer|String)ToBase64|XorBase64|Log(10)?|Base64To(String|Integer)|ParseStringKeepNulls|RezAtRoot|RequestSimulatorData|ForceMouselook|(Load|Release|(E|Une)scape)URL|ParcelMedia(CommandList|Query)|ModPow|MapDestination|(RemoveFrom|AddTo|Reset)Land(Pass|Ban)List|(Set|Clear)CameraParams|HTTP(Request|Response)|TextBox|DetectedTouch(UV|Face|Pos|(N|Bin)ormal|ST)|(MD5|SHA1|DumpList2)String|Request(Secure)?URL|Clear(Prim|Link)Media|(Link)?ParticleSystem|(Get|Request)(Username|DisplayName)|RegionSayTo|CastRay|GenerateKey|TransferLindenDollars|ManageEstateAccess|(Create|Delete)Character|ExecCharacterCmd|Evade|FleeFrom|NavigateTo|PatrolPoints|Pursue|UpdateCharacter|WanderWithin))\\b"
    };
    return {
      name: "LSL (Linden Scripting Language)",
      illegal: ":",
      contains: [
        i2,
        {
          className: "comment",
          variants: [
            e2.COMMENT("//", "$"),
            e2.COMMENT("/\\*", "\\*/")
          ],
          relevance: 0
        },
        r2,
        {
          className: "section",
          variants: [
            { begin: "\\b(state|default)\\b" },
            { begin: "\\b(state_(entry|exit)|touch(_(start|end))?|(land_)?collision(_(start|end))?|timer|listen|(no_)?sensor|control|(not_)?at_(rot_)?target|money|email|experience_permissions(_denied)?|run_time_permissions|changed|attach|dataserver|moving_(start|end)|link_message|(on|object)_rez|remote_data|http_re(sponse|quest)|path_update|transaction_result)\\b" }
          ]
        },
        s2,
        a2,
        {
          className: "type",
          begin: "\\b(integer|float|string|key|vector|quaternion|rotation|list)\\b"
        }
      ]
    };
  }
  return go = t2, go;
}
var fo, Cd;
function pC() {
  if (Cd)
    return fo;
  Cd = 1;
  function t2(e2) {
    const n = "\\[=*\\[", i2 = "\\]=*\\]", r2 = {
      begin: n,
      end: i2,
      contains: ["self"]
    }, a2 = [
      e2.COMMENT("--(?!" + n + ")", "$"),
      e2.COMMENT(
        "--" + n,
        i2,
        {
          contains: [r2],
          relevance: 10
        }
      )
    ];
    return {
      name: "Lua",
      aliases: ["pluto"],
      keywords: {
        $pattern: e2.UNDERSCORE_IDENT_RE,
        literal: "true false nil",
        keyword: "and break do else elseif end for goto if in local not or repeat return then until while",
        built_in: (
          // Metatags and globals:
          "_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len __gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall arg self coroutine resume yield status wrap create running debug getupvalue debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv io lines write close flush open output type read stderr stdin input stdout popen tmpfile math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower table setn insert getn foreachi maxn foreach concat sort remove"
        )
      },
      contains: a2.concat([
        {
          className: "function",
          beginKeywords: "function",
          end: "\\)",
          contains: [
            e2.inherit(e2.TITLE_MODE, { begin: "([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*" }),
            {
              className: "params",
              begin: "\\(",
              endsWithParent: true,
              contains: a2
            }
          ].concat(a2)
        },
        e2.C_NUMBER_MODE,
        e2.APOS_STRING_MODE,
        e2.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: n,
          end: i2,
          contains: [r2],
          relevance: 5
        }
      ])
    };
  }
  return fo = t2, fo;
}
var So, Nd;
function mC() {
  if (Nd)
    return So;
  Nd = 1;
  function t2(e2) {
    const n = {
      className: "variable",
      variants: [
        {
          begin: "\\$\\(" + e2.UNDERSCORE_IDENT_RE + "\\)",
          contains: [e2.BACKSLASH_ESCAPE]
        },
        { begin: /\$[@%<?\^\+\*]/ }
      ]
    }, i2 = {
      className: "string",
      begin: /"/,
      end: /"/,
      contains: [
        e2.BACKSLASH_ESCAPE,
        n
      ]
    }, r2 = {
      className: "variable",
      begin: /\$\([\w-]+\s/,
      end: /\)/,
      keywords: { built_in: "subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value" },
      contains: [
        n,
        i2
        // Added QUOTE_STRING as they can be a part of functions
      ]
    }, a2 = { begin: "^" + e2.UNDERSCORE_IDENT_RE + "\\s*(?=[:+?]?=)" }, s2 = {
      className: "meta",
      begin: /^\.PHONY:/,
      end: /$/,
      keywords: {
        $pattern: /[\.\w]+/,
        keyword: ".PHONY"
      }
    }, o2 = {
      className: "section",
      begin: /^[^\s]+:/,
      end: /$/,
      contains: [n]
    };
    return {
      name: "Makefile",
      aliases: [
        "mk",
        "mak",
        "make"
      ],
      keywords: {
        $pattern: /[\w-]+/,
        keyword: "define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath"
      },
      contains: [
        e2.HASH_COMMENT_MODE,
        n,
        i2,
        r2,
        a2,
        s2,
        o2
      ]
    };
  }
  return So = t2, So;
}
var bo, vd;
function EC() {
  if (vd)
    return bo;
  vd = 1;
  const t2 = [
    "AASTriangle",
    "AbelianGroup",
    "Abort",
    "AbortKernels",
    "AbortProtect",
    "AbortScheduledTask",
    "Above",
    "Abs",
    "AbsArg",
    "AbsArgPlot",
    "Absolute",
    "AbsoluteCorrelation",
    "AbsoluteCorrelationFunction",
    "AbsoluteCurrentValue",
    "AbsoluteDashing",
    "AbsoluteFileName",
    "AbsoluteOptions",
    "AbsolutePointSize",
    "AbsoluteThickness",
    "AbsoluteTime",
    "AbsoluteTiming",
    "AcceptanceThreshold",
    "AccountingForm",
    "Accumulate",
    "Accuracy",
    "AccuracyGoal",
    "AcousticAbsorbingValue",
    "AcousticImpedanceValue",
    "AcousticNormalVelocityValue",
    "AcousticPDEComponent",
    "AcousticPressureCondition",
    "AcousticRadiationValue",
    "AcousticSoundHardValue",
    "AcousticSoundSoftCondition",
    "ActionDelay",
    "ActionMenu",
    "ActionMenuBox",
    "ActionMenuBoxOptions",
    "Activate",
    "Active",
    "ActiveClassification",
    "ActiveClassificationObject",
    "ActiveItem",
    "ActivePrediction",
    "ActivePredictionObject",
    "ActiveStyle",
    "AcyclicGraphQ",
    "AddOnHelpPath",
    "AddSides",
    "AddTo",
    "AddToSearchIndex",
    "AddUsers",
    "AdjacencyGraph",
    "AdjacencyList",
    "AdjacencyMatrix",
    "AdjacentMeshCells",
    "Adjugate",
    "AdjustmentBox",
    "AdjustmentBoxOptions",
    "AdjustTimeSeriesForecast",
    "AdministrativeDivisionData",
    "AffineHalfSpace",
    "AffineSpace",
    "AffineStateSpaceModel",
    "AffineTransform",
    "After",
    "AggregatedEntityClass",
    "AggregationLayer",
    "AircraftData",
    "AirportData",
    "AirPressureData",
    "AirSoundAttenuation",
    "AirTemperatureData",
    "AiryAi",
    "AiryAiPrime",
    "AiryAiZero",
    "AiryBi",
    "AiryBiPrime",
    "AiryBiZero",
    "AlgebraicIntegerQ",
    "AlgebraicNumber",
    "AlgebraicNumberDenominator",
    "AlgebraicNumberNorm",
    "AlgebraicNumberPolynomial",
    "AlgebraicNumberTrace",
    "AlgebraicRules",
    "AlgebraicRulesData",
    "Algebraics",
    "AlgebraicUnitQ",
    "Alignment",
    "AlignmentMarker",
    "AlignmentPoint",
    "All",
    "AllowAdultContent",
    "AllowChatServices",
    "AllowedCloudExtraParameters",
    "AllowedCloudParameterExtensions",
    "AllowedDimensions",
    "AllowedFrequencyRange",
    "AllowedHeads",
    "AllowGroupClose",
    "AllowIncomplete",
    "AllowInlineCells",
    "AllowKernelInitialization",
    "AllowLooseGrammar",
    "AllowReverseGroupClose",
    "AllowScriptLevelChange",
    "AllowVersionUpdate",
    "AllTrue",
    "Alphabet",
    "AlphabeticOrder",
    "AlphabeticSort",
    "AlphaChannel",
    "AlternateImage",
    "AlternatingFactorial",
    "AlternatingGroup",
    "AlternativeHypothesis",
    "Alternatives",
    "AltitudeMethod",
    "AmbientLight",
    "AmbiguityFunction",
    "AmbiguityList",
    "Analytic",
    "AnatomyData",
    "AnatomyForm",
    "AnatomyPlot3D",
    "AnatomySkinStyle",
    "AnatomyStyling",
    "AnchoredSearch",
    "And",
    "AndersonDarlingTest",
    "AngerJ",
    "AngleBisector",
    "AngleBracket",
    "AnglePath",
    "AnglePath3D",
    "AngleVector",
    "AngularGauge",
    "Animate",
    "AnimatedImage",
    "AnimationCycleOffset",
    "AnimationCycleRepetitions",
    "AnimationDirection",
    "AnimationDisplayTime",
    "AnimationRate",
    "AnimationRepetitions",
    "AnimationRunning",
    "AnimationRunTime",
    "AnimationTimeIndex",
    "AnimationVideo",
    "Animator",
    "AnimatorBox",
    "AnimatorBoxOptions",
    "AnimatorElements",
    "Annotate",
    "Annotation",
    "AnnotationDelete",
    "AnnotationKeys",
    "AnnotationRules",
    "AnnotationValue",
    "Annuity",
    "AnnuityDue",
    "Annulus",
    "AnomalyDetection",
    "AnomalyDetector",
    "AnomalyDetectorFunction",
    "Anonymous",
    "Antialiasing",
    "Antihermitian",
    "AntihermitianMatrixQ",
    "Antisymmetric",
    "AntisymmetricMatrixQ",
    "Antonyms",
    "AnyOrder",
    "AnySubset",
    "AnyTrue",
    "Apart",
    "ApartSquareFree",
    "APIFunction",
    "Appearance",
    "AppearanceElements",
    "AppearanceRules",
    "AppellF1",
    "Append",
    "AppendCheck",
    "AppendLayer",
    "AppendTo",
    "Application",
    "Apply",
    "ApplyReaction",
    "ApplySides",
    "ApplyTo",
    "ArcCos",
    "ArcCosh",
    "ArcCot",
    "ArcCoth",
    "ArcCsc",
    "ArcCsch",
    "ArcCurvature",
    "ARCHProcess",
    "ArcLength",
    "ArcSec",
    "ArcSech",
    "ArcSin",
    "ArcSinDistribution",
    "ArcSinh",
    "ArcTan",
    "ArcTanh",
    "Area",
    "Arg",
    "ArgMax",
    "ArgMin",
    "ArgumentCountQ",
    "ArgumentsOptions",
    "ARIMAProcess",
    "ArithmeticGeometricMean",
    "ARMAProcess",
    "Around",
    "AroundReplace",
    "ARProcess",
    "Array",
    "ArrayComponents",
    "ArrayDepth",
    "ArrayFilter",
    "ArrayFlatten",
    "ArrayMesh",
    "ArrayPad",
    "ArrayPlot",
    "ArrayPlot3D",
    "ArrayQ",
    "ArrayReduce",
    "ArrayResample",
    "ArrayReshape",
    "ArrayRules",
    "Arrays",
    "Arrow",
    "Arrow3DBox",
    "ArrowBox",
    "Arrowheads",
    "ASATriangle",
    "Ask",
    "AskAppend",
    "AskConfirm",
    "AskDisplay",
    "AskedQ",
    "AskedValue",
    "AskFunction",
    "AskState",
    "AskTemplateDisplay",
    "AspectRatio",
    "AspectRatioFixed",
    "Assert",
    "AssessmentFunction",
    "AssessmentResultObject",
    "AssociateTo",
    "Association",
    "AssociationFormat",
    "AssociationMap",
    "AssociationQ",
    "AssociationThread",
    "AssumeDeterministic",
    "Assuming",
    "Assumptions",
    "AstroAngularSeparation",
    "AstroBackground",
    "AstroCenter",
    "AstroDistance",
    "AstroGraphics",
    "AstroGridLines",
    "AstroGridLinesStyle",
    "AstronomicalData",
    "AstroPosition",
    "AstroProjection",
    "AstroRange",
    "AstroRangePadding",
    "AstroReferenceFrame",
    "AstroStyling",
    "AstroZoomLevel",
    "Asymptotic",
    "AsymptoticDSolveValue",
    "AsymptoticEqual",
    "AsymptoticEquivalent",
    "AsymptoticExpectation",
    "AsymptoticGreater",
    "AsymptoticGreaterEqual",
    "AsymptoticIntegrate",
    "AsymptoticLess",
    "AsymptoticLessEqual",
    "AsymptoticOutputTracker",
    "AsymptoticProbability",
    "AsymptoticProduct",
    "AsymptoticRSolveValue",
    "AsymptoticSolve",
    "AsymptoticSum",
    "Asynchronous",
    "AsynchronousTaskObject",
    "AsynchronousTasks",
    "Atom",
    "AtomCoordinates",
    "AtomCount",
    "AtomDiagramCoordinates",
    "AtomLabels",
    "AtomLabelStyle",
    "AtomList",
    "AtomQ",
    "AttachCell",
    "AttachedCell",
    "AttentionLayer",
    "Attributes",
    "Audio",
    "AudioAmplify",
    "AudioAnnotate",
    "AudioAnnotationLookup",
    "AudioBlockMap",
    "AudioCapture",
    "AudioChannelAssignment",
    "AudioChannelCombine",
    "AudioChannelMix",
    "AudioChannels",
    "AudioChannelSeparate",
    "AudioData",
    "AudioDelay",
    "AudioDelete",
    "AudioDevice",
    "AudioDistance",
    "AudioEncoding",
    "AudioFade",
    "AudioFrequencyShift",
    "AudioGenerator",
    "AudioIdentify",
    "AudioInputDevice",
    "AudioInsert",
    "AudioInstanceQ",
    "AudioIntervals",
    "AudioJoin",
    "AudioLabel",
    "AudioLength",
    "AudioLocalMeasurements",
    "AudioLooping",
    "AudioLoudness",
    "AudioMeasurements",
    "AudioNormalize",
    "AudioOutputDevice",
    "AudioOverlay",
    "AudioPad",
    "AudioPan",
    "AudioPartition",
    "AudioPause",
    "AudioPitchShift",
    "AudioPlay",
    "AudioPlot",
    "AudioQ",
    "AudioRecord",
    "AudioReplace",
    "AudioResample",
    "AudioReverb",
    "AudioReverse",
    "AudioSampleRate",
    "AudioSpectralMap",
    "AudioSpectralTransformation",
    "AudioSplit",
    "AudioStop",
    "AudioStream",
    "AudioStreams",
    "AudioTimeStretch",
    "AudioTrackApply",
    "AudioTrackSelection",
    "AudioTrim",
    "AudioType",
    "AugmentedPolyhedron",
    "AugmentedSymmetricPolynomial",
    "Authenticate",
    "Authentication",
    "AuthenticationDialog",
    "AutoAction",
    "Autocomplete",
    "AutocompletionFunction",
    "AutoCopy",
    "AutocorrelationTest",
    "AutoDelete",
    "AutoEvaluateEvents",
    "AutoGeneratedPackage",
    "AutoIndent",
    "AutoIndentSpacings",
    "AutoItalicWords",
    "AutoloadPath",
    "AutoMatch",
    "Automatic",
    "AutomaticImageSize",
    "AutoMultiplicationSymbol",
    "AutoNumberFormatting",
    "AutoOpenNotebooks",
    "AutoOpenPalettes",
    "AutoOperatorRenderings",
    "AutoQuoteCharacters",
    "AutoRefreshed",
    "AutoRemove",
    "AutorunSequencing",
    "AutoScaling",
    "AutoScroll",
    "AutoSpacing",
    "AutoStyleOptions",
    "AutoStyleWords",
    "AutoSubmitting",
    "Axes",
    "AxesEdge",
    "AxesLabel",
    "AxesOrigin",
    "AxesStyle",
    "AxiomaticTheory",
    "Axis",
    "Axis3DBox",
    "Axis3DBoxOptions",
    "AxisBox",
    "AxisBoxOptions",
    "AxisLabel",
    "AxisObject",
    "AxisStyle",
    "BabyMonsterGroupB",
    "Back",
    "BackFaceColor",
    "BackFaceGlowColor",
    "BackFaceOpacity",
    "BackFaceSpecularColor",
    "BackFaceSpecularExponent",
    "BackFaceSurfaceAppearance",
    "BackFaceTexture",
    "Background",
    "BackgroundAppearance",
    "BackgroundTasksSettings",
    "Backslash",
    "Backsubstitution",
    "Backward",
    "Ball",
    "Band",
    "BandpassFilter",
    "BandstopFilter",
    "BarabasiAlbertGraphDistribution",
    "BarChart",
    "BarChart3D",
    "BarcodeImage",
    "BarcodeRecognize",
    "BaringhausHenzeTest",
    "BarLegend",
    "BarlowProschanImportance",
    "BarnesG",
    "BarOrigin",
    "BarSpacing",
    "BartlettHannWindow",
    "BartlettWindow",
    "BaseDecode",
    "BaseEncode",
    "BaseForm",
    "Baseline",
    "BaselinePosition",
    "BaseStyle",
    "BasicRecurrentLayer",
    "BatchNormalizationLayer",
    "BatchSize",
    "BatesDistribution",
    "BattleLemarieWavelet",
    "BayesianMaximization",
    "BayesianMaximizationObject",
    "BayesianMinimization",
    "BayesianMinimizationObject",
    "Because",
    "BeckmannDistribution",
    "Beep",
    "Before",
    "Begin",
    "BeginDialogPacket",
    "BeginPackage",
    "BellB",
    "BellY",
    "Below",
    "BenfordDistribution",
    "BeniniDistribution",
    "BenktanderGibratDistribution",
    "BenktanderWeibullDistribution",
    "BernoulliB",
    "BernoulliDistribution",
    "BernoulliGraphDistribution",
    "BernoulliProcess",
    "BernsteinBasis",
    "BesagL",
    "BesselFilterModel",
    "BesselI",
    "BesselJ",
    "BesselJZero",
    "BesselK",
    "BesselY",
    "BesselYZero",
    "Beta",
    "BetaBinomialDistribution",
    "BetaDistribution",
    "BetaNegativeBinomialDistribution",
    "BetaPrimeDistribution",
    "BetaRegularized",
    "Between",
    "BetweennessCentrality",
    "Beveled",
    "BeveledPolyhedron",
    "BezierCurve",
    "BezierCurve3DBox",
    "BezierCurve3DBoxOptions",
    "BezierCurveBox",
    "BezierCurveBoxOptions",
    "BezierFunction",
    "BilateralFilter",
    "BilateralLaplaceTransform",
    "BilateralZTransform",
    "Binarize",
    "BinaryDeserialize",
    "BinaryDistance",
    "BinaryFormat",
    "BinaryImageQ",
    "BinaryRead",
    "BinaryReadList",
    "BinarySerialize",
    "BinaryWrite",
    "BinCounts",
    "BinLists",
    "BinnedVariogramList",
    "Binomial",
    "BinomialDistribution",
    "BinomialPointProcess",
    "BinomialProcess",
    "BinormalDistribution",
    "BiorthogonalSplineWavelet",
    "BioSequence",
    "BioSequenceBackTranslateList",
    "BioSequenceComplement",
    "BioSequenceInstances",
    "BioSequenceModify",
    "BioSequencePlot",
    "BioSequenceQ",
    "BioSequenceReverseComplement",
    "BioSequenceTranscribe",
    "BioSequenceTranslate",
    "BipartiteGraphQ",
    "BiquadraticFilterModel",
    "BirnbaumImportance",
    "BirnbaumSaundersDistribution",
    "BitAnd",
    "BitClear",
    "BitGet",
    "BitLength",
    "BitNot",
    "BitOr",
    "BitRate",
    "BitSet",
    "BitShiftLeft",
    "BitShiftRight",
    "BitXor",
    "BiweightLocation",
    "BiweightMidvariance",
    "Black",
    "BlackmanHarrisWindow",
    "BlackmanNuttallWindow",
    "BlackmanWindow",
    "Blank",
    "BlankForm",
    "BlankNullSequence",
    "BlankSequence",
    "Blend",
    "Block",
    "BlockchainAddressData",
    "BlockchainBase",
    "BlockchainBlockData",
    "BlockchainContractValue",
    "BlockchainData",
    "BlockchainGet",
    "BlockchainKeyEncode",
    "BlockchainPut",
    "BlockchainTokenData",
    "BlockchainTransaction",
    "BlockchainTransactionData",
    "BlockchainTransactionSign",
    "BlockchainTransactionSubmit",
    "BlockDiagonalMatrix",
    "BlockLowerTriangularMatrix",
    "BlockMap",
    "BlockRandom",
    "BlockUpperTriangularMatrix",
    "BlomqvistBeta",
    "BlomqvistBetaTest",
    "Blue",
    "Blur",
    "Blurring",
    "BodePlot",
    "BohmanWindow",
    "Bold",
    "Bond",
    "BondCount",
    "BondLabels",
    "BondLabelStyle",
    "BondList",
    "BondQ",
    "Bookmarks",
    "Boole",
    "BooleanConsecutiveFunction",
    "BooleanConvert",
    "BooleanCountingFunction",
    "BooleanFunction",
    "BooleanGraph",
    "BooleanMaxterms",
    "BooleanMinimize",
    "BooleanMinterms",
    "BooleanQ",
    "BooleanRegion",
    "Booleans",
    "BooleanStrings",
    "BooleanTable",
    "BooleanVariables",
    "BorderDimensions",
    "BorelTannerDistribution",
    "Bottom",
    "BottomHatTransform",
    "BoundaryDiscretizeGraphics",
    "BoundaryDiscretizeRegion",
    "BoundaryMesh",
    "BoundaryMeshRegion",
    "BoundaryMeshRegionQ",
    "BoundaryStyle",
    "BoundedRegionQ",
    "BoundingRegion",
    "Bounds",
    "Box",
    "BoxBaselineShift",
    "BoxData",
    "BoxDimensions",
    "Boxed",
    "Boxes",
    "BoxForm",
    "BoxFormFormatTypes",
    "BoxFrame",
    "BoxID",
    "BoxMargins",
    "BoxMatrix",
    "BoxObject",
    "BoxRatios",
    "BoxRotation",
    "BoxRotationPoint",
    "BoxStyle",
    "BoxWhiskerChart",
    "Bra",
    "BracketingBar",
    "BraKet",
    "BrayCurtisDistance",
    "BreadthFirstScan",
    "Break",
    "BridgeData",
    "BrightnessEqualize",
    "BroadcastStationData",
    "Brown",
    "BrownForsytheTest",
    "BrownianBridgeProcess",
    "BrowserCategory",
    "BSplineBasis",
    "BSplineCurve",
    "BSplineCurve3DBox",
    "BSplineCurve3DBoxOptions",
    "BSplineCurveBox",
    "BSplineCurveBoxOptions",
    "BSplineFunction",
    "BSplineSurface",
    "BSplineSurface3DBox",
    "BSplineSurface3DBoxOptions",
    "BubbleChart",
    "BubbleChart3D",
    "BubbleScale",
    "BubbleSizes",
    "BuckyballGraph",
    "BuildCompiledComponent",
    "BuildingData",
    "BulletGauge",
    "BusinessDayQ",
    "ButterflyGraph",
    "ButterworthFilterModel",
    "Button",
    "ButtonBar",
    "ButtonBox",
    "ButtonBoxOptions",
    "ButtonCell",
    "ButtonContents",
    "ButtonData",
    "ButtonEvaluator",
    "ButtonExpandable",
    "ButtonFrame",
    "ButtonFunction",
    "ButtonMargins",
    "ButtonMinHeight",
    "ButtonNote",
    "ButtonNotebook",
    "ButtonSource",
    "ButtonStyle",
    "ButtonStyleMenuListing",
    "Byte",
    "ByteArray",
    "ByteArrayFormat",
    "ByteArrayFormatQ",
    "ByteArrayQ",
    "ByteArrayToString",
    "ByteCount",
    "ByteOrdering",
    "C",
    "CachedValue",
    "CacheGraphics",
    "CachePersistence",
    "CalendarConvert",
    "CalendarData",
    "CalendarType",
    "Callout",
    "CalloutMarker",
    "CalloutStyle",
    "CallPacket",
    "CanberraDistance",
    "Cancel",
    "CancelButton",
    "CandlestickChart",
    "CanonicalGraph",
    "CanonicalizePolygon",
    "CanonicalizePolyhedron",
    "CanonicalizeRegion",
    "CanonicalName",
    "CanonicalWarpingCorrespondence",
    "CanonicalWarpingDistance",
    "CantorMesh",
    "CantorStaircase",
    "Canvas",
    "Cap",
    "CapForm",
    "CapitalDifferentialD",
    "Capitalize",
    "CapsuleShape",
    "CaptureRunning",
    "CaputoD",
    "CardinalBSplineBasis",
    "CarlemanLinearize",
    "CarlsonRC",
    "CarlsonRD",
    "CarlsonRE",
    "CarlsonRF",
    "CarlsonRG",
    "CarlsonRJ",
    "CarlsonRK",
    "CarlsonRM",
    "CarmichaelLambda",
    "CaseOrdering",
    "Cases",
    "CaseSensitive",
    "Cashflow",
    "Casoratian",
    "Cast",
    "Catalan",
    "CatalanNumber",
    "Catch",
    "CategoricalDistribution",
    "Catenate",
    "CatenateLayer",
    "CauchyDistribution",
    "CauchyMatrix",
    "CauchyPointProcess",
    "CauchyWindow",
    "CayleyGraph",
    "CDF",
    "CDFDeploy",
    "CDFInformation",
    "CDFWavelet",
    "Ceiling",
    "CelestialSystem",
    "Cell",
    "CellAutoOverwrite",
    "CellBaseline",
    "CellBoundingBox",
    "CellBracketOptions",
    "CellChangeTimes",
    "CellContents",
    "CellContext",
    "CellDingbat",
    "CellDingbatMargin",
    "CellDynamicExpression",
    "CellEditDuplicate",
    "CellElementsBoundingBox",
    "CellElementSpacings",
    "CellEpilog",
    "CellEvaluationDuplicate",
    "CellEvaluationFunction",
    "CellEvaluationLanguage",
    "CellEventActions",
    "CellFrame",
    "CellFrameColor",
    "CellFrameLabelMargins",
    "CellFrameLabels",
    "CellFrameMargins",
    "CellFrameStyle",
    "CellGroup",
    "CellGroupData",
    "CellGrouping",
    "CellGroupingRules",
    "CellHorizontalScrolling",
    "CellID",
    "CellInsertionPointCell",
    "CellLabel",
    "CellLabelAutoDelete",
    "CellLabelMargins",
    "CellLabelPositioning",
    "CellLabelStyle",
    "CellLabelTemplate",
    "CellMargins",
    "CellObject",
    "CellOpen",
    "CellPrint",
    "CellProlog",
    "Cells",
    "CellSize",
    "CellStyle",
    "CellTags",
    "CellTrayPosition",
    "CellTrayWidgets",
    "CellularAutomaton",
    "CensoredDistribution",
    "Censoring",
    "Center",
    "CenterArray",
    "CenterDot",
    "CenteredInterval",
    "CentralFeature",
    "CentralMoment",
    "CentralMomentGeneratingFunction",
    "Cepstrogram",
    "CepstrogramArray",
    "CepstrumArray",
    "CForm",
    "ChampernowneNumber",
    "ChangeOptions",
    "ChannelBase",
    "ChannelBrokerAction",
    "ChannelDatabin",
    "ChannelHistoryLength",
    "ChannelListen",
    "ChannelListener",
    "ChannelListeners",
    "ChannelListenerWait",
    "ChannelObject",
    "ChannelPreSendFunction",
    "ChannelReceiverFunction",
    "ChannelSend",
    "ChannelSubscribers",
    "ChanVeseBinarize",
    "Character",
    "CharacterCounts",
    "CharacterEncoding",
    "CharacterEncodingsPath",
    "CharacteristicFunction",
    "CharacteristicPolynomial",
    "CharacterName",
    "CharacterNormalize",
    "CharacterRange",
    "Characters",
    "ChartBaseStyle",
    "ChartElementData",
    "ChartElementDataFunction",
    "ChartElementFunction",
    "ChartElements",
    "ChartLabels",
    "ChartLayout",
    "ChartLegends",
    "ChartStyle",
    "Chebyshev1FilterModel",
    "Chebyshev2FilterModel",
    "ChebyshevDistance",
    "ChebyshevT",
    "ChebyshevU",
    "Check",
    "CheckAbort",
    "CheckAll",
    "CheckArguments",
    "Checkbox",
    "CheckboxBar",
    "CheckboxBox",
    "CheckboxBoxOptions",
    "ChemicalConvert",
    "ChemicalData",
    "ChemicalFormula",
    "ChemicalInstance",
    "ChemicalReaction",
    "ChessboardDistance",
    "ChiDistribution",
    "ChineseRemainder",
    "ChiSquareDistribution",
    "ChoiceButtons",
    "ChoiceDialog",
    "CholeskyDecomposition",
    "Chop",
    "ChromaticityPlot",
    "ChromaticityPlot3D",
    "ChromaticPolynomial",
    "Circle",
    "CircleBox",
    "CircleDot",
    "CircleMinus",
    "CirclePlus",
    "CirclePoints",
    "CircleThrough",
    "CircleTimes",
    "CirculantGraph",
    "CircularArcThrough",
    "CircularOrthogonalMatrixDistribution",
    "CircularQuaternionMatrixDistribution",
    "CircularRealMatrixDistribution",
    "CircularSymplecticMatrixDistribution",
    "CircularUnitaryMatrixDistribution",
    "Circumsphere",
    "CityData",
    "ClassifierFunction",
    "ClassifierInformation",
    "ClassifierMeasurements",
    "ClassifierMeasurementsObject",
    "Classify",
    "ClassPriors",
    "Clear",
    "ClearAll",
    "ClearAttributes",
    "ClearCookies",
    "ClearPermissions",
    "ClearSystemCache",
    "ClebschGordan",
    "ClickPane",
    "ClickToCopy",
    "ClickToCopyEnabled",
    "Clip",
    "ClipboardNotebook",
    "ClipFill",
    "ClippingStyle",
    "ClipPlanes",
    "ClipPlanesStyle",
    "ClipRange",
    "Clock",
    "ClockGauge",
    "ClockwiseContourIntegral",
    "Close",
    "Closed",
    "CloseKernels",
    "ClosenessCentrality",
    "Closing",
    "ClosingAutoSave",
    "ClosingEvent",
    "CloudAccountData",
    "CloudBase",
    "CloudConnect",
    "CloudConnections",
    "CloudDeploy",
    "CloudDirectory",
    "CloudDisconnect",
    "CloudEvaluate",
    "CloudExport",
    "CloudExpression",
    "CloudExpressions",
    "CloudFunction",
    "CloudGet",
    "CloudImport",
    "CloudLoggingData",
    "CloudObject",
    "CloudObjectInformation",
    "CloudObjectInformationData",
    "CloudObjectNameFormat",
    "CloudObjects",
    "CloudObjectURLType",
    "CloudPublish",
    "CloudPut",
    "CloudRenderingMethod",
    "CloudSave",
    "CloudShare",
    "CloudSubmit",
    "CloudSymbol",
    "CloudUnshare",
    "CloudUserID",
    "ClusterClassify",
    "ClusterDissimilarityFunction",
    "ClusteringComponents",
    "ClusteringMeasurements",
    "ClusteringTree",
    "CMYKColor",
    "Coarse",
    "CodeAssistOptions",
    "Coefficient",
    "CoefficientArrays",
    "CoefficientDomain",
    "CoefficientList",
    "CoefficientRules",
    "CoifletWavelet",
    "Collect",
    "CollinearPoints",
    "Colon",
    "ColonForm",
    "ColorBalance",
    "ColorCombine",
    "ColorConvert",
    "ColorCoverage",
    "ColorData",
    "ColorDataFunction",
    "ColorDetect",
    "ColorDistance",
    "ColorFunction",
    "ColorFunctionBinning",
    "ColorFunctionScaling",
    "Colorize",
    "ColorNegate",
    "ColorOutput",
    "ColorProfileData",
    "ColorQ",
    "ColorQuantize",
    "ColorReplace",
    "ColorRules",
    "ColorSelectorSettings",
    "ColorSeparate",
    "ColorSetter",
    "ColorSetterBox",
    "ColorSetterBoxOptions",
    "ColorSlider",
    "ColorsNear",
    "ColorSpace",
    "ColorToneMapping",
    "Column",
    "ColumnAlignments",
    "ColumnBackgrounds",
    "ColumnForm",
    "ColumnLines",
    "ColumnsEqual",
    "ColumnSpacings",
    "ColumnWidths",
    "CombinatorB",
    "CombinatorC",
    "CombinatorI",
    "CombinatorK",
    "CombinatorS",
    "CombinatorW",
    "CombinatorY",
    "CombinedEntityClass",
    "CombinerFunction",
    "CometData",
    "CommonDefaultFormatTypes",
    "Commonest",
    "CommonestFilter",
    "CommonName",
    "CommonUnits",
    "CommunityBoundaryStyle",
    "CommunityGraphPlot",
    "CommunityLabels",
    "CommunityRegionStyle",
    "CompanyData",
    "CompatibleUnitQ",
    "CompilationOptions",
    "CompilationTarget",
    "Compile",
    "Compiled",
    "CompiledCodeFunction",
    "CompiledComponent",
    "CompiledExpressionDeclaration",
    "CompiledFunction",
    "CompiledLayer",
    "CompilerCallback",
    "CompilerEnvironment",
    "CompilerEnvironmentAppend",
    "CompilerEnvironmentAppendTo",
    "CompilerEnvironmentObject",
    "CompilerOptions",
    "Complement",
    "ComplementedEntityClass",
    "CompleteGraph",
    "CompleteGraphQ",
    "CompleteIntegral",
    "CompleteKaryTree",
    "CompletionsListPacket",
    "Complex",
    "ComplexArrayPlot",
    "ComplexContourPlot",
    "Complexes",
    "ComplexExpand",
    "ComplexInfinity",
    "ComplexityFunction",
    "ComplexListPlot",
    "ComplexPlot",
    "ComplexPlot3D",
    "ComplexRegionPlot",
    "ComplexStreamPlot",
    "ComplexVectorPlot",
    "ComponentMeasurements",
    "ComponentwiseContextMenu",
    "Compose",
    "ComposeList",
    "ComposeSeries",
    "CompositeQ",
    "Composition",
    "CompoundElement",
    "CompoundExpression",
    "CompoundPoissonDistribution",
    "CompoundPoissonProcess",
    "CompoundRenewalProcess",
    "Compress",
    "CompressedData",
    "CompressionLevel",
    "ComputeUncertainty",
    "ConcaveHullMesh",
    "Condition",
    "ConditionalExpression",
    "Conditioned",
    "Cone",
    "ConeBox",
    "ConfidenceLevel",
    "ConfidenceRange",
    "ConfidenceTransform",
    "ConfigurationPath",
    "Confirm",
    "ConfirmAssert",
    "ConfirmBy",
    "ConfirmMatch",
    "ConfirmQuiet",
    "ConformationMethod",
    "ConformAudio",
    "ConformImages",
    "Congruent",
    "ConicGradientFilling",
    "ConicHullRegion",
    "ConicHullRegion3DBox",
    "ConicHullRegion3DBoxOptions",
    "ConicHullRegionBox",
    "ConicHullRegionBoxOptions",
    "ConicOptimization",
    "Conjugate",
    "ConjugateTranspose",
    "Conjunction",
    "Connect",
    "ConnectedComponents",
    "ConnectedGraphComponents",
    "ConnectedGraphQ",
    "ConnectedMeshComponents",
    "ConnectedMoleculeComponents",
    "ConnectedMoleculeQ",
    "ConnectionSettings",
    "ConnectLibraryCallbackFunction",
    "ConnectSystemModelComponents",
    "ConnectSystemModelController",
    "ConnesWindow",
    "ConoverTest",
    "ConservativeConvectionPDETerm",
    "ConsoleMessage",
    "Constant",
    "ConstantArray",
    "ConstantArrayLayer",
    "ConstantImage",
    "ConstantPlusLayer",
    "ConstantRegionQ",
    "Constants",
    "ConstantTimesLayer",
    "ConstellationData",
    "ConstrainedMax",
    "ConstrainedMin",
    "Construct",
    "Containing",
    "ContainsAll",
    "ContainsAny",
    "ContainsExactly",
    "ContainsNone",
    "ContainsOnly",
    "ContentDetectorFunction",
    "ContentFieldOptions",
    "ContentLocationFunction",
    "ContentObject",
    "ContentPadding",
    "ContentsBoundingBox",
    "ContentSelectable",
    "ContentSize",
    "Context",
    "ContextMenu",
    "Contexts",
    "ContextToFileName",
    "Continuation",
    "Continue",
    "ContinuedFraction",
    "ContinuedFractionK",
    "ContinuousAction",
    "ContinuousMarkovProcess",
    "ContinuousTask",
    "ContinuousTimeModelQ",
    "ContinuousWaveletData",
    "ContinuousWaveletTransform",
    "ContourDetect",
    "ContourGraphics",
    "ContourIntegral",
    "ContourLabels",
    "ContourLines",
    "ContourPlot",
    "ContourPlot3D",
    "Contours",
    "ContourShading",
    "ContourSmoothing",
    "ContourStyle",
    "ContraharmonicMean",
    "ContrastiveLossLayer",
    "Control",
    "ControlActive",
    "ControlAlignment",
    "ControlGroupContentsBox",
    "ControllabilityGramian",
    "ControllabilityMatrix",
    "ControllableDecomposition",
    "ControllableModelQ",
    "ControllerDuration",
    "ControllerInformation",
    "ControllerInformationData",
    "ControllerLinking",
    "ControllerManipulate",
    "ControllerMethod",
    "ControllerPath",
    "ControllerState",
    "ControlPlacement",
    "ControlsRendering",
    "ControlType",
    "ConvectionPDETerm",
    "Convergents",
    "ConversionOptions",
    "ConversionRules",
    "ConvertToPostScript",
    "ConvertToPostScriptPacket",
    "ConvexHullMesh",
    "ConvexHullRegion",
    "ConvexOptimization",
    "ConvexPolygonQ",
    "ConvexPolyhedronQ",
    "ConvexRegionQ",
    "ConvolutionLayer",
    "Convolve",
    "ConwayGroupCo1",
    "ConwayGroupCo2",
    "ConwayGroupCo3",
    "CookieFunction",
    "Cookies",
    "CoordinateBoundingBox",
    "CoordinateBoundingBoxArray",
    "CoordinateBounds",
    "CoordinateBoundsArray",
    "CoordinateChartData",
    "CoordinatesToolOptions",
    "CoordinateTransform",
    "CoordinateTransformData",
    "CoplanarPoints",
    "CoprimeQ",
    "Coproduct",
    "CopulaDistribution",
    "Copyable",
    "CopyDatabin",
    "CopyDirectory",
    "CopyFile",
    "CopyFunction",
    "CopyTag",
    "CopyToClipboard",
    "CoreNilpotentDecomposition",
    "CornerFilter",
    "CornerNeighbors",
    "Correlation",
    "CorrelationDistance",
    "CorrelationFunction",
    "CorrelationTest",
    "Cos",
    "Cosh",
    "CoshIntegral",
    "CosineDistance",
    "CosineWindow",
    "CosIntegral",
    "Cot",
    "Coth",
    "CoulombF",
    "CoulombG",
    "CoulombH1",
    "CoulombH2",
    "Count",
    "CountDistinct",
    "CountDistinctBy",
    "CounterAssignments",
    "CounterBox",
    "CounterBoxOptions",
    "CounterClockwiseContourIntegral",
    "CounterEvaluator",
    "CounterFunction",
    "CounterIncrements",
    "CounterStyle",
    "CounterStyleMenuListing",
    "CountRoots",
    "CountryData",
    "Counts",
    "CountsBy",
    "Covariance",
    "CovarianceEstimatorFunction",
    "CovarianceFunction",
    "CoxianDistribution",
    "CoxIngersollRossProcess",
    "CoxModel",
    "CoxModelFit",
    "CramerVonMisesTest",
    "CreateArchive",
    "CreateCellID",
    "CreateChannel",
    "CreateCloudExpression",
    "CreateCompilerEnvironment",
    "CreateDatabin",
    "CreateDataStructure",
    "CreateDataSystemModel",
    "CreateDialog",
    "CreateDirectory",
    "CreateDocument",
    "CreateFile",
    "CreateIntermediateDirectories",
    "CreateLicenseEntitlement",
    "CreateManagedLibraryExpression",
    "CreateNotebook",
    "CreatePacletArchive",
    "CreatePalette",
    "CreatePermissionsGroup",
    "CreateScheduledTask",
    "CreateSearchIndex",
    "CreateSystemModel",
    "CreateTemporary",
    "CreateTypeInstance",
    "CreateUUID",
    "CreateWindow",
    "CriterionFunction",
    "CriticalityFailureImportance",
    "CriticalitySuccessImportance",
    "CriticalSection",
    "Cross",
    "CrossEntropyLossLayer",
    "CrossingCount",
    "CrossingDetect",
    "CrossingPolygon",
    "CrossMatrix",
    "Csc",
    "Csch",
    "CSGRegion",
    "CSGRegionQ",
    "CSGRegionTree",
    "CTCLossLayer",
    "Cube",
    "CubeRoot",
    "Cubics",
    "Cuboid",
    "CuboidBox",
    "CuboidBoxOptions",
    "Cumulant",
    "CumulantGeneratingFunction",
    "CumulativeFeatureImpactPlot",
    "Cup",
    "CupCap",
    "Curl",
    "CurlyDoubleQuote",
    "CurlyQuote",
    "CurrencyConvert",
    "CurrentDate",
    "CurrentImage",
    "CurrentNotebookImage",
    "CurrentScreenImage",
    "CurrentValue",
    "Curry",
    "CurryApplied",
    "CurvatureFlowFilter",
    "CurveClosed",
    "Cyan",
    "CycleGraph",
    "CycleIndexPolynomial",
    "Cycles",
    "CyclicGroup",
    "Cyclotomic",
    "Cylinder",
    "CylinderBox",
    "CylinderBoxOptions",
    "CylindricalDecomposition",
    "CylindricalDecompositionFunction",
    "D",
    "DagumDistribution",
    "DamData",
    "DamerauLevenshteinDistance",
    "DampingFactor",
    "Darker",
    "Dashed",
    "Dashing",
    "DatabaseConnect",
    "DatabaseDisconnect",
    "DatabaseReference",
    "Databin",
    "DatabinAdd",
    "DatabinRemove",
    "Databins",
    "DatabinSubmit",
    "DatabinUpload",
    "DataCompression",
    "DataDistribution",
    "DataRange",
    "DataReversed",
    "Dataset",
    "DatasetDisplayPanel",
    "DatasetTheme",
    "DataStructure",
    "DataStructureQ",
    "Date",
    "DateBounds",
    "Dated",
    "DateDelimiters",
    "DateDifference",
    "DatedUnit",
    "DateFormat",
    "DateFunction",
    "DateGranularity",
    "DateHistogram",
    "DateInterval",
    "DateList",
    "DateListLogPlot",
    "DateListPlot",
    "DateListStepPlot",
    "DateObject",
    "DateObjectQ",
    "DateOverlapsQ",
    "DatePattern",
    "DatePlus",
    "DateRange",
    "DateReduction",
    "DateScale",
    "DateSelect",
    "DateString",
    "DateTicksFormat",
    "DateValue",
    "DateWithinQ",
    "DaubechiesWavelet",
    "DavisDistribution",
    "DawsonF",
    "DayCount",
    "DayCountConvention",
    "DayHemisphere",
    "DaylightQ",
    "DayMatchQ",
    "DayName",
    "DayNightTerminator",
    "DayPlus",
    "DayRange",
    "DayRound",
    "DeBruijnGraph",
    "DeBruijnSequence",
    "Debug",
    "DebugTag",
    "Decapitalize",
    "Decimal",
    "DecimalForm",
    "DeclareCompiledComponent",
    "DeclareKnownSymbols",
    "DeclarePackage",
    "Decompose",
    "DeconvolutionLayer",
    "Decrement",
    "Decrypt",
    "DecryptFile",
    "DedekindEta",
    "DeepSpaceProbeData",
    "Default",
    "Default2DTool",
    "Default3DTool",
    "DefaultAttachedCellStyle",
    "DefaultAxesStyle",
    "DefaultBaseStyle",
    "DefaultBoxStyle",
    "DefaultButton",
    "DefaultColor",
    "DefaultControlPlacement",
    "DefaultDockedCellStyle",
    "DefaultDuplicateCellStyle",
    "DefaultDuration",
    "DefaultElement",
    "DefaultFaceGridsStyle",
    "DefaultFieldHintStyle",
    "DefaultFont",
    "DefaultFontProperties",
    "DefaultFormatType",
    "DefaultFrameStyle",
    "DefaultFrameTicksStyle",
    "DefaultGridLinesStyle",
    "DefaultInlineFormatType",
    "DefaultInputFormatType",
    "DefaultLabelStyle",
    "DefaultMenuStyle",
    "DefaultNaturalLanguage",
    "DefaultNewCellStyle",
    "DefaultNewInlineCellStyle",
    "DefaultNotebook",
    "DefaultOptions",
    "DefaultOutputFormatType",
    "DefaultPrintPrecision",
    "DefaultStyle",
    "DefaultStyleDefinitions",
    "DefaultTextFormatType",
    "DefaultTextInlineFormatType",
    "DefaultTicksStyle",
    "DefaultTooltipStyle",
    "DefaultValue",
    "DefaultValues",
    "Defer",
    "DefineExternal",
    "DefineInputStreamMethod",
    "DefineOutputStreamMethod",
    "DefineResourceFunction",
    "Definition",
    "Degree",
    "DegreeCentrality",
    "DegreeGraphDistribution",
    "DegreeLexicographic",
    "DegreeReverseLexicographic",
    "DEigensystem",
    "DEigenvalues",
    "Deinitialization",
    "Del",
    "DelaunayMesh",
    "Delayed",
    "Deletable",
    "Delete",
    "DeleteAdjacentDuplicates",
    "DeleteAnomalies",
    "DeleteBorderComponents",
    "DeleteCases",
    "DeleteChannel",
    "DeleteCloudExpression",
    "DeleteContents",
    "DeleteDirectory",
    "DeleteDuplicates",
    "DeleteDuplicatesBy",
    "DeleteElements",
    "DeleteFile",
    "DeleteMissing",
    "DeleteObject",
    "DeletePermissionsKey",
    "DeleteSearchIndex",
    "DeleteSmallComponents",
    "DeleteStopwords",
    "DeleteWithContents",
    "DeletionWarning",
    "DelimitedArray",
    "DelimitedSequence",
    "Delimiter",
    "DelimiterAutoMatching",
    "DelimiterFlashTime",
    "DelimiterMatching",
    "Delimiters",
    "DeliveryFunction",
    "Dendrogram",
    "Denominator",
    "DensityGraphics",
    "DensityHistogram",
    "DensityPlot",
    "DensityPlot3D",
    "DependentVariables",
    "Deploy",
    "Deployed",
    "Depth",
    "DepthFirstScan",
    "Derivative",
    "DerivativeFilter",
    "DerivativePDETerm",
    "DerivedKey",
    "DescriptorStateSpace",
    "DesignMatrix",
    "DestroyAfterEvaluation",
    "Det",
    "DeviceClose",
    "DeviceConfigure",
    "DeviceExecute",
    "DeviceExecuteAsynchronous",
    "DeviceObject",
    "DeviceOpen",
    "DeviceOpenQ",
    "DeviceRead",
    "DeviceReadBuffer",
    "DeviceReadLatest",
    "DeviceReadList",
    "DeviceReadTimeSeries",
    "Devices",
    "DeviceStreams",
    "DeviceWrite",
    "DeviceWriteBuffer",
    "DGaussianWavelet",
    "DiacriticalPositioning",
    "Diagonal",
    "DiagonalizableMatrixQ",
    "DiagonalMatrix",
    "DiagonalMatrixQ",
    "Dialog",
    "DialogIndent",
    "DialogInput",
    "DialogLevel",
    "DialogNotebook",
    "DialogProlog",
    "DialogReturn",
    "DialogSymbols",
    "Diamond",
    "DiamondMatrix",
    "DiceDissimilarity",
    "DictionaryLookup",
    "DictionaryWordQ",
    "DifferenceDelta",
    "DifferenceOrder",
    "DifferenceQuotient",
    "DifferenceRoot",
    "DifferenceRootReduce",
    "Differences",
    "DifferentialD",
    "DifferentialRoot",
    "DifferentialRootReduce",
    "DifferentiatorFilter",
    "DiffusionPDETerm",
    "DiggleGatesPointProcess",
    "DiggleGrattonPointProcess",
    "DigitalSignature",
    "DigitBlock",
    "DigitBlockMinimum",
    "DigitCharacter",
    "DigitCount",
    "DigitQ",
    "DihedralAngle",
    "DihedralGroup",
    "Dilation",
    "DimensionalCombinations",
    "DimensionalMeshComponents",
    "DimensionReduce",
    "DimensionReducerFunction",
    "DimensionReduction",
    "Dimensions",
    "DiracComb",
    "DiracDelta",
    "DirectedEdge",
    "DirectedEdges",
    "DirectedGraph",
    "DirectedGraphQ",
    "DirectedInfinity",
    "Direction",
    "DirectionalLight",
    "Directive",
    "Directory",
    "DirectoryName",
    "DirectoryQ",
    "DirectoryStack",
    "DirichletBeta",
    "DirichletCharacter",
    "DirichletCondition",
    "DirichletConvolve",
    "DirichletDistribution",
    "DirichletEta",
    "DirichletL",
    "DirichletLambda",
    "DirichletTransform",
    "DirichletWindow",
    "DisableConsolePrintPacket",
    "DisableFormatting",
    "DiscreteAsymptotic",
    "DiscreteChirpZTransform",
    "DiscreteConvolve",
    "DiscreteDelta",
    "DiscreteHadamardTransform",
    "DiscreteIndicator",
    "DiscreteInputOutputModel",
    "DiscreteLimit",
    "DiscreteLQEstimatorGains",
    "DiscreteLQRegulatorGains",
    "DiscreteLyapunovSolve",
    "DiscreteMarkovProcess",
    "DiscreteMaxLimit",
    "DiscreteMinLimit",
    "DiscretePlot",
    "DiscretePlot3D",
    "DiscreteRatio",
    "DiscreteRiccatiSolve",
    "DiscreteShift",
    "DiscreteTimeModelQ",
    "DiscreteUniformDistribution",
    "DiscreteVariables",
    "DiscreteWaveletData",
    "DiscreteWaveletPacketTransform",
    "DiscreteWaveletTransform",
    "DiscretizeGraphics",
    "DiscretizeRegion",
    "Discriminant",
    "DisjointQ",
    "Disjunction",
    "Disk",
    "DiskBox",
    "DiskBoxOptions",
    "DiskMatrix",
    "DiskSegment",
    "Dispatch",
    "DispatchQ",
    "DispersionEstimatorFunction",
    "Display",
    "DisplayAllSteps",
    "DisplayEndPacket",
    "DisplayForm",
    "DisplayFunction",
    "DisplayPacket",
    "DisplayRules",
    "DisplayString",
    "DisplayTemporary",
    "DisplayWith",
    "DisplayWithRef",
    "DisplayWithVariable",
    "DistanceFunction",
    "DistanceMatrix",
    "DistanceTransform",
    "Distribute",
    "Distributed",
    "DistributedContexts",
    "DistributeDefinitions",
    "DistributionChart",
    "DistributionDomain",
    "DistributionFitTest",
    "DistributionParameterAssumptions",
    "DistributionParameterQ",
    "Dithering",
    "Div",
    "Divergence",
    "Divide",
    "DivideBy",
    "Dividers",
    "DivideSides",
    "Divisible",
    "Divisors",
    "DivisorSigma",
    "DivisorSum",
    "DMSList",
    "DMSString",
    "Do",
    "DockedCell",
    "DockedCells",
    "DocumentGenerator",
    "DocumentGeneratorInformation",
    "DocumentGeneratorInformationData",
    "DocumentGenerators",
    "DocumentNotebook",
    "DocumentWeightingRules",
    "Dodecahedron",
    "DomainRegistrationInformation",
    "DominantColors",
    "DominatorTreeGraph",
    "DominatorVertexList",
    "DOSTextFormat",
    "Dot",
    "DotDashed",
    "DotEqual",
    "DotLayer",
    "DotPlusLayer",
    "Dotted",
    "DoubleBracketingBar",
    "DoubleContourIntegral",
    "DoubleDownArrow",
    "DoubleLeftArrow",
    "DoubleLeftRightArrow",
    "DoubleLeftTee",
    "DoubleLongLeftArrow",
    "DoubleLongLeftRightArrow",
    "DoubleLongRightArrow",
    "DoubleRightArrow",
    "DoubleRightTee",
    "DoubleUpArrow",
    "DoubleUpDownArrow",
    "DoubleVerticalBar",
    "DoublyInfinite",
    "Down",
    "DownArrow",
    "DownArrowBar",
    "DownArrowUpArrow",
    "DownLeftRightVector",
    "DownLeftTeeVector",
    "DownLeftVector",
    "DownLeftVectorBar",
    "DownRightTeeVector",
    "DownRightVector",
    "DownRightVectorBar",
    "Downsample",
    "DownTee",
    "DownTeeArrow",
    "DownValues",
    "DownValuesFunction",
    "DragAndDrop",
    "DrawBackFaces",
    "DrawEdges",
    "DrawFrontFaces",
    "DrawHighlighted",
    "DrazinInverse",
    "Drop",
    "DropoutLayer",
    "DropShadowing",
    "DSolve",
    "DSolveChangeVariables",
    "DSolveValue",
    "Dt",
    "DualLinearProgramming",
    "DualPlanarGraph",
    "DualPolyhedron",
    "DualSystemsModel",
    "DumpGet",
    "DumpSave",
    "DuplicateFreeQ",
    "Duration",
    "Dynamic",
    "DynamicBox",
    "DynamicBoxOptions",
    "DynamicEvaluationTimeout",
    "DynamicGeoGraphics",
    "DynamicImage",
    "DynamicLocation",
    "DynamicModule",
    "DynamicModuleBox",
    "DynamicModuleBoxOptions",
    "DynamicModuleParent",
    "DynamicModuleValues",
    "DynamicName",
    "DynamicNamespace",
    "DynamicReference",
    "DynamicSetting",
    "DynamicUpdating",
    "DynamicWrapper",
    "DynamicWrapperBox",
    "DynamicWrapperBoxOptions",
    "E",
    "EarthImpactData",
    "EarthquakeData",
    "EccentricityCentrality",
    "Echo",
    "EchoEvaluation",
    "EchoFunction",
    "EchoLabel",
    "EchoTiming",
    "EclipseType",
    "EdgeAdd",
    "EdgeBetweennessCentrality",
    "EdgeCapacity",
    "EdgeCapForm",
    "EdgeChromaticNumber",
    "EdgeColor",
    "EdgeConnectivity",
    "EdgeContract",
    "EdgeCost",
    "EdgeCount",
    "EdgeCoverQ",
    "EdgeCycleMatrix",
    "EdgeDashing",
    "EdgeDelete",
    "EdgeDetect",
    "EdgeForm",
    "EdgeIndex",
    "EdgeJoinForm",
    "EdgeLabeling",
    "EdgeLabels",
    "EdgeLabelStyle",
    "EdgeList",
    "EdgeOpacity",
    "EdgeQ",
    "EdgeRenderingFunction",
    "EdgeRules",
    "EdgeShapeFunction",
    "EdgeStyle",
    "EdgeTaggedGraph",
    "EdgeTaggedGraphQ",
    "EdgeTags",
    "EdgeThickness",
    "EdgeTransitiveGraphQ",
    "EdgeValueRange",
    "EdgeValueSizes",
    "EdgeWeight",
    "EdgeWeightedGraphQ",
    "Editable",
    "EditButtonSettings",
    "EditCellTagsSettings",
    "EditDistance",
    "EffectiveInterest",
    "Eigensystem",
    "Eigenvalues",
    "EigenvectorCentrality",
    "Eigenvectors",
    "Element",
    "ElementData",
    "ElementwiseLayer",
    "ElidedForms",
    "Eliminate",
    "EliminationOrder",
    "Ellipsoid",
    "EllipticE",
    "EllipticExp",
    "EllipticExpPrime",
    "EllipticF",
    "EllipticFilterModel",
    "EllipticK",
    "EllipticLog",
    "EllipticNomeQ",
    "EllipticPi",
    "EllipticReducedHalfPeriods",
    "EllipticTheta",
    "EllipticThetaPrime",
    "EmbedCode",
    "EmbeddedHTML",
    "EmbeddedService",
    "EmbeddedSQLEntityClass",
    "EmbeddedSQLExpression",
    "EmbeddingLayer",
    "EmbeddingObject",
    "EmitSound",
    "EmphasizeSyntaxErrors",
    "EmpiricalDistribution",
    "Empty",
    "EmptyGraphQ",
    "EmptyRegion",
    "EmptySpaceF",
    "EnableConsolePrintPacket",
    "Enabled",
    "Enclose",
    "Encode",
    "Encrypt",
    "EncryptedObject",
    "EncryptFile",
    "End",
    "EndAdd",
    "EndDialogPacket",
    "EndOfBuffer",
    "EndOfFile",
    "EndOfLine",
    "EndOfString",
    "EndPackage",
    "EngineEnvironment",
    "EngineeringForm",
    "Enter",
    "EnterExpressionPacket",
    "EnterTextPacket",
    "Entity",
    "EntityClass",
    "EntityClassList",
    "EntityCopies",
    "EntityFunction",
    "EntityGroup",
    "EntityInstance",
    "EntityList",
    "EntityPrefetch",
    "EntityProperties",
    "EntityProperty",
    "EntityPropertyClass",
    "EntityRegister",
    "EntityStore",
    "EntityStores",
    "EntityTypeName",
    "EntityUnregister",
    "EntityValue",
    "Entropy",
    "EntropyFilter",
    "Environment",
    "Epilog",
    "EpilogFunction",
    "Equal",
    "EqualColumns",
    "EqualRows",
    "EqualTilde",
    "EqualTo",
    "EquatedTo",
    "Equilibrium",
    "EquirippleFilterKernel",
    "Equivalent",
    "Erf",
    "Erfc",
    "Erfi",
    "ErlangB",
    "ErlangC",
    "ErlangDistribution",
    "Erosion",
    "ErrorBox",
    "ErrorBoxOptions",
    "ErrorNorm",
    "ErrorPacket",
    "ErrorsDialogSettings",
    "EscapeRadius",
    "EstimatedBackground",
    "EstimatedDistribution",
    "EstimatedPointNormals",
    "EstimatedPointProcess",
    "EstimatedProcess",
    "EstimatedVariogramModel",
    "EstimatorGains",
    "EstimatorRegulator",
    "EuclideanDistance",
    "EulerAngles",
    "EulerCharacteristic",
    "EulerE",
    "EulerGamma",
    "EulerianGraphQ",
    "EulerMatrix",
    "EulerPhi",
    "Evaluatable",
    "Evaluate",
    "Evaluated",
    "EvaluatePacket",
    "EvaluateScheduledTask",
    "EvaluationBox",
    "EvaluationCell",
    "EvaluationCompletionAction",
    "EvaluationData",
    "EvaluationElements",
    "EvaluationEnvironment",
    "EvaluationMode",
    "EvaluationMonitor",
    "EvaluationNotebook",
    "EvaluationObject",
    "EvaluationOrder",
    "EvaluationPrivileges",
    "EvaluationRateLimit",
    "Evaluator",
    "EvaluatorNames",
    "EvenQ",
    "EventData",
    "EventEvaluator",
    "EventHandler",
    "EventHandlerTag",
    "EventLabels",
    "EventSeries",
    "ExactBlackmanWindow",
    "ExactNumberQ",
    "ExactRootIsolation",
    "ExampleData",
    "Except",
    "ExcludedContexts",
    "ExcludedForms",
    "ExcludedLines",
    "ExcludedPhysicalQuantities",
    "ExcludePods",
    "Exclusions",
    "ExclusionsStyle",
    "Exists",
    "Exit",
    "ExitDialog",
    "ExoplanetData",
    "Exp",
    "Expand",
    "ExpandAll",
    "ExpandDenominator",
    "ExpandFileName",
    "ExpandNumerator",
    "Expectation",
    "ExpectationE",
    "ExpectedValue",
    "ExpGammaDistribution",
    "ExpIntegralE",
    "ExpIntegralEi",
    "ExpirationDate",
    "Exponent",
    "ExponentFunction",
    "ExponentialDistribution",
    "ExponentialFamily",
    "ExponentialGeneratingFunction",
    "ExponentialMovingAverage",
    "ExponentialPowerDistribution",
    "ExponentPosition",
    "ExponentStep",
    "Export",
    "ExportAutoReplacements",
    "ExportByteArray",
    "ExportForm",
    "ExportPacket",
    "ExportString",
    "Expression",
    "ExpressionCell",
    "ExpressionGraph",
    "ExpressionPacket",
    "ExpressionTree",
    "ExpressionUUID",
    "ExpToTrig",
    "ExtendedEntityClass",
    "ExtendedGCD",
    "Extension",
    "ExtentElementFunction",
    "ExtentMarkers",
    "ExtentSize",
    "ExternalBundle",
    "ExternalCall",
    "ExternalDataCharacterEncoding",
    "ExternalEvaluate",
    "ExternalFunction",
    "ExternalFunctionName",
    "ExternalIdentifier",
    "ExternalObject",
    "ExternalOptions",
    "ExternalSessionObject",
    "ExternalSessions",
    "ExternalStorageBase",
    "ExternalStorageDownload",
    "ExternalStorageGet",
    "ExternalStorageObject",
    "ExternalStoragePut",
    "ExternalStorageUpload",
    "ExternalTypeSignature",
    "ExternalValue",
    "Extract",
    "ExtractArchive",
    "ExtractLayer",
    "ExtractPacletArchive",
    "ExtremeValueDistribution",
    "FaceAlign",
    "FaceForm",
    "FaceGrids",
    "FaceGridsStyle",
    "FaceRecognize",
    "FacialFeatures",
    "Factor",
    "FactorComplete",
    "Factorial",
    "Factorial2",
    "FactorialMoment",
    "FactorialMomentGeneratingFunction",
    "FactorialPower",
    "FactorInteger",
    "FactorList",
    "FactorSquareFree",
    "FactorSquareFreeList",
    "FactorTerms",
    "FactorTermsList",
    "Fail",
    "Failure",
    "FailureAction",
    "FailureDistribution",
    "FailureQ",
    "False",
    "FareySequence",
    "FARIMAProcess",
    "FeatureDistance",
    "FeatureExtract",
    "FeatureExtraction",
    "FeatureExtractor",
    "FeatureExtractorFunction",
    "FeatureImpactPlot",
    "FeatureNames",
    "FeatureNearest",
    "FeatureSpacePlot",
    "FeatureSpacePlot3D",
    "FeatureTypes",
    "FeatureValueDependencyPlot",
    "FeatureValueImpactPlot",
    "FEDisableConsolePrintPacket",
    "FeedbackLinearize",
    "FeedbackSector",
    "FeedbackSectorStyle",
    "FeedbackType",
    "FEEnableConsolePrintPacket",
    "FetalGrowthData",
    "Fibonacci",
    "Fibonorial",
    "FieldCompletionFunction",
    "FieldHint",
    "FieldHintStyle",
    "FieldMasked",
    "FieldSize",
    "File",
    "FileBaseName",
    "FileByteCount",
    "FileConvert",
    "FileDate",
    "FileExistsQ",
    "FileExtension",
    "FileFormat",
    "FileFormatProperties",
    "FileFormatQ",
    "FileHandler",
    "FileHash",
    "FileInformation",
    "FileName",
    "FileNameDepth",
    "FileNameDialogSettings",
    "FileNameDrop",
    "FileNameForms",
    "FileNameJoin",
    "FileNames",
    "FileNameSetter",
    "FileNameSplit",
    "FileNameTake",
    "FileNameToFormatList",
    "FilePrint",
    "FileSize",
    "FileSystemMap",
    "FileSystemScan",
    "FileSystemTree",
    "FileTemplate",
    "FileTemplateApply",
    "FileType",
    "FilledCurve",
    "FilledCurveBox",
    "FilledCurveBoxOptions",
    "FilledTorus",
    "FillForm",
    "Filling",
    "FillingStyle",
    "FillingTransform",
    "FilteredEntityClass",
    "FilterRules",
    "FinancialBond",
    "FinancialData",
    "FinancialDerivative",
    "FinancialIndicator",
    "Find",
    "FindAnomalies",
    "FindArgMax",
    "FindArgMin",
    "FindChannels",
    "FindClique",
    "FindClusters",
    "FindCookies",
    "FindCurvePath",
    "FindCycle",
    "FindDevices",
    "FindDistribution",
    "FindDistributionParameters",
    "FindDivisions",
    "FindEdgeColoring",
    "FindEdgeCover",
    "FindEdgeCut",
    "FindEdgeIndependentPaths",
    "FindEquationalProof",
    "FindEulerianCycle",
    "FindExternalEvaluators",
    "FindFaces",
    "FindFile",
    "FindFit",
    "FindFormula",
    "FindFundamentalCycles",
    "FindGeneratingFunction",
    "FindGeoLocation",
    "FindGeometricConjectures",
    "FindGeometricTransform",
    "FindGraphCommunities",
    "FindGraphIsomorphism",
    "FindGraphPartition",
    "FindHamiltonianCycle",
    "FindHamiltonianPath",
    "FindHiddenMarkovStates",
    "FindImageText",
    "FindIndependentEdgeSet",
    "FindIndependentVertexSet",
    "FindInstance",
    "FindIntegerNullVector",
    "FindIsomers",
    "FindIsomorphicSubgraph",
    "FindKClan",
    "FindKClique",
    "FindKClub",
    "FindKPlex",
    "FindLibrary",
    "FindLinearRecurrence",
    "FindList",
    "FindMatchingColor",
    "FindMaximum",
    "FindMaximumCut",
    "FindMaximumFlow",
    "FindMaxValue",
    "FindMeshDefects",
    "FindMinimum",
    "FindMinimumCostFlow",
    "FindMinimumCut",
    "FindMinValue",
    "FindMoleculeSubstructure",
    "FindPath",
    "FindPeaks",
    "FindPermutation",
    "FindPlanarColoring",
    "FindPointProcessParameters",
    "FindPostmanTour",
    "FindProcessParameters",
    "FindRegionTransform",
    "FindRepeat",
    "FindRoot",
    "FindSequenceFunction",
    "FindSettings",
    "FindShortestPath",
    "FindShortestTour",
    "FindSpanningTree",
    "FindSubgraphIsomorphism",
    "FindSystemModelEquilibrium",
    "FindTextualAnswer",
    "FindThreshold",
    "FindTransientRepeat",
    "FindVertexColoring",
    "FindVertexCover",
    "FindVertexCut",
    "FindVertexIndependentPaths",
    "Fine",
    "FinishDynamic",
    "FiniteAbelianGroupCount",
    "FiniteGroupCount",
    "FiniteGroupData",
    "First",
    "FirstCase",
    "FirstPassageTimeDistribution",
    "FirstPosition",
    "FischerGroupFi22",
    "FischerGroupFi23",
    "FischerGroupFi24Prime",
    "FisherHypergeometricDistribution",
    "FisherRatioTest",
    "FisherZDistribution",
    "Fit",
    "FitAll",
    "FitRegularization",
    "FittedModel",
    "FixedOrder",
    "FixedPoint",
    "FixedPointList",
    "FlashSelection",
    "Flat",
    "FlatShading",
    "Flatten",
    "FlattenAt",
    "FlattenLayer",
    "FlatTopWindow",
    "FlightData",
    "FlipView",
    "Floor",
    "FlowPolynomial",
    "Fold",
    "FoldList",
    "FoldPair",
    "FoldPairList",
    "FoldWhile",
    "FoldWhileList",
    "FollowRedirects",
    "Font",
    "FontColor",
    "FontFamily",
    "FontForm",
    "FontName",
    "FontOpacity",
    "FontPostScriptName",
    "FontProperties",
    "FontReencoding",
    "FontSize",
    "FontSlant",
    "FontSubstitutions",
    "FontTracking",
    "FontVariations",
    "FontWeight",
    "For",
    "ForAll",
    "ForAllType",
    "ForceVersionInstall",
    "Format",
    "FormatRules",
    "FormatType",
    "FormatTypeAutoConvert",
    "FormatValues",
    "FormBox",
    "FormBoxOptions",
    "FormControl",
    "FormFunction",
    "FormLayoutFunction",
    "FormObject",
    "FormPage",
    "FormProtectionMethod",
    "FormTheme",
    "FormulaData",
    "FormulaLookup",
    "FortranForm",
    "Forward",
    "ForwardBackward",
    "ForwardCloudCredentials",
    "Fourier",
    "FourierCoefficient",
    "FourierCosCoefficient",
    "FourierCosSeries",
    "FourierCosTransform",
    "FourierDCT",
    "FourierDCTFilter",
    "FourierDCTMatrix",
    "FourierDST",
    "FourierDSTMatrix",
    "FourierMatrix",
    "FourierParameters",
    "FourierSequenceTransform",
    "FourierSeries",
    "FourierSinCoefficient",
    "FourierSinSeries",
    "FourierSinTransform",
    "FourierTransform",
    "FourierTrigSeries",
    "FoxH",
    "FoxHReduce",
    "FractionalBrownianMotionProcess",
    "FractionalD",
    "FractionalGaussianNoiseProcess",
    "FractionalPart",
    "FractionBox",
    "FractionBoxOptions",
    "FractionLine",
    "Frame",
    "FrameBox",
    "FrameBoxOptions",
    "Framed",
    "FrameInset",
    "FrameLabel",
    "Frameless",
    "FrameListVideo",
    "FrameMargins",
    "FrameRate",
    "FrameStyle",
    "FrameTicks",
    "FrameTicksStyle",
    "FRatioDistribution",
    "FrechetDistribution",
    "FreeQ",
    "FrenetSerretSystem",
    "FrequencySamplingFilterKernel",
    "FresnelC",
    "FresnelF",
    "FresnelG",
    "FresnelS",
    "Friday",
    "FrobeniusNumber",
    "FrobeniusSolve",
    "FromAbsoluteTime",
    "FromCharacterCode",
    "FromCoefficientRules",
    "FromContinuedFraction",
    "FromDate",
    "FromDateString",
    "FromDigits",
    "FromDMS",
    "FromEntity",
    "FromJulianDate",
    "FromLetterNumber",
    "FromPolarCoordinates",
    "FromRawPointer",
    "FromRomanNumeral",
    "FromSphericalCoordinates",
    "FromUnixTime",
    "Front",
    "FrontEndDynamicExpression",
    "FrontEndEventActions",
    "FrontEndExecute",
    "FrontEndObject",
    "FrontEndResource",
    "FrontEndResourceString",
    "FrontEndStackSize",
    "FrontEndToken",
    "FrontEndTokenExecute",
    "FrontEndValueCache",
    "FrontEndVersion",
    "FrontFaceColor",
    "FrontFaceGlowColor",
    "FrontFaceOpacity",
    "FrontFaceSpecularColor",
    "FrontFaceSpecularExponent",
    "FrontFaceSurfaceAppearance",
    "FrontFaceTexture",
    "Full",
    "FullAxes",
    "FullDefinition",
    "FullForm",
    "FullGraphics",
    "FullInformationOutputRegulator",
    "FullOptions",
    "FullRegion",
    "FullSimplify",
    "Function",
    "FunctionAnalytic",
    "FunctionBijective",
    "FunctionCompile",
    "FunctionCompileExport",
    "FunctionCompileExportByteArray",
    "FunctionCompileExportLibrary",
    "FunctionCompileExportString",
    "FunctionContinuous",
    "FunctionConvexity",
    "FunctionDeclaration",
    "FunctionDiscontinuities",
    "FunctionDomain",
    "FunctionExpand",
    "FunctionInjective",
    "FunctionInterpolation",
    "FunctionLayer",
    "FunctionMeromorphic",
    "FunctionMonotonicity",
    "FunctionPeriod",
    "FunctionPoles",
    "FunctionRange",
    "FunctionSign",
    "FunctionSingularities",
    "FunctionSpace",
    "FunctionSurjective",
    "FussellVeselyImportance",
    "GaborFilter",
    "GaborMatrix",
    "GaborWavelet",
    "GainMargins",
    "GainPhaseMargins",
    "GalaxyData",
    "GalleryView",
    "Gamma",
    "GammaDistribution",
    "GammaRegularized",
    "GapPenalty",
    "GARCHProcess",
    "GatedRecurrentLayer",
    "Gather",
    "GatherBy",
    "GaugeFaceElementFunction",
    "GaugeFaceStyle",
    "GaugeFrameElementFunction",
    "GaugeFrameSize",
    "GaugeFrameStyle",
    "GaugeLabels",
    "GaugeMarkers",
    "GaugeStyle",
    "GaussianFilter",
    "GaussianIntegers",
    "GaussianMatrix",
    "GaussianOrthogonalMatrixDistribution",
    "GaussianSymplecticMatrixDistribution",
    "GaussianUnitaryMatrixDistribution",
    "GaussianWindow",
    "GCD",
    "GegenbauerC",
    "General",
    "GeneralizedLinearModelFit",
    "GenerateAsymmetricKeyPair",
    "GenerateConditions",
    "GeneratedAssetFormat",
    "GeneratedAssetLocation",
    "GeneratedCell",
    "GeneratedCellStyles",
    "GeneratedDocumentBinding",
    "GenerateDerivedKey",
    "GenerateDigitalSignature",
    "GenerateDocument",
    "GeneratedParameters",
    "GeneratedQuantityMagnitudes",
    "GenerateFileSignature",
    "GenerateHTTPResponse",
    "GenerateSecuredAuthenticationKey",
    "GenerateSymmetricKey",
    "GeneratingFunction",
    "GeneratorDescription",
    "GeneratorHistoryLength",
    "GeneratorOutputType",
    "Generic",
    "GenericCylindricalDecomposition",
    "GenomeData",
    "GenomeLookup",
    "GeoAntipode",
    "GeoArea",
    "GeoArraySize",
    "GeoBackground",
    "GeoBoundary",
    "GeoBoundingBox",
    "GeoBounds",
    "GeoBoundsRegion",
    "GeoBoundsRegionBoundary",
    "GeoBubbleChart",
    "GeoCenter",
    "GeoCircle",
    "GeoContourPlot",
    "GeoDensityPlot",
    "GeodesicClosing",
    "GeodesicDilation",
    "GeodesicErosion",
    "GeodesicOpening",
    "GeodesicPolyhedron",
    "GeoDestination",
    "GeodesyData",
    "GeoDirection",
    "GeoDisk",
    "GeoDisplacement",
    "GeoDistance",
    "GeoDistanceList",
    "GeoElevationData",
    "GeoEntities",
    "GeoGraphics",
    "GeoGraphPlot",
    "GeoGraphValuePlot",
    "GeogravityModelData",
    "GeoGridDirectionDifference",
    "GeoGridLines",
    "GeoGridLinesStyle",
    "GeoGridPosition",
    "GeoGridRange",
    "GeoGridRangePadding",
    "GeoGridUnitArea",
    "GeoGridUnitDistance",
    "GeoGridVector",
    "GeoGroup",
    "GeoHemisphere",
    "GeoHemisphereBoundary",
    "GeoHistogram",
    "GeoIdentify",
    "GeoImage",
    "GeoLabels",
    "GeoLength",
    "GeoListPlot",
    "GeoLocation",
    "GeologicalPeriodData",
    "GeomagneticModelData",
    "GeoMarker",
    "GeometricAssertion",
    "GeometricBrownianMotionProcess",
    "GeometricDistribution",
    "GeometricMean",
    "GeometricMeanFilter",
    "GeometricOptimization",
    "GeometricScene",
    "GeometricStep",
    "GeometricStylingRules",
    "GeometricTest",
    "GeometricTransformation",
    "GeometricTransformation3DBox",
    "GeometricTransformation3DBoxOptions",
    "GeometricTransformationBox",
    "GeometricTransformationBoxOptions",
    "GeoModel",
    "GeoNearest",
    "GeoOrientationData",
    "GeoPath",
    "GeoPolygon",
    "GeoPosition",
    "GeoPositionENU",
    "GeoPositionXYZ",
    "GeoProjection",
    "GeoProjectionData",
    "GeoRange",
    "GeoRangePadding",
    "GeoRegionValuePlot",
    "GeoResolution",
    "GeoScaleBar",
    "GeoServer",
    "GeoSmoothHistogram",
    "GeoStreamPlot",
    "GeoStyling",
    "GeoStylingImageFunction",
    "GeoVariant",
    "GeoVector",
    "GeoVectorENU",
    "GeoVectorPlot",
    "GeoVectorXYZ",
    "GeoVisibleRegion",
    "GeoVisibleRegionBoundary",
    "GeoWithinQ",
    "GeoZoomLevel",
    "GestureHandler",
    "GestureHandlerTag",
    "Get",
    "GetContext",
    "GetEnvironment",
    "GetFileName",
    "GetLinebreakInformationPacket",
    "GibbsPointProcess",
    "Glaisher",
    "GlobalClusteringCoefficient",
    "GlobalPreferences",
    "GlobalSession",
    "Glow",
    "GoldenAngle",
    "GoldenRatio",
    "GompertzMakehamDistribution",
    "GoochShading",
    "GoodmanKruskalGamma",
    "GoodmanKruskalGammaTest",
    "Goto",
    "GouraudShading",
    "Grad",
    "Gradient",
    "GradientFilter",
    "GradientFittedMesh",
    "GradientOrientationFilter",
    "GrammarApply",
    "GrammarRules",
    "GrammarToken",
    "Graph",
    "Graph3D",
    "GraphAssortativity",
    "GraphAutomorphismGroup",
    "GraphCenter",
    "GraphComplement",
    "GraphData",
    "GraphDensity",
    "GraphDiameter",
    "GraphDifference",
    "GraphDisjointUnion",
    "GraphDistance",
    "GraphDistanceMatrix",
    "GraphEmbedding",
    "GraphHighlight",
    "GraphHighlightStyle",
    "GraphHub",
    "Graphics",
    "Graphics3D",
    "Graphics3DBox",
    "Graphics3DBoxOptions",
    "GraphicsArray",
    "GraphicsBaseline",
    "GraphicsBox",
    "GraphicsBoxOptions",
    "GraphicsColor",
    "GraphicsColumn",
    "GraphicsComplex",
    "GraphicsComplex3DBox",
    "GraphicsComplex3DBoxOptions",
    "GraphicsComplexBox",
    "GraphicsComplexBoxOptions",
    "GraphicsContents",
    "GraphicsData",
    "GraphicsGrid",
    "GraphicsGridBox",
    "GraphicsGroup",
    "GraphicsGroup3DBox",
    "GraphicsGroup3DBoxOptions",
    "GraphicsGroupBox",
    "GraphicsGroupBoxOptions",
    "GraphicsGrouping",
    "GraphicsHighlightColor",
    "GraphicsRow",
    "GraphicsSpacing",
    "GraphicsStyle",
    "GraphIntersection",
    "GraphJoin",
    "GraphLayerLabels",
    "GraphLayers",
    "GraphLayerStyle",
    "GraphLayout",
    "GraphLinkEfficiency",
    "GraphPeriphery",
    "GraphPlot",
    "GraphPlot3D",
    "GraphPower",
    "GraphProduct",
    "GraphPropertyDistribution",
    "GraphQ",
    "GraphRadius",
    "GraphReciprocity",
    "GraphRoot",
    "GraphStyle",
    "GraphSum",
    "GraphTree",
    "GraphUnion",
    "Gray",
    "GrayLevel",
    "Greater",
    "GreaterEqual",
    "GreaterEqualLess",
    "GreaterEqualThan",
    "GreaterFullEqual",
    "GreaterGreater",
    "GreaterLess",
    "GreaterSlantEqual",
    "GreaterThan",
    "GreaterTilde",
    "GreekStyle",
    "Green",
    "GreenFunction",
    "Grid",
    "GridBaseline",
    "GridBox",
    "GridBoxAlignment",
    "GridBoxBackground",
    "GridBoxDividers",
    "GridBoxFrame",
    "GridBoxItemSize",
    "GridBoxItemStyle",
    "GridBoxOptions",
    "GridBoxSpacings",
    "GridCreationSettings",
    "GridDefaultElement",
    "GridElementStyleOptions",
    "GridFrame",
    "GridFrameMargins",
    "GridGraph",
    "GridLines",
    "GridLinesStyle",
    "GridVideo",
    "GroebnerBasis",
    "GroupActionBase",
    "GroupBy",
    "GroupCentralizer",
    "GroupElementFromWord",
    "GroupElementPosition",
    "GroupElementQ",
    "GroupElements",
    "GroupElementToWord",
    "GroupGenerators",
    "Groupings",
    "GroupMultiplicationTable",
    "GroupOpenerColor",
    "GroupOpenerInsideFrame",
    "GroupOrbits",
    "GroupOrder",
    "GroupPageBreakWithin",
    "GroupSetwiseStabilizer",
    "GroupStabilizer",
    "GroupStabilizerChain",
    "GroupTogetherGrouping",
    "GroupTogetherNestedGrouping",
    "GrowCutComponents",
    "Gudermannian",
    "GuidedFilter",
    "GumbelDistribution",
    "HaarWavelet",
    "HadamardMatrix",
    "HalfLine",
    "HalfNormalDistribution",
    "HalfPlane",
    "HalfSpace",
    "HalftoneShading",
    "HamiltonianGraphQ",
    "HammingDistance",
    "HammingWindow",
    "HandlerFunctions",
    "HandlerFunctionsKeys",
    "HankelH1",
    "HankelH2",
    "HankelMatrix",
    "HankelTransform",
    "HannPoissonWindow",
    "HannWindow",
    "HaradaNortonGroupHN",
    "HararyGraph",
    "HardcorePointProcess",
    "HarmonicMean",
    "HarmonicMeanFilter",
    "HarmonicNumber",
    "Hash",
    "HatchFilling",
    "HatchShading",
    "Haversine",
    "HazardFunction",
    "Head",
    "HeadCompose",
    "HeaderAlignment",
    "HeaderBackground",
    "HeaderDisplayFunction",
    "HeaderLines",
    "Headers",
    "HeaderSize",
    "HeaderStyle",
    "Heads",
    "HeatFluxValue",
    "HeatInsulationValue",
    "HeatOutflowValue",
    "HeatRadiationValue",
    "HeatSymmetryValue",
    "HeatTemperatureCondition",
    "HeatTransferPDEComponent",
    "HeatTransferValue",
    "HeavisideLambda",
    "HeavisidePi",
    "HeavisideTheta",
    "HeldGroupHe",
    "HeldPart",
    "HelmholtzPDEComponent",
    "HelpBrowserLookup",
    "HelpBrowserNotebook",
    "HelpBrowserSettings",
    "HelpViewerSettings",
    "Here",
    "HermiteDecomposition",
    "HermiteH",
    "Hermitian",
    "HermitianMatrixQ",
    "HessenbergDecomposition",
    "Hessian",
    "HeunB",
    "HeunBPrime",
    "HeunC",
    "HeunCPrime",
    "HeunD",
    "HeunDPrime",
    "HeunG",
    "HeunGPrime",
    "HeunT",
    "HeunTPrime",
    "HexadecimalCharacter",
    "Hexahedron",
    "HexahedronBox",
    "HexahedronBoxOptions",
    "HiddenItems",
    "HiddenMarkovProcess",
    "HiddenSurface",
    "Highlighted",
    "HighlightGraph",
    "HighlightImage",
    "HighlightMesh",
    "HighlightString",
    "HighpassFilter",
    "HigmanSimsGroupHS",
    "HilbertCurve",
    "HilbertFilter",
    "HilbertMatrix",
    "Histogram",
    "Histogram3D",
    "HistogramDistribution",
    "HistogramList",
    "HistogramPointDensity",
    "HistogramTransform",
    "HistogramTransformInterpolation",
    "HistoricalPeriodData",
    "HitMissTransform",
    "HITSCentrality",
    "HjorthDistribution",
    "HodgeDual",
    "HoeffdingD",
    "HoeffdingDTest",
    "Hold",
    "HoldAll",
    "HoldAllComplete",
    "HoldComplete",
    "HoldFirst",
    "HoldForm",
    "HoldPattern",
    "HoldRest",
    "HolidayCalendar",
    "HomeDirectory",
    "HomePage",
    "Horizontal",
    "HorizontalForm",
    "HorizontalGauge",
    "HorizontalScrollPosition",
    "HornerForm",
    "HostLookup",
    "HotellingTSquareDistribution",
    "HoytDistribution",
    "HTMLSave",
    "HTTPErrorResponse",
    "HTTPRedirect",
    "HTTPRequest",
    "HTTPRequestData",
    "HTTPResponse",
    "Hue",
    "HumanGrowthData",
    "HumpDownHump",
    "HumpEqual",
    "HurwitzLerchPhi",
    "HurwitzZeta",
    "HyperbolicDistribution",
    "HypercubeGraph",
    "HyperexponentialDistribution",
    "Hyperfactorial",
    "Hypergeometric0F1",
    "Hypergeometric0F1Regularized",
    "Hypergeometric1F1",
    "Hypergeometric1F1Regularized",
    "Hypergeometric2F1",
    "Hypergeometric2F1Regularized",
    "HypergeometricDistribution",
    "HypergeometricPFQ",
    "HypergeometricPFQRegularized",
    "HypergeometricU",
    "Hyperlink",
    "HyperlinkAction",
    "HyperlinkCreationSettings",
    "Hyperplane",
    "Hyphenation",
    "HyphenationOptions",
    "HypoexponentialDistribution",
    "HypothesisTestData",
    "I",
    "IconData",
    "Iconize",
    "IconizedObject",
    "IconRules",
    "Icosahedron",
    "Identity",
    "IdentityMatrix",
    "If",
    "IfCompiled",
    "IgnoreCase",
    "IgnoreDiacritics",
    "IgnoreIsotopes",
    "IgnorePunctuation",
    "IgnoreSpellCheck",
    "IgnoreStereochemistry",
    "IgnoringInactive",
    "Im",
    "Image",
    "Image3D",
    "Image3DProjection",
    "Image3DSlices",
    "ImageAccumulate",
    "ImageAdd",
    "ImageAdjust",
    "ImageAlign",
    "ImageApply",
    "ImageApplyIndexed",
    "ImageAspectRatio",
    "ImageAssemble",
    "ImageAugmentationLayer",
    "ImageBoundingBoxes",
    "ImageCache",
    "ImageCacheValid",
    "ImageCapture",
    "ImageCaptureFunction",
    "ImageCases",
    "ImageChannels",
    "ImageClip",
    "ImageCollage",
    "ImageColorSpace",
    "ImageCompose",
    "ImageContainsQ",
    "ImageContents",
    "ImageConvolve",
    "ImageCooccurrence",
    "ImageCorners",
    "ImageCorrelate",
    "ImageCorrespondingPoints",
    "ImageCrop",
    "ImageData",
    "ImageDeconvolve",
    "ImageDemosaic",
    "ImageDifference",
    "ImageDimensions",
    "ImageDisplacements",
    "ImageDistance",
    "ImageEditMode",
    "ImageEffect",
    "ImageExposureCombine",
    "ImageFeatureTrack",
    "ImageFileApply",
    "ImageFileFilter",
    "ImageFileScan",
    "ImageFilter",
    "ImageFocusCombine",
    "ImageForestingComponents",
    "ImageFormattingWidth",
    "ImageForwardTransformation",
    "ImageGraphics",
    "ImageHistogram",
    "ImageIdentify",
    "ImageInstanceQ",
    "ImageKeypoints",
    "ImageLabels",
    "ImageLegends",
    "ImageLevels",
    "ImageLines",
    "ImageMargins",
    "ImageMarker",
    "ImageMarkers",
    "ImageMeasurements",
    "ImageMesh",
    "ImageMultiply",
    "ImageOffset",
    "ImagePad",
    "ImagePadding",
    "ImagePartition",
    "ImagePeriodogram",
    "ImagePerspectiveTransformation",
    "ImagePosition",
    "ImagePreviewFunction",
    "ImagePyramid",
    "ImagePyramidApply",
    "ImageQ",
    "ImageRangeCache",
    "ImageRecolor",
    "ImageReflect",
    "ImageRegion",
    "ImageResize",
    "ImageResolution",
    "ImageRestyle",
    "ImageRotate",
    "ImageRotated",
    "ImageSaliencyFilter",
    "ImageScaled",
    "ImageScan",
    "ImageSize",
    "ImageSizeAction",
    "ImageSizeCache",
    "ImageSizeMultipliers",
    "ImageSizeRaw",
    "ImageStitch",
    "ImageSubtract",
    "ImageTake",
    "ImageTransformation",
    "ImageTrim",
    "ImageType",
    "ImageValue",
    "ImageValuePositions",
    "ImageVectorscopePlot",
    "ImageWaveformPlot",
    "ImagingDevice",
    "ImplicitD",
    "ImplicitRegion",
    "Implies",
    "Import",
    "ImportAutoReplacements",
    "ImportByteArray",
    "ImportedObject",
    "ImportOptions",
    "ImportString",
    "ImprovementImportance",
    "In",
    "Inactivate",
    "Inactive",
    "InactiveStyle",
    "IncidenceGraph",
    "IncidenceList",
    "IncidenceMatrix",
    "IncludeAromaticBonds",
    "IncludeConstantBasis",
    "IncludedContexts",
    "IncludeDefinitions",
    "IncludeDirectories",
    "IncludeFileExtension",
    "IncludeGeneratorTasks",
    "IncludeHydrogens",
    "IncludeInflections",
    "IncludeMetaInformation",
    "IncludePods",
    "IncludeQuantities",
    "IncludeRelatedTables",
    "IncludeSingularSolutions",
    "IncludeSingularTerm",
    "IncludeWindowTimes",
    "Increment",
    "IndefiniteMatrixQ",
    "Indent",
    "IndentingNewlineSpacings",
    "IndentMaxFraction",
    "IndependenceTest",
    "IndependentEdgeSetQ",
    "IndependentPhysicalQuantity",
    "IndependentUnit",
    "IndependentUnitDimension",
    "IndependentVertexSetQ",
    "Indeterminate",
    "IndeterminateThreshold",
    "IndexCreationOptions",
    "Indexed",
    "IndexEdgeTaggedGraph",
    "IndexGraph",
    "IndexTag",
    "Inequality",
    "InertEvaluate",
    "InertExpression",
    "InexactNumberQ",
    "InexactNumbers",
    "InfiniteFuture",
    "InfiniteLine",
    "InfiniteLineThrough",
    "InfinitePast",
    "InfinitePlane",
    "Infinity",
    "Infix",
    "InflationAdjust",
    "InflationMethod",
    "Information",
    "InformationData",
    "InformationDataGrid",
    "Inherited",
    "InheritScope",
    "InhomogeneousPoissonPointProcess",
    "InhomogeneousPoissonProcess",
    "InitialEvaluationHistory",
    "Initialization",
    "InitializationCell",
    "InitializationCellEvaluation",
    "InitializationCellWarning",
    "InitializationObject",
    "InitializationObjects",
    "InitializationValue",
    "Initialize",
    "InitialSeeding",
    "InlineCounterAssignments",
    "InlineCounterIncrements",
    "InlineRules",
    "Inner",
    "InnerPolygon",
    "InnerPolyhedron",
    "Inpaint",
    "Input",
    "InputAliases",
    "InputAssumptions",
    "InputAutoReplacements",
    "InputField",
    "InputFieldBox",
    "InputFieldBoxOptions",
    "InputForm",
    "InputGrouping",
    "InputNamePacket",
    "InputNotebook",
    "InputPacket",
    "InputPorts",
    "InputSettings",
    "InputStream",
    "InputString",
    "InputStringPacket",
    "InputToBoxFormPacket",
    "Insert",
    "InsertionFunction",
    "InsertionPointObject",
    "InsertLinebreaks",
    "InsertResults",
    "Inset",
    "Inset3DBox",
    "Inset3DBoxOptions",
    "InsetBox",
    "InsetBoxOptions",
    "Insphere",
    "Install",
    "InstallService",
    "InstanceNormalizationLayer",
    "InString",
    "Integer",
    "IntegerDigits",
    "IntegerExponent",
    "IntegerLength",
    "IntegerName",
    "IntegerPart",
    "IntegerPartitions",
    "IntegerQ",
    "IntegerReverse",
    "Integers",
    "IntegerString",
    "Integral",
    "Integrate",
    "IntegrateChangeVariables",
    "Interactive",
    "InteractiveTradingChart",
    "InterfaceSwitched",
    "Interlaced",
    "Interleaving",
    "InternallyBalancedDecomposition",
    "InterpolatingFunction",
    "InterpolatingPolynomial",
    "Interpolation",
    "InterpolationOrder",
    "InterpolationPoints",
    "InterpolationPrecision",
    "Interpretation",
    "InterpretationBox",
    "InterpretationBoxOptions",
    "InterpretationFunction",
    "Interpreter",
    "InterpretTemplate",
    "InterquartileRange",
    "Interrupt",
    "InterruptSettings",
    "IntersectedEntityClass",
    "IntersectingQ",
    "Intersection",
    "Interval",
    "IntervalIntersection",
    "IntervalMarkers",
    "IntervalMarkersStyle",
    "IntervalMemberQ",
    "IntervalSlider",
    "IntervalUnion",
    "Into",
    "Inverse",
    "InverseBetaRegularized",
    "InverseBilateralLaplaceTransform",
    "InverseBilateralZTransform",
    "InverseCDF",
    "InverseChiSquareDistribution",
    "InverseContinuousWaveletTransform",
    "InverseDistanceTransform",
    "InverseEllipticNomeQ",
    "InverseErf",
    "InverseErfc",
    "InverseFourier",
    "InverseFourierCosTransform",
    "InverseFourierSequenceTransform",
    "InverseFourierSinTransform",
    "InverseFourierTransform",
    "InverseFunction",
    "InverseFunctions",
    "InverseGammaDistribution",
    "InverseGammaRegularized",
    "InverseGaussianDistribution",
    "InverseGudermannian",
    "InverseHankelTransform",
    "InverseHaversine",
    "InverseImagePyramid",
    "InverseJacobiCD",
    "InverseJacobiCN",
    "InverseJacobiCS",
    "InverseJacobiDC",
    "InverseJacobiDN",
    "InverseJacobiDS",
    "InverseJacobiNC",
    "InverseJacobiND",
    "InverseJacobiNS",
    "InverseJacobiSC",
    "InverseJacobiSD",
    "InverseJacobiSN",
    "InverseLaplaceTransform",
    "InverseMellinTransform",
    "InversePermutation",
    "InverseRadon",
    "InverseRadonTransform",
    "InverseSeries",
    "InverseShortTimeFourier",
    "InverseSpectrogram",
    "InverseSurvivalFunction",
    "InverseTransformedRegion",
    "InverseWaveletTransform",
    "InverseWeierstrassP",
    "InverseWishartMatrixDistribution",
    "InverseZTransform",
    "Invisible",
    "InvisibleApplication",
    "InvisibleTimes",
    "IPAddress",
    "IrreduciblePolynomialQ",
    "IslandData",
    "IsolatingInterval",
    "IsomorphicGraphQ",
    "IsomorphicSubgraphQ",
    "IsotopeData",
    "Italic",
    "Item",
    "ItemAspectRatio",
    "ItemBox",
    "ItemBoxOptions",
    "ItemDisplayFunction",
    "ItemSize",
    "ItemStyle",
    "ItoProcess",
    "JaccardDissimilarity",
    "JacobiAmplitude",
    "Jacobian",
    "JacobiCD",
    "JacobiCN",
    "JacobiCS",
    "JacobiDC",
    "JacobiDN",
    "JacobiDS",
    "JacobiEpsilon",
    "JacobiNC",
    "JacobiND",
    "JacobiNS",
    "JacobiP",
    "JacobiSC",
    "JacobiSD",
    "JacobiSN",
    "JacobiSymbol",
    "JacobiZeta",
    "JacobiZN",
    "JankoGroupJ1",
    "JankoGroupJ2",
    "JankoGroupJ3",
    "JankoGroupJ4",
    "JarqueBeraALMTest",
    "JohnsonDistribution",
    "Join",
    "JoinAcross",
    "Joined",
    "JoinedCurve",
    "JoinedCurveBox",
    "JoinedCurveBoxOptions",
    "JoinForm",
    "JordanDecomposition",
    "JordanModelDecomposition",
    "JulianDate",
    "JuliaSetBoettcher",
    "JuliaSetIterationCount",
    "JuliaSetPlot",
    "JuliaSetPoints",
    "K",
    "KagiChart",
    "KaiserBesselWindow",
    "KaiserWindow",
    "KalmanEstimator",
    "KalmanFilter",
    "KarhunenLoeveDecomposition",
    "KaryTree",
    "KatzCentrality",
    "KCoreComponents",
    "KDistribution",
    "KEdgeConnectedComponents",
    "KEdgeConnectedGraphQ",
    "KeepExistingVersion",
    "KelvinBei",
    "KelvinBer",
    "KelvinKei",
    "KelvinKer",
    "KendallTau",
    "KendallTauTest",
    "KernelConfiguration",
    "KernelExecute",
    "KernelFunction",
    "KernelMixtureDistribution",
    "KernelObject",
    "Kernels",
    "Ket",
    "Key",
    "KeyCollisionFunction",
    "KeyComplement",
    "KeyDrop",
    "KeyDropFrom",
    "KeyExistsQ",
    "KeyFreeQ",
    "KeyIntersection",
    "KeyMap",
    "KeyMemberQ",
    "KeypointStrength",
    "Keys",
    "KeySelect",
    "KeySort",
    "KeySortBy",
    "KeyTake",
    "KeyUnion",
    "KeyValueMap",
    "KeyValuePattern",
    "Khinchin",
    "KillProcess",
    "KirchhoffGraph",
    "KirchhoffMatrix",
    "KleinInvariantJ",
    "KnapsackSolve",
    "KnightTourGraph",
    "KnotData",
    "KnownUnitQ",
    "KochCurve",
    "KolmogorovSmirnovTest",
    "KroneckerDelta",
    "KroneckerModelDecomposition",
    "KroneckerProduct",
    "KroneckerSymbol",
    "KuiperTest",
    "KumaraswamyDistribution",
    "Kurtosis",
    "KuwaharaFilter",
    "KVertexConnectedComponents",
    "KVertexConnectedGraphQ",
    "LABColor",
    "Label",
    "Labeled",
    "LabeledSlider",
    "LabelingFunction",
    "LabelingSize",
    "LabelStyle",
    "LabelVisibility",
    "LaguerreL",
    "LakeData",
    "LambdaComponents",
    "LambertW",
    "LameC",
    "LameCPrime",
    "LameEigenvalueA",
    "LameEigenvalueB",
    "LameS",
    "LameSPrime",
    "LaminaData",
    "LanczosWindow",
    "LandauDistribution",
    "Language",
    "LanguageCategory",
    "LanguageData",
    "LanguageIdentify",
    "LanguageOptions",
    "LaplaceDistribution",
    "LaplaceTransform",
    "Laplacian",
    "LaplacianFilter",
    "LaplacianGaussianFilter",
    "LaplacianPDETerm",
    "Large",
    "Larger",
    "Last",
    "Latitude",
    "LatitudeLongitude",
    "LatticeData",
    "LatticeReduce",
    "Launch",
    "LaunchKernels",
    "LayeredGraphPlot",
    "LayeredGraphPlot3D",
    "LayerSizeFunction",
    "LayoutInformation",
    "LCHColor",
    "LCM",
    "LeaderSize",
    "LeafCount",
    "LeapVariant",
    "LeapYearQ",
    "LearnDistribution",
    "LearnedDistribution",
    "LearningRate",
    "LearningRateMultipliers",
    "LeastSquares",
    "LeastSquaresFilterKernel",
    "Left",
    "LeftArrow",
    "LeftArrowBar",
    "LeftArrowRightArrow",
    "LeftDownTeeVector",
    "LeftDownVector",
    "LeftDownVectorBar",
    "LeftRightArrow",
    "LeftRightVector",
    "LeftTee",
    "LeftTeeArrow",
    "LeftTeeVector",
    "LeftTriangle",
    "LeftTriangleBar",
    "LeftTriangleEqual",
    "LeftUpDownVector",
    "LeftUpTeeVector",
    "LeftUpVector",
    "LeftUpVectorBar",
    "LeftVector",
    "LeftVectorBar",
    "LegendAppearance",
    "Legended",
    "LegendFunction",
    "LegendLabel",
    "LegendLayout",
    "LegendMargins",
    "LegendMarkers",
    "LegendMarkerSize",
    "LegendreP",
    "LegendreQ",
    "LegendreType",
    "Length",
    "LengthWhile",
    "LerchPhi",
    "Less",
    "LessEqual",
    "LessEqualGreater",
    "LessEqualThan",
    "LessFullEqual",
    "LessGreater",
    "LessLess",
    "LessSlantEqual",
    "LessThan",
    "LessTilde",
    "LetterCharacter",
    "LetterCounts",
    "LetterNumber",
    "LetterQ",
    "Level",
    "LeveneTest",
    "LeviCivitaTensor",
    "LevyDistribution",
    "Lexicographic",
    "LexicographicOrder",
    "LexicographicSort",
    "LibraryDataType",
    "LibraryFunction",
    "LibraryFunctionDeclaration",
    "LibraryFunctionError",
    "LibraryFunctionInformation",
    "LibraryFunctionLoad",
    "LibraryFunctionUnload",
    "LibraryLoad",
    "LibraryUnload",
    "LicenseEntitlementObject",
    "LicenseEntitlements",
    "LicenseID",
    "LicensingSettings",
    "LiftingFilterData",
    "LiftingWaveletTransform",
    "LightBlue",
    "LightBrown",
    "LightCyan",
    "Lighter",
    "LightGray",
    "LightGreen",
    "Lighting",
    "LightingAngle",
    "LightMagenta",
    "LightOrange",
    "LightPink",
    "LightPurple",
    "LightRed",
    "LightSources",
    "LightYellow",
    "Likelihood",
    "Limit",
    "LimitsPositioning",
    "LimitsPositioningTokens",
    "LindleyDistribution",
    "Line",
    "Line3DBox",
    "Line3DBoxOptions",
    "LinearFilter",
    "LinearFractionalOptimization",
    "LinearFractionalTransform",
    "LinearGradientFilling",
    "LinearGradientImage",
    "LinearizingTransformationData",
    "LinearLayer",
    "LinearModelFit",
    "LinearOffsetFunction",
    "LinearOptimization",
    "LinearProgramming",
    "LinearRecurrence",
    "LinearSolve",
    "LinearSolveFunction",
    "LineBox",
    "LineBoxOptions",
    "LineBreak",
    "LinebreakAdjustments",
    "LineBreakChart",
    "LinebreakSemicolonWeighting",
    "LineBreakWithin",
    "LineColor",
    "LineGraph",
    "LineIndent",
    "LineIndentMaxFraction",
    "LineIntegralConvolutionPlot",
    "LineIntegralConvolutionScale",
    "LineLegend",
    "LineOpacity",
    "LineSpacing",
    "LineWrapParts",
    "LinkActivate",
    "LinkClose",
    "LinkConnect",
    "LinkConnectedQ",
    "LinkCreate",
    "LinkError",
    "LinkFlush",
    "LinkFunction",
    "LinkHost",
    "LinkInterrupt",
    "LinkLaunch",
    "LinkMode",
    "LinkObject",
    "LinkOpen",
    "LinkOptions",
    "LinkPatterns",
    "LinkProtocol",
    "LinkRankCentrality",
    "LinkRead",
    "LinkReadHeld",
    "LinkReadyQ",
    "Links",
    "LinkService",
    "LinkWrite",
    "LinkWriteHeld",
    "LiouvilleLambda",
    "List",
    "Listable",
    "ListAnimate",
    "ListContourPlot",
    "ListContourPlot3D",
    "ListConvolve",
    "ListCorrelate",
    "ListCurvePathPlot",
    "ListDeconvolve",
    "ListDensityPlot",
    "ListDensityPlot3D",
    "Listen",
    "ListFormat",
    "ListFourierSequenceTransform",
    "ListInterpolation",
    "ListLineIntegralConvolutionPlot",
    "ListLinePlot",
    "ListLinePlot3D",
    "ListLogLinearPlot",
    "ListLogLogPlot",
    "ListLogPlot",
    "ListPicker",
    "ListPickerBox",
    "ListPickerBoxBackground",
    "ListPickerBoxOptions",
    "ListPlay",
    "ListPlot",
    "ListPlot3D",
    "ListPointPlot3D",
    "ListPolarPlot",
    "ListQ",
    "ListSliceContourPlot3D",
    "ListSliceDensityPlot3D",
    "ListSliceVectorPlot3D",
    "ListStepPlot",
    "ListStreamDensityPlot",
    "ListStreamPlot",
    "ListStreamPlot3D",
    "ListSurfacePlot3D",
    "ListVectorDensityPlot",
    "ListVectorDisplacementPlot",
    "ListVectorDisplacementPlot3D",
    "ListVectorPlot",
    "ListVectorPlot3D",
    "ListZTransform",
    "Literal",
    "LiteralSearch",
    "LiteralType",
    "LoadCompiledComponent",
    "LocalAdaptiveBinarize",
    "LocalCache",
    "LocalClusteringCoefficient",
    "LocalEvaluate",
    "LocalizeDefinitions",
    "LocalizeVariables",
    "LocalObject",
    "LocalObjects",
    "LocalResponseNormalizationLayer",
    "LocalSubmit",
    "LocalSymbol",
    "LocalTime",
    "LocalTimeZone",
    "LocationEquivalenceTest",
    "LocationTest",
    "Locator",
    "LocatorAutoCreate",
    "LocatorBox",
    "LocatorBoxOptions",
    "LocatorCentering",
    "LocatorPane",
    "LocatorPaneBox",
    "LocatorPaneBoxOptions",
    "LocatorRegion",
    "Locked",
    "Log",
    "Log10",
    "Log2",
    "LogBarnesG",
    "LogGamma",
    "LogGammaDistribution",
    "LogicalExpand",
    "LogIntegral",
    "LogisticDistribution",
    "LogisticSigmoid",
    "LogitModelFit",
    "LogLikelihood",
    "LogLinearPlot",
    "LogLogisticDistribution",
    "LogLogPlot",
    "LogMultinormalDistribution",
    "LogNormalDistribution",
    "LogPlot",
    "LogRankTest",
    "LogSeriesDistribution",
    "LongEqual",
    "Longest",
    "LongestCommonSequence",
    "LongestCommonSequencePositions",
    "LongestCommonSubsequence",
    "LongestCommonSubsequencePositions",
    "LongestMatch",
    "LongestOrderedSequence",
    "LongForm",
    "Longitude",
    "LongLeftArrow",
    "LongLeftRightArrow",
    "LongRightArrow",
    "LongShortTermMemoryLayer",
    "Lookup",
    "Loopback",
    "LoopFreeGraphQ",
    "Looping",
    "LossFunction",
    "LowerCaseQ",
    "LowerLeftArrow",
    "LowerRightArrow",
    "LowerTriangularize",
    "LowerTriangularMatrix",
    "LowerTriangularMatrixQ",
    "LowpassFilter",
    "LQEstimatorGains",
    "LQGRegulator",
    "LQOutputRegulatorGains",
    "LQRegulatorGains",
    "LUBackSubstitution",
    "LucasL",
    "LuccioSamiComponents",
    "LUDecomposition",
    "LunarEclipse",
    "LUVColor",
    "LyapunovSolve",
    "LyonsGroupLy",
    "MachineID",
    "MachineName",
    "MachineNumberQ",
    "MachinePrecision",
    "MacintoshSystemPageSetup",
    "Magenta",
    "Magnification",
    "Magnify",
    "MailAddressValidation",
    "MailExecute",
    "MailFolder",
    "MailItem",
    "MailReceiverFunction",
    "MailResponseFunction",
    "MailSearch",
    "MailServerConnect",
    "MailServerConnection",
    "MailSettings",
    "MainSolve",
    "MaintainDynamicCaches",
    "Majority",
    "MakeBoxes",
    "MakeExpression",
    "MakeRules",
    "ManagedLibraryExpressionID",
    "ManagedLibraryExpressionQ",
    "MandelbrotSetBoettcher",
    "MandelbrotSetDistance",
    "MandelbrotSetIterationCount",
    "MandelbrotSetMemberQ",
    "MandelbrotSetPlot",
    "MangoldtLambda",
    "ManhattanDistance",
    "Manipulate",
    "Manipulator",
    "MannedSpaceMissionData",
    "MannWhitneyTest",
    "MantissaExponent",
    "Manual",
    "Map",
    "MapAll",
    "MapApply",
    "MapAt",
    "MapIndexed",
    "MAProcess",
    "MapThread",
    "MarchenkoPasturDistribution",
    "MarcumQ",
    "MardiaCombinedTest",
    "MardiaKurtosisTest",
    "MardiaSkewnessTest",
    "MarginalDistribution",
    "MarkovProcessProperties",
    "Masking",
    "MassConcentrationCondition",
    "MassFluxValue",
    "MassImpermeableBoundaryValue",
    "MassOutflowValue",
    "MassSymmetryValue",
    "MassTransferValue",
    "MassTransportPDEComponent",
    "MatchingDissimilarity",
    "MatchLocalNameQ",
    "MatchLocalNames",
    "MatchQ",
    "Material",
    "MaterialShading",
    "MaternPointProcess",
    "MathematicalFunctionData",
    "MathematicaNotation",
    "MathieuC",
    "MathieuCharacteristicA",
    "MathieuCharacteristicB",
    "MathieuCharacteristicExponent",
    "MathieuCPrime",
    "MathieuGroupM11",
    "MathieuGroupM12",
    "MathieuGroupM22",
    "MathieuGroupM23",
    "MathieuGroupM24",
    "MathieuS",
    "MathieuSPrime",
    "MathMLForm",
    "MathMLText",
    "Matrices",
    "MatrixExp",
    "MatrixForm",
    "MatrixFunction",
    "MatrixLog",
    "MatrixNormalDistribution",
    "MatrixPlot",
    "MatrixPower",
    "MatrixPropertyDistribution",
    "MatrixQ",
    "MatrixRank",
    "MatrixTDistribution",
    "Max",
    "MaxBend",
    "MaxCellMeasure",
    "MaxColorDistance",
    "MaxDate",
    "MaxDetect",
    "MaxDisplayedChildren",
    "MaxDuration",
    "MaxExtraBandwidths",
    "MaxExtraConditions",
    "MaxFeatureDisplacement",
    "MaxFeatures",
    "MaxFilter",
    "MaximalBy",
    "Maximize",
    "MaxItems",
    "MaxIterations",
    "MaxLimit",
    "MaxMemoryUsed",
    "MaxMixtureKernels",
    "MaxOverlapFraction",
    "MaxPlotPoints",
    "MaxPoints",
    "MaxRecursion",
    "MaxStableDistribution",
    "MaxStepFraction",
    "MaxSteps",
    "MaxStepSize",
    "MaxTrainingRounds",
    "MaxValue",
    "MaxwellDistribution",
    "MaxWordGap",
    "McLaughlinGroupMcL",
    "Mean",
    "MeanAbsoluteLossLayer",
    "MeanAround",
    "MeanClusteringCoefficient",
    "MeanDegreeConnectivity",
    "MeanDeviation",
    "MeanFilter",
    "MeanGraphDistance",
    "MeanNeighborDegree",
    "MeanPointDensity",
    "MeanShift",
    "MeanShiftFilter",
    "MeanSquaredLossLayer",
    "Median",
    "MedianDeviation",
    "MedianFilter",
    "MedicalTestData",
    "Medium",
    "MeijerG",
    "MeijerGReduce",
    "MeixnerDistribution",
    "MellinConvolve",
    "MellinTransform",
    "MemberQ",
    "MemoryAvailable",
    "MemoryConstrained",
    "MemoryConstraint",
    "MemoryInUse",
    "MengerMesh",
    "Menu",
    "MenuAppearance",
    "MenuCommandKey",
    "MenuEvaluator",
    "MenuItem",
    "MenuList",
    "MenuPacket",
    "MenuSortingValue",
    "MenuStyle",
    "MenuView",
    "Merge",
    "MergeDifferences",
    "MergingFunction",
    "MersennePrimeExponent",
    "MersennePrimeExponentQ",
    "Mesh",
    "MeshCellCentroid",
    "MeshCellCount",
    "MeshCellHighlight",
    "MeshCellIndex",
    "MeshCellLabel",
    "MeshCellMarker",
    "MeshCellMeasure",
    "MeshCellQuality",
    "MeshCells",
    "MeshCellShapeFunction",
    "MeshCellStyle",
    "MeshConnectivityGraph",
    "MeshCoordinates",
    "MeshFunctions",
    "MeshPrimitives",
    "MeshQualityGoal",
    "MeshRange",
    "MeshRefinementFunction",
    "MeshRegion",
    "MeshRegionQ",
    "MeshShading",
    "MeshStyle",
    "Message",
    "MessageDialog",
    "MessageList",
    "MessageName",
    "MessageObject",
    "MessageOptions",
    "MessagePacket",
    "Messages",
    "MessagesNotebook",
    "MetaCharacters",
    "MetaInformation",
    "MeteorShowerData",
    "Method",
    "MethodOptions",
    "MexicanHatWavelet",
    "MeyerWavelet",
    "Midpoint",
    "MIMETypeToFormatList",
    "Min",
    "MinColorDistance",
    "MinDate",
    "MinDetect",
    "MineralData",
    "MinFilter",
    "MinimalBy",
    "MinimalPolynomial",
    "MinimalStateSpaceModel",
    "Minimize",
    "MinimumTimeIncrement",
    "MinIntervalSize",
    "MinkowskiQuestionMark",
    "MinLimit",
    "MinMax",
    "MinorPlanetData",
    "Minors",
    "MinPointSeparation",
    "MinRecursion",
    "MinSize",
    "MinStableDistribution",
    "Minus",
    "MinusPlus",
    "MinValue",
    "Missing",
    "MissingBehavior",
    "MissingDataMethod",
    "MissingDataRules",
    "MissingQ",
    "MissingString",
    "MissingStyle",
    "MissingValuePattern",
    "MissingValueSynthesis",
    "MittagLefflerE",
    "MixedFractionParts",
    "MixedGraphQ",
    "MixedMagnitude",
    "MixedRadix",
    "MixedRadixQuantity",
    "MixedUnit",
    "MixtureDistribution",
    "Mod",
    "Modal",
    "Mode",
    "ModelPredictiveController",
    "Modular",
    "ModularInverse",
    "ModularLambda",
    "Module",
    "Modulus",
    "MoebiusMu",
    "Molecule",
    "MoleculeAlign",
    "MoleculeContainsQ",
    "MoleculeDraw",
    "MoleculeEquivalentQ",
    "MoleculeFreeQ",
    "MoleculeGraph",
    "MoleculeMatchQ",
    "MoleculeMaximumCommonSubstructure",
    "MoleculeModify",
    "MoleculeName",
    "MoleculePattern",
    "MoleculePlot",
    "MoleculePlot3D",
    "MoleculeProperty",
    "MoleculeQ",
    "MoleculeRecognize",
    "MoleculeSubstructureCount",
    "MoleculeValue",
    "Moment",
    "MomentConvert",
    "MomentEvaluate",
    "MomentGeneratingFunction",
    "MomentOfInertia",
    "Monday",
    "Monitor",
    "MonomialList",
    "MonomialOrder",
    "MonsterGroupM",
    "MoonPhase",
    "MoonPosition",
    "MorletWavelet",
    "MorphologicalBinarize",
    "MorphologicalBranchPoints",
    "MorphologicalComponents",
    "MorphologicalEulerNumber",
    "MorphologicalGraph",
    "MorphologicalPerimeter",
    "MorphologicalTransform",
    "MortalityData",
    "Most",
    "MountainData",
    "MouseAnnotation",
    "MouseAppearance",
    "MouseAppearanceTag",
    "MouseButtons",
    "Mouseover",
    "MousePointerNote",
    "MousePosition",
    "MovieData",
    "MovingAverage",
    "MovingMap",
    "MovingMedian",
    "MoyalDistribution",
    "MultiaxisArrangement",
    "Multicolumn",
    "MultiedgeStyle",
    "MultigraphQ",
    "MultilaunchWarning",
    "MultiLetterItalics",
    "MultiLetterStyle",
    "MultilineFunction",
    "Multinomial",
    "MultinomialDistribution",
    "MultinormalDistribution",
    "MultiplicativeOrder",
    "Multiplicity",
    "MultiplySides",
    "MultiscriptBoxOptions",
    "Multiselection",
    "MultivariateHypergeometricDistribution",
    "MultivariatePoissonDistribution",
    "MultivariateTDistribution",
    "N",
    "NakagamiDistribution",
    "NameQ",
    "Names",
    "NamespaceBox",
    "NamespaceBoxOptions",
    "Nand",
    "NArgMax",
    "NArgMin",
    "NBernoulliB",
    "NBodySimulation",
    "NBodySimulationData",
    "NCache",
    "NCaputoD",
    "NDEigensystem",
    "NDEigenvalues",
    "NDSolve",
    "NDSolveValue",
    "Nearest",
    "NearestFunction",
    "NearestMeshCells",
    "NearestNeighborG",
    "NearestNeighborGraph",
    "NearestTo",
    "NebulaData",
    "NeedlemanWunschSimilarity",
    "Needs",
    "Negative",
    "NegativeBinomialDistribution",
    "NegativeDefiniteMatrixQ",
    "NegativeIntegers",
    "NegativelyOrientedPoints",
    "NegativeMultinomialDistribution",
    "NegativeRationals",
    "NegativeReals",
    "NegativeSemidefiniteMatrixQ",
    "NeighborhoodData",
    "NeighborhoodGraph",
    "Nest",
    "NestedGreaterGreater",
    "NestedLessLess",
    "NestedScriptRules",
    "NestGraph",
    "NestList",
    "NestTree",
    "NestWhile",
    "NestWhileList",
    "NetAppend",
    "NetArray",
    "NetArrayLayer",
    "NetBidirectionalOperator",
    "NetChain",
    "NetDecoder",
    "NetDelete",
    "NetDrop",
    "NetEncoder",
    "NetEvaluationMode",
    "NetExternalObject",
    "NetExtract",
    "NetFlatten",
    "NetFoldOperator",
    "NetGANOperator",
    "NetGraph",
    "NetInformation",
    "NetInitialize",
    "NetInsert",
    "NetInsertSharedArrays",
    "NetJoin",
    "NetMapOperator",
    "NetMapThreadOperator",
    "NetMeasurements",
    "NetModel",
    "NetNestOperator",
    "NetPairEmbeddingOperator",
    "NetPort",
    "NetPortGradient",
    "NetPrepend",
    "NetRename",
    "NetReplace",
    "NetReplacePart",
    "NetSharedArray",
    "NetStateObject",
    "NetTake",
    "NetTrain",
    "NetTrainResultsObject",
    "NetUnfold",
    "NetworkPacketCapture",
    "NetworkPacketRecording",
    "NetworkPacketRecordingDuring",
    "NetworkPacketTrace",
    "NeumannValue",
    "NevilleThetaC",
    "NevilleThetaD",
    "NevilleThetaN",
    "NevilleThetaS",
    "NewPrimitiveStyle",
    "NExpectation",
    "Next",
    "NextCell",
    "NextDate",
    "NextPrime",
    "NextScheduledTaskTime",
    "NeymanScottPointProcess",
    "NFractionalD",
    "NHoldAll",
    "NHoldFirst",
    "NHoldRest",
    "NicholsGridLines",
    "NicholsPlot",
    "NightHemisphere",
    "NIntegrate",
    "NMaximize",
    "NMaxValue",
    "NMinimize",
    "NMinValue",
    "NominalScale",
    "NominalVariables",
    "NonAssociative",
    "NoncentralBetaDistribution",
    "NoncentralChiSquareDistribution",
    "NoncentralFRatioDistribution",
    "NoncentralStudentTDistribution",
    "NonCommutativeMultiply",
    "NonConstants",
    "NondimensionalizationTransform",
    "None",
    "NoneTrue",
    "NonlinearModelFit",
    "NonlinearStateSpaceModel",
    "NonlocalMeansFilter",
    "NonNegative",
    "NonNegativeIntegers",
    "NonNegativeRationals",
    "NonNegativeReals",
    "NonPositive",
    "NonPositiveIntegers",
    "NonPositiveRationals",
    "NonPositiveReals",
    "Nor",
    "NorlundB",
    "Norm",
    "Normal",
    "NormalDistribution",
    "NormalGrouping",
    "NormalizationLayer",
    "Normalize",
    "Normalized",
    "NormalizedSquaredEuclideanDistance",
    "NormalMatrixQ",
    "NormalsFunction",
    "NormFunction",
    "Not",
    "NotCongruent",
    "NotCupCap",
    "NotDoubleVerticalBar",
    "Notebook",
    "NotebookApply",
    "NotebookAutoSave",
    "NotebookBrowseDirectory",
    "NotebookClose",
    "NotebookConvertSettings",
    "NotebookCreate",
    "NotebookDefault",
    "NotebookDelete",
    "NotebookDirectory",
    "NotebookDynamicExpression",
    "NotebookEvaluate",
    "NotebookEventActions",
    "NotebookFileName",
    "NotebookFind",
    "NotebookGet",
    "NotebookImport",
    "NotebookInformation",
    "NotebookInterfaceObject",
    "NotebookLocate",
    "NotebookObject",
    "NotebookOpen",
    "NotebookPath",
    "NotebookPrint",
    "NotebookPut",
    "NotebookRead",
    "Notebooks",
    "NotebookSave",
    "NotebookSelection",
    "NotebooksMenu",
    "NotebookTemplate",
    "NotebookWrite",
    "NotElement",
    "NotEqualTilde",
    "NotExists",
    "NotGreater",
    "NotGreaterEqual",
    "NotGreaterFullEqual",
    "NotGreaterGreater",
    "NotGreaterLess",
    "NotGreaterSlantEqual",
    "NotGreaterTilde",
    "Nothing",
    "NotHumpDownHump",
    "NotHumpEqual",
    "NotificationFunction",
    "NotLeftTriangle",
    "NotLeftTriangleBar",
    "NotLeftTriangleEqual",
    "NotLess",
    "NotLessEqual",
    "NotLessFullEqual",
    "NotLessGreater",
    "NotLessLess",
    "NotLessSlantEqual",
    "NotLessTilde",
    "NotNestedGreaterGreater",
    "NotNestedLessLess",
    "NotPrecedes",
    "NotPrecedesEqual",
    "NotPrecedesSlantEqual",
    "NotPrecedesTilde",
    "NotReverseElement",
    "NotRightTriangle",
    "NotRightTriangleBar",
    "NotRightTriangleEqual",
    "NotSquareSubset",
    "NotSquareSubsetEqual",
    "NotSquareSuperset",
    "NotSquareSupersetEqual",
    "NotSubset",
    "NotSubsetEqual",
    "NotSucceeds",
    "NotSucceedsEqual",
    "NotSucceedsSlantEqual",
    "NotSucceedsTilde",
    "NotSuperset",
    "NotSupersetEqual",
    "NotTilde",
    "NotTildeEqual",
    "NotTildeFullEqual",
    "NotTildeTilde",
    "NotVerticalBar",
    "Now",
    "NoWhitespace",
    "NProbability",
    "NProduct",
    "NProductFactors",
    "NRoots",
    "NSolve",
    "NSolveValues",
    "NSum",
    "NSumTerms",
    "NuclearExplosionData",
    "NuclearReactorData",
    "Null",
    "NullRecords",
    "NullSpace",
    "NullWords",
    "Number",
    "NumberCompose",
    "NumberDecompose",
    "NumberDigit",
    "NumberExpand",
    "NumberFieldClassNumber",
    "NumberFieldDiscriminant",
    "NumberFieldFundamentalUnits",
    "NumberFieldIntegralBasis",
    "NumberFieldNormRepresentatives",
    "NumberFieldRegulator",
    "NumberFieldRootsOfUnity",
    "NumberFieldSignature",
    "NumberForm",
    "NumberFormat",
    "NumberLinePlot",
    "NumberMarks",
    "NumberMultiplier",
    "NumberPadding",
    "NumberPoint",
    "NumberQ",
    "NumberSeparator",
    "NumberSigns",
    "NumberString",
    "Numerator",
    "NumeratorDenominator",
    "NumericalOrder",
    "NumericalSort",
    "NumericArray",
    "NumericArrayQ",
    "NumericArrayType",
    "NumericFunction",
    "NumericQ",
    "NuttallWindow",
    "NValues",
    "NyquistGridLines",
    "NyquistPlot",
    "O",
    "ObjectExistsQ",
    "ObservabilityGramian",
    "ObservabilityMatrix",
    "ObservableDecomposition",
    "ObservableModelQ",
    "OceanData",
    "Octahedron",
    "OddQ",
    "Off",
    "Offset",
    "OLEData",
    "On",
    "ONanGroupON",
    "Once",
    "OneIdentity",
    "Opacity",
    "OpacityFunction",
    "OpacityFunctionScaling",
    "Open",
    "OpenAppend",
    "Opener",
    "OpenerBox",
    "OpenerBoxOptions",
    "OpenerView",
    "OpenFunctionInspectorPacket",
    "Opening",
    "OpenRead",
    "OpenSpecialOptions",
    "OpenTemporary",
    "OpenWrite",
    "Operate",
    "OperatingSystem",
    "OperatorApplied",
    "OptimumFlowData",
    "Optional",
    "OptionalElement",
    "OptionInspectorSettings",
    "OptionQ",
    "Options",
    "OptionsPacket",
    "OptionsPattern",
    "OptionValue",
    "OptionValueBox",
    "OptionValueBoxOptions",
    "Or",
    "Orange",
    "Order",
    "OrderDistribution",
    "OrderedQ",
    "Ordering",
    "OrderingBy",
    "OrderingLayer",
    "Orderless",
    "OrderlessPatternSequence",
    "OrdinalScale",
    "OrnsteinUhlenbeckProcess",
    "Orthogonalize",
    "OrthogonalMatrixQ",
    "Out",
    "Outer",
    "OuterPolygon",
    "OuterPolyhedron",
    "OutputAutoOverwrite",
    "OutputControllabilityMatrix",
    "OutputControllableModelQ",
    "OutputForm",
    "OutputFormData",
    "OutputGrouping",
    "OutputMathEditExpression",
    "OutputNamePacket",
    "OutputPorts",
    "OutputResponse",
    "OutputSizeLimit",
    "OutputStream",
    "Over",
    "OverBar",
    "OverDot",
    "Overflow",
    "OverHat",
    "Overlaps",
    "Overlay",
    "OverlayBox",
    "OverlayBoxOptions",
    "OverlayVideo",
    "Overscript",
    "OverscriptBox",
    "OverscriptBoxOptions",
    "OverTilde",
    "OverVector",
    "OverwriteTarget",
    "OwenT",
    "OwnValues",
    "Package",
    "PackingMethod",
    "PackPaclet",
    "PacletDataRebuild",
    "PacletDirectoryAdd",
    "PacletDirectoryLoad",
    "PacletDirectoryRemove",
    "PacletDirectoryUnload",
    "PacletDisable",
    "PacletEnable",
    "PacletFind",
    "PacletFindRemote",
    "PacletInformation",
    "PacletInstall",
    "PacletInstallSubmit",
    "PacletNewerQ",
    "PacletObject",
    "PacletObjectQ",
    "PacletSite",
    "PacletSiteObject",
    "PacletSiteRegister",
    "PacletSites",
    "PacletSiteUnregister",
    "PacletSiteUpdate",
    "PacletSymbol",
    "PacletUninstall",
    "PacletUpdate",
    "PaddedForm",
    "Padding",
    "PaddingLayer",
    "PaddingSize",
    "PadeApproximant",
    "PadLeft",
    "PadRight",
    "PageBreakAbove",
    "PageBreakBelow",
    "PageBreakWithin",
    "PageFooterLines",
    "PageFooters",
    "PageHeaderLines",
    "PageHeaders",
    "PageHeight",
    "PageRankCentrality",
    "PageTheme",
    "PageWidth",
    "Pagination",
    "PairCorrelationG",
    "PairedBarChart",
    "PairedHistogram",
    "PairedSmoothHistogram",
    "PairedTTest",
    "PairedZTest",
    "PaletteNotebook",
    "PalettePath",
    "PalettesMenuSettings",
    "PalindromeQ",
    "Pane",
    "PaneBox",
    "PaneBoxOptions",
    "Panel",
    "PanelBox",
    "PanelBoxOptions",
    "Paneled",
    "PaneSelector",
    "PaneSelectorBox",
    "PaneSelectorBoxOptions",
    "PaperWidth",
    "ParabolicCylinderD",
    "ParagraphIndent",
    "ParagraphSpacing",
    "ParallelArray",
    "ParallelAxisPlot",
    "ParallelCombine",
    "ParallelDo",
    "Parallelepiped",
    "ParallelEvaluate",
    "Parallelization",
    "Parallelize",
    "ParallelKernels",
    "ParallelMap",
    "ParallelNeeds",
    "Parallelogram",
    "ParallelProduct",
    "ParallelSubmit",
    "ParallelSum",
    "ParallelTable",
    "ParallelTry",
    "Parameter",
    "ParameterEstimator",
    "ParameterMixtureDistribution",
    "ParameterVariables",
    "ParametricConvexOptimization",
    "ParametricFunction",
    "ParametricNDSolve",
    "ParametricNDSolveValue",
    "ParametricPlot",
    "ParametricPlot3D",
    "ParametricRampLayer",
    "ParametricRegion",
    "ParentBox",
    "ParentCell",
    "ParentConnect",
    "ParentDirectory",
    "ParentEdgeLabel",
    "ParentEdgeLabelFunction",
    "ParentEdgeLabelStyle",
    "ParentEdgeShapeFunction",
    "ParentEdgeStyle",
    "ParentEdgeStyleFunction",
    "ParentForm",
    "Parenthesize",
    "ParentList",
    "ParentNotebook",
    "ParetoDistribution",
    "ParetoPickandsDistribution",
    "ParkData",
    "Part",
    "PartBehavior",
    "PartialCorrelationFunction",
    "PartialD",
    "ParticleAcceleratorData",
    "ParticleData",
    "Partition",
    "PartitionGranularity",
    "PartitionsP",
    "PartitionsQ",
    "PartLayer",
    "PartOfSpeech",
    "PartProtection",
    "ParzenWindow",
    "PascalDistribution",
    "PassEventsDown",
    "PassEventsUp",
    "Paste",
    "PasteAutoQuoteCharacters",
    "PasteBoxFormInlineCells",
    "PasteButton",
    "Path",
    "PathGraph",
    "PathGraphQ",
    "Pattern",
    "PatternFilling",
    "PatternReaction",
    "PatternSequence",
    "PatternTest",
    "PauliMatrix",
    "PaulWavelet",
    "Pause",
    "PausedTime",
    "PDF",
    "PeakDetect",
    "PeanoCurve",
    "PearsonChiSquareTest",
    "PearsonCorrelationTest",
    "PearsonDistribution",
    "PenttinenPointProcess",
    "PercentForm",
    "PerfectNumber",
    "PerfectNumberQ",
    "PerformanceGoal",
    "Perimeter",
    "PeriodicBoundaryCondition",
    "PeriodicInterpolation",
    "Periodogram",
    "PeriodogramArray",
    "Permanent",
    "Permissions",
    "PermissionsGroup",
    "PermissionsGroupMemberQ",
    "PermissionsGroups",
    "PermissionsKey",
    "PermissionsKeys",
    "PermutationCycles",
    "PermutationCyclesQ",
    "PermutationGroup",
    "PermutationLength",
    "PermutationList",
    "PermutationListQ",
    "PermutationMatrix",
    "PermutationMax",
    "PermutationMin",
    "PermutationOrder",
    "PermutationPower",
    "PermutationProduct",
    "PermutationReplace",
    "Permutations",
    "PermutationSupport",
    "Permute",
    "PeronaMalikFilter",
    "Perpendicular",
    "PerpendicularBisector",
    "PersistenceLocation",
    "PersistenceTime",
    "PersistentObject",
    "PersistentObjects",
    "PersistentSymbol",
    "PersistentValue",
    "PersonData",
    "PERTDistribution",
    "PetersenGraph",
    "PhaseMargins",
    "PhaseRange",
    "PhongShading",
    "PhysicalSystemData",
    "Pi",
    "Pick",
    "PickedElements",
    "PickMode",
    "PIDData",
    "PIDDerivativeFilter",
    "PIDFeedforward",
    "PIDTune",
    "Piecewise",
    "PiecewiseExpand",
    "PieChart",
    "PieChart3D",
    "PillaiTrace",
    "PillaiTraceTest",
    "PingTime",
    "Pink",
    "PitchRecognize",
    "Pivoting",
    "PixelConstrained",
    "PixelValue",
    "PixelValuePositions",
    "Placed",
    "Placeholder",
    "PlaceholderLayer",
    "PlaceholderReplace",
    "Plain",
    "PlanarAngle",
    "PlanarFaceList",
    "PlanarGraph",
    "PlanarGraphQ",
    "PlanckRadiationLaw",
    "PlaneCurveData",
    "PlanetaryMoonData",
    "PlanetData",
    "PlantData",
    "Play",
    "PlaybackSettings",
    "PlayRange",
    "Plot",
    "Plot3D",
    "Plot3Matrix",
    "PlotDivision",
    "PlotJoined",
    "PlotLabel",
    "PlotLabels",
    "PlotLayout",
    "PlotLegends",
    "PlotMarkers",
    "PlotPoints",
    "PlotRange",
    "PlotRangeClipping",
    "PlotRangeClipPlanesStyle",
    "PlotRangePadding",
    "PlotRegion",
    "PlotStyle",
    "PlotTheme",
    "Pluralize",
    "Plus",
    "PlusMinus",
    "Pochhammer",
    "PodStates",
    "PodWidth",
    "Point",
    "Point3DBox",
    "Point3DBoxOptions",
    "PointBox",
    "PointBoxOptions",
    "PointCountDistribution",
    "PointDensity",
    "PointDensityFunction",
    "PointFigureChart",
    "PointLegend",
    "PointLight",
    "PointProcessEstimator",
    "PointProcessFitTest",
    "PointProcessParameterAssumptions",
    "PointProcessParameterQ",
    "PointSize",
    "PointStatisticFunction",
    "PointValuePlot",
    "PoissonConsulDistribution",
    "PoissonDistribution",
    "PoissonPDEComponent",
    "PoissonPointProcess",
    "PoissonProcess",
    "PoissonWindow",
    "PolarAxes",
    "PolarAxesOrigin",
    "PolarGridLines",
    "PolarPlot",
    "PolarTicks",
    "PoleZeroMarkers",
    "PolyaAeppliDistribution",
    "PolyGamma",
    "Polygon",
    "Polygon3DBox",
    "Polygon3DBoxOptions",
    "PolygonalNumber",
    "PolygonAngle",
    "PolygonBox",
    "PolygonBoxOptions",
    "PolygonCoordinates",
    "PolygonDecomposition",
    "PolygonHoleScale",
    "PolygonIntersections",
    "PolygonScale",
    "Polyhedron",
    "PolyhedronAngle",
    "PolyhedronBox",
    "PolyhedronBoxOptions",
    "PolyhedronCoordinates",
    "PolyhedronData",
    "PolyhedronDecomposition",
    "PolyhedronGenus",
    "PolyLog",
    "PolynomialExpressionQ",
    "PolynomialExtendedGCD",
    "PolynomialForm",
    "PolynomialGCD",
    "PolynomialLCM",
    "PolynomialMod",
    "PolynomialQ",
    "PolynomialQuotient",
    "PolynomialQuotientRemainder",
    "PolynomialReduce",
    "PolynomialRemainder",
    "Polynomials",
    "PolynomialSumOfSquaresList",
    "PoolingLayer",
    "PopupMenu",
    "PopupMenuBox",
    "PopupMenuBoxOptions",
    "PopupView",
    "PopupWindow",
    "Position",
    "PositionIndex",
    "PositionLargest",
    "PositionSmallest",
    "Positive",
    "PositiveDefiniteMatrixQ",
    "PositiveIntegers",
    "PositivelyOrientedPoints",
    "PositiveRationals",
    "PositiveReals",
    "PositiveSemidefiniteMatrixQ",
    "PossibleZeroQ",
    "Postfix",
    "PostScript",
    "Power",
    "PowerDistribution",
    "PowerExpand",
    "PowerMod",
    "PowerModList",
    "PowerRange",
    "PowerSpectralDensity",
    "PowersRepresentations",
    "PowerSymmetricPolynomial",
    "Precedence",
    "PrecedenceForm",
    "Precedes",
    "PrecedesEqual",
    "PrecedesSlantEqual",
    "PrecedesTilde",
    "Precision",
    "PrecisionGoal",
    "PreDecrement",
    "Predict",
    "PredictionRoot",
    "PredictorFunction",
    "PredictorInformation",
    "PredictorMeasurements",
    "PredictorMeasurementsObject",
    "PreemptProtect",
    "PreferencesPath",
    "PreferencesSettings",
    "Prefix",
    "PreIncrement",
    "Prepend",
    "PrependLayer",
    "PrependTo",
    "PreprocessingRules",
    "PreserveColor",
    "PreserveImageOptions",
    "Previous",
    "PreviousCell",
    "PreviousDate",
    "PriceGraphDistribution",
    "PrimaryPlaceholder",
    "Prime",
    "PrimeNu",
    "PrimeOmega",
    "PrimePi",
    "PrimePowerQ",
    "PrimeQ",
    "Primes",
    "PrimeZetaP",
    "PrimitivePolynomialQ",
    "PrimitiveRoot",
    "PrimitiveRootList",
    "PrincipalComponents",
    "PrincipalValue",
    "Print",
    "PrintableASCIIQ",
    "PrintAction",
    "PrintForm",
    "PrintingCopies",
    "PrintingOptions",
    "PrintingPageRange",
    "PrintingStartingPageNumber",
    "PrintingStyleEnvironment",
    "Printout3D",
    "Printout3DPreviewer",
    "PrintPrecision",
    "PrintTemporary",
    "Prism",
    "PrismBox",
    "PrismBoxOptions",
    "PrivateCellOptions",
    "PrivateEvaluationOptions",
    "PrivateFontOptions",
    "PrivateFrontEndOptions",
    "PrivateKey",
    "PrivateNotebookOptions",
    "PrivatePaths",
    "Probability",
    "ProbabilityDistribution",
    "ProbabilityPlot",
    "ProbabilityPr",
    "ProbabilityScalePlot",
    "ProbitModelFit",
    "ProcessConnection",
    "ProcessDirectory",
    "ProcessEnvironment",
    "Processes",
    "ProcessEstimator",
    "ProcessInformation",
    "ProcessObject",
    "ProcessParameterAssumptions",
    "ProcessParameterQ",
    "ProcessStateDomain",
    "ProcessStatus",
    "ProcessTimeDomain",
    "Product",
    "ProductDistribution",
    "ProductLog",
    "ProgressIndicator",
    "ProgressIndicatorBox",
    "ProgressIndicatorBoxOptions",
    "ProgressReporting",
    "Projection",
    "Prolog",
    "PromptForm",
    "ProofObject",
    "PropagateAborts",
    "Properties",
    "Property",
    "PropertyList",
    "PropertyValue",
    "Proportion",
    "Proportional",
    "Protect",
    "Protected",
    "ProteinData",
    "Pruning",
    "PseudoInverse",
    "PsychrometricPropertyData",
    "PublicKey",
    "PublisherID",
    "PulsarData",
    "PunctuationCharacter",
    "Purple",
    "Put",
    "PutAppend",
    "Pyramid",
    "PyramidBox",
    "PyramidBoxOptions",
    "QBinomial",
    "QFactorial",
    "QGamma",
    "QHypergeometricPFQ",
    "QnDispersion",
    "QPochhammer",
    "QPolyGamma",
    "QRDecomposition",
    "QuadraticIrrationalQ",
    "QuadraticOptimization",
    "Quantile",
    "QuantilePlot",
    "Quantity",
    "QuantityArray",
    "QuantityDistribution",
    "QuantityForm",
    "QuantityMagnitude",
    "QuantityQ",
    "QuantityUnit",
    "QuantityVariable",
    "QuantityVariableCanonicalUnit",
    "QuantityVariableDimensions",
    "QuantityVariableIdentifier",
    "QuantityVariablePhysicalQuantity",
    "Quartics",
    "QuartileDeviation",
    "Quartiles",
    "QuartileSkewness",
    "Query",
    "QuestionGenerator",
    "QuestionInterface",
    "QuestionObject",
    "QuestionSelector",
    "QueueingNetworkProcess",
    "QueueingProcess",
    "QueueProperties",
    "Quiet",
    "QuietEcho",
    "Quit",
    "Quotient",
    "QuotientRemainder",
    "RadialAxisPlot",
    "RadialGradientFilling",
    "RadialGradientImage",
    "RadialityCentrality",
    "RadicalBox",
    "RadicalBoxOptions",
    "RadioButton",
    "RadioButtonBar",
    "RadioButtonBox",
    "RadioButtonBoxOptions",
    "Radon",
    "RadonTransform",
    "RamanujanTau",
    "RamanujanTauL",
    "RamanujanTauTheta",
    "RamanujanTauZ",
    "Ramp",
    "Random",
    "RandomArrayLayer",
    "RandomChoice",
    "RandomColor",
    "RandomComplex",
    "RandomDate",
    "RandomEntity",
    "RandomFunction",
    "RandomGeneratorState",
    "RandomGeoPosition",
    "RandomGraph",
    "RandomImage",
    "RandomInstance",
    "RandomInteger",
    "RandomPermutation",
    "RandomPoint",
    "RandomPointConfiguration",
    "RandomPolygon",
    "RandomPolyhedron",
    "RandomPrime",
    "RandomReal",
    "RandomSample",
    "RandomSeed",
    "RandomSeeding",
    "RandomTime",
    "RandomTree",
    "RandomVariate",
    "RandomWalkProcess",
    "RandomWord",
    "Range",
    "RangeFilter",
    "RangeSpecification",
    "RankedMax",
    "RankedMin",
    "RarerProbability",
    "Raster",
    "Raster3D",
    "Raster3DBox",
    "Raster3DBoxOptions",
    "RasterArray",
    "RasterBox",
    "RasterBoxOptions",
    "Rasterize",
    "RasterSize",
    "Rational",
    "RationalExpressionQ",
    "RationalFunctions",
    "Rationalize",
    "Rationals",
    "Ratios",
    "RawArray",
    "RawBoxes",
    "RawData",
    "RawMedium",
    "RayleighDistribution",
    "Re",
    "ReactionBalance",
    "ReactionBalancedQ",
    "ReactionPDETerm",
    "Read",
    "ReadByteArray",
    "ReadLine",
    "ReadList",
    "ReadProtected",
    "ReadString",
    "Real",
    "RealAbs",
    "RealBlockDiagonalForm",
    "RealDigits",
    "RealExponent",
    "Reals",
    "RealSign",
    "Reap",
    "RebuildPacletData",
    "RecalibrationFunction",
    "RecognitionPrior",
    "RecognitionThreshold",
    "ReconstructionMesh",
    "Record",
    "RecordLists",
    "RecordSeparators",
    "Rectangle",
    "RectangleBox",
    "RectangleBoxOptions",
    "RectangleChart",
    "RectangleChart3D",
    "RectangularRepeatingElement",
    "RecurrenceFilter",
    "RecurrenceTable",
    "RecurringDigitsForm",
    "Red",
    "Reduce",
    "RefBox",
    "ReferenceLineStyle",
    "ReferenceMarkers",
    "ReferenceMarkerStyle",
    "Refine",
    "ReflectionMatrix",
    "ReflectionTransform",
    "Refresh",
    "RefreshRate",
    "Region",
    "RegionBinarize",
    "RegionBoundary",
    "RegionBoundaryStyle",
    "RegionBounds",
    "RegionCentroid",
    "RegionCongruent",
    "RegionConvert",
    "RegionDifference",
    "RegionDilation",
    "RegionDimension",
    "RegionDisjoint",
    "RegionDistance",
    "RegionDistanceFunction",
    "RegionEmbeddingDimension",
    "RegionEqual",
    "RegionErosion",
    "RegionFillingStyle",
    "RegionFit",
    "RegionFunction",
    "RegionImage",
    "RegionIntersection",
    "RegionMeasure",
    "RegionMember",
    "RegionMemberFunction",
    "RegionMoment",
    "RegionNearest",
    "RegionNearestFunction",
    "RegionPlot",
    "RegionPlot3D",
    "RegionProduct",
    "RegionQ",
    "RegionResize",
    "RegionSimilar",
    "RegionSize",
    "RegionSymmetricDifference",
    "RegionUnion",
    "RegionWithin",
    "RegisterExternalEvaluator",
    "RegularExpression",
    "Regularization",
    "RegularlySampledQ",
    "RegularPolygon",
    "ReIm",
    "ReImLabels",
    "ReImPlot",
    "ReImStyle",
    "Reinstall",
    "RelationalDatabase",
    "RelationGraph",
    "Release",
    "ReleaseHold",
    "ReliabilityDistribution",
    "ReliefImage",
    "ReliefPlot",
    "RemoteAuthorizationCaching",
    "RemoteBatchJobAbort",
    "RemoteBatchJobObject",
    "RemoteBatchJobs",
    "RemoteBatchMapSubmit",
    "RemoteBatchSubmissionEnvironment",
    "RemoteBatchSubmit",
    "RemoteConnect",
    "RemoteConnectionObject",
    "RemoteEvaluate",
    "RemoteFile",
    "RemoteInputFiles",
    "RemoteKernelObject",
    "RemoteProviderSettings",
    "RemoteRun",
    "RemoteRunProcess",
    "RemovalConditions",
    "Remove",
    "RemoveAlphaChannel",
    "RemoveAsynchronousTask",
    "RemoveAudioStream",
    "RemoveBackground",
    "RemoveChannelListener",
    "RemoveChannelSubscribers",
    "Removed",
    "RemoveDiacritics",
    "RemoveInputStreamMethod",
    "RemoveOutputStreamMethod",
    "RemoveProperty",
    "RemoveScheduledTask",
    "RemoveUsers",
    "RemoveVideoStream",
    "RenameDirectory",
    "RenameFile",
    "RenderAll",
    "RenderingOptions",
    "RenewalProcess",
    "RenkoChart",
    "RepairMesh",
    "Repeated",
    "RepeatedNull",
    "RepeatedString",
    "RepeatedTiming",
    "RepeatingElement",
    "Replace",
    "ReplaceAll",
    "ReplaceAt",
    "ReplaceHeldPart",
    "ReplaceImageValue",
    "ReplaceList",
    "ReplacePart",
    "ReplacePixelValue",
    "ReplaceRepeated",
    "ReplicateLayer",
    "RequiredPhysicalQuantities",
    "Resampling",
    "ResamplingAlgorithmData",
    "ResamplingMethod",
    "Rescale",
    "RescalingTransform",
    "ResetDirectory",
    "ResetScheduledTask",
    "ReshapeLayer",
    "Residue",
    "ResidueSum",
    "ResizeLayer",
    "Resolve",
    "ResolveContextAliases",
    "ResourceAcquire",
    "ResourceData",
    "ResourceFunction",
    "ResourceObject",
    "ResourceRegister",
    "ResourceRemove",
    "ResourceSearch",
    "ResourceSubmissionObject",
    "ResourceSubmit",
    "ResourceSystemBase",
    "ResourceSystemPath",
    "ResourceUpdate",
    "ResourceVersion",
    "ResponseForm",
    "Rest",
    "RestartInterval",
    "Restricted",
    "Resultant",
    "ResumePacket",
    "Return",
    "ReturnCreatesNewCell",
    "ReturnEntersInput",
    "ReturnExpressionPacket",
    "ReturnInputFormPacket",
    "ReturnPacket",
    "ReturnReceiptFunction",
    "ReturnTextPacket",
    "Reverse",
    "ReverseApplied",
    "ReverseBiorthogonalSplineWavelet",
    "ReverseElement",
    "ReverseEquilibrium",
    "ReverseGraph",
    "ReverseSort",
    "ReverseSortBy",
    "ReverseUpEquilibrium",
    "RevolutionAxis",
    "RevolutionPlot3D",
    "RGBColor",
    "RiccatiSolve",
    "RiceDistribution",
    "RidgeFilter",
    "RiemannR",
    "RiemannSiegelTheta",
    "RiemannSiegelZ",
    "RiemannXi",
    "Riffle",
    "Right",
    "RightArrow",
    "RightArrowBar",
    "RightArrowLeftArrow",
    "RightComposition",
    "RightCosetRepresentative",
    "RightDownTeeVector",
    "RightDownVector",
    "RightDownVectorBar",
    "RightTee",
    "RightTeeArrow",
    "RightTeeVector",
    "RightTriangle",
    "RightTriangleBar",
    "RightTriangleEqual",
    "RightUpDownVector",
    "RightUpTeeVector",
    "RightUpVector",
    "RightUpVectorBar",
    "RightVector",
    "RightVectorBar",
    "RipleyK",
    "RipleyRassonRegion",
    "RiskAchievementImportance",
    "RiskReductionImportance",
    "RobustConvexOptimization",
    "RogersTanimotoDissimilarity",
    "RollPitchYawAngles",
    "RollPitchYawMatrix",
    "RomanNumeral",
    "Root",
    "RootApproximant",
    "RootIntervals",
    "RootLocusPlot",
    "RootMeanSquare",
    "RootOfUnityQ",
    "RootReduce",
    "Roots",
    "RootSum",
    "RootTree",
    "Rotate",
    "RotateLabel",
    "RotateLeft",
    "RotateRight",
    "RotationAction",
    "RotationBox",
    "RotationBoxOptions",
    "RotationMatrix",
    "RotationTransform",
    "Round",
    "RoundImplies",
    "RoundingRadius",
    "Row",
    "RowAlignments",
    "RowBackgrounds",
    "RowBox",
    "RowHeights",
    "RowLines",
    "RowMinHeight",
    "RowReduce",
    "RowsEqual",
    "RowSpacings",
    "RSolve",
    "RSolveValue",
    "RudinShapiro",
    "RudvalisGroupRu",
    "Rule",
    "RuleCondition",
    "RuleDelayed",
    "RuleForm",
    "RulePlot",
    "RulerUnits",
    "RulesTree",
    "Run",
    "RunProcess",
    "RunScheduledTask",
    "RunThrough",
    "RuntimeAttributes",
    "RuntimeOptions",
    "RussellRaoDissimilarity",
    "SameAs",
    "SameQ",
    "SameTest",
    "SameTestProperties",
    "SampledEntityClass",
    "SampleDepth",
    "SampledSoundFunction",
    "SampledSoundList",
    "SampleRate",
    "SamplingPeriod",
    "SARIMAProcess",
    "SARMAProcess",
    "SASTriangle",
    "SatelliteData",
    "SatisfiabilityCount",
    "SatisfiabilityInstances",
    "SatisfiableQ",
    "Saturday",
    "Save",
    "Saveable",
    "SaveAutoDelete",
    "SaveConnection",
    "SaveDefinitions",
    "SavitzkyGolayMatrix",
    "SawtoothWave",
    "Scale",
    "Scaled",
    "ScaleDivisions",
    "ScaledMousePosition",
    "ScaleOrigin",
    "ScalePadding",
    "ScaleRanges",
    "ScaleRangeStyle",
    "ScalingFunctions",
    "ScalingMatrix",
    "ScalingTransform",
    "Scan",
    "ScheduledTask",
    "ScheduledTaskActiveQ",
    "ScheduledTaskInformation",
    "ScheduledTaskInformationData",
    "ScheduledTaskObject",
    "ScheduledTasks",
    "SchurDecomposition",
    "ScientificForm",
    "ScientificNotationThreshold",
    "ScorerGi",
    "ScorerGiPrime",
    "ScorerHi",
    "ScorerHiPrime",
    "ScreenRectangle",
    "ScreenStyleEnvironment",
    "ScriptBaselineShifts",
    "ScriptForm",
    "ScriptLevel",
    "ScriptMinSize",
    "ScriptRules",
    "ScriptSizeMultipliers",
    "Scrollbars",
    "ScrollingOptions",
    "ScrollPosition",
    "SearchAdjustment",
    "SearchIndexObject",
    "SearchIndices",
    "SearchQueryString",
    "SearchResultObject",
    "Sec",
    "Sech",
    "SechDistribution",
    "SecondOrderConeOptimization",
    "SectionGrouping",
    "SectorChart",
    "SectorChart3D",
    "SectorOrigin",
    "SectorSpacing",
    "SecuredAuthenticationKey",
    "SecuredAuthenticationKeys",
    "SecurityCertificate",
    "SeedRandom",
    "Select",
    "Selectable",
    "SelectComponents",
    "SelectedCells",
    "SelectedNotebook",
    "SelectFirst",
    "Selection",
    "SelectionAnimate",
    "SelectionCell",
    "SelectionCellCreateCell",
    "SelectionCellDefaultStyle",
    "SelectionCellParentStyle",
    "SelectionCreateCell",
    "SelectionDebuggerTag",
    "SelectionEvaluate",
    "SelectionEvaluateCreateCell",
    "SelectionMove",
    "SelectionPlaceholder",
    "SelectWithContents",
    "SelfLoops",
    "SelfLoopStyle",
    "SemanticImport",
    "SemanticImportString",
    "SemanticInterpretation",
    "SemialgebraicComponentInstances",
    "SemidefiniteOptimization",
    "SendMail",
    "SendMessage",
    "Sequence",
    "SequenceAlignment",
    "SequenceAttentionLayer",
    "SequenceCases",
    "SequenceCount",
    "SequenceFold",
    "SequenceFoldList",
    "SequenceForm",
    "SequenceHold",
    "SequenceIndicesLayer",
    "SequenceLastLayer",
    "SequenceMostLayer",
    "SequencePosition",
    "SequencePredict",
    "SequencePredictorFunction",
    "SequenceReplace",
    "SequenceRestLayer",
    "SequenceReverseLayer",
    "SequenceSplit",
    "Series",
    "SeriesCoefficient",
    "SeriesData",
    "SeriesTermGoal",
    "ServiceConnect",
    "ServiceDisconnect",
    "ServiceExecute",
    "ServiceObject",
    "ServiceRequest",
    "ServiceResponse",
    "ServiceSubmit",
    "SessionSubmit",
    "SessionTime",
    "Set",
    "SetAccuracy",
    "SetAlphaChannel",
    "SetAttributes",
    "Setbacks",
    "SetCloudDirectory",
    "SetCookies",
    "SetDelayed",
    "SetDirectory",
    "SetEnvironment",
    "SetFileDate",
    "SetFileFormatProperties",
    "SetOptions",
    "SetOptionsPacket",
    "SetPermissions",
    "SetPrecision",
    "SetProperty",
    "SetSecuredAuthenticationKey",
    "SetSelectedNotebook",
    "SetSharedFunction",
    "SetSharedVariable",
    "SetStreamPosition",
    "SetSystemModel",
    "SetSystemOptions",
    "Setter",
    "SetterBar",
    "SetterBox",
    "SetterBoxOptions",
    "Setting",
    "SetUsers",
    "Shading",
    "Shallow",
    "ShannonWavelet",
    "ShapiroWilkTest",
    "Share",
    "SharingList",
    "Sharpen",
    "ShearingMatrix",
    "ShearingTransform",
    "ShellRegion",
    "ShenCastanMatrix",
    "ShiftedGompertzDistribution",
    "ShiftRegisterSequence",
    "Short",
    "ShortDownArrow",
    "Shortest",
    "ShortestMatch",
    "ShortestPathFunction",
    "ShortLeftArrow",
    "ShortRightArrow",
    "ShortTimeFourier",
    "ShortTimeFourierData",
    "ShortUpArrow",
    "Show",
    "ShowAutoConvert",
    "ShowAutoSpellCheck",
    "ShowAutoStyles",
    "ShowCellBracket",
    "ShowCellLabel",
    "ShowCellTags",
    "ShowClosedCellArea",
    "ShowCodeAssist",
    "ShowContents",
    "ShowControls",
    "ShowCursorTracker",
    "ShowGroupOpenCloseIcon",
    "ShowGroupOpener",
    "ShowInvisibleCharacters",
    "ShowPageBreaks",
    "ShowPredictiveInterface",
    "ShowSelection",
    "ShowShortBoxForm",
    "ShowSpecialCharacters",
    "ShowStringCharacters",
    "ShowSyntaxStyles",
    "ShrinkingDelay",
    "ShrinkWrapBoundingBox",
    "SiderealTime",
    "SiegelTheta",
    "SiegelTukeyTest",
    "SierpinskiCurve",
    "SierpinskiMesh",
    "Sign",
    "Signature",
    "SignedRankTest",
    "SignedRegionDistance",
    "SignificanceLevel",
    "SignPadding",
    "SignTest",
    "SimilarityRules",
    "SimpleGraph",
    "SimpleGraphQ",
    "SimplePolygonQ",
    "SimplePolyhedronQ",
    "Simplex",
    "Simplify",
    "Sin",
    "Sinc",
    "SinghMaddalaDistribution",
    "SingleEvaluation",
    "SingleLetterItalics",
    "SingleLetterStyle",
    "SingularValueDecomposition",
    "SingularValueList",
    "SingularValuePlot",
    "SingularValues",
    "Sinh",
    "SinhIntegral",
    "SinIntegral",
    "SixJSymbol",
    "Skeleton",
    "SkeletonTransform",
    "SkellamDistribution",
    "Skewness",
    "SkewNormalDistribution",
    "SkinStyle",
    "Skip",
    "SliceContourPlot3D",
    "SliceDensityPlot3D",
    "SliceDistribution",
    "SliceVectorPlot3D",
    "Slider",
    "Slider2D",
    "Slider2DBox",
    "Slider2DBoxOptions",
    "SliderBox",
    "SliderBoxOptions",
    "SlideShowVideo",
    "SlideView",
    "Slot",
    "SlotSequence",
    "Small",
    "SmallCircle",
    "Smaller",
    "SmithDecomposition",
    "SmithDelayCompensator",
    "SmithWatermanSimilarity",
    "SmoothDensityHistogram",
    "SmoothHistogram",
    "SmoothHistogram3D",
    "SmoothKernelDistribution",
    "SmoothPointDensity",
    "SnDispersion",
    "Snippet",
    "SnippetsVideo",
    "SnubPolyhedron",
    "SocialMediaData",
    "Socket",
    "SocketConnect",
    "SocketListen",
    "SocketListener",
    "SocketObject",
    "SocketOpen",
    "SocketReadMessage",
    "SocketReadyQ",
    "Sockets",
    "SocketWaitAll",
    "SocketWaitNext",
    "SoftmaxLayer",
    "SokalSneathDissimilarity",
    "SolarEclipse",
    "SolarSystemFeatureData",
    "SolarTime",
    "SolidAngle",
    "SolidBoundaryLoadValue",
    "SolidData",
    "SolidDisplacementCondition",
    "SolidFixedCondition",
    "SolidMechanicsPDEComponent",
    "SolidMechanicsStrain",
    "SolidMechanicsStress",
    "SolidRegionQ",
    "Solve",
    "SolveAlways",
    "SolveDelayed",
    "SolveValues",
    "Sort",
    "SortBy",
    "SortedBy",
    "SortedEntityClass",
    "Sound",
    "SoundAndGraphics",
    "SoundNote",
    "SoundVolume",
    "SourceLink",
    "SourcePDETerm",
    "Sow",
    "Space",
    "SpaceCurveData",
    "SpaceForm",
    "Spacer",
    "Spacings",
    "Span",
    "SpanAdjustments",
    "SpanCharacterRounding",
    "SpanFromAbove",
    "SpanFromBoth",
    "SpanFromLeft",
    "SpanLineThickness",
    "SpanMaxSize",
    "SpanMinSize",
    "SpanningCharacters",
    "SpanSymmetric",
    "SparseArray",
    "SparseArrayQ",
    "SpatialBinnedPointData",
    "SpatialBoundaryCorrection",
    "SpatialEstimate",
    "SpatialEstimatorFunction",
    "SpatialGraphDistribution",
    "SpatialJ",
    "SpatialMedian",
    "SpatialNoiseLevel",
    "SpatialObservationRegionQ",
    "SpatialPointData",
    "SpatialPointSelect",
    "SpatialRandomnessTest",
    "SpatialTransformationLayer",
    "SpatialTrendFunction",
    "Speak",
    "SpeakerMatchQ",
    "SpearmanRankTest",
    "SpearmanRho",
    "SpeciesData",
    "SpecificityGoal",
    "SpectralLineData",
    "Spectrogram",
    "SpectrogramArray",
    "Specularity",
    "SpeechCases",
    "SpeechInterpreter",
    "SpeechRecognize",
    "SpeechSynthesize",
    "SpellingCorrection",
    "SpellingCorrectionList",
    "SpellingDictionaries",
    "SpellingDictionariesPath",
    "SpellingOptions",
    "Sphere",
    "SphereBox",
    "SphereBoxOptions",
    "SpherePoints",
    "SphericalBesselJ",
    "SphericalBesselY",
    "SphericalHankelH1",
    "SphericalHankelH2",
    "SphericalHarmonicY",
    "SphericalPlot3D",
    "SphericalRegion",
    "SphericalShell",
    "SpheroidalEigenvalue",
    "SpheroidalJoiningFactor",
    "SpheroidalPS",
    "SpheroidalPSPrime",
    "SpheroidalQS",
    "SpheroidalQSPrime",
    "SpheroidalRadialFactor",
    "SpheroidalS1",
    "SpheroidalS1Prime",
    "SpheroidalS2",
    "SpheroidalS2Prime",
    "Splice",
    "SplicedDistribution",
    "SplineClosed",
    "SplineDegree",
    "SplineKnots",
    "SplineWeights",
    "Split",
    "SplitBy",
    "SpokenString",
    "SpotLight",
    "Sqrt",
    "SqrtBox",
    "SqrtBoxOptions",
    "Square",
    "SquaredEuclideanDistance",
    "SquareFreeQ",
    "SquareIntersection",
    "SquareMatrixQ",
    "SquareRepeatingElement",
    "SquaresR",
    "SquareSubset",
    "SquareSubsetEqual",
    "SquareSuperset",
    "SquareSupersetEqual",
    "SquareUnion",
    "SquareWave",
    "SSSTriangle",
    "StabilityMargins",
    "StabilityMarginsStyle",
    "StableDistribution",
    "Stack",
    "StackBegin",
    "StackComplete",
    "StackedDateListPlot",
    "StackedListPlot",
    "StackInhibit",
    "StadiumShape",
    "StandardAtmosphereData",
    "StandardDeviation",
    "StandardDeviationFilter",
    "StandardForm",
    "Standardize",
    "Standardized",
    "StandardOceanData",
    "StandbyDistribution",
    "Star",
    "StarClusterData",
    "StarData",
    "StarGraph",
    "StartAsynchronousTask",
    "StartExternalSession",
    "StartingStepSize",
    "StartOfLine",
    "StartOfString",
    "StartProcess",
    "StartScheduledTask",
    "StartupSound",
    "StartWebSession",
    "StateDimensions",
    "StateFeedbackGains",
    "StateOutputEstimator",
    "StateResponse",
    "StateSpaceModel",
    "StateSpaceRealization",
    "StateSpaceTransform",
    "StateTransformationLinearize",
    "StationaryDistribution",
    "StationaryWaveletPacketTransform",
    "StationaryWaveletTransform",
    "StatusArea",
    "StatusCentrality",
    "StepMonitor",
    "StereochemistryElements",
    "StieltjesGamma",
    "StippleShading",
    "StirlingS1",
    "StirlingS2",
    "StopAsynchronousTask",
    "StoppingPowerData",
    "StopScheduledTask",
    "StrataVariables",
    "StratonovichProcess",
    "StraussHardcorePointProcess",
    "StraussPointProcess",
    "StreamColorFunction",
    "StreamColorFunctionScaling",
    "StreamDensityPlot",
    "StreamMarkers",
    "StreamPlot",
    "StreamPlot3D",
    "StreamPoints",
    "StreamPosition",
    "Streams",
    "StreamScale",
    "StreamStyle",
    "StrictInequalities",
    "String",
    "StringBreak",
    "StringByteCount",
    "StringCases",
    "StringContainsQ",
    "StringCount",
    "StringDelete",
    "StringDrop",
    "StringEndsQ",
    "StringExpression",
    "StringExtract",
    "StringForm",
    "StringFormat",
    "StringFormatQ",
    "StringFreeQ",
    "StringInsert",
    "StringJoin",
    "StringLength",
    "StringMatchQ",
    "StringPadLeft",
    "StringPadRight",
    "StringPart",
    "StringPartition",
    "StringPosition",
    "StringQ",
    "StringRepeat",
    "StringReplace",
    "StringReplaceList",
    "StringReplacePart",
    "StringReverse",
    "StringRiffle",
    "StringRotateLeft",
    "StringRotateRight",
    "StringSkeleton",
    "StringSplit",
    "StringStartsQ",
    "StringTake",
    "StringTakeDrop",
    "StringTemplate",
    "StringToByteArray",
    "StringToStream",
    "StringTrim",
    "StripBoxes",
    "StripOnInput",
    "StripStyleOnPaste",
    "StripWrapperBoxes",
    "StrokeForm",
    "Struckthrough",
    "StructuralImportance",
    "StructuredArray",
    "StructuredArrayHeadQ",
    "StructuredSelection",
    "StruveH",
    "StruveL",
    "Stub",
    "StudentTDistribution",
    "Style",
    "StyleBox",
    "StyleBoxAutoDelete",
    "StyleData",
    "StyleDefinitions",
    "StyleForm",
    "StyleHints",
    "StyleKeyMapping",
    "StyleMenuListing",
    "StyleNameDialogSettings",
    "StyleNames",
    "StylePrint",
    "StyleSheetPath",
    "Subdivide",
    "Subfactorial",
    "Subgraph",
    "SubMinus",
    "SubPlus",
    "SubresultantPolynomialRemainders",
    "SubresultantPolynomials",
    "Subresultants",
    "Subscript",
    "SubscriptBox",
    "SubscriptBoxOptions",
    "Subscripted",
    "Subsequences",
    "Subset",
    "SubsetCases",
    "SubsetCount",
    "SubsetEqual",
    "SubsetMap",
    "SubsetPosition",
    "SubsetQ",
    "SubsetReplace",
    "Subsets",
    "SubStar",
    "SubstitutionSystem",
    "Subsuperscript",
    "SubsuperscriptBox",
    "SubsuperscriptBoxOptions",
    "SubtitleEncoding",
    "SubtitleTrackSelection",
    "Subtract",
    "SubtractFrom",
    "SubtractSides",
    "SubValues",
    "Succeeds",
    "SucceedsEqual",
    "SucceedsSlantEqual",
    "SucceedsTilde",
    "Success",
    "SuchThat",
    "Sum",
    "SumConvergence",
    "SummationLayer",
    "Sunday",
    "SunPosition",
    "Sunrise",
    "Sunset",
    "SuperDagger",
    "SuperMinus",
    "SupernovaData",
    "SuperPlus",
    "Superscript",
    "SuperscriptBox",
    "SuperscriptBoxOptions",
    "Superset",
    "SupersetEqual",
    "SuperStar",
    "Surd",
    "SurdForm",
    "SurfaceAppearance",
    "SurfaceArea",
    "SurfaceColor",
    "SurfaceData",
    "SurfaceGraphics",
    "SurvivalDistribution",
    "SurvivalFunction",
    "SurvivalModel",
    "SurvivalModelFit",
    "SuspendPacket",
    "SuzukiDistribution",
    "SuzukiGroupSuz",
    "SwatchLegend",
    "Switch",
    "Symbol",
    "SymbolName",
    "SymletWavelet",
    "Symmetric",
    "SymmetricDifference",
    "SymmetricGroup",
    "SymmetricKey",
    "SymmetricMatrixQ",
    "SymmetricPolynomial",
    "SymmetricReduction",
    "Symmetrize",
    "SymmetrizedArray",
    "SymmetrizedArrayRules",
    "SymmetrizedDependentComponents",
    "SymmetrizedIndependentComponents",
    "SymmetrizedReplacePart",
    "SynchronousInitialization",
    "SynchronousUpdating",
    "Synonyms",
    "Syntax",
    "SyntaxForm",
    "SyntaxInformation",
    "SyntaxLength",
    "SyntaxPacket",
    "SyntaxQ",
    "SynthesizeMissingValues",
    "SystemCredential",
    "SystemCredentialData",
    "SystemCredentialKey",
    "SystemCredentialKeys",
    "SystemCredentialStoreObject",
    "SystemDialogInput",
    "SystemException",
    "SystemGet",
    "SystemHelpPath",
    "SystemInformation",
    "SystemInformationData",
    "SystemInstall",
    "SystemModel",
    "SystemModeler",
    "SystemModelExamples",
    "SystemModelLinearize",
    "SystemModelMeasurements",
    "SystemModelParametricSimulate",
    "SystemModelPlot",
    "SystemModelProgressReporting",
    "SystemModelReliability",
    "SystemModels",
    "SystemModelSimulate",
    "SystemModelSimulateSensitivity",
    "SystemModelSimulationData",
    "SystemOpen",
    "SystemOptions",
    "SystemProcessData",
    "SystemProcesses",
    "SystemsConnectionsModel",
    "SystemsModelControllerData",
    "SystemsModelDelay",
    "SystemsModelDelayApproximate",
    "SystemsModelDelete",
    "SystemsModelDimensions",
    "SystemsModelExtract",
    "SystemsModelFeedbackConnect",
    "SystemsModelLabels",
    "SystemsModelLinearity",
    "SystemsModelMerge",
    "SystemsModelOrder",
    "SystemsModelParallelConnect",
    "SystemsModelSeriesConnect",
    "SystemsModelStateFeedbackConnect",
    "SystemsModelVectorRelativeOrders",
    "SystemStub",
    "SystemTest",
    "Tab",
    "TabFilling",
    "Table",
    "TableAlignments",
    "TableDepth",
    "TableDirections",
    "TableForm",
    "TableHeadings",
    "TableSpacing",
    "TableView",
    "TableViewBox",
    "TableViewBoxAlignment",
    "TableViewBoxBackground",
    "TableViewBoxHeaders",
    "TableViewBoxItemSize",
    "TableViewBoxItemStyle",
    "TableViewBoxOptions",
    "TabSpacings",
    "TabView",
    "TabViewBox",
    "TabViewBoxOptions",
    "TagBox",
    "TagBoxNote",
    "TagBoxOptions",
    "TaggingRules",
    "TagSet",
    "TagSetDelayed",
    "TagStyle",
    "TagUnset",
    "Take",
    "TakeDrop",
    "TakeLargest",
    "TakeLargestBy",
    "TakeList",
    "TakeSmallest",
    "TakeSmallestBy",
    "TakeWhile",
    "Tally",
    "Tan",
    "Tanh",
    "TargetDevice",
    "TargetFunctions",
    "TargetSystem",
    "TargetUnits",
    "TaskAbort",
    "TaskExecute",
    "TaskObject",
    "TaskRemove",
    "TaskResume",
    "Tasks",
    "TaskSuspend",
    "TaskWait",
    "TautologyQ",
    "TelegraphProcess",
    "TemplateApply",
    "TemplateArgBox",
    "TemplateBox",
    "TemplateBoxOptions",
    "TemplateEvaluate",
    "TemplateExpression",
    "TemplateIf",
    "TemplateObject",
    "TemplateSequence",
    "TemplateSlot",
    "TemplateSlotSequence",
    "TemplateUnevaluated",
    "TemplateVerbatim",
    "TemplateWith",
    "TemporalData",
    "TemporalRegularity",
    "Temporary",
    "TemporaryVariable",
    "TensorContract",
    "TensorDimensions",
    "TensorExpand",
    "TensorProduct",
    "TensorQ",
    "TensorRank",
    "TensorReduce",
    "TensorSymmetry",
    "TensorTranspose",
    "TensorWedge",
    "TerminatedEvaluation",
    "TernaryListPlot",
    "TernaryPlotCorners",
    "TestID",
    "TestReport",
    "TestReportObject",
    "TestResultObject",
    "Tetrahedron",
    "TetrahedronBox",
    "TetrahedronBoxOptions",
    "TeXForm",
    "TeXSave",
    "Text",
    "Text3DBox",
    "Text3DBoxOptions",
    "TextAlignment",
    "TextBand",
    "TextBoundingBox",
    "TextBox",
    "TextCases",
    "TextCell",
    "TextClipboardType",
    "TextContents",
    "TextData",
    "TextElement",
    "TextForm",
    "TextGrid",
    "TextJustification",
    "TextLine",
    "TextPacket",
    "TextParagraph",
    "TextPosition",
    "TextRecognize",
    "TextSearch",
    "TextSearchReport",
    "TextSentences",
    "TextString",
    "TextStructure",
    "TextStyle",
    "TextTranslation",
    "Texture",
    "TextureCoordinateFunction",
    "TextureCoordinateScaling",
    "TextWords",
    "Therefore",
    "ThermodynamicData",
    "ThermometerGauge",
    "Thick",
    "Thickness",
    "Thin",
    "Thinning",
    "ThisLink",
    "ThomasPointProcess",
    "ThompsonGroupTh",
    "Thread",
    "Threaded",
    "ThreadingLayer",
    "ThreeJSymbol",
    "Threshold",
    "Through",
    "Throw",
    "ThueMorse",
    "Thumbnail",
    "Thursday",
    "TickDirection",
    "TickLabelOrientation",
    "TickLabelPositioning",
    "TickLabels",
    "TickLengths",
    "TickPositions",
    "Ticks",
    "TicksStyle",
    "TideData",
    "Tilde",
    "TildeEqual",
    "TildeFullEqual",
    "TildeTilde",
    "TimeConstrained",
    "TimeConstraint",
    "TimeDirection",
    "TimeFormat",
    "TimeGoal",
    "TimelinePlot",
    "TimeObject",
    "TimeObjectQ",
    "TimeRemaining",
    "Times",
    "TimesBy",
    "TimeSeries",
    "TimeSeriesAggregate",
    "TimeSeriesForecast",
    "TimeSeriesInsert",
    "TimeSeriesInvertibility",
    "TimeSeriesMap",
    "TimeSeriesMapThread",
    "TimeSeriesModel",
    "TimeSeriesModelFit",
    "TimeSeriesResample",
    "TimeSeriesRescale",
    "TimeSeriesShift",
    "TimeSeriesThread",
    "TimeSeriesWindow",
    "TimeSystem",
    "TimeSystemConvert",
    "TimeUsed",
    "TimeValue",
    "TimeWarpingCorrespondence",
    "TimeWarpingDistance",
    "TimeZone",
    "TimeZoneConvert",
    "TimeZoneOffset",
    "Timing",
    "Tiny",
    "TitleGrouping",
    "TitsGroupT",
    "ToBoxes",
    "ToCharacterCode",
    "ToColor",
    "ToContinuousTimeModel",
    "ToDate",
    "Today",
    "ToDiscreteTimeModel",
    "ToEntity",
    "ToeplitzMatrix",
    "ToExpression",
    "ToFileName",
    "Together",
    "Toggle",
    "ToggleFalse",
    "Toggler",
    "TogglerBar",
    "TogglerBox",
    "TogglerBoxOptions",
    "ToHeldExpression",
    "ToInvertibleTimeSeries",
    "TokenWords",
    "Tolerance",
    "ToLowerCase",
    "Tomorrow",
    "ToNumberField",
    "TooBig",
    "Tooltip",
    "TooltipBox",
    "TooltipBoxOptions",
    "TooltipDelay",
    "TooltipStyle",
    "ToonShading",
    "Top",
    "TopHatTransform",
    "ToPolarCoordinates",
    "TopologicalSort",
    "ToRadicals",
    "ToRawPointer",
    "ToRules",
    "Torus",
    "TorusGraph",
    "ToSphericalCoordinates",
    "ToString",
    "Total",
    "TotalHeight",
    "TotalLayer",
    "TotalVariationFilter",
    "TotalWidth",
    "TouchPosition",
    "TouchscreenAutoZoom",
    "TouchscreenControlPlacement",
    "ToUpperCase",
    "TourVideo",
    "Tr",
    "Trace",
    "TraceAbove",
    "TraceAction",
    "TraceBackward",
    "TraceDepth",
    "TraceDialog",
    "TraceForward",
    "TraceInternal",
    "TraceLevel",
    "TraceOff",
    "TraceOn",
    "TraceOriginal",
    "TracePrint",
    "TraceScan",
    "TrackCellChangeTimes",
    "TrackedSymbols",
    "TrackingFunction",
    "TracyWidomDistribution",
    "TradingChart",
    "TraditionalForm",
    "TraditionalFunctionNotation",
    "TraditionalNotation",
    "TraditionalOrder",
    "TrainImageContentDetector",
    "TrainingProgressCheckpointing",
    "TrainingProgressFunction",
    "TrainingProgressMeasurements",
    "TrainingProgressReporting",
    "TrainingStoppingCriterion",
    "TrainingUpdateSchedule",
    "TrainTextContentDetector",
    "TransferFunctionCancel",
    "TransferFunctionExpand",
    "TransferFunctionFactor",
    "TransferFunctionModel",
    "TransferFunctionPoles",
    "TransferFunctionTransform",
    "TransferFunctionZeros",
    "TransformationClass",
    "TransformationFunction",
    "TransformationFunctions",
    "TransformationMatrix",
    "TransformedDistribution",
    "TransformedField",
    "TransformedProcess",
    "TransformedRegion",
    "TransitionDirection",
    "TransitionDuration",
    "TransitionEffect",
    "TransitiveClosureGraph",
    "TransitiveReductionGraph",
    "Translate",
    "TranslationOptions",
    "TranslationTransform",
    "Transliterate",
    "Transparent",
    "TransparentColor",
    "Transpose",
    "TransposeLayer",
    "TrapEnterKey",
    "TrapSelection",
    "TravelDirections",
    "TravelDirectionsData",
    "TravelDistance",
    "TravelDistanceList",
    "TravelMethod",
    "TravelTime",
    "Tree",
    "TreeCases",
    "TreeChildren",
    "TreeCount",
    "TreeData",
    "TreeDelete",
    "TreeDepth",
    "TreeElementCoordinates",
    "TreeElementLabel",
    "TreeElementLabelFunction",
    "TreeElementLabelStyle",
    "TreeElementShape",
    "TreeElementShapeFunction",
    "TreeElementSize",
    "TreeElementSizeFunction",
    "TreeElementStyle",
    "TreeElementStyleFunction",
    "TreeExpression",
    "TreeExtract",
    "TreeFold",
    "TreeForm",
    "TreeGraph",
    "TreeGraphQ",
    "TreeInsert",
    "TreeLayout",
    "TreeLeafCount",
    "TreeLeafQ",
    "TreeLeaves",
    "TreeLevel",
    "TreeMap",
    "TreeMapAt",
    "TreeOutline",
    "TreePlot",
    "TreePosition",
    "TreeQ",
    "TreeReplacePart",
    "TreeRules",
    "TreeScan",
    "TreeSelect",
    "TreeSize",
    "TreeTraversalOrder",
    "TrendStyle",
    "Triangle",
    "TriangleCenter",
    "TriangleConstruct",
    "TriangleMeasurement",
    "TriangleWave",
    "TriangularDistribution",
    "TriangulateMesh",
    "Trig",
    "TrigExpand",
    "TrigFactor",
    "TrigFactorList",
    "Trigger",
    "TrigReduce",
    "TrigToExp",
    "TrimmedMean",
    "TrimmedVariance",
    "TropicalStormData",
    "True",
    "TrueQ",
    "TruncatedDistribution",
    "TruncatedPolyhedron",
    "TsallisQExponentialDistribution",
    "TsallisQGaussianDistribution",
    "TTest",
    "Tube",
    "TubeBezierCurveBox",
    "TubeBezierCurveBoxOptions",
    "TubeBox",
    "TubeBoxOptions",
    "TubeBSplineCurveBox",
    "TubeBSplineCurveBoxOptions",
    "Tuesday",
    "TukeyLambdaDistribution",
    "TukeyWindow",
    "TunnelData",
    "Tuples",
    "TuranGraph",
    "TuringMachine",
    "TuttePolynomial",
    "TwoWayRule",
    "Typed",
    "TypeDeclaration",
    "TypeEvaluate",
    "TypeHint",
    "TypeOf",
    "TypeSpecifier",
    "UnateQ",
    "Uncompress",
    "UnconstrainedParameters",
    "Undefined",
    "UnderBar",
    "Underflow",
    "Underlined",
    "Underoverscript",
    "UnderoverscriptBox",
    "UnderoverscriptBoxOptions",
    "Underscript",
    "UnderscriptBox",
    "UnderscriptBoxOptions",
    "UnderseaFeatureData",
    "UndirectedEdge",
    "UndirectedGraph",
    "UndirectedGraphQ",
    "UndoOptions",
    "UndoTrackedVariables",
    "Unequal",
    "UnequalTo",
    "Unevaluated",
    "UniformDistribution",
    "UniformGraphDistribution",
    "UniformPolyhedron",
    "UniformSumDistribution",
    "Uninstall",
    "Union",
    "UnionedEntityClass",
    "UnionPlus",
    "Unique",
    "UniqueElements",
    "UnitaryMatrixQ",
    "UnitBox",
    "UnitConvert",
    "UnitDimensions",
    "Unitize",
    "UnitRootTest",
    "UnitSimplify",
    "UnitStep",
    "UnitSystem",
    "UnitTriangle",
    "UnitVector",
    "UnitVectorLayer",
    "UnityDimensions",
    "UniverseModelData",
    "UniversityData",
    "UnixTime",
    "UnlabeledTree",
    "UnmanageObject",
    "Unprotect",
    "UnregisterExternalEvaluator",
    "UnsameQ",
    "UnsavedVariables",
    "Unset",
    "UnsetShared",
    "Until",
    "UntrackedVariables",
    "Up",
    "UpArrow",
    "UpArrowBar",
    "UpArrowDownArrow",
    "Update",
    "UpdateDynamicObjects",
    "UpdateDynamicObjectsSynchronous",
    "UpdateInterval",
    "UpdatePacletSites",
    "UpdateSearchIndex",
    "UpDownArrow",
    "UpEquilibrium",
    "UpperCaseQ",
    "UpperLeftArrow",
    "UpperRightArrow",
    "UpperTriangularize",
    "UpperTriangularMatrix",
    "UpperTriangularMatrixQ",
    "Upsample",
    "UpSet",
    "UpSetDelayed",
    "UpTee",
    "UpTeeArrow",
    "UpTo",
    "UpValues",
    "URL",
    "URLBuild",
    "URLDecode",
    "URLDispatcher",
    "URLDownload",
    "URLDownloadSubmit",
    "URLEncode",
    "URLExecute",
    "URLExpand",
    "URLFetch",
    "URLFetchAsynchronous",
    "URLParse",
    "URLQueryDecode",
    "URLQueryEncode",
    "URLRead",
    "URLResponseTime",
    "URLSave",
    "URLSaveAsynchronous",
    "URLShorten",
    "URLSubmit",
    "UseEmbeddedLibrary",
    "UseGraphicsRange",
    "UserDefinedWavelet",
    "Using",
    "UsingFrontEnd",
    "UtilityFunction",
    "V2Get",
    "ValenceErrorHandling",
    "ValenceFilling",
    "ValidationLength",
    "ValidationSet",
    "ValueBox",
    "ValueBoxOptions",
    "ValueDimensions",
    "ValueForm",
    "ValuePreprocessingFunction",
    "ValueQ",
    "Values",
    "ValuesData",
    "VandermondeMatrix",
    "Variables",
    "Variance",
    "VarianceEquivalenceTest",
    "VarianceEstimatorFunction",
    "VarianceGammaDistribution",
    "VarianceGammaPointProcess",
    "VarianceTest",
    "VariogramFunction",
    "VariogramModel",
    "VectorAngle",
    "VectorAround",
    "VectorAspectRatio",
    "VectorColorFunction",
    "VectorColorFunctionScaling",
    "VectorDensityPlot",
    "VectorDisplacementPlot",
    "VectorDisplacementPlot3D",
    "VectorGlyphData",
    "VectorGreater",
    "VectorGreaterEqual",
    "VectorLess",
    "VectorLessEqual",
    "VectorMarkers",
    "VectorPlot",
    "VectorPlot3D",
    "VectorPoints",
    "VectorQ",
    "VectorRange",
    "Vectors",
    "VectorScale",
    "VectorScaling",
    "VectorSizes",
    "VectorStyle",
    "Vee",
    "Verbatim",
    "Verbose",
    "VerificationTest",
    "VerifyConvergence",
    "VerifyDerivedKey",
    "VerifyDigitalSignature",
    "VerifyFileSignature",
    "VerifyInterpretation",
    "VerifySecurityCertificates",
    "VerifySolutions",
    "VerifyTestAssumptions",
    "VersionedPreferences",
    "VertexAdd",
    "VertexCapacity",
    "VertexChromaticNumber",
    "VertexColors",
    "VertexComponent",
    "VertexConnectivity",
    "VertexContract",
    "VertexCoordinateRules",
    "VertexCoordinates",
    "VertexCorrelationSimilarity",
    "VertexCosineSimilarity",
    "VertexCount",
    "VertexCoverQ",
    "VertexDataCoordinates",
    "VertexDegree",
    "VertexDelete",
    "VertexDiceSimilarity",
    "VertexEccentricity",
    "VertexInComponent",
    "VertexInComponentGraph",
    "VertexInDegree",
    "VertexIndex",
    "VertexJaccardSimilarity",
    "VertexLabeling",
    "VertexLabels",
    "VertexLabelStyle",
    "VertexList",
    "VertexNormals",
    "VertexOutComponent",
    "VertexOutComponentGraph",
    "VertexOutDegree",
    "VertexQ",
    "VertexRenderingFunction",
    "VertexReplace",
    "VertexShape",
    "VertexShapeFunction",
    "VertexSize",
    "VertexStyle",
    "VertexTextureCoordinates",
    "VertexTransitiveGraphQ",
    "VertexWeight",
    "VertexWeightedGraphQ",
    "Vertical",
    "VerticalBar",
    "VerticalForm",
    "VerticalGauge",
    "VerticalSeparator",
    "VerticalSlider",
    "VerticalTilde",
    "Video",
    "VideoCapture",
    "VideoCombine",
    "VideoDelete",
    "VideoEncoding",
    "VideoExtractFrames",
    "VideoFrameList",
    "VideoFrameMap",
    "VideoGenerator",
    "VideoInsert",
    "VideoIntervals",
    "VideoJoin",
    "VideoMap",
    "VideoMapList",
    "VideoMapTimeSeries",
    "VideoPadding",
    "VideoPause",
    "VideoPlay",
    "VideoQ",
    "VideoRecord",
    "VideoReplace",
    "VideoScreenCapture",
    "VideoSplit",
    "VideoStop",
    "VideoStream",
    "VideoStreams",
    "VideoTimeStretch",
    "VideoTrackSelection",
    "VideoTranscode",
    "VideoTransparency",
    "VideoTrim",
    "ViewAngle",
    "ViewCenter",
    "ViewMatrix",
    "ViewPoint",
    "ViewPointSelectorSettings",
    "ViewPort",
    "ViewProjection",
    "ViewRange",
    "ViewVector",
    "ViewVertical",
    "VirtualGroupData",
    "Visible",
    "VisibleCell",
    "VoiceStyleData",
    "VoigtDistribution",
    "VolcanoData",
    "Volume",
    "VonMisesDistribution",
    "VoronoiMesh",
    "WaitAll",
    "WaitAsynchronousTask",
    "WaitNext",
    "WaitUntil",
    "WakebyDistribution",
    "WalleniusHypergeometricDistribution",
    "WaringYuleDistribution",
    "WarpingCorrespondence",
    "WarpingDistance",
    "WatershedComponents",
    "WatsonUSquareTest",
    "WattsStrogatzGraphDistribution",
    "WaveletBestBasis",
    "WaveletFilterCoefficients",
    "WaveletImagePlot",
    "WaveletListPlot",
    "WaveletMapIndexed",
    "WaveletMatrixPlot",
    "WaveletPhi",
    "WaveletPsi",
    "WaveletScale",
    "WaveletScalogram",
    "WaveletThreshold",
    "WavePDEComponent",
    "WeaklyConnectedComponents",
    "WeaklyConnectedGraphComponents",
    "WeaklyConnectedGraphQ",
    "WeakStationarity",
    "WeatherData",
    "WeatherForecastData",
    "WebAudioSearch",
    "WebColumn",
    "WebElementObject",
    "WeberE",
    "WebExecute",
    "WebImage",
    "WebImageSearch",
    "WebItem",
    "WebPageMetaInformation",
    "WebRow",
    "WebSearch",
    "WebSessionObject",
    "WebSessions",
    "WebWindowObject",
    "Wedge",
    "Wednesday",
    "WeibullDistribution",
    "WeierstrassE1",
    "WeierstrassE2",
    "WeierstrassE3",
    "WeierstrassEta1",
    "WeierstrassEta2",
    "WeierstrassEta3",
    "WeierstrassHalfPeriods",
    "WeierstrassHalfPeriodW1",
    "WeierstrassHalfPeriodW2",
    "WeierstrassHalfPeriodW3",
    "WeierstrassInvariantG2",
    "WeierstrassInvariantG3",
    "WeierstrassInvariants",
    "WeierstrassP",
    "WeierstrassPPrime",
    "WeierstrassSigma",
    "WeierstrassZeta",
    "WeightedAdjacencyGraph",
    "WeightedAdjacencyMatrix",
    "WeightedData",
    "WeightedGraphQ",
    "Weights",
    "WelchWindow",
    "WheelGraph",
    "WhenEvent",
    "Which",
    "While",
    "White",
    "WhiteNoiseProcess",
    "WhitePoint",
    "Whitespace",
    "WhitespaceCharacter",
    "WhittakerM",
    "WhittakerW",
    "WholeCellGroupOpener",
    "WienerFilter",
    "WienerProcess",
    "WignerD",
    "WignerSemicircleDistribution",
    "WikidataData",
    "WikidataSearch",
    "WikipediaData",
    "WikipediaSearch",
    "WilksW",
    "WilksWTest",
    "WindDirectionData",
    "WindingCount",
    "WindingPolygon",
    "WindowClickSelect",
    "WindowElements",
    "WindowFloating",
    "WindowFrame",
    "WindowFrameElements",
    "WindowMargins",
    "WindowMovable",
    "WindowOpacity",
    "WindowPersistentStyles",
    "WindowSelected",
    "WindowSize",
    "WindowStatusArea",
    "WindowTitle",
    "WindowToolbars",
    "WindowWidth",
    "WindSpeedData",
    "WindVectorData",
    "WinsorizedMean",
    "WinsorizedVariance",
    "WishartMatrixDistribution",
    "With",
    "WithCleanup",
    "WithLock",
    "WolframAlpha",
    "WolframAlphaDate",
    "WolframAlphaQuantity",
    "WolframAlphaResult",
    "WolframCloudSettings",
    "WolframLanguageData",
    "Word",
    "WordBoundary",
    "WordCharacter",
    "WordCloud",
    "WordCount",
    "WordCounts",
    "WordData",
    "WordDefinition",
    "WordFrequency",
    "WordFrequencyData",
    "WordList",
    "WordOrientation",
    "WordSearch",
    "WordSelectionFunction",
    "WordSeparators",
    "WordSpacings",
    "WordStem",
    "WordTranslation",
    "WorkingPrecision",
    "WrapAround",
    "Write",
    "WriteLine",
    "WriteString",
    "Wronskian",
    "XMLElement",
    "XMLObject",
    "XMLTemplate",
    "Xnor",
    "Xor",
    "XYZColor",
    "Yellow",
    "Yesterday",
    "YuleDissimilarity",
    "ZernikeR",
    "ZeroSymmetric",
    "ZeroTest",
    "ZeroWidthTimes",
    "Zeta",
    "ZetaZero",
    "ZIPCodeData",
    "ZipfDistribution",
    "ZoomCenter",
    "ZoomFactor",
    "ZTest",
    "ZTransform",
    "$Aborted",
    "$ActivationGroupID",
    "$ActivationKey",
    "$ActivationUserRegistered",
    "$AddOnsDirectory",
    "$AllowDataUpdates",
    "$AllowExternalChannelFunctions",
    "$AllowInternet",
    "$AssertFunction",
    "$Assumptions",
    "$AsynchronousTask",
    "$AudioDecoders",
    "$AudioEncoders",
    "$AudioInputDevices",
    "$AudioOutputDevices",
    "$BaseDirectory",
    "$BasePacletsDirectory",
    "$BatchInput",
    "$BatchOutput",
    "$BlockchainBase",
    "$BoxForms",
    "$ByteOrdering",
    "$CacheBaseDirectory",
    "$Canceled",
    "$ChannelBase",
    "$CharacterEncoding",
    "$CharacterEncodings",
    "$CloudAccountName",
    "$CloudBase",
    "$CloudConnected",
    "$CloudConnection",
    "$CloudCreditsAvailable",
    "$CloudEvaluation",
    "$CloudExpressionBase",
    "$CloudObjectNameFormat",
    "$CloudObjectURLType",
    "$CloudRootDirectory",
    "$CloudSymbolBase",
    "$CloudUserID",
    "$CloudUserUUID",
    "$CloudVersion",
    "$CloudVersionNumber",
    "$CloudWolframEngineVersionNumber",
    "$CommandLine",
    "$CompilationTarget",
    "$CompilerEnvironment",
    "$ConditionHold",
    "$ConfiguredKernels",
    "$Context",
    "$ContextAliases",
    "$ContextPath",
    "$ControlActiveSetting",
    "$Cookies",
    "$CookieStore",
    "$CreationDate",
    "$CryptographicEllipticCurveNames",
    "$CurrentLink",
    "$CurrentTask",
    "$CurrentWebSession",
    "$DataStructures",
    "$DateStringFormat",
    "$DefaultAudioInputDevice",
    "$DefaultAudioOutputDevice",
    "$DefaultFont",
    "$DefaultFrontEnd",
    "$DefaultImagingDevice",
    "$DefaultKernels",
    "$DefaultLocalBase",
    "$DefaultLocalKernel",
    "$DefaultMailbox",
    "$DefaultNetworkInterface",
    "$DefaultPath",
    "$DefaultProxyRules",
    "$DefaultRemoteBatchSubmissionEnvironment",
    "$DefaultRemoteKernel",
    "$DefaultSystemCredentialStore",
    "$Display",
    "$DisplayFunction",
    "$DistributedContexts",
    "$DynamicEvaluation",
    "$Echo",
    "$EmbedCodeEnvironments",
    "$EmbeddableServices",
    "$EntityStores",
    "$Epilog",
    "$EvaluationCloudBase",
    "$EvaluationCloudObject",
    "$EvaluationEnvironment",
    "$ExportFormats",
    "$ExternalIdentifierTypes",
    "$ExternalStorageBase",
    "$Failed",
    "$FinancialDataSource",
    "$FontFamilies",
    "$FormatType",
    "$FrontEnd",
    "$FrontEndSession",
    "$GeneratedAssetLocation",
    "$GeoEntityTypes",
    "$GeoLocation",
    "$GeoLocationCity",
    "$GeoLocationCountry",
    "$GeoLocationPrecision",
    "$GeoLocationSource",
    "$HistoryLength",
    "$HomeDirectory",
    "$HTMLExportRules",
    "$HTTPCookies",
    "$HTTPRequest",
    "$IgnoreEOF",
    "$ImageFormattingWidth",
    "$ImageResolution",
    "$ImagingDevice",
    "$ImagingDevices",
    "$ImportFormats",
    "$IncomingMailSettings",
    "$InitialDirectory",
    "$Initialization",
    "$InitializationContexts",
    "$Input",
    "$InputFileName",
    "$InputStreamMethods",
    "$Inspector",
    "$InstallationDate",
    "$InstallationDirectory",
    "$InterfaceEnvironment",
    "$InterpreterTypes",
    "$IterationLimit",
    "$KernelCount",
    "$KernelID",
    "$Language",
    "$LaunchDirectory",
    "$LibraryPath",
    "$LicenseExpirationDate",
    "$LicenseID",
    "$LicenseProcesses",
    "$LicenseServer",
    "$LicenseSubprocesses",
    "$LicenseType",
    "$Line",
    "$Linked",
    "$LinkSupported",
    "$LoadedFiles",
    "$LocalBase",
    "$LocalSymbolBase",
    "$MachineAddresses",
    "$MachineDomain",
    "$MachineDomains",
    "$MachineEpsilon",
    "$MachineID",
    "$MachineName",
    "$MachinePrecision",
    "$MachineType",
    "$MaxDisplayedChildren",
    "$MaxExtraPrecision",
    "$MaxLicenseProcesses",
    "$MaxLicenseSubprocesses",
    "$MaxMachineNumber",
    "$MaxNumber",
    "$MaxPiecewiseCases",
    "$MaxPrecision",
    "$MaxRootDegree",
    "$MessageGroups",
    "$MessageList",
    "$MessagePrePrint",
    "$Messages",
    "$MinMachineNumber",
    "$MinNumber",
    "$MinorReleaseNumber",
    "$MinPrecision",
    "$MobilePhone",
    "$ModuleNumber",
    "$NetworkConnected",
    "$NetworkInterfaces",
    "$NetworkLicense",
    "$NewMessage",
    "$NewSymbol",
    "$NotebookInlineStorageLimit",
    "$Notebooks",
    "$NoValue",
    "$NumberMarks",
    "$Off",
    "$OperatingSystem",
    "$Output",
    "$OutputForms",
    "$OutputSizeLimit",
    "$OutputStreamMethods",
    "$Packages",
    "$ParentLink",
    "$ParentProcessID",
    "$PasswordFile",
    "$PatchLevelID",
    "$Path",
    "$PathnameSeparator",
    "$PerformanceGoal",
    "$Permissions",
    "$PermissionsGroupBase",
    "$PersistenceBase",
    "$PersistencePath",
    "$PipeSupported",
    "$PlotTheme",
    "$Post",
    "$Pre",
    "$PreferencesDirectory",
    "$PreInitialization",
    "$PrePrint",
    "$PreRead",
    "$PrintForms",
    "$PrintLiteral",
    "$Printout3DPreviewer",
    "$ProcessID",
    "$ProcessorCount",
    "$ProcessorType",
    "$ProductInformation",
    "$ProgramName",
    "$ProgressReporting",
    "$PublisherID",
    "$RandomGeneratorState",
    "$RandomState",
    "$RecursionLimit",
    "$RegisteredDeviceClasses",
    "$RegisteredUserName",
    "$ReleaseNumber",
    "$RequesterAddress",
    "$RequesterCloudUserID",
    "$RequesterCloudUserUUID",
    "$RequesterWolframID",
    "$RequesterWolframUUID",
    "$ResourceSystemBase",
    "$ResourceSystemPath",
    "$RootDirectory",
    "$ScheduledTask",
    "$ScriptCommandLine",
    "$ScriptInputString",
    "$SecuredAuthenticationKeyTokens",
    "$ServiceCreditsAvailable",
    "$Services",
    "$SessionID",
    "$SetParentLink",
    "$SharedFunctions",
    "$SharedVariables",
    "$SoundDisplay",
    "$SoundDisplayFunction",
    "$SourceLink",
    "$SSHAuthentication",
    "$SubtitleDecoders",
    "$SubtitleEncoders",
    "$SummaryBoxDataSizeLimit",
    "$SuppressInputFormHeads",
    "$SynchronousEvaluation",
    "$SyntaxHandler",
    "$System",
    "$SystemCharacterEncoding",
    "$SystemCredentialStore",
    "$SystemID",
    "$SystemMemory",
    "$SystemShell",
    "$SystemTimeZone",
    "$SystemWordLength",
    "$TargetSystems",
    "$TemplatePath",
    "$TemporaryDirectory",
    "$TemporaryPrefix",
    "$TestFileName",
    "$TextStyle",
    "$TimedOut",
    "$TimeUnit",
    "$TimeZone",
    "$TimeZoneEntity",
    "$TopDirectory",
    "$TraceOff",
    "$TraceOn",
    "$TracePattern",
    "$TracePostAction",
    "$TracePreAction",
    "$UnitSystem",
    "$Urgent",
    "$UserAddOnsDirectory",
    "$UserAgentLanguages",
    "$UserAgentMachine",
    "$UserAgentName",
    "$UserAgentOperatingSystem",
    "$UserAgentString",
    "$UserAgentVersion",
    "$UserBaseDirectory",
    "$UserBasePacletsDirectory",
    "$UserDocumentsDirectory",
    "$Username",
    "$UserName",
    "$UserURLBase",
    "$Version",
    "$VersionNumber",
    "$VideoDecoders",
    "$VideoEncoders",
    "$VoiceStyles",
    "$WolframDocumentsDirectory",
    "$WolframID",
    "$WolframUUID"
  ];
  function e2(n) {
    const i2 = n.regex, r2 = /([2-9]|[1-2]\d|[3][0-5])\^\^/, a2 = /(\w*\.\w+|\w+\.\w*|\w+)/, s2 = /(\d*\.\d+|\d+\.\d*|\d+)/, o2 = i2.either(i2.concat(r2, a2), s2), l2 = /``[+-]?(\d*\.\d+|\d+\.\d*|\d+)/, u2 = /`([+-]?(\d*\.\d+|\d+\.\d*|\d+))?/, _ = i2.either(l2, u2), d2 = /\*\^[+-]?\d+/, b = {
      className: "number",
      relevance: 0,
      begin: i2.concat(
        o2,
        i2.optional(_),
        i2.optional(d2)
      )
    }, c2 = /[a-zA-Z$][a-zA-Z0-9$]*/, E2 = new Set(t2), g2 = { variants: [
      {
        className: "builtin-symbol",
        begin: c2,
        // for performance out of fear of regex.either(...Mathematica.SYSTEM_SYMBOLS)
        "on:begin": (C2, A2) => {
          E2.has(C2[0]) || A2.ignoreMatch();
        }
      },
      {
        className: "symbol",
        relevance: 0,
        begin: c2
      }
    ] }, S = {
      className: "named-character",
      begin: /\\\[[$a-zA-Z][$a-zA-Z0-9]+\]/
    }, p2 = {
      className: "operator",
      relevance: 0,
      begin: /[+\-*/,;.:@~=><&|_`'^?!%]+/
    }, m2 = {
      className: "pattern",
      relevance: 0,
      begin: /([a-zA-Z$][a-zA-Z0-9$]*)?_+([a-zA-Z$][a-zA-Z0-9$]*)?/
    }, R2 = {
      className: "slot",
      relevance: 0,
      begin: /#[a-zA-Z$][a-zA-Z0-9$]*|#+[0-9]?/
    }, T = {
      className: "brace",
      relevance: 0,
      begin: /[[\](){}]/
    }, h2 = {
      className: "message-name",
      relevance: 0,
      begin: i2.concat("::", c2)
    };
    return {
      name: "Mathematica",
      aliases: [
        "mma",
        "wl"
      ],
      classNameAliases: {
        brace: "punctuation",
        pattern: "type",
        slot: "type",
        symbol: "variable",
        "named-character": "variable",
        "builtin-symbol": "built_in",
        "message-name": "string"
      },
      contains: [
        n.COMMENT(/\(\*/, /\*\)/, { contains: ["self"] }),
        m2,
        R2,
        h2,
        g2,
        S,
        n.QUOTE_STRING_MODE,
        b,
        p2,
        T
      ]
    };
  }
  return bo = e2, bo;
}
var To, Od;
function gC() {
  if (Od)
    return To;
  Od = 1;
  function t2(e2) {
    const n = "('|\\.')+", i2 = {
      relevance: 0,
      contains: [{ begin: n }]
    };
    return {
      name: "Matlab",
      keywords: {
        keyword: "arguments break case catch classdef continue else elseif end enumeration events for function global if methods otherwise parfor persistent properties return spmd switch try while",
        built_in: "sin sind sinh asin asind asinh cos cosd cosh acos acosd acosh tan tand tanh atan atand atan2 atanh sec secd sech asec asecd asech csc cscd csch acsc acscd acsch cot cotd coth acot acotd acoth hypot exp expm1 log log1p log10 log2 pow2 realpow reallog realsqrt sqrt nthroot nextpow2 abs angle complex conj imag real unwrap isreal cplxpair fix floor ceil round mod rem sign airy besselj bessely besselh besseli besselk beta betainc betaln ellipj ellipke erf erfc erfcx erfinv expint gamma gammainc gammaln psi legendre cross dot factor isprime primes gcd lcm rat rats perms nchoosek factorial cart2sph cart2pol pol2cart sph2cart hsv2rgb rgb2hsv zeros ones eye repmat rand randn linspace logspace freqspace meshgrid accumarray size length ndims numel disp isempty isequal isequalwithequalnans cat reshape diag blkdiag tril triu fliplr flipud flipdim rot90 find sub2ind ind2sub bsxfun ndgrid permute ipermute shiftdim circshift squeeze isscalar isvector ans eps realmax realmin pi i|0 inf nan isnan isinf isfinite j|0 why compan gallery hadamard hankel hilb invhilb magic pascal rosser toeplitz vander wilkinson max min nanmax nanmin mean nanmean type table readtable writetable sortrows sort figure plot plot3 scatter scatter3 cellfun legend intersect ismember procrustes hold num2cell "
      },
      illegal: '(//|"|#|/\\*|\\s+/\\w+)',
      contains: [
        {
          className: "function",
          beginKeywords: "function",
          end: "$",
          contains: [
            e2.UNDERSCORE_TITLE_MODE,
            {
              className: "params",
              variants: [
                {
                  begin: "\\(",
                  end: "\\)"
                },
                {
                  begin: "\\[",
                  end: "\\]"
                }
              ]
            }
          ]
        },
        {
          className: "built_in",
          begin: /true|false/,
          relevance: 0,
          starts: i2
        },
        {
          begin: "[a-zA-Z][a-zA-Z_0-9]*" + n,
          relevance: 0
        },
        {
          className: "number",
          begin: e2.C_NUMBER_RE,
          relevance: 0,
          starts: i2
        },
        {
          className: "string",
          begin: "'",
          end: "'",
          contains: [{ begin: "''" }]
        },
        {
          begin: /\]|\}|\)/,
          relevance: 0,
          starts: i2
        },
        {
          className: "string",
          begin: '"',
          end: '"',
          contains: [{ begin: '""' }],
          starts: i2
        },
        e2.COMMENT("^\\s*%\\{\\s*$", "^\\s*%\\}\\s*$"),
        e2.COMMENT("%", "$")
      ]
    };
  }
  return To = t2, To;
}
var ho, Ad;
function fC() {
  if (Ad)
    return ho;
  Ad = 1;
  function t2(e2) {
    return {
      name: "Maxima",
      keywords: {
        $pattern: "[A-Za-z_%][0-9A-Za-z_%]*",
        keyword: "if then else elseif for thru do while unless step in and or not",
        literal: "true false unknown inf minf ind und %e %i %pi %phi %gamma",
        built_in: " abasep abs absint absolute_real_time acos acosh acot acoth acsc acsch activate addcol add_edge add_edges addmatrices addrow add_vertex add_vertices adjacency_matrix adjoin adjoint af agd airy airy_ai airy_bi airy_dai airy_dbi algsys alg_type alias allroots alphacharp alphanumericp amortization %and annuity_fv annuity_pv antid antidiff AntiDifference append appendfile apply apply1 apply2 applyb1 apropos args arit_amortization arithmetic arithsum array arrayapply arrayinfo arraymake arraysetapply ascii asec asech asin asinh askinteger asksign assoc assoc_legendre_p assoc_legendre_q assume assume_external_byte_order asympa at atan atan2 atanh atensimp atom atvalue augcoefmatrix augmented_lagrangian_method av average_degree backtrace bars barsplot barsplot_description base64 base64_decode bashindices batch batchload bc2 bdvac belln benefit_cost bern bernpoly bernstein_approx bernstein_expand bernstein_poly bessel bessel_i bessel_j bessel_k bessel_simplify bessel_y beta beta_incomplete beta_incomplete_generalized beta_incomplete_regularized bezout bfallroots bffac bf_find_root bf_fmin_cobyla bfhzeta bfloat bfloatp bfpsi bfpsi0 bfzeta biconnected_components bimetric binomial bipartition block blockmatrixp bode_gain bode_phase bothcoef box boxplot boxplot_description break bug_report build_info|10 buildq build_sample burn cabs canform canten cardinality carg cartan cartesian_product catch cauchy_matrix cbffac cdf_bernoulli cdf_beta cdf_binomial cdf_cauchy cdf_chi2 cdf_continuous_uniform cdf_discrete_uniform cdf_exp cdf_f cdf_gamma cdf_general_finite_discrete cdf_geometric cdf_gumbel cdf_hypergeometric cdf_laplace cdf_logistic cdf_lognormal cdf_negative_binomial cdf_noncentral_chi2 cdf_noncentral_student_t cdf_normal cdf_pareto cdf_poisson cdf_rank_sum cdf_rayleigh cdf_signed_rank cdf_student_t cdf_weibull cdisplay ceiling central_moment cequal cequalignore cf cfdisrep cfexpand cgeodesic cgreaterp cgreaterpignore changename changevar chaosgame charat charfun charfun2 charlist charp charpoly chdir chebyshev_t chebyshev_u checkdiv check_overlaps chinese cholesky christof chromatic_index chromatic_number cint circulant_graph clear_edge_weight clear_rules clear_vertex_label clebsch_gordan clebsch_graph clessp clesspignore close closefile cmetric coeff coefmatrix cograd col collapse collectterms columnop columnspace columnswap columnvector combination combine comp2pui compare compfile compile compile_file complement_graph complete_bipartite_graph complete_graph complex_number_p components compose_functions concan concat conjugate conmetderiv connected_components connect_vertices cons constant constantp constituent constvalue cont2part content continuous_freq contortion contour_plot contract contract_edge contragrad contrib_ode convert coord copy copy_file copy_graph copylist copymatrix cor cos cosh cot coth cov cov1 covdiff covect covers crc24sum create_graph create_list csc csch csetup cspline ctaylor ct_coordsys ctransform ctranspose cube_graph cuboctahedron_graph cunlisp cv cycle_digraph cycle_graph cylindrical days360 dblint deactivate declare declare_constvalue declare_dimensions declare_fundamental_dimensions declare_fundamental_units declare_qty declare_translated declare_unit_conversion declare_units declare_weights decsym defcon define define_alt_display define_variable defint defmatch defrule defstruct deftaylor degree_sequence del delete deleten delta demo demoivre denom depends derivdegree derivlist describe desolve determinant dfloat dgauss_a dgauss_b dgeev dgemm dgeqrf dgesv dgesvd diag diagmatrix diag_matrix diagmatrixp diameter diff digitcharp dimacs_export dimacs_import dimension dimensionless dimensions dimensions_as_list direct directory discrete_freq disjoin disjointp disolate disp dispcon dispform dispfun dispJordan display disprule dispterms distrib divide divisors divsum dkummer_m dkummer_u dlange dodecahedron_graph dotproduct dotsimp dpart draw draw2d draw3d drawdf draw_file draw_graph dscalar echelon edge_coloring edge_connectivity edges eigens_by_jacobi eigenvalues eigenvectors eighth einstein eivals eivects elapsed_real_time elapsed_run_time ele2comp ele2polynome ele2pui elem elementp elevation_grid elim elim_allbut eliminate eliminate_using ellipse elliptic_e elliptic_ec elliptic_eu elliptic_f elliptic_kc elliptic_pi ematrix empty_graph emptyp endcons entermatrix entertensor entier equal equalp equiv_classes erf erfc erf_generalized erfi errcatch error errormsg errors euler ev eval_string evenp every evolution evolution2d evundiff example exp expand expandwrt expandwrt_factored expint expintegral_chi expintegral_ci expintegral_e expintegral_e1 expintegral_ei expintegral_e_simplify expintegral_li expintegral_shi expintegral_si explicit explose exponentialize express expt exsec extdiff extract_linear_equations extremal_subset ezgcd %f f90 facsum factcomb factor factorfacsum factorial factorout factorsum facts fast_central_elements fast_linsolve fasttimes featurep fernfale fft fib fibtophi fifth filename_merge file_search file_type fillarray findde find_root find_root_abs find_root_error find_root_rel first fix flatten flength float floatnump floor flower_snark flush flush1deriv flushd flushnd flush_output fmin_cobyla forget fortran fourcos fourexpand fourier fourier_elim fourint fourintcos fourintsin foursimp foursin fourth fposition frame_bracket freeof freshline fresnel_c fresnel_s from_adjacency_matrix frucht_graph full_listify fullmap fullmapl fullratsimp fullratsubst fullsetify funcsolve fundamental_dimensions fundamental_units fundef funmake funp fv g0 g1 gamma gamma_greek gamma_incomplete gamma_incomplete_generalized gamma_incomplete_regularized gauss gauss_a gauss_b gaussprob gcd gcdex gcdivide gcfac gcfactor gd generalized_lambert_w genfact gen_laguerre genmatrix gensym geo_amortization geo_annuity_fv geo_annuity_pv geomap geometric geometric_mean geosum get getcurrentdirectory get_edge_weight getenv get_lu_factors get_output_stream_string get_pixel get_plot_option get_tex_environment get_tex_environment_default get_vertex_label gfactor gfactorsum ggf girth global_variances gn gnuplot_close gnuplot_replot gnuplot_reset gnuplot_restart gnuplot_start go Gosper GosperSum gr2d gr3d gradef gramschmidt graph6_decode graph6_encode graph6_export graph6_import graph_center graph_charpoly graph_eigenvalues graph_flow graph_order graph_periphery graph_product graph_size graph_union great_rhombicosidodecahedron_graph great_rhombicuboctahedron_graph grid_graph grind grobner_basis grotzch_graph hamilton_cycle hamilton_path hankel hankel_1 hankel_2 harmonic harmonic_mean hav heawood_graph hermite hessian hgfred hilbertmap hilbert_matrix hipow histogram histogram_description hodge horner hypergeometric i0 i1 %ibes ic1 ic2 ic_convert ichr1 ichr2 icosahedron_graph icosidodecahedron_graph icurvature ident identfor identity idiff idim idummy ieqn %if ifactors iframes ifs igcdex igeodesic_coords ilt image imagpart imetric implicit implicit_derivative implicit_plot indexed_tensor indices induced_subgraph inferencep inference_result infix info_display init_atensor init_ctensor in_neighbors innerproduct inpart inprod inrt integerp integer_partitions integrate intersect intersection intervalp intopois intosum invariant1 invariant2 inverse_fft inverse_jacobi_cd inverse_jacobi_cn inverse_jacobi_cs inverse_jacobi_dc inverse_jacobi_dn inverse_jacobi_ds inverse_jacobi_nc inverse_jacobi_nd inverse_jacobi_ns inverse_jacobi_sc inverse_jacobi_sd inverse_jacobi_sn invert invert_by_adjoint invert_by_lu inv_mod irr is is_biconnected is_bipartite is_connected is_digraph is_edge_in_graph is_graph is_graph_or_digraph ishow is_isomorphic isolate isomorphism is_planar isqrt isreal_p is_sconnected is_tree is_vertex_in_graph items_inference %j j0 j1 jacobi jacobian jacobi_cd jacobi_cn jacobi_cs jacobi_dc jacobi_dn jacobi_ds jacobi_nc jacobi_nd jacobi_ns jacobi_p jacobi_sc jacobi_sd jacobi_sn JF jn join jordan julia julia_set julia_sin %k kdels kdelta kill killcontext kostka kron_delta kronecker_product kummer_m kummer_u kurtosis kurtosis_bernoulli kurtosis_beta kurtosis_binomial kurtosis_chi2 kurtosis_continuous_uniform kurtosis_discrete_uniform kurtosis_exp kurtosis_f kurtosis_gamma kurtosis_general_finite_discrete kurtosis_geometric kurtosis_gumbel kurtosis_hypergeometric kurtosis_laplace kurtosis_logistic kurtosis_lognormal kurtosis_negative_binomial kurtosis_noncentral_chi2 kurtosis_noncentral_student_t kurtosis_normal kurtosis_pareto kurtosis_poisson kurtosis_rayleigh kurtosis_student_t kurtosis_weibull label labels lagrange laguerre lambda lambert_w laplace laplacian_matrix last lbfgs lc2kdt lcharp lc_l lcm lc_u ldefint ldisp ldisplay legendre_p legendre_q leinstein length let letrules letsimp levi_civita lfreeof lgtreillis lhs li liediff limit Lindstedt linear linearinterpol linear_program linear_regression line_graph linsolve listarray list_correlations listify list_matrix_entries list_nc_monomials listoftens listofvars listp lmax lmin load loadfile local locate_matrix_entry log logcontract log_gamma lopow lorentz_gauge lowercasep lpart lratsubst lreduce lriemann lsquares_estimates lsquares_estimates_approximate lsquares_estimates_exact lsquares_mse lsquares_residual_mse lsquares_residuals lsum ltreillis lu_backsub lucas lu_factor %m macroexpand macroexpand1 make_array makebox makefact makegamma make_graph make_level_picture makelist makeOrders make_poly_continent make_poly_country make_polygon make_random_state make_rgb_picture makeset make_string_input_stream make_string_output_stream make_transform mandelbrot mandelbrot_set map mapatom maplist matchdeclare matchfix mat_cond mat_fullunblocker mat_function mathml_display mat_norm matrix matrixmap matrixp matrix_size mattrace mat_trace mat_unblocker max max_clique max_degree max_flow maximize_lp max_independent_set max_matching maybe md5sum mean mean_bernoulli mean_beta mean_binomial mean_chi2 mean_continuous_uniform mean_deviation mean_discrete_uniform mean_exp mean_f mean_gamma mean_general_finite_discrete mean_geometric mean_gumbel mean_hypergeometric mean_laplace mean_logistic mean_lognormal mean_negative_binomial mean_noncentral_chi2 mean_noncentral_student_t mean_normal mean_pareto mean_poisson mean_rayleigh mean_student_t mean_weibull median median_deviation member mesh metricexpandall mgf1_sha1 min min_degree min_edge_cut minfactorial minimalPoly minimize_lp minimum_spanning_tree minor minpack_lsquares minpack_solve min_vertex_cover min_vertex_cut mkdir mnewton mod mode_declare mode_identity ModeMatrix moebius mon2schur mono monomial_dimensions multibernstein_poly multi_display_for_texinfo multi_elem multinomial multinomial_coeff multi_orbit multiplot_mode multi_pui multsym multthru mycielski_graph nary natural_unit nc_degree ncexpt ncharpoly negative_picture neighbors new newcontext newdet new_graph newline newton new_variable next_prime nicedummies niceindices ninth nofix nonarray noncentral_moment nonmetricity nonnegintegerp nonscalarp nonzeroandfreeof notequal nounify nptetrad npv nroots nterms ntermst nthroot nullity nullspace num numbered_boundaries numberp number_to_octets num_distinct_partitions numerval numfactor num_partitions nusum nzeta nzetai nzetar octets_to_number octets_to_oid odd_girth oddp ode2 ode_check odelin oid_to_octets op opena opena_binary openr openr_binary openw openw_binary operatorp opsubst optimize %or orbit orbits ordergreat ordergreatp orderless orderlessp orthogonal_complement orthopoly_recur orthopoly_weight outermap out_neighbors outofpois pade parabolic_cylinder_d parametric parametric_surface parg parGosper parse_string parse_timedate part part2cont partfrac partition partition_set partpol path_digraph path_graph pathname_directory pathname_name pathname_type pdf_bernoulli pdf_beta pdf_binomial pdf_cauchy pdf_chi2 pdf_continuous_uniform pdf_discrete_uniform pdf_exp pdf_f pdf_gamma pdf_general_finite_discrete pdf_geometric pdf_gumbel pdf_hypergeometric pdf_laplace pdf_logistic pdf_lognormal pdf_negative_binomial pdf_noncentral_chi2 pdf_noncentral_student_t pdf_normal pdf_pareto pdf_poisson pdf_rank_sum pdf_rayleigh pdf_signed_rank pdf_student_t pdf_weibull pearson_skewness permanent permut permutation permutations petersen_graph petrov pickapart picture_equalp picturep piechart piechart_description planar_embedding playback plog plot2d plot3d plotdf ploteq plsquares pochhammer points poisdiff poisexpt poisint poismap poisplus poissimp poissubst poistimes poistrim polar polarform polartorect polar_to_xy poly_add poly_buchberger poly_buchberger_criterion poly_colon_ideal poly_content polydecomp poly_depends_p poly_elimination_ideal poly_exact_divide poly_expand poly_expt poly_gcd polygon poly_grobner poly_grobner_equal poly_grobner_member poly_grobner_subsetp poly_ideal_intersection poly_ideal_polysaturation poly_ideal_polysaturation1 poly_ideal_saturation poly_ideal_saturation1 poly_lcm poly_minimization polymod poly_multiply polynome2ele polynomialp poly_normal_form poly_normalize poly_normalize_list poly_polysaturation_extension poly_primitive_part poly_pseudo_divide poly_reduced_grobner poly_reduction poly_saturation_extension poly_s_polynomial poly_subtract polytocompanion pop postfix potential power_mod powerseries powerset prefix prev_prime primep primes principal_components print printf printfile print_graph printpois printprops prodrac product properties propvars psi psubst ptriangularize pui pui2comp pui2ele pui2polynome pui_direct puireduc push put pv qput qrange qty quad_control quad_qag quad_qagi quad_qagp quad_qags quad_qawc quad_qawf quad_qawo quad_qaws quadrilateral quantile quantile_bernoulli quantile_beta quantile_binomial quantile_cauchy quantile_chi2 quantile_continuous_uniform quantile_discrete_uniform quantile_exp quantile_f quantile_gamma quantile_general_finite_discrete quantile_geometric quantile_gumbel quantile_hypergeometric quantile_laplace quantile_logistic quantile_lognormal quantile_negative_binomial quantile_noncentral_chi2 quantile_noncentral_student_t quantile_normal quantile_pareto quantile_poisson quantile_rayleigh quantile_student_t quantile_weibull quartile_skewness quit qunit quotient racah_v racah_w radcan radius random random_bernoulli random_beta random_binomial random_bipartite_graph random_cauchy random_chi2 random_continuous_uniform random_digraph random_discrete_uniform random_exp random_f random_gamma random_general_finite_discrete random_geometric random_graph random_graph1 random_gumbel random_hypergeometric random_laplace random_logistic random_lognormal random_negative_binomial random_network random_noncentral_chi2 random_noncentral_student_t random_normal random_pareto random_permutation random_poisson random_rayleigh random_regular_graph random_student_t random_tournament random_tree random_weibull range rank rat ratcoef ratdenom ratdiff ratdisrep ratexpand ratinterpol rational rationalize ratnumer ratnump ratp ratsimp ratsubst ratvars ratweight read read_array read_binary_array read_binary_list read_binary_matrix readbyte readchar read_hashed_array readline read_list read_matrix read_nested_list readonly read_xpm real_imagpart_to_conjugate realpart realroots rearray rectangle rectform rectform_log_if_constant recttopolar rediff reduce_consts reduce_order region region_boundaries region_boundaries_plus rem remainder remarray rembox remcomps remcon remcoord remfun remfunction remlet remove remove_constvalue remove_dimensions remove_edge remove_fundamental_dimensions remove_fundamental_units remove_plot_option remove_vertex rempart remrule remsym remvalue rename rename_file reset reset_displays residue resolvante resolvante_alternee1 resolvante_bipartite resolvante_diedrale resolvante_klein resolvante_klein3 resolvante_produit_sym resolvante_unitaire resolvante_vierer rest resultant return reveal reverse revert revert2 rgb2level rhs ricci riemann rinvariant risch rk rmdir rncombine romberg room rootscontract round row rowop rowswap rreduce run_testsuite %s save saving scalarp scaled_bessel_i scaled_bessel_i0 scaled_bessel_i1 scalefactors scanmap scatterplot scatterplot_description scene schur2comp sconcat scopy scsimp scurvature sdowncase sec sech second sequal sequalignore set_alt_display setdifference set_draw_defaults set_edge_weight setelmx setequalp setify setp set_partitions set_plot_option set_prompt set_random_state set_tex_environment set_tex_environment_default setunits setup_autoload set_up_dot_simplifications set_vertex_label seventh sexplode sf sha1sum sha256sum shortest_path shortest_weighted_path show showcomps showratvars sierpinskiale sierpinskimap sign signum similaritytransform simp_inequality simplify_sum simplode simpmetderiv simtran sin sinh sinsert sinvertcase sixth skewness skewness_bernoulli skewness_beta skewness_binomial skewness_chi2 skewness_continuous_uniform skewness_discrete_uniform skewness_exp skewness_f skewness_gamma skewness_general_finite_discrete skewness_geometric skewness_gumbel skewness_hypergeometric skewness_laplace skewness_logistic skewness_lognormal skewness_negative_binomial skewness_noncentral_chi2 skewness_noncentral_student_t skewness_normal skewness_pareto skewness_poisson skewness_rayleigh skewness_student_t skewness_weibull slength smake small_rhombicosidodecahedron_graph small_rhombicuboctahedron_graph smax smin smismatch snowmap snub_cube_graph snub_dodecahedron_graph solve solve_rec solve_rec_rat some somrac sort sparse6_decode sparse6_encode sparse6_export sparse6_import specint spherical spherical_bessel_j spherical_bessel_y spherical_hankel1 spherical_hankel2 spherical_harmonic spherical_to_xyz splice split sposition sprint sqfr sqrt sqrtdenest sremove sremovefirst sreverse ssearch ssort sstatus ssubst ssubstfirst staircase standardize standardize_inverse_trig starplot starplot_description status std std1 std_bernoulli std_beta std_binomial std_chi2 std_continuous_uniform std_discrete_uniform std_exp std_f std_gamma std_general_finite_discrete std_geometric std_gumbel std_hypergeometric std_laplace std_logistic std_lognormal std_negative_binomial std_noncentral_chi2 std_noncentral_student_t std_normal std_pareto std_poisson std_rayleigh std_student_t std_weibull stemplot stirling stirling1 stirling2 strim striml strimr string stringout stringp strong_components struve_h struve_l sublis sublist sublist_indices submatrix subsample subset subsetp subst substinpart subst_parallel substpart substring subvar subvarp sum sumcontract summand_to_rec supcase supcontext symbolp symmdifference symmetricp system take_channel take_inference tan tanh taylor taylorinfo taylorp taylor_simplifier taytorat tcl_output tcontract tellrat tellsimp tellsimpafter tentex tenth test_mean test_means_difference test_normality test_proportion test_proportions_difference test_rank_sum test_sign test_signed_rank test_variance test_variance_ratio tex tex1 tex_display texput %th third throw time timedate timer timer_info tldefint tlimit todd_coxeter toeplitz tokens to_lisp topological_sort to_poly to_poly_solve totaldisrep totalfourier totient tpartpol trace tracematrix trace_options transform_sample translate translate_file transpose treefale tree_reduce treillis treinat triangle triangularize trigexpand trigrat trigreduce trigsimp trunc truncate truncated_cube_graph truncated_dodecahedron_graph truncated_icosahedron_graph truncated_tetrahedron_graph tr_warnings_get tube tutte_graph ueivects uforget ultraspherical underlying_graph undiff union unique uniteigenvectors unitp units unit_step unitvector unorder unsum untellrat untimer untrace uppercasep uricci uriemann uvect vandermonde_matrix var var1 var_bernoulli var_beta var_binomial var_chi2 var_continuous_uniform var_discrete_uniform var_exp var_f var_gamma var_general_finite_discrete var_geometric var_gumbel var_hypergeometric var_laplace var_logistic var_lognormal var_negative_binomial var_noncentral_chi2 var_noncentral_student_t var_normal var_pareto var_poisson var_rayleigh var_student_t var_weibull vector vectorpotential vectorsimp verbify vers vertex_coloring vertex_connectivity vertex_degree vertex_distance vertex_eccentricity vertex_in_degree vertex_out_degree vertices vertices_to_cycle vertices_to_path %w weyl wheel_graph wiener_index wigner_3j wigner_6j wigner_9j with_stdout write_binary_data writebyte write_data writefile wronskian xreduce xthru %y Zeilberger zeroequiv zerofor zeromatrix zeromatrixp zeta zgeev zheev zlange zn_add_table zn_carmichael_lambda zn_characteristic_factors zn_determinant zn_factor_generators zn_invert_by_lu zn_log zn_mult_table absboxchar activecontexts adapt_depth additive adim aform algebraic algepsilon algexact aliases allbut all_dotsimp_denoms allocation allsym alphabetic animation antisymmetric arrays askexp assume_pos assume_pos_pred assumescalar asymbol atomgrad atrig1 axes axis_3d axis_bottom axis_left axis_right axis_top azimuth background background_color backsubst berlefact bernstein_explicit besselexpand beta_args_sum_to_integer beta_expand bftorat bftrunc bindtest border boundaries_array box boxchar breakup %c capping cauchysum cbrange cbtics center cflength cframe_flag cnonmet_flag color color_bar color_bar_tics colorbox columns commutative complex cone context contexts contour contour_levels cosnpiflag ctaypov ctaypt ctayswitch ctayvar ct_coords ctorsion_flag ctrgsimp cube current_let_rule_package cylinder data_file_name debugmode decreasing default_let_rule_package delay dependencies derivabbrev derivsubst detout diagmetric diff dim dimensions dispflag display2d|10 display_format_internal distribute_over doallmxops domain domxexpt domxmxops domxnctimes dontfactor doscmxops doscmxplus dot0nscsimp dot0simp dot1simp dotassoc dotconstrules dotdistrib dotexptsimp dotident dotscrules draw_graph_program draw_realpart edge_color edge_coloring edge_partition edge_type edge_width %edispflag elevation %emode endphi endtheta engineering_format_floats enhanced3d %enumer epsilon_lp erfflag erf_representation errormsg error_size error_syms error_type %e_to_numlog eval even evenfun evflag evfun ev_point expandwrt_denom expintexpand expintrep expon expop exptdispflag exptisolate exptsubst facexpand facsum_combine factlim factorflag factorial_expand factors_only fb feature features file_name file_output_append file_search_demo file_search_lisp file_search_maxima|10 file_search_tests file_search_usage file_type_lisp file_type_maxima|10 fill_color fill_density filled_func fixed_vertices flipflag float2bf font font_size fortindent fortspaces fpprec fpprintprec functions gamma_expand gammalim gdet genindex gensumnum GGFCFMAX GGFINFINITY globalsolve gnuplot_command gnuplot_curve_styles gnuplot_curve_titles gnuplot_default_term_command gnuplot_dumb_term_command gnuplot_file_args gnuplot_file_name gnuplot_out_file gnuplot_pdf_term_command gnuplot_pm3d gnuplot_png_term_command gnuplot_postamble gnuplot_preamble gnuplot_ps_term_command gnuplot_svg_term_command gnuplot_term gnuplot_view_args Gosper_in_Zeilberger gradefs grid grid2d grind halfangles head_angle head_both head_length head_type height hypergeometric_representation %iargs ibase icc1 icc2 icounter idummyx ieqnprint ifb ifc1 ifc2 ifg ifgi ifr iframe_bracket_form ifri igeowedge_flag ikt1 ikt2 imaginary inchar increasing infeval infinity inflag infolists inm inmc1 inmc2 intanalysis integer integervalued integrate_use_rootsof integration_constant integration_constant_counter interpolate_color intfaclim ip_grid ip_grid_in irrational isolate_wrt_times iterations itr julia_parameter %k1 %k2 keepfloat key key_pos kinvariant kt label label_alignment label_orientation labels lassociative lbfgs_ncorrections lbfgs_nfeval_max leftjust legend letrat let_rule_packages lfg lg lhospitallim limsubst linear linear_solver linechar linel|10 linenum line_type linewidth line_width linsolve_params linsolvewarn lispdisp listarith listconstvars listdummyvars lmxchar load_pathname loadprint logabs logarc logcb logconcoeffp logexpand lognegint logsimp logx logx_secondary logy logy_secondary logz lriem m1pbranch macroexpansion macros mainvar manual_demo maperror mapprint matrix_element_add matrix_element_mult matrix_element_transpose maxapplydepth maxapplyheight maxima_tempdir|10 maxima_userdir|10 maxnegex MAX_ORD maxposex maxpsifracdenom maxpsifracnum maxpsinegint maxpsiposint maxtayorder mesh_lines_color method mod_big_prime mode_check_errorp mode_checkp mode_check_warnp mod_test mod_threshold modular_linear_solver modulus multiplicative multiplicities myoptions nary negdistrib negsumdispflag newline newtonepsilon newtonmaxiter nextlayerfactor niceindicespref nm nmc noeval nolabels nonegative_lp noninteger nonscalar noun noundisp nouns np npi nticks ntrig numer numer_pbranch obase odd oddfun opacity opproperties opsubst optimprefix optionset orientation origin orthopoly_returns_intervals outative outchar packagefile palette partswitch pdf_file pfeformat phiresolution %piargs piece pivot_count_sx pivot_max_sx plot_format plot_options plot_realpart png_file pochhammer_max_index points pointsize point_size points_joined point_type poislim poisson poly_coefficient_ring poly_elimination_order polyfactor poly_grobner_algorithm poly_grobner_debug poly_monomial_order poly_primary_elimination_order poly_return_term_list poly_secondary_elimination_order poly_top_reduction_only posfun position powerdisp pred prederror primep_number_of_tests product_use_gamma program programmode promote_float_to_bigfloat prompt proportional_axes props psexpand ps_file radexpand radius radsubstflag rassociative ratalgdenom ratchristof ratdenomdivide rateinstein ratepsilon ratfac rational ratmx ratprint ratriemann ratsimpexpons ratvarswitch ratweights ratweyl ratwtlvl real realonly redraw refcheck resolution restart resultant ric riem rmxchar %rnum_list rombergabs rombergit rombergmin rombergtol rootsconmode rootsepsilon run_viewer same_xy same_xyz savedef savefactors scalar scalarmatrixp scale scale_lp setcheck setcheckbreak setval show_edge_color show_edges show_edge_type show_edge_width show_id show_label showtime show_vertex_color show_vertex_size show_vertex_type show_vertices show_weight simp simplified_output simplify_products simpproduct simpsum sinnpiflag solvedecomposes solveexplicit solvefactors solvenullwarn solveradcan solvetrigwarn space sparse sphere spring_embedding_depth sqrtdispflag stardisp startphi starttheta stats_numer stringdisp structures style sublis_apply_lambda subnumsimp sumexpand sumsplitfact surface surface_hide svg_file symmetric tab taylordepth taylor_logexpand taylor_order_coefficients taylor_truncate_polynomials tensorkill terminal testsuite_files thetaresolution timer_devalue title tlimswitch tr track transcompile transform transform_xy translate_fast_arrays transparent transrun tr_array_as_ref tr_bound_function_applyp tr_file_tty_messagesp tr_float_can_branch_complex tr_function_call_default trigexpandplus trigexpandtimes triginverses trigsign trivial_solutions tr_numer tr_optimize_max_loop tr_semicompile tr_state_vars tr_warn_bad_function_calls tr_warn_fexpr tr_warn_meval tr_warn_mode tr_warn_undeclared tr_warn_undefined_variable tstep ttyoff tube_extremes ufg ug %unitexpand unit_vectors uric uriem use_fast_arrays user_preamble usersetunits values vect_cross verbose vertex_color vertex_coloring vertex_partition vertex_size vertex_type view warnings weyl width windowname windowtitle wired_surface wireframe xaxis xaxis_color xaxis_secondary xaxis_type xaxis_width xlabel xlabel_secondary xlength xrange xrange_secondary xtics xtics_axis xtics_rotate xtics_rotate_secondary xtics_secondary xtics_secondary_axis xu_grid x_voxel xy_file xyplane xy_scale yaxis yaxis_color yaxis_secondary yaxis_type yaxis_width ylabel ylabel_secondary ylength yrange yrange_secondary ytics ytics_axis ytics_rotate ytics_rotate_secondary ytics_secondary ytics_secondary_axis yv_grid y_voxel yx_ratio zaxis zaxis_color zaxis_type zaxis_width zeroa zerob zerobern zeta%pi zlabel zlabel_rotate zlength zmin zn_primroot_limit zn_primroot_pretest",
        symbol: "_ __ %|0 %%|0"
      },
      contains: [
        {
          className: "comment",
          begin: "/\\*",
          end: "\\*/",
          contains: ["self"]
        },
        e2.QUOTE_STRING_MODE,
        {
          className: "number",
          relevance: 0,
          variants: [
            {
              // float number w/ exponent
              // hmm, I wonder if we ought to include other exponent markers?
              begin: "\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Ee][-+]?\\d+\\b"
            },
            {
              // bigfloat number
              begin: "\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Bb][-+]?\\d+\\b",
              relevance: 10
            },
            {
              // float number w/out exponent
              // Doesn't seem to recognize floats which start with '.'
              begin: "\\b(\\.\\d+|\\d+\\.\\d+)\\b"
            },
            {
              // integer in base up to 36
              // Doesn't seem to recognize integers which end with '.'
              begin: "\\b(\\d+|0[0-9A-Za-z]+)\\.?\\b"
            }
          ]
        }
      ],
      illegal: /@/
    };
  }
  return ho = t2, ho;
}
var Ro, yd;
function SC() {
  if (yd)
    return Ro;
  yd = 1;
  function t2(e2) {
    return {
      name: "MEL",
      keywords: "int float string vector matrix if else switch case default while do for in break continue global proc return about abs addAttr addAttributeEditorNodeHelp addDynamic addNewShelfTab addPP addPanelCategory addPrefixToName advanceToNextDrivenKey affectedNet affects aimConstraint air alias aliasAttr align alignCtx alignCurve alignSurface allViewFit ambientLight angle angleBetween animCone animCurveEditor animDisplay animView annotate appendStringArray applicationName applyAttrPreset applyTake arcLenDimContext arcLengthDimension arclen arrayMapper art3dPaintCtx artAttrCtx artAttrPaintVertexCtx artAttrSkinPaintCtx artAttrTool artBuildPaintMenu artFluidAttrCtx artPuttyCtx artSelectCtx artSetPaintCtx artUserPaintCtx assignCommand assignInputDevice assignViewportFactories attachCurve attachDeviceAttr attachSurface attrColorSliderGrp attrCompatibility attrControlGrp attrEnumOptionMenu attrEnumOptionMenuGrp attrFieldGrp attrFieldSliderGrp attrNavigationControlGrp attrPresetEditWin attributeExists attributeInfo attributeMenu attributeQuery autoKeyframe autoPlace bakeClip bakeFluidShading bakePartialHistory bakeResults bakeSimulation basename basenameEx batchRender bessel bevel bevelPlus binMembership bindSkin blend2 blendShape blendShapeEditor blendShapePanel blendTwoAttr blindDataType boneLattice boundary boxDollyCtx boxZoomCtx bufferCurve buildBookmarkMenu buildKeyframeMenu button buttonManip CBG cacheFile cacheFileCombine cacheFileMerge cacheFileTrack camera cameraView canCreateManip canvas capitalizeString catch catchQuiet ceil changeSubdivComponentDisplayLevel changeSubdivRegion channelBox character characterMap characterOutlineEditor characterize chdir checkBox checkBoxGrp checkDefaultRenderGlobals choice circle circularFillet clamp clear clearCache clip clipEditor clipEditorCurrentTimeCtx clipSchedule clipSchedulerOutliner clipTrimBefore closeCurve closeSurface cluster cmdFileOutput cmdScrollFieldExecuter cmdScrollFieldReporter cmdShell coarsenSubdivSelectionList collision color colorAtPoint colorEditor colorIndex colorIndexSliderGrp colorSliderButtonGrp colorSliderGrp columnLayout commandEcho commandLine commandPort compactHairSystem componentEditor compositingInterop computePolysetVolume condition cone confirmDialog connectAttr connectControl connectDynamic connectJoint connectionInfo constrain constrainValue constructionHistory container containsMultibyte contextInfo control convertFromOldLayers convertIffToPsd convertLightmap convertSolidTx convertTessellation convertUnit copyArray copyFlexor copyKey copySkinWeights cos cpButton cpCache cpClothSet cpCollision cpConstraint cpConvClothToMesh cpForces cpGetSolverAttr cpPanel cpProperty cpRigidCollisionFilter cpSeam cpSetEdit cpSetSolverAttr cpSolver cpSolverTypes cpTool cpUpdateClothUVs createDisplayLayer createDrawCtx createEditor createLayeredPsdFile createMotionField createNewShelf createNode createRenderLayer createSubdivRegion cross crossProduct ctxAbort ctxCompletion ctxEditMode ctxTraverse currentCtx currentTime currentTimeCtx currentUnit curve curveAddPtCtx curveCVCtx curveEPCtx curveEditorCtx curveIntersect curveMoveEPCtx curveOnSurface curveSketchCtx cutKey cycleCheck cylinder dagPose date defaultLightListCheckBox defaultNavigation defineDataServer defineVirtualDevice deformer deg_to_rad delete deleteAttr deleteShadingGroupsAndMaterials deleteShelfTab deleteUI deleteUnusedBrushes delrandstr detachCurve detachDeviceAttr detachSurface deviceEditor devicePanel dgInfo dgdirty dgeval dgtimer dimWhen directKeyCtx directionalLight dirmap dirname disable disconnectAttr disconnectJoint diskCache displacementToPoly displayAffected displayColor displayCull displayLevelOfDetail displayPref displayRGBColor displaySmoothness displayStats displayString displaySurface distanceDimContext distanceDimension doBlur dolly dollyCtx dopeSheetEditor dot dotProduct doubleProfileBirailSurface drag dragAttrContext draggerContext dropoffLocator duplicate duplicateCurve duplicateSurface dynCache dynControl dynExport dynExpression dynGlobals dynPaintEditor dynParticleCtx dynPref dynRelEdPanel dynRelEditor dynamicLoad editAttrLimits editDisplayLayerGlobals editDisplayLayerMembers editRenderLayerAdjustment editRenderLayerGlobals editRenderLayerMembers editor editorTemplate effector emit emitter enableDevice encodeString endString endsWith env equivalent equivalentTol erf error eval evalDeferred evalEcho event exactWorldBoundingBox exclusiveLightCheckBox exec executeForEachObject exists exp expression expressionEditorListen extendCurve extendSurface extrude fcheck fclose feof fflush fgetline fgetword file fileBrowserDialog fileDialog fileExtension fileInfo filetest filletCurve filter filterCurve filterExpand filterStudioImport findAllIntersections findAnimCurves findKeyframe findMenuItem findRelatedSkinCluster finder firstParentOf fitBspline flexor floatEq floatField floatFieldGrp floatScrollBar floatSlider floatSlider2 floatSliderButtonGrp floatSliderGrp floor flow fluidCacheInfo fluidEmitter fluidVoxelInfo flushUndo fmod fontDialog fopen formLayout format fprint frameLayout fread freeFormFillet frewind fromNativePath fwrite gamma gauss geometryConstraint getApplicationVersionAsFloat getAttr getClassification getDefaultBrush getFileList getFluidAttr getInputDeviceRange getMayaPanelTypes getModifiers getPanel getParticleAttr getPluginResource getenv getpid glRender glRenderEditor globalStitch gmatch goal gotoBindPose grabColor gradientControl gradientControlNoAttr graphDollyCtx graphSelectContext graphTrackCtx gravity grid gridLayout group groupObjectsByName HfAddAttractorToAS HfAssignAS HfBuildEqualMap HfBuildFurFiles HfBuildFurImages HfCancelAFR HfConnectASToHF HfCreateAttractor HfDeleteAS HfEditAS HfPerformCreateAS HfRemoveAttractorFromAS HfSelectAttached HfSelectAttractors HfUnAssignAS hardenPointCurve hardware hardwareRenderPanel headsUpDisplay headsUpMessage help helpLine hermite hide hilite hitTest hotBox hotkey hotkeyCheck hsv_to_rgb hudButton hudSlider hudSliderButton hwReflectionMap hwRender hwRenderLoad hyperGraph hyperPanel hyperShade hypot iconTextButton iconTextCheckBox iconTextRadioButton iconTextRadioCollection iconTextScrollList iconTextStaticLabel ikHandle ikHandleCtx ikHandleDisplayScale ikSolver ikSplineHandleCtx ikSystem ikSystemInfo ikfkDisplayMethod illustratorCurves image imfPlugins inheritTransform insertJoint insertJointCtx insertKeyCtx insertKnotCurve insertKnotSurface instance instanceable instancer intField intFieldGrp intScrollBar intSlider intSliderGrp interToUI internalVar intersect iprEngine isAnimCurve isConnected isDirty isParentOf isSameObject isTrue isValidObjectName isValidString isValidUiName isolateSelect itemFilter itemFilterAttr itemFilterRender itemFilterType joint jointCluster jointCtx jointDisplayScale jointLattice keyTangent keyframe keyframeOutliner keyframeRegionCurrentTimeCtx keyframeRegionDirectKeyCtx keyframeRegionDollyCtx keyframeRegionInsertKeyCtx keyframeRegionMoveKeyCtx keyframeRegionScaleKeyCtx keyframeRegionSelectKeyCtx keyframeRegionSetKeyCtx keyframeRegionTrackCtx keyframeStats lassoContext lattice latticeDeformKeyCtx launch launchImageEditor layerButton layeredShaderPort layeredTexturePort layout layoutDialog lightList lightListEditor lightListPanel lightlink lineIntersection linearPrecision linstep listAnimatable listAttr listCameras listConnections listDeviceAttachments listHistory listInputDeviceAxes listInputDeviceButtons listInputDevices listMenuAnnotation listNodeTypes listPanelCategories listRelatives listSets listTransforms listUnselected listerEditor loadFluid loadNewShelf loadPlugin loadPluginLanguageResources loadPrefObjects localizedPanelLabel lockNode loft log longNameOf lookThru ls lsThroughFilter lsType lsUI Mayatomr mag makeIdentity makeLive makePaintable makeRoll makeSingleSurface makeTubeOn makebot manipMoveContext manipMoveLimitsCtx manipOptions manipRotateContext manipRotateLimitsCtx manipScaleContext manipScaleLimitsCtx marker match max memory menu menuBarLayout menuEditor menuItem menuItemToShelf menuSet menuSetPref messageLine min minimizeApp mirrorJoint modelCurrentTimeCtx modelEditor modelPanel mouse movIn movOut move moveIKtoFK moveKeyCtx moveVertexAlongDirection multiProfileBirailSurface mute nParticle nameCommand nameField namespace namespaceInfo newPanelItems newton nodeCast nodeIconButton nodeOutliner nodePreset nodeType noise nonLinear normalConstraint normalize nurbsBoolean nurbsCopyUVSet nurbsCube nurbsEditUV nurbsPlane nurbsSelect nurbsSquare nurbsToPoly nurbsToPolygonsPref nurbsToSubdiv nurbsToSubdivPref nurbsUVSet nurbsViewDirectionVector objExists objectCenter objectLayer objectType objectTypeUI obsoleteProc oceanNurbsPreviewPlane offsetCurve offsetCurveOnSurface offsetSurface openGLExtension openMayaPref optionMenu optionMenuGrp optionVar orbit orbitCtx orientConstraint outlinerEditor outlinerPanel overrideModifier paintEffectsDisplay pairBlend palettePort paneLayout panel panelConfiguration panelHistory paramDimContext paramDimension paramLocator parent parentConstraint particle particleExists particleInstancer particleRenderInfo partition pasteKey pathAnimation pause pclose percent performanceOptions pfxstrokes pickWalk picture pixelMove planarSrf plane play playbackOptions playblast plugAttr plugNode pluginInfo pluginResourceUtil pointConstraint pointCurveConstraint pointLight pointMatrixMult pointOnCurve pointOnSurface pointPosition poleVectorConstraint polyAppend polyAppendFacetCtx polyAppendVertex polyAutoProjection polyAverageNormal polyAverageVertex polyBevel polyBlendColor polyBlindData polyBoolOp polyBridgeEdge polyCacheMonitor polyCheck polyChipOff polyClipboard polyCloseBorder polyCollapseEdge polyCollapseFacet polyColorBlindData polyColorDel polyColorPerVertex polyColorSet polyCompare polyCone polyCopyUV polyCrease polyCreaseCtx polyCreateFacet polyCreateFacetCtx polyCube polyCut polyCutCtx polyCylinder polyCylindricalProjection polyDelEdge polyDelFacet polyDelVertex polyDuplicateAndConnect polyDuplicateEdge polyEditUV polyEditUVShell polyEvaluate polyExtrudeEdge polyExtrudeFacet polyExtrudeVertex polyFlipEdge polyFlipUV polyForceUV polyGeoSampler polyHelix polyInfo polyInstallAction polyLayoutUV polyListComponentConversion polyMapCut polyMapDel polyMapSew polyMapSewMove polyMergeEdge polyMergeEdgeCtx polyMergeFacet polyMergeFacetCtx polyMergeUV polyMergeVertex polyMirrorFace polyMoveEdge polyMoveFacet polyMoveFacetUV polyMoveUV polyMoveVertex polyNormal polyNormalPerVertex polyNormalizeUV polyOptUvs polyOptions polyOutput polyPipe polyPlanarProjection polyPlane polyPlatonicSolid polyPoke polyPrimitive polyPrism polyProjection polyPyramid polyQuad polyQueryBlindData polyReduce polySelect polySelectConstraint polySelectConstraintMonitor polySelectCtx polySelectEditCtx polySeparate polySetToFaceNormal polySewEdge polyShortestPathCtx polySmooth polySoftEdge polySphere polySphericalProjection polySplit polySplitCtx polySplitEdge polySplitRing polySplitVertex polyStraightenUVBorder polySubdivideEdge polySubdivideFacet polyToSubdiv polyTorus polyTransfer polyTriangulate polyUVSet polyUnite polyWedgeFace popen popupMenu pose pow preloadRefEd print progressBar progressWindow projFileViewer projectCurve projectTangent projectionContext projectionManip promptDialog propModCtx propMove psdChannelOutliner psdEditTextureFile psdExport psdTextureFile putenv pwd python querySubdiv quit rad_to_deg radial radioButton radioButtonGrp radioCollection radioMenuItemCollection rampColorPort rand randomizeFollicles randstate rangeControl readTake rebuildCurve rebuildSurface recordAttr recordDevice redo reference referenceEdit referenceQuery refineSubdivSelectionList refresh refreshAE registerPluginResource rehash reloadImage removeJoint removeMultiInstance removePanelCategory rename renameAttr renameSelectionList renameUI render renderGlobalsNode renderInfo renderLayerButton renderLayerParent renderLayerPostProcess renderLayerUnparent renderManip renderPartition renderQualityNode renderSettings renderThumbnailUpdate renderWindowEditor renderWindowSelectContext renderer reorder reorderDeformers requires reroot resampleFluid resetAE resetPfxToPolyCamera resetTool resolutionNode retarget reverseCurve reverseSurface revolve rgb_to_hsv rigidBody rigidSolver roll rollCtx rootOf rot rotate rotationInterpolation roundConstantRadius rowColumnLayout rowLayout runTimeCommand runup sampleImage saveAllShelves saveAttrPreset saveFluid saveImage saveInitialState saveMenu savePrefObjects savePrefs saveShelf saveToolSettings scale scaleBrushBrightness scaleComponents scaleConstraint scaleKey scaleKeyCtx sceneEditor sceneUIReplacement scmh scriptCtx scriptEditorInfo scriptJob scriptNode scriptTable scriptToShelf scriptedPanel scriptedPanelType scrollField scrollLayout sculpt searchPathArray seed selLoadSettings select selectContext selectCurveCV selectKey selectKeyCtx selectKeyframeRegionCtx selectMode selectPref selectPriority selectType selectedNodes selectionConnection separator setAttr setAttrEnumResource setAttrMapping setAttrNiceNameResource setConstraintRestPosition setDefaultShadingGroup setDrivenKeyframe setDynamic setEditCtx setEditor setFluidAttr setFocus setInfinity setInputDeviceMapping setKeyCtx setKeyPath setKeyframe setKeyframeBlendshapeTargetWts setMenuMode setNodeNiceNameResource setNodeTypeFlag setParent setParticleAttr setPfxToPolyCamera setPluginResource setProject setStampDensity setStartupMessage setState setToolTo setUITemplate setXformManip sets shadingConnection shadingGeometryRelCtx shadingLightRelCtx shadingNetworkCompare shadingNode shapeCompare shelfButton shelfLayout shelfTabLayout shellField shortNameOf showHelp showHidden showManipCtx showSelectionInTitle showShadingGroupAttrEditor showWindow sign simplify sin singleProfileBirailSurface size sizeBytes skinCluster skinPercent smoothCurve smoothTangentSurface smoothstep snap2to2 snapKey snapMode snapTogetherCtx snapshot soft softMod softModCtx sort sound soundControl source spaceLocator sphere sphrand spotLight spotLightPreviewPort spreadSheetEditor spring sqrt squareSurface srtContext stackTrace startString startsWith stitchAndExplodeShell stitchSurface stitchSurfacePoints strcmp stringArrayCatenate stringArrayContains stringArrayCount stringArrayInsertAtIndex stringArrayIntersector stringArrayRemove stringArrayRemoveAtIndex stringArrayRemoveDuplicates stringArrayRemoveExact stringArrayToString stringToStringArray strip stripPrefixFromName stroke subdAutoProjection subdCleanTopology subdCollapse subdDuplicateAndConnect subdEditUV subdListComponentConversion subdMapCut subdMapSewMove subdMatchTopology subdMirror subdToBlind subdToPoly subdTransferUVsToCache subdiv subdivCrease subdivDisplaySmoothness substitute substituteAllString substituteGeometry substring surface surfaceSampler surfaceShaderList swatchDisplayPort switchTable symbolButton symbolCheckBox sysFile system tabLayout tan tangentConstraint texLatticeDeformContext texManipContext texMoveContext texMoveUVShellContext texRotateContext texScaleContext texSelectContext texSelectShortestPathCtx texSmudgeUVContext texWinToolCtx text textCurves textField textFieldButtonGrp textFieldGrp textManip textScrollList textToShelf textureDisplacePlane textureHairColor texturePlacementContext textureWindow threadCount threePointArcCtx timeControl timePort timerX toNativePath toggle toggleAxis toggleWindowVisibility tokenize tokenizeList tolerance tolower toolButton toolCollection toolDropped toolHasOptions toolPropertyWindow torus toupper trace track trackCtx transferAttributes transformCompare transformLimits translator trim trunc truncateFluidCache truncateHairCache tumble tumbleCtx turbulence twoPointArcCtx uiRes uiTemplate unassignInputDevice undo undoInfo ungroup uniform unit unloadPlugin untangleUV untitledFileName untrim upAxis updateAE userCtx uvLink uvSnapshot validateShelfName vectorize view2dToolCtx viewCamera viewClipPlane viewFit viewHeadOn viewLookAt viewManip viewPlace viewSet visor volumeAxis vortex waitCursor warning webBrowser webBrowserPrefs whatIs window windowPref wire wireContext workspace wrinkle wrinkleContext writeTake xbmLangPathList xform",
      illegal: "</",
      contains: [
        e2.C_NUMBER_MODE,
        e2.APOS_STRING_MODE,
        e2.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "`",
          end: "`",
          contains: [e2.BACKSLASH_ESCAPE]
        },
        {
          // eats variables
          begin: /[$%@](\^\w\b|#\w+|[^\s\w{]|\{\w+\}|\w+)/
        },
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE
      ]
    };
  }
  return Ro = t2, Ro;
}
var Co, Id;
function bC() {
  if (Id)
    return Co;
  Id = 1;
  function t2(e2) {
    const n = {
      keyword: "module use_module import_module include_module end_module initialise mutable initialize finalize finalise interface implementation pred mode func type inst solver any_pred any_func is semidet det nondet multi erroneous failure cc_nondet cc_multi typeclass instance where pragma promise external trace atomic or_else require_complete_switch require_det require_semidet require_multi require_nondet require_cc_multi require_cc_nondet require_erroneous require_failure",
      meta: (
        // pragma
        "inline no_inline type_spec source_file fact_table obsolete memo loop_check minimal_model terminates does_not_terminate check_termination promise_equivalent_clauses foreign_proc foreign_decl foreign_code foreign_type foreign_import_module foreign_export_enum foreign_export foreign_enum may_call_mercury will_not_call_mercury thread_safe not_thread_safe maybe_thread_safe promise_pure promise_semipure tabled_for_io local untrailed trailed attach_to_io_state can_pass_as_mercury_type stable will_not_throw_exception may_modify_trail will_not_modify_trail may_duplicate may_not_duplicate affects_liveness does_not_affect_liveness doesnt_affect_liveness no_sharing unknown_sharing sharing"
      ),
      built_in: "some all not if then else true fail false try catch catch_any semidet_true semidet_false semidet_fail impure_true impure semipure"
    }, i2 = e2.COMMENT("%", "$"), r2 = {
      className: "number",
      begin: "0'.\\|0[box][0-9a-fA-F]*"
    }, a2 = e2.inherit(e2.APOS_STRING_MODE, { relevance: 0 }), s2 = e2.inherit(e2.QUOTE_STRING_MODE, { relevance: 0 }), o2 = {
      className: "subst",
      begin: "\\\\[abfnrtv]\\|\\\\x[0-9a-fA-F]*\\\\\\|%[-+# *.0-9]*[dioxXucsfeEgGp]",
      relevance: 0
    };
    return s2.contains = s2.contains.slice(), s2.contains.push(o2), {
      name: "Mercury",
      aliases: [
        "m",
        "moo"
      ],
      keywords: n,
      contains: [
        {
          className: "built_in",
          variants: [
            { begin: "<=>" },
            {
              begin: "<=",
              relevance: 0
            },
            {
              begin: "=>",
              relevance: 0
            },
            { begin: "/\\\\" },
            { begin: "\\\\/" }
          ]
        },
        {
          className: "built_in",
          variants: [
            { begin: ":-\\|-->" },
            {
              begin: "=",
              relevance: 0
            }
          ]
        },
        i2,
        e2.C_BLOCK_COMMENT_MODE,
        r2,
        e2.NUMBER_MODE,
        a2,
        s2,
        {
          // relevance booster
          begin: /:-/
        },
        {
          // relevance booster
          begin: /\.$/
        }
      ]
    };
  }
  return Co = t2, Co;
}
var No, Dd;
function TC() {
  if (Dd)
    return No;
  Dd = 1;
  function t2(e2) {
    return {
      name: "MIPS Assembly",
      case_insensitive: true,
      aliases: ["mips"],
      keywords: {
        $pattern: "\\.?" + e2.IDENT_RE,
        meta: (
          // GNU preprocs
          ".2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .ltorg "
        ),
        built_in: "$0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 $16 $17 $18 $19 $20 $21 $22 $23 $24 $25 $26 $27 $28 $29 $30 $31 zero at v0 v1 a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 s0 s1 s2 s3 s4 s5 s6 s7 s8 k0 k1 gp sp fp ra $f0 $f1 $f2 $f2 $f4 $f5 $f6 $f7 $f8 $f9 $f10 $f11 $f12 $f13 $f14 $f15 $f16 $f17 $f18 $f19 $f20 $f21 $f22 $f23 $f24 $f25 $f26 $f27 $f28 $f29 $f30 $f31 Context Random EntryLo0 EntryLo1 Context PageMask Wired EntryHi HWREna BadVAddr Count Compare SR IntCtl SRSCtl SRSMap Cause EPC PRId EBase Config Config1 Config2 Config3 LLAddr Debug DEPC DESAVE CacheErr ECC ErrorEPC TagLo DataLo TagHi DataHi WatchLo WatchHi PerfCtl PerfCnt "
        // Coprocessor 0 registers
      },
      contains: [
        {
          className: "keyword",
          begin: "\\b(addi?u?|andi?|b(al)?|beql?|bgez(al)?l?|bgtzl?|blezl?|bltz(al)?l?|bnel?|cl[oz]|divu?|ext|ins|j(al)?|jalr(\\.hb)?|jr(\\.hb)?|lbu?|lhu?|ll|lui|lw[lr]?|maddu?|mfhi|mflo|movn|movz|move|msubu?|mthi|mtlo|mul|multu?|nop|nor|ori?|rotrv?|sb|sc|se[bh]|sh|sllv?|slti?u?|srav?|srlv?|subu?|sw[lr]?|xori?|wsbh|abs\\.[sd]|add\\.[sd]|alnv.ps|bc1[ft]l?|c\\.(s?f|un|u?eq|[ou]lt|[ou]le|ngle?|seq|l[et]|ng[et])\\.[sd]|(ceil|floor|round|trunc)\\.[lw]\\.[sd]|cfc1|cvt\\.d\\.[lsw]|cvt\\.l\\.[dsw]|cvt\\.ps\\.s|cvt\\.s\\.[dlw]|cvt\\.s\\.p[lu]|cvt\\.w\\.[dls]|div\\.[ds]|ldx?c1|luxc1|lwx?c1|madd\\.[sd]|mfc1|mov[fntz]?\\.[ds]|msub\\.[sd]|mth?c1|mul\\.[ds]|neg\\.[ds]|nmadd\\.[ds]|nmsub\\.[ds]|p[lu][lu]\\.ps|recip\\.fmt|r?sqrt\\.[ds]|sdx?c1|sub\\.[ds]|suxc1|swx?c1|break|cache|d?eret|[de]i|ehb|mfc0|mtc0|pause|prefx?|rdhwr|rdpgpr|sdbbp|ssnop|synci?|syscall|teqi?|tgei?u?|tlb(p|r|w[ir])|tlti?u?|tnei?|wait|wrpgpr)",
          end: "\\s"
        },
        // lines ending with ; or # aren't really comments, probably auto-detect fail
        e2.COMMENT("[;#](?!\\s*$)", "$"),
        e2.C_BLOCK_COMMENT_MODE,
        e2.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "'",
          end: "[^\\\\]'",
          relevance: 0
        },
        {
          className: "title",
          begin: "\\|",
          end: "\\|",
          illegal: "\\n",
          relevance: 0
        },
        {
          className: "number",
          variants: [
            {
              // hex
              begin: "0x[0-9a-f]+"
            },
            {
              // bare number
              begin: "\\b-?\\d+"
            }
          ],
          relevance: 0
        },
        {
          className: "symbol",
          variants: [
            {
              // GNU MIPS syntax
              begin: "^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:"
            },
            {
              // numbered local labels
              begin: "^\\s*[0-9]+:"
            },
            {
              // number local label reference (backwards, forwards)
              begin: "[0-9]+[bf]"
            }
          ],
          relevance: 0
        }
      ],
      // forward slashes are not allowed
      illegal: /\//
    };
  }
  return No = t2, No;
}
var vo, xd;
function hC() {
  if (xd)
    return vo;
  xd = 1;
  function t2(e2) {
    return {
      name: "Mizar",
      keywords: "environ vocabularies notations constructors definitions registrations theorems schemes requirements begin end definition registration cluster existence pred func defpred deffunc theorem proof let take assume then thus hence ex for st holds consider reconsider such that and in provided of as from be being by means equals implies iff redefine define now not or attr is mode suppose per cases set thesis contradiction scheme reserve struct correctness compatibility coherence symmetry assymetry reflexivity irreflexivity connectedness uniqueness commutativity idempotence involutiveness projectivity",
      contains: [e2.COMMENT("::", "$")]
    };
  }
  return vo = t2, vo;
}
var Oo, Ld;
function RC() {
  if (Ld)
    return Oo;
  Ld = 1;
  function t2(e2) {
    const n = e2.regex, i2 = [
      "abs",
      "accept",
      "alarm",
      "and",
      "atan2",
      "bind",
      "binmode",
      "bless",
      "break",
      "caller",
      "chdir",
      "chmod",
      "chomp",
      "chop",
      "chown",
      "chr",
      "chroot",
      "class",
      "close",
      "closedir",
      "connect",
      "continue",
      "cos",
      "crypt",
      "dbmclose",
      "dbmopen",
      "defined",
      "delete",
      "die",
      "do",
      "dump",
      "each",
      "else",
      "elsif",
      "endgrent",
      "endhostent",
      "endnetent",
      "endprotoent",
      "endpwent",
      "endservent",
      "eof",
      "eval",
      "exec",
      "exists",
      "exit",
      "exp",
      "fcntl",
      "field",
      "fileno",
      "flock",
      "for",
      "foreach",
      "fork",
      "format",
      "formline",
      "getc",
      "getgrent",
      "getgrgid",
      "getgrnam",
      "gethostbyaddr",
      "gethostbyname",
      "gethostent",
      "getlogin",
      "getnetbyaddr",
      "getnetbyname",
      "getnetent",
      "getpeername",
      "getpgrp",
      "getpriority",
      "getprotobyname",
      "getprotobynumber",
      "getprotoent",
      "getpwent",
      "getpwnam",
      "getpwuid",
      "getservbyname",
      "getservbyport",
      "getservent",
      "getsockname",
      "getsockopt",
      "given",
      "glob",
      "gmtime",
      "goto",
      "grep",
      "gt",
      "hex",
      "if",
      "index",
      "int",
      "ioctl",
      "join",
      "keys",
      "kill",
      "last",
      "lc",
      "lcfirst",
      "length",
      "link",
      "listen",
      "local",
      "localtime",
      "log",
      "lstat",
      "lt",
      "ma",
      "map",
      "method",
      "mkdir",
      "msgctl",
      "msgget",
      "msgrcv",
      "msgsnd",
      "my",
      "ne",
      "next",
      "no",
      "not",
      "oct",
      "open",
      "opendir",
      "or",
      "ord",
      "our",
      "pack",
      "package",
      "pipe",
      "pop",
      "pos",
      "print",
      "printf",
      "prototype",
      "push",
      "q|0",
      "qq",
      "quotemeta",
      "qw",
      "qx",
      "rand",
      "read",
      "readdir",
      "readline",
      "readlink",
      "readpipe",
      "recv",
      "redo",
      "ref",
      "rename",
      "require",
      "reset",
      "return",
      "reverse",
      "rewinddir",
      "rindex",
      "rmdir",
      "say",
      "scalar",
      "seek",
      "seekdir",
      "select",
      "semctl",
      "semget",
      "semop",
      "send",
      "setgrent",
      "sethostent",
      "setnetent",
      "setpgrp",
      "setpriority",
      "setprotoent",
      "setpwent",
      "setservent",
      "setsockopt",
      "shift",
      "shmctl",
      "shmget",
      "shmread",
      "shmwrite",
      "shutdown",
      "sin",
      "sleep",
      "socket",
      "socketpair",
      "sort",
      "splice",
      "split",
      "sprintf",
      "sqrt",
      "srand",
      "stat",
      "state",
      "study",
      "sub",
      "substr",
      "symlink",
      "syscall",
      "sysopen",
      "sysread",
      "sysseek",
      "system",
      "syswrite",
      "tell",
      "telldir",
      "tie",
      "tied",
      "time",
      "times",
      "tr",
      "truncate",
      "uc",
      "ucfirst",
      "umask",
      "undef",
      "unless",
      "unlink",
      "unpack",
      "unshift",
      "untie",
      "until",
      "use",
      "utime",
      "values",
      "vec",
      "wait",
      "waitpid",
      "wantarray",
      "warn",
      "when",
      "while",
      "write",
      "x|0",
      "xor",
      "y|0"
    ], r2 = /[dualxmsipngr]{0,12}/, a2 = {
      $pattern: /[\w.]+/,
      keyword: i2.join(" ")
    }, s2 = {
      className: "subst",
      begin: "[$@]\\{",
      end: "\\}",
      keywords: a2
    }, o2 = {
      begin: /->\{/,
      end: /\}/
      // contains defined later
    }, l2 = {
      scope: "attr",
      match: /\s+:\s*\w+(\s*\(.*?\))?/
    }, u2 = {
      scope: "variable",
      variants: [
        { begin: /\$\d/ },
        {
          begin: n.concat(
            /[$%@](?!")(\^\w\b|#\w+(::\w+)*|\{\w+\}|\w+(::\w*)*)/,
            // negative look-ahead tries to avoid matching patterns that are not
            // Perl at all like $ident$, @ident@, etc.
            "(?![A-Za-z])(?![@$%])"
          )
        },
        {
          // Only $= is a special Perl variable and one can't declare @= or %=.
          begin: /[$%@](?!")[^\s\w{=]|\$=/,
          relevance: 0
        }
      ],
      contains: [l2]
    }, _ = {
      className: "number",
      variants: [
        // decimal numbers:
        // include the case where a number starts with a dot (eg. .9), and
        // the leading 0? avoids mixing the first and second match on 0.x cases
        { match: /0?\.[0-9][0-9_]+\b/ },
        // include the special versioned number (eg. v5.38)
        { match: /\bv?(0|[1-9][0-9_]*(\.[0-9_]+)?|[1-9][0-9_]*)\b/ },
        // non-decimal numbers:
        { match: /\b0[0-7][0-7_]*\b/ },
        { match: /\b0x[0-9a-fA-F][0-9a-fA-F_]*\b/ },
        { match: /\b0b[0-1][0-1_]*\b/ }
      ],
      relevance: 0
    }, d2 = [
      e2.BACKSLASH_ESCAPE,
      s2,
      u2
    ], f2 = [
      /!/,
      /\//,
      /\|/,
      /\?/,
      /'/,
      /"/,
      // valid but infrequent and weird
      /#/
      // valid but infrequent and weird
    ], b = (g2, S, p2 = "\\1") => {
      const m2 = p2 === "\\1" ? p2 : n.concat(p2, S);
      return n.concat(
        n.concat("(?:", g2, ")"),
        S,
        /(?:\\.|[^\\\/])*?/,
        m2,
        /(?:\\.|[^\\\/])*?/,
        p2,
        r2
      );
    }, c2 = (g2, S, p2) => n.concat(
      n.concat("(?:", g2, ")"),
      S,
      /(?:\\.|[^\\\/])*?/,
      p2,
      r2
    ), E2 = [
      u2,
      e2.HASH_COMMENT_MODE,
      e2.COMMENT(
        /^=\w/,
        /=cut/,
        { endsWithParent: true }
      ),
      o2,
      {
        className: "string",
        contains: d2,
        variants: [
          {
            begin: "q[qwxr]?\\s*\\(",
            end: "\\)",
            relevance: 5
          },
          {
            begin: "q[qwxr]?\\s*\\[",
            end: "\\]",
            relevance: 5
          },
          {
            begin: "q[qwxr]?\\s*\\{",
            end: "\\}",
            relevance: 5
          },
          {
            begin: "q[qwxr]?\\s*\\|",
            end: "\\|",
            relevance: 5
          },
          {
            begin: "q[qwxr]?\\s*<",
            end: ">",
            relevance: 5
          },
          {
            begin: "qw\\s+q",
            end: "q",
            relevance: 5
          },
          {
            begin: "'",
            end: "'",
            contains: [e2.BACKSLASH_ESCAPE]
          },
          {
            begin: '"',
            end: '"'
          },
          {
            begin: "`",
            end: "`",
            contains: [e2.BACKSLASH_ESCAPE]
          },
          {
            begin: /\{\w+\}/,
            relevance: 0
          },
          {
            begin: "-?\\w+\\s*=>",
            relevance: 0
          }
        ]
      },
      _,
      {
        // regexp container
        begin: "(\\/\\/|" + e2.RE_STARTERS_RE + "|\\b(split|return|print|reverse|grep)\\b)\\s*",
        keywords: "split return print reverse grep",
        relevance: 0,
        contains: [
          e2.HASH_COMMENT_MODE,
          {
            className: "regexp",
            variants: [
              // allow matching common delimiters
              { begin: b("s|tr|y", n.either(...f2, { capture: true })) },
              // and then paired delmis
              { begin: b("s|tr|y", "\\(", "\\)") },
              { begin: b("s|tr|y", "\\[", "\\]") },
              { begin: b("s|tr|y", "\\{", "\\}") }
            ],
            relevance: 2
          },
          {
            className: "regexp",
            variants: [
              {
                // could be a comment in many languages so do not count
                // as relevant
                begin: /(m|qr)\/\//,
                relevance: 0
              },
              // prefix is optional with /regex/
              { begin: c2("(?:m|qr)?", /\//, /\//) },
              // allow matching common delimiters
              { begin: c2("m|qr", n.either(...f2, { capture: true }), /\1/) },
              // allow common paired delmins
              { begin: c2("m|qr", /\(/, /\)/) },
              { begin: c2("m|qr", /\[/, /\]/) },
              { begin: c2("m|qr", /\{/, /\}/) }
            ]
          }
        ]
      },
      {
        className: "function",
        beginKeywords: "sub method",
        end: "(\\s*\\(.*?\\))?[;{]",
        excludeEnd: true,
        relevance: 5,
        contains: [e2.TITLE_MODE, l2]
      },
      {
        className: "class",
        beginKeywords: "class",
        end: "[;{]",
        excludeEnd: true,
        relevance: 5,
        contains: [e2.TITLE_MODE, l2, _]
      },
      {
        begin: "-\\w\\b",
        relevance: 0
      },
      {
        begin: "^__DATA__$",
        end: "^__END__$",
        subLanguage: "mojolicious",
        contains: [
          {
            begin: "^@@.*",
            end: "$",
            className: "comment"
          }
        ]
      }
    ];
    return s2.contains = E2, o2.contains = E2, {
      name: "Perl",
      aliases: [
        "pl",
        "pm"
      ],
      keywords: a2,
      contains: E2
    };
  }
  return Oo = t2, Oo;
}
var Ao, Md;
function CC() {
  if (Md)
    return Ao;
  Md = 1;
  function t2(e2) {
    return {
      name: "Mojolicious",
      subLanguage: "xml",
      contains: [
        {
          className: "meta",
          begin: "^__(END|DATA)__$"
        },
        // mojolicious line
        {
          begin: "^\\s*%{1,2}={0,2}",
          end: "$",
          subLanguage: "perl"
        },
        // mojolicious block
        {
          begin: "<%{1,2}={0,2}",
          end: "={0,1}%>",
          subLanguage: "perl",
          excludeBegin: true,
          excludeEnd: true
        }
      ]
    };
  }
  return Ao = t2, Ao;
}
var yo, wd;
function NC() {
  if (wd)
    return yo;
  wd = 1;
  function t2(e2) {
    const n = {
      className: "number",
      relevance: 0,
      variants: [
        { begin: "[$][a-fA-F0-9]+" },
        e2.NUMBER_MODE
      ]
    }, i2 = {
      variants: [
        { match: [
          /(function|method)/,
          /\s+/,
          e2.UNDERSCORE_IDENT_RE
        ] }
      ],
      scope: {
        1: "keyword",
        3: "title.function"
      }
    }, r2 = {
      variants: [
        { match: [
          /(class|interface|extends|implements)/,
          /\s+/,
          e2.UNDERSCORE_IDENT_RE
        ] }
      ],
      scope: {
        1: "keyword",
        3: "title.class"
      }
    };
    return {
      name: "Monkey",
      case_insensitive: true,
      keywords: {
        keyword: [
          "public",
          "private",
          "property",
          "continue",
          "exit",
          "extern",
          "new",
          "try",
          "catch",
          "eachin",
          "not",
          "abstract",
          "final",
          "select",
          "case",
          "default",
          "const",
          "local",
          "global",
          "field",
          "end",
          "if",
          "then",
          "else",
          "elseif",
          "endif",
          "while",
          "wend",
          "repeat",
          "until",
          "forever",
          "for",
          "to",
          "step",
          "next",
          "return",
          "module",
          "inline",
          "throw",
          "import",
          // not positive, but these are not literals
          "and",
          "or",
          "shl",
          "shr",
          "mod"
        ],
        built_in: [
          "DebugLog",
          "DebugStop",
          "Error",
          "Print",
          "ACos",
          "ACosr",
          "ASin",
          "ASinr",
          "ATan",
          "ATan2",
          "ATan2r",
          "ATanr",
          "Abs",
          "Abs",
          "Ceil",
          "Clamp",
          "Clamp",
          "Cos",
          "Cosr",
          "Exp",
          "Floor",
          "Log",
          "Max",
          "Max",
          "Min",
          "Min",
          "Pow",
          "Sgn",
          "Sgn",
          "Sin",
          "Sinr",
          "Sqrt",
          "Tan",
          "Tanr",
          "Seed",
          "PI",
          "HALFPI",
          "TWOPI"
        ],
        literal: [
          "true",
          "false",
          "null"
        ]
      },
      illegal: /\/\*/,
      contains: [
        e2.COMMENT("#rem", "#end"),
        e2.COMMENT(
          "'",
          "$",
          { relevance: 0 }
        ),
        i2,
        r2,
        {
          className: "variable.language",
          begin: /\b(self|super)\b/
        },
        {
          className: "meta",
          begin: /\s*#/,
          end: "$",
          keywords: { keyword: "if else elseif endif end then" }
        },
        {
          match: [
            /^\s*/,
            /strict\b/
          ],
          scope: { 2: "meta" }
        },
        {
          beginKeywords: "alias",
          end: "=",
          contains: [e2.UNDERSCORE_TITLE_MODE]
        },
        e2.QUOTE_STRING_MODE,
        n
      ]
    };
  }
  return yo = t2, yo;
}
var Io, kd;
function vC() {
  if (kd)
    return Io;
  kd = 1;
  function t2(e2) {
    const n = {
      keyword: (
        // Moonscript keywords
        "if then not for in while do return else elseif break continue switch and or unless when class extends super local import export from using"
      ),
      literal: "true false nil",
      built_in: "_G _VERSION assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall coroutine debug io math os package string table"
    }, i2 = "[A-Za-z$_][0-9A-Za-z$_]*", r2 = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: n
    }, a2 = [
      e2.inherit(
        e2.C_NUMBER_MODE,
        { starts: {
          end: "(\\s*/)?",
          relevance: 0
        } }
      ),
      // a number tries to eat the following slash to prevent treating it as a regexp
      {
        className: "string",
        variants: [
          {
            begin: /'/,
            end: /'/,
            contains: [e2.BACKSLASH_ESCAPE]
          },
          {
            begin: /"/,
            end: /"/,
            contains: [
              e2.BACKSLASH_ESCAPE,
              r2
            ]
          }
        ]
      },
      {
        className: "built_in",
        begin: "@__" + e2.IDENT_RE
      },
      {
        begin: "@" + e2.IDENT_RE
        // relevance booster on par with CoffeeScript
      },
      {
        begin: e2.IDENT_RE + "\\\\" + e2.IDENT_RE
        // inst\method
      }
    ];
    r2.contains = a2;
    const s2 = e2.inherit(e2.TITLE_MODE, { begin: i2 }), o2 = "(\\(.*\\)\\s*)?\\B[-=]>", l2 = {
      className: "params",
      begin: "\\([^\\(]",
      returnBegin: true,
      /* We need another contained nameless mode to not have every nested
      pair of parens to be called "params" */
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          keywords: n,
          contains: ["self"].concat(a2)
        }
      ]
    };
    return {
      name: "MoonScript",
      aliases: ["moon"],
      keywords: n,
      illegal: /\/\*/,
      contains: a2.concat([
        e2.COMMENT("--", "$"),
        {
          className: "function",
          // function: -> =>
          begin: "^\\s*" + i2 + "\\s*=\\s*" + o2,
          end: "[-=]>",
          returnBegin: true,
          contains: [
            s2,
            l2
          ]
        },
        {
          begin: /[\(,:=]\s*/,
          // anonymous function start
          relevance: 0,
          contains: [
            {
              className: "function",
              begin: o2,
              end: "[-=]>",
              returnBegin: true,
              contains: [l2]
            }
          ]
        },
        {
          className: "class",
          beginKeywords: "class",
          end: "$",
          illegal: /[:="\[\]]/,
          contains: [
            {
              beginKeywords: "extends",
              endsWithParent: true,
              illegal: /[:="\[\]]/,
              contains: [s2]
            },
            s2
          ]
        },
        {
          className: "name",
          // table
          begin: i2 + ":",
          end: ":",
          returnBegin: true,
          returnEnd: true,
          relevance: 0
        }
      ])
    };
  }
  return Io = t2, Io;
}
var Do, Pd;
function OC() {
  if (Pd)
    return Do;
  Pd = 1;
  function t2(e2) {
    return {
      name: "N1QL",
      case_insensitive: true,
      contains: [
        {
          beginKeywords: "build create index delete drop explain infer|10 insert merge prepare select update upsert|10",
          end: /;/,
          keywords: {
            keyword: [
              "all",
              "alter",
              "analyze",
              "and",
              "any",
              "array",
              "as",
              "asc",
              "begin",
              "between",
              "binary",
              "boolean",
              "break",
              "bucket",
              "build",
              "by",
              "call",
              "case",
              "cast",
              "cluster",
              "collate",
              "collection",
              "commit",
              "connect",
              "continue",
              "correlate",
              "cover",
              "create",
              "database",
              "dataset",
              "datastore",
              "declare",
              "decrement",
              "delete",
              "derived",
              "desc",
              "describe",
              "distinct",
              "do",
              "drop",
              "each",
              "element",
              "else",
              "end",
              "every",
              "except",
              "exclude",
              "execute",
              "exists",
              "explain",
              "fetch",
              "first",
              "flatten",
              "for",
              "force",
              "from",
              "function",
              "grant",
              "group",
              "gsi",
              "having",
              "if",
              "ignore",
              "ilike",
              "in",
              "include",
              "increment",
              "index",
              "infer",
              "inline",
              "inner",
              "insert",
              "intersect",
              "into",
              "is",
              "join",
              "key",
              "keys",
              "keyspace",
              "known",
              "last",
              "left",
              "let",
              "letting",
              "like",
              "limit",
              "lsm",
              "map",
              "mapping",
              "matched",
              "materialized",
              "merge",
              "minus",
              "namespace",
              "nest",
              "not",
              "number",
              "object",
              "offset",
              "on",
              "option",
              "or",
              "order",
              "outer",
              "over",
              "parse",
              "partition",
              "password",
              "path",
              "pool",
              "prepare",
              "primary",
              "private",
              "privilege",
              "procedure",
              "public",
              "raw",
              "realm",
              "reduce",
              "rename",
              "return",
              "returning",
              "revoke",
              "right",
              "role",
              "rollback",
              "satisfies",
              "schema",
              "select",
              "self",
              "semi",
              "set",
              "show",
              "some",
              "start",
              "statistics",
              "string",
              "system",
              "then",
              "to",
              "transaction",
              "trigger",
              "truncate",
              "under",
              "union",
              "unique",
              "unknown",
              "unnest",
              "unset",
              "update",
              "upsert",
              "use",
              "user",
              "using",
              "validate",
              "value",
              "valued",
              "values",
              "via",
              "view",
              "when",
              "where",
              "while",
              "with",
              "within",
              "work",
              "xor"
            ],
            literal: [
              "true",
              "false",
              "null",
              "missing|5"
            ],
            built_in: [
              "array_agg",
              "array_append",
              "array_concat",
              "array_contains",
              "array_count",
              "array_distinct",
              "array_ifnull",
              "array_length",
              "array_max",
              "array_min",
              "array_position",
              "array_prepend",
              "array_put",
              "array_range",
              "array_remove",
              "array_repeat",
              "array_replace",
              "array_reverse",
              "array_sort",
              "array_sum",
              "avg",
              "count",
              "max",
              "min",
              "sum",
              "greatest",
              "least",
              "ifmissing",
              "ifmissingornull",
              "ifnull",
              "missingif",
              "nullif",
              "ifinf",
              "ifnan",
              "ifnanorinf",
              "naninf",
              "neginfif",
              "posinfif",
              "clock_millis",
              "clock_str",
              "date_add_millis",
              "date_add_str",
              "date_diff_millis",
              "date_diff_str",
              "date_part_millis",
              "date_part_str",
              "date_trunc_millis",
              "date_trunc_str",
              "duration_to_str",
              "millis",
              "str_to_millis",
              "millis_to_str",
              "millis_to_utc",
              "millis_to_zone_name",
              "now_millis",
              "now_str",
              "str_to_duration",
              "str_to_utc",
              "str_to_zone_name",
              "decode_json",
              "encode_json",
              "encoded_size",
              "poly_length",
              "base64",
              "base64_encode",
              "base64_decode",
              "meta",
              "uuid",
              "abs",
              "acos",
              "asin",
              "atan",
              "atan2",
              "ceil",
              "cos",
              "degrees",
              "e",
              "exp",
              "ln",
              "log",
              "floor",
              "pi",
              "power",
              "radians",
              "random",
              "round",
              "sign",
              "sin",
              "sqrt",
              "tan",
              "trunc",
              "object_length",
              "object_names",
              "object_pairs",
              "object_inner_pairs",
              "object_values",
              "object_inner_values",
              "object_add",
              "object_put",
              "object_remove",
              "object_unwrap",
              "regexp_contains",
              "regexp_like",
              "regexp_position",
              "regexp_replace",
              "contains",
              "initcap",
              "length",
              "lower",
              "ltrim",
              "position",
              "repeat",
              "replace",
              "rtrim",
              "split",
              "substr",
              "title",
              "trim",
              "upper",
              "isarray",
              "isatom",
              "isboolean",
              "isnumber",
              "isobject",
              "isstring",
              "type",
              "toarray",
              "toatom",
              "toboolean",
              "tonumber",
              "toobject",
              "tostring"
            ]
          },
          contains: [
            {
              className: "string",
              begin: "'",
              end: "'",
              contains: [e2.BACKSLASH_ESCAPE]
            },
            {
              className: "string",
              begin: '"',
              end: '"',
              contains: [e2.BACKSLASH_ESCAPE]
            },
            {
              className: "symbol",
              begin: "`",
              end: "`",
              contains: [e2.BACKSLASH_ESCAPE]
            },
            e2.C_NUMBER_MODE,
            e2.C_BLOCK_COMMENT_MODE
          ]
        },
        e2.C_BLOCK_COMMENT_MODE
      ]
    };
  }
  return Do = t2, Do;
}
var xo, Fd;
function AC() {
  if (Fd)
    return xo;
  Fd = 1;
  function t2(e2) {
    const n = {
      match: [
        /^\s*(?=\S)/,
        // have to look forward here to avoid polynomial backtracking
        /[^:]+/,
        /:\s*/,
        /$/
      ],
      className: {
        2: "attribute",
        3: "punctuation"
      }
    }, i2 = {
      match: [
        /^\s*(?=\S)/,
        // have to look forward here to avoid polynomial backtracking
        /[^:]*[^: ]/,
        /[ ]*:/,
        /[ ]/,
        /.*$/
      ],
      className: {
        2: "attribute",
        3: "punctuation",
        5: "string"
      }
    }, r2 = {
      match: [
        /^\s*/,
        />/,
        /[ ]/,
        /.*$/
      ],
      className: {
        2: "punctuation",
        4: "string"
      }
    }, a2 = {
      variants: [
        { match: [
          /^\s*/,
          /-/,
          /[ ]/,
          /.*$/
        ] },
        { match: [
          /^\s*/,
          /-$/
        ] }
      ],
      className: {
        2: "bullet",
        4: "string"
      }
    };
    return {
      name: "Nested Text",
      aliases: ["nt"],
      contains: [
        e2.inherit(e2.HASH_COMMENT_MODE, {
          begin: /^\s*(?=#)/,
          excludeBegin: true
        }),
        a2,
        r2,
        n,
        i2
      ]
    };
  }
  return xo = t2, xo;
}
var Lo, Ud;
function yC() {
  if (Ud)
    return Lo;
  Ud = 1;
  function t2(e2) {
    const n = e2.regex, i2 = {
      className: "variable",
      variants: [
        { begin: /\$\d+/ },
        { begin: /\$\{\w+\}/ },
        { begin: n.concat(/[$@]/, e2.UNDERSCORE_IDENT_RE) }
      ]
    }, a2 = {
      endsWithParent: true,
      keywords: {
        $pattern: /[a-z_]{2,}|\/dev\/poll/,
        literal: [
          "on",
          "off",
          "yes",
          "no",
          "true",
          "false",
          "none",
          "blocked",
          "debug",
          "info",
          "notice",
          "warn",
          "error",
          "crit",
          "select",
          "break",
          "last",
          "permanent",
          "redirect",
          "kqueue",
          "rtsig",
          "epoll",
          "poll",
          "/dev/poll"
        ]
      },
      relevance: 0,
      illegal: "=>",
      contains: [
        e2.HASH_COMMENT_MODE,
        {
          className: "string",
          contains: [
            e2.BACKSLASH_ESCAPE,
            i2
          ],
          variants: [
            {
              begin: /"/,
              end: /"/
            },
            {
              begin: /'/,
              end: /'/
            }
          ]
        },
        // this swallows entire URLs to avoid detecting numbers within
        {
          begin: "([a-z]+):/",
          end: "\\s",
          endsWithParent: true,
          excludeEnd: true,
          contains: [i2]
        },
        {
          className: "regexp",
          contains: [
            e2.BACKSLASH_ESCAPE,
            i2
          ],
          variants: [
            {
              begin: "\\s\\^",
              end: "\\s|\\{|;",
              returnEnd: true
            },
            // regexp locations (~, ~*)
            {
              begin: "~\\*?\\s+",
              end: "\\s|\\{|;",
              returnEnd: true
            },
            // *.example.com
            { begin: "\\*(\\.[a-z\\-]+)+" },
            // sub.example.*
            { begin: "([a-z\\-]+\\.)+\\*" }
          ]
        },
        // IP
        {
          className: "number",
          begin: "\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b"
        },
        // units
        {
          className: "number",
          begin: "\\b\\d+[kKmMgGdshdwy]?\\b",
          relevance: 0
        },
        i2
      ]
    };
    return {
      name: "Nginx config",
      aliases: ["nginxconf"],
      contains: [
        e2.HASH_COMMENT_MODE,
        {
          beginKeywords: "upstream location",
          end: /;|\{/,
          contains: a2.contains,
          keywords: { section: "upstream location" }
        },
        {
          className: "section",
          begin: n.concat(e2.UNDERSCORE_IDENT_RE + n.lookahead(/\s+\{/)),
          relevance: 0
        },
        {
          begin: n.lookahead(e2.UNDERSCORE_IDENT_RE + "\\s"),
          end: ";|\\{",
          contains: [
            {
              className: "attribute",
              begin: e2.UNDERSCORE_IDENT_RE,
              starts: a2
            }
          ],
          relevance: 0
        }
      ],
      illegal: "[^\\s\\}\\{]"
    };
  }
  return Lo = t2, Lo;
}
var Mo, Bd;
function IC() {
  if (Bd)
    return Mo;
  Bd = 1;
  function t2(e2) {
    return {
      name: "Nim",
      keywords: {
        keyword: [
          "addr",
          "and",
          "as",
          "asm",
          "bind",
          "block",
          "break",
          "case",
          "cast",
          "concept",
          "const",
          "continue",
          "converter",
          "defer",
          "discard",
          "distinct",
          "div",
          "do",
          "elif",
          "else",
          "end",
          "enum",
          "except",
          "export",
          "finally",
          "for",
          "from",
          "func",
          "generic",
          "guarded",
          "if",
          "import",
          "in",
          "include",
          "interface",
          "is",
          "isnot",
          "iterator",
          "let",
          "macro",
          "method",
          "mixin",
          "mod",
          "nil",
          "not",
          "notin",
          "object",
          "of",
          "or",
          "out",
          "proc",
          "ptr",
          "raise",
          "ref",
          "return",
          "shared",
          "shl",
          "shr",
          "static",
          "template",
          "try",
          "tuple",
          "type",
          "using",
          "var",
          "when",
          "while",
          "with",
          "without",
          "xor",
          "yield"
        ],
        literal: [
          "true",
          "false"
        ],
        type: [
          "int",
          "int8",
          "int16",
          "int32",
          "int64",
          "uint",
          "uint8",
          "uint16",
          "uint32",
          "uint64",
          "float",
          "float32",
          "float64",
          "bool",
          "char",
          "string",
          "cstring",
          "pointer",
          "expr",
          "stmt",
          "void",
          "auto",
          "any",
          "range",
          "array",
          "openarray",
          "varargs",
          "seq",
          "set",
          "clong",
          "culong",
          "cchar",
          "cschar",
          "cshort",
          "cint",
          "csize",
          "clonglong",
          "cfloat",
          "cdouble",
          "clongdouble",
          "cuchar",
          "cushort",
          "cuint",
          "culonglong",
          "cstringarray",
          "semistatic"
        ],
        built_in: [
          "stdin",
          "stdout",
          "stderr",
          "result"
        ]
      },
      contains: [
        {
          className: "meta",
          // Actually pragma
          begin: /\{\./,
          end: /\.\}/,
          relevance: 10
        },
        {
          className: "string",
          begin: /[a-zA-Z]\w*"/,
          end: /"/,
          contains: [{ begin: /""/ }]
        },
        {
          className: "string",
          begin: /([a-zA-Z]\w*)?"""/,
          end: /"""/
        },
        e2.QUOTE_STRING_MODE,
        {
          className: "type",
          begin: /\b[A-Z]\w+\b/,
          relevance: 0
        },
        {
          className: "number",
          relevance: 0,
          variants: [
            { begin: /\b(0[xX][0-9a-fA-F][_0-9a-fA-F]*)('?[iIuU](8|16|32|64))?/ },
            { begin: /\b(0o[0-7][_0-7]*)('?[iIuUfF](8|16|32|64))?/ },
            { begin: /\b(0(b|B)[01][_01]*)('?[iIuUfF](8|16|32|64))?/ },
            { begin: /\b(\d[_\d]*)('?[iIuUfF](8|16|32|64))?/ }
          ]
        },
        e2.HASH_COMMENT_MODE
      ]
    };
  }
  return Mo = t2, Mo;
}
var wo, Gd;
function DC() {
  if (Gd)
    return wo;
  Gd = 1;
  function t2(e2) {
    const n = e2.regex, i2 = {
      keyword: [
        "assert",
        "else",
        "if",
        "in",
        "inherit",
        "let",
        "or",
        "rec",
        "then",
        "with"
      ],
      literal: [
        "true",
        "false",
        "null"
      ],
      built_in: [
        // toplevel builtins
        "abort",
        "baseNameOf",
        "builtins",
        "derivation",
        "derivationStrict",
        "dirOf",
        "fetchGit",
        "fetchMercurial",
        "fetchTarball",
        "fetchTree",
        "fromTOML",
        "import",
        "isNull",
        "map",
        "placeholder",
        "removeAttrs",
        "scopedImport",
        "throw",
        "toString"
      ]
    }, r2 = {
      scope: "built_in",
      match: n.either(...[
        "abort",
        "add",
        "addDrvOutputDependencies",
        "addErrorContext",
        "all",
        "any",
        "appendContext",
        "attrNames",
        "attrValues",
        "baseNameOf",
        "bitAnd",
        "bitOr",
        "bitXor",
        "break",
        "builtins",
        "catAttrs",
        "ceil",
        "compareVersions",
        "concatLists",
        "concatMap",
        "concatStringsSep",
        "convertHash",
        "currentSystem",
        "currentTime",
        "deepSeq",
        "derivation",
        "derivationStrict",
        "dirOf",
        "div",
        "elem",
        "elemAt",
        "false",
        "fetchGit",
        "fetchMercurial",
        "fetchTarball",
        "fetchTree",
        "fetchurl",
        "filter",
        "filterSource",
        "findFile",
        "flakeRefToString",
        "floor",
        "foldl'",
        "fromJSON",
        "fromTOML",
        "functionArgs",
        "genList",
        "genericClosure",
        "getAttr",
        "getContext",
        "getEnv",
        "getFlake",
        "groupBy",
        "hasAttr",
        "hasContext",
        "hashFile",
        "hashString",
        "head",
        "import",
        "intersectAttrs",
        "isAttrs",
        "isBool",
        "isFloat",
        "isFunction",
        "isInt",
        "isList",
        "isNull",
        "isPath",
        "isString",
        "langVersion",
        "length",
        "lessThan",
        "listToAttrs",
        "map",
        "mapAttrs",
        "match",
        "mul",
        "nixPath",
        "nixVersion",
        "null",
        "parseDrvName",
        "parseFlakeRef",
        "partition",
        "path",
        "pathExists",
        "placeholder",
        "readDir",
        "readFile",
        "readFileType",
        "removeAttrs",
        "replaceStrings",
        "scopedImport",
        "seq",
        "sort",
        "split",
        "splitVersion",
        "storeDir",
        "storePath",
        "stringLength",
        "sub",
        "substring",
        "tail",
        "throw",
        "toFile",
        "toJSON",
        "toPath",
        "toString",
        "toXML",
        "trace",
        "traceVerbose",
        "true",
        "tryEval",
        "typeOf",
        "unsafeDiscardOutputDependency",
        "unsafeDiscardStringContext",
        "unsafeGetAttrPos",
        "warn",
        "zipAttrsWith"
      ].map((C2) => `builtins\\.${C2}`)),
      relevance: 10
    }, a2 = "[A-Za-z_][A-Za-z0-9_'-]*", s2 = {
      scope: "symbol",
      match: new RegExp(`<${a2}(/${a2})*>`)
    }, o2 = "[A-Za-z0-9_\\+\\.-]+", l2 = {
      scope: "symbol",
      match: new RegExp(`(\\.\\.|\\.|~)?/(${o2})?(/${o2})*(?=[\\s;])`)
    }, u2 = n.either("==", "=", "\\+\\+", "\\+", "<=", "<\\|", "<", ">=", ">", "->", "//", "/", "!=", "!", "\\|\\|", "\\|>", "\\?", "\\*", "&&"), _ = {
      scope: "operator",
      match: n.concat(u2, /(?!-)/),
      relevance: 0
    }, d2 = {
      scope: "number",
      match: new RegExp(`${e2.NUMBER_RE}(?!-)`),
      relevance: 0
    }, f2 = {
      variants: [
        {
          scope: "operator",
          beforeMatch: /\s/,
          // The (?!>) is used to ensure this doesn't collide with the '->' operator
          begin: /-(?!>)/
        },
        {
          begin: [
            new RegExp(`${e2.NUMBER_RE}`),
            /-/,
            /(?!>)/
          ],
          beginScope: {
            1: "number",
            2: "operator"
          }
        },
        {
          begin: [
            u2,
            /-/,
            /(?!>)/
          ],
          beginScope: {
            1: "operator",
            2: "operator"
          }
        }
      ],
      relevance: 0
    }, b = {
      beforeMatch: /(^|\{|;)\s*/,
      begin: new RegExp(`${a2}(\\.${a2})*\\s*=(?!=)`),
      returnBegin: true,
      relevance: 0,
      contains: [
        {
          scope: "attr",
          match: new RegExp(`${a2}(\\.${a2})*(?=\\s*=)`),
          relevance: 0.2
        }
      ]
    }, c2 = {
      scope: "char.escape",
      match: /\\\$/
    }, E2 = {
      scope: "char.escape",
      match: /''\$/
    }, g2 = {
      scope: "subst",
      begin: /\$\{/,
      end: /\}/,
      keywords: i2
    }, S = {
      scope: "char.escape",
      match: /'''/
    }, p2 = {
      scope: "char.escape",
      match: /\\(?!\$)./
    }, m2 = {
      scope: "string",
      variants: [
        {
          begin: "''",
          end: "''",
          contains: [
            E2,
            g2,
            S,
            p2
          ]
        },
        {
          begin: '"',
          end: '"',
          contains: [
            c2,
            g2,
            p2
          ]
        }
      ]
    }, R2 = {
      scope: "params",
      match: new RegExp(`${a2}\\s*:(?=\\s)`)
    }, T = [
      d2,
      e2.HASH_COMMENT_MODE,
      e2.C_BLOCK_COMMENT_MODE,
      e2.COMMENT(
        /\/\*\*(?!\/)/,
        /\*\//,
        {
          subLanguage: "markdown",
          relevance: 0
        }
      ),
      r2,
      m2,
      s2,
      l2,
      R2,
      b,
      f2,
      _
    ];
    g2.contains = T;
    const h2 = [
      {
        scope: "meta.prompt",
        match: /^nix-repl>(?=\s)/,
        relevance: 10
      },
      {
        scope: "meta",
        beforeMatch: /\s+/,
        begin: /:([a-z]+|\?)/
      }
    ];
    return {
      name: "Nix",
      aliases: ["nixos"],
      keywords: i2,
      contains: T.concat(h2)
    };
  }
  return wo = t2, wo;
}
var ko, Yd;
function xC() {
  if (Yd)
    return ko;
  Yd = 1;
  function t2(e2) {
    return {
      name: "Node REPL",
      contains: [
        {
          className: "meta.prompt",
          starts: {
            // a space separates the REPL prefix from the actual code
            // this is purely for cleaner HTML output
            end: / |$/,
            starts: {
              end: "$",
              subLanguage: "javascript"
            }
          },
          variants: [
            { begin: /^>(?=[ ]|$)/ },
            { begin: /^\.\.\.(?=[ ]|$)/ }
          ]
        }
      ]
    };
  }
  return ko = t2, ko;
}
var Po, qd;
function LC() {
  if (qd)
    return Po;
  qd = 1;
  function t2(e2) {
    const n = e2.regex, i2 = [
      "ADMINTOOLS",
      "APPDATA",
      "CDBURN_AREA",
      "CMDLINE",
      "COMMONFILES32",
      "COMMONFILES64",
      "COMMONFILES",
      "COOKIES",
      "DESKTOP",
      "DOCUMENTS",
      "EXEDIR",
      "EXEFILE",
      "EXEPATH",
      "FAVORITES",
      "FONTS",
      "HISTORY",
      "HWNDPARENT",
      "INSTDIR",
      "INTERNET_CACHE",
      "LANGUAGE",
      "LOCALAPPDATA",
      "MUSIC",
      "NETHOOD",
      "OUTDIR",
      "PICTURES",
      "PLUGINSDIR",
      "PRINTHOOD",
      "PROFILE",
      "PROGRAMFILES32",
      "PROGRAMFILES64",
      "PROGRAMFILES",
      "QUICKLAUNCH",
      "RECENT",
      "RESOURCES_LOCALIZED",
      "RESOURCES",
      "SENDTO",
      "SMPROGRAMS",
      "SMSTARTUP",
      "STARTMENU",
      "SYSDIR",
      "TEMP",
      "TEMPLATES",
      "VIDEOS",
      "WINDIR"
    ], r2 = [
      "ARCHIVE",
      "FILE_ATTRIBUTE_ARCHIVE",
      "FILE_ATTRIBUTE_NORMAL",
      "FILE_ATTRIBUTE_OFFLINE",
      "FILE_ATTRIBUTE_READONLY",
      "FILE_ATTRIBUTE_SYSTEM",
      "FILE_ATTRIBUTE_TEMPORARY",
      "HKCR",
      "HKCU",
      "HKDD",
      "HKEY_CLASSES_ROOT",
      "HKEY_CURRENT_CONFIG",
      "HKEY_CURRENT_USER",
      "HKEY_DYN_DATA",
      "HKEY_LOCAL_MACHINE",
      "HKEY_PERFORMANCE_DATA",
      "HKEY_USERS",
      "HKLM",
      "HKPD",
      "HKU",
      "IDABORT",
      "IDCANCEL",
      "IDIGNORE",
      "IDNO",
      "IDOK",
      "IDRETRY",
      "IDYES",
      "MB_ABORTRETRYIGNORE",
      "MB_DEFBUTTON1",
      "MB_DEFBUTTON2",
      "MB_DEFBUTTON3",
      "MB_DEFBUTTON4",
      "MB_ICONEXCLAMATION",
      "MB_ICONINFORMATION",
      "MB_ICONQUESTION",
      "MB_ICONSTOP",
      "MB_OK",
      "MB_OKCANCEL",
      "MB_RETRYCANCEL",
      "MB_RIGHT",
      "MB_RTLREADING",
      "MB_SETFOREGROUND",
      "MB_TOPMOST",
      "MB_USERICON",
      "MB_YESNO",
      "NORMAL",
      "OFFLINE",
      "READONLY",
      "SHCTX",
      "SHELL_CONTEXT",
      "SYSTEM|TEMPORARY"
    ], a2 = [
      "addincludedir",
      "addplugindir",
      "appendfile",
      "assert",
      "cd",
      "define",
      "delfile",
      "echo",
      "else",
      "endif",
      "error",
      "execute",
      "finalize",
      "getdllversion",
      "gettlbversion",
      "if",
      "ifdef",
      "ifmacrodef",
      "ifmacrondef",
      "ifndef",
      "include",
      "insertmacro",
      "macro",
      "macroend",
      "makensis",
      "packhdr",
      "searchparse",
      "searchreplace",
      "system",
      "tempfile",
      "undef",
      "uninstfinalize",
      "verbose",
      "warning"
    ], s2 = {
      className: "variable.constant",
      begin: n.concat(/\$/, n.either(...i2))
    }, o2 = {
      // ${defines}
      className: "variable",
      begin: /\$+\{[\!\w.:-]+\}/
    }, l2 = {
      // $variables
      className: "variable",
      begin: /\$+\w[\w\.]*/,
      illegal: /\(\)\{\}/
    }, u2 = {
      // $(language_strings)
      className: "variable",
      begin: /\$+\([\w^.:!-]+\)/
    }, _ = {
      // command parameters
      className: "params",
      begin: n.either(...r2)
    }, d2 = {
      // !compiler_flags
      className: "keyword",
      begin: n.concat(
        /!/,
        n.either(...a2)
      )
    }, f2 = {
      // $\n, $\r, $\t, $$
      className: "char.escape",
      begin: /\$(\\[nrt]|\$)/
    }, b = {
      // plug::ins
      className: "title.function",
      begin: /\w+::\w+/
    }, c2 = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"'
        },
        {
          begin: "'",
          end: "'"
        },
        {
          begin: "`",
          end: "`"
        }
      ],
      illegal: /\n/,
      contains: [
        f2,
        s2,
        o2,
        l2,
        u2
      ]
    }, E2 = [
      "Abort",
      "AddBrandingImage",
      "AddSize",
      "AllowRootDirInstall",
      "AllowSkipFiles",
      "AutoCloseWindow",
      "BGFont",
      "BGGradient",
      "BrandingText",
      "BringToFront",
      "Call",
      "CallInstDLL",
      "Caption",
      "ChangeUI",
      "CheckBitmap",
      "ClearErrors",
      "CompletedText",
      "ComponentText",
      "CopyFiles",
      "CRCCheck",
      "CreateDirectory",
      "CreateFont",
      "CreateShortCut",
      "Delete",
      "DeleteINISec",
      "DeleteINIStr",
      "DeleteRegKey",
      "DeleteRegValue",
      "DetailPrint",
      "DetailsButtonText",
      "DirText",
      "DirVar",
      "DirVerify",
      "EnableWindow",
      "EnumRegKey",
      "EnumRegValue",
      "Exch",
      "Exec",
      "ExecShell",
      "ExecShellWait",
      "ExecWait",
      "ExpandEnvStrings",
      "File",
      "FileBufSize",
      "FileClose",
      "FileErrorText",
      "FileOpen",
      "FileRead",
      "FileReadByte",
      "FileReadUTF16LE",
      "FileReadWord",
      "FileWriteUTF16LE",
      "FileSeek",
      "FileWrite",
      "FileWriteByte",
      "FileWriteWord",
      "FindClose",
      "FindFirst",
      "FindNext",
      "FindWindow",
      "FlushINI",
      "GetCurInstType",
      "GetCurrentAddress",
      "GetDlgItem",
      "GetDLLVersion",
      "GetDLLVersionLocal",
      "GetErrorLevel",
      "GetFileTime",
      "GetFileTimeLocal",
      "GetFullPathName",
      "GetFunctionAddress",
      "GetInstDirError",
      "GetKnownFolderPath",
      "GetLabelAddress",
      "GetTempFileName",
      "GetWinVer",
      "Goto",
      "HideWindow",
      "Icon",
      "IfAbort",
      "IfErrors",
      "IfFileExists",
      "IfRebootFlag",
      "IfRtlLanguage",
      "IfShellVarContextAll",
      "IfSilent",
      "InitPluginsDir",
      "InstallButtonText",
      "InstallColors",
      "InstallDir",
      "InstallDirRegKey",
      "InstProgressFlags",
      "InstType",
      "InstTypeGetText",
      "InstTypeSetText",
      "Int64Cmp",
      "Int64CmpU",
      "Int64Fmt",
      "IntCmp",
      "IntCmpU",
      "IntFmt",
      "IntOp",
      "IntPtrCmp",
      "IntPtrCmpU",
      "IntPtrOp",
      "IsWindow",
      "LangString",
      "LicenseBkColor",
      "LicenseData",
      "LicenseForceSelection",
      "LicenseLangString",
      "LicenseText",
      "LoadAndSetImage",
      "LoadLanguageFile",
      "LockWindow",
      "LogSet",
      "LogText",
      "ManifestDPIAware",
      "ManifestLongPathAware",
      "ManifestMaxVersionTested",
      "ManifestSupportedOS",
      "MessageBox",
      "MiscButtonText",
      "Name|0",
      "Nop",
      "OutFile",
      "Page",
      "PageCallbacks",
      "PEAddResource",
      "PEDllCharacteristics",
      "PERemoveResource",
      "PESubsysVer",
      "Pop",
      "Push",
      "Quit",
      "ReadEnvStr",
      "ReadINIStr",
      "ReadRegDWORD",
      "ReadRegStr",
      "Reboot",
      "RegDLL",
      "Rename",
      "RequestExecutionLevel",
      "ReserveFile",
      "Return",
      "RMDir",
      "SearchPath",
      "SectionGetFlags",
      "SectionGetInstTypes",
      "SectionGetSize",
      "SectionGetText",
      "SectionIn",
      "SectionSetFlags",
      "SectionSetInstTypes",
      "SectionSetSize",
      "SectionSetText",
      "SendMessage",
      "SetAutoClose",
      "SetBrandingImage",
      "SetCompress",
      "SetCompressor",
      "SetCompressorDictSize",
      "SetCtlColors",
      "SetCurInstType",
      "SetDatablockOptimize",
      "SetDateSave",
      "SetDetailsPrint",
      "SetDetailsView",
      "SetErrorLevel",
      "SetErrors",
      "SetFileAttributes",
      "SetFont",
      "SetOutPath",
      "SetOverwrite",
      "SetRebootFlag",
      "SetRegView",
      "SetShellVarContext",
      "SetSilent",
      "ShowInstDetails",
      "ShowUninstDetails",
      "ShowWindow",
      "SilentInstall",
      "SilentUnInstall",
      "Sleep",
      "SpaceTexts",
      "StrCmp",
      "StrCmpS",
      "StrCpy",
      "StrLen",
      "SubCaption",
      "Unicode",
      "UninstallButtonText",
      "UninstallCaption",
      "UninstallIcon",
      "UninstallSubCaption",
      "UninstallText",
      "UninstPage",
      "UnRegDLL",
      "Var",
      "VIAddVersionKey",
      "VIFileVersion",
      "VIProductVersion",
      "WindowIcon",
      "WriteINIStr",
      "WriteRegBin",
      "WriteRegDWORD",
      "WriteRegExpandStr",
      "WriteRegMultiStr",
      "WriteRegNone",
      "WriteRegStr",
      "WriteUninstaller",
      "XPStyle"
    ], g2 = [
      "admin",
      "all",
      "auto",
      "both",
      "bottom",
      "bzip2",
      "colored",
      "components",
      "current",
      "custom",
      "directory",
      "false",
      "force",
      "hide",
      "highest",
      "ifdiff",
      "ifnewer",
      "instfiles",
      "lastused",
      "leave",
      "left",
      "license",
      "listonly",
      "lzma",
      "nevershow",
      "none",
      "normal",
      "notset",
      "off",
      "on",
      "open",
      "print",
      "right",
      "show",
      "silent",
      "silentlog",
      "smooth",
      "textonly",
      "top",
      "true",
      "try",
      "un.components",
      "un.custom",
      "un.directory",
      "un.instfiles",
      "un.license",
      "uninstConfirm",
      "user",
      "Win10",
      "Win7",
      "Win8",
      "WinVista",
      "zlib"
    ], S = {
      match: [
        /Function/,
        /\s+/,
        n.concat(/(\.)?/, e2.IDENT_RE)
      ],
      scope: {
        1: "keyword",
        3: "title.function"
      }
    }, m2 = {
      match: [
        /Var/,
        /\s+/,
        /(?:\/GLOBAL\s+)?/,
        /[A-Za-z][\w.]*/
      ],
      scope: {
        1: "keyword",
        3: "params",
        4: "variable"
      }
    };
    return {
      name: "NSIS",
      case_insensitive: true,
      keywords: {
        keyword: E2,
        literal: g2
      },
      contains: [
        e2.HASH_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        e2.COMMENT(
          ";",
          "$",
          { relevance: 0 }
        ),
        m2,
        S,
        { beginKeywords: "Function PageEx Section SectionGroup FunctionEnd SectionEnd" },
        c2,
        d2,
        o2,
        l2,
        u2,
        _,
        b,
        e2.NUMBER_MODE
      ]
    };
  }
  return Po = t2, Po;
}
var Fo, Vd;
function MC() {
  if (Vd)
    return Fo;
  Vd = 1;
  function t2(e2) {
    const n = {
      className: "built_in",
      begin: "\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+"
    }, i2 = /[a-zA-Z@][a-zA-Z0-9_]*/, l2 = {
      "variable.language": [
        "this",
        "super"
      ],
      $pattern: i2,
      keyword: [
        "while",
        "export",
        "sizeof",
        "typedef",
        "const",
        "struct",
        "for",
        "union",
        "volatile",
        "static",
        "mutable",
        "if",
        "do",
        "return",
        "goto",
        "enum",
        "else",
        "break",
        "extern",
        "asm",
        "case",
        "default",
        "register",
        "explicit",
        "typename",
        "switch",
        "continue",
        "inline",
        "readonly",
        "assign",
        "readwrite",
        "self",
        "@synchronized",
        "id",
        "typeof",
        "nonatomic",
        "IBOutlet",
        "IBAction",
        "strong",
        "weak",
        "copy",
        "in",
        "out",
        "inout",
        "bycopy",
        "byref",
        "oneway",
        "__strong",
        "__weak",
        "__block",
        "__autoreleasing",
        "@private",
        "@protected",
        "@public",
        "@try",
        "@property",
        "@end",
        "@throw",
        "@catch",
        "@finally",
        "@autoreleasepool",
        "@synthesize",
        "@dynamic",
        "@selector",
        "@optional",
        "@required",
        "@encode",
        "@package",
        "@import",
        "@defs",
        "@compatibility_alias",
        "__bridge",
        "__bridge_transfer",
        "__bridge_retained",
        "__bridge_retain",
        "__covariant",
        "__contravariant",
        "__kindof",
        "_Nonnull",
        "_Nullable",
        "_Null_unspecified",
        "__FUNCTION__",
        "__PRETTY_FUNCTION__",
        "__attribute__",
        "getter",
        "setter",
        "retain",
        "unsafe_unretained",
        "nonnull",
        "nullable",
        "null_unspecified",
        "null_resettable",
        "class",
        "instancetype",
        "NS_DESIGNATED_INITIALIZER",
        "NS_UNAVAILABLE",
        "NS_REQUIRES_SUPER",
        "NS_RETURNS_INNER_POINTER",
        "NS_INLINE",
        "NS_AVAILABLE",
        "NS_DEPRECATED",
        "NS_ENUM",
        "NS_OPTIONS",
        "NS_SWIFT_UNAVAILABLE",
        "NS_ASSUME_NONNULL_BEGIN",
        "NS_ASSUME_NONNULL_END",
        "NS_REFINED_FOR_SWIFT",
        "NS_SWIFT_NAME",
        "NS_SWIFT_NOTHROW",
        "NS_DURING",
        "NS_HANDLER",
        "NS_ENDHANDLER",
        "NS_VALUERETURN",
        "NS_VOIDRETURN"
      ],
      literal: [
        "false",
        "true",
        "FALSE",
        "TRUE",
        "nil",
        "YES",
        "NO",
        "NULL"
      ],
      built_in: [
        "dispatch_once_t",
        "dispatch_queue_t",
        "dispatch_sync",
        "dispatch_async",
        "dispatch_once"
      ],
      type: [
        "int",
        "float",
        "char",
        "unsigned",
        "signed",
        "short",
        "long",
        "double",
        "wchar_t",
        "unichar",
        "void",
        "bool",
        "BOOL",
        "id|0",
        "_Bool"
      ]
    }, u2 = {
      $pattern: i2,
      keyword: [
        "@interface",
        "@class",
        "@protocol",
        "@implementation"
      ]
    };
    return {
      name: "Objective-C",
      aliases: [
        "mm",
        "objc",
        "obj-c",
        "obj-c++",
        "objective-c++"
      ],
      keywords: l2,
      illegal: "</",
      contains: [
        n,
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        e2.C_NUMBER_MODE,
        e2.QUOTE_STRING_MODE,
        e2.APOS_STRING_MODE,
        {
          className: "string",
          variants: [
            {
              begin: '@"',
              end: '"',
              illegal: "\\n",
              contains: [e2.BACKSLASH_ESCAPE]
            }
          ]
        },
        {
          className: "meta",
          begin: /#\s*[a-z]+\b/,
          end: /$/,
          keywords: { keyword: "if else elif endif define undef warning error line pragma ifdef ifndef include" },
          contains: [
            {
              begin: /\\\n/,
              relevance: 0
            },
            e2.inherit(e2.QUOTE_STRING_MODE, { className: "string" }),
            {
              className: "string",
              begin: /<.*?>/,
              end: /$/,
              illegal: "\\n"
            },
            e2.C_LINE_COMMENT_MODE,
            e2.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          className: "class",
          begin: "(" + u2.keyword.join("|") + ")\\b",
          end: /(\{|$)/,
          excludeEnd: true,
          keywords: u2,
          contains: [e2.UNDERSCORE_TITLE_MODE]
        },
        {
          begin: "\\." + e2.UNDERSCORE_IDENT_RE,
          relevance: 0
        }
      ]
    };
  }
  return Fo = t2, Fo;
}
var Uo, Hd;
function wC() {
  if (Hd)
    return Uo;
  Hd = 1;
  function t2(e2) {
    return {
      name: "OCaml",
      aliases: ["ml"],
      keywords: {
        $pattern: "[a-z_]\\w*!?",
        keyword: "and as assert asr begin class constraint do done downto else end exception external for fun function functor if in include inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method mod module mutable new object of open! open or private rec sig struct then to try type val! val virtual when while with parser value",
        built_in: (
          /* built-in types */
          "array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit in_channel out_channel ref"
        ),
        literal: "true false"
      },
      illegal: /\/\/|>>/,
      contains: [
        {
          className: "literal",
          begin: "\\[(\\|\\|)?\\]|\\(\\)",
          relevance: 0
        },
        e2.COMMENT(
          "\\(\\*",
          "\\*\\)",
          { contains: ["self"] }
        ),
        {
          /* type variable */
          className: "symbol",
          begin: "'[A-Za-z_](?!')[\\w']*"
          /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
        },
        {
          /* polymorphic variant */
          className: "type",
          begin: "`[A-Z][\\w']*"
        },
        {
          /* module or constructor */
          className: "type",
          begin: "\\b[A-Z][\\w']*",
          relevance: 0
        },
        {
          /* don't color identifiers, but safely catch all identifiers with ' */
          begin: "[a-z_]\\w*'[\\w']*",
          relevance: 0
        },
        e2.inherit(e2.APOS_STRING_MODE, {
          className: "string",
          relevance: 0
        }),
        e2.inherit(e2.QUOTE_STRING_MODE, { illegal: null }),
        {
          className: "number",
          begin: "\\b(0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)",
          relevance: 0
        },
        {
          begin: /->/
          // relevance booster
        }
      ]
    };
  }
  return Uo = t2, Uo;
}
var Bo, zd;
function kC() {
  if (zd)
    return Bo;
  zd = 1;
  function t2(e2) {
    const n = {
      className: "keyword",
      begin: "\\$(f[asn]|t|vp[rtd]|children)"
    }, i2 = {
      className: "literal",
      begin: "false|true|PI|undef"
    }, r2 = {
      className: "number",
      begin: "\\b\\d+(\\.\\d+)?(e-?\\d+)?",
      // adds 1e5, 1e-10
      relevance: 0
    }, a2 = e2.inherit(e2.QUOTE_STRING_MODE, { illegal: null }), s2 = {
      className: "meta",
      keywords: { keyword: "include use" },
      begin: "include|use <",
      end: ">"
    }, o2 = {
      className: "params",
      begin: "\\(",
      end: "\\)",
      contains: [
        "self",
        r2,
        a2,
        n,
        i2
      ]
    }, l2 = {
      begin: "[*!#%]",
      relevance: 0
    }, u2 = {
      className: "function",
      beginKeywords: "module function",
      end: /=|\{/,
      contains: [
        o2,
        e2.UNDERSCORE_TITLE_MODE
      ]
    };
    return {
      name: "OpenSCAD",
      aliases: ["scad"],
      keywords: {
        keyword: "function module include use for intersection_for if else \\%",
        literal: "false true PI undef",
        built_in: "circle square polygon text sphere cube cylinder polyhedron translate rotate scale resize mirror multmatrix color offset hull minkowski union difference intersection abs sign sin cos tan acos asin atan atan2 floor round ceil ln log pow sqrt exp rands min max concat lookup str chr search version version_num norm cross parent_module echo import import_dxf dxf_linear_extrude linear_extrude rotate_extrude surface projection render children dxf_cross dxf_dim let assign"
      },
      contains: [
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        r2,
        s2,
        a2,
        n,
        l2,
        u2
      ]
    };
  }
  return Bo = t2, Bo;
}
var Go, $d;
function PC() {
  if ($d)
    return Go;
  $d = 1;
  function t2(e2) {
    const n = {
      $pattern: /\.?\w+/,
      keyword: "abstract add and array as asc aspect assembly async begin break block by case class concat const copy constructor continue create default delegate desc distinct div do downto dynamic each else empty end ensure enum equals event except exit extension external false final finalize finalizer finally flags for forward from function future global group has if implementation implements implies in index inherited inline interface into invariants is iterator join locked locking loop matching method mod module namespace nested new nil not notify nullable of old on operator or order out override parallel params partial pinned private procedure property protected public queryable raise read readonly record reintroduce remove repeat require result reverse sealed select self sequence set shl shr skip static step soft take then to true try tuple type union unit unsafe until uses using var virtual raises volatile where while with write xor yield await mapped deprecated stdcall cdecl pascal register safecall overload library platform reference packed strict published autoreleasepool selector strong weak unretained"
    }, i2 = e2.COMMENT(
      /\{/,
      /\}/,
      { relevance: 0 }
    ), r2 = e2.COMMENT(
      "\\(\\*",
      "\\*\\)",
      { relevance: 10 }
    ), a2 = {
      className: "string",
      begin: "'",
      end: "'",
      contains: [{ begin: "''" }]
    }, s2 = {
      className: "string",
      begin: "(#\\d+)+"
    }, o2 = {
      beginKeywords: "function constructor destructor procedure method",
      end: "[:;]",
      keywords: "function constructor|10 destructor|10 procedure|10 method|10",
      contains: [
        e2.inherit(e2.TITLE_MODE, { scope: "title.function" }),
        {
          className: "params",
          begin: "\\(",
          end: "\\)",
          keywords: n,
          contains: [
            a2,
            s2
          ]
        },
        i2,
        r2
      ]
    }, l2 = {
      scope: "punctuation",
      match: /;/,
      relevance: 0
    };
    return {
      name: "Oxygene",
      case_insensitive: true,
      keywords: n,
      illegal: '("|\\$[G-Zg-z]|\\/\\*|</|=>|->)',
      contains: [
        i2,
        r2,
        e2.C_LINE_COMMENT_MODE,
        a2,
        s2,
        e2.NUMBER_MODE,
        o2,
        l2
      ]
    };
  }
  return Go = t2, Go;
}
var Yo, Wd;
function FC() {
  if (Wd)
    return Yo;
  Wd = 1;
  function t2(e2) {
    const n = e2.COMMENT(
      /\{/,
      /\}/,
      { contains: ["self"] }
    );
    return {
      name: "Parser3",
      subLanguage: "xml",
      relevance: 0,
      contains: [
        e2.COMMENT("^#", "$"),
        e2.COMMENT(
          /\^rem\{/,
          /\}/,
          {
            relevance: 10,
            contains: [n]
          }
        ),
        {
          className: "meta",
          begin: "^@(?:BASE|USE|CLASS|OPTIONS)$",
          relevance: 10
        },
        {
          className: "title",
          begin: "@[\\w\\-]+\\[[\\w^;\\-]*\\](?:\\[[\\w^;\\-]*\\])?(?:.*)$"
        },
        {
          className: "variable",
          begin: /\$\{?[\w\-.:]+\}?/
        },
        {
          className: "keyword",
          begin: /\^[\w\-.:]+/
        },
        {
          className: "number",
          begin: "\\^#[0-9a-fA-F]+"
        },
        e2.C_NUMBER_MODE
      ]
    };
  }
  return Yo = t2, Yo;
}
var qo, Kd;
function UC() {
  if (Kd)
    return qo;
  Kd = 1;
  function t2(e2) {
    const n = {
      className: "variable",
      begin: /\$[\w\d#@][\w\d_]*/,
      relevance: 0
    }, i2 = {
      className: "variable",
      begin: /<(?!\/)/,
      end: />/
    };
    return {
      name: "Packet Filter config",
      aliases: ["pf.conf"],
      keywords: {
        $pattern: /[a-z0-9_<>-]+/,
        built_in: (
          /* block match pass are "actions" in pf.conf(5), the rest are
           * lexically similar top-level commands.
           */
          "block match pass load anchor|5 antispoof|10 set table"
        ),
        keyword: "in out log quick on rdomain inet inet6 proto from port os to route allow-opts divert-packet divert-reply divert-to flags group icmp-type icmp6-type label once probability recieved-on rtable prio queue tos tag tagged user keep fragment for os drop af-to|10 binat-to|10 nat-to|10 rdr-to|10 bitmask least-stats random round-robin source-hash static-port dup-to reply-to route-to parent bandwidth default min max qlimit block-policy debug fingerprints hostid limit loginterface optimization reassemble ruleset-optimization basic none profile skip state-defaults state-policy timeout const counters persist no modulate synproxy state|5 floating if-bound no-sync pflow|10 sloppy source-track global rule max-src-nodes max-src-states max-src-conn max-src-conn-rate overload flush scrub|5 max-mss min-ttl no-df|10 random-id",
        literal: "all any no-route self urpf-failed egress|5 unknown"
      },
      contains: [
        e2.HASH_COMMENT_MODE,
        e2.NUMBER_MODE,
        e2.QUOTE_STRING_MODE,
        n,
        i2
      ]
    };
  }
  return qo = t2, qo;
}
var Vo, Qd;
function BC() {
  if (Qd)
    return Vo;
  Qd = 1;
  function t2(e2) {
    const n = e2.COMMENT("--", "$"), i2 = "[a-zA-Z_][a-zA-Z_0-9$]*", r2 = "\\$([a-zA-Z_]?|[a-zA-Z_][a-zA-Z_0-9]*)\\$", a2 = "<<\\s*" + i2 + "\\s*>>", s2 = (
      // https://www.postgresql.org/docs/11/static/sql-keywords-appendix.html
      // https://www.postgresql.org/docs/11/static/sql-commands.html
      // SQL commands (starting words)
      "ABORT ALTER ANALYZE BEGIN CALL CHECKPOINT|10 CLOSE CLUSTER COMMENT COMMIT COPY CREATE DEALLOCATE DECLARE DELETE DISCARD DO DROP END EXECUTE EXPLAIN FETCH GRANT IMPORT INSERT LISTEN LOAD LOCK MOVE NOTIFY PREPARE REASSIGN|10 REFRESH REINDEX RELEASE RESET REVOKE ROLLBACK SAVEPOINT SECURITY SELECT SET SHOW START TRUNCATE UNLISTEN|10 UPDATE VACUUM|10 VALUES AGGREGATE COLLATION CONVERSION|10 DATABASE DEFAULT PRIVILEGES DOMAIN TRIGGER EXTENSION FOREIGN WRAPPER|10 TABLE FUNCTION GROUP LANGUAGE LARGE OBJECT MATERIALIZED VIEW OPERATOR CLASS FAMILY POLICY PUBLICATION|10 ROLE RULE SCHEMA SEQUENCE SERVER STATISTICS SUBSCRIPTION SYSTEM TABLESPACE CONFIGURATION DICTIONARY PARSER TEMPLATE TYPE USER MAPPING PREPARED ACCESS METHOD CAST AS TRANSFORM TRANSACTION OWNED TO INTO SESSION AUTHORIZATION INDEX PROCEDURE ASSERTION ALL ANALYSE AND ANY ARRAY ASC ASYMMETRIC|10 BOTH CASE CHECK COLLATE COLUMN CONCURRENTLY|10 CONSTRAINT CROSS DEFERRABLE RANGE DESC DISTINCT ELSE EXCEPT FOR FREEZE|10 FROM FULL HAVING ILIKE IN INITIALLY INNER INTERSECT IS ISNULL JOIN LATERAL LEADING LIKE LIMIT NATURAL NOT NOTNULL NULL OFFSET ON ONLY OR ORDER OUTER OVERLAPS PLACING PRIMARY REFERENCES RETURNING SIMILAR SOME SYMMETRIC TABLESAMPLE THEN TRAILING UNION UNIQUE USING VARIADIC|10 VERBOSE WHEN WHERE WINDOW WITH BY RETURNS INOUT OUT SETOF|10 IF STRICT CURRENT CONTINUE OWNER LOCATION OVER PARTITION WITHIN BETWEEN ESCAPE EXTERNAL INVOKER DEFINER WORK RENAME VERSION CONNECTION CONNECT TABLES TEMP TEMPORARY FUNCTIONS SEQUENCES TYPES SCHEMAS OPTION CASCADE RESTRICT ADD ADMIN EXISTS VALID VALIDATE ENABLE DISABLE REPLICA|10 ALWAYS PASSING COLUMNS PATH REF VALUE OVERRIDING IMMUTABLE STABLE VOLATILE BEFORE AFTER EACH ROW PROCEDURAL ROUTINE NO HANDLER VALIDATOR OPTIONS STORAGE OIDS|10 WITHOUT INHERIT DEPENDS CALLED INPUT LEAKPROOF|10 COST ROWS NOWAIT SEARCH UNTIL ENCRYPTED|10 PASSWORD CONFLICT|10 INSTEAD INHERITS CHARACTERISTICS WRITE CURSOR ALSO STATEMENT SHARE EXCLUSIVE INLINE ISOLATION REPEATABLE READ COMMITTED SERIALIZABLE UNCOMMITTED LOCAL GLOBAL SQL PROCEDURES RECURSIVE SNAPSHOT ROLLUP CUBE TRUSTED|10 INCLUDE FOLLOWING PRECEDING UNBOUNDED RANGE GROUPS UNENCRYPTED|10 SYSID FORMAT DELIMITER HEADER QUOTE ENCODING FILTER OFF FORCE_QUOTE FORCE_NOT_NULL FORCE_NULL COSTS BUFFERS TIMING SUMMARY DISABLE_PAGE_SKIPPING RESTART CYCLE GENERATED IDENTITY DEFERRED IMMEDIATE LEVEL LOGGED UNLOGGED OF NOTHING NONE EXCLUDE ATTRIBUTE USAGE ROUTINES TRUE FALSE NAN INFINITY "
    ), o2 = (
      // only those not in keywrods already
      "SUPERUSER NOSUPERUSER CREATEDB NOCREATEDB CREATEROLE NOCREATEROLE INHERIT NOINHERIT LOGIN NOLOGIN REPLICATION NOREPLICATION BYPASSRLS NOBYPASSRLS "
    ), l2 = "ALIAS BEGIN CONSTANT DECLARE END EXCEPTION RETURN PERFORM|10 RAISE GET DIAGNOSTICS STACKED|10 FOREACH LOOP ELSIF EXIT WHILE REVERSE SLICE DEBUG LOG INFO NOTICE WARNING ASSERT OPEN ", u2 = (
      // https://www.postgresql.org/docs/11/static/datatype.html
      "BIGINT INT8 BIGSERIAL SERIAL8 BIT VARYING VARBIT BOOLEAN BOOL BOX BYTEA CHARACTER CHAR VARCHAR CIDR CIRCLE DATE DOUBLE PRECISION FLOAT8 FLOAT INET INTEGER INT INT4 INTERVAL JSON JSONB LINE LSEG|10 MACADDR MACADDR8 MONEY NUMERIC DEC DECIMAL PATH POINT POLYGON REAL FLOAT4 SMALLINT INT2 SMALLSERIAL|10 SERIAL2|10 SERIAL|10 SERIAL4|10 TEXT TIME ZONE TIMETZ|10 TIMESTAMP TIMESTAMPTZ|10 TSQUERY|10 TSVECTOR|10 TXID_SNAPSHOT|10 UUID XML NATIONAL NCHAR INT4RANGE|10 INT8RANGE|10 NUMRANGE|10 TSRANGE|10 TSTZRANGE|10 DATERANGE|10 ANYELEMENT ANYARRAY ANYNONARRAY ANYENUM ANYRANGE CSTRING INTERNAL RECORD PG_DDL_COMMAND VOID UNKNOWN OPAQUE REFCURSOR NAME OID REGPROC|10 REGPROCEDURE|10 REGOPER|10 REGOPERATOR|10 REGCLASS|10 REGTYPE|10 REGROLE|10 REGNAMESPACE|10 REGCONFIG|10 REGDICTIONARY|10 "
    ), _ = u2.trim().split(" ").map(function(g2) {
      return g2.split("|")[0];
    }).join("|"), d2 = "CURRENT_TIME CURRENT_TIMESTAMP CURRENT_USER CURRENT_CATALOG|10 CURRENT_DATE LOCALTIME LOCALTIMESTAMP CURRENT_ROLE|10 CURRENT_SCHEMA|10 SESSION_USER PUBLIC ", f2 = "FOUND NEW OLD TG_NAME|10 TG_WHEN|10 TG_LEVEL|10 TG_OP|10 TG_RELID|10 TG_RELNAME|10 TG_TABLE_NAME|10 TG_TABLE_SCHEMA|10 TG_NARGS|10 TG_ARGV|10 TG_EVENT|10 TG_TAG|10 ROW_COUNT RESULT_OID|10 PG_CONTEXT|10 RETURNED_SQLSTATE COLUMN_NAME CONSTRAINT_NAME PG_DATATYPE_NAME|10 MESSAGE_TEXT TABLE_NAME SCHEMA_NAME PG_EXCEPTION_DETAIL|10 PG_EXCEPTION_HINT|10 PG_EXCEPTION_CONTEXT|10 ", b = (
      // exceptions https://www.postgresql.org/docs/current/static/errcodes-appendix.html
      "SQLSTATE SQLERRM|10 SUCCESSFUL_COMPLETION WARNING DYNAMIC_RESULT_SETS_RETURNED IMPLICIT_ZERO_BIT_PADDING NULL_VALUE_ELIMINATED_IN_SET_FUNCTION PRIVILEGE_NOT_GRANTED PRIVILEGE_NOT_REVOKED STRING_DATA_RIGHT_TRUNCATION DEPRECATED_FEATURE NO_DATA NO_ADDITIONAL_DYNAMIC_RESULT_SETS_RETURNED SQL_STATEMENT_NOT_YET_COMPLETE CONNECTION_EXCEPTION CONNECTION_DOES_NOT_EXIST CONNECTION_FAILURE SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION TRANSACTION_RESOLUTION_UNKNOWN PROTOCOL_VIOLATION TRIGGERED_ACTION_EXCEPTION FEATURE_NOT_SUPPORTED INVALID_TRANSACTION_INITIATION LOCATOR_EXCEPTION INVALID_LOCATOR_SPECIFICATION INVALID_GRANTOR INVALID_GRANT_OPERATION INVALID_ROLE_SPECIFICATION DIAGNOSTICS_EXCEPTION STACKED_DIAGNOSTICS_ACCESSED_WITHOUT_ACTIVE_HANDLER CASE_NOT_FOUND CARDINALITY_VIOLATION DATA_EXCEPTION ARRAY_SUBSCRIPT_ERROR CHARACTER_NOT_IN_REPERTOIRE DATETIME_FIELD_OVERFLOW DIVISION_BY_ZERO ERROR_IN_ASSIGNMENT ESCAPE_CHARACTER_CONFLICT INDICATOR_OVERFLOW INTERVAL_FIELD_OVERFLOW INVALID_ARGUMENT_FOR_LOGARITHM INVALID_ARGUMENT_FOR_NTILE_FUNCTION INVALID_ARGUMENT_FOR_NTH_VALUE_FUNCTION INVALID_ARGUMENT_FOR_POWER_FUNCTION INVALID_ARGUMENT_FOR_WIDTH_BUCKET_FUNCTION INVALID_CHARACTER_VALUE_FOR_CAST INVALID_DATETIME_FORMAT INVALID_ESCAPE_CHARACTER INVALID_ESCAPE_OCTET INVALID_ESCAPE_SEQUENCE NONSTANDARD_USE_OF_ESCAPE_CHARACTER INVALID_INDICATOR_PARAMETER_VALUE INVALID_PARAMETER_VALUE INVALID_REGULAR_EXPRESSION INVALID_ROW_COUNT_IN_LIMIT_CLAUSE INVALID_ROW_COUNT_IN_RESULT_OFFSET_CLAUSE INVALID_TABLESAMPLE_ARGUMENT INVALID_TABLESAMPLE_REPEAT INVALID_TIME_ZONE_DISPLACEMENT_VALUE INVALID_USE_OF_ESCAPE_CHARACTER MOST_SPECIFIC_TYPE_MISMATCH NULL_VALUE_NOT_ALLOWED NULL_VALUE_NO_INDICATOR_PARAMETER NUMERIC_VALUE_OUT_OF_RANGE SEQUENCE_GENERATOR_LIMIT_EXCEEDED STRING_DATA_LENGTH_MISMATCH STRING_DATA_RIGHT_TRUNCATION SUBSTRING_ERROR TRIM_ERROR UNTERMINATED_C_STRING ZERO_LENGTH_CHARACTER_STRING FLOATING_POINT_EXCEPTION INVALID_TEXT_REPRESENTATION INVALID_BINARY_REPRESENTATION BAD_COPY_FILE_FORMAT UNTRANSLATABLE_CHARACTER NOT_AN_XML_DOCUMENT INVALID_XML_DOCUMENT INVALID_XML_CONTENT INVALID_XML_COMMENT INVALID_XML_PROCESSING_INSTRUCTION INTEGRITY_CONSTRAINT_VIOLATION RESTRICT_VIOLATION NOT_NULL_VIOLATION FOREIGN_KEY_VIOLATION UNIQUE_VIOLATION CHECK_VIOLATION EXCLUSION_VIOLATION INVALID_CURSOR_STATE INVALID_TRANSACTION_STATE ACTIVE_SQL_TRANSACTION BRANCH_TRANSACTION_ALREADY_ACTIVE HELD_CURSOR_REQUIRES_SAME_ISOLATION_LEVEL INAPPROPRIATE_ACCESS_MODE_FOR_BRANCH_TRANSACTION INAPPROPRIATE_ISOLATION_LEVEL_FOR_BRANCH_TRANSACTION NO_ACTIVE_SQL_TRANSACTION_FOR_BRANCH_TRANSACTION READ_ONLY_SQL_TRANSACTION SCHEMA_AND_DATA_STATEMENT_MIXING_NOT_SUPPORTED NO_ACTIVE_SQL_TRANSACTION IN_FAILED_SQL_TRANSACTION IDLE_IN_TRANSACTION_SESSION_TIMEOUT INVALID_SQL_STATEMENT_NAME TRIGGERED_DATA_CHANGE_VIOLATION INVALID_AUTHORIZATION_SPECIFICATION INVALID_PASSWORD DEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST DEPENDENT_OBJECTS_STILL_EXIST INVALID_TRANSACTION_TERMINATION SQL_ROUTINE_EXCEPTION FUNCTION_EXECUTED_NO_RETURN_STATEMENT MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED INVALID_CURSOR_NAME EXTERNAL_ROUTINE_EXCEPTION CONTAINING_SQL_NOT_PERMITTED MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED EXTERNAL_ROUTINE_INVOCATION_EXCEPTION INVALID_SQLSTATE_RETURNED NULL_VALUE_NOT_ALLOWED TRIGGER_PROTOCOL_VIOLATED SRF_PROTOCOL_VIOLATED EVENT_TRIGGER_PROTOCOL_VIOLATED SAVEPOINT_EXCEPTION INVALID_SAVEPOINT_SPECIFICATION INVALID_CATALOG_NAME INVALID_SCHEMA_NAME TRANSACTION_ROLLBACK TRANSACTION_INTEGRITY_CONSTRAINT_VIOLATION SERIALIZATION_FAILURE STATEMENT_COMPLETION_UNKNOWN DEADLOCK_DETECTED SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION SYNTAX_ERROR INSUFFICIENT_PRIVILEGE CANNOT_COERCE GROUPING_ERROR WINDOWING_ERROR INVALID_RECURSION INVALID_FOREIGN_KEY INVALID_NAME NAME_TOO_LONG RESERVED_NAME DATATYPE_MISMATCH INDETERMINATE_DATATYPE COLLATION_MISMATCH INDETERMINATE_COLLATION WRONG_OBJECT_TYPE GENERATED_ALWAYS UNDEFINED_COLUMN UNDEFINED_FUNCTION UNDEFINED_TABLE UNDEFINED_PARAMETER UNDEFINED_OBJECT DUPLICATE_COLUMN DUPLICATE_CURSOR DUPLICATE_DATABASE DUPLICATE_FUNCTION DUPLICATE_PREPARED_STATEMENT DUPLICATE_SCHEMA DUPLICATE_TABLE DUPLICATE_ALIAS DUPLICATE_OBJECT AMBIGUOUS_COLUMN AMBIGUOUS_FUNCTION AMBIGUOUS_PARAMETER AMBIGUOUS_ALIAS INVALID_COLUMN_REFERENCE INVALID_COLUMN_DEFINITION INVALID_CURSOR_DEFINITION INVALID_DATABASE_DEFINITION INVALID_FUNCTION_DEFINITION INVALID_PREPARED_STATEMENT_DEFINITION INVALID_SCHEMA_DEFINITION INVALID_TABLE_DEFINITION INVALID_OBJECT_DEFINITION WITH_CHECK_OPTION_VIOLATION INSUFFICIENT_RESOURCES DISK_FULL OUT_OF_MEMORY TOO_MANY_CONNECTIONS CONFIGURATION_LIMIT_EXCEEDED PROGRAM_LIMIT_EXCEEDED STATEMENT_TOO_COMPLEX TOO_MANY_COLUMNS TOO_MANY_ARGUMENTS OBJECT_NOT_IN_PREREQUISITE_STATE OBJECT_IN_USE CANT_CHANGE_RUNTIME_PARAM LOCK_NOT_AVAILABLE OPERATOR_INTERVENTION QUERY_CANCELED ADMIN_SHUTDOWN CRASH_SHUTDOWN CANNOT_CONNECT_NOW DATABASE_DROPPED SYSTEM_ERROR IO_ERROR UNDEFINED_FILE DUPLICATE_FILE SNAPSHOT_TOO_OLD CONFIG_FILE_ERROR LOCK_FILE_EXISTS FDW_ERROR FDW_COLUMN_NAME_NOT_FOUND FDW_DYNAMIC_PARAMETER_VALUE_NEEDED FDW_FUNCTION_SEQUENCE_ERROR FDW_INCONSISTENT_DESCRIPTOR_INFORMATION FDW_INVALID_ATTRIBUTE_VALUE FDW_INVALID_COLUMN_NAME FDW_INVALID_COLUMN_NUMBER FDW_INVALID_DATA_TYPE FDW_INVALID_DATA_TYPE_DESCRIPTORS FDW_INVALID_DESCRIPTOR_FIELD_IDENTIFIER FDW_INVALID_HANDLE FDW_INVALID_OPTION_INDEX FDW_INVALID_OPTION_NAME FDW_INVALID_STRING_LENGTH_OR_BUFFER_LENGTH FDW_INVALID_STRING_FORMAT FDW_INVALID_USE_OF_NULL_POINTER FDW_TOO_MANY_HANDLES FDW_OUT_OF_MEMORY FDW_NO_SCHEMAS FDW_OPTION_NAME_NOT_FOUND FDW_REPLY_HANDLE FDW_SCHEMA_NOT_FOUND FDW_TABLE_NOT_FOUND FDW_UNABLE_TO_CREATE_EXECUTION FDW_UNABLE_TO_CREATE_REPLY FDW_UNABLE_TO_ESTABLISH_CONNECTION PLPGSQL_ERROR RAISE_EXCEPTION NO_DATA_FOUND TOO_MANY_ROWS ASSERT_FAILURE INTERNAL_ERROR DATA_CORRUPTED INDEX_CORRUPTED "
    ), E2 = (
      /* https://www.postgresql.org/docs/11/static/functions-aggregate.html */
      "ARRAY_AGG AVG BIT_AND BIT_OR BOOL_AND BOOL_OR COUNT EVERY JSON_AGG JSONB_AGG JSON_OBJECT_AGG JSONB_OBJECT_AGG MAX MIN MODE STRING_AGG SUM XMLAGG CORR COVAR_POP COVAR_SAMP REGR_AVGX REGR_AVGY REGR_COUNT REGR_INTERCEPT REGR_R2 REGR_SLOPE REGR_SXX REGR_SXY REGR_SYY STDDEV STDDEV_POP STDDEV_SAMP VARIANCE VAR_POP VAR_SAMP PERCENTILE_CONT PERCENTILE_DISC ROW_NUMBER RANK DENSE_RANK PERCENT_RANK CUME_DIST NTILE LAG LEAD FIRST_VALUE LAST_VALUE NTH_VALUE NUM_NONNULLS NUM_NULLS ABS CBRT CEIL CEILING DEGREES DIV EXP FLOOR LN LOG MOD PI POWER RADIANS ROUND SCALE SIGN SQRT TRUNC WIDTH_BUCKET RANDOM SETSEED ACOS ACOSD ASIN ASIND ATAN ATAND ATAN2 ATAN2D COS COSD COT COTD SIN SIND TAN TAND BIT_LENGTH CHAR_LENGTH CHARACTER_LENGTH LOWER OCTET_LENGTH OVERLAY POSITION SUBSTRING TREAT TRIM UPPER ASCII BTRIM CHR CONCAT CONCAT_WS CONVERT CONVERT_FROM CONVERT_TO DECODE ENCODE INITCAP LEFT LENGTH LPAD LTRIM MD5 PARSE_IDENT PG_CLIENT_ENCODING QUOTE_IDENT|10 QUOTE_LITERAL|10 QUOTE_NULLABLE|10 REGEXP_MATCH REGEXP_MATCHES REGEXP_REPLACE REGEXP_SPLIT_TO_ARRAY REGEXP_SPLIT_TO_TABLE REPEAT REPLACE REVERSE RIGHT RPAD RTRIM SPLIT_PART STRPOS SUBSTR TO_ASCII TO_HEX TRANSLATE OCTET_LENGTH GET_BIT GET_BYTE SET_BIT SET_BYTE TO_CHAR TO_DATE TO_NUMBER TO_TIMESTAMP AGE CLOCK_TIMESTAMP|10 DATE_PART DATE_TRUNC ISFINITE JUSTIFY_DAYS JUSTIFY_HOURS JUSTIFY_INTERVAL MAKE_DATE MAKE_INTERVAL|10 MAKE_TIME MAKE_TIMESTAMP|10 MAKE_TIMESTAMPTZ|10 NOW STATEMENT_TIMESTAMP|10 TIMEOFDAY TRANSACTION_TIMESTAMP|10 ENUM_FIRST ENUM_LAST ENUM_RANGE AREA CENTER DIAMETER HEIGHT ISCLOSED ISOPEN NPOINTS PCLOSE POPEN RADIUS WIDTH BOX BOUND_BOX CIRCLE LINE LSEG PATH POLYGON ABBREV BROADCAST HOST HOSTMASK MASKLEN NETMASK NETWORK SET_MASKLEN TEXT INET_SAME_FAMILY INET_MERGE MACADDR8_SET7BIT ARRAY_TO_TSVECTOR GET_CURRENT_TS_CONFIG NUMNODE PLAINTO_TSQUERY PHRASETO_TSQUERY WEBSEARCH_TO_TSQUERY QUERYTREE SETWEIGHT STRIP TO_TSQUERY TO_TSVECTOR JSON_TO_TSVECTOR JSONB_TO_TSVECTOR TS_DELETE TS_FILTER TS_HEADLINE TS_RANK TS_RANK_CD TS_REWRITE TSQUERY_PHRASE TSVECTOR_TO_ARRAY TSVECTOR_UPDATE_TRIGGER TSVECTOR_UPDATE_TRIGGER_COLUMN XMLCOMMENT XMLCONCAT XMLELEMENT XMLFOREST XMLPI XMLROOT XMLEXISTS XML_IS_WELL_FORMED XML_IS_WELL_FORMED_DOCUMENT XML_IS_WELL_FORMED_CONTENT XPATH XPATH_EXISTS XMLTABLE XMLNAMESPACES TABLE_TO_XML TABLE_TO_XMLSCHEMA TABLE_TO_XML_AND_XMLSCHEMA QUERY_TO_XML QUERY_TO_XMLSCHEMA QUERY_TO_XML_AND_XMLSCHEMA CURSOR_TO_XML CURSOR_TO_XMLSCHEMA SCHEMA_TO_XML SCHEMA_TO_XMLSCHEMA SCHEMA_TO_XML_AND_XMLSCHEMA DATABASE_TO_XML DATABASE_TO_XMLSCHEMA DATABASE_TO_XML_AND_XMLSCHEMA XMLATTRIBUTES TO_JSON TO_JSONB ARRAY_TO_JSON ROW_TO_JSON JSON_BUILD_ARRAY JSONB_BUILD_ARRAY JSON_BUILD_OBJECT JSONB_BUILD_OBJECT JSON_OBJECT JSONB_OBJECT JSON_ARRAY_LENGTH JSONB_ARRAY_LENGTH JSON_EACH JSONB_EACH JSON_EACH_TEXT JSONB_EACH_TEXT JSON_EXTRACT_PATH JSONB_EXTRACT_PATH JSON_OBJECT_KEYS JSONB_OBJECT_KEYS JSON_POPULATE_RECORD JSONB_POPULATE_RECORD JSON_POPULATE_RECORDSET JSONB_POPULATE_RECORDSET JSON_ARRAY_ELEMENTS JSONB_ARRAY_ELEMENTS JSON_ARRAY_ELEMENTS_TEXT JSONB_ARRAY_ELEMENTS_TEXT JSON_TYPEOF JSONB_TYPEOF JSON_TO_RECORD JSONB_TO_RECORD JSON_TO_RECORDSET JSONB_TO_RECORDSET JSON_STRIP_NULLS JSONB_STRIP_NULLS JSONB_SET JSONB_INSERT JSONB_PRETTY CURRVAL LASTVAL NEXTVAL SETVAL COALESCE NULLIF GREATEST LEAST ARRAY_APPEND ARRAY_CAT ARRAY_NDIMS ARRAY_DIMS ARRAY_FILL ARRAY_LENGTH ARRAY_LOWER ARRAY_POSITION ARRAY_POSITIONS ARRAY_PREPEND ARRAY_REMOVE ARRAY_REPLACE ARRAY_TO_STRING ARRAY_UPPER CARDINALITY STRING_TO_ARRAY UNNEST ISEMPTY LOWER_INC UPPER_INC LOWER_INF UPPER_INF RANGE_MERGE GENERATE_SERIES GENERATE_SUBSCRIPTS CURRENT_DATABASE CURRENT_QUERY CURRENT_SCHEMA|10 CURRENT_SCHEMAS|10 INET_CLIENT_ADDR INET_CLIENT_PORT INET_SERVER_ADDR INET_SERVER_PORT ROW_SECURITY_ACTIVE FORMAT_TYPE TO_REGCLASS TO_REGPROC TO_REGPROCEDURE TO_REGOPER TO_REGOPERATOR TO_REGTYPE TO_REGNAMESPACE TO_REGROLE COL_DESCRIPTION OBJ_DESCRIPTION SHOBJ_DESCRIPTION TXID_CURRENT TXID_CURRENT_IF_ASSIGNED TXID_CURRENT_SNAPSHOT TXID_SNAPSHOT_XIP TXID_SNAPSHOT_XMAX TXID_SNAPSHOT_XMIN TXID_VISIBLE_IN_SNAPSHOT TXID_STATUS CURRENT_SETTING SET_CONFIG BRIN_SUMMARIZE_NEW_VALUES BRIN_SUMMARIZE_RANGE BRIN_DESUMMARIZE_RANGE GIN_CLEAN_PENDING_LIST SUPPRESS_REDUNDANT_UPDATES_TRIGGER LO_FROM_BYTEA LO_PUT LO_GET LO_CREAT LO_CREATE LO_UNLINK LO_IMPORT LO_EXPORT LOREAD LOWRITE GROUPING CAST ".trim().split(" ").map(function(g2) {
        return g2.split("|")[0];
      }).join("|")
    );
    return {
      name: "PostgreSQL",
      aliases: [
        "postgres",
        "postgresql"
      ],
      supersetOf: "sql",
      case_insensitive: true,
      keywords: {
        keyword: s2 + l2 + o2,
        built_in: d2 + f2 + b
      },
      // Forbid some cunstructs from other languages to improve autodetect. In fact
      // "[a-z]:" is legal (as part of array slice), but improbabal.
      illegal: /:==|\W\s*\(\*|(^|\s)\$[a-z]|\{\{|[a-z]:\s*$|\.\.\.|TO:|DO:/,
      contains: [
        // special handling of some words, which are reserved only in some contexts
        {
          className: "keyword",
          variants: [
            { begin: /\bTEXT\s*SEARCH\b/ },
            { begin: /\b(PRIMARY|FOREIGN|FOR(\s+NO)?)\s+KEY\b/ },
            { begin: /\bPARALLEL\s+(UNSAFE|RESTRICTED|SAFE)\b/ },
            { begin: /\bSTORAGE\s+(PLAIN|EXTERNAL|EXTENDED|MAIN)\b/ },
            { begin: /\bMATCH\s+(FULL|PARTIAL|SIMPLE)\b/ },
            { begin: /\bNULLS\s+(FIRST|LAST)\b/ },
            { begin: /\bEVENT\s+TRIGGER\b/ },
            { begin: /\b(MAPPING|OR)\s+REPLACE\b/ },
            { begin: /\b(FROM|TO)\s+(PROGRAM|STDIN|STDOUT)\b/ },
            { begin: /\b(SHARE|EXCLUSIVE)\s+MODE\b/ },
            { begin: /\b(LEFT|RIGHT)\s+(OUTER\s+)?JOIN\b/ },
            { begin: /\b(FETCH|MOVE)\s+(NEXT|PRIOR|FIRST|LAST|ABSOLUTE|RELATIVE|FORWARD|BACKWARD)\b/ },
            { begin: /\bPRESERVE\s+ROWS\b/ },
            { begin: /\bDISCARD\s+PLANS\b/ },
            { begin: /\bREFERENCING\s+(OLD|NEW)\b/ },
            { begin: /\bSKIP\s+LOCKED\b/ },
            { begin: /\bGROUPING\s+SETS\b/ },
            { begin: /\b(BINARY|INSENSITIVE|SCROLL|NO\s+SCROLL)\s+(CURSOR|FOR)\b/ },
            { begin: /\b(WITH|WITHOUT)\s+HOLD\b/ },
            { begin: /\bWITH\s+(CASCADED|LOCAL)\s+CHECK\s+OPTION\b/ },
            { begin: /\bEXCLUDE\s+(TIES|NO\s+OTHERS)\b/ },
            { begin: /\bFORMAT\s+(TEXT|XML|JSON|YAML)\b/ },
            { begin: /\bSET\s+((SESSION|LOCAL)\s+)?NAMES\b/ },
            { begin: /\bIS\s+(NOT\s+)?UNKNOWN\b/ },
            { begin: /\bSECURITY\s+LABEL\b/ },
            { begin: /\bSTANDALONE\s+(YES|NO|NO\s+VALUE)\b/ },
            { begin: /\bWITH\s+(NO\s+)?DATA\b/ },
            { begin: /\b(FOREIGN|SET)\s+DATA\b/ },
            { begin: /\bSET\s+(CATALOG|CONSTRAINTS)\b/ },
            { begin: /\b(WITH|FOR)\s+ORDINALITY\b/ },
            { begin: /\bIS\s+(NOT\s+)?DOCUMENT\b/ },
            { begin: /\bXML\s+OPTION\s+(DOCUMENT|CONTENT)\b/ },
            { begin: /\b(STRIP|PRESERVE)\s+WHITESPACE\b/ },
            { begin: /\bNO\s+(ACTION|MAXVALUE|MINVALUE)\b/ },
            { begin: /\bPARTITION\s+BY\s+(RANGE|LIST|HASH)\b/ },
            { begin: /\bAT\s+TIME\s+ZONE\b/ },
            { begin: /\bGRANTED\s+BY\b/ },
            { begin: /\bRETURN\s+(QUERY|NEXT)\b/ },
            { begin: /\b(ATTACH|DETACH)\s+PARTITION\b/ },
            { begin: /\bFORCE\s+ROW\s+LEVEL\s+SECURITY\b/ },
            { begin: /\b(INCLUDING|EXCLUDING)\s+(COMMENTS|CONSTRAINTS|DEFAULTS|IDENTITY|INDEXES|STATISTICS|STORAGE|ALL)\b/ },
            { begin: /\bAS\s+(ASSIGNMENT|IMPLICIT|PERMISSIVE|RESTRICTIVE|ENUM|RANGE)\b/ }
          ]
        },
        // functions named as keywords, followed by '('
        {
          begin: /\b(FORMAT|FAMILY|VERSION)\s*\(/
          // keywords: { built_in: 'FORMAT FAMILY VERSION' }
        },
        // INCLUDE ( ... ) in index_parameters in CREATE TABLE
        {
          begin: /\bINCLUDE\s*\(/,
          keywords: "INCLUDE"
        },
        // not highlight RANGE if not in frame_clause (not 100% correct, but seems satisfactory)
        { begin: /\bRANGE(?!\s*(BETWEEN|UNBOUNDED|CURRENT|[-0-9]+))/ },
        // disable highlighting in commands CREATE AGGREGATE/COLLATION/DATABASE/OPERTOR/TEXT SEARCH .../TYPE
        // and in PL/pgSQL RAISE ... USING
        { begin: /\b(VERSION|OWNER|TEMPLATE|TABLESPACE|CONNECTION\s+LIMIT|PROCEDURE|RESTRICT|JOIN|PARSER|COPY|START|END|COLLATION|INPUT|ANALYZE|STORAGE|LIKE|DEFAULT|DELIMITER|ENCODING|COLUMN|CONSTRAINT|TABLE|SCHEMA)\s*=/ },
        // PG_smth; HAS_some_PRIVILEGE
        {
          // className: 'built_in',
          begin: /\b(PG_\w+?|HAS_[A-Z_]+_PRIVILEGE)\b/,
          relevance: 10
        },
        // extract
        {
          begin: /\bEXTRACT\s*\(/,
          end: /\bFROM\b/,
          returnEnd: true,
          keywords: {
            // built_in: 'EXTRACT',
            type: "CENTURY DAY DECADE DOW DOY EPOCH HOUR ISODOW ISOYEAR MICROSECONDS MILLENNIUM MILLISECONDS MINUTE MONTH QUARTER SECOND TIMEZONE TIMEZONE_HOUR TIMEZONE_MINUTE WEEK YEAR"
          }
        },
        // xmlelement, xmlpi - special NAME
        {
          begin: /\b(XMLELEMENT|XMLPI)\s*\(\s*NAME/,
          keywords: {
            // built_in: 'XMLELEMENT XMLPI',
            keyword: "NAME"
          }
        },
        // xmlparse, xmlserialize
        {
          begin: /\b(XMLPARSE|XMLSERIALIZE)\s*\(\s*(DOCUMENT|CONTENT)/,
          keywords: {
            // built_in: 'XMLPARSE XMLSERIALIZE',
            keyword: "DOCUMENT CONTENT"
          }
        },
        // Sequences. We actually skip everything between CACHE|INCREMENT|MAXVALUE|MINVALUE and
        // nearest following numeric constant. Without with trick we find a lot of "keywords"
        // in 'avrasm' autodetection test...
        {
          beginKeywords: "CACHE INCREMENT MAXVALUE MINVALUE",
          end: e2.C_NUMBER_RE,
          returnEnd: true,
          keywords: "BY CACHE INCREMENT MAXVALUE MINVALUE"
        },
        // WITH|WITHOUT TIME ZONE as part of datatype
        {
          className: "type",
          begin: /\b(WITH|WITHOUT)\s+TIME\s+ZONE\b/
        },
        // INTERVAL optional fields
        {
          className: "type",
          begin: /\bINTERVAL\s+(YEAR|MONTH|DAY|HOUR|MINUTE|SECOND)(\s+TO\s+(MONTH|HOUR|MINUTE|SECOND))?\b/
        },
        // Pseudo-types which allowed only as return type
        {
          begin: /\bRETURNS\s+(LANGUAGE_HANDLER|TRIGGER|EVENT_TRIGGER|FDW_HANDLER|INDEX_AM_HANDLER|TSM_HANDLER)\b/,
          keywords: {
            keyword: "RETURNS",
            type: "LANGUAGE_HANDLER TRIGGER EVENT_TRIGGER FDW_HANDLER INDEX_AM_HANDLER TSM_HANDLER"
          }
        },
        // Known functions - only when followed by '('
        {
          begin: "\\b(" + E2 + ")\\s*\\("
          // keywords: { built_in: FUNCTIONS }
        },
        // Types
        {
          begin: "\\.(" + _ + ")\\b"
          // prevent highlight as type, say, 'oid' in 'pgclass.oid'
        },
        {
          begin: "\\b(" + _ + ")\\s+PATH\\b",
          // in XMLTABLE
          keywords: {
            keyword: "PATH",
            // hopefully no one would use PATH type in XMLTABLE...
            type: u2.replace("PATH ", "")
          }
        },
        {
          className: "type",
          begin: "\\b(" + _ + ")\\b"
        },
        // Strings, see https://www.postgresql.org/docs/11/static/sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS
        {
          className: "string",
          begin: "'",
          end: "'",
          contains: [{ begin: "''" }]
        },
        {
          className: "string",
          begin: "(e|E|u&|U&)'",
          end: "'",
          contains: [{ begin: "\\\\." }],
          relevance: 10
        },
        e2.END_SAME_AS_BEGIN({
          begin: r2,
          end: r2,
          contains: [
            {
              // actually we want them all except SQL; listed are those with known implementations
              // and XML + JSON just in case
              subLanguage: [
                "pgsql",
                "perl",
                "python",
                "tcl",
                "r",
                "lua",
                "java",
                "php",
                "ruby",
                "bash",
                "scheme",
                "xml",
                "json"
              ],
              endsWithParent: true
            }
          ]
        }),
        // identifiers in quotes
        {
          begin: '"',
          end: '"',
          contains: [{ begin: '""' }]
        },
        // numbers
        e2.C_NUMBER_MODE,
        // comments
        e2.C_BLOCK_COMMENT_MODE,
        n,
        // PL/pgSQL staff
        // %ROWTYPE, %TYPE, $n
        {
          className: "meta",
          variants: [
            {
              // %TYPE, %ROWTYPE
              begin: "%(ROW)?TYPE",
              relevance: 10
            },
            {
              // $n
              begin: "\\$\\d+"
            },
            {
              // #compiler option
              begin: "^#\\w",
              end: "$"
            }
          ]
        },
        // <<labeles>>
        {
          className: "symbol",
          begin: a2,
          relevance: 10
        }
      ]
    };
  }
  return Vo = t2, Vo;
}
var Ho, Xd;
function GC() {
  if (Xd)
    return Ho;
  Xd = 1;
  function t2(e2) {
    const n = e2.regex, i2 = /(?![A-Za-z0-9])(?![$])/, r2 = n.concat(
      /[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/,
      i2
    ), a2 = n.concat(
      /(\\?[A-Z][a-z0-9_\x7f-\xff]+|\\?[A-Z]+(?=[A-Z][a-z0-9_\x7f-\xff])){1,}/,
      i2
    ), s2 = n.concat(
      /[A-Z]+/,
      i2
    ), o2 = {
      scope: "variable",
      match: "\\$+" + r2
    }, l2 = {
      scope: "meta",
      variants: [
        { begin: /<\?php/, relevance: 10 },
        // boost for obvious PHP
        { begin: /<\?=/ },
        // less relevant per PSR-1 which says not to use short-tags
        { begin: /<\?/, relevance: 0.1 },
        { begin: /\?>/ }
        // end php tag
      ]
    }, u2 = {
      scope: "subst",
      variants: [
        { begin: /\$\w+/ },
        {
          begin: /\{\$/,
          end: /\}/
        }
      ]
    }, _ = e2.inherit(e2.APOS_STRING_MODE, { illegal: null }), d2 = e2.inherit(e2.QUOTE_STRING_MODE, {
      illegal: null,
      contains: e2.QUOTE_STRING_MODE.contains.concat(u2)
    }), f2 = {
      begin: /<<<[ \t]*(?:(\w+)|"(\w+)")\n/,
      end: /[ \t]*(\w+)\b/,
      contains: e2.QUOTE_STRING_MODE.contains.concat(u2),
      "on:begin": (D, w) => {
        w.data._beginMatch = D[1] || D[2];
      },
      "on:end": (D, w) => {
        w.data._beginMatch !== D[1] && w.ignoreMatch();
      }
    }, b = e2.END_SAME_AS_BEGIN({
      begin: /<<<[ \t]*'(\w+)'\n/,
      end: /[ \t]*(\w+)\b/
    }), c2 = `[ 	
]`, E2 = {
      scope: "string",
      variants: [
        d2,
        _,
        f2,
        b
      ]
    }, g2 = {
      scope: "number",
      variants: [
        { begin: "\\b0[bB][01]+(?:_[01]+)*\\b" },
        // Binary w/ underscore support
        { begin: "\\b0[oO][0-7]+(?:_[0-7]+)*\\b" },
        // Octals w/ underscore support
        { begin: "\\b0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*\\b" },
        // Hex w/ underscore support
        // Decimals w/ underscore support, with optional fragments and scientific exponent (e) suffix.
        { begin: "(?:\\b\\d+(?:_\\d+)*(\\.(?:\\d+(?:_\\d+)*))?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?" }
      ],
      relevance: 0
    }, S = [
      "false",
      "null",
      "true"
    ], p2 = [
      // Magic constants:
      // <https://www.php.net/manual/en/language.constants.predefined.php>
      "__CLASS__",
      "__DIR__",
      "__FILE__",
      "__FUNCTION__",
      "__COMPILER_HALT_OFFSET__",
      "__LINE__",
      "__METHOD__",
      "__NAMESPACE__",
      "__TRAIT__",
      // Function that look like language construct or language construct that look like function:
      // List of keywords that may not require parenthesis
      "die",
      "echo",
      "exit",
      "include",
      "include_once",
      "print",
      "require",
      "require_once",
      // These are not language construct (function) but operate on the currently-executing function and can access the current symbol table
      // 'compact extract func_get_arg func_get_args func_num_args get_called_class get_parent_class ' +
      // Other keywords:
      // <https://www.php.net/manual/en/reserved.php>
      // <https://www.php.net/manual/en/language.types.type-juggling.php>
      "array",
      "abstract",
      "and",
      "as",
      "binary",
      "bool",
      "boolean",
      "break",
      "callable",
      "case",
      "catch",
      "class",
      "clone",
      "const",
      "continue",
      "declare",
      "default",
      "do",
      "double",
      "else",
      "elseif",
      "empty",
      "enddeclare",
      "endfor",
      "endforeach",
      "endif",
      "endswitch",
      "endwhile",
      "enum",
      "eval",
      "extends",
      "final",
      "finally",
      "float",
      "for",
      "foreach",
      "from",
      "global",
      "goto",
      "if",
      "implements",
      "instanceof",
      "insteadof",
      "int",
      "integer",
      "interface",
      "isset",
      "iterable",
      "list",
      "match|0",
      "mixed",
      "new",
      "never",
      "object",
      "or",
      "private",
      "protected",
      "public",
      "readonly",
      "real",
      "return",
      "string",
      "switch",
      "throw",
      "trait",
      "try",
      "unset",
      "use",
      "var",
      "void",
      "while",
      "xor",
      "yield"
    ], m2 = [
      // Standard PHP library:
      // <https://www.php.net/manual/en/book.spl.php>
      "Error|0",
      "AppendIterator",
      "ArgumentCountError",
      "ArithmeticError",
      "ArrayIterator",
      "ArrayObject",
      "AssertionError",
      "BadFunctionCallException",
      "BadMethodCallException",
      "CachingIterator",
      "CallbackFilterIterator",
      "CompileError",
      "Countable",
      "DirectoryIterator",
      "DivisionByZeroError",
      "DomainException",
      "EmptyIterator",
      "ErrorException",
      "Exception",
      "FilesystemIterator",
      "FilterIterator",
      "GlobIterator",
      "InfiniteIterator",
      "InvalidArgumentException",
      "IteratorIterator",
      "LengthException",
      "LimitIterator",
      "LogicException",
      "MultipleIterator",
      "NoRewindIterator",
      "OutOfBoundsException",
      "OutOfRangeException",
      "OuterIterator",
      "OverflowException",
      "ParentIterator",
      "ParseError",
      "RangeException",
      "RecursiveArrayIterator",
      "RecursiveCachingIterator",
      "RecursiveCallbackFilterIterator",
      "RecursiveDirectoryIterator",
      "RecursiveFilterIterator",
      "RecursiveIterator",
      "RecursiveIteratorIterator",
      "RecursiveRegexIterator",
      "RecursiveTreeIterator",
      "RegexIterator",
      "RuntimeException",
      "SeekableIterator",
      "SplDoublyLinkedList",
      "SplFileInfo",
      "SplFileObject",
      "SplFixedArray",
      "SplHeap",
      "SplMaxHeap",
      "SplMinHeap",
      "SplObjectStorage",
      "SplObserver",
      "SplPriorityQueue",
      "SplQueue",
      "SplStack",
      "SplSubject",
      "SplTempFileObject",
      "TypeError",
      "UnderflowException",
      "UnexpectedValueException",
      "UnhandledMatchError",
      // Reserved interfaces:
      // <https://www.php.net/manual/en/reserved.interfaces.php>
      "ArrayAccess",
      "BackedEnum",
      "Closure",
      "Fiber",
      "Generator",
      "Iterator",
      "IteratorAggregate",
      "Serializable",
      "Stringable",
      "Throwable",
      "Traversable",
      "UnitEnum",
      "WeakReference",
      "WeakMap",
      // Reserved classes:
      // <https://www.php.net/manual/en/reserved.classes.php>
      "Directory",
      "__PHP_Incomplete_Class",
      "parent",
      "php_user_filter",
      "self",
      "static",
      "stdClass"
    ], T = {
      keyword: p2,
      literal: ((D) => {
        const w = [];
        return D.forEach((L) => {
          w.push(L), L.toLowerCase() === L ? w.push(L.toUpperCase()) : w.push(L.toLowerCase());
        }), w;
      })(S),
      built_in: m2
    }, h2 = (D) => D.map((w) => w.replace(/\|\d+$/, "")), C2 = { variants: [
      {
        match: [
          /new/,
          n.concat(c2, "+"),
          // to prevent built ins from being confused as the class constructor call
          n.concat("(?!", h2(m2).join("\\b|"), "\\b)"),
          a2
        ],
        scope: {
          1: "keyword",
          4: "title.class"
        }
      }
    ] }, A2 = n.concat(r2, "\\b(?!\\()"), I2 = { variants: [
      {
        match: [
          n.concat(
            /::/,
            n.lookahead(/(?!class\b)/)
          ),
          A2
        ],
        scope: { 2: "variable.constant" }
      },
      {
        match: [
          /::/,
          /class/
        ],
        scope: { 2: "variable.language" }
      },
      {
        match: [
          a2,
          n.concat(
            /::/,
            n.lookahead(/(?!class\b)/)
          ),
          A2
        ],
        scope: {
          1: "title.class",
          3: "variable.constant"
        }
      },
      {
        match: [
          a2,
          n.concat(
            "::",
            n.lookahead(/(?!class\b)/)
          )
        ],
        scope: { 1: "title.class" }
      },
      {
        match: [
          a2,
          /::/,
          /class/
        ],
        scope: {
          1: "title.class",
          3: "variable.language"
        }
      }
    ] }, v2 = {
      scope: "attr",
      match: n.concat(r2, n.lookahead(":"), n.lookahead(/(?!::)/))
    }, x = {
      relevance: 0,
      begin: /\(/,
      end: /\)/,
      keywords: T,
      contains: [
        v2,
        o2,
        I2,
        e2.C_BLOCK_COMMENT_MODE,
        E2,
        g2,
        C2
      ]
    }, M = {
      relevance: 0,
      match: [
        /\b/,
        // to prevent keywords from being confused as the function title
        n.concat("(?!fn\\b|function\\b|", h2(p2).join("\\b|"), "|", h2(m2).join("\\b|"), "\\b)"),
        r2,
        n.concat(c2, "*"),
        n.lookahead(/(?=\()/)
      ],
      scope: { 3: "title.function.invoke" },
      contains: [x]
    };
    x.contains.push(M);
    const B2 = [
      v2,
      I2,
      e2.C_BLOCK_COMMENT_MODE,
      E2,
      g2,
      C2
    ], G2 = {
      begin: n.concat(
        /#\[\s*\\?/,
        n.either(
          a2,
          s2
        )
      ),
      beginScope: "meta",
      end: /]/,
      endScope: "meta",
      keywords: {
        literal: S,
        keyword: [
          "new",
          "array"
        ]
      },
      contains: [
        {
          begin: /\[/,
          end: /]/,
          keywords: {
            literal: S,
            keyword: [
              "new",
              "array"
            ]
          },
          contains: [
            "self",
            ...B2
          ]
        },
        ...B2,
        {
          scope: "meta",
          variants: [
            { match: a2 },
            { match: s2 }
          ]
        }
      ]
    };
    return {
      case_insensitive: false,
      keywords: T,
      contains: [
        G2,
        e2.HASH_COMMENT_MODE,
        e2.COMMENT("//", "$"),
        e2.COMMENT(
          "/\\*",
          "\\*/",
          { contains: [
            {
              scope: "doctag",
              match: "@[A-Za-z]+"
            }
          ] }
        ),
        {
          match: /__halt_compiler\(\);/,
          keywords: "__halt_compiler",
          starts: {
            scope: "comment",
            end: e2.MATCH_NOTHING_RE,
            contains: [
              {
                match: /\?>/,
                scope: "meta",
                endsParent: true
              }
            ]
          }
        },
        l2,
        {
          scope: "variable.language",
          match: /\$this\b/
        },
        o2,
        M,
        I2,
        {
          match: [
            /const/,
            /\s/,
            r2
          ],
          scope: {
            1: "keyword",
            3: "variable.constant"
          }
        },
        C2,
        {
          scope: "function",
          relevance: 0,
          beginKeywords: "fn function",
          end: /[;{]/,
          excludeEnd: true,
          illegal: "[$%\\[]",
          contains: [
            { beginKeywords: "use" },
            e2.UNDERSCORE_TITLE_MODE,
            {
              begin: "=>",
              // No markup, just a relevance booster
              endsParent: true
            },
            {
              scope: "params",
              begin: "\\(",
              end: "\\)",
              excludeBegin: true,
              excludeEnd: true,
              keywords: T,
              contains: [
                "self",
                G2,
                o2,
                I2,
                e2.C_BLOCK_COMMENT_MODE,
                E2,
                g2
              ]
            }
          ]
        },
        {
          scope: "class",
          variants: [
            {
              beginKeywords: "enum",
              illegal: /[($"]/
            },
            {
              beginKeywords: "class interface trait",
              illegal: /[:($"]/
            }
          ],
          relevance: 0,
          end: /\{/,
          excludeEnd: true,
          contains: [
            { beginKeywords: "extends implements" },
            e2.UNDERSCORE_TITLE_MODE
          ]
        },
        // both use and namespace still use "old style" rules (vs multi-match)
        // because the namespace name can include `\` and we still want each
        // element to be treated as its own *individual* title
        {
          beginKeywords: "namespace",
          relevance: 0,
          end: ";",
          illegal: /[.']/,
          contains: [e2.inherit(e2.UNDERSCORE_TITLE_MODE, { scope: "title.class" })]
        },
        {
          beginKeywords: "use",
          relevance: 0,
          end: ";",
          contains: [
            // TODO: title.function vs title.class
            {
              match: /\b(as|const|function)\b/,
              scope: "keyword"
            },
            // TODO: could be title.class or title.function
            e2.UNDERSCORE_TITLE_MODE
          ]
        },
        E2,
        g2
      ]
    };
  }
  return Ho = t2, Ho;
}
var zo, Zd;
function YC() {
  if (Zd)
    return zo;
  Zd = 1;
  function t2(e2) {
    return {
      name: "PHP template",
      subLanguage: "xml",
      contains: [
        {
          begin: /<\?(php|=)?/,
          end: /\?>/,
          subLanguage: "php",
          contains: [
            // We don't want the php closing tag ?> to close the PHP block when
            // inside any of the following blocks:
            {
              begin: "/\\*",
              end: "\\*/",
              skip: true
            },
            {
              begin: 'b"',
              end: '"',
              skip: true
            },
            {
              begin: "b'",
              end: "'",
              skip: true
            },
            e2.inherit(e2.APOS_STRING_MODE, {
              illegal: null,
              className: null,
              contains: null,
              skip: true
            }),
            e2.inherit(e2.QUOTE_STRING_MODE, {
              illegal: null,
              className: null,
              contains: null,
              skip: true
            })
          ]
        }
      ]
    };
  }
  return zo = t2, zo;
}
var $o, Jd;
function qC() {
  if (Jd)
    return $o;
  Jd = 1;
  function t2(e2) {
    return {
      name: "Plain text",
      aliases: [
        "text",
        "txt"
      ],
      disableAutodetect: true
    };
  }
  return $o = t2, $o;
}
var Wo, jd;
function VC() {
  if (jd)
    return Wo;
  jd = 1;
  function t2(e2) {
    const n = {
      keyword: "actor addressof and as be break class compile_error compile_intrinsic consume continue delegate digestof do else elseif embed end error for fun if ifdef in interface is isnt lambda let match new not object or primitive recover repeat return struct then trait try type until use var where while with xor",
      meta: "iso val tag trn box ref",
      literal: "this false true"
    }, i2 = {
      className: "string",
      begin: '"""',
      end: '"""',
      relevance: 10
    }, r2 = {
      className: "string",
      begin: '"',
      end: '"',
      contains: [e2.BACKSLASH_ESCAPE]
    }, a2 = {
      className: "string",
      begin: "'",
      end: "'",
      contains: [e2.BACKSLASH_ESCAPE],
      relevance: 0
    }, s2 = {
      className: "type",
      begin: "\\b_?[A-Z][\\w]*",
      relevance: 0
    }, o2 = {
      begin: e2.IDENT_RE + "'",
      relevance: 0
    };
    return {
      name: "Pony",
      keywords: n,
      contains: [
        s2,
        i2,
        r2,
        a2,
        o2,
        {
          className: "number",
          begin: "(-?)(\\b0[xX][a-fA-F0-9]+|\\b0[bB][01]+|(\\b\\d+(_\\d+)?(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",
          relevance: 0
        },
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE
      ]
    };
  }
  return Wo = t2, Wo;
}
var Ko, ep;
function HC() {
  if (ep)
    return Ko;
  ep = 1;
  function t2(e2) {
    const n = [
      "string",
      "char",
      "byte",
      "int",
      "long",
      "bool",
      "decimal",
      "single",
      "double",
      "DateTime",
      "xml",
      "array",
      "hashtable",
      "void"
    ], i2 = "Add|Clear|Close|Copy|Enter|Exit|Find|Format|Get|Hide|Join|Lock|Move|New|Open|Optimize|Pop|Push|Redo|Remove|Rename|Reset|Resize|Search|Select|Set|Show|Skip|Split|Step|Switch|Undo|Unlock|Watch|Backup|Checkpoint|Compare|Compress|Convert|ConvertFrom|ConvertTo|Dismount|Edit|Expand|Export|Group|Import|Initialize|Limit|Merge|Mount|Out|Publish|Restore|Save|Sync|Unpublish|Update|Approve|Assert|Build|Complete|Confirm|Deny|Deploy|Disable|Enable|Install|Invoke|Register|Request|Restart|Resume|Start|Stop|Submit|Suspend|Uninstall|Unregister|Wait|Debug|Measure|Ping|Repair|Resolve|Test|Trace|Connect|Disconnect|Read|Receive|Send|Write|Block|Grant|Protect|Revoke|Unblock|Unprotect|Use|ForEach|Sort|Tee|Where", r2 = "-and|-as|-band|-bnot|-bor|-bxor|-casesensitive|-ccontains|-ceq|-cge|-cgt|-cle|-clike|-clt|-cmatch|-cne|-cnotcontains|-cnotlike|-cnotmatch|-contains|-creplace|-csplit|-eq|-exact|-f|-file|-ge|-gt|-icontains|-ieq|-ige|-igt|-ile|-ilike|-ilt|-imatch|-in|-ine|-inotcontains|-inotlike|-inotmatch|-ireplace|-is|-isnot|-isplit|-join|-le|-like|-lt|-match|-ne|-not|-notcontains|-notin|-notlike|-notmatch|-or|-regex|-replace|-shl|-shr|-split|-wildcard|-xor", a2 = {
      $pattern: /-?[A-z\.\-]+\b/,
      keyword: "if else foreach return do while until elseif begin for trap data dynamicparam end break throw param continue finally in switch exit filter try process catch hidden static parameter",
      // "echo" relevance has been set to 0 to avoid auto-detect conflicts with shell transcripts
      built_in: "ac asnp cat cd CFS chdir clc clear clhy cli clp cls clv cnsn compare copy cp cpi cpp curl cvpa dbp del diff dir dnsn ebp echo|0 epal epcsv epsn erase etsn exsn fc fhx fl ft fw gal gbp gc gcb gci gcm gcs gdr gerr ghy gi gin gjb gl gm gmo gp gps gpv group gsn gsnp gsv gtz gu gv gwmi h history icm iex ihy ii ipal ipcsv ipmo ipsn irm ise iwmi iwr kill lp ls man md measure mi mount move mp mv nal ndr ni nmo npssc nsn nv ogv oh popd ps pushd pwd r rbp rcjb rcsn rd rdr ren ri rjb rm rmdir rmo rni rnp rp rsn rsnp rujb rv rvpa rwmi sajb sal saps sasv sbp sc scb select set shcm si sl sleep sls sort sp spjb spps spsv start stz sujb sv swmi tee trcm type wget where wjb write"
      // TODO: 'validate[A-Z]+' can't work in keywords
    }, s2 = /\w[\w\d]*((-)[\w\d]+)*/, o2 = {
      begin: "`[\\s\\S]",
      relevance: 0
    }, l2 = {
      className: "variable",
      variants: [
        { begin: /\$\B/ },
        {
          className: "keyword",
          begin: /\$this/
        },
        { begin: /\$[\w\d][\w\d_:]*/ }
      ]
    }, u2 = {
      className: "literal",
      begin: /\$(null|true|false)\b/
    }, _ = {
      className: "string",
      variants: [
        {
          begin: /"/,
          end: /"/
        },
        {
          begin: /@"/,
          end: /^"@/
        }
      ],
      contains: [
        o2,
        l2,
        {
          className: "variable",
          begin: /\$[A-z]/,
          end: /[^A-z]/
        }
      ]
    }, d2 = {
      className: "string",
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /@'/,
          end: /^'@/
        }
      ]
    }, f2 = {
      className: "doctag",
      variants: [
        /* no paramater help tags */
        { begin: /\.(synopsis|description|example|inputs|outputs|notes|link|component|role|functionality)/ },
        /* one parameter help tags */
        { begin: /\.(parameter|forwardhelptargetname|forwardhelpcategory|remotehelprunspace|externalhelp)\s+\S+/ }
      ]
    }, b = e2.inherit(
      e2.COMMENT(null, null),
      {
        variants: [
          /* single-line comment */
          {
            begin: /#/,
            end: /$/
          },
          /* multi-line comment */
          {
            begin: /<#/,
            end: /#>/
          }
        ],
        contains: [f2]
      }
    ), c2 = {
      className: "built_in",
      variants: [{ begin: "(".concat(i2, ")+(-)[\\w\\d]+") }]
    }, E2 = {
      className: "class",
      beginKeywords: "class enum",
      end: /\s*[{]/,
      excludeEnd: true,
      relevance: 0,
      contains: [e2.TITLE_MODE]
    }, g2 = {
      className: "function",
      begin: /function\s+/,
      end: /\s*\{|$/,
      excludeEnd: true,
      returnBegin: true,
      relevance: 0,
      contains: [
        {
          begin: "function",
          relevance: 0,
          className: "keyword"
        },
        {
          className: "title",
          begin: s2,
          relevance: 0
        },
        {
          begin: /\(/,
          end: /\)/,
          className: "params",
          relevance: 0,
          contains: [l2]
        }
        // CMDLETS
      ]
    }, S = {
      begin: /using\s/,
      end: /$/,
      returnBegin: true,
      contains: [
        _,
        d2,
        {
          className: "keyword",
          begin: /(using|assembly|command|module|namespace|type)/
        }
      ]
    }, p2 = { variants: [
      // PS literals are pretty verbose so it's a good idea to accent them a bit.
      {
        className: "operator",
        begin: "(".concat(r2, ")\\b")
      },
      {
        className: "literal",
        begin: /(-){1,2}[\w\d-]+/,
        relevance: 0
      }
    ] }, m2 = {
      className: "selector-tag",
      begin: /@\B/,
      relevance: 0
    }, R2 = {
      className: "function",
      begin: /\[.*\]\s*[\w]+[ ]??\(/,
      end: /$/,
      returnBegin: true,
      relevance: 0,
      contains: [
        {
          className: "keyword",
          begin: "(".concat(
            a2.keyword.toString().replace(
              /\s/g,
              "|"
            ),
            ")\\b"
          ),
          endsParent: true,
          relevance: 0
        },
        e2.inherit(e2.TITLE_MODE, { endsParent: true })
      ]
    }, T = [
      // STATIC_MEMBER,
      R2,
      b,
      o2,
      e2.NUMBER_MODE,
      _,
      d2,
      // PS_NEW_OBJECT_TYPE,
      c2,
      l2,
      u2,
      m2
    ], h2 = {
      begin: /\[/,
      end: /\]/,
      excludeBegin: true,
      excludeEnd: true,
      relevance: 0,
      contains: [].concat(
        "self",
        T,
        {
          begin: "(" + n.join("|") + ")",
          className: "built_in",
          relevance: 0
        },
        {
          className: "type",
          begin: /[\.\w\d]+/,
          relevance: 0
        }
      )
    };
    return R2.contains.unshift(h2), {
      name: "PowerShell",
      aliases: [
        "pwsh",
        "ps",
        "ps1"
      ],
      case_insensitive: true,
      keywords: a2,
      contains: T.concat(
        E2,
        g2,
        S,
        p2,
        h2
      )
    };
  }
  return Ko = t2, Ko;
}
var Qo, tp;
function zC() {
  if (tp)
    return Qo;
  tp = 1;
  function t2(e2) {
    const n = e2.regex, i2 = [
      "displayHeight",
      "displayWidth",
      "mouseY",
      "mouseX",
      "mousePressed",
      "pmouseX",
      "pmouseY",
      "key",
      "keyCode",
      "pixels",
      "focused",
      "frameCount",
      "frameRate",
      "height",
      "width",
      "size",
      "createGraphics",
      "beginDraw",
      "createShape",
      "loadShape",
      "PShape",
      "arc",
      "ellipse",
      "line",
      "point",
      "quad",
      "rect",
      "triangle",
      "bezier",
      "bezierDetail",
      "bezierPoint",
      "bezierTangent",
      "curve",
      "curveDetail",
      "curvePoint",
      "curveTangent",
      "curveTightness",
      "shape",
      "shapeMode",
      "beginContour",
      "beginShape",
      "bezierVertex",
      "curveVertex",
      "endContour",
      "endShape",
      "quadraticVertex",
      "vertex",
      "ellipseMode",
      "noSmooth",
      "rectMode",
      "smooth",
      "strokeCap",
      "strokeJoin",
      "strokeWeight",
      "mouseClicked",
      "mouseDragged",
      "mouseMoved",
      "mousePressed",
      "mouseReleased",
      "mouseWheel",
      "keyPressed",
      "keyPressedkeyReleased",
      "keyTyped",
      "print",
      "println",
      "save",
      "saveFrame",
      "day",
      "hour",
      "millis",
      "minute",
      "month",
      "second",
      "year",
      "background",
      "clear",
      "colorMode",
      "fill",
      "noFill",
      "noStroke",
      "stroke",
      "alpha",
      "blue",
      "brightness",
      "color",
      "green",
      "hue",
      "lerpColor",
      "red",
      "saturation",
      "modelX",
      "modelY",
      "modelZ",
      "screenX",
      "screenY",
      "screenZ",
      "ambient",
      "emissive",
      "shininess",
      "specular",
      "add",
      "createImage",
      "beginCamera",
      "camera",
      "endCamera",
      "frustum",
      "ortho",
      "perspective",
      "printCamera",
      "printProjection",
      "cursor",
      "frameRate",
      "noCursor",
      "exit",
      "loop",
      "noLoop",
      "popStyle",
      "pushStyle",
      "redraw",
      "binary",
      "boolean",
      "byte",
      "char",
      "float",
      "hex",
      "int",
      "str",
      "unbinary",
      "unhex",
      "join",
      "match",
      "matchAll",
      "nf",
      "nfc",
      "nfp",
      "nfs",
      "split",
      "splitTokens",
      "trim",
      "append",
      "arrayCopy",
      "concat",
      "expand",
      "reverse",
      "shorten",
      "sort",
      "splice",
      "subset",
      "box",
      "sphere",
      "sphereDetail",
      "createInput",
      "createReader",
      "loadBytes",
      "loadJSONArray",
      "loadJSONObject",
      "loadStrings",
      "loadTable",
      "loadXML",
      "open",
      "parseXML",
      "saveTable",
      "selectFolder",
      "selectInput",
      "beginRaw",
      "beginRecord",
      "createOutput",
      "createWriter",
      "endRaw",
      "endRecord",
      "PrintWritersaveBytes",
      "saveJSONArray",
      "saveJSONObject",
      "saveStream",
      "saveStrings",
      "saveXML",
      "selectOutput",
      "popMatrix",
      "printMatrix",
      "pushMatrix",
      "resetMatrix",
      "rotate",
      "rotateX",
      "rotateY",
      "rotateZ",
      "scale",
      "shearX",
      "shearY",
      "translate",
      "ambientLight",
      "directionalLight",
      "lightFalloff",
      "lights",
      "lightSpecular",
      "noLights",
      "normal",
      "pointLight",
      "spotLight",
      "image",
      "imageMode",
      "loadImage",
      "noTint",
      "requestImage",
      "tint",
      "texture",
      "textureMode",
      "textureWrap",
      "blend",
      "copy",
      "filter",
      "get",
      "loadPixels",
      "set",
      "updatePixels",
      "blendMode",
      "loadShader",
      "PShaderresetShader",
      "shader",
      "createFont",
      "loadFont",
      "text",
      "textFont",
      "textAlign",
      "textLeading",
      "textMode",
      "textSize",
      "textWidth",
      "textAscent",
      "textDescent",
      "abs",
      "ceil",
      "constrain",
      "dist",
      "exp",
      "floor",
      "lerp",
      "log",
      "mag",
      "map",
      "max",
      "min",
      "norm",
      "pow",
      "round",
      "sq",
      "sqrt",
      "acos",
      "asin",
      "atan",
      "atan2",
      "cos",
      "degrees",
      "radians",
      "sin",
      "tan",
      "noise",
      "noiseDetail",
      "noiseSeed",
      "random",
      "randomGaussian",
      "randomSeed"
    ], r2 = e2.IDENT_RE, a2 = { variants: [
      {
        match: n.concat(n.either(...i2), n.lookahead(/\s*\(/)),
        className: "built_in"
      },
      {
        relevance: 0,
        match: n.concat(
          /\b(?!for|if|while)/,
          r2,
          n.lookahead(/\s*\(/)
        ),
        className: "title.function"
      }
    ] }, s2 = {
      match: [
        /new\s+/,
        r2
      ],
      className: {
        1: "keyword",
        2: "class.title"
      }
    }, o2 = {
      relevance: 0,
      match: [
        /\./,
        r2
      ],
      className: { 2: "property" }
    }, l2 = {
      variants: [
        { match: [
          /class/,
          /\s+/,
          r2,
          /\s+/,
          /extends/,
          /\s+/,
          r2
        ] },
        { match: [
          /class/,
          /\s+/,
          r2
        ] }
      ],
      className: {
        1: "keyword",
        3: "title.class",
        5: "keyword",
        7: "title.class.inherited"
      }
    }, u2 = [
      "boolean",
      "byte",
      "char",
      "color",
      "double",
      "float",
      "int",
      "long",
      "short"
    ], _ = [
      "BufferedReader",
      "PVector",
      "PFont",
      "PImage",
      "PGraphics",
      "HashMap",
      "String",
      "Array",
      "FloatDict",
      "ArrayList",
      "FloatList",
      "IntDict",
      "IntList",
      "JSONArray",
      "JSONObject",
      "Object",
      "StringDict",
      "StringList",
      "Table",
      "TableRow",
      "XML"
    ];
    return {
      name: "Processing",
      aliases: ["pde"],
      keywords: {
        keyword: [...[
          "abstract",
          "assert",
          "break",
          "case",
          "catch",
          "const",
          "continue",
          "default",
          "else",
          "enum",
          "final",
          "finally",
          "for",
          "if",
          "import",
          "instanceof",
          "long",
          "native",
          "new",
          "package",
          "private",
          "private",
          "protected",
          "protected",
          "public",
          "public",
          "return",
          "static",
          "strictfp",
          "switch",
          "synchronized",
          "throw",
          "throws",
          "transient",
          "try",
          "void",
          "volatile",
          "while"
        ]],
        literal: "P2D P3D HALF_PI PI QUARTER_PI TAU TWO_PI null true false",
        title: "setup draw",
        variable: "super this",
        built_in: [
          ...i2,
          ..._
        ],
        type: u2
      },
      contains: [
        l2,
        s2,
        a2,
        o2,
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        e2.APOS_STRING_MODE,
        e2.QUOTE_STRING_MODE,
        e2.C_NUMBER_MODE
      ]
    };
  }
  return Qo = t2, Qo;
}
var Xo, np;
function $C() {
  if (np)
    return Xo;
  np = 1;
  function t2(e2) {
    return {
      name: "Python profiler",
      contains: [
        e2.C_NUMBER_MODE,
        {
          begin: "[a-zA-Z_][\\da-zA-Z_]+\\.[\\da-zA-Z_]{1,3}",
          end: ":",
          excludeEnd: true
        },
        {
          begin: "(ncalls|tottime|cumtime)",
          end: "$",
          keywords: "ncalls tottime|10 cumtime|10 filename",
          relevance: 10
        },
        {
          begin: "function calls",
          end: "$",
          contains: [e2.C_NUMBER_MODE],
          relevance: 10
        },
        e2.APOS_STRING_MODE,
        e2.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "\\(",
          end: "\\)$",
          excludeBegin: true,
          excludeEnd: true,
          relevance: 0
        }
      ]
    };
  }
  return Xo = t2, Xo;
}
var Zo, rp;
function WC() {
  if (rp)
    return Zo;
  rp = 1;
  function t2(e2) {
    const n = {
      begin: /[a-z][A-Za-z0-9_]*/,
      relevance: 0
    }, i2 = {
      className: "symbol",
      variants: [
        { begin: /[A-Z][a-zA-Z0-9_]*/ },
        { begin: /_[A-Za-z0-9_]*/ }
      ],
      relevance: 0
    }, r2 = {
      begin: /\(/,
      end: /\)/,
      relevance: 0
    }, a2 = {
      begin: /\[/,
      end: /\]/
    }, s2 = {
      className: "comment",
      begin: /%/,
      end: /$/,
      contains: [e2.PHRASAL_WORDS_MODE]
    }, o2 = {
      className: "string",
      begin: /`/,
      end: /`/,
      contains: [e2.BACKSLASH_ESCAPE]
    }, l2 = {
      className: "string",
      // 0'a etc.
      begin: /0'(\\'|.)/
    }, u2 = {
      className: "string",
      begin: /0'\\s/
      // 0'\s
    }, d2 = [
      n,
      i2,
      r2,
      {
        // relevance booster
        begin: /:-/
      },
      a2,
      s2,
      e2.C_BLOCK_COMMENT_MODE,
      e2.QUOTE_STRING_MODE,
      e2.APOS_STRING_MODE,
      o2,
      l2,
      u2,
      e2.C_NUMBER_MODE
    ];
    return r2.contains = d2, a2.contains = d2, {
      name: "Prolog",
      contains: d2.concat([
        {
          // relevance booster
          begin: /\.$/
        }
      ])
    };
  }
  return Zo = t2, Zo;
}
var Jo, ap;
function KC() {
  if (ap)
    return Jo;
  ap = 1;
  function t2(e2) {
    const n = "[ \\t\\f]*", i2 = "[ \\t\\f]+", r2 = n + "[:=]" + n, a2 = i2, s2 = "(" + r2 + "|" + a2 + ")", o2 = "([^\\\\:= \\t\\f\\n]|\\\\.)+", l2 = {
      // skip DELIM
      end: s2,
      relevance: 0,
      starts: {
        // value: everything until end of line (again, taking into account backslashes)
        className: "string",
        end: /$/,
        relevance: 0,
        contains: [
          { begin: "\\\\\\\\" },
          { begin: "\\\\\\n" }
        ]
      }
    };
    return {
      name: ".properties",
      disableAutodetect: true,
      case_insensitive: true,
      illegal: /\S/,
      contains: [
        e2.COMMENT("^\\s*[!#]", "$"),
        // key: everything until whitespace or = or : (taking into account backslashes)
        // case of a key-value pair
        {
          returnBegin: true,
          variants: [
            { begin: o2 + r2 },
            { begin: o2 + a2 }
          ],
          contains: [
            {
              className: "attr",
              begin: o2,
              endsParent: true
            }
          ],
          starts: l2
        },
        // case of an empty key
        {
          className: "attr",
          begin: o2 + n + "$"
        }
      ]
    };
  }
  return Jo = t2, Jo;
}
var jo, ip;
function QC() {
  if (ip)
    return jo;
  ip = 1;
  function t2(e2) {
    const n = [
      "package",
      "import",
      "option",
      "optional",
      "required",
      "repeated",
      "group",
      "oneof"
    ], i2 = [
      "double",
      "float",
      "int32",
      "int64",
      "uint32",
      "uint64",
      "sint32",
      "sint64",
      "fixed32",
      "fixed64",
      "sfixed32",
      "sfixed64",
      "bool",
      "string",
      "bytes"
    ], r2 = {
      match: [
        /(message|enum|service)\s+/,
        e2.IDENT_RE
      ],
      scope: {
        1: "keyword",
        2: "title.class"
      }
    };
    return {
      name: "Protocol Buffers",
      aliases: ["proto"],
      keywords: {
        keyword: n,
        type: i2,
        literal: [
          "true",
          "false"
        ]
      },
      contains: [
        e2.QUOTE_STRING_MODE,
        e2.NUMBER_MODE,
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        r2,
        {
          className: "function",
          beginKeywords: "rpc",
          end: /[{;]/,
          excludeEnd: true,
          keywords: "rpc returns"
        },
        {
          // match enum items (relevance)
          // BLAH = ...;
          begin: /^\s*[A-Z_]+(?=\s*=[^\n]+;$)/
        }
      ]
    };
  }
  return jo = t2, jo;
}
var es, op;
function XC() {
  if (op)
    return es;
  op = 1;
  function t2(e2) {
    const n = {
      keyword: (
        /* language keywords */
        "and case default else elsif false if in import enherits node or true undef unless main settings $string "
      ),
      literal: (
        /* metaparameters */
        "alias audit before loglevel noop require subscribe tag owner ensure group mode name|0 changes context force incl lens load_path onlyif provider returns root show_diff type_check en_address ip_address realname command environment hour monute month monthday special target weekday creates cwd ogoutput refresh refreshonly tries try_sleep umask backup checksum content ctime force ignore links mtime purge recurse recurselimit replace selinux_ignore_defaults selrange selrole seltype seluser source souirce_permissions sourceselect validate_cmd validate_replacement allowdupe attribute_membership auth_membership forcelocal gid ia_load_module members system host_aliases ip allowed_trunk_vlans description device_url duplex encapsulation etherchannel native_vlan speed principals allow_root auth_class auth_type authenticate_user k_of_n mechanisms rule session_owner shared options device fstype enable hasrestart directory present absent link atboot blockdevice device dump pass remounts poller_tag use message withpath adminfile allow_virtual allowcdrom category configfiles flavor install_options instance package_settings platform responsefile status uninstall_options vendor unless_system_user unless_uid binary control flags hasstatus manifest pattern restart running start stop allowdupe auths expiry gid groups home iterations key_membership keys managehome membership password password_max_age password_min_age profile_membership profiles project purge_ssh_keys role_membership roles salt shell uid baseurl cost descr enabled enablegroups exclude failovermethod gpgcheck gpgkey http_caching include includepkgs keepalive metadata_expire metalink mirrorlist priority protect proxy proxy_password proxy_username repo_gpgcheck s3_enabled skip_if_unavailable sslcacert sslclientcert sslclientkey sslverify mounted"
      ),
      built_in: (
        /* core facts */
        "architecture augeasversion blockdevices boardmanufacturer boardproductname boardserialnumber cfkey dhcp_servers domain ec2_ ec2_userdata facterversion filesystems ldom fqdn gid hardwareisa hardwaremodel hostname id|0 interfaces ipaddress ipaddress_ ipaddress6 ipaddress6_ iphostnumber is_virtual kernel kernelmajversion kernelrelease kernelversion kernelrelease kernelversion lsbdistcodename lsbdistdescription lsbdistid lsbdistrelease lsbmajdistrelease lsbminordistrelease lsbrelease macaddress macaddress_ macosx_buildversion macosx_productname macosx_productversion macosx_productverson_major macosx_productversion_minor manufacturer memoryfree memorysize netmask metmask_ network_ operatingsystem operatingsystemmajrelease operatingsystemrelease osfamily partitions path physicalprocessorcount processor processorcount productname ps puppetversion rubysitedir rubyversion selinux selinux_config_mode selinux_config_policy selinux_current_mode selinux_current_mode selinux_enforced selinux_policyversion serialnumber sp_ sshdsakey sshecdsakey sshrsakey swapencrypted swapfree swapsize timezone type uniqueid uptime uptime_days uptime_hours uptime_seconds uuid virtual vlans xendomains zfs_version zonenae zones zpool_version"
      )
    }, i2 = e2.COMMENT("#", "$"), r2 = "([A-Za-z_]|::)(\\w|::)*", a2 = e2.inherit(e2.TITLE_MODE, { begin: r2 }), s2 = {
      className: "variable",
      begin: "\\$" + r2
    }, o2 = {
      className: "string",
      contains: [
        e2.BACKSLASH_ESCAPE,
        s2
      ],
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        }
      ]
    };
    return {
      name: "Puppet",
      aliases: ["pp"],
      contains: [
        i2,
        s2,
        o2,
        {
          beginKeywords: "class",
          end: "\\{|;",
          illegal: /=/,
          contains: [
            a2,
            i2
          ]
        },
        {
          beginKeywords: "define",
          end: /\{/,
          contains: [
            {
              className: "section",
              begin: e2.IDENT_RE,
              endsParent: true
            }
          ]
        },
        {
          begin: e2.IDENT_RE + "\\s+\\{",
          returnBegin: true,
          end: /\S/,
          contains: [
            {
              className: "keyword",
              begin: e2.IDENT_RE,
              relevance: 0.2
            },
            {
              begin: /\{/,
              end: /\}/,
              keywords: n,
              relevance: 0,
              contains: [
                o2,
                i2,
                {
                  begin: "[a-zA-Z_]+\\s*=>",
                  returnBegin: true,
                  end: "=>",
                  contains: [
                    {
                      className: "attr",
                      begin: e2.IDENT_RE
                    }
                  ]
                },
                {
                  className: "number",
                  begin: "(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",
                  relevance: 0
                },
                s2
              ]
            }
          ],
          relevance: 0
        }
      ]
    };
  }
  return es = t2, es;
}
var ts, sp;
function ZC() {
  if (sp)
    return ts;
  sp = 1;
  function t2(e2) {
    const n = {
      // PB IDE color: #0080FF (Azure Radiance)
      className: "string",
      begin: '(~)?"',
      end: '"',
      illegal: "\\n"
    }, i2 = {
      // PB IDE color: #924B72 (Cannon Pink)
      //  "#" + a letter or underscore + letters, digits or underscores + (optional) "$"
      className: "symbol",
      begin: "#[a-zA-Z_]\\w*\\$?"
    };
    return {
      name: "PureBASIC",
      aliases: [
        "pb",
        "pbi"
      ],
      keywords: (
        // PB IDE color: #006666 (Blue Stone) + Bold
        // Keywords from all version of PureBASIC 5.00 upward ...
        "Align And Array As Break CallDebugger Case CompilerCase CompilerDefault CompilerElse CompilerElseIf CompilerEndIf CompilerEndSelect CompilerError CompilerIf CompilerSelect CompilerWarning Continue Data DataSection Debug DebugLevel Declare DeclareC DeclareCDLL DeclareDLL DeclareModule Default Define Dim DisableASM DisableDebugger DisableExplicit Else ElseIf EnableASM EnableDebugger EnableExplicit End EndDataSection EndDeclareModule EndEnumeration EndIf EndImport EndInterface EndMacro EndModule EndProcedure EndSelect EndStructure EndStructureUnion EndWith Enumeration EnumerationBinary Extends FakeReturn For ForEach ForEver Global Gosub Goto If Import ImportC IncludeBinary IncludeFile IncludePath Interface List Macro MacroExpandedCount Map Module NewList NewMap Next Not Or Procedure ProcedureC ProcedureCDLL ProcedureDLL ProcedureReturn Protected Prototype PrototypeC ReDim Read Repeat Restore Return Runtime Select Shared Static Step Structure StructureUnion Swap Threaded To UndefineMacro Until Until  UnuseModule UseModule Wend While With XIncludeFile XOr"
      ),
      contains: [
        // COMMENTS | PB IDE color: #00AAAA (Persian Green)
        e2.COMMENT(";", "$", { relevance: 0 }),
        {
          // PROCEDURES DEFINITIONS
          className: "function",
          begin: "\\b(Procedure|Declare)(C|CDLL|DLL)?\\b",
          end: "\\(",
          excludeEnd: true,
          returnBegin: true,
          contains: [
            {
              // PROCEDURE KEYWORDS | PB IDE color: #006666 (Blue Stone) + Bold
              className: "keyword",
              begin: "(Procedure|Declare)(C|CDLL|DLL)?",
              excludeEnd: true
            },
            {
              // PROCEDURE RETURN TYPE SETTING | PB IDE color: #000000 (Black)
              className: "type",
              begin: "\\.\\w*"
              // end: ' ',
            },
            e2.UNDERSCORE_TITLE_MODE
            // PROCEDURE NAME | PB IDE color: #006666 (Blue Stone)
          ]
        },
        n,
        i2
      ]
    };
  }
  return ts = t2, ts;
}
var ns, lp;
function JC() {
  if (lp)
    return ns;
  lp = 1;
  function t2(e2) {
    const n = e2.regex, i2 = new RegExp("[\\p{XID_Start}_]\\p{XID_Continue}*", "u"), r2 = [
      "and",
      "as",
      "assert",
      "async",
      "await",
      "break",
      "case",
      "class",
      "continue",
      "def",
      "del",
      "elif",
      "else",
      "except",
      "finally",
      "for",
      "from",
      "global",
      "if",
      "import",
      "in",
      "is",
      "lambda",
      "match",
      "nonlocal|10",
      "not",
      "or",
      "pass",
      "raise",
      "return",
      "try",
      "while",
      "with",
      "yield"
    ], l2 = {
      $pattern: /[A-Za-z]\w+|__\w+__/,
      keyword: r2,
      built_in: [
        "__import__",
        "abs",
        "all",
        "any",
        "ascii",
        "bin",
        "bool",
        "breakpoint",
        "bytearray",
        "bytes",
        "callable",
        "chr",
        "classmethod",
        "compile",
        "complex",
        "delattr",
        "dict",
        "dir",
        "divmod",
        "enumerate",
        "eval",
        "exec",
        "filter",
        "float",
        "format",
        "frozenset",
        "getattr",
        "globals",
        "hasattr",
        "hash",
        "help",
        "hex",
        "id",
        "input",
        "int",
        "isinstance",
        "issubclass",
        "iter",
        "len",
        "list",
        "locals",
        "map",
        "max",
        "memoryview",
        "min",
        "next",
        "object",
        "oct",
        "open",
        "ord",
        "pow",
        "print",
        "property",
        "range",
        "repr",
        "reversed",
        "round",
        "set",
        "setattr",
        "slice",
        "sorted",
        "staticmethod",
        "str",
        "sum",
        "super",
        "tuple",
        "type",
        "vars",
        "zip"
      ],
      literal: [
        "__debug__",
        "Ellipsis",
        "False",
        "None",
        "NotImplemented",
        "True"
      ],
      type: [
        "Any",
        "Callable",
        "Coroutine",
        "Dict",
        "List",
        "Literal",
        "Generic",
        "Optional",
        "Sequence",
        "Set",
        "Tuple",
        "Type",
        "Union"
      ]
    }, u2 = {
      className: "meta",
      begin: /^(>>>|\.\.\.) /
    }, _ = {
      className: "subst",
      begin: /\{/,
      end: /\}/,
      keywords: l2,
      illegal: /#/
    }, d2 = {
      begin: /\{\{/,
      relevance: 0
    }, f2 = {
      className: "string",
      contains: [e2.BACKSLASH_ESCAPE],
      variants: [
        {
          begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,
          end: /'''/,
          contains: [
            e2.BACKSLASH_ESCAPE,
            u2
          ],
          relevance: 10
        },
        {
          begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?"""/,
          end: /"""/,
          contains: [
            e2.BACKSLASH_ESCAPE,
            u2
          ],
          relevance: 10
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])'''/,
          end: /'''/,
          contains: [
            e2.BACKSLASH_ESCAPE,
            u2,
            d2,
            _
          ]
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])"""/,
          end: /"""/,
          contains: [
            e2.BACKSLASH_ESCAPE,
            u2,
            d2,
            _
          ]
        },
        {
          begin: /([uU]|[rR])'/,
          end: /'/,
          relevance: 10
        },
        {
          begin: /([uU]|[rR])"/,
          end: /"/,
          relevance: 10
        },
        {
          begin: /([bB]|[bB][rR]|[rR][bB])'/,
          end: /'/
        },
        {
          begin: /([bB]|[bB][rR]|[rR][bB])"/,
          end: /"/
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])'/,
          end: /'/,
          contains: [
            e2.BACKSLASH_ESCAPE,
            d2,
            _
          ]
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])"/,
          end: /"/,
          contains: [
            e2.BACKSLASH_ESCAPE,
            d2,
            _
          ]
        },
        e2.APOS_STRING_MODE,
        e2.QUOTE_STRING_MODE
      ]
    }, b = "[0-9](_?[0-9])*", c2 = `(\\b(${b}))?\\.(${b})|\\b(${b})\\.`, E2 = `\\b|${r2.join("|")}`, g2 = {
      className: "number",
      relevance: 0,
      variants: [
        // exponentfloat, pointfloat
        // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals
        // optionally imaginary
        // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
        // Note: no leading \b because floats can start with a decimal point
        // and we don't want to mishandle e.g. `fn(.5)`,
        // no trailing \b for pointfloat because it can end with a decimal point
        // and we don't want to mishandle e.g. `0..hex()`; this should be safe
        // because both MUST contain a decimal point and so cannot be confused with
        // the interior part of an identifier
        {
          begin: `(\\b(${b})|(${c2}))[eE][+-]?(${b})[jJ]?(?=${E2})`
        },
        {
          begin: `(${c2})[jJ]?`
        },
        // decinteger, bininteger, octinteger, hexinteger
        // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals
        // optionally "long" in Python 2
        // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals
        // decinteger is optionally imaginary
        // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
        {
          begin: `\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${E2})`
        },
        {
          begin: `\\b0[bB](_?[01])+[lL]?(?=${E2})`
        },
        {
          begin: `\\b0[oO](_?[0-7])+[lL]?(?=${E2})`
        },
        {
          begin: `\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${E2})`
        },
        // imagnumber (digitpart-based)
        // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
        {
          begin: `\\b(${b})[jJ](?=${E2})`
        }
      ]
    }, S = {
      className: "comment",
      begin: n.lookahead(/# type:/),
      end: /$/,
      keywords: l2,
      contains: [
        {
          // prevent keywords from coloring `type`
          begin: /# type:/
        },
        // comment within a datatype comment includes no keywords
        {
          begin: /#/,
          end: /\b\B/,
          endsWithParent: true
        }
      ]
    }, p2 = {
      className: "params",
      variants: [
        // Exclude params in functions without params
        {
          className: "",
          begin: /\(\s*\)/,
          skip: true
        },
        {
          begin: /\(/,
          end: /\)/,
          excludeBegin: true,
          excludeEnd: true,
          keywords: l2,
          contains: [
            "self",
            u2,
            g2,
            f2,
            e2.HASH_COMMENT_MODE
          ]
        }
      ]
    };
    return _.contains = [
      f2,
      g2,
      u2
    ], {
      name: "Python",
      aliases: [
        "py",
        "gyp",
        "ipython"
      ],
      unicodeRegex: true,
      keywords: l2,
      illegal: /(<\/|\?)|=>/,
      contains: [
        u2,
        g2,
        {
          // very common convention
          scope: "variable.language",
          match: /\bself\b/
        },
        {
          // eat "if" prior to string so that it won't accidentally be
          // labeled as an f-string
          beginKeywords: "if",
          relevance: 0
        },
        { match: /\bor\b/, scope: "keyword" },
        f2,
        S,
        e2.HASH_COMMENT_MODE,
        {
          match: [
            /\bdef/,
            /\s+/,
            i2
          ],
          scope: {
            1: "keyword",
            3: "title.function"
          },
          contains: [p2]
        },
        {
          variants: [
            {
              match: [
                /\bclass/,
                /\s+/,
                i2,
                /\s*/,
                /\(\s*/,
                i2,
                /\s*\)/
              ]
            },
            {
              match: [
                /\bclass/,
                /\s+/,
                i2
              ]
            }
          ],
          scope: {
            1: "keyword",
            3: "title.class",
            6: "title.class.inherited"
          }
        },
        {
          className: "meta",
          begin: /^[\t ]*@/,
          end: /(?=#)|$/,
          contains: [
            g2,
            p2,
            f2
          ]
        }
      ]
    };
  }
  return ns = t2, ns;
}
var rs, cp;
function jC() {
  if (cp)
    return rs;
  cp = 1;
  function t2(e2) {
    return {
      aliases: ["pycon"],
      contains: [
        {
          className: "meta.prompt",
          starts: {
            // a space separates the REPL prefix from the actual code
            // this is purely for cleaner HTML output
            end: / |$/,
            starts: {
              end: "$",
              subLanguage: "python"
            }
          },
          variants: [
            { begin: /^>>>(?=[ ]|$)/ },
            { begin: /^\.\.\.(?=[ ]|$)/ }
          ]
        }
      ]
    };
  }
  return rs = t2, rs;
}
var as, up;
function eN() {
  if (up)
    return as;
  up = 1;
  function t2(e2) {
    return {
      name: "Q",
      aliases: [
        "k",
        "kdb"
      ],
      keywords: {
        $pattern: /(`?)[A-Za-z0-9_]+\b/,
        keyword: "do while select delete by update from",
        literal: "0b 1b",
        built_in: "neg not null string reciprocal floor ceiling signum mod xbar xlog and or each scan over prior mmu lsq inv md5 ltime gtime count first var dev med cov cor all any rand sums prds mins maxs fills deltas ratios avgs differ prev next rank reverse iasc idesc asc desc msum mcount mavg mdev xrank mmin mmax xprev rotate distinct group where flip type key til get value attr cut set upsert raze union inter except cross sv vs sublist enlist read0 read1 hopen hclose hdel hsym hcount peach system ltrim rtrim trim lower upper ssr view tables views cols xcols keys xkey xcol xasc xdesc fkeys meta lj aj aj0 ij pj asof uj ww wj wj1 fby xgroup ungroup ej save load rsave rload show csv parse eval min max avg wavg wsum sin cos tan sum",
        type: "`float `double int `timestamp `timespan `datetime `time `boolean `symbol `char `byte `short `long `real `month `date `minute `second `guid"
      },
      contains: [
        e2.C_LINE_COMMENT_MODE,
        e2.QUOTE_STRING_MODE,
        e2.C_NUMBER_MODE
      ]
    };
  }
  return as = t2, as;
}
var is, _p;
function tN() {
  if (_p)
    return is;
  _p = 1;
  function t2(e2) {
    const n = e2.regex, i2 = {
      keyword: "in of on if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const export super debugger as async await import",
      literal: "true false null undefined NaN Infinity",
      built_in: "eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Behavior bool color coordinate date double enumeration font geocircle georectangle geoshape int list matrix4x4 parent point quaternion real rect size string url variant vector2d vector3d vector4d Promise"
    }, r2 = "[a-zA-Z_][a-zA-Z0-9\\._]*", a2 = {
      className: "keyword",
      begin: "\\bproperty\\b",
      starts: {
        className: "string",
        end: "(:|=|;|,|//|/\\*|$)",
        returnEnd: true
      }
    }, s2 = {
      className: "keyword",
      begin: "\\bsignal\\b",
      starts: {
        className: "string",
        end: "(\\(|:|=|;|,|//|/\\*|$)",
        returnEnd: true
      }
    }, o2 = {
      className: "attribute",
      begin: "\\bid\\s*:",
      starts: {
        className: "string",
        end: r2,
        returnEnd: false
      }
    }, l2 = {
      begin: r2 + "\\s*:",
      returnBegin: true,
      contains: [
        {
          className: "attribute",
          begin: r2,
          end: "\\s*:",
          excludeEnd: true,
          relevance: 0
        }
      ],
      relevance: 0
    }, u2 = {
      begin: n.concat(r2, /\s*\{/),
      end: /\{/,
      returnBegin: true,
      relevance: 0,
      contains: [e2.inherit(e2.TITLE_MODE, { begin: r2 })]
    };
    return {
      name: "QML",
      aliases: ["qt"],
      case_insensitive: false,
      keywords: i2,
      contains: [
        {
          className: "meta",
          begin: /^\s*['"]use (strict|asm)['"]/
        },
        e2.APOS_STRING_MODE,
        e2.QUOTE_STRING_MODE,
        {
          // template string
          className: "string",
          begin: "`",
          end: "`",
          contains: [
            e2.BACKSLASH_ESCAPE,
            {
              className: "subst",
              begin: "\\$\\{",
              end: "\\}"
            }
          ]
        },
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        {
          className: "number",
          variants: [
            { begin: "\\b(0[bB][01]+)" },
            { begin: "\\b(0[oO][0-7]+)" },
            { begin: e2.C_NUMBER_RE }
          ],
          relevance: 0
        },
        {
          // "value" container
          begin: "(" + e2.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
          keywords: "return throw case",
          contains: [
            e2.C_LINE_COMMENT_MODE,
            e2.C_BLOCK_COMMENT_MODE,
            e2.REGEXP_MODE,
            {
              // E4X / JSX
              begin: /</,
              end: />\s*[);\]]/,
              relevance: 0,
              subLanguage: "xml"
            }
          ],
          relevance: 0
        },
        s2,
        a2,
        {
          className: "function",
          beginKeywords: "function",
          end: /\{/,
          excludeEnd: true,
          contains: [
            e2.inherit(e2.TITLE_MODE, { begin: /[A-Za-z$_][0-9A-Za-z$_]*/ }),
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              excludeBegin: true,
              excludeEnd: true,
              contains: [
                e2.C_LINE_COMMENT_MODE,
                e2.C_BLOCK_COMMENT_MODE
              ]
            }
          ],
          illegal: /\[|%/
        },
        {
          // hack: prevents detection of keywords after dots
          begin: "\\." + e2.IDENT_RE,
          relevance: 0
        },
        o2,
        l2,
        u2
      ],
      illegal: /#/
    };
  }
  return is = t2, is;
}
var os, dp;
function nN() {
  if (dp)
    return os;
  dp = 1;
  function t2(e2) {
    const n = e2.regex, i2 = /(?:(?:[a-zA-Z]|\.[._a-zA-Z])[._a-zA-Z0-9]*)|\.(?!\d)/, r2 = n.either(
      // Special case: only hexadecimal binary powers can contain fractions
      /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/,
      // Hexadecimal numbers without fraction and optional binary power
      /0[xX][0-9a-fA-F]+(?:[pP][+-]?\d+)?[Li]?/,
      // Decimal numbers
      /(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?[Li]?/
    ), a2 = /[=!<>:]=|\|\||&&|:::?|<-|<<-|->>|->|\|>|[-+*\/?!$&|:<=>@^~]|\*\*/, s2 = n.either(
      /[()]/,
      /[{}]/,
      /\[\[/,
      /[[\]]/,
      /\\/,
      /,/
    );
    return {
      name: "R",
      keywords: {
        $pattern: i2,
        keyword: "function if in break next repeat else for while",
        literal: "NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10",
        built_in: (
          // Builtin constants
          "LETTERS letters month.abb month.name pi T F abs acos acosh all any anyNA Arg as.call as.character as.complex as.double as.environment as.integer as.logical as.null.default as.numeric as.raw asin asinh atan atanh attr attributes baseenv browser c call ceiling class Conj cos cosh cospi cummax cummin cumprod cumsum digamma dim dimnames emptyenv exp expression floor forceAndCall gamma gc.time globalenv Im interactive invisible is.array is.atomic is.call is.character is.complex is.double is.environment is.expression is.finite is.function is.infinite is.integer is.language is.list is.logical is.matrix is.na is.name is.nan is.null is.numeric is.object is.pairlist is.raw is.recursive is.single is.symbol lazyLoadDBfetch length lgamma list log max min missing Mod names nargs nzchar oldClass on.exit pos.to.env proc.time prod quote range Re rep retracemem return round seq_along seq_len seq.int sign signif sin sinh sinpi sqrt standardGeneric substitute sum switch tan tanh tanpi tracemem trigamma trunc unclass untracemem UseMethod xtfrm"
        )
      },
      contains: [
        // Roxygen comments
        e2.COMMENT(
          /#'/,
          /$/,
          { contains: [
            {
              // Handle `@examples` separately to cause all subsequent code
              // until the next `@`-tag on its own line to be kept as-is,
              // preventing highlighting. This code is example R code, so nested
              // doctags shouldn’t be treated as such. See
              // `test/markup/r/roxygen.txt` for an example.
              scope: "doctag",
              match: /@examples/,
              starts: {
                end: n.lookahead(n.either(
                  // end if another doc comment
                  /\n^#'\s*(?=@[a-zA-Z]+)/,
                  // or a line with no comment
                  /\n^(?!#')/
                )),
                endsParent: true
              }
            },
            {
              // Handle `@param` to highlight the parameter name following
              // after.
              scope: "doctag",
              begin: "@param",
              end: /$/,
              contains: [
                {
                  scope: "variable",
                  variants: [
                    { match: i2 },
                    { match: /`(?:\\.|[^`\\])+`/ }
                  ],
                  endsParent: true
                }
              ]
            },
            {
              scope: "doctag",
              match: /@[a-zA-Z]+/
            },
            {
              scope: "keyword",
              match: /\\[a-zA-Z]+/
            }
          ] }
        ),
        e2.HASH_COMMENT_MODE,
        {
          scope: "string",
          contains: [e2.BACKSLASH_ESCAPE],
          variants: [
            e2.END_SAME_AS_BEGIN({
              begin: /[rR]"(-*)\(/,
              end: /\)(-*)"/
            }),
            e2.END_SAME_AS_BEGIN({
              begin: /[rR]"(-*)\{/,
              end: /\}(-*)"/
            }),
            e2.END_SAME_AS_BEGIN({
              begin: /[rR]"(-*)\[/,
              end: /\](-*)"/
            }),
            e2.END_SAME_AS_BEGIN({
              begin: /[rR]'(-*)\(/,
              end: /\)(-*)'/
            }),
            e2.END_SAME_AS_BEGIN({
              begin: /[rR]'(-*)\{/,
              end: /\}(-*)'/
            }),
            e2.END_SAME_AS_BEGIN({
              begin: /[rR]'(-*)\[/,
              end: /\](-*)'/
            }),
            {
              begin: '"',
              end: '"',
              relevance: 0
            },
            {
              begin: "'",
              end: "'",
              relevance: 0
            }
          ]
        },
        // Matching numbers immediately following punctuation and operators is
        // tricky since we need to look at the character ahead of a number to
        // ensure the number is not part of an identifier, and we cannot use
        // negative look-behind assertions. So instead we explicitly handle all
        // possible combinations of (operator|punctuation), number.
        // TODO: replace with negative look-behind when available
        // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/ },
        // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\d+)?[Li]?/ },
        // { begin: /(?<![a-zA-Z0-9._])(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?[Li]?/ }
        {
          relevance: 0,
          variants: [
            {
              scope: {
                1: "operator",
                2: "number"
              },
              match: [
                a2,
                r2
              ]
            },
            {
              scope: {
                1: "operator",
                2: "number"
              },
              match: [
                /%[^%]*%/,
                r2
              ]
            },
            {
              scope: {
                1: "punctuation",
                2: "number"
              },
              match: [
                s2,
                r2
              ]
            },
            {
              scope: { 2: "number" },
              match: [
                /[^a-zA-Z0-9._]|^/,
                // not part of an identifier, or start of document
                r2
              ]
            }
          ]
        },
        // Operators/punctuation when they're not directly followed by numbers
        {
          // Relevance boost for the most common assignment form.
          scope: { 3: "operator" },
          match: [
            i2,
            /\s+/,
            /<-/,
            /\s+/
          ]
        },
        {
          scope: "operator",
          relevance: 0,
          variants: [
            { match: a2 },
            { match: /%[^%]*%/ }
          ]
        },
        {
          scope: "punctuation",
          relevance: 0,
          match: s2
        },
        {
          // Escaped identifier
          begin: "`",
          end: "`",
          contains: [{ begin: /\\./ }]
        }
      ]
    };
  }
  return os = t2, os;
}
var ss, pp;
function rN() {
  if (pp)
    return ss;
  pp = 1;
  function t2(e2) {
    return {
      name: "ReasonML",
      aliases: ["re"],
      keywords: {
        $pattern: /[a-z_]\w*!?/,
        keyword: [
          "and",
          "as",
          "asr",
          "assert",
          "begin",
          "class",
          "constraint",
          "do",
          "done",
          "downto",
          "else",
          "end",
          "esfun",
          "exception",
          "external",
          "for",
          "fun",
          "function",
          "functor",
          "if",
          "in",
          "include",
          "inherit",
          "initializer",
          "land",
          "lazy",
          "let",
          "lor",
          "lsl",
          "lsr",
          "lxor",
          "mod",
          "module",
          "mutable",
          "new",
          "nonrec",
          "object",
          "of",
          "open",
          "or",
          "pri",
          "pub",
          "rec",
          "sig",
          "struct",
          "switch",
          "then",
          "to",
          "try",
          "type",
          "val",
          "virtual",
          "when",
          "while",
          "with"
        ],
        built_in: [
          "array",
          "bool",
          "bytes",
          "char",
          "exn|5",
          "float",
          "int",
          "int32",
          "int64",
          "list",
          "lazy_t|5",
          "nativeint|5",
          "ref",
          "string",
          "unit"
        ],
        literal: ["true", "false"]
      },
      illegal: /(:-|:=|\$\{|\+=)/,
      contains: [
        {
          scope: "literal",
          match: /\[(\|\|)?\]|\(\)/,
          relevance: 0
        },
        e2.C_LINE_COMMENT_MODE,
        e2.COMMENT(/\/\*/, /\*\//, { illegal: /^(#,\/\/)/ }),
        {
          /* type variable */
          scope: "symbol",
          match: /\'[A-Za-z_](?!\')[\w\']*/
          /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
        },
        {
          /* polymorphic variant */
          scope: "type",
          match: /`[A-Z][\w\']*/
        },
        {
          /* module or constructor */
          scope: "type",
          match: /\b[A-Z][\w\']*/,
          relevance: 0
        },
        {
          /* don't color identifiers, but safely catch all identifiers with ' */
          match: /[a-z_]\w*\'[\w\']*/,
          relevance: 0
        },
        {
          scope: "operator",
          match: /\s+(\|\||\+[\+\.]?|\*[\*\/\.]?|\/[\.]?|\.\.\.|\|>|&&|===?)\s+/,
          relevance: 0
        },
        e2.inherit(e2.APOS_STRING_MODE, {
          scope: "string",
          relevance: 0
        }),
        e2.inherit(e2.QUOTE_STRING_MODE, { illegal: null }),
        {
          scope: "number",
          variants: [
            { match: /\b0[xX][a-fA-F0-9_]+[Lln]?/ },
            { match: /\b0[oO][0-7_]+[Lln]?/ },
            { match: /\b0[bB][01_]+[Lln]?/ },
            { match: /\b[0-9][0-9_]*([Lln]|(\.[0-9_]*)?([eE][-+]?[0-9_]+)?)/ }
          ],
          relevance: 0
        }
      ]
    };
  }
  return ss = t2, ss;
}
var ls, mp;
function aN() {
  if (mp)
    return ls;
  mp = 1;
  function t2(e2) {
    return {
      name: "RenderMan RIB",
      keywords: "ArchiveRecord AreaLightSource Atmosphere Attribute AttributeBegin AttributeEnd Basis Begin Blobby Bound Clipping ClippingPlane Color ColorSamples ConcatTransform Cone CoordinateSystem CoordSysTransform CropWindow Curves Cylinder DepthOfField Detail DetailRange Disk Displacement Display End ErrorHandler Exposure Exterior Format FrameAspectRatio FrameBegin FrameEnd GeneralPolygon GeometricApproximation Geometry Hider Hyperboloid Identity Illuminate Imager Interior LightSource MakeCubeFaceEnvironment MakeLatLongEnvironment MakeShadow MakeTexture Matte MotionBegin MotionEnd NuPatch ObjectBegin ObjectEnd ObjectInstance Opacity Option Orientation Paraboloid Patch PatchMesh Perspective PixelFilter PixelSamples PixelVariance Points PointsGeneralPolygons PointsPolygons Polygon Procedural Projection Quantize ReadArchive RelativeDetail ReverseOrientation Rotate Scale ScreenWindow ShadingInterpolation ShadingRate Shutter Sides Skew SolidBegin SolidEnd Sphere SubdivisionMesh Surface TextureCoordinates Torus Transform TransformBegin TransformEnd TransformPoints Translate TrimCurve WorldBegin WorldEnd",
      illegal: "</",
      contains: [
        e2.HASH_COMMENT_MODE,
        e2.C_NUMBER_MODE,
        e2.APOS_STRING_MODE,
        e2.QUOTE_STRING_MODE
      ]
    };
  }
  return ls = t2, ls;
}
var cs, Ep;
function iN() {
  if (Ep)
    return cs;
  Ep = 1;
  function t2(e2) {
    const n = "[a-zA-Z-_][^\\n{]+\\{", i2 = {
      className: "attribute",
      begin: /[a-zA-Z-_]+/,
      end: /\s*:/,
      excludeEnd: true,
      starts: {
        end: ";",
        relevance: 0,
        contains: [
          {
            className: "variable",
            begin: /\.[a-zA-Z-_]+/
          },
          {
            className: "keyword",
            begin: /\(optional\)/
          }
        ]
      }
    };
    return {
      name: "Roboconf",
      aliases: [
        "graph",
        "instances"
      ],
      case_insensitive: true,
      keywords: "import",
      contains: [
        // Facet sections
        {
          begin: "^facet " + n,
          end: /\}/,
          keywords: "facet",
          contains: [
            i2,
            e2.HASH_COMMENT_MODE
          ]
        },
        // Instance sections
        {
          begin: "^\\s*instance of " + n,
          end: /\}/,
          keywords: "name count channels instance-data instance-state instance of",
          illegal: /\S/,
          contains: [
            "self",
            i2,
            e2.HASH_COMMENT_MODE
          ]
        },
        // Component sections
        {
          begin: "^" + n,
          end: /\}/,
          contains: [
            i2,
            e2.HASH_COMMENT_MODE
          ]
        },
        // Comments
        e2.HASH_COMMENT_MODE
      ]
    };
  }
  return cs = t2, cs;
}
var us, gp;
function oN() {
  if (gp)
    return us;
  gp = 1;
  function t2(e2) {
    const n = "foreach do while for if from to step else on-error and or not in", i2 = "global local beep delay put len typeof pick log time set find environment terminal error execute parse resolve toarray tobool toid toip toip6 tonum tostr totime", r2 = "add remove enable disable set get print export edit find run debug error info warning", a2 = "true false yes no nothing nil null", s2 = "traffic-flow traffic-generator firewall scheduler aaa accounting address-list address align area bandwidth-server bfd bgp bridge client clock community config connection console customer default dhcp-client dhcp-server discovery dns e-mail ethernet filter firmware gps graphing group hardware health hotspot identity igmp-proxy incoming instance interface ip ipsec ipv6 irq l2tp-server lcd ldp logging mac-server mac-winbox mangle manual mirror mme mpls nat nd neighbor network note ntp ospf ospf-v3 ovpn-server page peer pim ping policy pool port ppp pppoe-client pptp-server prefix profile proposal proxy queue radius resource rip ripng route routing screen script security-profiles server service service-port settings shares smb sms sniffer snmp snooper socks sstp-server system tool tracking type upgrade upnp user-manager users user vlan secret vrrp watchdog web-access wireless pptp pppoe lan wan layer7-protocol lease simple raw", o2 = {
      className: "variable",
      variants: [
        { begin: /\$[\w\d#@][\w\d_]*/ },
        { begin: /\$\{(.*?)\}/ }
      ]
    }, l2 = {
      className: "string",
      begin: /"/,
      end: /"/,
      contains: [
        e2.BACKSLASH_ESCAPE,
        o2,
        {
          className: "variable",
          begin: /\$\(/,
          end: /\)/,
          contains: [e2.BACKSLASH_ESCAPE]
        }
      ]
    }, u2 = {
      className: "string",
      begin: /'/,
      end: /'/
    };
    return {
      name: "MikroTik RouterOS script",
      aliases: ["mikrotik"],
      case_insensitive: true,
      keywords: {
        $pattern: /:?[\w-]+/,
        literal: a2,
        keyword: n + " :" + n.split(" ").join(" :") + " :" + i2.split(" ").join(" :")
      },
      contains: [
        {
          // illegal syntax
          variants: [
            {
              // -- comment
              begin: /\/\*/,
              end: /\*\//
            },
            {
              // Stan comment
              begin: /\/\//,
              end: /$/
            },
            {
              // HTML tags
              begin: /<\//,
              end: />/
            }
          ],
          illegal: /./
        },
        e2.COMMENT("^#", "$"),
        l2,
        u2,
        o2,
        // attribute=value
        {
          // > is to avoid matches with => in other grammars
          begin: /[\w-]+=([^\s{}[\]()>]+)/,
          relevance: 0,
          returnBegin: true,
          contains: [
            {
              className: "attribute",
              begin: /[^=]+/
            },
            {
              begin: /=/,
              endsWithParent: true,
              relevance: 0,
              contains: [
                l2,
                u2,
                o2,
                {
                  className: "literal",
                  begin: "\\b(" + a2.split(" ").join("|") + ")\\b"
                },
                {
                  // Do not format unclassified values. Needed to exclude highlighting of values as built_in.
                  begin: /("[^"]*"|[^\s{}[\]]+)/
                }
                /*
                {
                  // IPv4 addresses and subnets
                  className: 'number',
                  variants: [
                    {begin: IPADDR_wBITMASK+'(,'+IPADDR_wBITMASK+')*'}, //192.168.0.0/24,1.2.3.0/24
                    {begin: IPADDR+'-'+IPADDR},       // 192.168.0.1-192.168.0.3
                    {begin: IPADDR+'(,'+IPADDR+')*'}, // 192.168.0.1,192.168.0.34,192.168.24.1,192.168.0.1
                  ]
                },
                {
                  // MAC addresses and DHCP Client IDs
                  className: 'number',
                  begin: /\b(1:)?([0-9A-Fa-f]{1,2}[:-]){5}([0-9A-Fa-f]){1,2}\b/,
                },
                */
              ]
            }
          ]
        },
        {
          // HEX values
          className: "number",
          begin: /\*[0-9a-fA-F]+/
        },
        {
          begin: "\\b(" + r2.split(" ").join("|") + ")([\\s[(\\]|])",
          returnBegin: true,
          contains: [
            {
              className: "built_in",
              // 'function',
              begin: /\w+/
            }
          ]
        },
        {
          className: "built_in",
          variants: [
            { begin: "(\\.\\./|/|\\s)((" + s2.split(" ").join("|") + ");?\\s)+" },
            {
              begin: /\.\./,
              relevance: 0
            }
          ]
        }
      ]
    };
  }
  return us = t2, us;
}
var _s, fp;
function sN() {
  if (fp)
    return _s;
  fp = 1;
  function t2(e2) {
    const n = [
      "abs",
      "acos",
      "ambient",
      "area",
      "asin",
      "atan",
      "atmosphere",
      "attribute",
      "calculatenormal",
      "ceil",
      "cellnoise",
      "clamp",
      "comp",
      "concat",
      "cos",
      "degrees",
      "depth",
      "Deriv",
      "diffuse",
      "distance",
      "Du",
      "Dv",
      "environment",
      "exp",
      "faceforward",
      "filterstep",
      "floor",
      "format",
      "fresnel",
      "incident",
      "length",
      "lightsource",
      "log",
      "match",
      "max",
      "min",
      "mod",
      "noise",
      "normalize",
      "ntransform",
      "opposite",
      "option",
      "phong",
      "pnoise",
      "pow",
      "printf",
      "ptlined",
      "radians",
      "random",
      "reflect",
      "refract",
      "renderinfo",
      "round",
      "setcomp",
      "setxcomp",
      "setycomp",
      "setzcomp",
      "shadow",
      "sign",
      "sin",
      "smoothstep",
      "specular",
      "specularbrdf",
      "spline",
      "sqrt",
      "step",
      "tan",
      "texture",
      "textureinfo",
      "trace",
      "transform",
      "vtransform",
      "xcomp",
      "ycomp",
      "zcomp"
    ], i2 = [
      "matrix",
      "float",
      "color",
      "point",
      "normal",
      "vector"
    ], r2 = [
      "while",
      "for",
      "if",
      "do",
      "return",
      "else",
      "break",
      "extern",
      "continue"
    ], a2 = {
      match: [
        /(surface|displacement|light|volume|imager)/,
        /\s+/,
        e2.IDENT_RE
      ],
      scope: {
        1: "keyword",
        3: "title.class"
      }
    };
    return {
      name: "RenderMan RSL",
      keywords: {
        keyword: r2,
        built_in: n,
        type: i2
      },
      illegal: "</",
      contains: [
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        e2.QUOTE_STRING_MODE,
        e2.APOS_STRING_MODE,
        e2.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "#",
          end: "$"
        },
        a2,
        {
          beginKeywords: "illuminate illuminance gather",
          end: "\\("
        }
      ]
    };
  }
  return _s = t2, _s;
}
var ds, Sp;
function lN() {
  if (Sp)
    return ds;
  Sp = 1;
  function t2(e2) {
    return {
      name: "Oracle Rules Language",
      keywords: {
        keyword: "BILL_PERIOD BILL_START BILL_STOP RS_EFFECTIVE_START RS_EFFECTIVE_STOP RS_JURIS_CODE RS_OPCO_CODE INTDADDATTRIBUTE|5 INTDADDVMSG|5 INTDBLOCKOP|5 INTDBLOCKOPNA|5 INTDCLOSE|5 INTDCOUNT|5 INTDCOUNTSTATUSCODE|5 INTDCREATEMASK|5 INTDCREATEDAYMASK|5 INTDCREATEFACTORMASK|5 INTDCREATEHANDLE|5 INTDCREATEOVERRIDEDAYMASK|5 INTDCREATEOVERRIDEMASK|5 INTDCREATESTATUSCODEMASK|5 INTDCREATETOUPERIOD|5 INTDDELETE|5 INTDDIPTEST|5 INTDEXPORT|5 INTDGETERRORCODE|5 INTDGETERRORMESSAGE|5 INTDISEQUAL|5 INTDJOIN|5 INTDLOAD|5 INTDLOADACTUALCUT|5 INTDLOADDATES|5 INTDLOADHIST|5 INTDLOADLIST|5 INTDLOADLISTDATES|5 INTDLOADLISTENERGY|5 INTDLOADLISTHIST|5 INTDLOADRELATEDCHANNEL|5 INTDLOADSP|5 INTDLOADSTAGING|5 INTDLOADUOM|5 INTDLOADUOMDATES|5 INTDLOADUOMHIST|5 INTDLOADVERSION|5 INTDOPEN|5 INTDREADFIRST|5 INTDREADNEXT|5 INTDRECCOUNT|5 INTDRELEASE|5 INTDREPLACE|5 INTDROLLAVG|5 INTDROLLPEAK|5 INTDSCALAROP|5 INTDSCALE|5 INTDSETATTRIBUTE|5 INTDSETDSTPARTICIPANT|5 INTDSETSTRING|5 INTDSETVALUE|5 INTDSETVALUESTATUS|5 INTDSHIFTSTARTTIME|5 INTDSMOOTH|5 INTDSORT|5 INTDSPIKETEST|5 INTDSUBSET|5 INTDTOU|5 INTDTOURELEASE|5 INTDTOUVALUE|5 INTDUPDATESTATS|5 INTDVALUE|5 STDEV INTDDELETEEX|5 INTDLOADEXACTUAL|5 INTDLOADEXCUT|5 INTDLOADEXDATES|5 INTDLOADEX|5 INTDLOADEXRELATEDCHANNEL|5 INTDSAVEEX|5 MVLOAD|5 MVLOADACCT|5 MVLOADACCTDATES|5 MVLOADACCTHIST|5 MVLOADDATES|5 MVLOADHIST|5 MVLOADLIST|5 MVLOADLISTDATES|5 MVLOADLISTHIST|5 IF FOR NEXT DONE SELECT END CALL ABORT CLEAR CHANNEL FACTOR LIST NUMBER OVERRIDE SET WEEK DISTRIBUTIONNODE ELSE WHEN THEN OTHERWISE IENUM CSV INCLUDE LEAVE RIDER SAVE DELETE NOVALUE SECTION WARN SAVE_UPDATE DETERMINANT LABEL REPORT REVENUE EACH IN FROM TOTAL CHARGE BLOCK AND OR CSV_FILE RATE_CODE AUXILIARY_DEMAND UIDACCOUNT RS BILL_PERIOD_SELECT HOURS_PER_MONTH INTD_ERROR_STOP SEASON_SCHEDULE_NAME ACCOUNTFACTOR ARRAYUPPERBOUND CALLSTOREDPROC GETADOCONNECTION GETCONNECT GETDATASOURCE GETQUALIFIER GETUSERID HASVALUE LISTCOUNT LISTOP LISTUPDATE LISTVALUE PRORATEFACTOR RSPRORATE SETBINPATH SETDBMONITOR WQ_OPEN BILLINGHOURS DATE DATEFROMFLOAT DATETIMEFROMSTRING DATETIMETOSTRING DATETOFLOAT DAY DAYDIFF DAYNAME DBDATETIME HOUR MINUTE MONTH MONTHDIFF MONTHHOURS MONTHNAME ROUNDDATE SAMEWEEKDAYLASTYEAR SECOND WEEKDAY WEEKDIFF YEAR YEARDAY YEARSTR COMPSUM HISTCOUNT HISTMAX HISTMIN HISTMINNZ HISTVALUE MAXNRANGE MAXRANGE MINRANGE COMPIKVA COMPKVA COMPKVARFROMKQKW COMPLF IDATTR FLAG LF2KW LF2KWH MAXKW POWERFACTOR READING2USAGE AVGSEASON MAXSEASON MONTHLYMERGE SEASONVALUE SUMSEASON ACCTREADDATES ACCTTABLELOAD CONFIGADD CONFIGGET CREATEOBJECT CREATEREPORT EMAILCLIENT EXPBLKMDMUSAGE EXPMDMUSAGE EXPORT_USAGE FACTORINEFFECT GETUSERSPECIFIEDSTOP INEFFECT ISHOLIDAY RUNRATE SAVE_PROFILE SETREPORTTITLE USEREXIT WATFORRUNRATE TO TABLE ACOS ASIN ATAN ATAN2 BITAND CEIL COS COSECANT COSH COTANGENT DIVQUOT DIVREM EXP FABS FLOOR FMOD FREPM FREXPN LOG LOG10 MAX MAXN MIN MINNZ MODF POW ROUND ROUND2VALUE ROUNDINT SECANT SIN SINH SQROOT TAN TANH FLOAT2STRING FLOAT2STRINGNC INSTR LEFT LEN LTRIM MID RIGHT RTRIM STRING STRINGNC TOLOWER TOUPPER TRIM NUMDAYS READ_DATE STAGING",
        built_in: "IDENTIFIER OPTIONS XML_ELEMENT XML_OP XML_ELEMENT_OF DOMDOCCREATE DOMDOCLOADFILE DOMDOCLOADXML DOMDOCSAVEFILE DOMDOCGETROOT DOMDOCADDPI DOMNODEGETNAME DOMNODEGETTYPE DOMNODEGETVALUE DOMNODEGETCHILDCT DOMNODEGETFIRSTCHILD DOMNODEGETSIBLING DOMNODECREATECHILDELEMENT DOMNODESETATTRIBUTE DOMNODEGETCHILDELEMENTCT DOMNODEGETFIRSTCHILDELEMENT DOMNODEGETSIBLINGELEMENT DOMNODEGETATTRIBUTECT DOMNODEGETATTRIBUTEI DOMNODEGETATTRIBUTEBYNAME DOMNODEGETBYNAME"
      },
      contains: [
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        e2.APOS_STRING_MODE,
        e2.QUOTE_STRING_MODE,
        e2.C_NUMBER_MODE,
        {
          className: "literal",
          variants: [
            {
              // looks like #-comment
              begin: "#\\s+",
              relevance: 0
            },
            { begin: "#[a-zA-Z .]+" }
          ]
        }
      ]
    };
  }
  return ds = t2, ds;
}
var ps, bp;
function cN() {
  if (bp)
    return ps;
  bp = 1;
  function t2(e2) {
    const n = e2.regex, i2 = /(r#)?/, r2 = n.concat(i2, e2.UNDERSCORE_IDENT_RE), a2 = n.concat(i2, e2.IDENT_RE), s2 = {
      className: "title.function.invoke",
      relevance: 0,
      begin: n.concat(
        /\b/,
        /(?!let|for|while|if|else|match\b)/,
        a2,
        n.lookahead(/\s*\(/)
      )
    }, o2 = "([ui](8|16|32|64|128|size)|f(32|64))?", l2 = [
      "abstract",
      "as",
      "async",
      "await",
      "become",
      "box",
      "break",
      "const",
      "continue",
      "crate",
      "do",
      "dyn",
      "else",
      "enum",
      "extern",
      "false",
      "final",
      "fn",
      "for",
      "if",
      "impl",
      "in",
      "let",
      "loop",
      "macro",
      "match",
      "mod",
      "move",
      "mut",
      "override",
      "priv",
      "pub",
      "ref",
      "return",
      "self",
      "Self",
      "static",
      "struct",
      "super",
      "trait",
      "true",
      "try",
      "type",
      "typeof",
      "union",
      "unsafe",
      "unsized",
      "use",
      "virtual",
      "where",
      "while",
      "yield"
    ], u2 = [
      "true",
      "false",
      "Some",
      "None",
      "Ok",
      "Err"
    ], _ = [
      // functions
      "drop ",
      // traits
      "Copy",
      "Send",
      "Sized",
      "Sync",
      "Drop",
      "Fn",
      "FnMut",
      "FnOnce",
      "ToOwned",
      "Clone",
      "Debug",
      "PartialEq",
      "PartialOrd",
      "Eq",
      "Ord",
      "AsRef",
      "AsMut",
      "Into",
      "From",
      "Default",
      "Iterator",
      "Extend",
      "IntoIterator",
      "DoubleEndedIterator",
      "ExactSizeIterator",
      "SliceConcatExt",
      "ToString",
      // macros
      "assert!",
      "assert_eq!",
      "bitflags!",
      "bytes!",
      "cfg!",
      "col!",
      "concat!",
      "concat_idents!",
      "debug_assert!",
      "debug_assert_eq!",
      "env!",
      "eprintln!",
      "panic!",
      "file!",
      "format!",
      "format_args!",
      "include_bytes!",
      "include_str!",
      "line!",
      "local_data_key!",
      "module_path!",
      "option_env!",
      "print!",
      "println!",
      "select!",
      "stringify!",
      "try!",
      "unimplemented!",
      "unreachable!",
      "vec!",
      "write!",
      "writeln!",
      "macro_rules!",
      "assert_ne!",
      "debug_assert_ne!"
    ], d2 = [
      "i8",
      "i16",
      "i32",
      "i64",
      "i128",
      "isize",
      "u8",
      "u16",
      "u32",
      "u64",
      "u128",
      "usize",
      "f32",
      "f64",
      "str",
      "char",
      "bool",
      "Box",
      "Option",
      "Result",
      "String",
      "Vec"
    ];
    return {
      name: "Rust",
      aliases: ["rs"],
      keywords: {
        $pattern: e2.IDENT_RE + "!?",
        type: d2,
        keyword: l2,
        literal: u2,
        built_in: _
      },
      illegal: "</",
      contains: [
        e2.C_LINE_COMMENT_MODE,
        e2.COMMENT("/\\*", "\\*/", { contains: ["self"] }),
        e2.inherit(e2.QUOTE_STRING_MODE, {
          begin: /b?"/,
          illegal: null
        }),
        {
          className: "symbol",
          // negative lookahead to avoid matching `'`
          begin: /'[a-zA-Z_][a-zA-Z0-9_]*(?!')/
        },
        {
          scope: "string",
          variants: [
            { begin: /b?r(#*)"(.|\n)*?"\1(?!#)/ },
            {
              begin: /b?'/,
              end: /'/,
              contains: [
                {
                  scope: "char.escape",
                  match: /\\('|\w|x\w{2}|u\w{4}|U\w{8})/
                }
              ]
            }
          ]
        },
        {
          className: "number",
          variants: [
            { begin: "\\b0b([01_]+)" + o2 },
            { begin: "\\b0o([0-7_]+)" + o2 },
            { begin: "\\b0x([A-Fa-f0-9_]+)" + o2 },
            { begin: "\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)" + o2 }
          ],
          relevance: 0
        },
        {
          begin: [
            /fn/,
            /\s+/,
            r2
          ],
          className: {
            1: "keyword",
            3: "title.function"
          }
        },
        {
          className: "meta",
          begin: "#!?\\[",
          end: "\\]",
          contains: [
            {
              className: "string",
              begin: /"/,
              end: /"/,
              contains: [
                e2.BACKSLASH_ESCAPE
              ]
            }
          ]
        },
        {
          begin: [
            /let/,
            /\s+/,
            /(?:mut\s+)?/,
            r2
          ],
          className: {
            1: "keyword",
            3: "keyword",
            4: "variable"
          }
        },
        // must come before impl/for rule later
        {
          begin: [
            /for/,
            /\s+/,
            r2,
            /\s+/,
            /in/
          ],
          className: {
            1: "keyword",
            3: "variable",
            5: "keyword"
          }
        },
        {
          begin: [
            /type/,
            /\s+/,
            r2
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          begin: [
            /(?:trait|enum|struct|union|impl|for)/,
            /\s+/,
            r2
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          begin: e2.IDENT_RE + "::",
          keywords: {
            keyword: "Self",
            built_in: _,
            type: d2
          }
        },
        {
          className: "punctuation",
          begin: "->"
        },
        s2
      ]
    };
  }
  return ps = t2, ps;
}
var ms, Tp;
function uN() {
  if (Tp)
    return ms;
  Tp = 1;
  function t2(e2) {
    const n = e2.regex, i2 = [
      "do",
      "if",
      "then",
      "else",
      "end",
      "until",
      "while",
      "abort",
      "array",
      "attrib",
      "by",
      "call",
      "cards",
      "cards4",
      "catname",
      "continue",
      "datalines",
      "datalines4",
      "delete",
      "delim",
      "delimiter",
      "display",
      "dm",
      "drop",
      "endsas",
      "error",
      "file",
      "filename",
      "footnote",
      "format",
      "goto",
      "in",
      "infile",
      "informat",
      "input",
      "keep",
      "label",
      "leave",
      "length",
      "libname",
      "link",
      "list",
      "lostcard",
      "merge",
      "missing",
      "modify",
      "options",
      "output",
      "out",
      "page",
      "put",
      "redirect",
      "remove",
      "rename",
      "replace",
      "retain",
      "return",
      "select",
      "set",
      "skip",
      "startsas",
      "stop",
      "title",
      "update",
      "waitsas",
      "where",
      "window",
      "x|0",
      "systask",
      "add",
      "and",
      "alter",
      "as",
      "cascade",
      "check",
      "create",
      "delete",
      "describe",
      "distinct",
      "drop",
      "foreign",
      "from",
      "group",
      "having",
      "index",
      "insert",
      "into",
      "in",
      "key",
      "like",
      "message",
      "modify",
      "msgtype",
      "not",
      "null",
      "on",
      "or",
      "order",
      "primary",
      "references",
      "reset",
      "restrict",
      "select",
      "set",
      "table",
      "unique",
      "update",
      "validate",
      "view",
      "where"
    ], r2 = [
      "abs",
      "addr",
      "airy",
      "arcos",
      "arsin",
      "atan",
      "attrc",
      "attrn",
      "band",
      "betainv",
      "blshift",
      "bnot",
      "bor",
      "brshift",
      "bxor",
      "byte",
      "cdf",
      "ceil",
      "cexist",
      "cinv",
      "close",
      "cnonct",
      "collate",
      "compbl",
      "compound",
      "compress",
      "cos",
      "cosh",
      "css",
      "curobs",
      "cv",
      "daccdb",
      "daccdbsl",
      "daccsl",
      "daccsyd",
      "dacctab",
      "dairy",
      "date",
      "datejul",
      "datepart",
      "datetime",
      "day",
      "dclose",
      "depdb",
      "depdbsl",
      "depdbsl",
      "depsl",
      "depsl",
      "depsyd",
      "depsyd",
      "deptab",
      "deptab",
      "dequote",
      "dhms",
      "dif",
      "digamma",
      "dim",
      "dinfo",
      "dnum",
      "dopen",
      "doptname",
      "doptnum",
      "dread",
      "dropnote",
      "dsname",
      "erf",
      "erfc",
      "exist",
      "exp",
      "fappend",
      "fclose",
      "fcol",
      "fdelete",
      "fetch",
      "fetchobs",
      "fexist",
      "fget",
      "fileexist",
      "filename",
      "fileref",
      "finfo",
      "finv",
      "fipname",
      "fipnamel",
      "fipstate",
      "floor",
      "fnonct",
      "fnote",
      "fopen",
      "foptname",
      "foptnum",
      "fpoint",
      "fpos",
      "fput",
      "fread",
      "frewind",
      "frlen",
      "fsep",
      "fuzz",
      "fwrite",
      "gaminv",
      "gamma",
      "getoption",
      "getvarc",
      "getvarn",
      "hbound",
      "hms",
      "hosthelp",
      "hour",
      "ibessel",
      "index",
      "indexc",
      "indexw",
      "input",
      "inputc",
      "inputn",
      "int",
      "intck",
      "intnx",
      "intrr",
      "irr",
      "jbessel",
      "juldate",
      "kurtosis",
      "lag",
      "lbound",
      "left",
      "length",
      "lgamma",
      "libname",
      "libref",
      "log",
      "log10",
      "log2",
      "logpdf",
      "logpmf",
      "logsdf",
      "lowcase",
      "max",
      "mdy",
      "mean",
      "min",
      "minute",
      "mod",
      "month",
      "mopen",
      "mort",
      "n",
      "netpv",
      "nmiss",
      "normal",
      "note",
      "npv",
      "open",
      "ordinal",
      "pathname",
      "pdf",
      "peek",
      "peekc",
      "pmf",
      "point",
      "poisson",
      "poke",
      "probbeta",
      "probbnml",
      "probchi",
      "probf",
      "probgam",
      "probhypr",
      "probit",
      "probnegb",
      "probnorm",
      "probt",
      "put",
      "putc",
      "putn",
      "qtr",
      "quote",
      "ranbin",
      "rancau",
      "ranexp",
      "rangam",
      "range",
      "rank",
      "rannor",
      "ranpoi",
      "rantbl",
      "rantri",
      "ranuni",
      "repeat",
      "resolve",
      "reverse",
      "rewind",
      "right",
      "round",
      "saving",
      "scan",
      "sdf",
      "second",
      "sign",
      "sin",
      "sinh",
      "skewness",
      "soundex",
      "spedis",
      "sqrt",
      "std",
      "stderr",
      "stfips",
      "stname",
      "stnamel",
      "substr",
      "sum",
      "symget",
      "sysget",
      "sysmsg",
      "sysprod",
      "sysrc",
      "system",
      "tan",
      "tanh",
      "time",
      "timepart",
      "tinv",
      "tnonct",
      "today",
      "translate",
      "tranwrd",
      "trigamma",
      "trim",
      "trimn",
      "trunc",
      "uniform",
      "upcase",
      "uss",
      "var",
      "varfmt",
      "varinfmt",
      "varlabel",
      "varlen",
      "varname",
      "varnum",
      "varray",
      "varrayx",
      "vartype",
      "verify",
      "vformat",
      "vformatd",
      "vformatdx",
      "vformatn",
      "vformatnx",
      "vformatw",
      "vformatwx",
      "vformatx",
      "vinarray",
      "vinarrayx",
      "vinformat",
      "vinformatd",
      "vinformatdx",
      "vinformatn",
      "vinformatnx",
      "vinformatw",
      "vinformatwx",
      "vinformatx",
      "vlabel",
      "vlabelx",
      "vlength",
      "vlengthx",
      "vname",
      "vnamex",
      "vtype",
      "vtypex",
      "weekday",
      "year",
      "yyq",
      "zipfips",
      "zipname",
      "zipnamel",
      "zipstate"
    ], a2 = [
      "bquote",
      "nrbquote",
      "cmpres",
      "qcmpres",
      "compstor",
      "datatyp",
      "display",
      "do",
      "else",
      "end",
      "eval",
      "global",
      "goto",
      "if",
      "index",
      "input",
      "keydef",
      "label",
      "left",
      "length",
      "let",
      "local",
      "lowcase",
      "macro",
      "mend",
      "nrbquote",
      "nrquote",
      "nrstr",
      "put",
      "qcmpres",
      "qleft",
      "qlowcase",
      "qscan",
      "qsubstr",
      "qsysfunc",
      "qtrim",
      "quote",
      "qupcase",
      "scan",
      "str",
      "substr",
      "superq",
      "syscall",
      "sysevalf",
      "sysexec",
      "sysfunc",
      "sysget",
      "syslput",
      "sysprod",
      "sysrc",
      "sysrput",
      "then",
      "to",
      "trim",
      "unquote",
      "until",
      "upcase",
      "verify",
      "while",
      "window"
    ];
    return {
      name: "SAS",
      case_insensitive: true,
      keywords: {
        literal: [
          "null",
          "missing",
          "_all_",
          "_automatic_",
          "_character_",
          "_infile_",
          "_n_",
          "_name_",
          "_null_",
          "_numeric_",
          "_user_",
          "_webout_"
        ],
        keyword: i2
      },
      contains: [
        {
          // Distinct highlight for proc <proc>, data, run, quit
          className: "keyword",
          begin: /^\s*(proc [\w\d_]+|data|run|quit)[\s;]/
        },
        {
          // Macro variables
          className: "variable",
          begin: /&[a-zA-Z_&][a-zA-Z0-9_]*\.?/
        },
        {
          begin: [
            /^\s*/,
            /datalines;|cards;/,
            /(?:.*\n)+/,
            /^\s*;\s*$/
          ],
          className: {
            2: "keyword",
            3: "string"
          }
        },
        {
          begin: [
            /%mend|%macro/,
            /\s+/,
            /[a-zA-Z_&][a-zA-Z0-9_]*/
          ],
          className: {
            1: "built_in",
            3: "title.function"
          }
        },
        {
          // Built-in macro variables
          className: "built_in",
          begin: "%" + n.either(...a2)
        },
        {
          // User-defined macro functions
          className: "title.function",
          begin: /%[a-zA-Z_][a-zA-Z_0-9]*/
        },
        {
          // TODO: this is most likely an incorrect classification
          // built_in may need more nuance
          // https://github.com/highlightjs/highlight.js/issues/2521
          className: "meta",
          begin: n.either(...r2) + "(?=\\()"
        },
        {
          className: "string",
          variants: [
            e2.APOS_STRING_MODE,
            e2.QUOTE_STRING_MODE
          ]
        },
        e2.COMMENT("\\*", ";"),
        e2.C_BLOCK_COMMENT_MODE
      ]
    };
  }
  return ms = t2, ms;
}
var Es, hp;
function _N() {
  if (hp)
    return Es;
  hp = 1;
  function t2(e2) {
    const n = e2.regex, i2 = {
      className: "meta",
      begin: "@[A-Za-z]+"
    }, r2 = {
      className: "subst",
      variants: [
        { begin: "\\$[A-Za-z0-9_]+" },
        {
          begin: /\$\{/,
          end: /\}/
        }
      ]
    }, a2 = {
      className: "string",
      variants: [
        {
          begin: '"""',
          end: '"""'
        },
        {
          begin: '"',
          end: '"',
          illegal: "\\n",
          contains: [e2.BACKSLASH_ESCAPE]
        },
        {
          begin: '[a-z]+"',
          end: '"',
          illegal: "\\n",
          contains: [
            e2.BACKSLASH_ESCAPE,
            r2
          ]
        },
        {
          className: "string",
          begin: '[a-z]+"""',
          end: '"""',
          contains: [r2],
          relevance: 10
        }
      ]
    }, s2 = {
      className: "type",
      begin: "\\b[A-Z][A-Za-z0-9_]*",
      relevance: 0
    }, o2 = {
      className: "title",
      begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/,
      relevance: 0
    }, l2 = {
      className: "class",
      beginKeywords: "class object trait type",
      end: /[:={\[\n;]/,
      excludeEnd: true,
      contains: [
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        {
          beginKeywords: "extends with",
          relevance: 10
        },
        {
          begin: /\[/,
          end: /\]/,
          excludeBegin: true,
          excludeEnd: true,
          relevance: 0,
          contains: [
            s2,
            e2.C_LINE_COMMENT_MODE,
            e2.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          excludeBegin: true,
          excludeEnd: true,
          relevance: 0,
          contains: [
            s2,
            e2.C_LINE_COMMENT_MODE,
            e2.C_BLOCK_COMMENT_MODE
          ]
        },
        o2
      ]
    }, u2 = {
      className: "function",
      beginKeywords: "def",
      end: n.lookahead(/[:={\[(\n;]/),
      contains: [o2]
    }, _ = {
      begin: [
        /^\s*/,
        // Is first token on the line
        "extension",
        /\s+(?=[[(])/
        // followed by at least one space and `[` or `(`
      ],
      beginScope: { 2: "keyword" }
    }, d2 = {
      begin: [
        /^\s*/,
        // Is first token on the line
        /end/,
        /\s+/,
        /(extension\b)?/
        // `extension` is the only marker that follows an `end` that cannot be captured by another rule.
      ],
      beginScope: {
        2: "keyword",
        4: "keyword"
      }
    }, f2 = [
      { match: /\.inline\b/ },
      {
        begin: /\binline(?=\s)/,
        keywords: "inline"
      }
    ], b = {
      begin: [
        /\(\s*/,
        // Opening `(` of a parameter or argument list
        /using/,
        /\s+(?!\))/
        // Spaces not followed by `)`
      ],
      beginScope: { 2: "keyword" }
    };
    return {
      name: "Scala",
      keywords: {
        literal: "true false null",
        keyword: "type yield lazy override def with val var sealed abstract private trait object if then forSome for while do throw finally protected extends import final return else break new catch super class case package default try this match continue throws implicit export enum given transparent"
      },
      contains: [
        {
          begin: [
            "//>",
            /\s+/,
            /using/,
            /\s+/,
            /\S+/
          ],
          beginScope: {
            1: "comment",
            3: "keyword",
            5: "type"
          },
          end: /$/,
          contains: [
            {
              className: "string",
              begin: /\S+/
            }
          ]
        },
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        a2,
        s2,
        u2,
        l2,
        e2.C_NUMBER_MODE,
        _,
        d2,
        ...f2,
        b,
        i2
      ]
    };
  }
  return Es = t2, Es;
}
var gs, Rp;
function dN() {
  if (Rp)
    return gs;
  Rp = 1;
  function t2(e2) {
    const n = "[^\\(\\)\\[\\]\\{\\}\",'`;#|\\\\\\s]+", i2 = "(-|\\+)?\\d+([./]\\d+)?", r2 = i2 + "[+\\-]" + i2 + "i", a2 = {
      $pattern: n,
      built_in: "case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules ' * + , ,@ - ... / ; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?"
    }, s2 = {
      className: "literal",
      begin: "(#t|#f|#\\\\" + n + "|#\\\\.)"
    }, o2 = {
      className: "number",
      variants: [
        {
          begin: i2,
          relevance: 0
        },
        {
          begin: r2,
          relevance: 0
        },
        { begin: "#b[0-1]+(/[0-1]+)?" },
        { begin: "#o[0-7]+(/[0-7]+)?" },
        { begin: "#x[0-9a-f]+(/[0-9a-f]+)?" }
      ]
    }, l2 = e2.QUOTE_STRING_MODE, u2 = [
      e2.COMMENT(
        ";",
        "$",
        { relevance: 0 }
      ),
      e2.COMMENT("#\\|", "\\|#")
    ], _ = {
      begin: n,
      relevance: 0
    }, d2 = {
      className: "symbol",
      begin: "'" + n
    }, f2 = {
      endsWithParent: true,
      relevance: 0
    }, b = {
      variants: [
        { begin: /'/ },
        { begin: "`" }
      ],
      contains: [
        {
          begin: "\\(",
          end: "\\)",
          contains: [
            "self",
            s2,
            l2,
            o2,
            _,
            d2
          ]
        }
      ]
    }, c2 = {
      className: "name",
      relevance: 0,
      begin: n,
      keywords: a2
    }, g2 = {
      variants: [
        {
          begin: "\\(",
          end: "\\)"
        },
        {
          begin: "\\[",
          end: "\\]"
        }
      ],
      contains: [
        {
          begin: /lambda/,
          endsWithParent: true,
          returnBegin: true,
          contains: [
            c2,
            {
              endsParent: true,
              variants: [
                {
                  begin: /\(/,
                  end: /\)/
                },
                {
                  begin: /\[/,
                  end: /\]/
                }
              ],
              contains: [_]
            }
          ]
        },
        c2,
        f2
      ]
    };
    return f2.contains = [
      s2,
      o2,
      l2,
      _,
      d2,
      b,
      g2
    ].concat(u2), {
      name: "Scheme",
      aliases: ["scm"],
      illegal: /\S/,
      contains: [
        e2.SHEBANG(),
        o2,
        l2,
        d2,
        b,
        g2
      ].concat(u2)
    };
  }
  return gs = t2, gs;
}
var fs, Cp;
function pN() {
  if (Cp)
    return fs;
  Cp = 1;
  function t2(e2) {
    const n = [
      e2.C_NUMBER_MODE,
      {
        className: "string",
        begin: `'|"`,
        end: `'|"`,
        contains: [
          e2.BACKSLASH_ESCAPE,
          { begin: "''" }
        ]
      }
    ];
    return {
      name: "Scilab",
      aliases: ["sci"],
      keywords: {
        $pattern: /%?\w+/,
        keyword: "abort break case clear catch continue do elseif else endfunction end for function global if pause return resume select try then while",
        literal: "%f %F %t %T %pi %eps %inf %nan %e %i %z %s",
        built_in: (
          // Scilab has more than 2000 functions. Just list the most commons
          "abs and acos asin atan ceil cd chdir clearglobal cosh cos cumprod deff disp error exec execstr exists exp eye gettext floor fprintf fread fsolve imag isdef isempty isinfisnan isvector lasterror length load linspace list listfiles log10 log2 log max min msprintf mclose mopen ones or pathconvert poly printf prod pwd rand real round sinh sin size gsort sprintf sqrt strcat strcmps tring sum system tanh tan type typename warning zeros matrix"
        )
      },
      illegal: '("|#|/\\*|\\s+/\\w+)',
      contains: [
        {
          className: "function",
          beginKeywords: "function",
          end: "$",
          contains: [
            e2.UNDERSCORE_TITLE_MODE,
            {
              className: "params",
              begin: "\\(",
              end: "\\)"
            }
          ]
        },
        // seems to be a guard against [ident]' or [ident].
        // perhaps to prevent attributes from flagging as keywords?
        {
          begin: "[a-zA-Z_][a-zA-Z_0-9]*[\\.']+",
          relevance: 0
        },
        {
          begin: "\\[",
          end: "\\][\\.']*",
          relevance: 0,
          contains: n
        },
        e2.COMMENT("//", "$")
      ].concat(n)
    };
  }
  return fs = t2, fs;
}
var Ss, Np;
function mN() {
  if (Np)
    return Ss;
  Np = 1;
  const t2 = (u2) => ({
    IMPORTANT: {
      scope: "meta",
      begin: "!important"
    },
    BLOCK_COMMENT: u2.C_BLOCK_COMMENT_MODE,
    HEXCOLOR: {
      scope: "number",
      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
    },
    FUNCTION_DISPATCH: {
      className: "built_in",
      begin: /[\w-]+(?=\()/
    },
    ATTRIBUTE_SELECTOR_MODE: {
      scope: "selector-attr",
      begin: /\[/,
      end: /\]/,
      illegal: "$",
      contains: [
        u2.APOS_STRING_MODE,
        u2.QUOTE_STRING_MODE
      ]
    },
    CSS_NUMBER_MODE: {
      scope: "number",
      begin: u2.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
      relevance: 0
    },
    CSS_VARIABLE: {
      className: "attr",
      begin: /--[A-Za-z_][A-Za-z0-9_-]*/
    }
  }), e2 = [
    "a",
    "abbr",
    "address",
    "article",
    "aside",
    "audio",
    "b",
    "blockquote",
    "body",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "dd",
    "del",
    "details",
    "dfn",
    "div",
    "dl",
    "dt",
    "em",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "main",
    "mark",
    "menu",
    "nav",
    "object",
    "ol",
    "optgroup",
    "option",
    "p",
    "picture",
    "q",
    "quote",
    "samp",
    "section",
    "select",
    "source",
    "span",
    "strong",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "ul",
    "var",
    "video"
  ], n = [
    "defs",
    "g",
    "marker",
    "mask",
    "pattern",
    "svg",
    "switch",
    "symbol",
    "feBlend",
    "feColorMatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feFlood",
    "feGaussianBlur",
    "feImage",
    "feMerge",
    "feMorphology",
    "feOffset",
    "feSpecularLighting",
    "feTile",
    "feTurbulence",
    "linearGradient",
    "radialGradient",
    "stop",
    "circle",
    "ellipse",
    "image",
    "line",
    "path",
    "polygon",
    "polyline",
    "rect",
    "text",
    "use",
    "textPath",
    "tspan",
    "foreignObject",
    "clipPath"
  ], i2 = [
    ...e2,
    ...n
  ], r2 = [
    "any-hover",
    "any-pointer",
    "aspect-ratio",
    "color",
    "color-gamut",
    "color-index",
    "device-aspect-ratio",
    "device-height",
    "device-width",
    "display-mode",
    "forced-colors",
    "grid",
    "height",
    "hover",
    "inverted-colors",
    "monochrome",
    "orientation",
    "overflow-block",
    "overflow-inline",
    "pointer",
    "prefers-color-scheme",
    "prefers-contrast",
    "prefers-reduced-motion",
    "prefers-reduced-transparency",
    "resolution",
    "scan",
    "scripting",
    "update",
    "width",
    // TODO: find a better solution?
    "min-width",
    "max-width",
    "min-height",
    "max-height"
  ].sort().reverse(), a2 = [
    "active",
    "any-link",
    "blank",
    "checked",
    "current",
    "default",
    "defined",
    "dir",
    // dir()
    "disabled",
    "drop",
    "empty",
    "enabled",
    "first",
    "first-child",
    "first-of-type",
    "fullscreen",
    "future",
    "focus",
    "focus-visible",
    "focus-within",
    "has",
    // has()
    "host",
    // host or host()
    "host-context",
    // host-context()
    "hover",
    "indeterminate",
    "in-range",
    "invalid",
    "is",
    // is()
    "lang",
    // lang()
    "last-child",
    "last-of-type",
    "left",
    "link",
    "local-link",
    "not",
    // not()
    "nth-child",
    // nth-child()
    "nth-col",
    // nth-col()
    "nth-last-child",
    // nth-last-child()
    "nth-last-col",
    // nth-last-col()
    "nth-last-of-type",
    //nth-last-of-type()
    "nth-of-type",
    //nth-of-type()
    "only-child",
    "only-of-type",
    "optional",
    "out-of-range",
    "past",
    "placeholder-shown",
    "read-only",
    "read-write",
    "required",
    "right",
    "root",
    "scope",
    "target",
    "target-within",
    "user-invalid",
    "valid",
    "visited",
    "where"
    // where()
  ].sort().reverse(), s2 = [
    "after",
    "backdrop",
    "before",
    "cue",
    "cue-region",
    "first-letter",
    "first-line",
    "grammar-error",
    "marker",
    "part",
    "placeholder",
    "selection",
    "slotted",
    "spelling-error"
  ].sort().reverse(), o2 = [
    "accent-color",
    "align-content",
    "align-items",
    "align-self",
    "alignment-baseline",
    "all",
    "anchor-name",
    "animation",
    "animation-composition",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-range",
    "animation-range-end",
    "animation-range-start",
    "animation-timeline",
    "animation-timing-function",
    "appearance",
    "aspect-ratio",
    "backdrop-filter",
    "backface-visibility",
    "background",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-position-x",
    "background-position-y",
    "background-repeat",
    "background-size",
    "baseline-shift",
    "block-size",
    "border",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-collapse",
    "border-color",
    "border-end-end-radius",
    "border-end-start-radius",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-start-end-radius",
    "border-start-start-radius",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "bottom",
    "box-align",
    "box-decoration-break",
    "box-direction",
    "box-flex",
    "box-flex-group",
    "box-lines",
    "box-ordinal-group",
    "box-orient",
    "box-pack",
    "box-shadow",
    "box-sizing",
    "break-after",
    "break-before",
    "break-inside",
    "caption-side",
    "caret-color",
    "clear",
    "clip",
    "clip-path",
    "clip-rule",
    "color",
    "color-interpolation",
    "color-interpolation-filters",
    "color-profile",
    "color-rendering",
    "color-scheme",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columns",
    "contain",
    "contain-intrinsic-block-size",
    "contain-intrinsic-height",
    "contain-intrinsic-inline-size",
    "contain-intrinsic-size",
    "contain-intrinsic-width",
    "container",
    "container-name",
    "container-type",
    "content",
    "content-visibility",
    "counter-increment",
    "counter-reset",
    "counter-set",
    "cue",
    "cue-after",
    "cue-before",
    "cursor",
    "cx",
    "cy",
    "direction",
    "display",
    "dominant-baseline",
    "empty-cells",
    "enable-background",
    "field-sizing",
    "fill",
    "fill-opacity",
    "fill-rule",
    "filter",
    "flex",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-shrink",
    "flex-wrap",
    "float",
    "flood-color",
    "flood-opacity",
    "flow",
    "font",
    "font-display",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-optical-sizing",
    "font-palette",
    "font-size",
    "font-size-adjust",
    "font-smooth",
    "font-smoothing",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-synthesis-position",
    "font-synthesis-small-caps",
    "font-synthesis-style",
    "font-synthesis-weight",
    "font-variant",
    "font-variant-alternates",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-emoji",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-variation-settings",
    "font-weight",
    "forced-color-adjust",
    "gap",
    "glyph-orientation-horizontal",
    "glyph-orientation-vertical",
    "grid",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-start",
    "grid-gap",
    "grid-row",
    "grid-row-end",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "hanging-punctuation",
    "height",
    "hyphenate-character",
    "hyphenate-limit-chars",
    "hyphens",
    "icon",
    "image-orientation",
    "image-rendering",
    "image-resolution",
    "ime-mode",
    "initial-letter",
    "initial-letter-align",
    "inline-size",
    "inset",
    "inset-area",
    "inset-block",
    "inset-block-end",
    "inset-block-start",
    "inset-inline",
    "inset-inline-end",
    "inset-inline-start",
    "isolation",
    "justify-content",
    "justify-items",
    "justify-self",
    "kerning",
    "left",
    "letter-spacing",
    "lighting-color",
    "line-break",
    "line-height",
    "line-height-step",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "margin",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "margin-trim",
    "marker",
    "marker-end",
    "marker-mid",
    "marker-start",
    "marks",
    "mask",
    "mask-border",
    "mask-border-mode",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-border-slice",
    "mask-border-source",
    "mask-border-width",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "masonry-auto-flow",
    "math-depth",
    "math-shift",
    "math-style",
    "max-block-size",
    "max-height",
    "max-inline-size",
    "max-width",
    "min-block-size",
    "min-height",
    "min-inline-size",
    "min-width",
    "mix-blend-mode",
    "nav-down",
    "nav-index",
    "nav-left",
    "nav-right",
    "nav-up",
    "none",
    "normal",
    "object-fit",
    "object-position",
    "offset",
    "offset-anchor",
    "offset-distance",
    "offset-path",
    "offset-position",
    "offset-rotate",
    "opacity",
    "order",
    "orphans",
    "outline",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "overflow",
    "overflow-anchor",
    "overflow-block",
    "overflow-clip-margin",
    "overflow-inline",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "overlay",
    "overscroll-behavior",
    "overscroll-behavior-block",
    "overscroll-behavior-inline",
    "overscroll-behavior-x",
    "overscroll-behavior-y",
    "padding",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "page",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "paint-order",
    "pause",
    "pause-after",
    "pause-before",
    "perspective",
    "perspective-origin",
    "place-content",
    "place-items",
    "place-self",
    "pointer-events",
    "position",
    "position-anchor",
    "position-visibility",
    "print-color-adjust",
    "quotes",
    "r",
    "resize",
    "rest",
    "rest-after",
    "rest-before",
    "right",
    "rotate",
    "row-gap",
    "ruby-align",
    "ruby-position",
    "scale",
    "scroll-behavior",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-stop",
    "scroll-snap-type",
    "scroll-timeline",
    "scroll-timeline-axis",
    "scroll-timeline-name",
    "scrollbar-color",
    "scrollbar-gutter",
    "scrollbar-width",
    "shape-image-threshold",
    "shape-margin",
    "shape-outside",
    "shape-rendering",
    "speak",
    "speak-as",
    "src",
    // @font-face
    "stop-color",
    "stop-opacity",
    "stroke",
    "stroke-dasharray",
    "stroke-dashoffset",
    "stroke-linecap",
    "stroke-linejoin",
    "stroke-miterlimit",
    "stroke-opacity",
    "stroke-width",
    "tab-size",
    "table-layout",
    "text-align",
    "text-align-all",
    "text-align-last",
    "text-anchor",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-line",
    "text-decoration-skip",
    "text-decoration-skip-ink",
    "text-decoration-style",
    "text-decoration-thickness",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-style",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-size-adjust",
    "text-transform",
    "text-underline-offset",
    "text-underline-position",
    "text-wrap",
    "text-wrap-mode",
    "text-wrap-style",
    "timeline-scope",
    "top",
    "touch-action",
    "transform",
    "transform-box",
    "transform-origin",
    "transform-style",
    "transition",
    "transition-behavior",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "translate",
    "unicode-bidi",
    "user-modify",
    "user-select",
    "vector-effect",
    "vertical-align",
    "view-timeline",
    "view-timeline-axis",
    "view-timeline-inset",
    "view-timeline-name",
    "view-transition-name",
    "visibility",
    "voice-balance",
    "voice-duration",
    "voice-family",
    "voice-pitch",
    "voice-range",
    "voice-rate",
    "voice-stress",
    "voice-volume",
    "white-space",
    "white-space-collapse",
    "widows",
    "width",
    "will-change",
    "word-break",
    "word-spacing",
    "word-wrap",
    "writing-mode",
    "x",
    "y",
    "z-index",
    "zoom"
  ].sort().reverse();
  function l2(u2) {
    const _ = t2(u2), d2 = s2, f2 = a2, b = "@[a-z-]+", c2 = "and or not only", g2 = {
      className: "variable",
      begin: "(\\$[a-zA-Z-][a-zA-Z0-9_-]*)\\b",
      relevance: 0
    };
    return {
      name: "SCSS",
      case_insensitive: true,
      illegal: "[=/|']",
      contains: [
        u2.C_LINE_COMMENT_MODE,
        u2.C_BLOCK_COMMENT_MODE,
        // to recognize keyframe 40% etc which are outside the scope of our
        // attribute value mode
        _.CSS_NUMBER_MODE,
        {
          className: "selector-id",
          begin: "#[A-Za-z0-9_-]+",
          relevance: 0
        },
        {
          className: "selector-class",
          begin: "\\.[A-Za-z0-9_-]+",
          relevance: 0
        },
        _.ATTRIBUTE_SELECTOR_MODE,
        {
          className: "selector-tag",
          begin: "\\b(" + i2.join("|") + ")\\b",
          // was there, before, but why?
          relevance: 0
        },
        {
          className: "selector-pseudo",
          begin: ":(" + f2.join("|") + ")"
        },
        {
          className: "selector-pseudo",
          begin: ":(:)?(" + d2.join("|") + ")"
        },
        g2,
        {
          // pseudo-selector params
          begin: /\(/,
          end: /\)/,
          contains: [_.CSS_NUMBER_MODE]
        },
        _.CSS_VARIABLE,
        {
          className: "attribute",
          begin: "\\b(" + o2.join("|") + ")\\b"
        },
        { begin: "\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b" },
        {
          begin: /:/,
          end: /[;}{]/,
          relevance: 0,
          contains: [
            _.BLOCK_COMMENT,
            g2,
            _.HEXCOLOR,
            _.CSS_NUMBER_MODE,
            u2.QUOTE_STRING_MODE,
            u2.APOS_STRING_MODE,
            _.IMPORTANT,
            _.FUNCTION_DISPATCH
          ]
        },
        // matching these here allows us to treat them more like regular CSS
        // rules so everything between the {} gets regular rule highlighting,
        // which is what we want for page and font-face
        {
          begin: "@(page|font-face)",
          keywords: {
            $pattern: b,
            keyword: "@page @font-face"
          }
        },
        {
          begin: "@",
          end: "[{;]",
          returnBegin: true,
          keywords: {
            $pattern: /[a-z-]+/,
            keyword: c2,
            attribute: r2.join(" ")
          },
          contains: [
            {
              begin: b,
              className: "keyword"
            },
            {
              begin: /[a-z-]+(?=:)/,
              className: "attribute"
            },
            g2,
            u2.QUOTE_STRING_MODE,
            u2.APOS_STRING_MODE,
            _.HEXCOLOR,
            _.CSS_NUMBER_MODE
          ]
        },
        _.FUNCTION_DISPATCH
      ]
    };
  }
  return Ss = l2, Ss;
}
var bs, vp;
function EN() {
  if (vp)
    return bs;
  vp = 1;
  function t2(e2) {
    return {
      name: "Shell Session",
      aliases: [
        "console",
        "shellsession"
      ],
      contains: [
        {
          className: "meta.prompt",
          // We cannot add \s (spaces) in the regular expression otherwise it will be too broad and produce unexpected result.
          // For instance, in the following example, it would match "echo /path/to/home >" as a prompt:
          // echo /path/to/home > t.exe
          begin: /^\s{0,3}[/~\w\d[\]()@-]*[>%$#][ ]?/,
          starts: {
            end: /[^\\](?=\s*$)/,
            subLanguage: "bash"
          }
        }
      ]
    };
  }
  return bs = t2, bs;
}
var Ts, Op;
function gN() {
  if (Op)
    return Ts;
  Op = 1;
  function t2(e2) {
    const n = [
      "add",
      "and",
      "cmp",
      "cmpg",
      "cmpl",
      "const",
      "div",
      "double",
      "float",
      "goto",
      "if",
      "int",
      "long",
      "move",
      "mul",
      "neg",
      "new",
      "nop",
      "not",
      "or",
      "rem",
      "return",
      "shl",
      "shr",
      "sput",
      "sub",
      "throw",
      "ushr",
      "xor"
    ], i2 = [
      "aget",
      "aput",
      "array",
      "check",
      "execute",
      "fill",
      "filled",
      "goto/16",
      "goto/32",
      "iget",
      "instance",
      "invoke",
      "iput",
      "monitor",
      "packed",
      "sget",
      "sparse"
    ], r2 = [
      "transient",
      "constructor",
      "abstract",
      "final",
      "synthetic",
      "public",
      "private",
      "protected",
      "static",
      "bridge",
      "system"
    ];
    return {
      name: "Smali",
      contains: [
        {
          className: "string",
          begin: '"',
          end: '"',
          relevance: 0
        },
        e2.COMMENT(
          "#",
          "$",
          { relevance: 0 }
        ),
        {
          className: "keyword",
          variants: [
            { begin: "\\s*\\.end\\s[a-zA-Z0-9]*" },
            {
              begin: "^[ ]*\\.[a-zA-Z]*",
              relevance: 0
            },
            {
              begin: "\\s:[a-zA-Z_0-9]*",
              relevance: 0
            },
            { begin: "\\s(" + r2.join("|") + ")" }
          ]
        },
        {
          className: "built_in",
          variants: [
            { begin: "\\s(" + n.join("|") + ")\\s" },
            {
              begin: "\\s(" + n.join("|") + ")((-|/)[a-zA-Z0-9]+)+\\s",
              relevance: 10
            },
            {
              begin: "\\s(" + i2.join("|") + ")((-|/)[a-zA-Z0-9]+)*\\s",
              relevance: 10
            }
          ]
        },
        {
          className: "class",
          begin: `L[^(;:
]*;`,
          relevance: 0
        },
        { begin: "[vp][0-9]+" }
      ]
    };
  }
  return Ts = t2, Ts;
}
var hs, Ap;
function fN() {
  if (Ap)
    return hs;
  Ap = 1;
  function t2(e2) {
    const n = "[a-z][a-zA-Z0-9_]*", i2 = {
      className: "string",
      begin: "\\$.{1}"
    }, r2 = {
      className: "symbol",
      begin: "#" + e2.UNDERSCORE_IDENT_RE
    };
    return {
      name: "Smalltalk",
      aliases: ["st"],
      keywords: [
        "self",
        "super",
        "nil",
        "true",
        "false",
        "thisContext"
      ],
      contains: [
        e2.COMMENT('"', '"'),
        e2.APOS_STRING_MODE,
        {
          className: "type",
          begin: "\\b[A-Z][A-Za-z0-9_]*",
          relevance: 0
        },
        {
          begin: n + ":",
          relevance: 0
        },
        e2.C_NUMBER_MODE,
        r2,
        i2,
        {
          // This looks more complicated than needed to avoid combinatorial
          // explosion under V8. It effectively means `| var1 var2 ... |` with
          // whitespace adjacent to `|` being optional.
          begin: "\\|[ ]*" + n + "([ ]+" + n + ")*[ ]*\\|",
          returnBegin: true,
          end: /\|/,
          illegal: /\S/,
          contains: [{ begin: "(\\|[ ]*)?" + n }]
        },
        {
          begin: "#\\(",
          end: "\\)",
          contains: [
            e2.APOS_STRING_MODE,
            i2,
            e2.C_NUMBER_MODE,
            r2
          ]
        }
      ]
    };
  }
  return hs = t2, hs;
}
var Rs, yp;
function SN() {
  if (yp)
    return Rs;
  yp = 1;
  function t2(e2) {
    return {
      name: "SML (Standard ML)",
      aliases: ["ml"],
      keywords: {
        $pattern: "[a-z_]\\w*!?",
        keyword: (
          /* according to Definition of Standard ML 97  */
          "abstype and andalso as case datatype do else end eqtype exception fn fun functor handle if in include infix infixr let local nonfix of op open orelse raise rec sharing sig signature struct structure then type val with withtype where while"
        ),
        built_in: (
          /* built-in types according to basis library */
          "array bool char exn int list option order real ref string substring vector unit word"
        ),
        literal: "true false NONE SOME LESS EQUAL GREATER nil"
      },
      illegal: /\/\/|>>/,
      contains: [
        {
          className: "literal",
          begin: /\[(\|\|)?\]|\(\)/,
          relevance: 0
        },
        e2.COMMENT(
          "\\(\\*",
          "\\*\\)",
          { contains: ["self"] }
        ),
        {
          /* type variable */
          className: "symbol",
          begin: "'[A-Za-z_](?!')[\\w']*"
          /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
        },
        {
          /* polymorphic variant */
          className: "type",
          begin: "`[A-Z][\\w']*"
        },
        {
          /* module or constructor */
          className: "type",
          begin: "\\b[A-Z][\\w']*",
          relevance: 0
        },
        {
          /* don't color identifiers, but safely catch all identifiers with ' */
          begin: "[a-z_]\\w*'[\\w']*"
        },
        e2.inherit(e2.APOS_STRING_MODE, {
          className: "string",
          relevance: 0
        }),
        e2.inherit(e2.QUOTE_STRING_MODE, { illegal: null }),
        {
          className: "number",
          begin: "\\b(0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)",
          relevance: 0
        },
        {
          begin: /[-=]>/
          // relevance booster
        }
      ]
    };
  }
  return Rs = t2, Rs;
}
var Cs, Ip;
function bN() {
  if (Ip)
    return Cs;
  Ip = 1;
  function t2(e2) {
    const n = {
      className: "variable",
      begin: /\b_+[a-zA-Z]\w*/
    }, i2 = {
      className: "title",
      begin: /[a-zA-Z][a-zA-Z_0-9]*_fnc_[a-zA-Z_0-9]+/
    }, r2 = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"',
          contains: [
            {
              begin: '""',
              relevance: 0
            }
          ]
        },
        {
          begin: "'",
          end: "'",
          contains: [
            {
              begin: "''",
              relevance: 0
            }
          ]
        }
      ]
    }, a2 = [
      "break",
      "breakWith",
      "breakOut",
      "breakTo",
      "case",
      "catch",
      "continue",
      "continueWith",
      "default",
      "do",
      "else",
      "exit",
      "exitWith",
      "for",
      "forEach",
      "from",
      "if",
      "local",
      "private",
      "switch",
      "step",
      "then",
      "throw",
      "to",
      "try",
      "waitUntil",
      "while",
      "with"
    ], s2 = [
      "blufor",
      "civilian",
      "configNull",
      "controlNull",
      "displayNull",
      "diaryRecordNull",
      "east",
      "endl",
      "false",
      "grpNull",
      "independent",
      "lineBreak",
      "locationNull",
      "nil",
      "objNull",
      "opfor",
      "pi",
      "resistance",
      "scriptNull",
      "sideAmbientLife",
      "sideEmpty",
      "sideEnemy",
      "sideFriendly",
      "sideLogic",
      "sideUnknown",
      "taskNull",
      "teamMemberNull",
      "true",
      "west"
    ], o2 = [
      "abs",
      "accTime",
      "acos",
      "action",
      "actionIDs",
      "actionKeys",
      "actionKeysEx",
      "actionKeysImages",
      "actionKeysNames",
      "actionKeysNamesArray",
      "actionName",
      "actionParams",
      "activateAddons",
      "activatedAddons",
      "activateKey",
      "activeTitleEffectParams",
      "add3DENConnection",
      "add3DENEventHandler",
      "add3DENLayer",
      "addAction",
      "addBackpack",
      "addBackpackCargo",
      "addBackpackCargoGlobal",
      "addBackpackGlobal",
      "addBinocularItem",
      "addCamShake",
      "addCuratorAddons",
      "addCuratorCameraArea",
      "addCuratorEditableObjects",
      "addCuratorEditingArea",
      "addCuratorPoints",
      "addEditorObject",
      "addEventHandler",
      "addForce",
      "addForceGeneratorRTD",
      "addGoggles",
      "addGroupIcon",
      "addHandgunItem",
      "addHeadgear",
      "addItem",
      "addItemCargo",
      "addItemCargoGlobal",
      "addItemPool",
      "addItemToBackpack",
      "addItemToUniform",
      "addItemToVest",
      "addLiveStats",
      "addMagazine",
      "addMagazineAmmoCargo",
      "addMagazineCargo",
      "addMagazineCargoGlobal",
      "addMagazineGlobal",
      "addMagazinePool",
      "addMagazines",
      "addMagazineTurret",
      "addMenu",
      "addMenuItem",
      "addMissionEventHandler",
      "addMPEventHandler",
      "addMusicEventHandler",
      "addonFiles",
      "addOwnedMine",
      "addPlayerScores",
      "addPrimaryWeaponItem",
      "addPublicVariableEventHandler",
      "addRating",
      "addResources",
      "addScore",
      "addScoreSide",
      "addSecondaryWeaponItem",
      "addSwitchableUnit",
      "addTeamMember",
      "addToRemainsCollector",
      "addTorque",
      "addUniform",
      "addUserActionEventHandler",
      "addVehicle",
      "addVest",
      "addWaypoint",
      "addWeapon",
      "addWeaponCargo",
      "addWeaponCargoGlobal",
      "addWeaponGlobal",
      "addWeaponItem",
      "addWeaponPool",
      "addWeaponTurret",
      "addWeaponWithAttachmentsCargo",
      "addWeaponWithAttachmentsCargoGlobal",
      "admin",
      "agent",
      "agents",
      "AGLToASL",
      "aimedAtTarget",
      "aimPos",
      "airDensityCurveRTD",
      "airDensityRTD",
      "airplaneThrottle",
      "airportSide",
      "AISFinishHeal",
      "alive",
      "all3DENEntities",
      "allActiveTitleEffects",
      "allAddonsInfo",
      "allAirports",
      "allControls",
      "allCurators",
      "allCutLayers",
      "allDead",
      "allDeadMen",
      "allDiaryRecords",
      "allDiarySubjects",
      "allDisplays",
      "allEnv3DSoundSources",
      "allGroups",
      "allLODs",
      "allMapMarkers",
      "allMines",
      "allMissionObjects",
      "allObjects",
      "allow3DMode",
      "allowCrewInImmobile",
      "allowCuratorLogicIgnoreAreas",
      "allowDamage",
      "allowDammage",
      "allowedService",
      "allowFileOperations",
      "allowFleeing",
      "allowGetIn",
      "allowService",
      "allowSprint",
      "allPlayers",
      "allSimpleObjects",
      "allSites",
      "allTurrets",
      "allUnits",
      "allUnitsUAV",
      "allUsers",
      "allVariables",
      "ambientTemperature",
      "ammo",
      "ammoOnPylon",
      "and",
      "animate",
      "animateBay",
      "animateDoor",
      "animatePylon",
      "animateSource",
      "animationNames",
      "animationPhase",
      "animationSourcePhase",
      "animationState",
      "apertureParams",
      "append",
      "apply",
      "armoryPoints",
      "arrayIntersect",
      "asin",
      "ASLToAGL",
      "ASLToATL",
      "assert",
      "assignAsCargo",
      "assignAsCargoIndex",
      "assignAsCommander",
      "assignAsDriver",
      "assignAsGunner",
      "assignAsTurret",
      "assignCurator",
      "assignedCargo",
      "assignedCommander",
      "assignedDriver",
      "assignedGroup",
      "assignedGunner",
      "assignedItems",
      "assignedTarget",
      "assignedTeam",
      "assignedVehicle",
      "assignedVehicleRole",
      "assignedVehicles",
      "assignItem",
      "assignTeam",
      "assignToAirport",
      "atan",
      "atan2",
      "atg",
      "ATLToASL",
      "attachedObject",
      "attachedObjects",
      "attachedTo",
      "attachObject",
      "attachTo",
      "attackEnabled",
      "awake",
      "backpack",
      "backpackCargo",
      "backpackContainer",
      "backpackItems",
      "backpackMagazines",
      "backpackSpaceFor",
      "behaviour",
      "benchmark",
      "bezierInterpolation",
      "binocular",
      "binocularItems",
      "binocularMagazine",
      "boundingBox",
      "boundingBoxReal",
      "boundingCenter",
      "brakesDisabled",
      "briefingName",
      "buildingExit",
      "buildingPos",
      "buldozer_EnableRoadDiag",
      "buldozer_IsEnabledRoadDiag",
      "buldozer_LoadNewRoads",
      "buldozer_reloadOperMap",
      "buttonAction",
      "buttonSetAction",
      "cadetMode",
      "calculatePath",
      "calculatePlayerVisibilityByFriendly",
      "call",
      "callExtension",
      "camCommand",
      "camCommit",
      "camCommitPrepared",
      "camCommitted",
      "camConstuctionSetParams",
      "camCreate",
      "camDestroy",
      "cameraEffect",
      "cameraEffectEnableHUD",
      "cameraInterest",
      "cameraOn",
      "cameraView",
      "campaignConfigFile",
      "camPreload",
      "camPreloaded",
      "camPrepareBank",
      "camPrepareDir",
      "camPrepareDive",
      "camPrepareFocus",
      "camPrepareFov",
      "camPrepareFovRange",
      "camPreparePos",
      "camPrepareRelPos",
      "camPrepareTarget",
      "camSetBank",
      "camSetDir",
      "camSetDive",
      "camSetFocus",
      "camSetFov",
      "camSetFovRange",
      "camSetPos",
      "camSetRelPos",
      "camSetTarget",
      "camTarget",
      "camUseNVG",
      "canAdd",
      "canAddItemToBackpack",
      "canAddItemToUniform",
      "canAddItemToVest",
      "cancelSimpleTaskDestination",
      "canDeployWeapon",
      "canFire",
      "canMove",
      "canSlingLoad",
      "canStand",
      "canSuspend",
      "canTriggerDynamicSimulation",
      "canUnloadInCombat",
      "canVehicleCargo",
      "captive",
      "captiveNum",
      "cbChecked",
      "cbSetChecked",
      "ceil",
      "channelEnabled",
      "cheatsEnabled",
      "checkAIFeature",
      "checkVisibility",
      "className",
      "clear3DENAttribute",
      "clear3DENInventory",
      "clearAllItemsFromBackpack",
      "clearBackpackCargo",
      "clearBackpackCargoGlobal",
      "clearForcesRTD",
      "clearGroupIcons",
      "clearItemCargo",
      "clearItemCargoGlobal",
      "clearItemPool",
      "clearMagazineCargo",
      "clearMagazineCargoGlobal",
      "clearMagazinePool",
      "clearOverlay",
      "clearRadio",
      "clearWeaponCargo",
      "clearWeaponCargoGlobal",
      "clearWeaponPool",
      "clientOwner",
      "closeDialog",
      "closeDisplay",
      "closeOverlay",
      "collapseObjectTree",
      "collect3DENHistory",
      "collectiveRTD",
      "collisionDisabledWith",
      "combatBehaviour",
      "combatMode",
      "commandArtilleryFire",
      "commandChat",
      "commander",
      "commandFire",
      "commandFollow",
      "commandFSM",
      "commandGetOut",
      "commandingMenu",
      "commandMove",
      "commandRadio",
      "commandStop",
      "commandSuppressiveFire",
      "commandTarget",
      "commandWatch",
      "comment",
      "commitOverlay",
      "compatibleItems",
      "compatibleMagazines",
      "compile",
      "compileFinal",
      "compileScript",
      "completedFSM",
      "composeText",
      "configClasses",
      "configFile",
      "configHierarchy",
      "configName",
      "configOf",
      "configProperties",
      "configSourceAddonList",
      "configSourceMod",
      "configSourceModList",
      "confirmSensorTarget",
      "connectTerminalToUAV",
      "connectToServer",
      "controlsGroupCtrl",
      "conversationDisabled",
      "copyFromClipboard",
      "copyToClipboard",
      "copyWaypoints",
      "cos",
      "count",
      "countEnemy",
      "countFriendly",
      "countSide",
      "countType",
      "countUnknown",
      "create3DENComposition",
      "create3DENEntity",
      "createAgent",
      "createCenter",
      "createDialog",
      "createDiaryLink",
      "createDiaryRecord",
      "createDiarySubject",
      "createDisplay",
      "createGearDialog",
      "createGroup",
      "createGuardedPoint",
      "createHashMap",
      "createHashMapFromArray",
      "createLocation",
      "createMarker",
      "createMarkerLocal",
      "createMenu",
      "createMine",
      "createMissionDisplay",
      "createMPCampaignDisplay",
      "createSimpleObject",
      "createSimpleTask",
      "createSite",
      "createSoundSource",
      "createTask",
      "createTeam",
      "createTrigger",
      "createUnit",
      "createVehicle",
      "createVehicleCrew",
      "createVehicleLocal",
      "crew",
      "ctAddHeader",
      "ctAddRow",
      "ctClear",
      "ctCurSel",
      "ctData",
      "ctFindHeaderRows",
      "ctFindRowHeader",
      "ctHeaderControls",
      "ctHeaderCount",
      "ctRemoveHeaders",
      "ctRemoveRows",
      "ctrlActivate",
      "ctrlAddEventHandler",
      "ctrlAngle",
      "ctrlAnimateModel",
      "ctrlAnimationPhaseModel",
      "ctrlAt",
      "ctrlAutoScrollDelay",
      "ctrlAutoScrollRewind",
      "ctrlAutoScrollSpeed",
      "ctrlBackgroundColor",
      "ctrlChecked",
      "ctrlClassName",
      "ctrlCommit",
      "ctrlCommitted",
      "ctrlCreate",
      "ctrlDelete",
      "ctrlEnable",
      "ctrlEnabled",
      "ctrlFade",
      "ctrlFontHeight",
      "ctrlForegroundColor",
      "ctrlHTMLLoaded",
      "ctrlIDC",
      "ctrlIDD",
      "ctrlMapAnimAdd",
      "ctrlMapAnimClear",
      "ctrlMapAnimCommit",
      "ctrlMapAnimDone",
      "ctrlMapCursor",
      "ctrlMapMouseOver",
      "ctrlMapPosition",
      "ctrlMapScale",
      "ctrlMapScreenToWorld",
      "ctrlMapSetPosition",
      "ctrlMapWorldToScreen",
      "ctrlModel",
      "ctrlModelDirAndUp",
      "ctrlModelScale",
      "ctrlMousePosition",
      "ctrlParent",
      "ctrlParentControlsGroup",
      "ctrlPosition",
      "ctrlRemoveAllEventHandlers",
      "ctrlRemoveEventHandler",
      "ctrlScale",
      "ctrlScrollValues",
      "ctrlSetActiveColor",
      "ctrlSetAngle",
      "ctrlSetAutoScrollDelay",
      "ctrlSetAutoScrollRewind",
      "ctrlSetAutoScrollSpeed",
      "ctrlSetBackgroundColor",
      "ctrlSetChecked",
      "ctrlSetDisabledColor",
      "ctrlSetEventHandler",
      "ctrlSetFade",
      "ctrlSetFocus",
      "ctrlSetFont",
      "ctrlSetFontH1",
      "ctrlSetFontH1B",
      "ctrlSetFontH2",
      "ctrlSetFontH2B",
      "ctrlSetFontH3",
      "ctrlSetFontH3B",
      "ctrlSetFontH4",
      "ctrlSetFontH4B",
      "ctrlSetFontH5",
      "ctrlSetFontH5B",
      "ctrlSetFontH6",
      "ctrlSetFontH6B",
      "ctrlSetFontHeight",
      "ctrlSetFontHeightH1",
      "ctrlSetFontHeightH2",
      "ctrlSetFontHeightH3",
      "ctrlSetFontHeightH4",
      "ctrlSetFontHeightH5",
      "ctrlSetFontHeightH6",
      "ctrlSetFontHeightSecondary",
      "ctrlSetFontP",
      "ctrlSetFontPB",
      "ctrlSetFontSecondary",
      "ctrlSetForegroundColor",
      "ctrlSetModel",
      "ctrlSetModelDirAndUp",
      "ctrlSetModelScale",
      "ctrlSetMousePosition",
      "ctrlSetPixelPrecision",
      "ctrlSetPosition",
      "ctrlSetPositionH",
      "ctrlSetPositionW",
      "ctrlSetPositionX",
      "ctrlSetPositionY",
      "ctrlSetScale",
      "ctrlSetScrollValues",
      "ctrlSetShadow",
      "ctrlSetStructuredText",
      "ctrlSetText",
      "ctrlSetTextColor",
      "ctrlSetTextColorSecondary",
      "ctrlSetTextSecondary",
      "ctrlSetTextSelection",
      "ctrlSetTooltip",
      "ctrlSetTooltipColorBox",
      "ctrlSetTooltipColorShade",
      "ctrlSetTooltipColorText",
      "ctrlSetTooltipMaxWidth",
      "ctrlSetURL",
      "ctrlSetURLOverlayMode",
      "ctrlShadow",
      "ctrlShow",
      "ctrlShown",
      "ctrlStyle",
      "ctrlText",
      "ctrlTextColor",
      "ctrlTextHeight",
      "ctrlTextSecondary",
      "ctrlTextSelection",
      "ctrlTextWidth",
      "ctrlTooltip",
      "ctrlType",
      "ctrlURL",
      "ctrlURLOverlayMode",
      "ctrlVisible",
      "ctRowControls",
      "ctRowCount",
      "ctSetCurSel",
      "ctSetData",
      "ctSetHeaderTemplate",
      "ctSetRowTemplate",
      "ctSetValue",
      "ctValue",
      "curatorAddons",
      "curatorCamera",
      "curatorCameraArea",
      "curatorCameraAreaCeiling",
      "curatorCoef",
      "curatorEditableObjects",
      "curatorEditingArea",
      "curatorEditingAreaType",
      "curatorMouseOver",
      "curatorPoints",
      "curatorRegisteredObjects",
      "curatorSelected",
      "curatorWaypointCost",
      "current3DENOperation",
      "currentChannel",
      "currentCommand",
      "currentMagazine",
      "currentMagazineDetail",
      "currentMagazineDetailTurret",
      "currentMagazineTurret",
      "currentMuzzle",
      "currentNamespace",
      "currentPilot",
      "currentTask",
      "currentTasks",
      "currentThrowable",
      "currentVisionMode",
      "currentWaypoint",
      "currentWeapon",
      "currentWeaponMode",
      "currentWeaponTurret",
      "currentZeroing",
      "cursorObject",
      "cursorTarget",
      "customChat",
      "customRadio",
      "customWaypointPosition",
      "cutFadeOut",
      "cutObj",
      "cutRsc",
      "cutText",
      "damage",
      "date",
      "dateToNumber",
      "dayTime",
      "deActivateKey",
      "debriefingText",
      "debugFSM",
      "debugLog",
      "decayGraphValues",
      "deg",
      "delete3DENEntities",
      "deleteAt",
      "deleteCenter",
      "deleteCollection",
      "deleteEditorObject",
      "deleteGroup",
      "deleteGroupWhenEmpty",
      "deleteIdentity",
      "deleteLocation",
      "deleteMarker",
      "deleteMarkerLocal",
      "deleteRange",
      "deleteResources",
      "deleteSite",
      "deleteStatus",
      "deleteTeam",
      "deleteVehicle",
      "deleteVehicleCrew",
      "deleteWaypoint",
      "detach",
      "detectedMines",
      "diag_activeMissionFSMs",
      "diag_activeScripts",
      "diag_activeSQFScripts",
      "diag_activeSQSScripts",
      "diag_allMissionEventHandlers",
      "diag_captureFrame",
      "diag_captureFrameToFile",
      "diag_captureSlowFrame",
      "diag_codePerformance",
      "diag_deltaTime",
      "diag_drawmode",
      "diag_dumpCalltraceToLog",
      "diag_dumpScriptAssembly",
      "diag_dumpTerrainSynth",
      "diag_dynamicSimulationEnd",
      "diag_enable",
      "diag_enabled",
      "diag_exportConfig",
      "diag_exportTerrainSVG",
      "diag_fps",
      "diag_fpsmin",
      "diag_frameno",
      "diag_getTerrainSegmentOffset",
      "diag_lightNewLoad",
      "diag_list",
      "diag_localized",
      "diag_log",
      "diag_logSlowFrame",
      "diag_mergeConfigFile",
      "diag_recordTurretLimits",
      "diag_resetFSM",
      "diag_resetshapes",
      "diag_scope",
      "diag_setLightNew",
      "diag_stacktrace",
      "diag_tickTime",
      "diag_toggle",
      "dialog",
      "diarySubjectExists",
      "didJIP",
      "didJIPOwner",
      "difficulty",
      "difficultyEnabled",
      "difficultyEnabledRTD",
      "difficultyOption",
      "direction",
      "directionStabilizationEnabled",
      "directSay",
      "disableAI",
      "disableBrakes",
      "disableCollisionWith",
      "disableConversation",
      "disableDebriefingStats",
      "disableMapIndicators",
      "disableNVGEquipment",
      "disableRemoteSensors",
      "disableSerialization",
      "disableTIEquipment",
      "disableUAVConnectability",
      "disableUserInput",
      "displayAddEventHandler",
      "displayChild",
      "displayCtrl",
      "displayParent",
      "displayRemoveAllEventHandlers",
      "displayRemoveEventHandler",
      "displaySetEventHandler",
      "displayUniqueName",
      "displayUpdate",
      "dissolveTeam",
      "distance",
      "distance2D",
      "distanceSqr",
      "distributionRegion",
      "do3DENAction",
      "doArtilleryFire",
      "doFire",
      "doFollow",
      "doFSM",
      "doGetOut",
      "doMove",
      "doorPhase",
      "doStop",
      "doSuppressiveFire",
      "doTarget",
      "doWatch",
      "drawArrow",
      "drawEllipse",
      "drawIcon",
      "drawIcon3D",
      "drawLaser",
      "drawLine",
      "drawLine3D",
      "drawLink",
      "drawLocation",
      "drawPolygon",
      "drawRectangle",
      "drawTriangle",
      "driver",
      "drop",
      "dynamicSimulationDistance",
      "dynamicSimulationDistanceCoef",
      "dynamicSimulationEnabled",
      "dynamicSimulationSystemEnabled",
      "echo",
      "edit3DENMissionAttributes",
      "editObject",
      "editorSetEventHandler",
      "effectiveCommander",
      "elevatePeriscope",
      "emptyPositions",
      "enableAI",
      "enableAIFeature",
      "enableAimPrecision",
      "enableAttack",
      "enableAudioFeature",
      "enableAutoStartUpRTD",
      "enableAutoTrimRTD",
      "enableCamShake",
      "enableCaustics",
      "enableChannel",
      "enableCollisionWith",
      "enableCopilot",
      "enableDebriefingStats",
      "enableDiagLegend",
      "enableDirectionStabilization",
      "enableDynamicSimulation",
      "enableDynamicSimulationSystem",
      "enableEndDialog",
      "enableEngineArtillery",
      "enableEnvironment",
      "enableFatigue",
      "enableGunLights",
      "enableInfoPanelComponent",
      "enableIRLasers",
      "enableMimics",
      "enablePersonTurret",
      "enableRadio",
      "enableReload",
      "enableRopeAttach",
      "enableSatNormalOnDetail",
      "enableSaving",
      "enableSentences",
      "enableSimulation",
      "enableSimulationGlobal",
      "enableStamina",
      "enableStressDamage",
      "enableTeamSwitch",
      "enableTraffic",
      "enableUAVConnectability",
      "enableUAVWaypoints",
      "enableVehicleCargo",
      "enableVehicleSensor",
      "enableWeaponDisassembly",
      "endLoadingScreen",
      "endMission",
      "engineOn",
      "enginesIsOnRTD",
      "enginesPowerRTD",
      "enginesRpmRTD",
      "enginesTorqueRTD",
      "entities",
      "environmentEnabled",
      "environmentVolume",
      "equipmentDisabled",
      "estimatedEndServerTime",
      "estimatedTimeLeft",
      "evalObjectArgument",
      "everyBackpack",
      "everyContainer",
      "exec",
      "execEditorScript",
      "execFSM",
      "execVM",
      "exp",
      "expectedDestination",
      "exportJIPMessages",
      "eyeDirection",
      "eyePos",
      "face",
      "faction",
      "fadeEnvironment",
      "fadeMusic",
      "fadeRadio",
      "fadeSound",
      "fadeSpeech",
      "failMission",
      "fileExists",
      "fillWeaponsFromPool",
      "find",
      "findAny",
      "findCover",
      "findDisplay",
      "findEditorObject",
      "findEmptyPosition",
      "findEmptyPositionReady",
      "findIf",
      "findNearestEnemy",
      "finishMissionInit",
      "finite",
      "fire",
      "fireAtTarget",
      "firstBackpack",
      "flag",
      "flagAnimationPhase",
      "flagOwner",
      "flagSide",
      "flagTexture",
      "flatten",
      "fleeing",
      "floor",
      "flyInHeight",
      "flyInHeightASL",
      "focusedCtrl",
      "fog",
      "fogForecast",
      "fogParams",
      "forceAddUniform",
      "forceAtPositionRTD",
      "forceCadetDifficulty",
      "forcedMap",
      "forceEnd",
      "forceFlagTexture",
      "forceFollowRoad",
      "forceGeneratorRTD",
      "forceMap",
      "forceRespawn",
      "forceSpeed",
      "forceUnicode",
      "forceWalk",
      "forceWeaponFire",
      "forceWeatherChange",
      "forEachMember",
      "forEachMemberAgent",
      "forEachMemberTeam",
      "forgetTarget",
      "format",
      "formation",
      "formationDirection",
      "formationLeader",
      "formationMembers",
      "formationPosition",
      "formationTask",
      "formatText",
      "formLeader",
      "freeExtension",
      "freeLook",
      "fromEditor",
      "fuel",
      "fullCrew",
      "gearIDCAmmoCount",
      "gearSlotAmmoCount",
      "gearSlotData",
      "gestureState",
      "get",
      "get3DENActionState",
      "get3DENAttribute",
      "get3DENCamera",
      "get3DENConnections",
      "get3DENEntity",
      "get3DENEntityID",
      "get3DENGrid",
      "get3DENIconsVisible",
      "get3DENLayerEntities",
      "get3DENLinesVisible",
      "get3DENMissionAttribute",
      "get3DENMouseOver",
      "get3DENSelected",
      "getAimingCoef",
      "getAllEnv3DSoundControllers",
      "getAllEnvSoundControllers",
      "getAllHitPointsDamage",
      "getAllOwnedMines",
      "getAllPylonsInfo",
      "getAllSoundControllers",
      "getAllUnitTraits",
      "getAmmoCargo",
      "getAnimAimPrecision",
      "getAnimSpeedCoef",
      "getArray",
      "getArtilleryAmmo",
      "getArtilleryComputerSettings",
      "getArtilleryETA",
      "getAssetDLCInfo",
      "getAssignedCuratorLogic",
      "getAssignedCuratorUnit",
      "getAttackTarget",
      "getAudioOptionVolumes",
      "getBackpackCargo",
      "getBleedingRemaining",
      "getBurningValue",
      "getCalculatePlayerVisibilityByFriendly",
      "getCameraViewDirection",
      "getCargoIndex",
      "getCenterOfMass",
      "getClientState",
      "getClientStateNumber",
      "getCompatiblePylonMagazines",
      "getConnectedUAV",
      "getConnectedUAVUnit",
      "getContainerMaxLoad",
      "getCorpse",
      "getCruiseControl",
      "getCursorObjectParams",
      "getCustomAimCoef",
      "getCustomSoundController",
      "getCustomSoundControllerCount",
      "getDammage",
      "getDebriefingText",
      "getDescription",
      "getDir",
      "getDirVisual",
      "getDiverState",
      "getDLCAssetsUsage",
      "getDLCAssetsUsageByName",
      "getDLCs",
      "getDLCUsageTime",
      "getEditorCamera",
      "getEditorMode",
      "getEditorObjectScope",
      "getElevationOffset",
      "getEngineTargetRPMRTD",
      "getEnv3DSoundController",
      "getEnvSoundController",
      "getEventHandlerInfo",
      "getFatigue",
      "getFieldManualStartPage",
      "getForcedFlagTexture",
      "getForcedSpeed",
      "getFriend",
      "getFSMVariable",
      "getFuelCargo",
      "getGraphValues",
      "getGroupIcon",
      "getGroupIconParams",
      "getGroupIcons",
      "getHideFrom",
      "getHit",
      "getHitIndex",
      "getHitPointDamage",
      "getItemCargo",
      "getLighting",
      "getLightingAt",
      "getLoadedModsInfo",
      "getMagazineCargo",
      "getMarkerColor",
      "getMarkerPos",
      "getMarkerSize",
      "getMarkerType",
      "getMass",
      "getMissionConfig",
      "getMissionConfigValue",
      "getMissionDLCs",
      "getMissionLayerEntities",
      "getMissionLayers",
      "getMissionPath",
      "getModelInfo",
      "getMousePosition",
      "getMusicPlayedTime",
      "getNumber",
      "getObjectArgument",
      "getObjectChildren",
      "getObjectDLC",
      "getObjectFOV",
      "getObjectID",
      "getObjectMaterials",
      "getObjectProxy",
      "getObjectScale",
      "getObjectTextures",
      "getObjectType",
      "getObjectViewDistance",
      "getOpticsMode",
      "getOrDefault",
      "getOrDefaultCall",
      "getOxygenRemaining",
      "getPersonUsedDLCs",
      "getPilotCameraDirection",
      "getPilotCameraPosition",
      "getPilotCameraRotation",
      "getPilotCameraTarget",
      "getPiPViewDistance",
      "getPlateNumber",
      "getPlayerChannel",
      "getPlayerID",
      "getPlayerScores",
      "getPlayerUID",
      "getPlayerVoNVolume",
      "getPos",
      "getPosASL",
      "getPosASLVisual",
      "getPosASLW",
      "getPosATL",
      "getPosATLVisual",
      "getPosVisual",
      "getPosWorld",
      "getPosWorldVisual",
      "getPylonMagazines",
      "getRelDir",
      "getRelPos",
      "getRemoteSensorsDisabled",
      "getRepairCargo",
      "getResolution",
      "getRoadInfo",
      "getRotorBrakeRTD",
      "getSensorTargets",
      "getSensorThreats",
      "getShadowDistance",
      "getShotParents",
      "getSlingLoad",
      "getSoundController",
      "getSoundControllerResult",
      "getSpeed",
      "getStamina",
      "getStatValue",
      "getSteamFriendsServers",
      "getSubtitleOptions",
      "getSuppression",
      "getTerrainGrid",
      "getTerrainHeight",
      "getTerrainHeightASL",
      "getTerrainInfo",
      "getText",
      "getTextRaw",
      "getTextureInfo",
      "getTextWidth",
      "getTiParameters",
      "getTotalDLCUsageTime",
      "getTrimOffsetRTD",
      "getTurretLimits",
      "getTurretOpticsMode",
      "getUnitFreefallInfo",
      "getUnitLoadout",
      "getUnitTrait",
      "getUnloadInCombat",
      "getUserInfo",
      "getUserMFDText",
      "getUserMFDValue",
      "getVariable",
      "getVehicleCargo",
      "getVehicleTiPars",
      "getWeaponCargo",
      "getWeaponSway",
      "getWingsOrientationRTD",
      "getWingsPositionRTD",
      "getWPPos",
      "glanceAt",
      "globalChat",
      "globalRadio",
      "goggles",
      "goto",
      "group",
      "groupChat",
      "groupFromNetId",
      "groupIconSelectable",
      "groupIconsVisible",
      "groupID",
      "groupOwner",
      "groupRadio",
      "groups",
      "groupSelectedUnits",
      "groupSelectUnit",
      "gunner",
      "gusts",
      "halt",
      "handgunItems",
      "handgunMagazine",
      "handgunWeapon",
      "handsHit",
      "hashValue",
      "hasInterface",
      "hasPilotCamera",
      "hasWeapon",
      "hcAllGroups",
      "hcGroupParams",
      "hcLeader",
      "hcRemoveAllGroups",
      "hcRemoveGroup",
      "hcSelected",
      "hcSelectGroup",
      "hcSetGroup",
      "hcShowBar",
      "hcShownBar",
      "headgear",
      "hideBody",
      "hideObject",
      "hideObjectGlobal",
      "hideSelection",
      "hint",
      "hintC",
      "hintCadet",
      "hintSilent",
      "hmd",
      "hostMission",
      "htmlLoad",
      "HUDMovementLevels",
      "humidity",
      "image",
      "importAllGroups",
      "importance",
      "in",
      "inArea",
      "inAreaArray",
      "incapacitatedState",
      "inflame",
      "inflamed",
      "infoPanel",
      "infoPanelComponentEnabled",
      "infoPanelComponents",
      "infoPanels",
      "inGameUISetEventHandler",
      "inheritsFrom",
      "initAmbientLife",
      "inPolygon",
      "inputAction",
      "inputController",
      "inputMouse",
      "inRangeOfArtillery",
      "insert",
      "insertEditorObject",
      "intersect",
      "is3DEN",
      "is3DENMultiplayer",
      "is3DENPreview",
      "isAbleToBreathe",
      "isActionMenuVisible",
      "isAgent",
      "isAimPrecisionEnabled",
      "isAllowedCrewInImmobile",
      "isArray",
      "isAutoHoverOn",
      "isAutonomous",
      "isAutoStartUpEnabledRTD",
      "isAutotest",
      "isAutoTrimOnRTD",
      "isAwake",
      "isBleeding",
      "isBurning",
      "isClass",
      "isCollisionLightOn",
      "isCopilotEnabled",
      "isDamageAllowed",
      "isDedicated",
      "isDLCAvailable",
      "isEngineOn",
      "isEqualRef",
      "isEqualTo",
      "isEqualType",
      "isEqualTypeAll",
      "isEqualTypeAny",
      "isEqualTypeArray",
      "isEqualTypeParams",
      "isFilePatchingEnabled",
      "isFinal",
      "isFlashlightOn",
      "isFlatEmpty",
      "isForcedWalk",
      "isFormationLeader",
      "isGameFocused",
      "isGamePaused",
      "isGroupDeletedWhenEmpty",
      "isHidden",
      "isInRemainsCollector",
      "isInstructorFigureEnabled",
      "isIRLaserOn",
      "isKeyActive",
      "isKindOf",
      "isLaserOn",
      "isLightOn",
      "isLocalized",
      "isManualFire",
      "isMarkedForCollection",
      "isMissionProfileNamespaceLoaded",
      "isMultiplayer",
      "isMultiplayerSolo",
      "isNil",
      "isNotEqualRef",
      "isNotEqualTo",
      "isNull",
      "isNumber",
      "isObjectHidden",
      "isObjectRTD",
      "isOnRoad",
      "isPiPEnabled",
      "isPlayer",
      "isRealTime",
      "isRemoteExecuted",
      "isRemoteExecutedJIP",
      "isSaving",
      "isSensorTargetConfirmed",
      "isServer",
      "isShowing3DIcons",
      "isSimpleObject",
      "isSprintAllowed",
      "isStaminaEnabled",
      "isSteamMission",
      "isSteamOverlayEnabled",
      "isStreamFriendlyUIEnabled",
      "isStressDamageEnabled",
      "isText",
      "isTouchingGround",
      "isTurnedOut",
      "isTutHintsEnabled",
      "isUAVConnectable",
      "isUAVConnected",
      "isUIContext",
      "isUniformAllowed",
      "isVehicleCargo",
      "isVehicleRadarOn",
      "isVehicleSensorEnabled",
      "isWalking",
      "isWeaponDeployed",
      "isWeaponRested",
      "itemCargo",
      "items",
      "itemsWithMagazines",
      "join",
      "joinAs",
      "joinAsSilent",
      "joinSilent",
      "joinString",
      "kbAddDatabase",
      "kbAddDatabaseTargets",
      "kbAddTopic",
      "kbHasTopic",
      "kbReact",
      "kbRemoveTopic",
      "kbTell",
      "kbWasSaid",
      "keyImage",
      "keyName",
      "keys",
      "knowsAbout",
      "land",
      "landAt",
      "landResult",
      "language",
      "laserTarget",
      "lbAdd",
      "lbClear",
      "lbColor",
      "lbColorRight",
      "lbCurSel",
      "lbData",
      "lbDelete",
      "lbIsSelected",
      "lbPicture",
      "lbPictureRight",
      "lbSelection",
      "lbSetColor",
      "lbSetColorRight",
      "lbSetCurSel",
      "lbSetData",
      "lbSetPicture",
      "lbSetPictureColor",
      "lbSetPictureColorDisabled",
      "lbSetPictureColorSelected",
      "lbSetPictureRight",
      "lbSetPictureRightColor",
      "lbSetPictureRightColorDisabled",
      "lbSetPictureRightColorSelected",
      "lbSetSelectColor",
      "lbSetSelectColorRight",
      "lbSetSelected",
      "lbSetText",
      "lbSetTextRight",
      "lbSetTooltip",
      "lbSetValue",
      "lbSize",
      "lbSort",
      "lbSortBy",
      "lbSortByValue",
      "lbText",
      "lbTextRight",
      "lbTooltip",
      "lbValue",
      "leader",
      "leaderboardDeInit",
      "leaderboardGetRows",
      "leaderboardInit",
      "leaderboardRequestRowsFriends",
      "leaderboardRequestRowsGlobal",
      "leaderboardRequestRowsGlobalAroundUser",
      "leaderboardsRequestUploadScore",
      "leaderboardsRequestUploadScoreKeepBest",
      "leaderboardState",
      "leaveVehicle",
      "libraryCredits",
      "libraryDisclaimers",
      "lifeState",
      "lightAttachObject",
      "lightDetachObject",
      "lightIsOn",
      "lightnings",
      "limitSpeed",
      "linearConversion",
      "lineIntersects",
      "lineIntersectsObjs",
      "lineIntersectsSurfaces",
      "lineIntersectsWith",
      "linkItem",
      "list",
      "listObjects",
      "listRemoteTargets",
      "listVehicleSensors",
      "ln",
      "lnbAddArray",
      "lnbAddColumn",
      "lnbAddRow",
      "lnbClear",
      "lnbColor",
      "lnbColorRight",
      "lnbCurSelRow",
      "lnbData",
      "lnbDeleteColumn",
      "lnbDeleteRow",
      "lnbGetColumnsPosition",
      "lnbPicture",
      "lnbPictureRight",
      "lnbSetColor",
      "lnbSetColorRight",
      "lnbSetColumnsPos",
      "lnbSetCurSelRow",
      "lnbSetData",
      "lnbSetPicture",
      "lnbSetPictureColor",
      "lnbSetPictureColorRight",
      "lnbSetPictureColorSelected",
      "lnbSetPictureColorSelectedRight",
      "lnbSetPictureRight",
      "lnbSetText",
      "lnbSetTextRight",
      "lnbSetTooltip",
      "lnbSetValue",
      "lnbSize",
      "lnbSort",
      "lnbSortBy",
      "lnbSortByValue",
      "lnbText",
      "lnbTextRight",
      "lnbValue",
      "load",
      "loadAbs",
      "loadBackpack",
      "loadConfig",
      "loadFile",
      "loadGame",
      "loadIdentity",
      "loadMagazine",
      "loadOverlay",
      "loadStatus",
      "loadUniform",
      "loadVest",
      "localize",
      "localNamespace",
      "locationPosition",
      "lock",
      "lockCameraTo",
      "lockCargo",
      "lockDriver",
      "locked",
      "lockedCameraTo",
      "lockedCargo",
      "lockedDriver",
      "lockedInventory",
      "lockedTurret",
      "lockIdentity",
      "lockInventory",
      "lockTurret",
      "lockWp",
      "log",
      "logEntities",
      "logNetwork",
      "logNetworkTerminate",
      "lookAt",
      "lookAtPos",
      "magazineCargo",
      "magazines",
      "magazinesAllTurrets",
      "magazinesAmmo",
      "magazinesAmmoCargo",
      "magazinesAmmoFull",
      "magazinesDetail",
      "magazinesDetailBackpack",
      "magazinesDetailUniform",
      "magazinesDetailVest",
      "magazinesTurret",
      "magazineTurretAmmo",
      "mapAnimAdd",
      "mapAnimClear",
      "mapAnimCommit",
      "mapAnimDone",
      "mapCenterOnCamera",
      "mapGridPosition",
      "markAsFinishedOnSteam",
      "markerAlpha",
      "markerBrush",
      "markerChannel",
      "markerColor",
      "markerDir",
      "markerPolyline",
      "markerPos",
      "markerShadow",
      "markerShape",
      "markerSize",
      "markerText",
      "markerType",
      "matrixMultiply",
      "matrixTranspose",
      "max",
      "maxLoad",
      "members",
      "menuAction",
      "menuAdd",
      "menuChecked",
      "menuClear",
      "menuCollapse",
      "menuData",
      "menuDelete",
      "menuEnable",
      "menuEnabled",
      "menuExpand",
      "menuHover",
      "menuPicture",
      "menuSetAction",
      "menuSetCheck",
      "menuSetData",
      "menuSetPicture",
      "menuSetShortcut",
      "menuSetText",
      "menuSetURL",
      "menuSetValue",
      "menuShortcut",
      "menuShortcutText",
      "menuSize",
      "menuSort",
      "menuText",
      "menuURL",
      "menuValue",
      "merge",
      "min",
      "mineActive",
      "mineDetectedBy",
      "missileTarget",
      "missileTargetPos",
      "missionConfigFile",
      "missionDifficulty",
      "missionEnd",
      "missionName",
      "missionNameSource",
      "missionNamespace",
      "missionProfileNamespace",
      "missionStart",
      "missionVersion",
      "mod",
      "modelToWorld",
      "modelToWorldVisual",
      "modelToWorldVisualWorld",
      "modelToWorldWorld",
      "modParams",
      "moonIntensity",
      "moonPhase",
      "morale",
      "move",
      "move3DENCamera",
      "moveInAny",
      "moveInCargo",
      "moveInCommander",
      "moveInDriver",
      "moveInGunner",
      "moveInTurret",
      "moveObjectToEnd",
      "moveOut",
      "moveTime",
      "moveTo",
      "moveToCompleted",
      "moveToFailed",
      "musicVolume",
      "name",
      "namedProperties",
      "nameSound",
      "nearEntities",
      "nearestBuilding",
      "nearestLocation",
      "nearestLocations",
      "nearestLocationWithDubbing",
      "nearestMines",
      "nearestObject",
      "nearestObjects",
      "nearestTerrainObjects",
      "nearObjects",
      "nearObjectsReady",
      "nearRoads",
      "nearSupplies",
      "nearTargets",
      "needReload",
      "needService",
      "netId",
      "netObjNull",
      "newOverlay",
      "nextMenuItemIndex",
      "nextWeatherChange",
      "nMenuItems",
      "not",
      "numberOfEnginesRTD",
      "numberToDate",
      "objectCurators",
      "objectFromNetId",
      "objectParent",
      "objStatus",
      "onBriefingGroup",
      "onBriefingNotes",
      "onBriefingPlan",
      "onBriefingTeamSwitch",
      "onCommandModeChanged",
      "onDoubleClick",
      "onEachFrame",
      "onGroupIconClick",
      "onGroupIconOverEnter",
      "onGroupIconOverLeave",
      "onHCGroupSelectionChanged",
      "onMapSingleClick",
      "onPlayerConnected",
      "onPlayerDisconnected",
      "onPreloadFinished",
      "onPreloadStarted",
      "onShowNewObject",
      "onTeamSwitch",
      "openCuratorInterface",
      "openDLCPage",
      "openGPS",
      "openMap",
      "openSteamApp",
      "openYoutubeVideo",
      "or",
      "orderGetIn",
      "overcast",
      "overcastForecast",
      "owner",
      "param",
      "params",
      "parseNumber",
      "parseSimpleArray",
      "parseText",
      "parsingNamespace",
      "particlesQuality",
      "periscopeElevation",
      "pickWeaponPool",
      "pitch",
      "pixelGrid",
      "pixelGridBase",
      "pixelGridNoUIScale",
      "pixelH",
      "pixelW",
      "playableSlotsNumber",
      "playableUnits",
      "playAction",
      "playActionNow",
      "player",
      "playerRespawnTime",
      "playerSide",
      "playersNumber",
      "playGesture",
      "playMission",
      "playMove",
      "playMoveNow",
      "playMusic",
      "playScriptedMission",
      "playSound",
      "playSound3D",
      "playSoundUI",
      "pose",
      "position",
      "positionCameraToWorld",
      "posScreenToWorld",
      "posWorldToScreen",
      "ppEffectAdjust",
      "ppEffectCommit",
      "ppEffectCommitted",
      "ppEffectCreate",
      "ppEffectDestroy",
      "ppEffectEnable",
      "ppEffectEnabled",
      "ppEffectForceInNVG",
      "precision",
      "preloadCamera",
      "preloadObject",
      "preloadSound",
      "preloadTitleObj",
      "preloadTitleRsc",
      "preprocessFile",
      "preprocessFileLineNumbers",
      "primaryWeapon",
      "primaryWeaponItems",
      "primaryWeaponMagazine",
      "priority",
      "processDiaryLink",
      "productVersion",
      "profileName",
      "profileNamespace",
      "profileNameSteam",
      "progressLoadingScreen",
      "progressPosition",
      "progressSetPosition",
      "publicVariable",
      "publicVariableClient",
      "publicVariableServer",
      "pushBack",
      "pushBackUnique",
      "putWeaponPool",
      "queryItemsPool",
      "queryMagazinePool",
      "queryWeaponPool",
      "rad",
      "radioChannelAdd",
      "radioChannelCreate",
      "radioChannelInfo",
      "radioChannelRemove",
      "radioChannelSetCallSign",
      "radioChannelSetLabel",
      "radioEnabled",
      "radioVolume",
      "rain",
      "rainbow",
      "rainParams",
      "random",
      "rank",
      "rankId",
      "rating",
      "rectangular",
      "regexFind",
      "regexMatch",
      "regexReplace",
      "registeredTasks",
      "registerTask",
      "reload",
      "reloadEnabled",
      "remoteControl",
      "remoteExec",
      "remoteExecCall",
      "remoteExecutedOwner",
      "remove3DENConnection",
      "remove3DENEventHandler",
      "remove3DENLayer",
      "removeAction",
      "removeAll3DENEventHandlers",
      "removeAllActions",
      "removeAllAssignedItems",
      "removeAllBinocularItems",
      "removeAllContainers",
      "removeAllCuratorAddons",
      "removeAllCuratorCameraAreas",
      "removeAllCuratorEditingAreas",
      "removeAllEventHandlers",
      "removeAllHandgunItems",
      "removeAllItems",
      "removeAllItemsWithMagazines",
      "removeAllMissionEventHandlers",
      "removeAllMPEventHandlers",
      "removeAllMusicEventHandlers",
      "removeAllOwnedMines",
      "removeAllPrimaryWeaponItems",
      "removeAllSecondaryWeaponItems",
      "removeAllUserActionEventHandlers",
      "removeAllWeapons",
      "removeBackpack",
      "removeBackpackGlobal",
      "removeBinocularItem",
      "removeCuratorAddons",
      "removeCuratorCameraArea",
      "removeCuratorEditableObjects",
      "removeCuratorEditingArea",
      "removeDiaryRecord",
      "removeDiarySubject",
      "removeDrawIcon",
      "removeDrawLinks",
      "removeEventHandler",
      "removeFromRemainsCollector",
      "removeGoggles",
      "removeGroupIcon",
      "removeHandgunItem",
      "removeHeadgear",
      "removeItem",
      "removeItemFromBackpack",
      "removeItemFromUniform",
      "removeItemFromVest",
      "removeItems",
      "removeMagazine",
      "removeMagazineGlobal",
      "removeMagazines",
      "removeMagazinesTurret",
      "removeMagazineTurret",
      "removeMenuItem",
      "removeMissionEventHandler",
      "removeMPEventHandler",
      "removeMusicEventHandler",
      "removeOwnedMine",
      "removePrimaryWeaponItem",
      "removeSecondaryWeaponItem",
      "removeSimpleTask",
      "removeSwitchableUnit",
      "removeTeamMember",
      "removeUniform",
      "removeUserActionEventHandler",
      "removeVest",
      "removeWeapon",
      "removeWeaponAttachmentCargo",
      "removeWeaponCargo",
      "removeWeaponGlobal",
      "removeWeaponTurret",
      "reportRemoteTarget",
      "requiredVersion",
      "resetCamShake",
      "resetSubgroupDirection",
      "resize",
      "resources",
      "respawnVehicle",
      "restartEditorCamera",
      "reveal",
      "revealMine",
      "reverse",
      "reversedMouseY",
      "roadAt",
      "roadsConnectedTo",
      "roleDescription",
      "ropeAttachedObjects",
      "ropeAttachedTo",
      "ropeAttachEnabled",
      "ropeAttachTo",
      "ropeCreate",
      "ropeCut",
      "ropeDestroy",
      "ropeDetach",
      "ropeEndPosition",
      "ropeLength",
      "ropes",
      "ropesAttachedTo",
      "ropeSegments",
      "ropeUnwind",
      "ropeUnwound",
      "rotorsForcesRTD",
      "rotorsRpmRTD",
      "round",
      "runInitScript",
      "safeZoneH",
      "safeZoneW",
      "safeZoneWAbs",
      "safeZoneX",
      "safeZoneXAbs",
      "safeZoneY",
      "save3DENInventory",
      "saveGame",
      "saveIdentity",
      "saveJoysticks",
      "saveMissionProfileNamespace",
      "saveOverlay",
      "saveProfileNamespace",
      "saveStatus",
      "saveVar",
      "savingEnabled",
      "say",
      "say2D",
      "say3D",
      "scopeName",
      "score",
      "scoreSide",
      "screenshot",
      "screenToWorld",
      "scriptDone",
      "scriptName",
      "scudState",
      "secondaryWeapon",
      "secondaryWeaponItems",
      "secondaryWeaponMagazine",
      "select",
      "selectBestPlaces",
      "selectDiarySubject",
      "selectedEditorObjects",
      "selectEditorObject",
      "selectionNames",
      "selectionPosition",
      "selectionVectorDirAndUp",
      "selectLeader",
      "selectMax",
      "selectMin",
      "selectNoPlayer",
      "selectPlayer",
      "selectRandom",
      "selectRandomWeighted",
      "selectWeapon",
      "selectWeaponTurret",
      "sendAUMessage",
      "sendSimpleCommand",
      "sendTask",
      "sendTaskResult",
      "sendUDPMessage",
      "sentencesEnabled",
      "serverCommand",
      "serverCommandAvailable",
      "serverCommandExecutable",
      "serverName",
      "serverNamespace",
      "serverTime",
      "set",
      "set3DENAttribute",
      "set3DENAttributes",
      "set3DENGrid",
      "set3DENIconsVisible",
      "set3DENLayer",
      "set3DENLinesVisible",
      "set3DENLogicType",
      "set3DENMissionAttribute",
      "set3DENMissionAttributes",
      "set3DENModelsVisible",
      "set3DENObjectType",
      "set3DENSelected",
      "setAccTime",
      "setActualCollectiveRTD",
      "setAirplaneThrottle",
      "setAirportSide",
      "setAmmo",
      "setAmmoCargo",
      "setAmmoOnPylon",
      "setAnimSpeedCoef",
      "setAperture",
      "setApertureNew",
      "setArmoryPoints",
      "setAttributes",
      "setAutonomous",
      "setBehaviour",
      "setBehaviourStrong",
      "setBleedingRemaining",
      "setBrakesRTD",
      "setCameraInterest",
      "setCamShakeDefParams",
      "setCamShakeParams",
      "setCamUseTi",
      "setCaptive",
      "setCenterOfMass",
      "setCollisionLight",
      "setCombatBehaviour",
      "setCombatMode",
      "setCompassOscillation",
      "setConvoySeparation",
      "setCruiseControl",
      "setCuratorCameraAreaCeiling",
      "setCuratorCoef",
      "setCuratorEditingAreaType",
      "setCuratorWaypointCost",
      "setCurrentChannel",
      "setCurrentTask",
      "setCurrentWaypoint",
      "setCustomAimCoef",
      "SetCustomMissionData",
      "setCustomSoundController",
      "setCustomWeightRTD",
      "setDamage",
      "setDammage",
      "setDate",
      "setDebriefingText",
      "setDefaultCamera",
      "setDestination",
      "setDetailMapBlendPars",
      "setDiaryRecordText",
      "setDiarySubjectPicture",
      "setDir",
      "setDirection",
      "setDrawIcon",
      "setDriveOnPath",
      "setDropInterval",
      "setDynamicSimulationDistance",
      "setDynamicSimulationDistanceCoef",
      "setEditorMode",
      "setEditorObjectScope",
      "setEffectCondition",
      "setEffectiveCommander",
      "setEngineRpmRTD",
      "setFace",
      "setFaceanimation",
      "setFatigue",
      "setFeatureType",
      "setFlagAnimationPhase",
      "setFlagOwner",
      "setFlagSide",
      "setFlagTexture",
      "setFog",
      "setForceGeneratorRTD",
      "setFormation",
      "setFormationTask",
      "setFormDir",
      "setFriend",
      "setFromEditor",
      "setFSMVariable",
      "setFuel",
      "setFuelCargo",
      "setGroupIcon",
      "setGroupIconParams",
      "setGroupIconsSelectable",
      "setGroupIconsVisible",
      "setGroupid",
      "setGroupIdGlobal",
      "setGroupOwner",
      "setGusts",
      "setHideBehind",
      "setHit",
      "setHitIndex",
      "setHitPointDamage",
      "setHorizonParallaxCoef",
      "setHUDMovementLevels",
      "setHumidity",
      "setIdentity",
      "setImportance",
      "setInfoPanel",
      "setLeader",
      "setLightAmbient",
      "setLightAttenuation",
      "setLightBrightness",
      "setLightColor",
      "setLightConePars",
      "setLightDayLight",
      "setLightFlareMaxDistance",
      "setLightFlareSize",
      "setLightIntensity",
      "setLightIR",
      "setLightnings",
      "setLightUseFlare",
      "setLightVolumeShape",
      "setLocalWindParams",
      "setMagazineTurretAmmo",
      "setMarkerAlpha",
      "setMarkerAlphaLocal",
      "setMarkerBrush",
      "setMarkerBrushLocal",
      "setMarkerColor",
      "setMarkerColorLocal",
      "setMarkerDir",
      "setMarkerDirLocal",
      "setMarkerPolyline",
      "setMarkerPolylineLocal",
      "setMarkerPos",
      "setMarkerPosLocal",
      "setMarkerShadow",
      "setMarkerShadowLocal",
      "setMarkerShape",
      "setMarkerShapeLocal",
      "setMarkerSize",
      "setMarkerSizeLocal",
      "setMarkerText",
      "setMarkerTextLocal",
      "setMarkerType",
      "setMarkerTypeLocal",
      "setMass",
      "setMaxLoad",
      "setMimic",
      "setMissileTarget",
      "setMissileTargetPos",
      "setMousePosition",
      "setMusicEffect",
      "setMusicEventHandler",
      "setName",
      "setNameSound",
      "setObjectArguments",
      "setObjectMaterial",
      "setObjectMaterialGlobal",
      "setObjectProxy",
      "setObjectScale",
      "setObjectTexture",
      "setObjectTextureGlobal",
      "setObjectViewDistance",
      "setOpticsMode",
      "setOvercast",
      "setOwner",
      "setOxygenRemaining",
      "setParticleCircle",
      "setParticleClass",
      "setParticleFire",
      "setParticleParams",
      "setParticleRandom",
      "setPilotCameraDirection",
      "setPilotCameraRotation",
      "setPilotCameraTarget",
      "setPilotLight",
      "setPiPEffect",
      "setPiPViewDistance",
      "setPitch",
      "setPlateNumber",
      "setPlayable",
      "setPlayerRespawnTime",
      "setPlayerVoNVolume",
      "setPos",
      "setPosASL",
      "setPosASL2",
      "setPosASLW",
      "setPosATL",
      "setPosition",
      "setPosWorld",
      "setPylonLoadout",
      "setPylonsPriority",
      "setRadioMsg",
      "setRain",
      "setRainbow",
      "setRandomLip",
      "setRank",
      "setRectangular",
      "setRepairCargo",
      "setRotorBrakeRTD",
      "setShadowDistance",
      "setShotParents",
      "setSide",
      "setSimpleTaskAlwaysVisible",
      "setSimpleTaskCustomData",
      "setSimpleTaskDescription",
      "setSimpleTaskDestination",
      "setSimpleTaskTarget",
      "setSimpleTaskType",
      "setSimulWeatherLayers",
      "setSize",
      "setSkill",
      "setSlingLoad",
      "setSoundEffect",
      "setSpeaker",
      "setSpeech",
      "setSpeedMode",
      "setStamina",
      "setStaminaScheme",
      "setStatValue",
      "setSuppression",
      "setSystemOfUnits",
      "setTargetAge",
      "setTaskMarkerOffset",
      "setTaskResult",
      "setTaskState",
      "setTerrainGrid",
      "setTerrainHeight",
      "setText",
      "setTimeMultiplier",
      "setTiParameter",
      "setTitleEffect",
      "setTowParent",
      "setTrafficDensity",
      "setTrafficDistance",
      "setTrafficGap",
      "setTrafficSpeed",
      "setTriggerActivation",
      "setTriggerArea",
      "setTriggerInterval",
      "setTriggerStatements",
      "setTriggerText",
      "setTriggerTimeout",
      "setTriggerType",
      "setTurretLimits",
      "setTurretOpticsMode",
      "setType",
      "setUnconscious",
      "setUnitAbility",
      "setUnitCombatMode",
      "setUnitFreefallHeight",
      "setUnitLoadout",
      "setUnitPos",
      "setUnitPosWeak",
      "setUnitRank",
      "setUnitRecoilCoefficient",
      "setUnitTrait",
      "setUnloadInCombat",
      "setUserActionText",
      "setUserMFDText",
      "setUserMFDValue",
      "setVariable",
      "setVectorDir",
      "setVectorDirAndUp",
      "setVectorUp",
      "setVehicleAmmo",
      "setVehicleAmmoDef",
      "setVehicleArmor",
      "setVehicleCargo",
      "setVehicleId",
      "setVehicleLock",
      "setVehiclePosition",
      "setVehicleRadar",
      "setVehicleReceiveRemoteTargets",
      "setVehicleReportOwnPosition",
      "setVehicleReportRemoteTargets",
      "setVehicleTiPars",
      "setVehicleVarName",
      "setVelocity",
      "setVelocityModelSpace",
      "setVelocityTransformation",
      "setViewDistance",
      "setVisibleIfTreeCollapsed",
      "setWantedRPMRTD",
      "setWaves",
      "setWaypointBehaviour",
      "setWaypointCombatMode",
      "setWaypointCompletionRadius",
      "setWaypointDescription",
      "setWaypointForceBehaviour",
      "setWaypointFormation",
      "setWaypointHousePosition",
      "setWaypointLoiterAltitude",
      "setWaypointLoiterRadius",
      "setWaypointLoiterType",
      "setWaypointName",
      "setWaypointPosition",
      "setWaypointScript",
      "setWaypointSpeed",
      "setWaypointStatements",
      "setWaypointTimeout",
      "setWaypointType",
      "setWaypointVisible",
      "setWeaponReloadingTime",
      "setWeaponZeroing",
      "setWind",
      "setWindDir",
      "setWindForce",
      "setWindStr",
      "setWingForceScaleRTD",
      "setWPPos",
      "show3DIcons",
      "showChat",
      "showCinemaBorder",
      "showCommandingMenu",
      "showCompass",
      "showCuratorCompass",
      "showGps",
      "showHUD",
      "showLegend",
      "showMap",
      "shownArtilleryComputer",
      "shownChat",
      "shownCompass",
      "shownCuratorCompass",
      "showNewEditorObject",
      "shownGps",
      "shownHUD",
      "shownMap",
      "shownPad",
      "shownRadio",
      "shownScoretable",
      "shownSubtitles",
      "shownUAVFeed",
      "shownWarrant",
      "shownWatch",
      "showPad",
      "showRadio",
      "showScoretable",
      "showSubtitles",
      "showUAVFeed",
      "showWarrant",
      "showWatch",
      "showWaypoint",
      "showWaypoints",
      "side",
      "sideChat",
      "sideRadio",
      "simpleTasks",
      "simulationEnabled",
      "simulCloudDensity",
      "simulCloudOcclusion",
      "simulInClouds",
      "simulWeatherSync",
      "sin",
      "size",
      "sizeOf",
      "skill",
      "skillFinal",
      "skipTime",
      "sleep",
      "sliderPosition",
      "sliderRange",
      "sliderSetPosition",
      "sliderSetRange",
      "sliderSetSpeed",
      "sliderSpeed",
      "slingLoadAssistantShown",
      "soldierMagazines",
      "someAmmo",
      "sort",
      "soundVolume",
      "spawn",
      "speaker",
      "speechVolume",
      "speed",
      "speedMode",
      "splitString",
      "sqrt",
      "squadParams",
      "stance",
      "startLoadingScreen",
      "stop",
      "stopEngineRTD",
      "stopped",
      "str",
      "sunOrMoon",
      "supportInfo",
      "suppressFor",
      "surfaceIsWater",
      "surfaceNormal",
      "surfaceTexture",
      "surfaceType",
      "swimInDepth",
      "switchableUnits",
      "switchAction",
      "switchCamera",
      "switchGesture",
      "switchLight",
      "switchMove",
      "synchronizedObjects",
      "synchronizedTriggers",
      "synchronizedWaypoints",
      "synchronizeObjectsAdd",
      "synchronizeObjectsRemove",
      "synchronizeTrigger",
      "synchronizeWaypoint",
      "systemChat",
      "systemOfUnits",
      "systemTime",
      "systemTimeUTC",
      "tan",
      "targetKnowledge",
      "targets",
      "targetsAggregate",
      "targetsQuery",
      "taskAlwaysVisible",
      "taskChildren",
      "taskCompleted",
      "taskCustomData",
      "taskDescription",
      "taskDestination",
      "taskHint",
      "taskMarkerOffset",
      "taskName",
      "taskParent",
      "taskResult",
      "taskState",
      "taskType",
      "teamMember",
      "teamName",
      "teams",
      "teamSwitch",
      "teamSwitchEnabled",
      "teamType",
      "terminate",
      "terrainIntersect",
      "terrainIntersectASL",
      "terrainIntersectAtASL",
      "text",
      "textLog",
      "textLogFormat",
      "tg",
      "time",
      "timeMultiplier",
      "titleCut",
      "titleFadeOut",
      "titleObj",
      "titleRsc",
      "titleText",
      "toArray",
      "toFixed",
      "toLower",
      "toLowerANSI",
      "toString",
      "toUpper",
      "toUpperANSI",
      "triggerActivated",
      "triggerActivation",
      "triggerAmmo",
      "triggerArea",
      "triggerAttachedVehicle",
      "triggerAttachObject",
      "triggerAttachVehicle",
      "triggerDynamicSimulation",
      "triggerInterval",
      "triggerStatements",
      "triggerText",
      "triggerTimeout",
      "triggerTimeoutCurrent",
      "triggerType",
      "trim",
      "turretLocal",
      "turretOwner",
      "turretUnit",
      "tvAdd",
      "tvClear",
      "tvCollapse",
      "tvCollapseAll",
      "tvCount",
      "tvCurSel",
      "tvData",
      "tvDelete",
      "tvExpand",
      "tvExpandAll",
      "tvIsSelected",
      "tvPicture",
      "tvPictureRight",
      "tvSelection",
      "tvSetColor",
      "tvSetCurSel",
      "tvSetData",
      "tvSetPicture",
      "tvSetPictureColor",
      "tvSetPictureColorDisabled",
      "tvSetPictureColorSelected",
      "tvSetPictureRight",
      "tvSetPictureRightColor",
      "tvSetPictureRightColorDisabled",
      "tvSetPictureRightColorSelected",
      "tvSetSelectColor",
      "tvSetSelected",
      "tvSetText",
      "tvSetTooltip",
      "tvSetValue",
      "tvSort",
      "tvSortAll",
      "tvSortByValue",
      "tvSortByValueAll",
      "tvText",
      "tvTooltip",
      "tvValue",
      "type",
      "typeName",
      "typeOf",
      "UAVControl",
      "uiNamespace",
      "uiSleep",
      "unassignCurator",
      "unassignItem",
      "unassignTeam",
      "unassignVehicle",
      "underwater",
      "uniform",
      "uniformContainer",
      "uniformItems",
      "uniformMagazines",
      "uniqueUnitItems",
      "unitAddons",
      "unitAimPosition",
      "unitAimPositionVisual",
      "unitBackpack",
      "unitCombatMode",
      "unitIsUAV",
      "unitPos",
      "unitReady",
      "unitRecoilCoefficient",
      "units",
      "unitsBelowHeight",
      "unitTurret",
      "unlinkItem",
      "unlockAchievement",
      "unregisterTask",
      "updateDrawIcon",
      "updateMenuItem",
      "updateObjectTree",
      "useAIOperMapObstructionTest",
      "useAISteeringComponent",
      "useAudioTimeForMoves",
      "userInputDisabled",
      "values",
      "vectorAdd",
      "vectorCos",
      "vectorCrossProduct",
      "vectorDiff",
      "vectorDir",
      "vectorDirVisual",
      "vectorDistance",
      "vectorDistanceSqr",
      "vectorDotProduct",
      "vectorFromTo",
      "vectorLinearConversion",
      "vectorMagnitude",
      "vectorMagnitudeSqr",
      "vectorModelToWorld",
      "vectorModelToWorldVisual",
      "vectorMultiply",
      "vectorNormalized",
      "vectorUp",
      "vectorUpVisual",
      "vectorWorldToModel",
      "vectorWorldToModelVisual",
      "vehicle",
      "vehicleCargoEnabled",
      "vehicleChat",
      "vehicleMoveInfo",
      "vehicleRadio",
      "vehicleReceiveRemoteTargets",
      "vehicleReportOwnPosition",
      "vehicleReportRemoteTargets",
      "vehicles",
      "vehicleVarName",
      "velocity",
      "velocityModelSpace",
      "verifySignature",
      "vest",
      "vestContainer",
      "vestItems",
      "vestMagazines",
      "viewDistance",
      "visibleCompass",
      "visibleGps",
      "visibleMap",
      "visiblePosition",
      "visiblePositionASL",
      "visibleScoretable",
      "visibleWatch",
      "waves",
      "waypointAttachedObject",
      "waypointAttachedVehicle",
      "waypointAttachObject",
      "waypointAttachVehicle",
      "waypointBehaviour",
      "waypointCombatMode",
      "waypointCompletionRadius",
      "waypointDescription",
      "waypointForceBehaviour",
      "waypointFormation",
      "waypointHousePosition",
      "waypointLoiterAltitude",
      "waypointLoiterRadius",
      "waypointLoiterType",
      "waypointName",
      "waypointPosition",
      "waypoints",
      "waypointScript",
      "waypointsEnabledUAV",
      "waypointShow",
      "waypointSpeed",
      "waypointStatements",
      "waypointTimeout",
      "waypointTimeoutCurrent",
      "waypointType",
      "waypointVisible",
      "weaponAccessories",
      "weaponAccessoriesCargo",
      "weaponCargo",
      "weaponDirection",
      "weaponInertia",
      "weaponLowered",
      "weaponReloadingTime",
      "weapons",
      "weaponsInfo",
      "weaponsItems",
      "weaponsItemsCargo",
      "weaponState",
      "weaponsTurret",
      "weightRTD",
      "WFSideText",
      "wind",
      "windDir",
      "windRTD",
      "windStr",
      "wingsForcesRTD",
      "worldName",
      "worldSize",
      "worldToModel",
      "worldToModelVisual",
      "worldToScreen"
    ], l2 = {
      className: "meta",
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: "define undef ifdef ifndef else endif include if",
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        e2.inherit(r2, { className: "string" }),
        {
          begin: /<[^\n>]*>/,
          end: /$/,
          illegal: "\\n"
        },
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE
      ]
    };
    return {
      name: "SQF",
      case_insensitive: true,
      keywords: {
        keyword: a2,
        built_in: o2,
        literal: s2
      },
      contains: [
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        e2.NUMBER_MODE,
        n,
        i2,
        r2,
        l2
      ],
      illegal: [
        //$ is only valid when used with Hex numbers (e.g. $FF)
        /\$[^a-fA-F0-9]/,
        /\w\$/,
        /\?/,
        //There's no ? in SQF
        /@/,
        //There's no @ in SQF
        // Brute-force-fixing the build error. See https://github.com/highlightjs/highlight.js/pull/3193#issuecomment-843088729
        / \| /,
        // . is only used in numbers
        /[a-zA-Z_]\./,
        /\:\=/,
        /\[\:/
      ]
    };
  }
  return Cs = t2, Cs;
}
var Ns, Dp;
function TN() {
  if (Dp)
    return Ns;
  Dp = 1;
  function t2(e2) {
    const n = e2.regex, i2 = e2.COMMENT("--", "$"), r2 = {
      scope: "string",
      variants: [
        {
          begin: /'/,
          end: /'/,
          contains: [{ match: /''/ }]
        }
      ]
    }, a2 = {
      begin: /"/,
      end: /"/,
      contains: [{ match: /""/ }]
    }, s2 = [
      "true",
      "false",
      // Not sure it's correct to call NULL literal, and clauses like IS [NOT] NULL look strange that way.
      // "null",
      "unknown"
    ], o2 = [
      "double precision",
      "large object",
      "with timezone",
      "without timezone"
    ], l2 = [
      "bigint",
      "binary",
      "blob",
      "boolean",
      "char",
      "character",
      "clob",
      "date",
      "dec",
      "decfloat",
      "decimal",
      "float",
      "int",
      "integer",
      "interval",
      "nchar",
      "nclob",
      "national",
      "numeric",
      "real",
      "row",
      "smallint",
      "time",
      "timestamp",
      "varchar",
      "varying",
      // modifier (character varying)
      "varbinary"
    ], u2 = [
      "add",
      "asc",
      "collation",
      "desc",
      "final",
      "first",
      "last",
      "view"
    ], _ = [
      "abs",
      "acos",
      "all",
      "allocate",
      "alter",
      "and",
      "any",
      "are",
      "array",
      "array_agg",
      "array_max_cardinality",
      "as",
      "asensitive",
      "asin",
      "asymmetric",
      "at",
      "atan",
      "atomic",
      "authorization",
      "avg",
      "begin",
      "begin_frame",
      "begin_partition",
      "between",
      "bigint",
      "binary",
      "blob",
      "boolean",
      "both",
      "by",
      "call",
      "called",
      "cardinality",
      "cascaded",
      "case",
      "cast",
      "ceil",
      "ceiling",
      "char",
      "char_length",
      "character",
      "character_length",
      "check",
      "classifier",
      "clob",
      "close",
      "coalesce",
      "collate",
      "collect",
      "column",
      "commit",
      "condition",
      "connect",
      "constraint",
      "contains",
      "convert",
      "copy",
      "corr",
      "corresponding",
      "cos",
      "cosh",
      "count",
      "covar_pop",
      "covar_samp",
      "create",
      "cross",
      "cube",
      "cume_dist",
      "current",
      "current_catalog",
      "current_date",
      "current_default_transform_group",
      "current_path",
      "current_role",
      "current_row",
      "current_schema",
      "current_time",
      "current_timestamp",
      "current_path",
      "current_role",
      "current_transform_group_for_type",
      "current_user",
      "cursor",
      "cycle",
      "date",
      "day",
      "deallocate",
      "dec",
      "decimal",
      "decfloat",
      "declare",
      "default",
      "define",
      "delete",
      "dense_rank",
      "deref",
      "describe",
      "deterministic",
      "disconnect",
      "distinct",
      "double",
      "drop",
      "dynamic",
      "each",
      "element",
      "else",
      "empty",
      "end",
      "end_frame",
      "end_partition",
      "end-exec",
      "equals",
      "escape",
      "every",
      "except",
      "exec",
      "execute",
      "exists",
      "exp",
      "external",
      "extract",
      "false",
      "fetch",
      "filter",
      "first_value",
      "float",
      "floor",
      "for",
      "foreign",
      "frame_row",
      "free",
      "from",
      "full",
      "function",
      "fusion",
      "get",
      "global",
      "grant",
      "group",
      "grouping",
      "groups",
      "having",
      "hold",
      "hour",
      "identity",
      "in",
      "indicator",
      "initial",
      "inner",
      "inout",
      "insensitive",
      "insert",
      "int",
      "integer",
      "intersect",
      "intersection",
      "interval",
      "into",
      "is",
      "join",
      "json_array",
      "json_arrayagg",
      "json_exists",
      "json_object",
      "json_objectagg",
      "json_query",
      "json_table",
      "json_table_primitive",
      "json_value",
      "lag",
      "language",
      "large",
      "last_value",
      "lateral",
      "lead",
      "leading",
      "left",
      "like",
      "like_regex",
      "listagg",
      "ln",
      "local",
      "localtime",
      "localtimestamp",
      "log",
      "log10",
      "lower",
      "match",
      "match_number",
      "match_recognize",
      "matches",
      "max",
      "member",
      "merge",
      "method",
      "min",
      "minute",
      "mod",
      "modifies",
      "module",
      "month",
      "multiset",
      "national",
      "natural",
      "nchar",
      "nclob",
      "new",
      "no",
      "none",
      "normalize",
      "not",
      "nth_value",
      "ntile",
      "null",
      "nullif",
      "numeric",
      "octet_length",
      "occurrences_regex",
      "of",
      "offset",
      "old",
      "omit",
      "on",
      "one",
      "only",
      "open",
      "or",
      "order",
      "out",
      "outer",
      "over",
      "overlaps",
      "overlay",
      "parameter",
      "partition",
      "pattern",
      "per",
      "percent",
      "percent_rank",
      "percentile_cont",
      "percentile_disc",
      "period",
      "portion",
      "position",
      "position_regex",
      "power",
      "precedes",
      "precision",
      "prepare",
      "primary",
      "procedure",
      "ptf",
      "range",
      "rank",
      "reads",
      "real",
      "recursive",
      "ref",
      "references",
      "referencing",
      "regr_avgx",
      "regr_avgy",
      "regr_count",
      "regr_intercept",
      "regr_r2",
      "regr_slope",
      "regr_sxx",
      "regr_sxy",
      "regr_syy",
      "release",
      "result",
      "return",
      "returns",
      "revoke",
      "right",
      "rollback",
      "rollup",
      "row",
      "row_number",
      "rows",
      "running",
      "savepoint",
      "scope",
      "scroll",
      "search",
      "second",
      "seek",
      "select",
      "sensitive",
      "session_user",
      "set",
      "show",
      "similar",
      "sin",
      "sinh",
      "skip",
      "smallint",
      "some",
      "specific",
      "specifictype",
      "sql",
      "sqlexception",
      "sqlstate",
      "sqlwarning",
      "sqrt",
      "start",
      "static",
      "stddev_pop",
      "stddev_samp",
      "submultiset",
      "subset",
      "substring",
      "substring_regex",
      "succeeds",
      "sum",
      "symmetric",
      "system",
      "system_time",
      "system_user",
      "table",
      "tablesample",
      "tan",
      "tanh",
      "then",
      "time",
      "timestamp",
      "timezone_hour",
      "timezone_minute",
      "to",
      "trailing",
      "translate",
      "translate_regex",
      "translation",
      "treat",
      "trigger",
      "trim",
      "trim_array",
      "true",
      "truncate",
      "uescape",
      "union",
      "unique",
      "unknown",
      "unnest",
      "update",
      "upper",
      "user",
      "using",
      "value",
      "values",
      "value_of",
      "var_pop",
      "var_samp",
      "varbinary",
      "varchar",
      "varying",
      "versioning",
      "when",
      "whenever",
      "where",
      "width_bucket",
      "window",
      "with",
      "within",
      "without",
      "year"
    ], d2 = [
      "abs",
      "acos",
      "array_agg",
      "asin",
      "atan",
      "avg",
      "cast",
      "ceil",
      "ceiling",
      "coalesce",
      "corr",
      "cos",
      "cosh",
      "count",
      "covar_pop",
      "covar_samp",
      "cume_dist",
      "dense_rank",
      "deref",
      "element",
      "exp",
      "extract",
      "first_value",
      "floor",
      "json_array",
      "json_arrayagg",
      "json_exists",
      "json_object",
      "json_objectagg",
      "json_query",
      "json_table",
      "json_table_primitive",
      "json_value",
      "lag",
      "last_value",
      "lead",
      "listagg",
      "ln",
      "log",
      "log10",
      "lower",
      "max",
      "min",
      "mod",
      "nth_value",
      "ntile",
      "nullif",
      "percent_rank",
      "percentile_cont",
      "percentile_disc",
      "position",
      "position_regex",
      "power",
      "rank",
      "regr_avgx",
      "regr_avgy",
      "regr_count",
      "regr_intercept",
      "regr_r2",
      "regr_slope",
      "regr_sxx",
      "regr_sxy",
      "regr_syy",
      "row_number",
      "sin",
      "sinh",
      "sqrt",
      "stddev_pop",
      "stddev_samp",
      "substring",
      "substring_regex",
      "sum",
      "tan",
      "tanh",
      "translate",
      "translate_regex",
      "treat",
      "trim",
      "trim_array",
      "unnest",
      "upper",
      "value_of",
      "var_pop",
      "var_samp",
      "width_bucket"
    ], f2 = [
      "current_catalog",
      "current_date",
      "current_default_transform_group",
      "current_path",
      "current_role",
      "current_schema",
      "current_transform_group_for_type",
      "current_user",
      "session_user",
      "system_time",
      "system_user",
      "current_time",
      "localtime",
      "current_timestamp",
      "localtimestamp"
    ], b = [
      "create table",
      "insert into",
      "primary key",
      "foreign key",
      "not null",
      "alter table",
      "add constraint",
      "grouping sets",
      "on overflow",
      "character set",
      "respect nulls",
      "ignore nulls",
      "nulls first",
      "nulls last",
      "depth first",
      "breadth first"
    ], c2 = d2, E2 = [
      ..._,
      ...u2
    ].filter((h2) => !d2.includes(h2)), g2 = {
      scope: "variable",
      match: /@[a-z0-9][a-z0-9_]*/
    }, S = {
      scope: "operator",
      match: /[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,
      relevance: 0
    }, p2 = {
      match: n.concat(/\b/, n.either(...c2), /\s*\(/),
      relevance: 0,
      keywords: { built_in: c2 }
    };
    function m2(h2) {
      return n.concat(
        /\b/,
        n.either(...h2.map((C2) => C2.replace(/\s+/, "\\s+"))),
        /\b/
      );
    }
    const R2 = {
      scope: "keyword",
      match: m2(b),
      relevance: 0
    };
    function T(h2, {
      exceptions: C2,
      when: A2
    } = {}) {
      const I2 = A2;
      return C2 = C2 || [], h2.map((v2) => v2.match(/\|\d+$/) || C2.includes(v2) ? v2 : I2(v2) ? `${v2}|0` : v2);
    }
    return {
      name: "SQL",
      case_insensitive: true,
      // does not include {} or HTML tags `</`
      illegal: /[{}]|<\//,
      keywords: {
        $pattern: /\b[\w\.]+/,
        keyword: T(E2, { when: (h2) => h2.length < 3 }),
        literal: s2,
        type: l2,
        built_in: f2
      },
      contains: [
        {
          scope: "type",
          match: m2(o2)
        },
        R2,
        p2,
        g2,
        r2,
        a2,
        e2.C_NUMBER_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        i2,
        S
      ]
    };
  }
  return Ns = t2, Ns;
}
var vs, xp;
function hN() {
  if (xp)
    return vs;
  xp = 1;
  function t2(e2) {
    const n = e2.regex, i2 = [
      "functions",
      "model",
      "data",
      "parameters",
      "quantities",
      "transformed",
      "generated"
    ], r2 = [
      "for",
      "in",
      "if",
      "else",
      "while",
      "break",
      "continue",
      "return"
    ], a2 = [
      "array",
      "tuple",
      "complex",
      "int",
      "real",
      "vector",
      "complex_vector",
      "ordered",
      "positive_ordered",
      "simplex",
      "unit_vector",
      "row_vector",
      "complex_row_vector",
      "matrix",
      "complex_matrix",
      "cholesky_factor_corr|10",
      "cholesky_factor_cov|10",
      "corr_matrix|10",
      "cov_matrix|10",
      "void"
    ], s2 = [
      "abs",
      "acos",
      "acosh",
      "add_diag",
      "algebra_solver",
      "algebra_solver_newton",
      "append_array",
      "append_col",
      "append_row",
      "asin",
      "asinh",
      "atan",
      "atan2",
      "atanh",
      "bessel_first_kind",
      "bessel_second_kind",
      "binary_log_loss",
      "block",
      "cbrt",
      "ceil",
      "chol2inv",
      "cholesky_decompose",
      "choose",
      "col",
      "cols",
      "columns_dot_product",
      "columns_dot_self",
      "complex_schur_decompose",
      "complex_schur_decompose_t",
      "complex_schur_decompose_u",
      "conj",
      "cos",
      "cosh",
      "cov_exp_quad",
      "crossprod",
      "csr_extract",
      "csr_extract_u",
      "csr_extract_v",
      "csr_extract_w",
      "csr_matrix_times_vector",
      "csr_to_dense_matrix",
      "cumulative_sum",
      "dae",
      "dae_tol",
      "determinant",
      "diag_matrix",
      "diagonal",
      "diag_post_multiply",
      "diag_pre_multiply",
      "digamma",
      "dims",
      "distance",
      "dot_product",
      "dot_self",
      "eigendecompose",
      "eigendecompose_sym",
      "eigenvalues",
      "eigenvalues_sym",
      "eigenvectors",
      "eigenvectors_sym",
      "erf",
      "erfc",
      "exp",
      "exp2",
      "expm1",
      "falling_factorial",
      "fdim",
      "fft",
      "fft2",
      "floor",
      "fma",
      "fmax",
      "fmin",
      "fmod",
      "gamma_p",
      "gamma_q",
      "generalized_inverse",
      "get_imag",
      "get_real",
      "head",
      "hmm_hidden_state_prob",
      "hmm_marginal",
      "hypot",
      "identity_matrix",
      "inc_beta",
      "integrate_1d",
      "integrate_ode",
      "integrate_ode_adams",
      "integrate_ode_bdf",
      "integrate_ode_rk45",
      "int_step",
      "inv",
      "inv_cloglog",
      "inv_erfc",
      "inverse",
      "inverse_spd",
      "inv_fft",
      "inv_fft2",
      "inv_inc_beta",
      "inv_logit",
      "inv_Phi",
      "inv_sqrt",
      "inv_square",
      "is_inf",
      "is_nan",
      "lambert_w0",
      "lambert_wm1",
      "lbeta",
      "lchoose",
      "ldexp",
      "lgamma",
      "linspaced_array",
      "linspaced_int_array",
      "linspaced_row_vector",
      "linspaced_vector",
      "lmgamma",
      "lmultiply",
      "log",
      "log1m",
      "log1m_exp",
      "log1m_inv_logit",
      "log1p",
      "log1p_exp",
      "log_determinant",
      "log_diff_exp",
      "log_falling_factorial",
      "log_inv_logit",
      "log_inv_logit_diff",
      "logit",
      "log_mix",
      "log_modified_bessel_first_kind",
      "log_rising_factorial",
      "log_softmax",
      "log_sum_exp",
      "machine_precision",
      "map_rect",
      "matrix_exp",
      "matrix_exp_multiply",
      "matrix_power",
      "max",
      "mdivide_left_spd",
      "mdivide_left_tri_low",
      "mdivide_right_spd",
      "mdivide_right_tri_low",
      "mean",
      "min",
      "modified_bessel_first_kind",
      "modified_bessel_second_kind",
      "multiply_lower_tri_self_transpose",
      "negative_infinity",
      "norm",
      "norm1",
      "norm2",
      "not_a_number",
      "num_elements",
      "ode_adams",
      "ode_adams_tol",
      "ode_adjoint_tol_ctl",
      "ode_bdf",
      "ode_bdf_tol",
      "ode_ckrk",
      "ode_ckrk_tol",
      "ode_rk45",
      "ode_rk45_tol",
      "one_hot_array",
      "one_hot_int_array",
      "one_hot_row_vector",
      "one_hot_vector",
      "ones_array",
      "ones_int_array",
      "ones_row_vector",
      "ones_vector",
      "owens_t",
      "Phi",
      "Phi_approx",
      "polar",
      "positive_infinity",
      "pow",
      "print",
      "prod",
      "proj",
      "qr",
      "qr_Q",
      "qr_R",
      "qr_thin",
      "qr_thin_Q",
      "qr_thin_R",
      "quad_form",
      "quad_form_diag",
      "quad_form_sym",
      "quantile",
      "rank",
      "reduce_sum",
      "reject",
      "rep_array",
      "rep_matrix",
      "rep_row_vector",
      "rep_vector",
      "reverse",
      "rising_factorial",
      "round",
      "row",
      "rows",
      "rows_dot_product",
      "rows_dot_self",
      "scale_matrix_exp_multiply",
      "sd",
      "segment",
      "sin",
      "singular_values",
      "sinh",
      "size",
      "softmax",
      "sort_asc",
      "sort_desc",
      "sort_indices_asc",
      "sort_indices_desc",
      "sqrt",
      "square",
      "squared_distance",
      "step",
      "sub_col",
      "sub_row",
      "sum",
      "svd",
      "svd_U",
      "svd_V",
      "symmetrize_from_lower_tri",
      "tail",
      "tan",
      "tanh",
      "target",
      "tcrossprod",
      "tgamma",
      "to_array_1d",
      "to_array_2d",
      "to_complex",
      "to_int",
      "to_matrix",
      "to_row_vector",
      "to_vector",
      "trace",
      "trace_gen_quad_form",
      "trace_quad_form",
      "trigamma",
      "trunc",
      "uniform_simplex",
      "variance",
      "zeros_array",
      "zeros_int_array",
      "zeros_row_vector"
    ], o2 = [
      "bernoulli",
      "bernoulli_logit",
      "bernoulli_logit_glm",
      "beta",
      "beta_binomial",
      "beta_proportion",
      "binomial",
      "binomial_logit",
      "categorical",
      "categorical_logit",
      "categorical_logit_glm",
      "cauchy",
      "chi_square",
      "dirichlet",
      "discrete_range",
      "double_exponential",
      "exp_mod_normal",
      "exponential",
      "frechet",
      "gamma",
      "gaussian_dlm_obs",
      "gumbel",
      "hmm_latent",
      "hypergeometric",
      "inv_chi_square",
      "inv_gamma",
      "inv_wishart",
      "inv_wishart_cholesky",
      "lkj_corr",
      "lkj_corr_cholesky",
      "logistic",
      "loglogistic",
      "lognormal",
      "multi_gp",
      "multi_gp_cholesky",
      "multinomial",
      "multinomial_logit",
      "multi_normal",
      "multi_normal_cholesky",
      "multi_normal_prec",
      "multi_student_cholesky_t",
      "multi_student_t",
      "multi_student_t_cholesky",
      "neg_binomial",
      "neg_binomial_2",
      "neg_binomial_2_log",
      "neg_binomial_2_log_glm",
      "normal",
      "normal_id_glm",
      "ordered_logistic",
      "ordered_logistic_glm",
      "ordered_probit",
      "pareto",
      "pareto_type_2",
      "poisson",
      "poisson_log",
      "poisson_log_glm",
      "rayleigh",
      "scaled_inv_chi_square",
      "skew_double_exponential",
      "skew_normal",
      "std_normal",
      "std_normal_log",
      "student_t",
      "uniform",
      "von_mises",
      "weibull",
      "wiener",
      "wishart",
      "wishart_cholesky"
    ], l2 = e2.COMMENT(
      /\/\*/,
      /\*\//,
      {
        relevance: 0,
        contains: [
          {
            scope: "doctag",
            match: /@(return|param)/
          }
        ]
      }
    ), u2 = {
      scope: "meta",
      begin: /#include\b/,
      end: /$/,
      contains: [
        {
          match: /[a-z][a-z-._]+/,
          scope: "string"
        },
        e2.C_LINE_COMMENT_MODE
      ]
    }, _ = [
      "lower",
      "upper",
      "offset",
      "multiplier"
    ];
    return {
      name: "Stan",
      aliases: ["stanfuncs"],
      keywords: {
        $pattern: e2.IDENT_RE,
        title: i2,
        type: a2,
        keyword: r2,
        built_in: s2
      },
      contains: [
        e2.C_LINE_COMMENT_MODE,
        u2,
        e2.HASH_COMMENT_MODE,
        l2,
        {
          scope: "built_in",
          match: /\s(pi|e|sqrt2|log2|log10)(?=\()/,
          relevance: 0
        },
        {
          match: n.concat(/[<,]\s*/, n.either(..._), /\s*=/),
          keywords: _
        },
        {
          scope: "keyword",
          match: /\btarget(?=\s*\+=)/
        },
        {
          // highlights the 'T' in T[,] for only Stan language distributrions
          match: [
            /~\s*/,
            n.either(...o2),
            /(?:\(\))/,
            /\s*T(?=\s*\[)/
          ],
          scope: {
            2: "built_in",
            4: "keyword"
          }
        },
        {
          // highlights distributions that end with special endings
          scope: "built_in",
          keywords: o2,
          begin: n.concat(/\w*/, n.either(...o2), /(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\s*[\(.*\)])/)
        },
        {
          // highlights distributions after ~
          begin: [
            /~/,
            /\s*/,
            n.concat(n.either(...o2), /(?=\s*[\(.*\)])/)
          ],
          scope: { 3: "built_in" }
        },
        {
          // highlights user defined distributions after ~
          begin: [
            /~/,
            /\s*\w+(?=\s*[\(.*\)])/,
            "(?!.*/\b(" + n.either(...o2) + ")\b)"
          ],
          scope: { 2: "title.function" }
        },
        {
          // highlights user defined distributions with special endings
          scope: "title.function",
          begin: /\w*(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\s*[\(.*\)])/
        },
        {
          scope: "number",
          match: n.concat(
            // Comes from @RunDevelopment accessed 11/29/2021 at
            // https://github.com/PrismJS/prism/blob/c53ad2e65b7193ab4f03a1797506a54bbb33d5a2/components/prism-stan.js#L56
            // start of big noncapture group which
            // 1. gets numbers that are by themselves
            // 2. numbers that are separated by _
            // 3. numbers that are separted by .
            /(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)/,
            // grabs scientific notation
            // grabs complex numbers with i
            /(?:[eE][+-]?\d+(?:_\d+)*)?i?(?!\w)/
          ),
          relevance: 0
        },
        {
          scope: "string",
          begin: /"/,
          end: /"/
        }
      ]
    };
  }
  return vs = t2, vs;
}
var Os, Lp;
function RN() {
  if (Lp)
    return Os;
  Lp = 1;
  function t2(e2) {
    return {
      name: "Stata",
      aliases: [
        "do",
        "ado"
      ],
      case_insensitive: true,
      keywords: "if else in foreach for forv forva forval forvalu forvalue forvalues by bys bysort xi quietly qui capture about ac ac_7 acprplot acprplot_7 adjust ado adopath adoupdate alpha ameans an ano anov anova anova_estat anova_terms anovadef aorder ap app appe appen append arch arch_dr arch_estat arch_p archlm areg areg_p args arima arima_dr arima_estat arima_p as asmprobit asmprobit_estat asmprobit_lf asmprobit_mfx__dlg asmprobit_p ass asse asser assert avplot avplot_7 avplots avplots_7 bcskew0 bgodfrey bias binreg bip0_lf biplot bipp_lf bipr_lf bipr_p biprobit bitest bitesti bitowt blogit bmemsize boot bootsamp bootstrap bootstrap_8 boxco_l boxco_p boxcox boxcox_6 boxcox_p bprobit br break brier bro brow brows browse brr brrstat bs bs_7 bsampl_w bsample bsample_7 bsqreg bstat bstat_7 bstat_8 bstrap bstrap_7 bubble bubbleplot ca ca_estat ca_p cabiplot camat canon canon_8 canon_8_p canon_estat canon_p cap caprojection capt captu captur capture cat cc cchart cchart_7 cci cd censobs_table centile cf char chdir checkdlgfiles checkestimationsample checkhlpfiles checksum chelp ci cii cl class classutil clear cli clis clist clo clog clog_lf clog_p clogi clogi_sw clogit clogit_lf clogit_p clogitp clogl_sw cloglog clonevar clslistarray cluster cluster_measures cluster_stop cluster_tree cluster_tree_8 clustermat cmdlog cnr cnre cnreg cnreg_p cnreg_sw cnsreg codebook collaps4 collapse colormult_nb colormult_nw compare compress conf confi confir confirm conren cons const constr constra constrai constrain constraint continue contract copy copyright copysource cor corc corr corr2data corr_anti corr_kmo corr_smc corre correl correla correlat correlate corrgram cou coun count cox cox_p cox_sw coxbase coxhaz coxvar cprplot cprplot_7 crc cret cretu cretur creturn cross cs cscript cscript_log csi ct ct_is ctset ctst_5 ctst_st cttost cumsp cumsp_7 cumul cusum cusum_7 cutil d|0 datasig datasign datasigna datasignat datasignatu datasignatur datasignature datetof db dbeta de dec deco decod decode deff des desc descr descri describ describe destring dfbeta dfgls dfuller di di_g dir dirstats dis discard disp disp_res disp_s displ displa display distinct do doe doed doedi doedit dotplot dotplot_7 dprobit drawnorm drop ds ds_util dstdize duplicates durbina dwstat dydx e|0 ed edi edit egen eivreg emdef en enc enco encod encode eq erase ereg ereg_lf ereg_p ereg_sw ereghet ereghet_glf ereghet_glf_sh ereghet_gp ereghet_ilf ereghet_ilf_sh ereghet_ip eret eretu eretur ereturn err erro error esize est est_cfexist est_cfname est_clickable est_expand est_hold est_table est_unhold est_unholdok estat estat_default estat_summ estat_vce_only esti estimates etodow etof etomdy ex exi exit expand expandcl fac fact facto factor factor_estat factor_p factor_pca_rotated factor_rotate factormat fcast fcast_compute fcast_graph fdades fdadesc fdadescr fdadescri fdadescrib fdadescribe fdasav fdasave fdause fh_st file open file read file close file filefilter fillin find_hlp_file findfile findit findit_7 fit fl fli flis flist for5_0 forest forestplot form forma format fpredict frac_154 frac_adj frac_chk frac_cox frac_ddp frac_dis frac_dv frac_in frac_mun frac_pp frac_pq frac_pv frac_wgt frac_xo fracgen fracplot fracplot_7 fracpoly fracpred fron_ex fron_hn fron_p fron_tn fron_tn2 frontier ftodate ftoe ftomdy ftowdate funnel funnelplot g|0 gamhet_glf gamhet_gp gamhet_ilf gamhet_ip gamma gamma_d2 gamma_p gamma_sw gammahet gdi_hexagon gdi_spokes ge gen gene gener genera generat generate genrank genstd genvmean gettoken gl gladder gladder_7 glim_l01 glim_l02 glim_l03 glim_l04 glim_l05 glim_l06 glim_l07 glim_l08 glim_l09 glim_l10 glim_l11 glim_l12 glim_lf glim_mu glim_nw1 glim_nw2 glim_nw3 glim_p glim_v1 glim_v2 glim_v3 glim_v4 glim_v5 glim_v6 glim_v7 glm glm_6 glm_p glm_sw glmpred glo glob globa global glogit glogit_8 glogit_p gmeans gnbre_lf gnbreg gnbreg_5 gnbreg_p gomp_lf gompe_sw gomper_p gompertz gompertzhet gomphet_glf gomphet_glf_sh gomphet_gp gomphet_ilf gomphet_ilf_sh gomphet_ip gphdot gphpen gphprint gprefs gprobi_p gprobit gprobit_8 gr gr7 gr_copy gr_current gr_db gr_describe gr_dir gr_draw gr_draw_replay gr_drop gr_edit gr_editviewopts gr_example gr_example2 gr_export gr_print gr_qscheme gr_query gr_read gr_rename gr_replay gr_save gr_set gr_setscheme gr_table gr_undo gr_use graph graph7 grebar greigen greigen_7 greigen_8 grmeanby grmeanby_7 gs_fileinfo gs_filetype gs_graphinfo gs_stat gsort gwood h|0 hadimvo hareg hausman haver he heck_d2 heckma_p heckman heckp_lf heckpr_p heckprob hel help hereg hetpr_lf hetpr_p hetprob hettest hexdump hilite hist hist_7 histogram hlogit hlu hmeans hotel hotelling hprobit hreg hsearch icd9 icd9_ff icd9p iis impute imtest inbase include inf infi infil infile infix inp inpu input ins insheet insp inspe inspec inspect integ inten intreg intreg_7 intreg_p intrg2_ll intrg_ll intrg_ll2 ipolate iqreg ir irf irf_create irfm iri is_svy is_svysum isid istdize ivprob_1_lf ivprob_lf ivprobit ivprobit_p ivreg ivreg_footnote ivtob_1_lf ivtob_lf ivtobit ivtobit_p jackknife jacknife jknife jknife_6 jknife_8 jkstat joinby kalarma1 kap kap_3 kapmeier kappa kapwgt kdensity kdensity_7 keep ksm ksmirnov ktau kwallis l|0 la lab labbe labbeplot labe label labelbook ladder levels levelsof leverage lfit lfit_p li lincom line linktest lis list lloghet_glf lloghet_glf_sh lloghet_gp lloghet_ilf lloghet_ilf_sh lloghet_ip llogi_sw llogis_p llogist llogistic llogistichet lnorm_lf lnorm_sw lnorma_p lnormal lnormalhet lnormhet_glf lnormhet_glf_sh lnormhet_gp lnormhet_ilf lnormhet_ilf_sh lnormhet_ip lnskew0 loadingplot loc loca local log logi logis_lf logistic logistic_p logit logit_estat logit_p loglogs logrank loneway lookfor lookup lowess lowess_7 lpredict lrecomp lroc lroc_7 lrtest ls lsens lsens_7 lsens_x lstat ltable ltable_7 ltriang lv lvr2plot lvr2plot_7 m|0 ma mac macr macro makecns man manova manova_estat manova_p manovatest mantel mark markin markout marksample mat mat_capp mat_order mat_put_rr mat_rapp mata mata_clear mata_describe mata_drop mata_matdescribe mata_matsave mata_matuse mata_memory mata_mlib mata_mosave mata_rename mata_which matalabel matcproc matlist matname matr matri matrix matrix_input__dlg matstrik mcc mcci md0_ md1_ md1debug_ md2_ md2debug_ mds mds_estat mds_p mdsconfig mdslong mdsmat mdsshepard mdytoe mdytof me_derd mean means median memory memsize menl meqparse mer merg merge meta mfp mfx mhelp mhodds minbound mixed_ll mixed_ll_reparm mkassert mkdir mkmat mkspline ml ml_5 ml_adjs ml_bhhhs ml_c_d ml_check ml_clear ml_cnt ml_debug ml_defd ml_e0 ml_e0_bfgs ml_e0_cycle ml_e0_dfp ml_e0i ml_e1 ml_e1_bfgs ml_e1_bhhh ml_e1_cycle ml_e1_dfp ml_e2 ml_e2_cycle ml_ebfg0 ml_ebfr0 ml_ebfr1 ml_ebh0q ml_ebhh0 ml_ebhr0 ml_ebr0i ml_ecr0i ml_edfp0 ml_edfr0 ml_edfr1 ml_edr0i ml_eds ml_eer0i ml_egr0i ml_elf ml_elf_bfgs ml_elf_bhhh ml_elf_cycle ml_elf_dfp ml_elfi ml_elfs ml_enr0i ml_enrr0 ml_erdu0 ml_erdu0_bfgs ml_erdu0_bhhh ml_erdu0_bhhhq ml_erdu0_cycle ml_erdu0_dfp ml_erdu0_nrbfgs ml_exde ml_footnote ml_geqnr ml_grad0 ml_graph ml_hbhhh ml_hd0 ml_hold ml_init ml_inv ml_log ml_max ml_mlout ml_mlout_8 ml_model ml_nb0 ml_opt ml_p ml_plot ml_query ml_rdgrd ml_repor ml_s_e ml_score ml_searc ml_technique ml_unhold mleval mlf_ mlmatbysum mlmatsum mlog mlogi mlogit mlogit_footnote mlogit_p mlopts mlsum mlvecsum mnl0_ mor more mov move mprobit mprobit_lf mprobit_p mrdu0_ mrdu1_ mvdecode mvencode mvreg mvreg_estat n|0 nbreg nbreg_al nbreg_lf nbreg_p nbreg_sw nestreg net newey newey_7 newey_p news nl nl_7 nl_9 nl_9_p nl_p nl_p_7 nlcom nlcom_p nlexp2 nlexp2_7 nlexp2a nlexp2a_7 nlexp3 nlexp3_7 nlgom3 nlgom3_7 nlgom4 nlgom4_7 nlinit nllog3 nllog3_7 nllog4 nllog4_7 nlog_rd nlogit nlogit_p nlogitgen nlogittree nlpred no nobreak noi nois noisi noisil noisily note notes notes_dlg nptrend numlabel numlist odbc old_ver olo olog ologi ologi_sw ologit ologit_p ologitp on one onew onewa oneway op_colnm op_comp op_diff op_inv op_str opr opro oprob oprob_sw oprobi oprobi_p oprobit oprobitp opts_exclusive order orthog orthpoly ou out outf outfi outfil outfile outs outsh outshe outshee outsheet ovtest pac pac_7 palette parse parse_dissim pause pca pca_8 pca_display pca_estat pca_p pca_rotate pcamat pchart pchart_7 pchi pchi_7 pcorr pctile pentium pergram pergram_7 permute permute_8 personal peto_st pkcollapse pkcross pkequiv pkexamine pkexamine_7 pkshape pksumm pksumm_7 pl plo plot plugin pnorm pnorm_7 poisgof poiss_lf poiss_sw poisso_p poisson poisson_estat post postclose postfile postutil pperron pr prais prais_e prais_e2 prais_p predict predictnl preserve print pro prob probi probit probit_estat probit_p proc_time procoverlay procrustes procrustes_estat procrustes_p profiler prog progr progra program prop proportion prtest prtesti pwcorr pwd q\\s qby qbys qchi qchi_7 qladder qladder_7 qnorm qnorm_7 qqplot qqplot_7 qreg qreg_c qreg_p qreg_sw qu quadchk quantile quantile_7 que quer query range ranksum ratio rchart rchart_7 rcof recast reclink recode reg reg3 reg3_p regdw regr regre regre_p2 regres regres_p regress regress_estat regriv_p remap ren rena renam rename renpfix repeat replace report reshape restore ret retu retur return rm rmdir robvar roccomp roccomp_7 roccomp_8 rocf_lf rocfit rocfit_8 rocgold rocplot rocplot_7 roctab roctab_7 rolling rologit rologit_p rot rota rotat rotate rotatemat rreg rreg_p ru run runtest rvfplot rvfplot_7 rvpplot rvpplot_7 sa safesum sample sampsi sav save savedresults saveold sc sca scal scala scalar scatter scm_mine sco scob_lf scob_p scobi_sw scobit scor score scoreplot scoreplot_help scree screeplot screeplot_help sdtest sdtesti se search separate seperate serrbar serrbar_7 serset set set_defaults sfrancia sh she shel shell shewhart shewhart_7 signestimationsample signrank signtest simul simul_7 simulate simulate_8 sktest sleep slogit slogit_d2 slogit_p smooth snapspan so sor sort spearman spikeplot spikeplot_7 spikeplt spline_x split sqreg sqreg_p sret sretu sretur sreturn ssc st st_ct st_hc st_hcd st_hcd_sh st_is st_issys st_note st_promo st_set st_show st_smpl st_subid stack statsby statsby_8 stbase stci stci_7 stcox stcox_estat stcox_fr stcox_fr_ll stcox_p stcox_sw stcoxkm stcoxkm_7 stcstat stcurv stcurve stcurve_7 stdes stem stepwise stereg stfill stgen stir stjoin stmc stmh stphplot stphplot_7 stphtest stphtest_7 stptime strate strate_7 streg streg_sw streset sts sts_7 stset stsplit stsum sttocc sttoct stvary stweib su suest suest_8 sum summ summa summar summari summariz summarize sunflower sureg survcurv survsum svar svar_p svmat svy svy_disp svy_dreg svy_est svy_est_7 svy_estat svy_get svy_gnbreg_p svy_head svy_header svy_heckman_p svy_heckprob_p svy_intreg_p svy_ivreg_p svy_logistic_p svy_logit_p svy_mlogit_p svy_nbreg_p svy_ologit_p svy_oprobit_p svy_poisson_p svy_probit_p svy_regress_p svy_sub svy_sub_7 svy_x svy_x_7 svy_x_p svydes svydes_8 svygen svygnbreg svyheckman svyheckprob svyintreg svyintreg_7 svyintrg svyivreg svylc svylog_p svylogit svymarkout svymarkout_8 svymean svymlog svymlogit svynbreg svyolog svyologit svyoprob svyoprobit svyopts svypois svypois_7 svypoisson svyprobit svyprobt svyprop svyprop_7 svyratio svyreg svyreg_p svyregress svyset svyset_7 svyset_8 svytab svytab_7 svytest svytotal sw sw_8 swcnreg swcox swereg swilk swlogis swlogit swologit swoprbt swpois swprobit swqreg swtobit swweib symmetry symmi symplot symplot_7 syntax sysdescribe sysdir sysuse szroeter ta tab tab1 tab2 tab_or tabd tabdi tabdis tabdisp tabi table tabodds tabodds_7 tabstat tabu tabul tabula tabulat tabulate te tempfile tempname tempvar tes test testnl testparm teststd tetrachoric time_it timer tis tob tobi tobit tobit_p tobit_sw token tokeni tokeniz tokenize tostring total translate translator transmap treat_ll treatr_p treatreg trim trimfill trnb_cons trnb_mean trpoiss_d2 trunc_ll truncr_p truncreg tsappend tset tsfill tsline tsline_ex tsreport tsrevar tsrline tsset tssmooth tsunab ttest ttesti tut_chk tut_wait tutorial tw tware_st two twoway twoway__fpfit_serset twoway__function_gen twoway__histogram_gen twoway__ipoint_serset twoway__ipoints_serset twoway__kdensity_gen twoway__lfit_serset twoway__normgen_gen twoway__pci_serset twoway__qfit_serset twoway__scatteri_serset twoway__sunflower_gen twoway_ksm_serset ty typ type typeof u|0 unab unabbrev unabcmd update us use uselabel var var_mkcompanion var_p varbasic varfcast vargranger varirf varirf_add varirf_cgraph varirf_create varirf_ctable varirf_describe varirf_dir varirf_drop varirf_erase varirf_graph varirf_ograph varirf_rename varirf_set varirf_table varlist varlmar varnorm varsoc varstable varstable_w varstable_w2 varwle vce vec vec_fevd vec_mkphi vec_p vec_p_w vecirf_create veclmar veclmar_w vecnorm vecnorm_w vecrank vecstable verinst vers versi versio version view viewsource vif vwls wdatetof webdescribe webseek webuse weib1_lf weib2_lf weib_lf weib_lf0 weibhet_glf weibhet_glf_sh weibhet_glfa weibhet_glfa_sh weibhet_gp weibhet_ilf weibhet_ilf_sh weibhet_ilfa weibhet_ilfa_sh weibhet_ip weibu_sw weibul_p weibull weibull_c weibull_s weibullhet wh whelp whi which whil while wilc_st wilcoxon win wind windo window winexec wntestb wntestb_7 wntestq xchart xchart_7 xcorr xcorr_7 xi xi_6 xmlsav xmlsave xmluse xpose xsh xshe xshel xshell xt_iis xt_tis xtab_p xtabond xtbin_p xtclog xtcloglog xtcloglog_8 xtcloglog_d2 xtcloglog_pa_p xtcloglog_re_p xtcnt_p xtcorr xtdata xtdes xtfront_p xtfrontier xtgee xtgee_elink xtgee_estat xtgee_makeivar xtgee_p xtgee_plink xtgls xtgls_p xthaus xthausman xtht_p xthtaylor xtile xtint_p xtintreg xtintreg_8 xtintreg_d2 xtintreg_p xtivp_1 xtivp_2 xtivreg xtline xtline_ex xtlogit xtlogit_8 xtlogit_d2 xtlogit_fe_p xtlogit_pa_p xtlogit_re_p xtmixed xtmixed_estat xtmixed_p xtnb_fe xtnb_lf xtnbreg xtnbreg_pa_p xtnbreg_refe_p xtpcse xtpcse_p xtpois xtpoisson xtpoisson_d2 xtpoisson_pa_p xtpoisson_refe_p xtpred xtprobit xtprobit_8 xtprobit_d2 xtprobit_re_p xtps_fe xtps_lf xtps_ren xtps_ren_8 xtrar_p xtrc xtrc_p xtrchh xtrefe_p xtreg xtreg_be xtreg_fe xtreg_ml xtreg_pa_p xtreg_re xtregar xtrere_p xtset xtsf_ll xtsf_llti xtsum xttab xttest0 xttobit xttobit_8 xttobit_p xttrans yx yxview__barlike_draw yxview_area_draw yxview_bar_draw yxview_dot_draw yxview_dropline_draw yxview_function_draw yxview_iarrow_draw yxview_ilabels_draw yxview_normal_draw yxview_pcarrow_draw yxview_pcbarrow_draw yxview_pccapsym_draw yxview_pcscatter_draw yxview_pcspike_draw yxview_rarea_draw yxview_rbar_draw yxview_rbarm_draw yxview_rcap_draw yxview_rcapsym_draw yxview_rconnected_draw yxview_rline_draw yxview_rscatter_draw yxview_rspike_draw yxview_spike_draw yxview_sunflower_draw zap_s zinb zinb_llf zinb_plf zip zip_llf zip_p zip_plf zt_ct_5 zt_hc_5 zt_hcd_5 zt_is_5 zt_iss_5 zt_sho_5 zt_smp_5 ztbase_5 ztcox_5 ztdes_5 ztereg_5 ztfill_5 ztgen_5 ztir_5 ztjoin_5 ztnb ztnb_p ztp ztp_p zts_5 ztset_5 ztspli_5 ztsum_5 zttoct_5 ztvary_5 ztweib_5",
      contains: [
        {
          className: "symbol",
          begin: /`[a-zA-Z0-9_]+'/
        },
        {
          className: "variable",
          begin: /\$\{?[a-zA-Z0-9_]+\}?/,
          relevance: 0
        },
        {
          className: "string",
          variants: [
            { begin: `\`"[^\r
]*?"'` },
            { begin: `"[^\r
"]*"` }
          ]
        },
        {
          className: "built_in",
          variants: [{ begin: "\\b(abs|acos|asin|atan|atan2|atanh|ceil|cloglog|comb|cos|digamma|exp|floor|invcloglog|invlogit|ln|lnfact|lnfactorial|lngamma|log|log10|max|min|mod|reldif|round|sign|sin|sqrt|sum|tan|tanh|trigamma|trunc|betaden|Binomial|binorm|binormal|chi2|chi2tail|dgammapda|dgammapdada|dgammapdadx|dgammapdx|dgammapdxdx|F|Fden|Ftail|gammaden|gammap|ibeta|invbinomial|invchi2|invchi2tail|invF|invFtail|invgammap|invibeta|invnchi2|invnFtail|invnibeta|invnorm|invnormal|invttail|nbetaden|nchi2|nFden|nFtail|nibeta|norm|normal|normalden|normd|npnchi2|tden|ttail|uniform|abbrev|char|index|indexnot|length|lower|ltrim|match|plural|proper|real|regexm|regexr|regexs|reverse|rtrim|string|strlen|strlower|strltrim|strmatch|strofreal|strpos|strproper|strreverse|strrtrim|strtrim|strupper|subinstr|subinword|substr|trim|upper|word|wordcount|_caller|autocode|byteorder|chop|clip|cond|e|epsdouble|epsfloat|group|inlist|inrange|irecode|matrix|maxbyte|maxdouble|maxfloat|maxint|maxlong|mi|minbyte|mindouble|minfloat|minint|minlong|missing|r|recode|replay|return|s|scalar|d|date|day|dow|doy|halfyear|mdy|month|quarter|week|year|d|daily|dofd|dofh|dofm|dofq|dofw|dofy|h|halfyearly|hofd|m|mofd|monthly|q|qofd|quarterly|tin|twithin|w|weekly|wofd|y|yearly|yh|ym|yofd|yq|yw|cholesky|colnumb|colsof|corr|det|diag|diag0cnt|el|get|hadamard|I|inv|invsym|issym|issymmetric|J|matmissing|matuniform|mreldif|nullmat|rownumb|rowsof|sweep|syminv|trace|vec|vecdiag)(?=\\()" }]
        },
        e2.COMMENT("^[ 	]*\\*.*$", false),
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE
      ]
    };
  }
  return Os = t2, Os;
}
var As, Mp;
function CN() {
  if (Mp)
    return As;
  Mp = 1;
  function t2(e2) {
    return {
      name: "STEP Part 21",
      aliases: [
        "p21",
        "step",
        "stp"
      ],
      case_insensitive: true,
      // STEP 21 is case insensitive in theory, in practice all non-comments are capitalized.
      keywords: {
        $pattern: "[A-Z_][A-Z0-9_.]*",
        keyword: [
          "HEADER",
          "ENDSEC",
          "DATA"
        ]
      },
      contains: [
        {
          className: "meta",
          begin: "ISO-10303-21;",
          relevance: 10
        },
        {
          className: "meta",
          begin: "END-ISO-10303-21;",
          relevance: 10
        },
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        e2.COMMENT("/\\*\\*!", "\\*/"),
        e2.C_NUMBER_MODE,
        e2.inherit(e2.APOS_STRING_MODE, { illegal: null }),
        e2.inherit(e2.QUOTE_STRING_MODE, { illegal: null }),
        {
          className: "string",
          begin: "'",
          end: "'"
        },
        {
          className: "symbol",
          variants: [
            {
              begin: "#",
              end: "\\d+",
              illegal: "\\W"
            }
          ]
        }
      ]
    };
  }
  return As = t2, As;
}
var ys, wp;
function NN() {
  if (wp)
    return ys;
  wp = 1;
  const t2 = (u2) => ({
    IMPORTANT: {
      scope: "meta",
      begin: "!important"
    },
    BLOCK_COMMENT: u2.C_BLOCK_COMMENT_MODE,
    HEXCOLOR: {
      scope: "number",
      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
    },
    FUNCTION_DISPATCH: {
      className: "built_in",
      begin: /[\w-]+(?=\()/
    },
    ATTRIBUTE_SELECTOR_MODE: {
      scope: "selector-attr",
      begin: /\[/,
      end: /\]/,
      illegal: "$",
      contains: [
        u2.APOS_STRING_MODE,
        u2.QUOTE_STRING_MODE
      ]
    },
    CSS_NUMBER_MODE: {
      scope: "number",
      begin: u2.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
      relevance: 0
    },
    CSS_VARIABLE: {
      className: "attr",
      begin: /--[A-Za-z_][A-Za-z0-9_-]*/
    }
  }), e2 = [
    "a",
    "abbr",
    "address",
    "article",
    "aside",
    "audio",
    "b",
    "blockquote",
    "body",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "dd",
    "del",
    "details",
    "dfn",
    "div",
    "dl",
    "dt",
    "em",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "main",
    "mark",
    "menu",
    "nav",
    "object",
    "ol",
    "optgroup",
    "option",
    "p",
    "picture",
    "q",
    "quote",
    "samp",
    "section",
    "select",
    "source",
    "span",
    "strong",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "ul",
    "var",
    "video"
  ], n = [
    "defs",
    "g",
    "marker",
    "mask",
    "pattern",
    "svg",
    "switch",
    "symbol",
    "feBlend",
    "feColorMatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feFlood",
    "feGaussianBlur",
    "feImage",
    "feMerge",
    "feMorphology",
    "feOffset",
    "feSpecularLighting",
    "feTile",
    "feTurbulence",
    "linearGradient",
    "radialGradient",
    "stop",
    "circle",
    "ellipse",
    "image",
    "line",
    "path",
    "polygon",
    "polyline",
    "rect",
    "text",
    "use",
    "textPath",
    "tspan",
    "foreignObject",
    "clipPath"
  ], i2 = [
    ...e2,
    ...n
  ], r2 = [
    "any-hover",
    "any-pointer",
    "aspect-ratio",
    "color",
    "color-gamut",
    "color-index",
    "device-aspect-ratio",
    "device-height",
    "device-width",
    "display-mode",
    "forced-colors",
    "grid",
    "height",
    "hover",
    "inverted-colors",
    "monochrome",
    "orientation",
    "overflow-block",
    "overflow-inline",
    "pointer",
    "prefers-color-scheme",
    "prefers-contrast",
    "prefers-reduced-motion",
    "prefers-reduced-transparency",
    "resolution",
    "scan",
    "scripting",
    "update",
    "width",
    // TODO: find a better solution?
    "min-width",
    "max-width",
    "min-height",
    "max-height"
  ].sort().reverse(), a2 = [
    "active",
    "any-link",
    "blank",
    "checked",
    "current",
    "default",
    "defined",
    "dir",
    // dir()
    "disabled",
    "drop",
    "empty",
    "enabled",
    "first",
    "first-child",
    "first-of-type",
    "fullscreen",
    "future",
    "focus",
    "focus-visible",
    "focus-within",
    "has",
    // has()
    "host",
    // host or host()
    "host-context",
    // host-context()
    "hover",
    "indeterminate",
    "in-range",
    "invalid",
    "is",
    // is()
    "lang",
    // lang()
    "last-child",
    "last-of-type",
    "left",
    "link",
    "local-link",
    "not",
    // not()
    "nth-child",
    // nth-child()
    "nth-col",
    // nth-col()
    "nth-last-child",
    // nth-last-child()
    "nth-last-col",
    // nth-last-col()
    "nth-last-of-type",
    //nth-last-of-type()
    "nth-of-type",
    //nth-of-type()
    "only-child",
    "only-of-type",
    "optional",
    "out-of-range",
    "past",
    "placeholder-shown",
    "read-only",
    "read-write",
    "required",
    "right",
    "root",
    "scope",
    "target",
    "target-within",
    "user-invalid",
    "valid",
    "visited",
    "where"
    // where()
  ].sort().reverse(), s2 = [
    "after",
    "backdrop",
    "before",
    "cue",
    "cue-region",
    "first-letter",
    "first-line",
    "grammar-error",
    "marker",
    "part",
    "placeholder",
    "selection",
    "slotted",
    "spelling-error"
  ].sort().reverse(), o2 = [
    "accent-color",
    "align-content",
    "align-items",
    "align-self",
    "alignment-baseline",
    "all",
    "anchor-name",
    "animation",
    "animation-composition",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-range",
    "animation-range-end",
    "animation-range-start",
    "animation-timeline",
    "animation-timing-function",
    "appearance",
    "aspect-ratio",
    "backdrop-filter",
    "backface-visibility",
    "background",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-position-x",
    "background-position-y",
    "background-repeat",
    "background-size",
    "baseline-shift",
    "block-size",
    "border",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-collapse",
    "border-color",
    "border-end-end-radius",
    "border-end-start-radius",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-start-end-radius",
    "border-start-start-radius",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "bottom",
    "box-align",
    "box-decoration-break",
    "box-direction",
    "box-flex",
    "box-flex-group",
    "box-lines",
    "box-ordinal-group",
    "box-orient",
    "box-pack",
    "box-shadow",
    "box-sizing",
    "break-after",
    "break-before",
    "break-inside",
    "caption-side",
    "caret-color",
    "clear",
    "clip",
    "clip-path",
    "clip-rule",
    "color",
    "color-interpolation",
    "color-interpolation-filters",
    "color-profile",
    "color-rendering",
    "color-scheme",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columns",
    "contain",
    "contain-intrinsic-block-size",
    "contain-intrinsic-height",
    "contain-intrinsic-inline-size",
    "contain-intrinsic-size",
    "contain-intrinsic-width",
    "container",
    "container-name",
    "container-type",
    "content",
    "content-visibility",
    "counter-increment",
    "counter-reset",
    "counter-set",
    "cue",
    "cue-after",
    "cue-before",
    "cursor",
    "cx",
    "cy",
    "direction",
    "display",
    "dominant-baseline",
    "empty-cells",
    "enable-background",
    "field-sizing",
    "fill",
    "fill-opacity",
    "fill-rule",
    "filter",
    "flex",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-shrink",
    "flex-wrap",
    "float",
    "flood-color",
    "flood-opacity",
    "flow",
    "font",
    "font-display",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-optical-sizing",
    "font-palette",
    "font-size",
    "font-size-adjust",
    "font-smooth",
    "font-smoothing",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-synthesis-position",
    "font-synthesis-small-caps",
    "font-synthesis-style",
    "font-synthesis-weight",
    "font-variant",
    "font-variant-alternates",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-emoji",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-variation-settings",
    "font-weight",
    "forced-color-adjust",
    "gap",
    "glyph-orientation-horizontal",
    "glyph-orientation-vertical",
    "grid",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-start",
    "grid-gap",
    "grid-row",
    "grid-row-end",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "hanging-punctuation",
    "height",
    "hyphenate-character",
    "hyphenate-limit-chars",
    "hyphens",
    "icon",
    "image-orientation",
    "image-rendering",
    "image-resolution",
    "ime-mode",
    "initial-letter",
    "initial-letter-align",
    "inline-size",
    "inset",
    "inset-area",
    "inset-block",
    "inset-block-end",
    "inset-block-start",
    "inset-inline",
    "inset-inline-end",
    "inset-inline-start",
    "isolation",
    "justify-content",
    "justify-items",
    "justify-self",
    "kerning",
    "left",
    "letter-spacing",
    "lighting-color",
    "line-break",
    "line-height",
    "line-height-step",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "margin",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "margin-trim",
    "marker",
    "marker-end",
    "marker-mid",
    "marker-start",
    "marks",
    "mask",
    "mask-border",
    "mask-border-mode",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-border-slice",
    "mask-border-source",
    "mask-border-width",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "masonry-auto-flow",
    "math-depth",
    "math-shift",
    "math-style",
    "max-block-size",
    "max-height",
    "max-inline-size",
    "max-width",
    "min-block-size",
    "min-height",
    "min-inline-size",
    "min-width",
    "mix-blend-mode",
    "nav-down",
    "nav-index",
    "nav-left",
    "nav-right",
    "nav-up",
    "none",
    "normal",
    "object-fit",
    "object-position",
    "offset",
    "offset-anchor",
    "offset-distance",
    "offset-path",
    "offset-position",
    "offset-rotate",
    "opacity",
    "order",
    "orphans",
    "outline",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "overflow",
    "overflow-anchor",
    "overflow-block",
    "overflow-clip-margin",
    "overflow-inline",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "overlay",
    "overscroll-behavior",
    "overscroll-behavior-block",
    "overscroll-behavior-inline",
    "overscroll-behavior-x",
    "overscroll-behavior-y",
    "padding",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "page",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "paint-order",
    "pause",
    "pause-after",
    "pause-before",
    "perspective",
    "perspective-origin",
    "place-content",
    "place-items",
    "place-self",
    "pointer-events",
    "position",
    "position-anchor",
    "position-visibility",
    "print-color-adjust",
    "quotes",
    "r",
    "resize",
    "rest",
    "rest-after",
    "rest-before",
    "right",
    "rotate",
    "row-gap",
    "ruby-align",
    "ruby-position",
    "scale",
    "scroll-behavior",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-stop",
    "scroll-snap-type",
    "scroll-timeline",
    "scroll-timeline-axis",
    "scroll-timeline-name",
    "scrollbar-color",
    "scrollbar-gutter",
    "scrollbar-width",
    "shape-image-threshold",
    "shape-margin",
    "shape-outside",
    "shape-rendering",
    "speak",
    "speak-as",
    "src",
    // @font-face
    "stop-color",
    "stop-opacity",
    "stroke",
    "stroke-dasharray",
    "stroke-dashoffset",
    "stroke-linecap",
    "stroke-linejoin",
    "stroke-miterlimit",
    "stroke-opacity",
    "stroke-width",
    "tab-size",
    "table-layout",
    "text-align",
    "text-align-all",
    "text-align-last",
    "text-anchor",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-line",
    "text-decoration-skip",
    "text-decoration-skip-ink",
    "text-decoration-style",
    "text-decoration-thickness",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-style",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-size-adjust",
    "text-transform",
    "text-underline-offset",
    "text-underline-position",
    "text-wrap",
    "text-wrap-mode",
    "text-wrap-style",
    "timeline-scope",
    "top",
    "touch-action",
    "transform",
    "transform-box",
    "transform-origin",
    "transform-style",
    "transition",
    "transition-behavior",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "translate",
    "unicode-bidi",
    "user-modify",
    "user-select",
    "vector-effect",
    "vertical-align",
    "view-timeline",
    "view-timeline-axis",
    "view-timeline-inset",
    "view-timeline-name",
    "view-transition-name",
    "visibility",
    "voice-balance",
    "voice-duration",
    "voice-family",
    "voice-pitch",
    "voice-range",
    "voice-rate",
    "voice-stress",
    "voice-volume",
    "white-space",
    "white-space-collapse",
    "widows",
    "width",
    "will-change",
    "word-break",
    "word-spacing",
    "word-wrap",
    "writing-mode",
    "x",
    "y",
    "z-index",
    "zoom"
  ].sort().reverse();
  function l2(u2) {
    const _ = t2(u2), d2 = "and or not only", f2 = {
      className: "variable",
      begin: "\\$" + u2.IDENT_RE
    }, b = [
      "charset",
      "css",
      "debug",
      "extend",
      "font-face",
      "for",
      "import",
      "include",
      "keyframes",
      "media",
      "mixin",
      "page",
      "warn",
      "while"
    ], c2 = "(?=[.\\s\\n[:,(])";
    return {
      name: "Stylus",
      aliases: ["styl"],
      case_insensitive: false,
      keywords: "if else for in",
      illegal: "(" + [
        "\\?",
        "(\\bReturn\\b)",
        // monkey
        "(\\bEnd\\b)",
        // monkey
        "(\\bend\\b)",
        // vbscript
        "(\\bdef\\b)",
        // gradle
        ";",
        // a whole lot of languages
        "#\\s",
        // markdown
        "\\*\\s",
        // markdown
        "===\\s",
        // markdown
        "\\|",
        "%"
        // prolog
      ].join("|") + ")",
      contains: [
        // strings
        u2.QUOTE_STRING_MODE,
        u2.APOS_STRING_MODE,
        // comments
        u2.C_LINE_COMMENT_MODE,
        u2.C_BLOCK_COMMENT_MODE,
        // hex colors
        _.HEXCOLOR,
        // class tag
        {
          begin: "\\.[a-zA-Z][a-zA-Z0-9_-]*" + c2,
          className: "selector-class"
        },
        // id tag
        {
          begin: "#[a-zA-Z][a-zA-Z0-9_-]*" + c2,
          className: "selector-id"
        },
        // tags
        {
          begin: "\\b(" + i2.join("|") + ")" + c2,
          className: "selector-tag"
        },
        // psuedo selectors
        {
          className: "selector-pseudo",
          begin: "&?:(" + a2.join("|") + ")" + c2
        },
        {
          className: "selector-pseudo",
          begin: "&?:(:)?(" + s2.join("|") + ")" + c2
        },
        _.ATTRIBUTE_SELECTOR_MODE,
        {
          className: "keyword",
          begin: /@media/,
          starts: {
            end: /[{;}]/,
            keywords: {
              $pattern: /[a-z-]+/,
              keyword: d2,
              attribute: r2.join(" ")
            },
            contains: [_.CSS_NUMBER_MODE]
          }
        },
        // @ keywords
        {
          className: "keyword",
          begin: "@((-(o|moz|ms|webkit)-)?(" + b.join("|") + "))\\b"
        },
        // variables
        f2,
        // dimension
        _.CSS_NUMBER_MODE,
        // functions
        //  - only from beginning of line + whitespace
        {
          className: "function",
          begin: "^[a-zA-Z][a-zA-Z0-9_-]*\\(.*\\)",
          illegal: "[\\n]",
          returnBegin: true,
          contains: [
            {
              className: "title",
              begin: "\\b[a-zA-Z][a-zA-Z0-9_-]*"
            },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              contains: [
                _.HEXCOLOR,
                f2,
                u2.APOS_STRING_MODE,
                _.CSS_NUMBER_MODE,
                u2.QUOTE_STRING_MODE
              ]
            }
          ]
        },
        // css variables
        _.CSS_VARIABLE,
        // attributes
        //  - only from beginning of line + whitespace
        //  - must have whitespace after it
        {
          className: "attribute",
          begin: "\\b(" + o2.join("|") + ")\\b",
          starts: {
            // value container
            end: /;|$/,
            contains: [
              _.HEXCOLOR,
              f2,
              u2.APOS_STRING_MODE,
              u2.QUOTE_STRING_MODE,
              _.CSS_NUMBER_MODE,
              u2.C_BLOCK_COMMENT_MODE,
              _.IMPORTANT,
              _.FUNCTION_DISPATCH
            ],
            illegal: /\./,
            relevance: 0
          }
        },
        _.FUNCTION_DISPATCH
      ]
    };
  }
  return ys = l2, ys;
}
var Is, kp;
function vN() {
  if (kp)
    return Is;
  kp = 1;
  function t2(e2) {
    return {
      name: "SubUnit",
      case_insensitive: true,
      contains: [
        {
          className: "string",
          begin: `\\[
(multipart)?`,
          end: `\\]
`
        },
        {
          className: "string",
          begin: "\\d{4}-\\d{2}-\\d{2}(\\s+)\\d{2}:\\d{2}:\\d{2}.\\d+Z"
        },
        {
          className: "string",
          begin: "(\\+|-)\\d+"
        },
        {
          className: "keyword",
          relevance: 10,
          variants: [
            { begin: "^(test|testing|success|successful|failure|error|skip|xfail|uxsuccess)(:?)\\s+(test)?" },
            { begin: "^progress(:?)(\\s+)?(pop|push)?" },
            { begin: "^tags:" },
            { begin: "^time:" }
          ]
        }
      ]
    };
  }
  return Is = t2, Is;
}
var Ds, Pp;
function ON() {
  if (Pp)
    return Ds;
  Pp = 1;
  function t2(A2) {
    return A2 ? typeof A2 == "string" ? A2 : A2.source : null;
  }
  function e2(A2) {
    return n("(?=", A2, ")");
  }
  function n(...A2) {
    return A2.map((v2) => t2(v2)).join("");
  }
  function i2(A2) {
    const I2 = A2[A2.length - 1];
    return typeof I2 == "object" && I2.constructor === Object ? (A2.splice(A2.length - 1, 1), I2) : {};
  }
  function r2(...A2) {
    return "(" + (i2(A2).capture ? "" : "?:") + A2.map((x) => t2(x)).join("|") + ")";
  }
  const a2 = (A2) => n(
    /\b/,
    A2,
    /\w$/.test(A2) ? /\b/ : /\B/
  ), s2 = [
    "Protocol",
    // contextual
    "Type"
    // contextual
  ].map(a2), o2 = [
    "init",
    "self"
  ].map(a2), l2 = [
    "Any",
    "Self"
  ], u2 = [
    // strings below will be fed into the regular `keywords` engine while regex
    // will result in additional modes being created to scan for those keywords to
    // avoid conflicts with other rules
    "actor",
    "any",
    // contextual
    "associatedtype",
    "async",
    "await",
    /as\?/,
    // operator
    /as!/,
    // operator
    "as",
    // operator
    "borrowing",
    // contextual
    "break",
    "case",
    "catch",
    "class",
    "consume",
    // contextual
    "consuming",
    // contextual
    "continue",
    "convenience",
    // contextual
    "copy",
    // contextual
    "default",
    "defer",
    "deinit",
    "didSet",
    // contextual
    "distributed",
    "do",
    "dynamic",
    // contextual
    "each",
    "else",
    "enum",
    "extension",
    "fallthrough",
    /fileprivate\(set\)/,
    "fileprivate",
    "final",
    // contextual
    "for",
    "func",
    "get",
    // contextual
    "guard",
    "if",
    "import",
    "indirect",
    // contextual
    "infix",
    // contextual
    /init\?/,
    /init!/,
    "inout",
    /internal\(set\)/,
    "internal",
    "in",
    "is",
    // operator
    "isolated",
    // contextual
    "nonisolated",
    // contextual
    "lazy",
    // contextual
    "let",
    "macro",
    "mutating",
    // contextual
    "nonmutating",
    // contextual
    /open\(set\)/,
    // contextual
    "open",
    // contextual
    "operator",
    "optional",
    // contextual
    "override",
    // contextual
    "package",
    "postfix",
    // contextual
    "precedencegroup",
    "prefix",
    // contextual
    /private\(set\)/,
    "private",
    "protocol",
    /public\(set\)/,
    "public",
    "repeat",
    "required",
    // contextual
    "rethrows",
    "return",
    "set",
    // contextual
    "some",
    // contextual
    "static",
    "struct",
    "subscript",
    "super",
    "switch",
    "throws",
    "throw",
    /try\?/,
    // operator
    /try!/,
    // operator
    "try",
    // operator
    "typealias",
    /unowned\(safe\)/,
    // contextual
    /unowned\(unsafe\)/,
    // contextual
    "unowned",
    // contextual
    "var",
    "weak",
    // contextual
    "where",
    "while",
    "willSet"
    // contextual
  ], _ = [
    "false",
    "nil",
    "true"
  ], d2 = [
    "assignment",
    "associativity",
    "higherThan",
    "left",
    "lowerThan",
    "none",
    "right"
  ], f2 = [
    "#colorLiteral",
    "#column",
    "#dsohandle",
    "#else",
    "#elseif",
    "#endif",
    "#error",
    "#file",
    "#fileID",
    "#fileLiteral",
    "#filePath",
    "#function",
    "#if",
    "#imageLiteral",
    "#keyPath",
    "#line",
    "#selector",
    "#sourceLocation",
    "#warning"
  ], b = [
    "abs",
    "all",
    "any",
    "assert",
    "assertionFailure",
    "debugPrint",
    "dump",
    "fatalError",
    "getVaList",
    "isKnownUniquelyReferenced",
    "max",
    "min",
    "numericCast",
    "pointwiseMax",
    "pointwiseMin",
    "precondition",
    "preconditionFailure",
    "print",
    "readLine",
    "repeatElement",
    "sequence",
    "stride",
    "swap",
    "swift_unboxFromSwiftValueWithType",
    "transcode",
    "type",
    "unsafeBitCast",
    "unsafeDowncast",
    "withExtendedLifetime",
    "withUnsafeMutablePointer",
    "withUnsafePointer",
    "withVaList",
    "withoutActuallyEscaping",
    "zip"
  ], c2 = r2(
    /[/=\-+!*%<>&|^~?]/,
    /[\u00A1-\u00A7]/,
    /[\u00A9\u00AB]/,
    /[\u00AC\u00AE]/,
    /[\u00B0\u00B1]/,
    /[\u00B6\u00BB\u00BF\u00D7\u00F7]/,
    /[\u2016-\u2017]/,
    /[\u2020-\u2027]/,
    /[\u2030-\u203E]/,
    /[\u2041-\u2053]/,
    /[\u2055-\u205E]/,
    /[\u2190-\u23FF]/,
    /[\u2500-\u2775]/,
    /[\u2794-\u2BFF]/,
    /[\u2E00-\u2E7F]/,
    /[\u3001-\u3003]/,
    /[\u3008-\u3020]/,
    /[\u3030]/
  ), E2 = r2(
    c2,
    /[\u0300-\u036F]/,
    /[\u1DC0-\u1DFF]/,
    /[\u20D0-\u20FF]/,
    /[\uFE00-\uFE0F]/,
    /[\uFE20-\uFE2F]/
    // TODO: The following characters are also allowed, but the regex isn't supported yet.
    // /[\u{E0100}-\u{E01EF}]/u
  ), g2 = n(c2, E2, "*"), S = r2(
    /[a-zA-Z_]/,
    /[\u00A8\u00AA\u00AD\u00AF\u00B2-\u00B5\u00B7-\u00BA]/,
    /[\u00BC-\u00BE\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF]/,
    /[\u0100-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF]/,
    /[\u1E00-\u1FFF]/,
    /[\u200B-\u200D\u202A-\u202E\u203F-\u2040\u2054\u2060-\u206F]/,
    /[\u2070-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793]/,
    /[\u2C00-\u2DFF\u2E80-\u2FFF]/,
    /[\u3004-\u3007\u3021-\u302F\u3031-\u303F\u3040-\uD7FF]/,
    /[\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44]/,
    /[\uFE47-\uFEFE\uFF00-\uFFFD]/
    // Should be /[\uFE47-\uFFFD]/, but we have to exclude FEFF.
    // The following characters are also allowed, but the regexes aren't supported yet.
    // /[\u{10000}-\u{1FFFD}\u{20000-\u{2FFFD}\u{30000}-\u{3FFFD}\u{40000}-\u{4FFFD}]/u,
    // /[\u{50000}-\u{5FFFD}\u{60000-\u{6FFFD}\u{70000}-\u{7FFFD}\u{80000}-\u{8FFFD}]/u,
    // /[\u{90000}-\u{9FFFD}\u{A0000-\u{AFFFD}\u{B0000}-\u{BFFFD}\u{C0000}-\u{CFFFD}]/u,
    // /[\u{D0000}-\u{DFFFD}\u{E0000-\u{EFFFD}]/u
  ), p2 = r2(
    S,
    /\d/,
    /[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]/
  ), m2 = n(S, p2, "*"), R2 = n(/[A-Z]/, p2, "*"), T = [
    "attached",
    "autoclosure",
    n(/convention\(/, r2("swift", "block", "c"), /\)/),
    "discardableResult",
    "dynamicCallable",
    "dynamicMemberLookup",
    "escaping",
    "freestanding",
    "frozen",
    "GKInspectable",
    "IBAction",
    "IBDesignable",
    "IBInspectable",
    "IBOutlet",
    "IBSegueAction",
    "inlinable",
    "main",
    "nonobjc",
    "NSApplicationMain",
    "NSCopying",
    "NSManaged",
    n(/objc\(/, m2, /\)/),
    "objc",
    "objcMembers",
    "propertyWrapper",
    "requires_stored_property_inits",
    "resultBuilder",
    "Sendable",
    "testable",
    "UIApplicationMain",
    "unchecked",
    "unknown",
    "usableFromInline",
    "warn_unqualified_access"
  ], h2 = [
    "iOS",
    "iOSApplicationExtension",
    "macOS",
    "macOSApplicationExtension",
    "macCatalyst",
    "macCatalystApplicationExtension",
    "watchOS",
    "watchOSApplicationExtension",
    "tvOS",
    "tvOSApplicationExtension",
    "swift"
  ];
  function C2(A2) {
    const I2 = {
      match: /\s+/,
      relevance: 0
    }, v2 = A2.COMMENT(
      "/\\*",
      "\\*/",
      { contains: ["self"] }
    ), x = [
      A2.C_LINE_COMMENT_MODE,
      v2
    ], M = {
      match: [
        /\./,
        r2(...s2, ...o2)
      ],
      className: { 2: "keyword" }
    }, B2 = {
      // Consume .keyword to prevent highlighting properties and methods as keywords.
      match: n(/\./, r2(...u2)),
      relevance: 0
    }, G2 = u2.filter((Oe) => typeof Oe == "string").concat(["_|0"]), D = u2.filter((Oe) => typeof Oe != "string").concat(l2).map(a2), w = { variants: [
      {
        className: "keyword",
        match: r2(...D, ...o2)
      }
    ] }, L = {
      $pattern: r2(
        /\b\w+/,
        // regular keywords
        /#\w+/
        // number keywords
      ),
      keyword: G2.concat(f2),
      literal: _
    }, q2 = [
      M,
      B2,
      w
    ], z = {
      // Consume .built_in to prevent highlighting properties and methods.
      match: n(/\./, r2(...b)),
      relevance: 0
    }, re = {
      className: "built_in",
      match: n(/\b/, r2(...b), /(?=\()/)
    }, j = [
      z,
      re
    ], ue = {
      // Prevent -> from being highlighting as an operator.
      match: /->/,
      relevance: 0
    }, se2 = {
      className: "operator",
      relevance: 0,
      variants: [
        { match: g2 },
        {
          // dot-operator: only operators that start with a dot are allowed to use dots as
          // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more
          // characters that may also include dots.
          match: `\\.(\\.|${E2})+`
        }
      ]
    }, Re2 = [
      ue,
      se2
    ], Ce = "([0-9]_*)+", Te2 = "([0-9a-fA-F]_*)+", ne2 = {
      className: "number",
      relevance: 0,
      variants: [
        // decimal floating-point-literal (subsumes decimal-literal)
        { match: `\\b(${Ce})(\\.(${Ce}))?([eE][+-]?(${Ce}))?\\b` },
        // hexadecimal floating-point-literal (subsumes hexadecimal-literal)
        { match: `\\b0x(${Te2})(\\.(${Te2}))?([pP][+-]?(${Ce}))?\\b` },
        // octal-literal
        { match: /\b0o([0-7]_*)+\b/ },
        // binary-literal
        { match: /\b0b([01]_*)+\b/ }
      ]
    }, ae = (Oe = "") => ({
      className: "subst",
      variants: [
        { match: n(/\\/, Oe, /[0\\tnr"']/) },
        { match: n(/\\/, Oe, /u\{[0-9a-fA-F]{1,8}\}/) }
      ]
    }), pe = (Oe = "") => ({
      className: "subst",
      match: n(/\\/, Oe, /[\t ]*(?:[\r\n]|\r\n)/)
    }), fe2 = (Oe = "") => ({
      className: "subst",
      label: "interpol",
      begin: n(/\\/, Oe, /\(/),
      end: /\)/
    }), Ne = (Oe = "") => ({
      begin: n(Oe, /"""/),
      end: n(/"""/, Oe),
      contains: [
        ae(Oe),
        pe(Oe),
        fe2(Oe)
      ]
    }), ve2 = (Oe = "") => ({
      begin: n(Oe, /"/),
      end: n(/"/, Oe),
      contains: [
        ae(Oe),
        fe2(Oe)
      ]
    }), Ie = {
      className: "string",
      variants: [
        Ne(),
        Ne("#"),
        Ne("##"),
        Ne("###"),
        ve2(),
        ve2("#"),
        ve2("##"),
        ve2("###")
      ]
    }, Ue = [
      A2.BACKSLASH_ESCAPE,
      {
        begin: /\[/,
        end: /\]/,
        relevance: 0,
        contains: [A2.BACKSLASH_ESCAPE]
      }
    ], De2 = {
      begin: /\/[^\s](?=[^/\n]*\/)/,
      end: /\//,
      contains: Ue
    }, Je2 = (Oe) => {
      const tn2 = n(Oe, /\//), Pt = n(/\//, Oe);
      return {
        begin: tn2,
        end: Pt,
        contains: [
          ...Ue,
          {
            scope: "comment",
            begin: `#(?!.*${Pt})`,
            end: /$/
          }
        ]
      };
    }, kt = {
      scope: "regexp",
      variants: [
        Je2("###"),
        Je2("##"),
        Je2("#"),
        De2
      ]
    }, O = { match: n(/`/, m2, /`/) }, y = {
      className: "variable",
      match: /\$\d+/
    }, U2 = {
      className: "variable",
      match: `\\$${p2}+`
    }, Q2 = [
      O,
      y,
      U2
    ], ke2 = {
      match: /(@|#(un)?)available/,
      scope: "keyword",
      starts: { contains: [
        {
          begin: /\(/,
          end: /\)/,
          keywords: h2,
          contains: [
            ...Re2,
            ne2,
            Ie
          ]
        }
      ] }
    }, xe = {
      scope: "keyword",
      match: n(/@/, r2(...T), e2(r2(/\(/, /\s+/)))
    }, le = {
      scope: "meta",
      match: n(/@/, m2)
    }, k = [
      ke2,
      xe,
      le
    ], F = {
      match: e2(/\b[A-Z]/),
      relevance: 0,
      contains: [
        {
          // Common Apple frameworks, for relevance boost
          className: "type",
          match: n(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, p2, "+")
        },
        {
          // Type identifier
          className: "type",
          match: R2,
          relevance: 0
        },
        {
          // Optional type
          match: /[?!]+/,
          relevance: 0
        },
        {
          // Variadic parameter
          match: /\.\.\./,
          relevance: 0
        },
        {
          // Protocol composition
          match: n(/\s+&\s+/, e2(R2)),
          relevance: 0
        }
      ]
    }, me2 = {
      begin: /</,
      end: />/,
      keywords: L,
      contains: [
        ...x,
        ...q2,
        ...k,
        ue,
        F
      ]
    };
    F.contains.push(me2);
    const Le2 = {
      match: n(m2, /\s*:/),
      keywords: "_|0",
      relevance: 0
    }, it2 = {
      begin: /\(/,
      end: /\)/,
      relevance: 0,
      keywords: L,
      contains: [
        "self",
        Le2,
        ...x,
        kt,
        ...q2,
        ...j,
        ...Re2,
        ne2,
        Ie,
        ...Q2,
        ...k,
        F
      ]
    }, ft2 = {
      begin: /</,
      end: />/,
      keywords: "repeat each",
      contains: [
        ...x,
        F
      ]
    }, St2 = {
      begin: r2(
        e2(n(m2, /\s*:/)),
        e2(n(m2, /\s+/, m2, /\s*:/))
      ),
      end: /:/,
      relevance: 0,
      contains: [
        {
          className: "keyword",
          match: /\b_\b/
        },
        {
          className: "params",
          match: m2
        }
      ]
    }, ot2 = {
      begin: /\(/,
      end: /\)/,
      keywords: L,
      contains: [
        St2,
        ...x,
        ...q2,
        ...Re2,
        ne2,
        Ie,
        ...k,
        F,
        it2
      ],
      endsParent: true,
      illegal: /["']/
    }, cn2 = {
      match: [
        /(func|macro)/,
        /\s+/,
        r2(O.match, m2, g2)
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        ft2,
        ot2,
        I2
      ],
      illegal: [
        /\[/,
        /%/
      ]
    }, zt2 = {
      match: [
        /\b(?:subscript|init[?!]?)/,
        /\s*(?=[<(])/
      ],
      className: { 1: "keyword" },
      contains: [
        ft2,
        ot2,
        I2
      ],
      illegal: /\[|%/
    }, Zn = {
      match: [
        /operator/,
        /\s+/,
        g2
      ],
      className: {
        1: "keyword",
        3: "title"
      }
    }, Jn = {
      begin: [
        /precedencegroup/,
        /\s+/,
        R2
      ],
      className: {
        1: "keyword",
        3: "title"
      },
      contains: [F],
      keywords: [
        ...d2,
        ..._
      ],
      end: /}/
    }, jn = {
      match: [
        /class\b/,
        /\s+/,
        /func\b/,
        /\s+/,
        /\b[A-Za-z_][A-Za-z0-9_]*\b/
      ],
      scope: {
        1: "keyword",
        3: "keyword",
        5: "title.function"
      }
    }, un2 = {
      match: [
        /class\b/,
        /\s+/,
        /var\b/
      ],
      scope: {
        1: "keyword",
        3: "keyword"
      }
    }, vn = {
      begin: [
        /(struct|protocol|class|extension|enum|actor)/,
        /\s+/,
        m2,
        /\s*/
      ],
      beginScope: {
        1: "keyword",
        3: "title.class"
      },
      keywords: L,
      contains: [
        ft2,
        ...q2,
        {
          begin: /:/,
          end: /\{/,
          keywords: L,
          contains: [
            {
              scope: "title.class.inherited",
              match: R2
            },
            ...q2
          ],
          relevance: 0
        }
      ]
    };
    for (const Oe of Ie.variants) {
      const tn2 = Oe.contains.find((Ft2) => Ft2.label === "interpol");
      tn2.keywords = L;
      const Pt = [
        ...q2,
        ...j,
        ...Re2,
        ne2,
        Ie,
        ...Q2
      ];
      tn2.contains = [
        ...Pt,
        {
          begin: /\(/,
          end: /\)/,
          contains: [
            "self",
            ...Pt
          ]
        }
      ];
    }
    return {
      name: "Swift",
      keywords: L,
      contains: [
        ...x,
        cn2,
        zt2,
        jn,
        un2,
        vn,
        Zn,
        Jn,
        {
          beginKeywords: "import",
          end: /$/,
          contains: [...x],
          relevance: 0
        },
        kt,
        ...q2,
        ...j,
        ...Re2,
        ne2,
        Ie,
        ...Q2,
        ...k,
        F,
        it2
      ]
    };
  }
  return Ds = C2, Ds;
}
var xs, Fp;
function AN() {
  if (Fp)
    return xs;
  Fp = 1;
  function t2(e2) {
    return {
      name: "Tagger Script",
      contains: [
        {
          className: "comment",
          begin: /\$noop\(/,
          end: /\)/,
          contains: [
            { begin: /\\[()]/ },
            {
              begin: /\(/,
              end: /\)/,
              contains: [
                { begin: /\\[()]/ },
                "self"
              ]
            }
          ],
          relevance: 10
        },
        {
          className: "keyword",
          begin: /\$[_a-zA-Z0-9]+(?=\()/
        },
        {
          className: "variable",
          begin: /%[_a-zA-Z0-9:]+%/
        },
        {
          className: "symbol",
          begin: /\\[\\nt$%,()]/
        },
        {
          className: "symbol",
          begin: /\\u[a-fA-F0-9]{4}/
        }
      ]
    };
  }
  return xs = t2, xs;
}
var Ls, Up;
function yN() {
  if (Up)
    return Ls;
  Up = 1;
  function t2(e2) {
    const n = "true false yes no null", i2 = "[\\w#;/?:@&=+$,.~*'()[\\]]+", r2 = {
      className: "attr",
      variants: [
        // added brackets support and special char support
        { begin: /[\w*@][\w*@ :()\./-]*:(?=[ \t]|$)/ },
        {
          // double quoted keys - with brackets and special char support
          begin: /"[\w*@][\w*@ :()\./-]*":(?=[ \t]|$)/
        },
        {
          // single quoted keys - with brackets and special char support
          begin: /'[\w*@][\w*@ :()\./-]*':(?=[ \t]|$)/
        }
      ]
    }, a2 = {
      className: "template-variable",
      variants: [
        {
          // jinja templates Ansible
          begin: /\{\{/,
          end: /\}\}/
        },
        {
          // Ruby i18n
          begin: /%\{/,
          end: /\}/
        }
      ]
    }, s2 = {
      className: "string",
      relevance: 0,
      begin: /'/,
      end: /'/,
      contains: [
        {
          match: /''/,
          scope: "char.escape",
          relevance: 0
        }
      ]
    }, o2 = {
      className: "string",
      relevance: 0,
      variants: [
        {
          begin: /"/,
          end: /"/
        },
        { begin: /\S+/ }
      ],
      contains: [
        e2.BACKSLASH_ESCAPE,
        a2
      ]
    }, l2 = e2.inherit(o2, { variants: [
      {
        begin: /'/,
        end: /'/,
        contains: [
          {
            begin: /''/,
            relevance: 0
          }
        ]
      },
      {
        begin: /"/,
        end: /"/
      },
      { begin: /[^\s,{}[\]]+/ }
    ] }), b = {
      className: "number",
      begin: "\\b[0-9]{4}(-[0-9][0-9]){0,2}([Tt \\t][0-9][0-9]?(:[0-9][0-9]){2})?(\\.[0-9]*)?([ \\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?\\b"
    }, c2 = {
      end: ",",
      endsWithParent: true,
      excludeEnd: true,
      keywords: n,
      relevance: 0
    }, E2 = {
      begin: /\{/,
      end: /\}/,
      contains: [c2],
      illegal: "\\n",
      relevance: 0
    }, g2 = {
      begin: "\\[",
      end: "\\]",
      contains: [c2],
      illegal: "\\n",
      relevance: 0
    }, S = [
      r2,
      {
        className: "meta",
        begin: "^---\\s*$",
        relevance: 10
      },
      {
        // multi line string
        // Blocks start with a | or > followed by a newline
        //
        // Indentation of subsequent lines must be the same to
        // be considered part of the block
        className: "string",
        begin: "[\\|>]([1-9]?[+-])?[ ]*\\n( +)[^ ][^\\n]*\\n(\\2[^\\n]+\\n?)*"
      },
      {
        // Ruby/Rails erb
        begin: "<%[%=-]?",
        end: "[%-]?%>",
        subLanguage: "ruby",
        excludeBegin: true,
        excludeEnd: true,
        relevance: 0
      },
      {
        // named tags
        className: "type",
        begin: "!\\w+!" + i2
      },
      // https://yaml.org/spec/1.2/spec.html#id2784064
      {
        // verbatim tags
        className: "type",
        begin: "!<" + i2 + ">"
      },
      {
        // primary tags
        className: "type",
        begin: "!" + i2
      },
      {
        // secondary tags
        className: "type",
        begin: "!!" + i2
      },
      {
        // fragment id &ref
        className: "meta",
        begin: "&" + e2.UNDERSCORE_IDENT_RE + "$"
      },
      {
        // fragment reference *ref
        className: "meta",
        begin: "\\*" + e2.UNDERSCORE_IDENT_RE + "$"
      },
      {
        // array listing
        className: "bullet",
        // TODO: remove |$ hack when we have proper look-ahead support
        begin: "-(?=[ ]|$)",
        relevance: 0
      },
      e2.HASH_COMMENT_MODE,
      {
        beginKeywords: n,
        keywords: { literal: n }
      },
      b,
      // numbers are any valid C-style number that
      // sit isolated from other words
      {
        className: "number",
        begin: e2.C_NUMBER_RE + "\\b",
        relevance: 0
      },
      E2,
      g2,
      s2,
      o2
    ], p2 = [...S];
    return p2.pop(), p2.push(l2), c2.contains = p2, {
      name: "YAML",
      case_insensitive: true,
      aliases: ["yml"],
      contains: S
    };
  }
  return Ls = t2, Ls;
}
var Ms, Bp;
function IN() {
  if (Bp)
    return Ms;
  Bp = 1;
  function t2(e2) {
    return {
      name: "Test Anything Protocol",
      case_insensitive: true,
      contains: [
        e2.HASH_COMMENT_MODE,
        // version of format and total amount of testcases
        {
          className: "meta",
          variants: [
            { begin: "^TAP version (\\d+)$" },
            { begin: "^1\\.\\.(\\d+)$" }
          ]
        },
        // YAML block
        {
          begin: /---$/,
          end: "\\.\\.\\.$",
          subLanguage: "yaml",
          relevance: 0
        },
        // testcase number
        {
          className: "number",
          begin: " (\\d+) "
        },
        // testcase status and description
        {
          className: "symbol",
          variants: [
            { begin: "^ok" },
            { begin: "^not ok" }
          ]
        }
      ]
    };
  }
  return Ms = t2, Ms;
}
var ws, Gp;
function DN() {
  if (Gp)
    return ws;
  Gp = 1;
  function t2(e2) {
    const n = e2.regex, i2 = /[a-zA-Z_][a-zA-Z0-9_]*/, r2 = {
      className: "number",
      variants: [
        e2.BINARY_NUMBER_MODE,
        e2.C_NUMBER_MODE
      ]
    };
    return {
      name: "Tcl",
      aliases: ["tk"],
      keywords: [
        "after",
        "append",
        "apply",
        "array",
        "auto_execok",
        "auto_import",
        "auto_load",
        "auto_mkindex",
        "auto_mkindex_old",
        "auto_qualify",
        "auto_reset",
        "bgerror",
        "binary",
        "break",
        "catch",
        "cd",
        "chan",
        "clock",
        "close",
        "concat",
        "continue",
        "dde",
        "dict",
        "encoding",
        "eof",
        "error",
        "eval",
        "exec",
        "exit",
        "expr",
        "fblocked",
        "fconfigure",
        "fcopy",
        "file",
        "fileevent",
        "filename",
        "flush",
        "for",
        "foreach",
        "format",
        "gets",
        "glob",
        "global",
        "history",
        "http",
        "if",
        "incr",
        "info",
        "interp",
        "join",
        "lappend|10",
        "lassign|10",
        "lindex|10",
        "linsert|10",
        "list",
        "llength|10",
        "load",
        "lrange|10",
        "lrepeat|10",
        "lreplace|10",
        "lreverse|10",
        "lsearch|10",
        "lset|10",
        "lsort|10",
        "mathfunc",
        "mathop",
        "memory",
        "msgcat",
        "namespace",
        "open",
        "package",
        "parray",
        "pid",
        "pkg::create",
        "pkg_mkIndex",
        "platform",
        "platform::shell",
        "proc",
        "puts",
        "pwd",
        "read",
        "refchan",
        "regexp",
        "registry",
        "regsub|10",
        "rename",
        "return",
        "safe",
        "scan",
        "seek",
        "set",
        "socket",
        "source",
        "split",
        "string",
        "subst",
        "switch",
        "tcl_endOfWord",
        "tcl_findLibrary",
        "tcl_startOfNextWord",
        "tcl_startOfPreviousWord",
        "tcl_wordBreakAfter",
        "tcl_wordBreakBefore",
        "tcltest",
        "tclvars",
        "tell",
        "time",
        "tm",
        "trace",
        "unknown",
        "unload",
        "unset",
        "update",
        "uplevel",
        "upvar",
        "variable",
        "vwait",
        "while"
      ],
      contains: [
        e2.COMMENT(";[ \\t]*#", "$"),
        e2.COMMENT("^[ \\t]*#", "$"),
        {
          beginKeywords: "proc",
          end: "[\\{]",
          excludeEnd: true,
          contains: [
            {
              className: "title",
              begin: "[ \\t\\n\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*",
              end: "[ \\t\\n\\r]",
              endsWithParent: true,
              excludeEnd: true
            }
          ]
        },
        {
          className: "variable",
          variants: [
            { begin: n.concat(
              /\$/,
              n.optional(/::/),
              i2,
              "(::",
              i2,
              ")*"
            ) },
            {
              begin: "\\$\\{(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*",
              end: "\\}",
              contains: [r2]
            }
          ]
        },
        {
          className: "string",
          contains: [e2.BACKSLASH_ESCAPE],
          variants: [e2.inherit(e2.QUOTE_STRING_MODE, { illegal: null })]
        },
        r2
      ]
    };
  }
  return ws = t2, ws;
}
var ks, Yp;
function xN() {
  if (Yp)
    return ks;
  Yp = 1;
  function t2(e2) {
    const n = [
      "bool",
      "byte",
      "i16",
      "i32",
      "i64",
      "double",
      "string",
      "binary"
    ];
    return {
      name: "Thrift",
      keywords: {
        keyword: [
          "namespace",
          "const",
          "typedef",
          "struct",
          "enum",
          "service",
          "exception",
          "void",
          "oneway",
          "set",
          "list",
          "map",
          "required",
          "optional"
        ],
        type: n,
        literal: "true false"
      },
      contains: [
        e2.QUOTE_STRING_MODE,
        e2.NUMBER_MODE,
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        {
          className: "class",
          beginKeywords: "struct enum service exception",
          end: /\{/,
          illegal: /\n/,
          contains: [
            e2.inherit(e2.TITLE_MODE, {
              // hack: eating everything after the first title
              starts: {
                endsWithParent: true,
                excludeEnd: true
              }
            })
          ]
        },
        {
          begin: "\\b(set|list|map)\\s*<",
          keywords: { type: [
            ...n,
            "set",
            "list",
            "map"
          ] },
          end: ">",
          contains: ["self"]
        }
      ]
    };
  }
  return ks = t2, ks;
}
var Ps, qp;
function LN() {
  if (qp)
    return Ps;
  qp = 1;
  function t2(e2) {
    const n = {
      className: "number",
      begin: "[1-9][0-9]*",
      /* no leading zeros */
      relevance: 0
    }, i2 = {
      className: "symbol",
      begin: ":[^\\]]+"
    }, r2 = {
      className: "built_in",
      begin: "(AR|P|PAYLOAD|PR|R|SR|RSR|LBL|VR|UALM|MESSAGE|UTOOL|UFRAME|TIMER|TIMER_OVERFLOW|JOINT_MAX_SPEED|RESUME_PROG|DIAG_REC)\\[",
      end: "\\]",
      contains: [
        "self",
        n,
        i2
      ]
    }, a2 = {
      className: "built_in",
      begin: "(AI|AO|DI|DO|F|RI|RO|UI|UO|GI|GO|SI|SO)\\[",
      end: "\\]",
      contains: [
        "self",
        n,
        e2.QUOTE_STRING_MODE,
        /* for pos section at bottom */
        i2
      ]
    };
    return {
      name: "TP",
      keywords: {
        keyword: [
          "ABORT",
          "ACC",
          "ADJUST",
          "AND",
          "AP_LD",
          "BREAK",
          "CALL",
          "CNT",
          "COL",
          "CONDITION",
          "CONFIG",
          "DA",
          "DB",
          "DIV",
          "DETECT",
          "ELSE",
          "END",
          "ENDFOR",
          "ERR_NUM",
          "ERROR_PROG",
          "FINE",
          "FOR",
          "GP",
          "GUARD",
          "INC",
          "IF",
          "JMP",
          "LINEAR_MAX_SPEED",
          "LOCK",
          "MOD",
          "MONITOR",
          "OFFSET",
          "Offset",
          "OR",
          "OVERRIDE",
          "PAUSE",
          "PREG",
          "PTH",
          "RT_LD",
          "RUN",
          "SELECT",
          "SKIP",
          "Skip",
          "TA",
          "TB",
          "TO",
          "TOOL_OFFSET",
          "Tool_Offset",
          "UF",
          "UT",
          "UFRAME_NUM",
          "UTOOL_NUM",
          "UNLOCK",
          "WAIT",
          "X",
          "Y",
          "Z",
          "W",
          "P",
          "R",
          "STRLEN",
          "SUBSTR",
          "FINDSTR",
          "VOFFSET",
          "PROG",
          "ATTR",
          "MN",
          "POS"
        ],
        literal: [
          "ON",
          "OFF",
          "max_speed",
          "LPOS",
          "JPOS",
          "ENABLE",
          "DISABLE",
          "START",
          "STOP",
          "RESET"
        ]
      },
      contains: [
        r2,
        a2,
        {
          className: "keyword",
          begin: "/(PROG|ATTR|MN|POS|END)\\b"
        },
        {
          /* this is for cases like ,CALL */
          className: "keyword",
          begin: "(CALL|RUN|POINT_LOGIC|LBL)\\b"
        },
        {
          /* this is for cases like CNT100 where the default lexemes do not
           * separate the keyword and the number */
          className: "keyword",
          begin: "\\b(ACC|CNT|Skip|Offset|PSPD|RT_LD|AP_LD|Tool_Offset)"
        },
        {
          /* to catch numbers that do not have a word boundary on the left */
          className: "number",
          begin: "\\d+(sec|msec|mm/sec|cm/min|inch/min|deg/sec|mm|in|cm)?\\b",
          relevance: 0
        },
        e2.COMMENT("//", "[;$]"),
        e2.COMMENT("!", "[;$]"),
        e2.COMMENT("--eg:", "$"),
        e2.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "'",
          end: "'"
        },
        e2.C_NUMBER_MODE,
        {
          className: "variable",
          begin: "\\$[A-Za-z0-9_]+"
        }
      ]
    };
  }
  return Ps = t2, Ps;
}
var Fs, Vp;
function MN() {
  if (Vp)
    return Fs;
  Vp = 1;
  function t2(e2) {
    const n = e2.regex, i2 = [
      "absolute_url",
      "asset|0",
      "asset_version",
      "attribute",
      "block",
      "constant",
      "controller|0",
      "country_timezones",
      "csrf_token",
      "cycle",
      "date",
      "dump",
      "expression",
      "form|0",
      "form_end",
      "form_errors",
      "form_help",
      "form_label",
      "form_rest",
      "form_row",
      "form_start",
      "form_widget",
      "html_classes",
      "include",
      "is_granted",
      "logout_path",
      "logout_url",
      "max",
      "min",
      "parent",
      "path|0",
      "random",
      "range",
      "relative_path",
      "render",
      "render_esi",
      "source",
      "template_from_string",
      "url|0"
    ], r2 = [
      "abs",
      "abbr_class",
      "abbr_method",
      "batch",
      "capitalize",
      "column",
      "convert_encoding",
      "country_name",
      "currency_name",
      "currency_symbol",
      "data_uri",
      "date",
      "date_modify",
      "default",
      "escape",
      "file_excerpt",
      "file_link",
      "file_relative",
      "filter",
      "first",
      "format",
      "format_args",
      "format_args_as_text",
      "format_currency",
      "format_date",
      "format_datetime",
      "format_file",
      "format_file_from_text",
      "format_number",
      "format_time",
      "html_to_markdown",
      "humanize",
      "inky_to_html",
      "inline_css",
      "join",
      "json_encode",
      "keys",
      "language_name",
      "last",
      "length",
      "locale_name",
      "lower",
      "map",
      "markdown",
      "markdown_to_html",
      "merge",
      "nl2br",
      "number_format",
      "raw",
      "reduce",
      "replace",
      "reverse",
      "round",
      "slice",
      "slug",
      "sort",
      "spaceless",
      "split",
      "striptags",
      "timezone_name",
      "title",
      "trans",
      "transchoice",
      "trim",
      "u|0",
      "upper",
      "url_encode",
      "yaml_dump",
      "yaml_encode"
    ];
    let a2 = [
      "apply",
      "autoescape",
      "block",
      "cache",
      "deprecated",
      "do",
      "embed",
      "extends",
      "filter",
      "flush",
      "for",
      "form_theme",
      "from",
      "if",
      "import",
      "include",
      "macro",
      "sandbox",
      "set",
      "stopwatch",
      "trans",
      "trans_default_domain",
      "transchoice",
      "use",
      "verbatim",
      "with"
    ];
    a2 = a2.concat(a2.map((E2) => `end${E2}`));
    const s2 = {
      scope: "string",
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        }
      ]
    }, o2 = {
      scope: "number",
      match: /\d+/
    }, l2 = {
      begin: /\(/,
      end: /\)/,
      excludeBegin: true,
      excludeEnd: true,
      contains: [
        s2,
        o2
      ]
    }, u2 = {
      beginKeywords: i2.join(" "),
      keywords: { name: i2 },
      relevance: 0,
      contains: [l2]
    }, _ = {
      match: /\|(?=[A-Za-z_]+:?)/,
      beginScope: "punctuation",
      relevance: 0,
      contains: [
        {
          match: /[A-Za-z_]+:?/,
          keywords: r2
        }
      ]
    }, d2 = (E2, { relevance: g2 }) => ({
      beginScope: {
        1: "template-tag",
        3: "name"
      },
      relevance: g2 || 2,
      endScope: "template-tag",
      begin: [
        /\{%/,
        /\s*/,
        n.either(...E2)
      ],
      end: /%\}/,
      keywords: "in",
      contains: [
        _,
        u2,
        s2,
        o2
      ]
    }), f2 = /[a-z_]+/, b = d2(a2, { relevance: 2 }), c2 = d2([f2], { relevance: 1 });
    return {
      name: "Twig",
      aliases: ["craftcms"],
      case_insensitive: true,
      subLanguage: "xml",
      contains: [
        e2.COMMENT(/\{#/, /#\}/),
        b,
        c2,
        {
          className: "template-variable",
          begin: /\{\{/,
          end: /\}\}/,
          contains: [
            "self",
            _,
            u2,
            s2,
            o2
          ]
        }
      ]
    };
  }
  return Fs = t2, Fs;
}
var Us, Hp;
function wN() {
  if (Hp)
    return Us;
  Hp = 1;
  const t2 = "[A-Za-z$_][0-9A-Za-z$_]*", e2 = [
    "as",
    // for exports
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    // JS handles these with a special rule
    // "get",
    // "set",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends",
    // It's reached stage 3, which is "recommended for implementation":
    "using"
  ], n = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
  ], i2 = [
    // Fundamental objects
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    // numbers and dates
    "Math",
    "Date",
    "Number",
    "BigInt",
    // text
    "String",
    "RegExp",
    // Indexed collections
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    // Keyed collections
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    // Structured data
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    // Control abstraction objects
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    // Reflection
    "Reflect",
    "Proxy",
    // Internationalization
    "Intl",
    // WebAssembly
    "WebAssembly"
  ], r2 = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
  ], a2 = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
  ], s2 = [
    "arguments",
    "this",
    "super",
    "console",
    "window",
    "document",
    "localStorage",
    "sessionStorage",
    "module",
    "global"
    // Node.js
  ], o2 = [].concat(
    a2,
    i2,
    r2
  );
  function l2(_) {
    const d2 = _.regex, f2 = (ae, { after: pe }) => {
      const fe2 = "</" + ae[0].slice(1);
      return ae.input.indexOf(fe2, pe) !== -1;
    }, b = t2, c2 = {
      begin: "<>",
      end: "</>"
    }, E2 = /<[A-Za-z0-9\\._:-]+\s*\/>/, g2 = {
      begin: /<[A-Za-z0-9\\._:-]+/,
      end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
      /**
       * @param {RegExpMatchArray} match
       * @param {CallbackResponse} response
       */
      isTrulyOpeningTag: (ae, pe) => {
        const fe2 = ae[0].length + ae.index, Ne = ae.input[fe2];
        if (
          // HTML should not include another raw `<` inside a tag
          // nested type?
          // `<Array<Array<number>>`, etc.
          Ne === "<" || // the , gives away that this is not HTML
          // `<T, A extends keyof T, V>`
          Ne === ","
        ) {
          pe.ignoreMatch();
          return;
        }
        Ne === ">" && (f2(ae, { after: fe2 }) || pe.ignoreMatch());
        let ve2;
        const Ie = ae.input.substring(fe2);
        if (ve2 = Ie.match(/^\s*=/)) {
          pe.ignoreMatch();
          return;
        }
        if ((ve2 = Ie.match(/^\s+extends\s+/)) && ve2.index === 0) {
          pe.ignoreMatch();
          return;
        }
      }
    }, S = {
      $pattern: t2,
      keyword: e2,
      literal: n,
      built_in: o2,
      "variable.language": s2
    }, p2 = "[0-9](_?[0-9])*", m2 = `\\.(${p2})`, R2 = "0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*", T = {
      className: "number",
      variants: [
        // DecimalLiteral
        { begin: `(\\b(${R2})((${m2})|\\.)?|(${m2}))[eE][+-]?(${p2})\\b` },
        { begin: `\\b(${R2})\\b((${m2})\\b|\\.)?|(${m2})\\b` },
        // DecimalBigIntegerLiteral
        { begin: "\\b(0|[1-9](_?[0-9])*)n\\b" },
        // NonDecimalIntegerLiteral
        { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
        { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
        { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
        // LegacyOctalIntegerLiteral (does not include underscore separators)
        // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
        { begin: "\\b0[0-7]+n?\\b" }
      ],
      relevance: 0
    }, h2 = {
      className: "subst",
      begin: "\\$\\{",
      end: "\\}",
      keywords: S,
      contains: []
      // defined later
    }, C2 = {
      begin: ".?html`",
      end: "",
      starts: {
        end: "`",
        returnEnd: false,
        contains: [
          _.BACKSLASH_ESCAPE,
          h2
        ],
        subLanguage: "xml"
      }
    }, A2 = {
      begin: ".?css`",
      end: "",
      starts: {
        end: "`",
        returnEnd: false,
        contains: [
          _.BACKSLASH_ESCAPE,
          h2
        ],
        subLanguage: "css"
      }
    }, I2 = {
      begin: ".?gql`",
      end: "",
      starts: {
        end: "`",
        returnEnd: false,
        contains: [
          _.BACKSLASH_ESCAPE,
          h2
        ],
        subLanguage: "graphql"
      }
    }, v2 = {
      className: "string",
      begin: "`",
      end: "`",
      contains: [
        _.BACKSLASH_ESCAPE,
        h2
      ]
    }, M = {
      className: "comment",
      variants: [
        _.COMMENT(
          /\/\*\*(?!\/)/,
          "\\*/",
          {
            relevance: 0,
            contains: [
              {
                begin: "(?=@[A-Za-z]+)",
                relevance: 0,
                contains: [
                  {
                    className: "doctag",
                    begin: "@[A-Za-z]+"
                  },
                  {
                    className: "type",
                    begin: "\\{",
                    end: "\\}",
                    excludeEnd: true,
                    excludeBegin: true,
                    relevance: 0
                  },
                  {
                    className: "variable",
                    begin: b + "(?=\\s*(-)|$)",
                    endsParent: true,
                    relevance: 0
                  },
                  // eat spaces (not newlines) so we can find
                  // types or variables
                  {
                    begin: /(?=[^\n])\s/,
                    relevance: 0
                  }
                ]
              }
            ]
          }
        ),
        _.C_BLOCK_COMMENT_MODE,
        _.C_LINE_COMMENT_MODE
      ]
    }, B2 = [
      _.APOS_STRING_MODE,
      _.QUOTE_STRING_MODE,
      C2,
      A2,
      I2,
      v2,
      // Skip numbers when they are part of a variable name
      { match: /\$\d+/ },
      T
      // This is intentional:
      // See https://github.com/highlightjs/highlight.js/issues/3288
      // hljs.REGEXP_MODE
    ];
    h2.contains = B2.concat({
      // we need to pair up {} inside our subst to prevent
      // it from ending too early by matching another }
      begin: /\{/,
      end: /\}/,
      keywords: S,
      contains: [
        "self"
      ].concat(B2)
    });
    const G2 = [].concat(M, h2.contains), D = G2.concat([
      // eat recursive parens in sub expressions
      {
        begin: /(\s*)\(/,
        end: /\)/,
        keywords: S,
        contains: ["self"].concat(G2)
      }
    ]), w = {
      className: "params",
      // convert this to negative lookbehind in v12
      begin: /(\s*)\(/,
      // to match the parms with
      end: /\)/,
      excludeBegin: true,
      excludeEnd: true,
      keywords: S,
      contains: D
    }, L = {
      variants: [
        // class Car extends vehicle
        {
          match: [
            /class/,
            /\s+/,
            b,
            /\s+/,
            /extends/,
            /\s+/,
            d2.concat(b, "(", d2.concat(/\./, b), ")*")
          ],
          scope: {
            1: "keyword",
            3: "title.class",
            5: "keyword",
            7: "title.class.inherited"
          }
        },
        // class Car
        {
          match: [
            /class/,
            /\s+/,
            b
          ],
          scope: {
            1: "keyword",
            3: "title.class"
          }
        }
      ]
    }, q2 = {
      relevance: 0,
      match: d2.either(
        // Hard coded exceptions
        /\bJSON/,
        // Float32Array, OutT
        /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
        // CSSFactory, CSSFactoryT
        /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
        // FPs, FPsT
        /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/
        // P
        // single letters are not highlighted
        // BLAH
        // this will be flagged as a UPPER_CASE_CONSTANT instead
      ),
      className: "title.class",
      keywords: {
        _: [
          // se we still get relevance credit for JS library classes
          ...i2,
          ...r2
        ]
      }
    }, z = {
      label: "use_strict",
      className: "meta",
      relevance: 10,
      begin: /^\s*['"]use (strict|asm)['"]/
    }, re = {
      variants: [
        {
          match: [
            /function/,
            /\s+/,
            b,
            /(?=\s*\()/
          ]
        },
        // anonymous function
        {
          match: [
            /function/,
            /\s*(?=\()/
          ]
        }
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      label: "func.def",
      contains: [w],
      illegal: /%/
    }, j = {
      relevance: 0,
      match: /\b[A-Z][A-Z_0-9]+\b/,
      className: "variable.constant"
    };
    function ue(ae) {
      return d2.concat("(?!", ae.join("|"), ")");
    }
    const se2 = {
      match: d2.concat(
        /\b/,
        ue([
          ...a2,
          "super",
          "import"
        ].map((ae) => `${ae}\\s*\\(`)),
        b,
        d2.lookahead(/\s*\(/)
      ),
      className: "title.function",
      relevance: 0
    }, Re2 = {
      begin: d2.concat(/\./, d2.lookahead(
        d2.concat(b, /(?![0-9A-Za-z$_(])/)
      )),
      end: b,
      excludeBegin: true,
      keywords: "prototype",
      className: "property",
      relevance: 0
    }, Ce = {
      match: [
        /get|set/,
        /\s+/,
        b,
        /(?=\()/
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        {
          // eat to avoid empty params
          begin: /\(\)/
        },
        w
      ]
    }, Te2 = "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" + _.UNDERSCORE_IDENT_RE + ")\\s*=>", ne2 = {
      match: [
        /const|var|let/,
        /\s+/,
        b,
        /\s*/,
        /=\s*/,
        /(async\s*)?/,
        // async is optional
        d2.lookahead(Te2)
      ],
      keywords: "async",
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        w
      ]
    };
    return {
      name: "JavaScript",
      aliases: ["js", "jsx", "mjs", "cjs"],
      keywords: S,
      // this will be extended by TypeScript
      exports: { PARAMS_CONTAINS: D, CLASS_REFERENCE: q2 },
      illegal: /#(?![$_A-z])/,
      contains: [
        _.SHEBANG({
          label: "shebang",
          binary: "node",
          relevance: 5
        }),
        z,
        _.APOS_STRING_MODE,
        _.QUOTE_STRING_MODE,
        C2,
        A2,
        I2,
        v2,
        M,
        // Skip numbers when they are part of a variable name
        { match: /\$\d+/ },
        T,
        q2,
        {
          scope: "attr",
          match: b + d2.lookahead(":"),
          relevance: 0
        },
        ne2,
        {
          // "value" container
          begin: "(" + _.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
          keywords: "return throw case",
          relevance: 0,
          contains: [
            M,
            _.REGEXP_MODE,
            {
              className: "function",
              // we have to count the parens to make sure we actually have the
              // correct bounding ( ) before the =>.  There could be any number of
              // sub-expressions inside also surrounded by parens.
              begin: Te2,
              returnBegin: true,
              end: "\\s*=>",
              contains: [
                {
                  className: "params",
                  variants: [
                    {
                      begin: _.UNDERSCORE_IDENT_RE,
                      relevance: 0
                    },
                    {
                      className: null,
                      begin: /\(\s*\)/,
                      skip: true
                    },
                    {
                      begin: /(\s*)\(/,
                      end: /\)/,
                      excludeBegin: true,
                      excludeEnd: true,
                      keywords: S,
                      contains: D
                    }
                  ]
                }
              ]
            },
            {
              // could be a comma delimited list of params to a function call
              begin: /,/,
              relevance: 0
            },
            {
              match: /\s+/,
              relevance: 0
            },
            {
              // JSX
              variants: [
                { begin: c2.begin, end: c2.end },
                { match: E2 },
                {
                  begin: g2.begin,
                  // we carefully check the opening tag to see if it truly
                  // is a tag and not a false positive
                  "on:begin": g2.isTrulyOpeningTag,
                  end: g2.end
                }
              ],
              subLanguage: "xml",
              contains: [
                {
                  begin: g2.begin,
                  end: g2.end,
                  skip: true,
                  contains: ["self"]
                }
              ]
            }
          ]
        },
        re,
        {
          // prevent this from getting swallowed up by function
          // since they appear "function like"
          beginKeywords: "while if switch catch for"
        },
        {
          // we have to count the parens to make sure we actually have the correct
          // bounding ( ).  There could be any number of sub-expressions inside
          // also surrounded by parens.
          begin: "\\b(?!function)" + _.UNDERSCORE_IDENT_RE + "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
          // end parens
          returnBegin: true,
          label: "func.def",
          contains: [
            w,
            _.inherit(_.TITLE_MODE, { begin: b, className: "title.function" })
          ]
        },
        // catch ... so it won't trigger the property rule below
        {
          match: /\.\.\./,
          relevance: 0
        },
        Re2,
        // hack: prevents detection of keywords in some circumstances
        // .keyword()
        // $keyword = x
        {
          match: "\\$" + b,
          relevance: 0
        },
        {
          match: [/\bconstructor(?=\s*\()/],
          className: { 1: "title.function" },
          contains: [w]
        },
        se2,
        j,
        L,
        Ce,
        {
          match: /\$[(.]/
          // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
        }
      ]
    };
  }
  function u2(_) {
    const d2 = _.regex, f2 = l2(_), b = t2, c2 = [
      "any",
      "void",
      "number",
      "boolean",
      "string",
      "object",
      "never",
      "symbol",
      "bigint",
      "unknown"
    ], E2 = {
      begin: [
        /namespace/,
        /\s+/,
        _.IDENT_RE
      ],
      beginScope: {
        1: "keyword",
        3: "title.class"
      }
    }, g2 = {
      beginKeywords: "interface",
      end: /\{/,
      excludeEnd: true,
      keywords: {
        keyword: "interface extends",
        built_in: c2
      },
      contains: [f2.exports.CLASS_REFERENCE]
    }, S = {
      className: "meta",
      relevance: 10,
      begin: /^\s*['"]use strict['"]/
    }, p2 = [
      "type",
      // "namespace",
      "interface",
      "public",
      "private",
      "protected",
      "implements",
      "declare",
      "abstract",
      "readonly",
      "enum",
      "override",
      "satisfies"
    ], m2 = {
      $pattern: t2,
      keyword: e2.concat(p2),
      literal: n,
      built_in: o2.concat(c2),
      "variable.language": s2
    }, R2 = {
      className: "meta",
      begin: "@" + b
    }, T = (I2, v2, x) => {
      const M = I2.contains.findIndex((B2) => B2.label === v2);
      if (M === -1)
        throw new Error("can not find mode to replace");
      I2.contains.splice(M, 1, x);
    };
    Object.assign(f2.keywords, m2), f2.exports.PARAMS_CONTAINS.push(R2);
    const h2 = f2.contains.find((I2) => I2.scope === "attr"), C2 = Object.assign(
      {},
      h2,
      { match: d2.concat(b, d2.lookahead(/\s*\?:/)) }
    );
    f2.exports.PARAMS_CONTAINS.push([
      f2.exports.CLASS_REFERENCE,
      // class reference for highlighting the params types
      h2,
      // highlight the params key
      C2
      // Added for optional property assignment highlighting
    ]), f2.contains = f2.contains.concat([
      R2,
      E2,
      g2,
      C2
      // Added for optional property assignment highlighting
    ]), T(f2, "shebang", _.SHEBANG()), T(f2, "use_strict", S);
    const A2 = f2.contains.find((I2) => I2.label === "func.def");
    return A2.relevance = 0, Object.assign(f2, {
      name: "TypeScript",
      aliases: [
        "ts",
        "tsx",
        "mts",
        "cts"
      ]
    }), f2;
  }
  return Us = u2, Us;
}
var Bs, zp;
function kN() {
  if (zp)
    return Bs;
  zp = 1;
  function t2(e2) {
    return {
      name: "Vala",
      keywords: {
        keyword: (
          // Value types
          "char uchar unichar int uint long ulong short ushort int8 int16 int32 int64 uint8 uint16 uint32 uint64 float double bool struct enum string void weak unowned owned async signal static abstract interface override virtual delegate if while do for foreach else switch case break default return try catch public private protected internal using new this get set const stdout stdin stderr var"
        ),
        built_in: "DBus GLib CCode Gee Object Gtk Posix",
        literal: "false true null"
      },
      contains: [
        {
          className: "class",
          beginKeywords: "class interface namespace",
          end: /\{/,
          excludeEnd: true,
          illegal: "[^,:\\n\\s\\.]",
          contains: [e2.UNDERSCORE_TITLE_MODE]
        },
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        {
          className: "string",
          begin: '"""',
          end: '"""',
          relevance: 5
        },
        e2.APOS_STRING_MODE,
        e2.QUOTE_STRING_MODE,
        e2.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "^#",
          end: "$"
        }
      ]
    };
  }
  return Bs = t2, Bs;
}
var Gs, $p;
function PN() {
  if ($p)
    return Gs;
  $p = 1;
  function t2(e2) {
    const n = e2.regex, i2 = {
      className: "string",
      begin: /"(""|[^/n])"C\b/
    }, r2 = {
      className: "string",
      begin: /"/,
      end: /"/,
      illegal: /\n/,
      contains: [
        {
          // double quote escape
          begin: /""/
        }
      ]
    }, a2 = /\d{1,2}\/\d{1,2}\/\d{4}/, s2 = /\d{4}-\d{1,2}-\d{1,2}/, o2 = /(\d|1[012])(:\d+){0,2} *(AM|PM)/, l2 = /\d{1,2}(:\d{1,2}){1,2}/, u2 = {
      className: "literal",
      variants: [
        {
          // #YYYY-MM-DD# (ISO-Date) or #M/D/YYYY# (US-Date)
          begin: n.concat(/# */, n.either(s2, a2), / *#/)
        },
        {
          // #H:mm[:ss]# (24h Time)
          begin: n.concat(/# */, l2, / *#/)
        },
        {
          // #h[:mm[:ss]] A# (12h Time)
          begin: n.concat(/# */, o2, / *#/)
        },
        {
          // date plus time
          begin: n.concat(
            /# */,
            n.either(s2, a2),
            / +/,
            n.either(o2, l2),
            / *#/
          )
        }
      ]
    }, _ = {
      className: "number",
      relevance: 0,
      variants: [
        {
          // Float
          begin: /\b\d[\d_]*((\.[\d_]+(E[+-]?[\d_]+)?)|(E[+-]?[\d_]+))[RFD@!#]?/
        },
        {
          // Integer (base 10)
          begin: /\b\d[\d_]*((U?[SIL])|[%&])?/
        },
        {
          // Integer (base 16)
          begin: /&H[\dA-F_]+((U?[SIL])|[%&])?/
        },
        {
          // Integer (base 8)
          begin: /&O[0-7_]+((U?[SIL])|[%&])?/
        },
        {
          // Integer (base 2)
          begin: /&B[01_]+((U?[SIL])|[%&])?/
        }
      ]
    }, d2 = {
      className: "label",
      begin: /^\w+:/
    }, f2 = e2.COMMENT(/'''/, /$/, { contains: [
      {
        className: "doctag",
        begin: /<\/?/,
        end: />/
      }
    ] }), b = e2.COMMENT(null, /$/, { variants: [
      { begin: /'/ },
      {
        // TODO: Use multi-class for leading spaces
        begin: /([\t ]|^)REM(?=\s)/
      }
    ] });
    return {
      name: "Visual Basic .NET",
      aliases: ["vb"],
      case_insensitive: true,
      classNameAliases: { label: "symbol" },
      keywords: {
        keyword: "addhandler alias aggregate ansi as async assembly auto binary by byref byval call case catch class compare const continue custom declare default delegate dim distinct do each equals else elseif end enum erase error event exit explicit finally for friend from function get global goto group handles if implements imports in inherits interface into iterator join key let lib loop me mid module mustinherit mustoverride mybase myclass namespace narrowing new next notinheritable notoverridable of off on operator option optional order overloads overridable overrides paramarray partial preserve private property protected public raiseevent readonly redim removehandler resume return select set shadows shared skip static step stop structure strict sub synclock take text then throw to try unicode until using when where while widening with withevents writeonly yield",
        built_in: (
          // Operators https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators
          "addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort"
        ),
        type: (
          // Data types https://docs.microsoft.com/dotnet/visual-basic/language-reference/data-types
          "boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort"
        ),
        literal: "true false nothing"
      },
      illegal: "//|\\{|\\}|endif|gosub|variant|wend|^\\$ ",
      contains: [
        i2,
        r2,
        u2,
        _,
        d2,
        f2,
        b,
        {
          className: "meta",
          // TODO: Use multi-class for indentation once available
          begin: /[\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\b/,
          end: /$/,
          keywords: { keyword: "const disable else elseif enable end externalsource if region then" },
          contains: [b]
        }
      ]
    };
  }
  return Gs = t2, Gs;
}
var Ys, Wp;
function FN() {
  if (Wp)
    return Ys;
  Wp = 1;
  function t2(e2) {
    const n = e2.regex, i2 = [
      "lcase",
      "month",
      "vartype",
      "instrrev",
      "ubound",
      "setlocale",
      "getobject",
      "rgb",
      "getref",
      "string",
      "weekdayname",
      "rnd",
      "dateadd",
      "monthname",
      "now",
      "day",
      "minute",
      "isarray",
      "cbool",
      "round",
      "formatcurrency",
      "conversions",
      "csng",
      "timevalue",
      "second",
      "year",
      "space",
      "abs",
      "clng",
      "timeserial",
      "fixs",
      "len",
      "asc",
      "isempty",
      "maths",
      "dateserial",
      "atn",
      "timer",
      "isobject",
      "filter",
      "weekday",
      "datevalue",
      "ccur",
      "isdate",
      "instr",
      "datediff",
      "formatdatetime",
      "replace",
      "isnull",
      "right",
      "sgn",
      "array",
      "snumeric",
      "log",
      "cdbl",
      "hex",
      "chr",
      "lbound",
      "msgbox",
      "ucase",
      "getlocale",
      "cos",
      "cdate",
      "cbyte",
      "rtrim",
      "join",
      "hour",
      "oct",
      "typename",
      "trim",
      "strcomp",
      "int",
      "createobject",
      "loadpicture",
      "tan",
      "formatnumber",
      "mid",
      "split",
      "cint",
      "sin",
      "datepart",
      "ltrim",
      "sqr",
      "time",
      "derived",
      "eval",
      "date",
      "formatpercent",
      "exp",
      "inputbox",
      "left",
      "ascw",
      "chrw",
      "regexp",
      "cstr",
      "err"
    ], r2 = [
      "server",
      "response",
      "request",
      // take no arguments so can be called without ()
      "scriptengine",
      "scriptenginebuildversion",
      "scriptengineminorversion",
      "scriptenginemajorversion"
    ], a2 = {
      begin: n.concat(n.either(...i2), "\\s*\\("),
      // relevance 0 because this is acting as a beginKeywords really
      relevance: 0,
      keywords: { built_in: i2 }
    };
    return {
      name: "VBScript",
      aliases: ["vbs"],
      case_insensitive: true,
      keywords: {
        keyword: [
          "call",
          "class",
          "const",
          "dim",
          "do",
          "loop",
          "erase",
          "execute",
          "executeglobal",
          "exit",
          "for",
          "each",
          "next",
          "function",
          "if",
          "then",
          "else",
          "on",
          "error",
          "option",
          "explicit",
          "new",
          "private",
          "property",
          "let",
          "get",
          "public",
          "randomize",
          "redim",
          "rem",
          "select",
          "case",
          "set",
          "stop",
          "sub",
          "while",
          "wend",
          "with",
          "end",
          "to",
          "elseif",
          "is",
          "or",
          "xor",
          "and",
          "not",
          "class_initialize",
          "class_terminate",
          "default",
          "preserve",
          "in",
          "me",
          "byval",
          "byref",
          "step",
          "resume",
          "goto"
        ],
        built_in: r2,
        literal: [
          "true",
          "false",
          "null",
          "nothing",
          "empty"
        ]
      },
      illegal: "//",
      contains: [
        a2,
        e2.inherit(e2.QUOTE_STRING_MODE, { contains: [{ begin: '""' }] }),
        e2.COMMENT(
          /'/,
          /$/,
          { relevance: 0 }
        ),
        e2.C_NUMBER_MODE
      ]
    };
  }
  return Ys = t2, Ys;
}
var qs, Kp;
function UN() {
  if (Kp)
    return qs;
  Kp = 1;
  function t2(e2) {
    return {
      name: "VBScript in HTML",
      subLanguage: "xml",
      contains: [
        {
          begin: "<%",
          end: "%>",
          subLanguage: "vbscript"
        }
      ]
    };
  }
  return qs = t2, qs;
}
var Vs, Qp;
function BN() {
  if (Qp)
    return Vs;
  Qp = 1;
  function t2(e2) {
    const n = e2.regex, i2 = {
      $pattern: /\$?[\w]+(\$[\w]+)*/,
      keyword: [
        "accept_on",
        "alias",
        "always",
        "always_comb",
        "always_ff",
        "always_latch",
        "and",
        "assert",
        "assign",
        "assume",
        "automatic",
        "before",
        "begin",
        "bind",
        "bins",
        "binsof",
        "bit",
        "break",
        "buf|0",
        "bufif0",
        "bufif1",
        "byte",
        "case",
        "casex",
        "casez",
        "cell",
        "chandle",
        "checker",
        "class",
        "clocking",
        "cmos",
        "config",
        "const",
        "constraint",
        "context",
        "continue",
        "cover",
        "covergroup",
        "coverpoint",
        "cross",
        "deassign",
        "default",
        "defparam",
        "design",
        "disable",
        "dist",
        "do",
        "edge",
        "else",
        "end",
        "endcase",
        "endchecker",
        "endclass",
        "endclocking",
        "endconfig",
        "endfunction",
        "endgenerate",
        "endgroup",
        "endinterface",
        "endmodule",
        "endpackage",
        "endprimitive",
        "endprogram",
        "endproperty",
        "endspecify",
        "endsequence",
        "endtable",
        "endtask",
        "enum",
        "event",
        "eventually",
        "expect",
        "export",
        "extends",
        "extern",
        "final",
        "first_match",
        "for",
        "force",
        "foreach",
        "forever",
        "fork",
        "forkjoin",
        "function",
        "generate|5",
        "genvar",
        "global",
        "highz0",
        "highz1",
        "if",
        "iff",
        "ifnone",
        "ignore_bins",
        "illegal_bins",
        "implements",
        "implies",
        "import",
        "incdir",
        "include",
        "initial",
        "inout",
        "input",
        "inside",
        "instance",
        "int",
        "integer",
        "interconnect",
        "interface",
        "intersect",
        "join",
        "join_any",
        "join_none",
        "large",
        "let",
        "liblist",
        "library",
        "local",
        "localparam",
        "logic",
        "longint",
        "macromodule",
        "matches",
        "medium",
        "modport",
        "module",
        "nand",
        "negedge",
        "nettype",
        "new",
        "nexttime",
        "nmos",
        "nor",
        "noshowcancelled",
        "not",
        "notif0",
        "notif1",
        "or",
        "output",
        "package",
        "packed",
        "parameter",
        "pmos",
        "posedge",
        "primitive",
        "priority",
        "program",
        "property",
        "protected",
        "pull0",
        "pull1",
        "pulldown",
        "pullup",
        "pulsestyle_ondetect",
        "pulsestyle_onevent",
        "pure",
        "rand",
        "randc",
        "randcase",
        "randsequence",
        "rcmos",
        "real",
        "realtime",
        "ref",
        "reg",
        "reject_on",
        "release",
        "repeat",
        "restrict",
        "return",
        "rnmos",
        "rpmos",
        "rtran",
        "rtranif0",
        "rtranif1",
        "s_always",
        "s_eventually",
        "s_nexttime",
        "s_until",
        "s_until_with",
        "scalared",
        "sequence",
        "shortint",
        "shortreal",
        "showcancelled",
        "signed",
        "small",
        "soft",
        "solve",
        "specify",
        "specparam",
        "static",
        "string",
        "strong",
        "strong0",
        "strong1",
        "struct",
        "super",
        "supply0",
        "supply1",
        "sync_accept_on",
        "sync_reject_on",
        "table",
        "tagged",
        "task",
        "this",
        "throughout",
        "time",
        "timeprecision",
        "timeunit",
        "tran",
        "tranif0",
        "tranif1",
        "tri",
        "tri0",
        "tri1",
        "triand",
        "trior",
        "trireg",
        "type",
        "typedef",
        "union",
        "unique",
        "unique0",
        "unsigned",
        "until",
        "until_with",
        "untyped",
        "use",
        "uwire",
        "var",
        "vectored",
        "virtual",
        "void",
        "wait",
        "wait_order",
        "wand",
        "weak",
        "weak0",
        "weak1",
        "while",
        "wildcard",
        "wire",
        "with",
        "within",
        "wor",
        "xnor",
        "xor"
      ],
      literal: ["null"],
      built_in: [
        "$finish",
        "$stop",
        "$exit",
        "$fatal",
        "$error",
        "$warning",
        "$info",
        "$realtime",
        "$time",
        "$printtimescale",
        "$bitstoreal",
        "$bitstoshortreal",
        "$itor",
        "$signed",
        "$cast",
        "$bits",
        "$stime",
        "$timeformat",
        "$realtobits",
        "$shortrealtobits",
        "$rtoi",
        "$unsigned",
        "$asserton",
        "$assertkill",
        "$assertpasson",
        "$assertfailon",
        "$assertnonvacuouson",
        "$assertoff",
        "$assertcontrol",
        "$assertpassoff",
        "$assertfailoff",
        "$assertvacuousoff",
        "$isunbounded",
        "$sampled",
        "$fell",
        "$changed",
        "$past_gclk",
        "$fell_gclk",
        "$changed_gclk",
        "$rising_gclk",
        "$steady_gclk",
        "$coverage_control",
        "$coverage_get",
        "$coverage_save",
        "$set_coverage_db_name",
        "$rose",
        "$stable",
        "$past",
        "$rose_gclk",
        "$stable_gclk",
        "$future_gclk",
        "$falling_gclk",
        "$changing_gclk",
        "$display",
        "$coverage_get_max",
        "$coverage_merge",
        "$get_coverage",
        "$load_coverage_db",
        "$typename",
        "$unpacked_dimensions",
        "$left",
        "$low",
        "$increment",
        "$clog2",
        "$ln",
        "$log10",
        "$exp",
        "$sqrt",
        "$pow",
        "$floor",
        "$ceil",
        "$sin",
        "$cos",
        "$tan",
        "$countbits",
        "$onehot",
        "$isunknown",
        "$fatal",
        "$warning",
        "$dimensions",
        "$right",
        "$high",
        "$size",
        "$asin",
        "$acos",
        "$atan",
        "$atan2",
        "$hypot",
        "$sinh",
        "$cosh",
        "$tanh",
        "$asinh",
        "$acosh",
        "$atanh",
        "$countones",
        "$onehot0",
        "$error",
        "$info",
        "$random",
        "$dist_chi_square",
        "$dist_erlang",
        "$dist_exponential",
        "$dist_normal",
        "$dist_poisson",
        "$dist_t",
        "$dist_uniform",
        "$q_initialize",
        "$q_remove",
        "$q_exam",
        "$async$and$array",
        "$async$nand$array",
        "$async$or$array",
        "$async$nor$array",
        "$sync$and$array",
        "$sync$nand$array",
        "$sync$or$array",
        "$sync$nor$array",
        "$q_add",
        "$q_full",
        "$psprintf",
        "$async$and$plane",
        "$async$nand$plane",
        "$async$or$plane",
        "$async$nor$plane",
        "$sync$and$plane",
        "$sync$nand$plane",
        "$sync$or$plane",
        "$sync$nor$plane",
        "$system",
        "$display",
        "$displayb",
        "$displayh",
        "$displayo",
        "$strobe",
        "$strobeb",
        "$strobeh",
        "$strobeo",
        "$write",
        "$readmemb",
        "$readmemh",
        "$writememh",
        "$value$plusargs",
        "$dumpvars",
        "$dumpon",
        "$dumplimit",
        "$dumpports",
        "$dumpportson",
        "$dumpportslimit",
        "$writeb",
        "$writeh",
        "$writeo",
        "$monitor",
        "$monitorb",
        "$monitorh",
        "$monitoro",
        "$writememb",
        "$dumpfile",
        "$dumpoff",
        "$dumpall",
        "$dumpflush",
        "$dumpportsoff",
        "$dumpportsall",
        "$dumpportsflush",
        "$fclose",
        "$fdisplay",
        "$fdisplayb",
        "$fdisplayh",
        "$fdisplayo",
        "$fstrobe",
        "$fstrobeb",
        "$fstrobeh",
        "$fstrobeo",
        "$swrite",
        "$swriteb",
        "$swriteh",
        "$swriteo",
        "$fscanf",
        "$fread",
        "$fseek",
        "$fflush",
        "$feof",
        "$fopen",
        "$fwrite",
        "$fwriteb",
        "$fwriteh",
        "$fwriteo",
        "$fmonitor",
        "$fmonitorb",
        "$fmonitorh",
        "$fmonitoro",
        "$sformat",
        "$sformatf",
        "$fgetc",
        "$ungetc",
        "$fgets",
        "$sscanf",
        "$rewind",
        "$ftell",
        "$ferror"
      ]
    }, r2 = [
      "__FILE__",
      "__LINE__"
    ], a2 = [
      "begin_keywords",
      "celldefine",
      "default_nettype",
      "default_decay_time",
      "default_trireg_strength",
      "define",
      "delay_mode_distributed",
      "delay_mode_path",
      "delay_mode_unit",
      "delay_mode_zero",
      "else",
      "elsif",
      "end_keywords",
      "endcelldefine",
      "endif",
      "ifdef",
      "ifndef",
      "include",
      "line",
      "nounconnected_drive",
      "pragma",
      "resetall",
      "timescale",
      "unconnected_drive",
      "undef",
      "undefineall"
    ];
    return {
      name: "Verilog",
      aliases: [
        "v",
        "sv",
        "svh"
      ],
      case_insensitive: false,
      keywords: i2,
      contains: [
        e2.C_BLOCK_COMMENT_MODE,
        e2.C_LINE_COMMENT_MODE,
        e2.QUOTE_STRING_MODE,
        {
          scope: "number",
          contains: [e2.BACKSLASH_ESCAPE],
          variants: [
            { begin: /\b((\d+'([bhodBHOD]))[0-9xzXZa-fA-F_]+)/ },
            { begin: /\B(('([bhodBHOD]))[0-9xzXZa-fA-F_]+)/ },
            {
              // decimal
              begin: /\b[0-9][0-9_]*/,
              relevance: 0
            }
          ]
        },
        /* parameters to instances */
        {
          scope: "variable",
          variants: [
            { begin: "#\\((?!parameter).+\\)" },
            {
              begin: "\\.\\w+",
              relevance: 0
            }
          ]
        },
        {
          scope: "variable.constant",
          match: n.concat(/`/, n.either(...r2))
        },
        {
          scope: "meta",
          begin: n.concat(/`/, n.either(...a2)),
          end: /$|\/\/|\/\*/,
          returnEnd: true,
          keywords: a2
        }
      ]
    };
  }
  return Vs = t2, Vs;
}
var Hs, Xp;
function GN() {
  if (Xp)
    return Hs;
  Xp = 1;
  function t2(e2) {
    const n = "\\d(_|\\d)*", i2 = "[eE][-+]?" + n, r2 = n + "(\\." + n + ")?(" + i2 + ")?", a2 = "\\w+", o2 = "\\b(" + (n + "#" + a2 + "(\\." + a2 + ")?#(" + i2 + ")?") + "|" + r2 + ")";
    return {
      name: "VHDL",
      case_insensitive: true,
      keywords: {
        keyword: [
          "abs",
          "access",
          "after",
          "alias",
          "all",
          "and",
          "architecture",
          "array",
          "assert",
          "assume",
          "assume_guarantee",
          "attribute",
          "begin",
          "block",
          "body",
          "buffer",
          "bus",
          "case",
          "component",
          "configuration",
          "constant",
          "context",
          "cover",
          "disconnect",
          "downto",
          "default",
          "else",
          "elsif",
          "end",
          "entity",
          "exit",
          "fairness",
          "file",
          "for",
          "force",
          "function",
          "generate",
          "generic",
          "group",
          "guarded",
          "if",
          "impure",
          "in",
          "inertial",
          "inout",
          "is",
          "label",
          "library",
          "linkage",
          "literal",
          "loop",
          "map",
          "mod",
          "nand",
          "new",
          "next",
          "nor",
          "not",
          "null",
          "of",
          "on",
          "open",
          "or",
          "others",
          "out",
          "package",
          "parameter",
          "port",
          "postponed",
          "procedure",
          "process",
          "property",
          "protected",
          "pure",
          "range",
          "record",
          "register",
          "reject",
          "release",
          "rem",
          "report",
          "restrict",
          "restrict_guarantee",
          "return",
          "rol",
          "ror",
          "select",
          "sequence",
          "severity",
          "shared",
          "signal",
          "sla",
          "sll",
          "sra",
          "srl",
          "strong",
          "subtype",
          "then",
          "to",
          "transport",
          "type",
          "unaffected",
          "units",
          "until",
          "use",
          "variable",
          "view",
          "vmode",
          "vprop",
          "vunit",
          "wait",
          "when",
          "while",
          "with",
          "xnor",
          "xor"
        ],
        built_in: [
          "boolean",
          "bit",
          "character",
          "integer",
          "time",
          "delay_length",
          "natural",
          "positive",
          "string",
          "bit_vector",
          "file_open_kind",
          "file_open_status",
          "std_logic",
          "std_logic_vector",
          "unsigned",
          "signed",
          "boolean_vector",
          "integer_vector",
          "std_ulogic",
          "std_ulogic_vector",
          "unresolved_unsigned",
          "u_unsigned",
          "unresolved_signed",
          "u_signed",
          "real_vector",
          "time_vector"
        ],
        literal: [
          // severity_level
          "false",
          "true",
          "note",
          "warning",
          "error",
          "failure",
          // textio
          "line",
          "text",
          "side",
          "width"
        ]
      },
      illegal: /\{/,
      contains: [
        e2.C_BLOCK_COMMENT_MODE,
        // VHDL-2008 block commenting.
        e2.COMMENT("--", "$"),
        e2.QUOTE_STRING_MODE,
        {
          className: "number",
          begin: o2,
          relevance: 0
        },
        {
          className: "string",
          begin: "'(U|X|0|1|Z|W|L|H|-)'",
          contains: [e2.BACKSLASH_ESCAPE]
        },
        {
          className: "symbol",
          begin: "'[A-Za-z](_?[A-Za-z0-9])*",
          contains: [e2.BACKSLASH_ESCAPE]
        }
      ]
    };
  }
  return Hs = t2, Hs;
}
var zs, Zp;
function YN() {
  if (Zp)
    return zs;
  Zp = 1;
  function t2(e2) {
    return {
      name: "Vim Script",
      keywords: {
        $pattern: /[!#@\w]+/,
        keyword: (
          // express version except: ! & * < = > !! # @ @@
          "N|0 P|0 X|0 a|0 ab abc abo al am an|0 ar arga argd arge argdo argg argl argu as au aug aun b|0 bN ba bad bd be bel bf bl bm bn bo bp br brea breaka breakd breakl bro bufdo buffers bun bw c|0 cN cNf ca cabc caddb cad caddf cal cat cb cc ccl cd ce cex cf cfir cgetb cgete cg changes chd che checkt cl cla clo cm cmapc cme cn cnew cnf cno cnorea cnoreme co col colo com comc comp con conf cope cp cpf cq cr cs cst cu cuna cunme cw delm deb debugg delc delf dif diffg diffo diffp diffpu diffs diffthis dig di dl dell dj dli do doautoa dp dr ds dsp e|0 ea ec echoe echoh echom echon el elsei em en endfo endf endt endw ene ex exe exi exu f|0 files filet fin fina fini fir fix fo foldc foldd folddoc foldo for fu go gr grepa gu gv ha helpf helpg helpt hi hid his ia iabc if ij il im imapc ime ino inorea inoreme int is isp iu iuna iunme j|0 ju k|0 keepa kee keepj lN lNf l|0 lad laddb laddf la lan lat lb lc lch lcl lcs le lefta let lex lf lfir lgetb lgete lg lgr lgrepa lh ll lla lli lmak lm lmapc lne lnew lnf ln loadk lo loc lockv lol lope lp lpf lr ls lt lu lua luad luaf lv lvimgrepa lw m|0 ma mak map mapc marks mat me menut mes mk mks mksp mkv mkvie mod mz mzf nbc nb nbs new nm nmapc nme nn nnoreme noa no noh norea noreme norm nu nun nunme ol o|0 om omapc ome on ono onoreme opt ou ounme ow p|0 profd prof pro promptr pc ped pe perld po popu pp pre prev ps pt ptN ptf ptj ptl ptn ptp ptr pts pu pw py3 python3 py3d py3f py pyd pyf quita qa rec red redi redr redraws reg res ret retu rew ri rightb rub rubyd rubyf rund ru rv sN san sa sal sav sb sbN sba sbf sbl sbm sbn sbp sbr scrip scripte scs se setf setg setl sf sfir sh sim sig sil sl sla sm smap smapc sme sn sni sno snor snoreme sor so spelld spe spelli spellr spellu spellw sp spr sre st sta startg startr star stopi stj sts sun sunm sunme sus sv sw sy synti sync tN tabN tabc tabdo tabe tabf tabfir tabl tabm tabnew tabn tabo tabp tabr tabs tab ta tags tc tcld tclf te tf th tj tl tm tn to tp tr try ts tu u|0 undoj undol una unh unl unlo unm unme uns up ve verb vert vim vimgrepa vi viu vie vm vmapc vme vne vn vnoreme vs vu vunme windo w|0 wN wa wh wi winc winp wn wp wq wqa ws wu wv x|0 xa xmapc xm xme xn xnoreme xu xunme y|0 z|0 ~ Next Print append abbreviate abclear aboveleft all amenu anoremenu args argadd argdelete argedit argglobal arglocal argument ascii autocmd augroup aunmenu buffer bNext ball badd bdelete behave belowright bfirst blast bmodified bnext botright bprevious brewind break breakadd breakdel breaklist browse bunload bwipeout change cNext cNfile cabbrev cabclear caddbuffer caddexpr caddfile call catch cbuffer cclose center cexpr cfile cfirst cgetbuffer cgetexpr cgetfile chdir checkpath checktime clist clast close cmap cmapclear cmenu cnext cnewer cnfile cnoremap cnoreabbrev cnoremenu copy colder colorscheme command comclear compiler continue confirm copen cprevious cpfile cquit crewind cscope cstag cunmap cunabbrev cunmenu cwindow delete delmarks debug debuggreedy delcommand delfunction diffupdate diffget diffoff diffpatch diffput diffsplit digraphs display deletel djump dlist doautocmd doautoall deletep drop dsearch dsplit edit earlier echo echoerr echohl echomsg else elseif emenu endif endfor endfunction endtry endwhile enew execute exit exusage file filetype find finally finish first fixdel fold foldclose folddoopen folddoclosed foldopen function global goto grep grepadd gui gvim hardcopy help helpfind helpgrep helptags highlight hide history insert iabbrev iabclear ijump ilist imap imapclear imenu inoremap inoreabbrev inoremenu intro isearch isplit iunmap iunabbrev iunmenu join jumps keepalt keepmarks keepjumps lNext lNfile list laddexpr laddbuffer laddfile last language later lbuffer lcd lchdir lclose lcscope left leftabove lexpr lfile lfirst lgetbuffer lgetexpr lgetfile lgrep lgrepadd lhelpgrep llast llist lmake lmap lmapclear lnext lnewer lnfile lnoremap loadkeymap loadview lockmarks lockvar lolder lopen lprevious lpfile lrewind ltag lunmap luado luafile lvimgrep lvimgrepadd lwindow move mark make mapclear match menu menutranslate messages mkexrc mksession mkspell mkvimrc mkview mode mzscheme mzfile nbclose nbkey nbsart next nmap nmapclear nmenu nnoremap nnoremenu noautocmd noremap nohlsearch noreabbrev noremenu normal number nunmap nunmenu oldfiles open omap omapclear omenu only onoremap onoremenu options ounmap ounmenu ownsyntax print profdel profile promptfind promptrepl pclose pedit perl perldo pop popup ppop preserve previous psearch ptag ptNext ptfirst ptjump ptlast ptnext ptprevious ptrewind ptselect put pwd py3do py3file python pydo pyfile quit quitall qall read recover redo redir redraw redrawstatus registers resize retab return rewind right rightbelow ruby rubydo rubyfile rundo runtime rviminfo substitute sNext sandbox sargument sall saveas sbuffer sbNext sball sbfirst sblast sbmodified sbnext sbprevious sbrewind scriptnames scriptencoding scscope set setfiletype setglobal setlocal sfind sfirst shell simalt sign silent sleep slast smagic smapclear smenu snext sniff snomagic snoremap snoremenu sort source spelldump spellgood spellinfo spellrepall spellundo spellwrong split sprevious srewind stop stag startgreplace startreplace startinsert stopinsert stjump stselect sunhide sunmap sunmenu suspend sview swapname syntax syntime syncbind tNext tabNext tabclose tabedit tabfind tabfirst tablast tabmove tabnext tabonly tabprevious tabrewind tag tcl tcldo tclfile tearoff tfirst throw tjump tlast tmenu tnext topleft tprevious trewind tselect tunmenu undo undojoin undolist unabbreviate unhide unlet unlockvar unmap unmenu unsilent update vglobal version verbose vertical vimgrep vimgrepadd visual viusage view vmap vmapclear vmenu vnew vnoremap vnoremenu vsplit vunmap vunmenu write wNext wall while winsize wincmd winpos wnext wprevious wqall wsverb wundo wviminfo xit xall xmapclear xmap xmenu xnoremap xnoremenu xunmap xunmenu yank"
        ),
        built_in: (
          // built in func
          "synIDtrans atan2 range matcharg did_filetype asin feedkeys xor argv complete_check add getwinposx getqflist getwinposy screencol clearmatches empty extend getcmdpos mzeval garbagecollect setreg ceil sqrt diff_hlID inputsecret get getfperm getpid filewritable shiftwidth max sinh isdirectory synID system inputrestore winline atan visualmode inputlist tabpagewinnr round getregtype mapcheck hasmapto histdel argidx findfile sha256 exists toupper getcmdline taglist string getmatches bufnr strftime winwidth bufexists strtrans tabpagebuflist setcmdpos remote_read printf setloclist getpos getline bufwinnr float2nr len getcmdtype diff_filler luaeval resolve libcallnr foldclosedend reverse filter has_key bufname str2float strlen setline getcharmod setbufvar index searchpos shellescape undofile foldclosed setqflist buflisted strchars str2nr virtcol floor remove undotree remote_expr winheight gettabwinvar reltime cursor tabpagenr finddir localtime acos getloclist search tanh matchend rename gettabvar strdisplaywidth type abs py3eval setwinvar tolower wildmenumode log10 spellsuggest bufloaded synconcealed nextnonblank server2client complete settabwinvar executable input wincol setmatches getftype hlID inputsave searchpair or screenrow line settabvar histadd deepcopy strpart remote_peek and eval getftime submatch screenchar winsaveview matchadd mkdir screenattr getfontname libcall reltimestr getfsize winnr invert pow getbufline byte2line soundfold repeat fnameescape tagfiles sin strwidth spellbadword trunc maparg log lispindent hostname setpos globpath remote_foreground getchar synIDattr fnamemodify cscope_connection stridx winbufnr indent min complete_add nr2char searchpairpos inputdialog values matchlist items hlexists strridx browsedir expand fmod pathshorten line2byte argc count getwinvar glob foldtextresult getreg foreground cosh matchdelete has char2nr simplify histget searchdecl iconv winrestcmd pumvisible writefile foldlevel haslocaldir keys cos matchstr foldtext histnr tan tempname getcwd byteidx getbufvar islocked escape eventhandler remote_send serverlist winrestview synstack pyeval prevnonblank readfile cindent filereadable changenr exp"
        )
      },
      illegal: /;/,
      contains: [
        e2.NUMBER_MODE,
        {
          className: "string",
          begin: "'",
          end: "'",
          illegal: "\\n"
        },
        /*
        	      A double quote can start either a string or a line comment. Strings are
        	      ended before the end of a line by another double quote and can contain
        	      escaped double-quotes and post-escaped line breaks.
        
        	      Also, any double quote at the beginning of a line is a comment but we
        	      don't handle that properly at the moment: any double quote inside will
        	      turn them into a string. Handling it properly will require a smarter
        	      parser.
        	      */
        {
          className: "string",
          begin: /"(\\"|\n\\|[^"\n])*"/
        },
        e2.COMMENT('"', "$"),
        {
          className: "variable",
          begin: /[bwtglsav]:[\w\d_]+/
        },
        {
          begin: [
            /\b(?:function|function!)/,
            /\s+/,
            e2.IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "title"
          },
          end: "$",
          relevance: 0,
          contains: [
            {
              className: "params",
              begin: "\\(",
              end: "\\)"
            }
          ]
        },
        {
          className: "symbol",
          begin: /<[\w-]+>/
        }
      ]
    };
  }
  return zs = t2, zs;
}
var $s, Jp;
function qN() {
  if (Jp)
    return $s;
  Jp = 1;
  function t2(e2) {
    e2.regex;
    const n = e2.COMMENT(/\(;/, /;\)/);
    n.contains.push("self");
    const i2 = e2.COMMENT(/;;/, /$/), r2 = [
      "anyfunc",
      "block",
      "br",
      "br_if",
      "br_table",
      "call",
      "call_indirect",
      "data",
      "drop",
      "elem",
      "else",
      "end",
      "export",
      "func",
      "global.get",
      "global.set",
      "local.get",
      "local.set",
      "local.tee",
      "get_global",
      "get_local",
      "global",
      "if",
      "import",
      "local",
      "loop",
      "memory",
      "memory.grow",
      "memory.size",
      "module",
      "mut",
      "nop",
      "offset",
      "param",
      "result",
      "return",
      "select",
      "set_global",
      "set_local",
      "start",
      "table",
      "tee_local",
      "then",
      "type",
      "unreachable"
    ], a2 = {
      begin: [
        /(?:func|call|call_indirect)/,
        /\s+/,
        /\$[^\s)]+/
      ],
      className: {
        1: "keyword",
        3: "title.function"
      }
    }, s2 = {
      className: "variable",
      begin: /\$[\w_]+/
    }, o2 = {
      match: /(\((?!;)|\))+/,
      className: "punctuation",
      relevance: 0
    }, l2 = {
      className: "number",
      relevance: 0,
      // borrowed from Prism, TODO: split out into variants
      match: /[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/
    }, u2 = {
      // look-ahead prevents us from gobbling up opcodes
      match: /(i32|i64|f32|f64)(?!\.)/,
      className: "type"
    }, _ = {
      className: "keyword",
      // borrowed from Prism, TODO: split out into variants
      match: /\b(f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))\b/
    };
    return {
      name: "WebAssembly",
      keywords: {
        $pattern: /[\w.]+/,
        keyword: r2
      },
      contains: [
        i2,
        n,
        {
          match: [
            /(?:offset|align)/,
            /\s*/,
            /=/
          ],
          className: {
            1: "keyword",
            3: "operator"
          }
        },
        s2,
        o2,
        a2,
        e2.QUOTE_STRING_MODE,
        u2,
        _,
        l2
      ]
    };
  }
  return $s = t2, $s;
}
var Ws, jp;
function VN() {
  if (jp)
    return Ws;
  jp = 1;
  function t2(e2) {
    const n = e2.regex, i2 = /[a-zA-Z]\w*/, r2 = [
      "as",
      "break",
      "class",
      "construct",
      "continue",
      "else",
      "for",
      "foreign",
      "if",
      "import",
      "in",
      "is",
      "return",
      "static",
      "var",
      "while"
    ], a2 = [
      "true",
      "false",
      "null"
    ], s2 = [
      "this",
      "super"
    ], o2 = [
      "Bool",
      "Class",
      "Fiber",
      "Fn",
      "List",
      "Map",
      "Null",
      "Num",
      "Object",
      "Range",
      "Sequence",
      "String",
      "System"
    ], l2 = [
      "-",
      "~",
      /\*/,
      "%",
      /\.\.\./,
      /\.\./,
      /\+/,
      "<<",
      ">>",
      ">=",
      "<=",
      "<",
      ">",
      /\^/,
      /!=/,
      /!/,
      /\bis\b/,
      "==",
      "&&",
      "&",
      /\|\|/,
      /\|/,
      /\?:/,
      "="
    ], u2 = {
      relevance: 0,
      match: n.concat(/\b(?!(if|while|for|else|super)\b)/, i2, /(?=\s*[({])/),
      className: "title.function"
    }, _ = {
      match: n.concat(
        n.either(
          n.concat(/\b(?!(if|while|for|else|super)\b)/, i2),
          n.either(...l2)
        ),
        /(?=\s*\([^)]+\)\s*\{)/
      ),
      className: "title.function",
      starts: { contains: [
        {
          begin: /\(/,
          end: /\)/,
          contains: [
            {
              relevance: 0,
              scope: "params",
              match: i2
            }
          ]
        }
      ] }
    }, d2 = {
      variants: [
        { match: [
          /class\s+/,
          i2,
          /\s+is\s+/,
          i2
        ] },
        { match: [
          /class\s+/,
          i2
        ] }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: r2
    }, f2 = {
      relevance: 0,
      match: n.either(...l2),
      className: "operator"
    }, b = {
      className: "string",
      begin: /"""/,
      end: /"""/
    }, c2 = {
      className: "property",
      begin: n.concat(/\./, n.lookahead(i2)),
      end: i2,
      excludeBegin: true,
      relevance: 0
    }, E2 = {
      relevance: 0,
      match: n.concat(/\b_/, i2),
      scope: "variable"
    }, g2 = {
      relevance: 0,
      match: /\b[A-Z]+[a-z]+([A-Z]+[a-z]+)*/,
      scope: "title.class",
      keywords: { _: o2 }
    }, S = e2.C_NUMBER_MODE, p2 = {
      match: [
        i2,
        /\s*/,
        /=/,
        /\s*/,
        /\(/,
        i2,
        /\)\s*\{/
      ],
      scope: {
        1: "title.function",
        3: "operator",
        6: "params"
      }
    }, m2 = e2.COMMENT(
      /\/\*\*/,
      /\*\//,
      { contains: [
        {
          match: /@[a-z]+/,
          scope: "doctag"
        },
        "self"
      ] }
    ), R2 = {
      scope: "subst",
      begin: /%\(/,
      end: /\)/,
      contains: [
        S,
        g2,
        u2,
        E2,
        f2
      ]
    }, T = {
      scope: "string",
      begin: /"/,
      end: /"/,
      contains: [
        R2,
        {
          scope: "char.escape",
          variants: [
            { match: /\\\\|\\["0%abefnrtv]/ },
            { match: /\\x[0-9A-F]{2}/ },
            { match: /\\u[0-9A-F]{4}/ },
            { match: /\\U[0-9A-F]{8}/ }
          ]
        }
      ]
    };
    R2.contains.push(T);
    const h2 = [
      ...r2,
      ...s2,
      ...a2
    ], C2 = {
      relevance: 0,
      match: n.concat(
        "\\b(?!",
        h2.join("|"),
        "\\b)",
        /[a-zA-Z_]\w*(?:[?!]|\b)/
      ),
      className: "variable"
    };
    return {
      name: "Wren",
      keywords: {
        keyword: r2,
        "variable.language": s2,
        literal: a2
      },
      contains: [
        {
          // scope: "meta",
          scope: "comment",
          variants: [
            {
              begin: [
                /#!?/,
                /[A-Za-z_]+(?=\()/
              ],
              beginScope: {
                // 2: "attr"
              },
              keywords: { literal: a2 },
              contains: [
                // NUMBER,
                // VARIABLE
              ],
              end: /\)/
            },
            {
              begin: [
                /#!?/,
                /[A-Za-z_]+/
              ],
              beginScope: {
                // 2: "attr"
              },
              end: /$/
            }
          ]
        },
        S,
        T,
        b,
        m2,
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        g2,
        d2,
        p2,
        _,
        u2,
        f2,
        E2,
        c2,
        C2
      ]
    };
  }
  return Ws = t2, Ws;
}
var Ks, em;
function HN() {
  if (em)
    return Ks;
  em = 1;
  function t2(e2) {
    return {
      name: "Intel x86 Assembly",
      case_insensitive: true,
      keywords: {
        $pattern: "[.%]?" + e2.IDENT_RE,
        keyword: "lock rep repe repz repne repnz xaquire xrelease bnd nobnd aaa aad aam aas adc add and arpl bb0_reset bb1_reset bound bsf bsr bswap bt btc btr bts call cbw cdq cdqe clc cld cli clts cmc cmp cmpsb cmpsd cmpsq cmpsw cmpxchg cmpxchg486 cmpxchg8b cmpxchg16b cpuid cpu_read cpu_write cqo cwd cwde daa das dec div dmint emms enter equ f2xm1 fabs fadd faddp fbld fbstp fchs fclex fcmovb fcmovbe fcmove fcmovnb fcmovnbe fcmovne fcmovnu fcmovu fcom fcomi fcomip fcomp fcompp fcos fdecstp fdisi fdiv fdivp fdivr fdivrp femms feni ffree ffreep fiadd ficom ficomp fidiv fidivr fild fimul fincstp finit fist fistp fisttp fisub fisubr fld fld1 fldcw fldenv fldl2e fldl2t fldlg2 fldln2 fldpi fldz fmul fmulp fnclex fndisi fneni fninit fnop fnsave fnstcw fnstenv fnstsw fpatan fprem fprem1 fptan frndint frstor fsave fscale fsetpm fsin fsincos fsqrt fst fstcw fstenv fstp fstsw fsub fsubp fsubr fsubrp ftst fucom fucomi fucomip fucomp fucompp fxam fxch fxtract fyl2x fyl2xp1 hlt ibts icebp idiv imul in inc incbin insb insd insw int int01 int1 int03 int3 into invd invpcid invlpg invlpga iret iretd iretq iretw jcxz jecxz jrcxz jmp jmpe lahf lar lds lea leave les lfence lfs lgdt lgs lidt lldt lmsw loadall loadall286 lodsb lodsd lodsq lodsw loop loope loopne loopnz loopz lsl lss ltr mfence monitor mov movd movq movsb movsd movsq movsw movsx movsxd movzx mul mwait neg nop not or out outsb outsd outsw packssdw packsswb packuswb paddb paddd paddsb paddsiw paddsw paddusb paddusw paddw pand pandn pause paveb pavgusb pcmpeqb pcmpeqd pcmpeqw pcmpgtb pcmpgtd pcmpgtw pdistib pf2id pfacc pfadd pfcmpeq pfcmpge pfcmpgt pfmax pfmin pfmul pfrcp pfrcpit1 pfrcpit2 pfrsqit1 pfrsqrt pfsub pfsubr pi2fd pmachriw pmaddwd pmagw pmulhriw pmulhrwa pmulhrwc pmulhw pmullw pmvgezb pmvlzb pmvnzb pmvzb pop popa popad popaw popf popfd popfq popfw por prefetch prefetchw pslld psllq psllw psrad psraw psrld psrlq psrlw psubb psubd psubsb psubsiw psubsw psubusb psubusw psubw punpckhbw punpckhdq punpckhwd punpcklbw punpckldq punpcklwd push pusha pushad pushaw pushf pushfd pushfq pushfw pxor rcl rcr rdshr rdmsr rdpmc rdtsc rdtscp ret retf retn rol ror rdm rsdc rsldt rsm rsts sahf sal salc sar sbb scasb scasd scasq scasw sfence sgdt shl shld shr shrd sidt sldt skinit smi smint smintold smsw stc std sti stosb stosd stosq stosw str sub svdc svldt svts swapgs syscall sysenter sysexit sysret test ud0 ud1 ud2b ud2 ud2a umov verr verw fwait wbinvd wrshr wrmsr xadd xbts xchg xlatb xlat xor cmove cmovz cmovne cmovnz cmova cmovnbe cmovae cmovnb cmovb cmovnae cmovbe cmovna cmovg cmovnle cmovge cmovnl cmovl cmovnge cmovle cmovng cmovc cmovnc cmovo cmovno cmovs cmovns cmovp cmovpe cmovnp cmovpo je jz jne jnz ja jnbe jae jnb jb jnae jbe jna jg jnle jge jnl jl jnge jle jng jc jnc jo jno js jns jpo jnp jpe jp sete setz setne setnz seta setnbe setae setnb setnc setb setnae setcset setbe setna setg setnle setge setnl setl setnge setle setng sets setns seto setno setpe setp setpo setnp addps addss andnps andps cmpeqps cmpeqss cmpleps cmpless cmpltps cmpltss cmpneqps cmpneqss cmpnleps cmpnless cmpnltps cmpnltss cmpordps cmpordss cmpunordps cmpunordss cmpps cmpss comiss cvtpi2ps cvtps2pi cvtsi2ss cvtss2si cvttps2pi cvttss2si divps divss ldmxcsr maxps maxss minps minss movaps movhps movlhps movlps movhlps movmskps movntps movss movups mulps mulss orps rcpps rcpss rsqrtps rsqrtss shufps sqrtps sqrtss stmxcsr subps subss ucomiss unpckhps unpcklps xorps fxrstor fxrstor64 fxsave fxsave64 xgetbv xsetbv xsave xsave64 xsaveopt xsaveopt64 xrstor xrstor64 prefetchnta prefetcht0 prefetcht1 prefetcht2 maskmovq movntq pavgb pavgw pextrw pinsrw pmaxsw pmaxub pminsw pminub pmovmskb pmulhuw psadbw pshufw pf2iw pfnacc pfpnacc pi2fw pswapd maskmovdqu clflush movntdq movnti movntpd movdqa movdqu movdq2q movq2dq paddq pmuludq pshufd pshufhw pshuflw pslldq psrldq psubq punpckhqdq punpcklqdq addpd addsd andnpd andpd cmpeqpd cmpeqsd cmplepd cmplesd cmpltpd cmpltsd cmpneqpd cmpneqsd cmpnlepd cmpnlesd cmpnltpd cmpnltsd cmpordpd cmpordsd cmpunordpd cmpunordsd cmppd comisd cvtdq2pd cvtdq2ps cvtpd2dq cvtpd2pi cvtpd2ps cvtpi2pd cvtps2dq cvtps2pd cvtsd2si cvtsd2ss cvtsi2sd cvtss2sd cvttpd2pi cvttpd2dq cvttps2dq cvttsd2si divpd divsd maxpd maxsd minpd minsd movapd movhpd movlpd movmskpd movupd mulpd mulsd orpd shufpd sqrtpd sqrtsd subpd subsd ucomisd unpckhpd unpcklpd xorpd addsubpd addsubps haddpd haddps hsubpd hsubps lddqu movddup movshdup movsldup clgi stgi vmcall vmclear vmfunc vmlaunch vmload vmmcall vmptrld vmptrst vmread vmresume vmrun vmsave vmwrite vmxoff vmxon invept invvpid pabsb pabsw pabsd palignr phaddw phaddd phaddsw phsubw phsubd phsubsw pmaddubsw pmulhrsw pshufb psignb psignw psignd extrq insertq movntsd movntss lzcnt blendpd blendps blendvpd blendvps dppd dpps extractps insertps movntdqa mpsadbw packusdw pblendvb pblendw pcmpeqq pextrb pextrd pextrq phminposuw pinsrb pinsrd pinsrq pmaxsb pmaxsd pmaxud pmaxuw pminsb pminsd pminud pminuw pmovsxbw pmovsxbd pmovsxbq pmovsxwd pmovsxwq pmovsxdq pmovzxbw pmovzxbd pmovzxbq pmovzxwd pmovzxwq pmovzxdq pmuldq pmulld ptest roundpd roundps roundsd roundss crc32 pcmpestri pcmpestrm pcmpistri pcmpistrm pcmpgtq popcnt getsec pfrcpv pfrsqrtv movbe aesenc aesenclast aesdec aesdeclast aesimc aeskeygenassist vaesenc vaesenclast vaesdec vaesdeclast vaesimc vaeskeygenassist vaddpd vaddps vaddsd vaddss vaddsubpd vaddsubps vandpd vandps vandnpd vandnps vblendpd vblendps vblendvpd vblendvps vbroadcastss vbroadcastsd vbroadcastf128 vcmpeq_ospd vcmpeqpd vcmplt_ospd vcmpltpd vcmple_ospd vcmplepd vcmpunord_qpd vcmpunordpd vcmpneq_uqpd vcmpneqpd vcmpnlt_uspd vcmpnltpd vcmpnle_uspd vcmpnlepd vcmpord_qpd vcmpordpd vcmpeq_uqpd vcmpnge_uspd vcmpngepd vcmpngt_uspd vcmpngtpd vcmpfalse_oqpd vcmpfalsepd vcmpneq_oqpd vcmpge_ospd vcmpgepd vcmpgt_ospd vcmpgtpd vcmptrue_uqpd vcmptruepd vcmplt_oqpd vcmple_oqpd vcmpunord_spd vcmpneq_uspd vcmpnlt_uqpd vcmpnle_uqpd vcmpord_spd vcmpeq_uspd vcmpnge_uqpd vcmpngt_uqpd vcmpfalse_ospd vcmpneq_ospd vcmpge_oqpd vcmpgt_oqpd vcmptrue_uspd vcmppd vcmpeq_osps vcmpeqps vcmplt_osps vcmpltps vcmple_osps vcmpleps vcmpunord_qps vcmpunordps vcmpneq_uqps vcmpneqps vcmpnlt_usps vcmpnltps vcmpnle_usps vcmpnleps vcmpord_qps vcmpordps vcmpeq_uqps vcmpnge_usps vcmpngeps vcmpngt_usps vcmpngtps vcmpfalse_oqps vcmpfalseps vcmpneq_oqps vcmpge_osps vcmpgeps vcmpgt_osps vcmpgtps vcmptrue_uqps vcmptrueps vcmplt_oqps vcmple_oqps vcmpunord_sps vcmpneq_usps vcmpnlt_uqps vcmpnle_uqps vcmpord_sps vcmpeq_usps vcmpnge_uqps vcmpngt_uqps vcmpfalse_osps vcmpneq_osps vcmpge_oqps vcmpgt_oqps vcmptrue_usps vcmpps vcmpeq_ossd vcmpeqsd vcmplt_ossd vcmpltsd vcmple_ossd vcmplesd vcmpunord_qsd vcmpunordsd vcmpneq_uqsd vcmpneqsd vcmpnlt_ussd vcmpnltsd vcmpnle_ussd vcmpnlesd vcmpord_qsd vcmpordsd vcmpeq_uqsd vcmpnge_ussd vcmpngesd vcmpngt_ussd vcmpngtsd vcmpfalse_oqsd vcmpfalsesd vcmpneq_oqsd vcmpge_ossd vcmpgesd vcmpgt_ossd vcmpgtsd vcmptrue_uqsd vcmptruesd vcmplt_oqsd vcmple_oqsd vcmpunord_ssd vcmpneq_ussd vcmpnlt_uqsd vcmpnle_uqsd vcmpord_ssd vcmpeq_ussd vcmpnge_uqsd vcmpngt_uqsd vcmpfalse_ossd vcmpneq_ossd vcmpge_oqsd vcmpgt_oqsd vcmptrue_ussd vcmpsd vcmpeq_osss vcmpeqss vcmplt_osss vcmpltss vcmple_osss vcmpless vcmpunord_qss vcmpunordss vcmpneq_uqss vcmpneqss vcmpnlt_usss vcmpnltss vcmpnle_usss vcmpnless vcmpord_qss vcmpordss vcmpeq_uqss vcmpnge_usss vcmpngess vcmpngt_usss vcmpngtss vcmpfalse_oqss vcmpfalsess vcmpneq_oqss vcmpge_osss vcmpgess vcmpgt_osss vcmpgtss vcmptrue_uqss vcmptruess vcmplt_oqss vcmple_oqss vcmpunord_sss vcmpneq_usss vcmpnlt_uqss vcmpnle_uqss vcmpord_sss vcmpeq_usss vcmpnge_uqss vcmpngt_uqss vcmpfalse_osss vcmpneq_osss vcmpge_oqss vcmpgt_oqss vcmptrue_usss vcmpss vcomisd vcomiss vcvtdq2pd vcvtdq2ps vcvtpd2dq vcvtpd2ps vcvtps2dq vcvtps2pd vcvtsd2si vcvtsd2ss vcvtsi2sd vcvtsi2ss vcvtss2sd vcvtss2si vcvttpd2dq vcvttps2dq vcvttsd2si vcvttss2si vdivpd vdivps vdivsd vdivss vdppd vdpps vextractf128 vextractps vhaddpd vhaddps vhsubpd vhsubps vinsertf128 vinsertps vlddqu vldqqu vldmxcsr vmaskmovdqu vmaskmovps vmaskmovpd vmaxpd vmaxps vmaxsd vmaxss vminpd vminps vminsd vminss vmovapd vmovaps vmovd vmovq vmovddup vmovdqa vmovqqa vmovdqu vmovqqu vmovhlps vmovhpd vmovhps vmovlhps vmovlpd vmovlps vmovmskpd vmovmskps vmovntdq vmovntqq vmovntdqa vmovntpd vmovntps vmovsd vmovshdup vmovsldup vmovss vmovupd vmovups vmpsadbw vmulpd vmulps vmulsd vmulss vorpd vorps vpabsb vpabsw vpabsd vpacksswb vpackssdw vpackuswb vpackusdw vpaddb vpaddw vpaddd vpaddq vpaddsb vpaddsw vpaddusb vpaddusw vpalignr vpand vpandn vpavgb vpavgw vpblendvb vpblendw vpcmpestri vpcmpestrm vpcmpistri vpcmpistrm vpcmpeqb vpcmpeqw vpcmpeqd vpcmpeqq vpcmpgtb vpcmpgtw vpcmpgtd vpcmpgtq vpermilpd vpermilps vperm2f128 vpextrb vpextrw vpextrd vpextrq vphaddw vphaddd vphaddsw vphminposuw vphsubw vphsubd vphsubsw vpinsrb vpinsrw vpinsrd vpinsrq vpmaddwd vpmaddubsw vpmaxsb vpmaxsw vpmaxsd vpmaxub vpmaxuw vpmaxud vpminsb vpminsw vpminsd vpminub vpminuw vpminud vpmovmskb vpmovsxbw vpmovsxbd vpmovsxbq vpmovsxwd vpmovsxwq vpmovsxdq vpmovzxbw vpmovzxbd vpmovzxbq vpmovzxwd vpmovzxwq vpmovzxdq vpmulhuw vpmulhrsw vpmulhw vpmullw vpmulld vpmuludq vpmuldq vpor vpsadbw vpshufb vpshufd vpshufhw vpshuflw vpsignb vpsignw vpsignd vpslldq vpsrldq vpsllw vpslld vpsllq vpsraw vpsrad vpsrlw vpsrld vpsrlq vptest vpsubb vpsubw vpsubd vpsubq vpsubsb vpsubsw vpsubusb vpsubusw vpunpckhbw vpunpckhwd vpunpckhdq vpunpckhqdq vpunpcklbw vpunpcklwd vpunpckldq vpunpcklqdq vpxor vrcpps vrcpss vrsqrtps vrsqrtss vroundpd vroundps vroundsd vroundss vshufpd vshufps vsqrtpd vsqrtps vsqrtsd vsqrtss vstmxcsr vsubpd vsubps vsubsd vsubss vtestps vtestpd vucomisd vucomiss vunpckhpd vunpckhps vunpcklpd vunpcklps vxorpd vxorps vzeroall vzeroupper pclmullqlqdq pclmulhqlqdq pclmullqhqdq pclmulhqhqdq pclmulqdq vpclmullqlqdq vpclmulhqlqdq vpclmullqhqdq vpclmulhqhqdq vpclmulqdq vfmadd132ps vfmadd132pd vfmadd312ps vfmadd312pd vfmadd213ps vfmadd213pd vfmadd123ps vfmadd123pd vfmadd231ps vfmadd231pd vfmadd321ps vfmadd321pd vfmaddsub132ps vfmaddsub132pd vfmaddsub312ps vfmaddsub312pd vfmaddsub213ps vfmaddsub213pd vfmaddsub123ps vfmaddsub123pd vfmaddsub231ps vfmaddsub231pd vfmaddsub321ps vfmaddsub321pd vfmsub132ps vfmsub132pd vfmsub312ps vfmsub312pd vfmsub213ps vfmsub213pd vfmsub123ps vfmsub123pd vfmsub231ps vfmsub231pd vfmsub321ps vfmsub321pd vfmsubadd132ps vfmsubadd132pd vfmsubadd312ps vfmsubadd312pd vfmsubadd213ps vfmsubadd213pd vfmsubadd123ps vfmsubadd123pd vfmsubadd231ps vfmsubadd231pd vfmsubadd321ps vfmsubadd321pd vfnmadd132ps vfnmadd132pd vfnmadd312ps vfnmadd312pd vfnmadd213ps vfnmadd213pd vfnmadd123ps vfnmadd123pd vfnmadd231ps vfnmadd231pd vfnmadd321ps vfnmadd321pd vfnmsub132ps vfnmsub132pd vfnmsub312ps vfnmsub312pd vfnmsub213ps vfnmsub213pd vfnmsub123ps vfnmsub123pd vfnmsub231ps vfnmsub231pd vfnmsub321ps vfnmsub321pd vfmadd132ss vfmadd132sd vfmadd312ss vfmadd312sd vfmadd213ss vfmadd213sd vfmadd123ss vfmadd123sd vfmadd231ss vfmadd231sd vfmadd321ss vfmadd321sd vfmsub132ss vfmsub132sd vfmsub312ss vfmsub312sd vfmsub213ss vfmsub213sd vfmsub123ss vfmsub123sd vfmsub231ss vfmsub231sd vfmsub321ss vfmsub321sd vfnmadd132ss vfnmadd132sd vfnmadd312ss vfnmadd312sd vfnmadd213ss vfnmadd213sd vfnmadd123ss vfnmadd123sd vfnmadd231ss vfnmadd231sd vfnmadd321ss vfnmadd321sd vfnmsub132ss vfnmsub132sd vfnmsub312ss vfnmsub312sd vfnmsub213ss vfnmsub213sd vfnmsub123ss vfnmsub123sd vfnmsub231ss vfnmsub231sd vfnmsub321ss vfnmsub321sd rdfsbase rdgsbase rdrand wrfsbase wrgsbase vcvtph2ps vcvtps2ph adcx adox rdseed clac stac xstore xcryptecb xcryptcbc xcryptctr xcryptcfb xcryptofb montmul xsha1 xsha256 llwpcb slwpcb lwpval lwpins vfmaddpd vfmaddps vfmaddsd vfmaddss vfmaddsubpd vfmaddsubps vfmsubaddpd vfmsubaddps vfmsubpd vfmsubps vfmsubsd vfmsubss vfnmaddpd vfnmaddps vfnmaddsd vfnmaddss vfnmsubpd vfnmsubps vfnmsubsd vfnmsubss vfrczpd vfrczps vfrczsd vfrczss vpcmov vpcomb vpcomd vpcomq vpcomub vpcomud vpcomuq vpcomuw vpcomw vphaddbd vphaddbq vphaddbw vphadddq vphaddubd vphaddubq vphaddubw vphaddudq vphadduwd vphadduwq vphaddwd vphaddwq vphsubbw vphsubdq vphsubwd vpmacsdd vpmacsdqh vpmacsdql vpmacssdd vpmacssdqh vpmacssdql vpmacsswd vpmacssww vpmacswd vpmacsww vpmadcsswd vpmadcswd vpperm vprotb vprotd vprotq vprotw vpshab vpshad vpshaq vpshaw vpshlb vpshld vpshlq vpshlw vbroadcasti128 vpblendd vpbroadcastb vpbroadcastw vpbroadcastd vpbroadcastq vpermd vpermpd vpermps vpermq vperm2i128 vextracti128 vinserti128 vpmaskmovd vpmaskmovq vpsllvd vpsllvq vpsravd vpsrlvd vpsrlvq vgatherdpd vgatherqpd vgatherdps vgatherqps vpgatherdd vpgatherqd vpgatherdq vpgatherqq xabort xbegin xend xtest andn bextr blci blcic blsi blsic blcfill blsfill blcmsk blsmsk blsr blcs bzhi mulx pdep pext rorx sarx shlx shrx tzcnt tzmsk t1mskc valignd valignq vblendmpd vblendmps vbroadcastf32x4 vbroadcastf64x4 vbroadcasti32x4 vbroadcasti64x4 vcompresspd vcompressps vcvtpd2udq vcvtps2udq vcvtsd2usi vcvtss2usi vcvttpd2udq vcvttps2udq vcvttsd2usi vcvttss2usi vcvtudq2pd vcvtudq2ps vcvtusi2sd vcvtusi2ss vexpandpd vexpandps vextractf32x4 vextractf64x4 vextracti32x4 vextracti64x4 vfixupimmpd vfixupimmps vfixupimmsd vfixupimmss vgetexppd vgetexpps vgetexpsd vgetexpss vgetmantpd vgetmantps vgetmantsd vgetmantss vinsertf32x4 vinsertf64x4 vinserti32x4 vinserti64x4 vmovdqa32 vmovdqa64 vmovdqu32 vmovdqu64 vpabsq vpandd vpandnd vpandnq vpandq vpblendmd vpblendmq vpcmpltd vpcmpled vpcmpneqd vpcmpnltd vpcmpnled vpcmpd vpcmpltq vpcmpleq vpcmpneqq vpcmpnltq vpcmpnleq vpcmpq vpcmpequd vpcmpltud vpcmpleud vpcmpnequd vpcmpnltud vpcmpnleud vpcmpud vpcmpequq vpcmpltuq vpcmpleuq vpcmpnequq vpcmpnltuq vpcmpnleuq vpcmpuq vpcompressd vpcompressq vpermi2d vpermi2pd vpermi2ps vpermi2q vpermt2d vpermt2pd vpermt2ps vpermt2q vpexpandd vpexpandq vpmaxsq vpmaxuq vpminsq vpminuq vpmovdb vpmovdw vpmovqb vpmovqd vpmovqw vpmovsdb vpmovsdw vpmovsqb vpmovsqd vpmovsqw vpmovusdb vpmovusdw vpmovusqb vpmovusqd vpmovusqw vpord vporq vprold vprolq vprolvd vprolvq vprord vprorq vprorvd vprorvq vpscatterdd vpscatterdq vpscatterqd vpscatterqq vpsraq vpsravq vpternlogd vpternlogq vptestmd vptestmq vptestnmd vptestnmq vpxord vpxorq vrcp14pd vrcp14ps vrcp14sd vrcp14ss vrndscalepd vrndscaleps vrndscalesd vrndscaless vrsqrt14pd vrsqrt14ps vrsqrt14sd vrsqrt14ss vscalefpd vscalefps vscalefsd vscalefss vscatterdpd vscatterdps vscatterqpd vscatterqps vshuff32x4 vshuff64x2 vshufi32x4 vshufi64x2 kandnw kandw kmovw knotw kortestw korw kshiftlw kshiftrw kunpckbw kxnorw kxorw vpbroadcastmb2q vpbroadcastmw2d vpconflictd vpconflictq vplzcntd vplzcntq vexp2pd vexp2ps vrcp28pd vrcp28ps vrcp28sd vrcp28ss vrsqrt28pd vrsqrt28ps vrsqrt28sd vrsqrt28ss vgatherpf0dpd vgatherpf0dps vgatherpf0qpd vgatherpf0qps vgatherpf1dpd vgatherpf1dps vgatherpf1qpd vgatherpf1qps vscatterpf0dpd vscatterpf0dps vscatterpf0qpd vscatterpf0qps vscatterpf1dpd vscatterpf1dps vscatterpf1qpd vscatterpf1qps prefetchwt1 bndmk bndcl bndcu bndcn bndmov bndldx bndstx sha1rnds4 sha1nexte sha1msg1 sha1msg2 sha256rnds2 sha256msg1 sha256msg2 hint_nop0 hint_nop1 hint_nop2 hint_nop3 hint_nop4 hint_nop5 hint_nop6 hint_nop7 hint_nop8 hint_nop9 hint_nop10 hint_nop11 hint_nop12 hint_nop13 hint_nop14 hint_nop15 hint_nop16 hint_nop17 hint_nop18 hint_nop19 hint_nop20 hint_nop21 hint_nop22 hint_nop23 hint_nop24 hint_nop25 hint_nop26 hint_nop27 hint_nop28 hint_nop29 hint_nop30 hint_nop31 hint_nop32 hint_nop33 hint_nop34 hint_nop35 hint_nop36 hint_nop37 hint_nop38 hint_nop39 hint_nop40 hint_nop41 hint_nop42 hint_nop43 hint_nop44 hint_nop45 hint_nop46 hint_nop47 hint_nop48 hint_nop49 hint_nop50 hint_nop51 hint_nop52 hint_nop53 hint_nop54 hint_nop55 hint_nop56 hint_nop57 hint_nop58 hint_nop59 hint_nop60 hint_nop61 hint_nop62 hint_nop63",
        built_in: (
          // Instruction pointer
          "ip eip rip al ah bl bh cl ch dl dh sil dil bpl spl r8b r9b r10b r11b r12b r13b r14b r15b ax bx cx dx si di bp sp r8w r9w r10w r11w r12w r13w r14w r15w eax ebx ecx edx esi edi ebp esp eip r8d r9d r10d r11d r12d r13d r14d r15d rax rbx rcx rdx rsi rdi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15 cs ds es fs gs ss st st0 st1 st2 st3 st4 st5 st6 st7 mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7 xmm0  xmm1  xmm2  xmm3  xmm4  xmm5  xmm6  xmm7  xmm8  xmm9 xmm10  xmm11 xmm12 xmm13 xmm14 xmm15 xmm16 xmm17 xmm18 xmm19 xmm20 xmm21 xmm22 xmm23 xmm24 xmm25 xmm26 xmm27 xmm28 xmm29 xmm30 xmm31 ymm0  ymm1  ymm2  ymm3  ymm4  ymm5  ymm6  ymm7  ymm8  ymm9 ymm10  ymm11 ymm12 ymm13 ymm14 ymm15 ymm16 ymm17 ymm18 ymm19 ymm20 ymm21 ymm22 ymm23 ymm24 ymm25 ymm26 ymm27 ymm28 ymm29 ymm30 ymm31 zmm0  zmm1  zmm2  zmm3  zmm4  zmm5  zmm6  zmm7  zmm8  zmm9 zmm10  zmm11 zmm12 zmm13 zmm14 zmm15 zmm16 zmm17 zmm18 zmm19 zmm20 zmm21 zmm22 zmm23 zmm24 zmm25 zmm26 zmm27 zmm28 zmm29 zmm30 zmm31 k0 k1 k2 k3 k4 k5 k6 k7 bnd0 bnd1 bnd2 bnd3 cr0 cr1 cr2 cr3 cr4 cr8 dr0 dr1 dr2 dr3 dr8 tr3 tr4 tr5 tr6 tr7 r0 r1 r2 r3 r4 r5 r6 r7 r0b r1b r2b r3b r4b r5b r6b r7b r0w r1w r2w r3w r4w r5w r6w r7w r0d r1d r2d r3d r4d r5d r6d r7d r0h r1h r2h r3h r0l r1l r2l r3l r4l r5l r6l r7l r8l r9l r10l r11l r12l r13l r14l r15l db dw dd dq dt ddq do dy dz resb resw resd resq rest resdq reso resy resz incbin equ times byte word dword qword nosplit rel abs seg wrt strict near far a32 ptr"
        ),
        meta: "%define %xdefine %+ %undef %defstr %deftok %assign %strcat %strlen %substr %rotate %elif %else %endif %if %ifmacro %ifctx %ifidn %ifidni %ifid %ifnum %ifstr %iftoken %ifempty %ifenv %error %warning %fatal %rep %endrep %include %push %pop %repl %pathsearch %depend %use %arg %stacksize %local %line %comment %endcomment .nolist __FILE__ __LINE__ __SECT__  __BITS__ __OUTPUT_FORMAT__ __DATE__ __TIME__ __DATE_NUM__ __TIME_NUM__ __UTC_DATE__ __UTC_TIME__ __UTC_DATE_NUM__ __UTC_TIME_NUM__  __PASS__ struc endstruc istruc at iend align alignb sectalign daz nodaz up down zero default option assume public bits use16 use32 use64 default section segment absolute extern global common cpu float __utf16__ __utf16le__ __utf16be__ __utf32__ __utf32le__ __utf32be__ __float8__ __float16__ __float32__ __float64__ __float80m__ __float80e__ __float128l__ __float128h__ __Infinity__ __QNaN__ __SNaN__ Inf NaN QNaN SNaN float8 float16 float32 float64 float80m float80e float128l float128h __FLOAT_DAZ__ __FLOAT_ROUND__ __FLOAT__"
      },
      contains: [
        e2.COMMENT(
          ";",
          "$",
          { relevance: 0 }
        ),
        {
          className: "number",
          variants: [
            // Float number and x87 BCD
            {
              begin: "\\b(?:([0-9][0-9_]*)?\\.[0-9_]*(?:[eE][+-]?[0-9_]+)?|(0[Xx])?[0-9][0-9_]*(\\.[0-9_]*)?(?:[pP](?:[+-]?[0-9_]+)?)?)\\b",
              relevance: 0
            },
            // Hex number in $
            {
              begin: "\\$[0-9][0-9A-Fa-f]*",
              relevance: 0
            },
            // Number in H,D,T,Q,O,B,Y suffix
            { begin: "\\b(?:[0-9A-Fa-f][0-9A-Fa-f_]*[Hh]|[0-9][0-9_]*[DdTt]?|[0-7][0-7_]*[QqOo]|[0-1][0-1_]*[BbYy])\\b" },
            // Number in X,D,T,Q,O,B,Y prefix
            { begin: "\\b(?:0[Xx][0-9A-Fa-f_]+|0[DdTt][0-9_]+|0[QqOo][0-7_]+|0[BbYy][0-1_]+)\\b" }
          ]
        },
        // Double quote string
        e2.QUOTE_STRING_MODE,
        {
          className: "string",
          variants: [
            // Single-quoted string
            {
              begin: "'",
              end: "[^\\\\]'"
            },
            // Backquoted string
            {
              begin: "`",
              end: "[^\\\\]`"
            }
          ],
          relevance: 0
        },
        {
          className: "symbol",
          variants: [
            // Global label and local label
            { begin: "^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)" },
            // Macro-local label
            { begin: "^\\s*%%[A-Za-z0-9_$#@~.?]*:" }
          ],
          relevance: 0
        },
        // Macro parameter
        {
          className: "subst",
          begin: "%[0-9]+",
          relevance: 0
        },
        // Macro parameter
        {
          className: "subst",
          begin: "%!S+",
          relevance: 0
        },
        {
          className: "meta",
          begin: /^\s*\.[\w_-]+/
        }
      ]
    };
  }
  return Ks = t2, Ks;
}
var Qs, tm;
function zN() {
  if (tm)
    return Qs;
  tm = 1;
  function t2(e2) {
    const n = [
      "if",
      "then",
      "else",
      "do",
      "while",
      "until",
      "for",
      "loop",
      "import",
      "with",
      "is",
      "as",
      "where",
      "when",
      "by",
      "data",
      "constant",
      "integer",
      "real",
      "text",
      "name",
      "boolean",
      "symbol",
      "infix",
      "prefix",
      "postfix",
      "block",
      "tree"
    ], i2 = [
      "in",
      "mod",
      "rem",
      "and",
      "or",
      "xor",
      "not",
      "abs",
      "sign",
      "floor",
      "ceil",
      "sqrt",
      "sin",
      "cos",
      "tan",
      "asin",
      "acos",
      "atan",
      "exp",
      "expm1",
      "log",
      "log2",
      "log10",
      "log1p",
      "pi",
      "at",
      "text_length",
      "text_range",
      "text_find",
      "text_replace",
      "contains",
      "page",
      "slide",
      "basic_slide",
      "title_slide",
      "title",
      "subtitle",
      "fade_in",
      "fade_out",
      "fade_at",
      "clear_color",
      "color",
      "line_color",
      "line_width",
      "texture_wrap",
      "texture_transform",
      "texture",
      "scale_?x",
      "scale_?y",
      "scale_?z?",
      "translate_?x",
      "translate_?y",
      "translate_?z?",
      "rotate_?x",
      "rotate_?y",
      "rotate_?z?",
      "rectangle",
      "circle",
      "ellipse",
      "sphere",
      "path",
      "line_to",
      "move_to",
      "quad_to",
      "curve_to",
      "theme",
      "background",
      "contents",
      "locally",
      "time",
      "mouse_?x",
      "mouse_?y",
      "mouse_buttons"
    ], r2 = [
      "ObjectLoader",
      "Animate",
      "MovieCredits",
      "Slides",
      "Filters",
      "Shading",
      "Materials",
      "LensFlare",
      "Mapping",
      "VLCAudioVideo",
      "StereoDecoder",
      "PointCloud",
      "NetworkAccess",
      "RemoteControl",
      "RegExp",
      "ChromaKey",
      "Snowfall",
      "NodeJS",
      "Speech",
      "Charts"
    ], s2 = {
      $pattern: /[a-zA-Z][a-zA-Z0-9_?]*/,
      keyword: n,
      literal: [
        "true",
        "false",
        "nil"
      ],
      built_in: i2.concat(r2)
    }, o2 = {
      className: "string",
      begin: '"',
      end: '"',
      illegal: "\\n"
    }, l2 = {
      className: "string",
      begin: "'",
      end: "'",
      illegal: "\\n"
    }, u2 = {
      className: "string",
      begin: "<<",
      end: ">>"
    }, _ = {
      className: "number",
      begin: "[0-9]+#[0-9A-Z_]+(\\.[0-9-A-Z_]+)?#?([Ee][+-]?[0-9]+)?"
    }, d2 = {
      beginKeywords: "import",
      end: "$",
      keywords: s2,
      contains: [o2]
    }, f2 = {
      className: "function",
      begin: /[a-z][^\n]*->/,
      returnBegin: true,
      end: /->/,
      contains: [
        e2.inherit(e2.TITLE_MODE, { starts: {
          endsWithParent: true,
          keywords: s2
        } })
      ]
    };
    return {
      name: "XL",
      aliases: ["tao"],
      keywords: s2,
      contains: [
        e2.C_LINE_COMMENT_MODE,
        e2.C_BLOCK_COMMENT_MODE,
        o2,
        l2,
        u2,
        f2,
        d2,
        _,
        e2.NUMBER_MODE
      ]
    };
  }
  return Qs = t2, Qs;
}
var Xs, nm;
function $N() {
  if (nm)
    return Xs;
  nm = 1;
  function t2(e2) {
    return {
      name: "XQuery",
      aliases: [
        "xpath",
        "xq",
        "xqm"
      ],
      case_insensitive: false,
      illegal: /(proc)|(abstract)|(extends)|(until)|(#)/,
      keywords: {
        $pattern: /[a-zA-Z$][a-zA-Z0-9_:-]*/,
        keyword: [
          "module",
          "schema",
          "namespace",
          "boundary-space",
          "preserve",
          "no-preserve",
          "strip",
          "default",
          "collation",
          "base-uri",
          "ordering",
          "context",
          "decimal-format",
          "decimal-separator",
          "copy-namespaces",
          "empty-sequence",
          "except",
          "exponent-separator",
          "external",
          "grouping-separator",
          "inherit",
          "no-inherit",
          "lax",
          "minus-sign",
          "per-mille",
          "percent",
          "schema-attribute",
          "schema-element",
          "strict",
          "unordered",
          "zero-digit",
          "declare",
          "import",
          "option",
          "function",
          "validate",
          "variable",
          "for",
          "at",
          "in",
          "let",
          "where",
          "order",
          "group",
          "by",
          "return",
          "if",
          "then",
          "else",
          "tumbling",
          "sliding",
          "window",
          "start",
          "when",
          "only",
          "end",
          "previous",
          "next",
          "stable",
          "ascending",
          "descending",
          "allowing",
          "empty",
          "greatest",
          "least",
          "some",
          "every",
          "satisfies",
          "switch",
          "case",
          "typeswitch",
          "try",
          "catch",
          "and",
          "or",
          "to",
          "union",
          "intersect",
          "instance",
          "of",
          "treat",
          "as",
          "castable",
          "cast",
          "map",
          "array",
          "delete",
          "insert",
          "into",
          "replace",
          "value",
          "rename",
          "copy",
          "modify",
          "update"
        ],
        type: [
          "item",
          "document-node",
          "node",
          "attribute",
          "document",
          "element",
          "comment",
          "namespace",
          "namespace-node",
          "processing-instruction",
          "text",
          "construction",
          "xs:anyAtomicType",
          "xs:untypedAtomic",
          "xs:duration",
          "xs:time",
          "xs:decimal",
          "xs:float",
          "xs:double",
          "xs:gYearMonth",
          "xs:gYear",
          "xs:gMonthDay",
          "xs:gMonth",
          "xs:gDay",
          "xs:boolean",
          "xs:base64Binary",
          "xs:hexBinary",
          "xs:anyURI",
          "xs:QName",
          "xs:NOTATION",
          "xs:dateTime",
          "xs:dateTimeStamp",
          "xs:date",
          "xs:string",
          "xs:normalizedString",
          "xs:token",
          "xs:language",
          "xs:NMTOKEN",
          "xs:Name",
          "xs:NCName",
          "xs:ID",
          "xs:IDREF",
          "xs:ENTITY",
          "xs:integer",
          "xs:nonPositiveInteger",
          "xs:negativeInteger",
          "xs:long",
          "xs:int",
          "xs:short",
          "xs:byte",
          "xs:nonNegativeInteger",
          "xs:unisignedLong",
          "xs:unsignedInt",
          "xs:unsignedShort",
          "xs:unsignedByte",
          "xs:positiveInteger",
          "xs:yearMonthDuration",
          "xs:dayTimeDuration"
        ],
        literal: [
          "eq",
          "ne",
          "lt",
          "le",
          "gt",
          "ge",
          "is",
          "self::",
          "child::",
          "descendant::",
          "descendant-or-self::",
          "attribute::",
          "following::",
          "following-sibling::",
          "parent::",
          "ancestor::",
          "ancestor-or-self::",
          "preceding::",
          "preceding-sibling::",
          "NaN"
        ]
      },
      contains: [
        {
          className: "variable",
          begin: /[$][\w\-:]+/
        },
        {
          className: "built_in",
          variants: [
            {
              begin: /\barray:/,
              end: /(?:append|filter|flatten|fold-(?:left|right)|for-each(?:-pair)?|get|head|insert-before|join|put|remove|reverse|size|sort|subarray|tail)\b/
            },
            {
              begin: /\bmap:/,
              end: /(?:contains|entry|find|for-each|get|keys|merge|put|remove|size)\b/
            },
            {
              begin: /\bmath:/,
              end: /(?:a(?:cos|sin|tan[2]?)|cos|exp(?:10)?|log(?:10)?|pi|pow|sin|sqrt|tan)\b/
            },
            {
              begin: /\bop:/,
              end: /\(/,
              excludeEnd: true
            },
            {
              begin: /\bfn:/,
              end: /\(/,
              excludeEnd: true
            },
            // do not highlight inbuilt strings as variable or xml element names
            { begin: /[^</$:'"-]\b(?:abs|accumulator-(?:after|before)|adjust-(?:date(?:Time)?|time)-to-timezone|analyze-string|apply|available-(?:environment-variables|system-properties)|avg|base-uri|boolean|ceiling|codepoints?-(?:equal|to-string)|collation-key|collection|compare|concat|contains(?:-token)?|copy-of|count|current(?:-)?(?:date(?:Time)?|time|group(?:ing-key)?|output-uri|merge-(?:group|key))?data|dateTime|days?-from-(?:date(?:Time)?|duration)|deep-equal|default-(?:collation|language)|distinct-values|document(?:-uri)?|doc(?:-available)?|element-(?:available|with-id)|empty|encode-for-uri|ends-with|environment-variable|error|escape-html-uri|exactly-one|exists|false|filter|floor|fold-(?:left|right)|for-each(?:-pair)?|format-(?:date(?:Time)?|time|integer|number)|function-(?:arity|available|lookup|name)|generate-id|has-children|head|hours-from-(?:dateTime|duration|time)|id(?:ref)?|implicit-timezone|in-scope-prefixes|index-of|innermost|insert-before|iri-to-uri|json-(?:doc|to-xml)|key|lang|last|load-xquery-module|local-name(?:-from-QName)?|(?:lower|upper)-case|matches|max|minutes-from-(?:dateTime|duration|time)|min|months?-from-(?:date(?:Time)?|duration)|name(?:space-uri-?(?:for-prefix|from-QName)?)?|nilled|node-name|normalize-(?:space|unicode)|not|number|one-or-more|outermost|parse-(?:ietf-date|json)|path|position|(?:prefix-from-)?QName|random-number-generator|regex-group|remove|replace|resolve-(?:QName|uri)|reverse|root|round(?:-half-to-even)?|seconds-from-(?:dateTime|duration|time)|snapshot|sort|starts-with|static-base-uri|stream-available|string-?(?:join|length|to-codepoints)?|subsequence|substring-?(?:after|before)?|sum|system-property|tail|timezone-from-(?:date(?:Time)?|time)|tokenize|trace|trans(?:form|late)|true|type-available|unordered|unparsed-(?:entity|text)?-?(?:public-id|uri|available|lines)?|uri-collection|xml-to-json|years?-from-(?:date(?:Time)?|duration)|zero-or-one)\b/ },
            {
              begin: /\blocal:/,
              end: /\(/,
              excludeEnd: true
            },
            {
              begin: /\bzip:/,
              end: /(?:zip-file|(?:xml|html|text|binary)-entry| (?:update-)?entries)\b/
            },
            {
              begin: /\b(?:util|db|functx|app|xdmp|xmldb):/,
              end: /\(/,
              excludeEnd: true
            }
          ]
        },
        {
          className: "string",
          variants: [
            {
              begin: /"/,
              end: /"/,
              contains: [
                {
                  begin: /""/,
                  relevance: 0
                }
              ]
            },
            {
              begin: /'/,
              end: /'/,
              contains: [
                {
                  begin: /''/,
                  relevance: 0
                }
              ]
            }
          ]
        },
        {
          className: "number",
          begin: /(\b0[0-7_]+)|(\b0x[0-9a-fA-F_]+)|(\b[1-9][0-9_]*(\.[0-9_]+)?)|[0_]\b/,
          relevance: 0
        },
        {
          className: "comment",
          begin: /\(:/,
          end: /:\)/,
          relevance: 10,
          contains: [
            {
              className: "doctag",
              begin: /@\w+/
            }
          ]
        },
        {
          className: "meta",
          begin: /%[\w\-:]+/
        },
        {
          className: "title",
          begin: /\bxquery version "[13]\.[01]"\s?(?:encoding ".+")?/,
          end: /;/
        },
        {
          beginKeywords: "element attribute comment document processing-instruction",
          end: /\{/,
          excludeEnd: true
        },
        {
          begin: /<([\w._:-]+)(\s+\S*=('|").*('|"))?>/,
          end: /(\/[\w._:-]+>)/,
          subLanguage: "xml",
          contains: [
            {
              begin: /\{/,
              end: /\}/,
              subLanguage: "xquery"
            },
            "self"
          ]
        }
      ]
    };
  }
  return Xs = t2, Xs;
}
var Zs, rm;
function WN() {
  if (rm)
    return Zs;
  rm = 1;
  function t2(e2) {
    const n = {
      className: "string",
      contains: [e2.BACKSLASH_ESCAPE],
      variants: [
        e2.inherit(e2.APOS_STRING_MODE, { illegal: null }),
        e2.inherit(e2.QUOTE_STRING_MODE, { illegal: null })
      ]
    }, i2 = e2.UNDERSCORE_TITLE_MODE, r2 = { variants: [
      e2.BINARY_NUMBER_MODE,
      e2.C_NUMBER_MODE
    ] }, a2 = (
      // classes and objects
      "namespace class interface use extends function return abstract final public protected private static deprecated throw try catch Exception echo empty isset instanceof unset let var new const self require if else elseif switch case default do while loop for continue break likely unlikely __LINE__ __FILE__ __DIR__ __FUNCTION__ __CLASS__ __TRAIT__ __METHOD__ __NAMESPACE__ array boolean float double integer object resource string char long unsigned bool int uint ulong uchar true false null undefined"
    );
    return {
      name: "Zephir",
      aliases: ["zep"],
      keywords: a2,
      contains: [
        e2.C_LINE_COMMENT_MODE,
        e2.COMMENT(
          /\/\*/,
          /\*\//,
          { contains: [
            {
              className: "doctag",
              begin: /@[A-Za-z]+/
            }
          ] }
        ),
        {
          className: "string",
          begin: /<<<['"]?\w+['"]?$/,
          end: /^\w+;/,
          contains: [e2.BACKSLASH_ESCAPE]
        },
        {
          // swallow composed identifiers to avoid parsing them as keywords
          begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/
        },
        {
          className: "function",
          beginKeywords: "function fn",
          end: /[;{]/,
          excludeEnd: true,
          illegal: /\$|\[|%/,
          contains: [
            i2,
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              keywords: a2,
              contains: [
                "self",
                e2.C_BLOCK_COMMENT_MODE,
                n,
                r2
              ]
            }
          ]
        },
        {
          className: "class",
          beginKeywords: "class interface",
          end: /\{/,
          excludeEnd: true,
          illegal: /[:($"]/,
          contains: [
            { beginKeywords: "extends implements" },
            i2
          ]
        },
        {
          beginKeywords: "namespace",
          end: /;/,
          illegal: /[.']/,
          contains: [i2]
        },
        {
          beginKeywords: "use",
          end: /;/,
          contains: [i2]
        },
        {
          begin: /=>/
          // No markup, just a relevance booster
        },
        n,
        r2
      ]
    };
  }
  return Zs = t2, Zs;
}
var Js, am;
function KN() {
  if (am)
    return Js;
  am = 1;
  var t2 = /* @__PURE__ */ fh();
  return t2.registerLanguage("1c", /* @__PURE__ */ Sh()), t2.registerLanguage("abnf", /* @__PURE__ */ bh()), t2.registerLanguage("accesslog", /* @__PURE__ */ Th()), t2.registerLanguage("actionscript", /* @__PURE__ */ hh()), t2.registerLanguage("ada", /* @__PURE__ */ Rh()), t2.registerLanguage("angelscript", /* @__PURE__ */ Ch()), t2.registerLanguage("apache", /* @__PURE__ */ Nh()), t2.registerLanguage("applescript", /* @__PURE__ */ vh()), t2.registerLanguage("arcade", /* @__PURE__ */ Oh()), t2.registerLanguage("arduino", /* @__PURE__ */ Ah()), t2.registerLanguage("armasm", /* @__PURE__ */ yh()), t2.registerLanguage("xml", /* @__PURE__ */ Ih()), t2.registerLanguage("asciidoc", /* @__PURE__ */ Dh()), t2.registerLanguage("aspectj", /* @__PURE__ */ xh()), t2.registerLanguage("autohotkey", /* @__PURE__ */ Lh()), t2.registerLanguage("autoit", /* @__PURE__ */ Mh()), t2.registerLanguage("avrasm", /* @__PURE__ */ wh()), t2.registerLanguage("awk", /* @__PURE__ */ kh()), t2.registerLanguage("axapta", /* @__PURE__ */ Ph()), t2.registerLanguage("bash", /* @__PURE__ */ Fh()), t2.registerLanguage("basic", /* @__PURE__ */ Uh()), t2.registerLanguage("bnf", /* @__PURE__ */ Bh()), t2.registerLanguage("brainfuck", /* @__PURE__ */ Gh()), t2.registerLanguage("c", /* @__PURE__ */ Yh()), t2.registerLanguage("cal", /* @__PURE__ */ qh()), t2.registerLanguage("capnproto", /* @__PURE__ */ Vh()), t2.registerLanguage("ceylon", /* @__PURE__ */ Hh()), t2.registerLanguage("clean", /* @__PURE__ */ zh()), t2.registerLanguage("clojure", /* @__PURE__ */ $h()), t2.registerLanguage("clojure-repl", /* @__PURE__ */ Wh()), t2.registerLanguage("cmake", /* @__PURE__ */ Kh()), t2.registerLanguage("coffeescript", /* @__PURE__ */ Qh()), t2.registerLanguage("coq", /* @__PURE__ */ Xh()), t2.registerLanguage("cos", /* @__PURE__ */ Zh()), t2.registerLanguage("cpp", /* @__PURE__ */ Jh()), t2.registerLanguage("crmsh", /* @__PURE__ */ jh()), t2.registerLanguage("crystal", /* @__PURE__ */ eR()), t2.registerLanguage("csharp", /* @__PURE__ */ tR()), t2.registerLanguage("csp", /* @__PURE__ */ nR()), t2.registerLanguage("css", /* @__PURE__ */ rR()), t2.registerLanguage("d", /* @__PURE__ */ aR()), t2.registerLanguage("markdown", /* @__PURE__ */ iR()), t2.registerLanguage("dart", /* @__PURE__ */ oR()), t2.registerLanguage("delphi", /* @__PURE__ */ sR()), t2.registerLanguage("diff", /* @__PURE__ */ lR()), t2.registerLanguage("django", /* @__PURE__ */ cR()), t2.registerLanguage("dns", /* @__PURE__ */ uR()), t2.registerLanguage("dockerfile", /* @__PURE__ */ _R()), t2.registerLanguage("dos", /* @__PURE__ */ dR()), t2.registerLanguage("dsconfig", /* @__PURE__ */ pR()), t2.registerLanguage("dts", /* @__PURE__ */ mR()), t2.registerLanguage("dust", /* @__PURE__ */ ER()), t2.registerLanguage("ebnf", /* @__PURE__ */ gR()), t2.registerLanguage("elixir", /* @__PURE__ */ fR()), t2.registerLanguage("elm", /* @__PURE__ */ SR()), t2.registerLanguage("ruby", /* @__PURE__ */ bR()), t2.registerLanguage("erb", /* @__PURE__ */ TR()), t2.registerLanguage("erlang-repl", /* @__PURE__ */ hR()), t2.registerLanguage("erlang", /* @__PURE__ */ RR()), t2.registerLanguage("excel", /* @__PURE__ */ CR()), t2.registerLanguage("fix", /* @__PURE__ */ NR()), t2.registerLanguage("flix", /* @__PURE__ */ vR()), t2.registerLanguage("fortran", /* @__PURE__ */ OR()), t2.registerLanguage("fsharp", /* @__PURE__ */ AR()), t2.registerLanguage("gams", /* @__PURE__ */ yR()), t2.registerLanguage("gauss", /* @__PURE__ */ IR()), t2.registerLanguage("gcode", /* @__PURE__ */ DR()), t2.registerLanguage("gherkin", /* @__PURE__ */ xR()), t2.registerLanguage("glsl", /* @__PURE__ */ LR()), t2.registerLanguage("gml", /* @__PURE__ */ MR()), t2.registerLanguage("go", /* @__PURE__ */ wR()), t2.registerLanguage("golo", /* @__PURE__ */ kR()), t2.registerLanguage("gradle", /* @__PURE__ */ PR()), t2.registerLanguage("graphql", /* @__PURE__ */ FR()), t2.registerLanguage("groovy", /* @__PURE__ */ UR()), t2.registerLanguage("haml", /* @__PURE__ */ BR()), t2.registerLanguage("handlebars", /* @__PURE__ */ GR()), t2.registerLanguage("haskell", /* @__PURE__ */ YR()), t2.registerLanguage("haxe", /* @__PURE__ */ qR()), t2.registerLanguage("hsp", /* @__PURE__ */ VR()), t2.registerLanguage("http", /* @__PURE__ */ HR()), t2.registerLanguage("hy", /* @__PURE__ */ zR()), t2.registerLanguage("inform7", /* @__PURE__ */ $R()), t2.registerLanguage("ini", /* @__PURE__ */ WR()), t2.registerLanguage("irpf90", /* @__PURE__ */ KR()), t2.registerLanguage("isbl", /* @__PURE__ */ QR()), t2.registerLanguage("java", /* @__PURE__ */ XR()), t2.registerLanguage("javascript", /* @__PURE__ */ ZR()), t2.registerLanguage("jboss-cli", /* @__PURE__ */ JR()), t2.registerLanguage("json", /* @__PURE__ */ jR()), t2.registerLanguage("julia", /* @__PURE__ */ eC()), t2.registerLanguage("julia-repl", /* @__PURE__ */ tC()), t2.registerLanguage("kotlin", /* @__PURE__ */ nC()), t2.registerLanguage("lasso", /* @__PURE__ */ rC()), t2.registerLanguage("latex", /* @__PURE__ */ aC()), t2.registerLanguage("ldif", /* @__PURE__ */ iC()), t2.registerLanguage("leaf", /* @__PURE__ */ oC()), t2.registerLanguage("less", /* @__PURE__ */ sC()), t2.registerLanguage("lisp", /* @__PURE__ */ lC()), t2.registerLanguage("livecodeserver", /* @__PURE__ */ cC()), t2.registerLanguage("livescript", /* @__PURE__ */ uC()), t2.registerLanguage("llvm", /* @__PURE__ */ _C()), t2.registerLanguage("lsl", /* @__PURE__ */ dC()), t2.registerLanguage("lua", /* @__PURE__ */ pC()), t2.registerLanguage("makefile", /* @__PURE__ */ mC()), t2.registerLanguage("mathematica", /* @__PURE__ */ EC()), t2.registerLanguage("matlab", /* @__PURE__ */ gC()), t2.registerLanguage("maxima", /* @__PURE__ */ fC()), t2.registerLanguage("mel", /* @__PURE__ */ SC()), t2.registerLanguage("mercury", /* @__PURE__ */ bC()), t2.registerLanguage("mipsasm", /* @__PURE__ */ TC()), t2.registerLanguage("mizar", /* @__PURE__ */ hC()), t2.registerLanguage("perl", /* @__PURE__ */ RC()), t2.registerLanguage("mojolicious", /* @__PURE__ */ CC()), t2.registerLanguage("monkey", /* @__PURE__ */ NC()), t2.registerLanguage("moonscript", /* @__PURE__ */ vC()), t2.registerLanguage("n1ql", /* @__PURE__ */ OC()), t2.registerLanguage("nestedtext", /* @__PURE__ */ AC()), t2.registerLanguage("nginx", /* @__PURE__ */ yC()), t2.registerLanguage("nim", /* @__PURE__ */ IC()), t2.registerLanguage("nix", /* @__PURE__ */ DC()), t2.registerLanguage("node-repl", /* @__PURE__ */ xC()), t2.registerLanguage("nsis", /* @__PURE__ */ LC()), t2.registerLanguage("objectivec", /* @__PURE__ */ MC()), t2.registerLanguage("ocaml", /* @__PURE__ */ wC()), t2.registerLanguage("openscad", /* @__PURE__ */ kC()), t2.registerLanguage("oxygene", /* @__PURE__ */ PC()), t2.registerLanguage("parser3", /* @__PURE__ */ FC()), t2.registerLanguage("pf", /* @__PURE__ */ UC()), t2.registerLanguage("pgsql", /* @__PURE__ */ BC()), t2.registerLanguage("php", /* @__PURE__ */ GC()), t2.registerLanguage("php-template", /* @__PURE__ */ YC()), t2.registerLanguage("plaintext", /* @__PURE__ */ qC()), t2.registerLanguage("pony", /* @__PURE__ */ VC()), t2.registerLanguage("powershell", /* @__PURE__ */ HC()), t2.registerLanguage("processing", /* @__PURE__ */ zC()), t2.registerLanguage("profile", /* @__PURE__ */ $C()), t2.registerLanguage("prolog", /* @__PURE__ */ WC()), t2.registerLanguage("properties", /* @__PURE__ */ KC()), t2.registerLanguage("protobuf", /* @__PURE__ */ QC()), t2.registerLanguage("puppet", /* @__PURE__ */ XC()), t2.registerLanguage("purebasic", /* @__PURE__ */ ZC()), t2.registerLanguage("python", /* @__PURE__ */ JC()), t2.registerLanguage("python-repl", /* @__PURE__ */ jC()), t2.registerLanguage("q", /* @__PURE__ */ eN()), t2.registerLanguage("qml", /* @__PURE__ */ tN()), t2.registerLanguage("r", /* @__PURE__ */ nN()), t2.registerLanguage("reasonml", /* @__PURE__ */ rN()), t2.registerLanguage("rib", /* @__PURE__ */ aN()), t2.registerLanguage("roboconf", /* @__PURE__ */ iN()), t2.registerLanguage("routeros", /* @__PURE__ */ oN()), t2.registerLanguage("rsl", /* @__PURE__ */ sN()), t2.registerLanguage("ruleslanguage", /* @__PURE__ */ lN()), t2.registerLanguage("rust", /* @__PURE__ */ cN()), t2.registerLanguage("sas", /* @__PURE__ */ uN()), t2.registerLanguage("scala", /* @__PURE__ */ _N()), t2.registerLanguage("scheme", /* @__PURE__ */ dN()), t2.registerLanguage("scilab", /* @__PURE__ */ pN()), t2.registerLanguage("scss", /* @__PURE__ */ mN()), t2.registerLanguage("shell", /* @__PURE__ */ EN()), t2.registerLanguage("smali", /* @__PURE__ */ gN()), t2.registerLanguage("smalltalk", /* @__PURE__ */ fN()), t2.registerLanguage("sml", /* @__PURE__ */ SN()), t2.registerLanguage("sqf", /* @__PURE__ */ bN()), t2.registerLanguage("sql", /* @__PURE__ */ TN()), t2.registerLanguage("stan", /* @__PURE__ */ hN()), t2.registerLanguage("stata", /* @__PURE__ */ RN()), t2.registerLanguage("step21", /* @__PURE__ */ CN()), t2.registerLanguage("stylus", /* @__PURE__ */ NN()), t2.registerLanguage("subunit", /* @__PURE__ */ vN()), t2.registerLanguage("swift", /* @__PURE__ */ ON()), t2.registerLanguage("taggerscript", /* @__PURE__ */ AN()), t2.registerLanguage("yaml", /* @__PURE__ */ yN()), t2.registerLanguage("tap", /* @__PURE__ */ IN()), t2.registerLanguage("tcl", /* @__PURE__ */ DN()), t2.registerLanguage("thrift", /* @__PURE__ */ xN()), t2.registerLanguage("tp", /* @__PURE__ */ LN()), t2.registerLanguage("twig", /* @__PURE__ */ MN()), t2.registerLanguage("typescript", /* @__PURE__ */ wN()), t2.registerLanguage("vala", /* @__PURE__ */ kN()), t2.registerLanguage("vbnet", /* @__PURE__ */ PN()), t2.registerLanguage("vbscript", /* @__PURE__ */ FN()), t2.registerLanguage("vbscript-html", /* @__PURE__ */ UN()), t2.registerLanguage("verilog", /* @__PURE__ */ BN()), t2.registerLanguage("vhdl", /* @__PURE__ */ GN()), t2.registerLanguage("vim", /* @__PURE__ */ YN()), t2.registerLanguage("wasm", /* @__PURE__ */ qN()), t2.registerLanguage("wren", /* @__PURE__ */ VN()), t2.registerLanguage("x86asm", /* @__PURE__ */ HN()), t2.registerLanguage("xl", /* @__PURE__ */ zN()), t2.registerLanguage("xquery", /* @__PURE__ */ $N()), t2.registerLanguage("zephir", /* @__PURE__ */ WN()), t2.HighlightJS = t2, t2.default = t2, Js = t2, Js;
}
var QN = /* @__PURE__ */ KN();
const XN = /* @__PURE__ */ E0(QN);
class ZN {
  constructor(e2, n) {
    Mn(this, "queue", []);
    Mn(this, "consuming", false);
    Mn(this, "timer", null);
    Mn(this, "doneTimer", null);
    this.onConsume = e2, this.callBack = n;
  }
  // 输出速度动态控制
  adjustSpeed() {
    const i2 = 2e3 / this.queue.length;
    return i2 > 200 ? 200 : i2;
  }
  // 添加字符串到队列
  add(e2) {
    e2 && (e2 = e2.replace(/\\n/g, `
`), this.queue.push(...e2.split("")));
  }
  // 消费
  consume() {
    if (this.queue.length > 0) {
      const e2 = this.queue.shift();
      e2 && this.onConsume(e2);
    }
  }
  // 消费下一个
  next() {
    this.consume(), this.timer = setTimeout(() => {
      this.consume(), this.consuming && this.next();
    }, this.adjustSpeed());
  }
  // 开始消费队列
  start() {
    this.consuming = true, this.next();
  }
  // 自动等打印完再结束消费队列，且有传回调函数的话执行回调函数
  done() {
    var e2;
    this.queue.length === 0 ? (clearTimeout(this.doneTimer), clearTimeout(this.timer), this.consuming = false, (e2 = this.callBack) == null || e2.call(this)) : this.doneTimer = setTimeout(() => {
      this.done();
    }, 1e3);
  }
}
const JN = /* @__PURE__ */ defineAsyncComponent(() => __vitePreload(() => import("./code-BoIKZXAb-ylVGVqg3.js"), true ? __vite__mapDeps([0,1]) : void 0, import.meta.url)), jN = /* @__PURE__ */ defineAsyncComponent(() => __vitePreload(() => import("./mermaid-j5R1o_wi-dCQhMK9F.js"), true ? __vite__mapDeps([2,3,1]) : void 0, import.meta.url).then((t2) => t2.bi)), ev = /* @__PURE__ */ defineAsyncComponent(() => __vitePreload(() => import("./mindmap-BtUtvkhq-GdS60v6X.js"), true ? __vite__mapDeps([4,3,5,6,7,8,1]) : void 0, import.meta.url)), Yt$1 = new gt$1({
  html: true,
  breaks: true,
  linkify: true,
  typographer: true
}).use(gh), Sr = /* @__PURE__ */ defineComponent({
  name: "XMdRenderer",
  props: {
    content: {
      type: String,
      required: true
    },
    streaming: {
      type: Boolean,
      default: false
    }
  },
  setup(t2) {
    const e2 = ref(""), n = ref(null), i2 = ref(false), r2 = () => {
      i2.value = window.matchMedia("(prefers-color-scheme: dark)").matches;
    };
    return onMounted(() => {
      r2(), window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", r2);
    }), onUnmounted(() => {
      n.value && (n.value.done(), n.value = null), window.matchMedia("(prefers-color-scheme: dark)").removeEventListener("change", r2);
    }), {
      displayContent: e2,
      typewriter: n,
      isDarkMode: i2
    };
  },
  watch: {
    content: {
      immediate: true,
      handler(t2, e2) {
        this.streaming ? (this.typewriter || (this.typewriter = new ZN((n) => {
          this.displayContent += n;
        })), this.typewriter.add(t2.replace(e2, "")), this.typewriter.start()) : this.displayContent = t2;
      }
    }
  },
  computed: {
    tokens() {
      return Yt$1.parse(this.streaming ? this.displayContent : this.content, {});
    }
  },
  methods: {
    renderTokens(t2, e2 = "") {
      const n = [], i2 = [], r2 = {
        paragraph_open: "p",
        bullet_list_open: "ul",
        ordered_list_open: "ol",
        list_item_open: "li",
        image: "img",
        link_open: "a",
        code_inline: "code",
        strong_open: "strong",
        em_open: "em",
        del_open: "del",
        blockquote_open: "blockquote",
        table_open: "table",
        thead_open: "thead",
        tbody_open: "tbody",
        tr_open: "tr",
        th_open: "th",
        td_open: "td",
        hr: "hr",
        fence: "pre",
        hardbreak: "br",
        inline: "span",
        text: "span",
        math_block: "div"
      };
      for (let a2 = 0; a2 < t2.length; a2++) {
        const s2 = t2[a2];
        if (s2) {
          if (s2.type === "link_open") {
            const o2 = [];
            let l2 = a2;
            for (; l2 < t2.length && (t2[l2].type === "link_open" && (t2[l2].attrs || (t2[l2].attrs = []), t2[l2].attrs.push(["target", "_blank"])), o2.push(t2[l2]), t2[l2].type !== "link_close"); )
              l2++;
            const u2 = Yt$1.renderer.render(o2, Yt$1.options, {}), _ = h$1("span", {
              key: `${e2}-link-${a2}`,
              innerHTML: u2
            });
            i2.length ? i2[i2.length - 1].children.push(_) : n.push(_), a2 = l2;
            continue;
          }
          if (s2.type === "fence") {
            const o2 = s2.info || "";
            if (o2 === "mermaid") {
              const l2 = h$1(jN, {
                key: `${e2}-mermaid-${a2}`,
                value: s2.content
              });
              i2.length ? i2[i2.length - 1].children.push(l2) : n.push(l2);
            } else if (o2 === "mindmap") {
              const l2 = h$1(ev, {
                key: `${e2}-mindmap-${a2}`,
                value: s2.content
              });
              i2.length ? i2[i2.length - 1].children.push(l2) : n.push(l2);
            } else {
              let l2 = s2.content;
              l2 = XN.highlightAuto(l2).value;
              const u2 = h$1(JN, {
                key: `${e2}-code-${a2}`,
                value: s2.content,
                html: l2,
                language: o2
              });
              i2.length ? i2[i2.length - 1].children.push(u2) : n.push(u2);
            }
            continue;
          }
          if (s2.type === "math_block") {
            const o2 = Yt$1.renderer.render([s2], Yt$1.options, {}), l2 = h$1("span", {
              key: `${e2}-math-block-${a2}`,
              innerHTML: o2
            });
            i2.length ? i2[i2.length - 1].children.push(l2) : n.push(l2);
            continue;
          }
          if (s2.type === "math_inline") {
            const o2 = Yt$1.renderer.render([s2], Yt$1.options, {}), l2 = h$1("span", {
              key: `${e2}-math-inline-${a2}`,
              innerHTML: o2
            });
            i2.length ? i2[i2.length - 1].children.push(l2) : n.push(l2);
            continue;
          }
          if (s2.type === "html_inline") {
            const o2 = Yt$1.renderer.render([s2], Yt$1.options, {}), l2 = h$1("span", {
              key: `${e2}-html-inline-${a2}`,
              innerHTML: o2
            });
            i2.length ? i2[i2.length - 1].children.push(l2) : n.push(l2);
            continue;
          }
          if (/_open$/.test(s2.type))
            i2.push({ token: s2, children: [] });
          else if (/_close$/.test(s2.type)) {
            const { token: o2, children: l2 } = i2.length && i2.pop();
            let u2 = (o2 == null ? void 0 : o2.tag) || r2[o2 == null ? void 0 : o2.type] || "div";
            (o2 == null ? void 0 : o2.type) === "heading_open" && o2.tag && (u2 = o2.tag);
            const _ = {};
            o2 != null && o2.attrs && o2.attrs.forEach(([f2, b]) => _[f2] = b);
            const d2 = h$1(u2, { key: `${e2}-${a2}`, attrs: _ }, l2);
            i2.length ? i2[i2.length - 1].children.push(d2) : n.push(d2);
          } else if (s2.type === "inline") {
            const o2 = this.renderTokens(s2.children || [], `${e2}-inline-${a2}`);
            i2.length ? i2[i2.length - 1].children.push(...o2) : n.push(...o2);
          } else if (s2.type === "text") {
            const o2 = s2.content;
            i2.length ? i2[i2.length - 1].children.push(o2) : n.push(o2);
          } else {
            const o2 = s2.tag || r2[s2.type] || "span", l2 = {};
            s2.attrs && s2.attrs.forEach(([_, d2]) => l2[_] = d2);
            const u2 = h$1(o2, { key: `${e2}-${a2}`, attrs: l2 }, s2.content || []);
            i2.length ? i2[i2.length - 1].children.push(u2) : n.push(u2);
          }
        }
      }
      return n;
    }
  },
  render() {
    return h$1("div", {
      class: ["markdown-body", { "dark-mode": this.isDarkMode }]
    }, this.renderTokens(this.tokens));
  }
}), tv = { class: "x-bubble" }, nv = { class: "x-bubble__content" }, rv = { class: "x-bubble__message" }, av = {
  key: 0,
  class: "x-bubble__reasoning"
}, iv = { class: "x-bubble__reasoning-title" }, ov = {
  key: 1,
  class: "x-bubble__loading"
}, sv = {
  name: "xBubbleAssistant"
}, lv = /* @__PURE__ */ Object.assign(sv, {
  props: {
    content: {
      type: String,
      default: ""
    },
    showAvatar: {
      type: Boolean,
      default: false
    },
    markdownOptions: {
      type: Object,
      default: () => ({})
    },
    // 添加思考过程相关属性
    reasoning: {
      type: String,
      default: ""
    },
    reasoningExpanded: {
      type: Boolean,
      default: false
    },
    alwaysShowMenu: {
      type: Boolean,
      default: false
    },
    // 添加流式输出相关属性
    streaming: {
      type: Boolean,
      default: false
    }
  },
  setup(t2, { expose: e2 }) {
    const i2 = ref(t2.reasoningExpanded);
    return onMounted(() => {
    }), e2({}), (r2, a2) => (openBlock(), createElementBlock("div", tv, [
      createBaseVNode("div", nv, [
        renderSlot(r2.$slots, "header", {}, void 0, true),
        createBaseVNode("div", rv, [
          t2.reasoning ? (openBlock(), createElementBlock("div", av, [
            createBaseVNode("div", {
              class: "x-bubble__reasoning-header",
              onClick: a2[0] || (a2[0] = (s2) => i2.value = !i2.value)
            }, [
              createVNode(At, { name: "think" }),
              createBaseVNode("div", iv, toDisplayString$1(t2.content ? r2.$hubx_t("hubx.bubble.completion_completed") : r2.$hubx_t("hubx.bubble.completion_thinking")), 1),
              createBaseVNode("span", {
                class: normalizeClass(["x-bubble__reasoning-arrow", [
                  i2.value ? "x-bubble__reasoning-arrow--expanded" : ""
                ]])
              }, "➤", 2)
            ]),
            createVNode(Transition, { name: "slide-fade" }, {
              default: withCtx(() => [
                withDirectives(createBaseVNode("div", null, [
                  createVNode(Sr, {
                    class: "x-bubble__reasoning-content",
                    content: t2.reasoning,
                    streaming: t2.streaming
                  }, null, 8, ["content", "streaming"])
                ], 512), [
                  [vShow, i2.value]
                ])
              ]),
              _: 1
            })
          ])) : createCommentVNode("", true),
          createVNode(Sr, {
            class: "x-bubble__markdown",
            content: t2.content,
            streaming: t2.streaming
          }, null, 8, ["content", "streaming"]),
          t2.streaming && !t2.content ? (openBlock(), createElementBlock("div", ov, a2[1] || (a2[1] = [
            createBaseVNode("div", { class: "x-bubble__loading-dot x-bubble__loading-dot--1" }, null, -1),
            createBaseVNode("div", { class: "x-bubble__loading-dot x-bubble__loading-dot--2" }, null, -1),
            createBaseVNode("div", { class: "x-bubble__loading-dot x-bubble__loading-dot--3" }, null, -1)
          ]))) : createCommentVNode("", true)
        ]),
        renderSlot(r2.$slots, "footer", {}, void 0, true),
        createBaseVNode("div", {
          class: normalizeClass(["x-bubble__menu", { "x-bubble__menu--hidden": !t2.alwaysShowMenu }])
        }, [
          renderSlot(r2.$slots, "menu", {}, void 0, true)
        ], 2)
      ])
    ]));
  }
}), im = /* @__PURE__ */ Rn(lv, [["__scopeId", "data-v-368e6f08"]]), cv = {
  install(t2) {
    t2.component(Uc.name, Uc), t2.component(Fc.name, Fc), t2.component(im.name, im);
  }
};
At.install = (t2) => {
  t2.component(At.name, At);
};
const uv = {
  install(t2) {
    t2.component(Sr.name, Sr);
  }
};
En.install = (t2) => {
  t2.component(En.name, En);
};
const _v = (t2) => {
  Dl.global.locale.value = t2;
}, dv = (t2) => {
  t2.use(At), t2.use(uv), t2.use(dr), t2.use(cv), t2.use(En), t2.config.globalProperties.$hubx_t = Dl.global.t;
}, Ev = {
  install: dv,
  setLang: _v
  // 导出设置语言的方法
};
const configProviderContextKey = Symbol();
const defaultNamespace = "el";
const statePrefix = "is-";
const _bem = (namespace, block, blockSuffix, element, modifier) => {
  let cls = `${namespace}-${block}`;
  if (blockSuffix) {
    cls += `-${blockSuffix}`;
  }
  if (element) {
    cls += `__${element}`;
  }
  if (modifier) {
    cls += `--${modifier}`;
  }
  return cls;
};
const namespaceContextKey = Symbol("namespaceContextKey");
const useGetDerivedNamespace = (namespaceOverrides) => {
  const derivedNamespace = namespaceOverrides || (getCurrentInstance() ? inject(namespaceContextKey, ref(defaultNamespace)) : ref(defaultNamespace));
  const namespace = computed(() => {
    return unref(derivedNamespace) || defaultNamespace;
  });
  return namespace;
};
const useNamespace = (block, namespaceOverrides) => {
  const namespace = useGetDerivedNamespace(namespaceOverrides);
  const b = (blockSuffix = "") => _bem(namespace.value, block, blockSuffix, "", "");
  const e2 = (element) => element ? _bem(namespace.value, block, "", element, "") : "";
  const m2 = (modifier) => modifier ? _bem(namespace.value, block, "", "", modifier) : "";
  const be2 = (blockSuffix, element) => blockSuffix && element ? _bem(namespace.value, block, blockSuffix, element, "") : "";
  const em2 = (element, modifier) => element && modifier ? _bem(namespace.value, block, "", element, modifier) : "";
  const bm2 = (blockSuffix, modifier) => blockSuffix && modifier ? _bem(namespace.value, block, blockSuffix, "", modifier) : "";
  const bem = (blockSuffix, element, modifier) => blockSuffix && element && modifier ? _bem(namespace.value, block, blockSuffix, element, modifier) : "";
  const is2 = (name, ...args) => {
    const state = args.length >= 1 ? args[0] : true;
    return name && state ? `${statePrefix}${name}` : "";
  };
  const cssVar = (object4) => {
    const styles = {};
    for (const key in object4) {
      if (object4[key]) {
        styles[`--${namespace.value}-${key}`] = object4[key];
      }
    }
    return styles;
  };
  const cssVarBlock = (object4) => {
    const styles = {};
    for (const key in object4) {
      if (object4[key]) {
        styles[`--${namespace.value}-${block}-${key}`] = object4[key];
      }
    }
    return styles;
  };
  const cssVarName = (name) => `--${namespace.value}-${name}`;
  const cssVarBlockName = (name) => `--${namespace.value}-${block}-${name}`;
  return {
    namespace,
    b,
    e: e2,
    m: m2,
    be: be2,
    em: em2,
    bm: bm2,
    bem,
    is: is2,
    cssVar,
    cssVarName,
    cssVarBlock,
    cssVarBlockName
  };
};
var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal || freeSelf || Function("return this")();
var Symbol$1 = root.Symbol;
var objectProto$c = Object.prototype;
var hasOwnProperty$b = objectProto$c.hasOwnProperty;
var nativeObjectToString$1 = objectProto$c.toString;
var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : void 0;
function getRawTag(value) {
  var isOwn = hasOwnProperty$b.call(value, symToStringTag$1), tag = value[symToStringTag$1];
  try {
    value[symToStringTag$1] = void 0;
    var unmasked = true;
  } catch (e2) {
  }
  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}
var objectProto$b = Object.prototype;
var nativeObjectToString = objectProto$b.toString;
function objectToString$1(value) {
  return nativeObjectToString.call(value);
}
var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : void 0;
function baseGetTag(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString$1(value);
}
function isObjectLike(value) {
  return value != null && typeof value == "object";
}
var symbolTag$2 = "[object Symbol]";
function isSymbol(value) {
  return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag$2;
}
function arrayMap(array4, iteratee) {
  var index = -1, length = array4 == null ? 0 : array4.length, result = Array(length);
  while (++index < length) {
    result[index] = iteratee(array4[index], index, array4);
  }
  return result;
}
var isArray$3 = Array.isArray;
var INFINITY$1 = 1 / 0;
var symbolProto$1 = Symbol$1 ? Symbol$1.prototype : void 0, symbolToString = symbolProto$1 ? symbolProto$1.toString : void 0;
function baseToString(value) {
  if (typeof value == "string") {
    return value;
  }
  if (isArray$3(value)) {
    return arrayMap(value, baseToString) + "";
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : "";
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY$1 ? "-0" : result;
}
function isObject$2(value) {
  var type4 = typeof value;
  return value != null && (type4 == "object" || type4 == "function");
}
function identity$1(value) {
  return value;
}
var asyncTag = "[object AsyncFunction]", funcTag$2 = "[object Function]", genTag$1 = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
function isFunction$2(value) {
  if (!isObject$2(value)) {
    return false;
  }
  var tag = baseGetTag(value);
  return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
}
var coreJsData = root["__core-js_shared__"];
var maskSrcKey = function() {
  var uid2 = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
  return uid2 ? "Symbol(src)_1." + uid2 : "";
}();
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var funcProto$1 = Function.prototype;
var funcToString$1 = funcProto$1.toString;
function toSource(func) {
  if (func != null) {
    try {
      return funcToString$1.call(func);
    } catch (e2) {
    }
    try {
      return func + "";
    } catch (e2) {
    }
  }
  return "";
}
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto = Function.prototype, objectProto$a = Object.prototype;
var funcToString = funcProto.toString;
var hasOwnProperty$a = objectProto$a.hasOwnProperty;
var reIsNative = RegExp(
  "^" + funcToString.call(hasOwnProperty$a).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
function baseIsNative(value) {
  if (!isObject$2(value) || isMasked(value)) {
    return false;
  }
  var pattern4 = isFunction$2(value) ? reIsNative : reIsHostCtor;
  return pattern4.test(toSource(value));
}
function getValue$1(object4, key) {
  return object4 == null ? void 0 : object4[key];
}
function getNative(object4, key) {
  var value = getValue$1(object4, key);
  return baseIsNative(value) ? value : void 0;
}
var WeakMap$1 = getNative(root, "WeakMap");
var objectCreate = Object.create;
var baseCreate = /* @__PURE__ */ function() {
  function object4() {
  }
  return function(proto) {
    if (!isObject$2(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object4.prototype = proto;
    var result = new object4();
    object4.prototype = void 0;
    return result;
  };
}();
function apply$1(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);
    case 1:
      return func.call(thisArg, args[0]);
    case 2:
      return func.call(thisArg, args[0], args[1]);
    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}
function copyArray(source, array4) {
  var index = -1, length = source.length;
  array4 || (array4 = Array(length));
  while (++index < length) {
    array4[index] = source[index];
  }
  return array4;
}
var HOT_COUNT = 800, HOT_SPAN = 16;
var nativeNow = Date.now;
function shortOut(func) {
  var count = 0, lastCalled = 0;
  return function() {
    var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(void 0, arguments);
  };
}
function constant(value) {
  return function() {
    return value;
  };
}
var defineProperty = function() {
  try {
    var func = getNative(Object, "defineProperty");
    func({}, "", {});
    return func;
  } catch (e2) {
  }
}();
var baseSetToString = !defineProperty ? identity$1 : function(func, string3) {
  return defineProperty(func, "toString", {
    "configurable": true,
    "enumerable": false,
    "value": constant(string3),
    "writable": true
  });
};
const baseSetToString$1 = baseSetToString;
var setToString = shortOut(baseSetToString$1);
function arrayEach(array4, iteratee) {
  var index = -1, length = array4 == null ? 0 : array4.length;
  while (++index < length) {
    if (iteratee(array4[index], index, array4) === false) {
      break;
    }
  }
  return array4;
}
var MAX_SAFE_INTEGER$1 = 9007199254740991;
var reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex(value, length) {
  var type4 = typeof value;
  length = length == null ? MAX_SAFE_INTEGER$1 : length;
  return !!length && (type4 == "number" || type4 != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
}
function baseAssignValue(object4, key, value) {
  if (key == "__proto__" && defineProperty) {
    defineProperty(object4, key, {
      "configurable": true,
      "enumerable": true,
      "value": value,
      "writable": true
    });
  } else {
    object4[key] = value;
  }
}
function eq(value, other) {
  return value === other || value !== value && other !== other;
}
var objectProto$9 = Object.prototype;
var hasOwnProperty$9 = objectProto$9.hasOwnProperty;
function assignValue(object4, key, value) {
  var objValue = object4[key];
  if (!(hasOwnProperty$9.call(object4, key) && eq(objValue, value)) || value === void 0 && !(key in object4)) {
    baseAssignValue(object4, key, value);
  }
}
function copyObject(source, props, object4, customizer) {
  var isNew = !object4;
  object4 || (object4 = {});
  var index = -1, length = props.length;
  while (++index < length) {
    var key = props[index];
    var newValue = customizer ? customizer(object4[key], source[key], key, object4, source) : void 0;
    if (newValue === void 0) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object4, key, newValue);
    } else {
      assignValue(object4, key, newValue);
    }
  }
  return object4;
}
var nativeMax = Math.max;
function overRest(func, start, transform2) {
  start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
  return function() {
    var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array4 = Array(length);
    while (++index < length) {
      array4[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform2(array4);
    return apply$1(func, this, otherArgs);
  };
}
var MAX_SAFE_INTEGER = 9007199254740991;
function isLength(value) {
  return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction$2(value);
}
var objectProto$8 = Object.prototype;
function isPrototype(value) {
  var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto$8;
  return value === proto;
}
function baseTimes(n, iteratee) {
  var index = -1, result = Array(n);
  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}
var argsTag$2 = "[object Arguments]";
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag$2;
}
var objectProto$7 = Object.prototype;
var hasOwnProperty$8 = objectProto$7.hasOwnProperty;
var propertyIsEnumerable$1 = objectProto$7.propertyIsEnumerable;
var isArguments = baseIsArguments(/* @__PURE__ */ function() {
  return arguments;
}()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty$8.call(value, "callee") && !propertyIsEnumerable$1.call(value, "callee");
};
function stubFalse() {
  return false;
}
var freeExports$2 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule$2 = freeExports$2 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;
var Buffer$2 = moduleExports$2 ? root.Buffer : void 0;
var nativeIsBuffer = Buffer$2 ? Buffer$2.isBuffer : void 0;
var isBuffer$1 = nativeIsBuffer || stubFalse;
var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag$2 = "[object Boolean]", dateTag$2 = "[object Date]", errorTag$1 = "[object Error]", funcTag$1 = "[object Function]", mapTag$4 = "[object Map]", numberTag$2 = "[object Number]", objectTag$2 = "[object Object]", regexpTag$2 = "[object RegExp]", setTag$4 = "[object Set]", stringTag$2 = "[object String]", weakMapTag$2 = "[object WeakMap]";
var arrayBufferTag$2 = "[object ArrayBuffer]", dataViewTag$3 = "[object DataView]", float32Tag$2 = "[object Float32Array]", float64Tag$2 = "[object Float64Array]", int8Tag$2 = "[object Int8Array]", int16Tag$2 = "[object Int16Array]", int32Tag$2 = "[object Int32Array]", uint8Tag$2 = "[object Uint8Array]", uint8ClampedTag$2 = "[object Uint8ClampedArray]", uint16Tag$2 = "[object Uint16Array]", uint32Tag$2 = "[object Uint32Array]";
var typedArrayTags = {};
typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
typedArrayTags[argsTag$1] = typedArrayTags[arrayTag$1] = typedArrayTags[arrayBufferTag$2] = typedArrayTags[boolTag$2] = typedArrayTags[dataViewTag$3] = typedArrayTags[dateTag$2] = typedArrayTags[errorTag$1] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$4] = typedArrayTags[numberTag$2] = typedArrayTags[objectTag$2] = typedArrayTags[regexpTag$2] = typedArrayTags[setTag$4] = typedArrayTags[stringTag$2] = typedArrayTags[weakMapTag$2] = false;
function baseIsTypedArray(value) {
  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}
var freeExports$1 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule$1 = freeExports$1 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
var freeProcess = moduleExports$1 && freeGlobal.process;
var nodeUtil = function() {
  try {
    var types2 = freeModule$1 && freeModule$1.require && freeModule$1.require("util").types;
    if (types2) {
      return types2;
    }
    return freeProcess && freeProcess.binding && freeProcess.binding("util");
  } catch (e2) {
  }
}();
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
var isTypedArray$1 = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
var objectProto$6 = Object.prototype;
var hasOwnProperty$7 = objectProto$6.hasOwnProperty;
function arrayLikeKeys(value, inherited) {
  var isArr = isArray$3(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer$1(value), isType = !isArr && !isArg && !isBuff && isTypedArray$1(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
  for (var key in value) {
    if ((inherited || hasOwnProperty$7.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
    isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}
function overArg(func, transform2) {
  return function(arg) {
    return func(transform2(arg));
  };
}
var nativeKeys = overArg(Object.keys, Object);
var objectProto$5 = Object.prototype;
var hasOwnProperty$6 = objectProto$5.hasOwnProperty;
function baseKeys(object4) {
  if (!isPrototype(object4)) {
    return nativeKeys(object4);
  }
  var result = [];
  for (var key in Object(object4)) {
    if (hasOwnProperty$6.call(object4, key) && key != "constructor") {
      result.push(key);
    }
  }
  return result;
}
function keys(object4) {
  return isArrayLike(object4) ? arrayLikeKeys(object4) : baseKeys(object4);
}
function nativeKeysIn(object4) {
  var result = [];
  if (object4 != null) {
    for (var key in Object(object4)) {
      result.push(key);
    }
  }
  return result;
}
var objectProto$4 = Object.prototype;
var hasOwnProperty$5 = objectProto$4.hasOwnProperty;
function baseKeysIn(object4) {
  if (!isObject$2(object4)) {
    return nativeKeysIn(object4);
  }
  var isProto = isPrototype(object4), result = [];
  for (var key in object4) {
    if (!(key == "constructor" && (isProto || !hasOwnProperty$5.call(object4, key)))) {
      result.push(key);
    }
  }
  return result;
}
function keysIn(object4) {
  return isArrayLike(object4) ? arrayLikeKeys(object4, true) : baseKeysIn(object4);
}
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
function isKey(value, object4) {
  if (isArray$3(value)) {
    return false;
  }
  var type4 = typeof value;
  if (type4 == "number" || type4 == "symbol" || type4 == "boolean" || value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object4 != null && value in Object(object4);
}
var nativeCreate = getNative(Object, "create");
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}
var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
var objectProto$3 = Object.prototype;
var hasOwnProperty$4 = objectProto$3.hasOwnProperty;
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED$1 ? void 0 : result;
  }
  return hasOwnProperty$4.call(data, key) ? data[key] : void 0;
}
var objectProto$2 = Object.prototype;
var hasOwnProperty$3 = objectProto$2.hasOwnProperty;
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== void 0 : hasOwnProperty$3.call(data, key);
}
var HASH_UNDEFINED = "__lodash_hash_undefined__";
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
  return this;
}
function Hash(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
Hash.prototype.clear = hashClear;
Hash.prototype["delete"] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}
function assocIndexOf(array4, key) {
  var length = array4.length;
  while (length--) {
    if (eq(array4[length][0], key)) {
      return length;
    }
  }
  return -1;
}
var arrayProto = Array.prototype;
var splice = arrayProto.splice;
function listCacheDelete(key) {
  var data = this.__data__, index = assocIndexOf(data, key);
  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}
function listCacheGet(key) {
  var data = this.__data__, index = assocIndexOf(data, key);
  return index < 0 ? void 0 : data[index][1];
}
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}
function listCacheSet(key, value) {
  var data = this.__data__, index = assocIndexOf(data, key);
  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}
function ListCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
ListCache.prototype.clear = listCacheClear;
ListCache.prototype["delete"] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
var Map$1 = getNative(root, "Map");
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash(),
    "map": new (Map$1 || ListCache)(),
    "string": new Hash()
  };
}
function isKeyable(value) {
  var type4 = typeof value;
  return type4 == "string" || type4 == "number" || type4 == "symbol" || type4 == "boolean" ? value !== "__proto__" : value === null;
}
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
function mapCacheDelete(key) {
  var result = getMapData(this, key)["delete"](key);
  this.size -= result ? 1 : 0;
  return result;
}
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}
function mapCacheSet(key, value) {
  var data = getMapData(this, key), size = data.size;
  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}
function MapCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype["delete"] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
var FUNC_ERROR_TEXT = "Expected a function";
function memoize(func, resolver) {
  if (typeof func != "function" || resolver != null && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache2 = memoized.cache;
    if (cache2.has(key)) {
      return cache2.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache2.set(key, result) || cache2;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache)();
  return memoized;
}
memoize.Cache = MapCache;
var MAX_MEMOIZE_SIZE = 500;
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache2.size === MAX_MEMOIZE_SIZE) {
      cache2.clear();
    }
    return key;
  });
  var cache2 = result.cache;
  return result;
}
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar = /\\(\\)?/g;
var stringToPath = memoizeCapped(function(string3) {
  var result = [];
  if (string3.charCodeAt(0) === 46) {
    result.push("");
  }
  string3.replace(rePropName, function(match, number5, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, "$1") : number5 || match);
  });
  return result;
});
function toString$1(value) {
  return value == null ? "" : baseToString(value);
}
function castPath(value, object4) {
  if (isArray$3(value)) {
    return value;
  }
  return isKey(value, object4) ? [value] : stringToPath(toString$1(value));
}
var INFINITY = 1 / 0;
function toKey(value) {
  if (typeof value == "string" || isSymbol(value)) {
    return value;
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY ? "-0" : result;
}
function baseGet(object4, path) {
  path = castPath(path, object4);
  var index = 0, length = path.length;
  while (object4 != null && index < length) {
    object4 = object4[toKey(path[index++])];
  }
  return index && index == length ? object4 : void 0;
}
function get(object4, path, defaultValue) {
  var result = object4 == null ? void 0 : baseGet(object4, path);
  return result === void 0 ? defaultValue : result;
}
function arrayPush(array4, values) {
  var index = -1, length = values.length, offset = array4.length;
  while (++index < length) {
    array4[offset + index] = values[index];
  }
  return array4;
}
var spreadableSymbol = Symbol$1 ? Symbol$1.isConcatSpreadable : void 0;
function isFlattenable(value) {
  return isArray$3(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
}
function baseFlatten(array4, depth, predicate, isStrict, result) {
  var index = -1, length = array4.length;
  predicate || (predicate = isFlattenable);
  result || (result = []);
  while (++index < length) {
    var value = array4[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}
function flatten(array4) {
  var length = array4 == null ? 0 : array4.length;
  return length ? baseFlatten(array4, 1) : [];
}
function flatRest(func) {
  return setToString(overRest(func, void 0, flatten), func + "");
}
var getPrototype = overArg(Object.getPrototypeOf, Object);
const getPrototype$1 = getPrototype;
function castArray() {
  if (!arguments.length) {
    return [];
  }
  var value = arguments[0];
  return isArray$3(value) ? value : [value];
}
function stackClear() {
  this.__data__ = new ListCache();
  this.size = 0;
}
function stackDelete(key) {
  var data = this.__data__, result = data["delete"](key);
  this.size = data.size;
  return result;
}
function stackGet(key) {
  return this.__data__.get(key);
}
function stackHas(key) {
  return this.__data__.has(key);
}
var LARGE_ARRAY_SIZE = 200;
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map$1 || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}
Stack.prototype.clear = stackClear;
Stack.prototype["delete"] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
function baseAssign(object4, source) {
  return object4 && copyObject(source, keys(source), object4);
}
function baseAssignIn(object4, source) {
  return object4 && copyObject(source, keysIn(source), object4);
}
var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
var moduleExports = freeModule && freeModule.exports === freeExports;
var Buffer$1 = moduleExports ? root.Buffer : void 0, allocUnsafe = Buffer$1 ? Buffer$1.allocUnsafe : void 0;
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
  buffer.copy(result);
  return result;
}
function arrayFilter(array4, predicate) {
  var index = -1, length = array4 == null ? 0 : array4.length, resIndex = 0, result = [];
  while (++index < length) {
    var value = array4[index];
    if (predicate(value, index, array4)) {
      result[resIndex++] = value;
    }
  }
  return result;
}
function stubArray() {
  return [];
}
var objectProto$1 = Object.prototype;
var propertyIsEnumerable = objectProto$1.propertyIsEnumerable;
var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
var getSymbols = !nativeGetSymbols$1 ? stubArray : function(object4) {
  if (object4 == null) {
    return [];
  }
  object4 = Object(object4);
  return arrayFilter(nativeGetSymbols$1(object4), function(symbol) {
    return propertyIsEnumerable.call(object4, symbol);
  });
};
function copySymbols(source, object4) {
  return copyObject(source, getSymbols(source), object4);
}
var nativeGetSymbols = Object.getOwnPropertySymbols;
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object4) {
  var result = [];
  while (object4) {
    arrayPush(result, getSymbols(object4));
    object4 = getPrototype$1(object4);
  }
  return result;
};
function copySymbolsIn(source, object4) {
  return copyObject(source, getSymbolsIn(source), object4);
}
function baseGetAllKeys(object4, keysFunc, symbolsFunc) {
  var result = keysFunc(object4);
  return isArray$3(object4) ? result : arrayPush(result, symbolsFunc(object4));
}
function getAllKeys(object4) {
  return baseGetAllKeys(object4, keys, getSymbols);
}
function getAllKeysIn(object4) {
  return baseGetAllKeys(object4, keysIn, getSymbolsIn);
}
var DataView = getNative(root, "DataView");
var Promise$1 = getNative(root, "Promise");
var Set$1 = getNative(root, "Set");
var mapTag$3 = "[object Map]", objectTag$1 = "[object Object]", promiseTag = "[object Promise]", setTag$3 = "[object Set]", weakMapTag$1 = "[object WeakMap]";
var dataViewTag$2 = "[object DataView]";
var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map$1), promiseCtorString = toSource(Promise$1), setCtorString = toSource(Set$1), weakMapCtorString = toSource(WeakMap$1);
var getTag = baseGetTag;
if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag$2 || Map$1 && getTag(new Map$1()) != mapTag$3 || Promise$1 && getTag(Promise$1.resolve()) != promiseTag || Set$1 && getTag(new Set$1()) != setTag$3 || WeakMap$1 && getTag(new WeakMap$1()) != weakMapTag$1) {
  getTag = function(value) {
    var result = baseGetTag(value), Ctor = result == objectTag$1 ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag$2;
        case mapCtorString:
          return mapTag$3;
        case promiseCtorString:
          return promiseTag;
        case setCtorString:
          return setTag$3;
        case weakMapCtorString:
          return weakMapTag$1;
      }
    }
    return result;
  };
}
const getTag$1 = getTag;
var objectProto = Object.prototype;
var hasOwnProperty$2 = objectProto.hasOwnProperty;
function initCloneArray(array4) {
  var length = array4.length, result = new array4.constructor(length);
  if (length && typeof array4[0] == "string" && hasOwnProperty$2.call(array4, "index")) {
    result.index = array4.index;
    result.input = array4.input;
  }
  return result;
}
var Uint8Array$1 = root.Uint8Array;
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
  return result;
}
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
var reFlags = /\w*$/;
function cloneRegExp(regexp4) {
  var result = new regexp4.constructor(regexp4.source, reFlags.exec(regexp4));
  result.lastIndex = regexp4.lastIndex;
  return result;
}
var symbolProto = Symbol$1 ? Symbol$1.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
var boolTag$1 = "[object Boolean]", dateTag$1 = "[object Date]", mapTag$2 = "[object Map]", numberTag$1 = "[object Number]", regexpTag$1 = "[object RegExp]", setTag$2 = "[object Set]", stringTag$1 = "[object String]", symbolTag$1 = "[object Symbol]";
var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag$1 = "[object Float32Array]", float64Tag$1 = "[object Float64Array]", int8Tag$1 = "[object Int8Array]", int16Tag$1 = "[object Int16Array]", int32Tag$1 = "[object Int32Array]", uint8Tag$1 = "[object Uint8Array]", uint8ClampedTag$1 = "[object Uint8ClampedArray]", uint16Tag$1 = "[object Uint16Array]", uint32Tag$1 = "[object Uint32Array]";
function initCloneByTag(object4, tag, isDeep) {
  var Ctor = object4.constructor;
  switch (tag) {
    case arrayBufferTag$1:
      return cloneArrayBuffer(object4);
    case boolTag$1:
    case dateTag$1:
      return new Ctor(+object4);
    case dataViewTag$1:
      return cloneDataView(object4, isDeep);
    case float32Tag$1:
    case float64Tag$1:
    case int8Tag$1:
    case int16Tag$1:
    case int32Tag$1:
    case uint8Tag$1:
    case uint8ClampedTag$1:
    case uint16Tag$1:
    case uint32Tag$1:
      return cloneTypedArray(object4, isDeep);
    case mapTag$2:
      return new Ctor();
    case numberTag$1:
    case stringTag$1:
      return new Ctor(object4);
    case regexpTag$1:
      return cloneRegExp(object4);
    case setTag$2:
      return new Ctor();
    case symbolTag$1:
      return cloneSymbol(object4);
  }
}
function initCloneObject(object4) {
  return typeof object4.constructor == "function" && !isPrototype(object4) ? baseCreate(getPrototype$1(object4)) : {};
}
var mapTag$1 = "[object Map]";
function baseIsMap(value) {
  return isObjectLike(value) && getTag$1(value) == mapTag$1;
}
var nodeIsMap = nodeUtil && nodeUtil.isMap;
var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
var setTag$1 = "[object Set]";
function baseIsSet(value) {
  return isObjectLike(value) && getTag$1(value) == setTag$1;
}
var nodeIsSet = nodeUtil && nodeUtil.isSet;
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG$1 = 4;
var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", weakMapTag = "[object WeakMap]";
var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
function baseClone(value, bitmask, customizer, key, object4, stack2) {
  var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG$1;
  if (customizer) {
    result = object4 ? customizer(value, key, object4, stack2) : customizer(value);
  }
  if (result !== void 0) {
    return result;
  }
  if (!isObject$2(value)) {
    return value;
  }
  var isArr = isArray$3(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag$1(value), isFunc = tag == funcTag || tag == genTag;
    if (isBuffer$1(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || isFunc && !object4) {
      result = isFlat || isFunc ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object4 ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  stack2 || (stack2 = new Stack());
  var stacked = stack2.get(value);
  if (stacked) {
    return stacked;
  }
  stack2.set(value, result);
  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack2));
    });
  } else if (isMap(value)) {
    value.forEach(function(subValue, key2) {
      result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack2));
    });
  }
  var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
  var props = isArr ? void 0 : keysFunc(value);
  arrayEach(props || value, function(subValue, key2) {
    if (props) {
      key2 = subValue;
      subValue = value[key2];
    }
    assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack2));
  });
  return result;
}
var CLONE_SYMBOLS_FLAG = 4;
function clone(value) {
  return baseClone(value, CLONE_SYMBOLS_FLAG);
}
function baseHasIn(object4, key) {
  return object4 != null && key in Object(object4);
}
function hasPath(object4, path, hasFunc) {
  path = castPath(path, object4);
  var index = -1, length = path.length, result = false;
  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object4 != null && hasFunc(object4, key))) {
      break;
    }
    object4 = object4[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object4 == null ? 0 : object4.length;
  return !!length && isLength(length) && isIndex(key, length) && (isArray$3(object4) || isArguments(object4));
}
function hasIn(object4, path) {
  return object4 != null && hasPath(object4, path, baseHasIn);
}
function fromPairs(pairs) {
  var index = -1, length = pairs == null ? 0 : pairs.length, result = {};
  while (++index < length) {
    var pair = pairs[index];
    result[pair[0]] = pair[1];
  }
  return result;
}
function isNil(value) {
  return value == null;
}
function isUndefined$2(value) {
  return value === void 0;
}
function baseSet(object4, path, value, customizer) {
  if (!isObject$2(object4)) {
    return object4;
  }
  path = castPath(path, object4);
  var index = -1, length = path.length, lastIndex = length - 1, nested = object4;
  while (nested != null && ++index < length) {
    var key = toKey(path[index]), newValue = value;
    if (key === "__proto__" || key === "constructor" || key === "prototype") {
      return object4;
    }
    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : void 0;
      if (newValue === void 0) {
        newValue = isObject$2(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object4;
}
function basePickBy(object4, paths, predicate) {
  var index = -1, length = paths.length, result = {};
  while (++index < length) {
    var path = paths[index], value = baseGet(object4, path);
    if (predicate(value, path)) {
      baseSet(result, castPath(path, object4), value);
    }
  }
  return result;
}
function basePick(object4, paths) {
  return basePickBy(object4, paths, function(value, path) {
    return hasIn(object4, path);
  });
}
var pick = flatRest(function(object4, paths) {
  return object4 == null ? {} : basePick(object4, paths);
});
function set(object4, path, value) {
  return object4 == null ? object4 : baseSet(object4, path, value);
}
const isUndefined$1 = (val) => val === void 0;
const isBoolean$2 = (val) => typeof val === "boolean";
const isNumber$2 = (val) => typeof val === "number";
const isElement = (e2) => {
  if (typeof Element === "undefined")
    return false;
  return e2 instanceof Element;
};
const isPropAbsent = (prop) => isNil(prop);
const isStringNumber = (val) => {
  if (!isString$3(val)) {
    return false;
  }
  return !Number.isNaN(Number(val));
};
var __defProp$9 = Object.defineProperty;
var __defProps$6 = Object.defineProperties;
var __getOwnPropDescs$6 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$b = Object.getOwnPropertySymbols;
var __hasOwnProp$b = Object.prototype.hasOwnProperty;
var __propIsEnum$b = Object.prototype.propertyIsEnumerable;
var __defNormalProp$9 = (obj, key, value) => key in obj ? __defProp$9(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$9 = (a2, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$b.call(b, prop))
      __defNormalProp$9(a2, prop, b[prop]);
  if (__getOwnPropSymbols$b)
    for (var prop of __getOwnPropSymbols$b(b)) {
      if (__propIsEnum$b.call(b, prop))
        __defNormalProp$9(a2, prop, b[prop]);
    }
  return a2;
};
var __spreadProps$6 = (a2, b) => __defProps$6(a2, __getOwnPropDescs$6(b));
function computedEager(fn2, options) {
  var _a2;
  const result = shallowRef();
  watchEffect(() => {
    result.value = fn2();
  }, __spreadProps$6(__spreadValues$9({}, options), {
    flush: (_a2 = options == null ? void 0 : options.flush) != null ? _a2 : "sync"
  }));
  return readonly(result);
}
var _a;
const isClient = typeof window !== "undefined";
const isString$2 = (val) => typeof val === "string";
const noop$2 = () => {
};
const isIOS = isClient && ((_a = window == null ? void 0 : window.navigator) == null ? void 0 : _a.userAgent) && /iP(ad|hone|od)/.test(window.navigator.userAgent);
function resolveUnref(r2) {
  return typeof r2 === "function" ? r2() : unref(r2);
}
function createFilterWrapper(filter2, fn2) {
  function wrapper(...args) {
    return new Promise((resolve2, reject) => {
      Promise.resolve(filter2(() => fn2.apply(this, args), { fn: fn2, thisArg: this, args })).then(resolve2).catch(reject);
    });
  }
  return wrapper;
}
function debounceFilter(ms2, options = {}) {
  let timer;
  let maxTimer;
  let lastRejector = noop$2;
  const _clearTimeout = (timer2) => {
    clearTimeout(timer2);
    lastRejector();
    lastRejector = noop$2;
  };
  const filter2 = (invoke) => {
    const duration = resolveUnref(ms2);
    const maxDuration = resolveUnref(options.maxWait);
    if (timer)
      _clearTimeout(timer);
    if (duration <= 0 || maxDuration !== void 0 && maxDuration <= 0) {
      if (maxTimer) {
        _clearTimeout(maxTimer);
        maxTimer = null;
      }
      return Promise.resolve(invoke());
    }
    return new Promise((resolve2, reject) => {
      lastRejector = options.rejectOnCancel ? reject : resolve2;
      if (maxDuration && !maxTimer) {
        maxTimer = setTimeout(() => {
          if (timer)
            _clearTimeout(timer);
          maxTimer = null;
          resolve2(invoke());
        }, maxDuration);
      }
      timer = setTimeout(() => {
        if (maxTimer)
          _clearTimeout(maxTimer);
        maxTimer = null;
        resolve2(invoke());
      }, duration);
    });
  };
  return filter2;
}
function throttleFilter(ms2, trailing = true, leading = true, rejectOnCancel = false) {
  let lastExec = 0;
  let timer;
  let isLeading = true;
  let lastRejector = noop$2;
  let lastValue;
  const clear = () => {
    if (timer) {
      clearTimeout(timer);
      timer = void 0;
      lastRejector();
      lastRejector = noop$2;
    }
  };
  const filter2 = (_invoke) => {
    const duration = resolveUnref(ms2);
    const elapsed = Date.now() - lastExec;
    const invoke = () => {
      return lastValue = _invoke();
    };
    clear();
    if (duration <= 0) {
      lastExec = Date.now();
      return invoke();
    }
    if (elapsed > duration && (leading || !isLeading)) {
      lastExec = Date.now();
      invoke();
    } else if (trailing) {
      lastValue = new Promise((resolve2, reject) => {
        lastRejector = rejectOnCancel ? reject : resolve2;
        timer = setTimeout(() => {
          lastExec = Date.now();
          isLeading = true;
          resolve2(invoke());
          clear();
        }, Math.max(0, duration - elapsed));
      });
    }
    if (!leading && !timer)
      timer = setTimeout(() => isLeading = true, duration);
    isLeading = false;
    return lastValue;
  };
  return filter2;
}
function identity(arg) {
  return arg;
}
function tryOnScopeDispose(fn2) {
  if (getCurrentScope()) {
    onScopeDispose(fn2);
    return true;
  }
  return false;
}
function useDebounceFn(fn2, ms2 = 200, options = {}) {
  return createFilterWrapper(debounceFilter(ms2, options), fn2);
}
function refDebounced(value, ms2 = 200, options = {}) {
  const debounced = ref(value.value);
  const updater = useDebounceFn(() => {
    debounced.value = value.value;
  }, ms2, options);
  watch(value, () => updater());
  return debounced;
}
function useThrottleFn(fn2, ms2 = 200, trailing = false, leading = true, rejectOnCancel = false) {
  return createFilterWrapper(throttleFilter(ms2, trailing, leading, rejectOnCancel), fn2);
}
function tryOnMounted(fn2, sync = true) {
  if (getCurrentInstance())
    onMounted(fn2);
  else if (sync)
    fn2();
  else
    nextTick(fn2);
}
function useTimeoutFn(cb2, interval, options = {}) {
  const {
    immediate = true
  } = options;
  const isPending = ref(false);
  let timer = null;
  function clear() {
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
  }
  function stop() {
    isPending.value = false;
    clear();
  }
  function start(...args) {
    clear();
    isPending.value = true;
    timer = setTimeout(() => {
      isPending.value = false;
      timer = null;
      cb2(...args);
    }, resolveUnref(interval));
  }
  if (immediate) {
    isPending.value = true;
    if (isClient)
      start();
  }
  tryOnScopeDispose(stop);
  return {
    isPending: readonly(isPending),
    start,
    stop
  };
}
function unrefElement(elRef) {
  var _a2;
  const plain = resolveUnref(elRef);
  return (_a2 = plain == null ? void 0 : plain.$el) != null ? _a2 : plain;
}
const defaultWindow = isClient ? window : void 0;
const defaultDocument = isClient ? window.document : void 0;
function useEventListener(...args) {
  let target;
  let events;
  let listeners;
  let options;
  if (isString$2(args[0]) || Array.isArray(args[0])) {
    [events, listeners, options] = args;
    target = defaultWindow;
  } else {
    [target, events, listeners, options] = args;
  }
  if (!target)
    return noop$2;
  if (!Array.isArray(events))
    events = [events];
  if (!Array.isArray(listeners))
    listeners = [listeners];
  const cleanups = [];
  const cleanup = () => {
    cleanups.forEach((fn2) => fn2());
    cleanups.length = 0;
  };
  const register2 = (el2, event, listener, options2) => {
    el2.addEventListener(event, listener, options2);
    return () => el2.removeEventListener(event, listener, options2);
  };
  const stopWatch = watch(() => [unrefElement(target), resolveUnref(options)], ([el2, options2]) => {
    cleanup();
    if (!el2)
      return;
    cleanups.push(...events.flatMap((event) => {
      return listeners.map((listener) => register2(el2, event, listener, options2));
    }));
  }, { immediate: true, flush: "post" });
  const stop = () => {
    stopWatch();
    cleanup();
  };
  tryOnScopeDispose(stop);
  return stop;
}
let _iOSWorkaround = false;
function onClickOutside(target, handler2, options = {}) {
  const { window: window2 = defaultWindow, ignore = [], capture = true, detectIframe = false } = options;
  if (!window2)
    return;
  if (isIOS && !_iOSWorkaround) {
    _iOSWorkaround = true;
    Array.from(window2.document.body.children).forEach((el2) => el2.addEventListener("click", noop$2));
  }
  let shouldListen = true;
  const shouldIgnore = (event) => {
    return ignore.some((target2) => {
      if (typeof target2 === "string") {
        return Array.from(window2.document.querySelectorAll(target2)).some((el2) => el2 === event.target || event.composedPath().includes(el2));
      } else {
        const el2 = unrefElement(target2);
        return el2 && (event.target === el2 || event.composedPath().includes(el2));
      }
    });
  };
  const listener = (event) => {
    const el2 = unrefElement(target);
    if (!el2 || el2 === event.target || event.composedPath().includes(el2))
      return;
    if (event.detail === 0)
      shouldListen = !shouldIgnore(event);
    if (!shouldListen) {
      shouldListen = true;
      return;
    }
    handler2(event);
  };
  const cleanup = [
    useEventListener(window2, "click", listener, { passive: true, capture }),
    useEventListener(window2, "pointerdown", (e2) => {
      const el2 = unrefElement(target);
      if (el2)
        shouldListen = !e2.composedPath().includes(el2) && !shouldIgnore(e2);
    }, { passive: true }),
    detectIframe && useEventListener(window2, "blur", (event) => {
      var _a2;
      const el2 = unrefElement(target);
      if (((_a2 = window2.document.activeElement) == null ? void 0 : _a2.tagName) === "IFRAME" && !(el2 == null ? void 0 : el2.contains(window2.document.activeElement)))
        handler2(event);
    })
  ].filter(Boolean);
  const stop = () => cleanup.forEach((fn2) => fn2());
  return stop;
}
function useSupported(callback, sync = false) {
  const isSupported = ref();
  const update = () => isSupported.value = Boolean(callback());
  update();
  tryOnMounted(update, sync);
  return isSupported;
}
const _global$1 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
const globalKey = "__vueuse_ssr_handlers__";
_global$1[globalKey] = _global$1[globalKey] || {};
function useDocumentVisibility({ document: document2 = defaultDocument } = {}) {
  if (!document2)
    return ref("visible");
  const visibility = ref(document2.visibilityState);
  useEventListener(document2, "visibilitychange", () => {
    visibility.value = document2.visibilityState;
  });
  return visibility;
}
var __getOwnPropSymbols$g = Object.getOwnPropertySymbols;
var __hasOwnProp$g = Object.prototype.hasOwnProperty;
var __propIsEnum$g = Object.prototype.propertyIsEnumerable;
var __objRest$2 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$g.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$g)
    for (var prop of __getOwnPropSymbols$g(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$g.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function useResizeObserver(target, callback, options = {}) {
  const _a2 = options, { window: window2 = defaultWindow } = _a2, observerOptions = __objRest$2(_a2, ["window"]);
  let observer;
  const isSupported = useSupported(() => window2 && "ResizeObserver" in window2);
  const cleanup = () => {
    if (observer) {
      observer.disconnect();
      observer = void 0;
    }
  };
  const stopWatch = watch(() => unrefElement(target), (el2) => {
    cleanup();
    if (isSupported.value && window2 && el2) {
      observer = new ResizeObserver(callback);
      observer.observe(el2, observerOptions);
    }
  }, { immediate: true, flush: "post" });
  const stop = () => {
    cleanup();
    stopWatch();
  };
  tryOnScopeDispose(stop);
  return {
    isSupported,
    stop
  };
}
var __getOwnPropSymbols$8 = Object.getOwnPropertySymbols;
var __hasOwnProp$8 = Object.prototype.hasOwnProperty;
var __propIsEnum$8 = Object.prototype.propertyIsEnumerable;
var __objRest$1 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$8.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$8)
    for (var prop of __getOwnPropSymbols$8(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$8.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function useMutationObserver(target, callback, options = {}) {
  const _a2 = options, { window: window2 = defaultWindow } = _a2, mutationOptions = __objRest$1(_a2, ["window"]);
  let observer;
  const isSupported = useSupported(() => window2 && "MutationObserver" in window2);
  const cleanup = () => {
    if (observer) {
      observer.disconnect();
      observer = void 0;
    }
  };
  const stopWatch = watch(() => unrefElement(target), (el2) => {
    cleanup();
    if (isSupported.value && window2 && el2) {
      observer = new MutationObserver(callback);
      observer.observe(el2, mutationOptions);
    }
  }, { immediate: true });
  const stop = () => {
    cleanup();
    stopWatch();
  };
  tryOnScopeDispose(stop);
  return {
    isSupported,
    stop
  };
}
var SwipeDirection;
(function(SwipeDirection2) {
  SwipeDirection2["UP"] = "UP";
  SwipeDirection2["RIGHT"] = "RIGHT";
  SwipeDirection2["DOWN"] = "DOWN";
  SwipeDirection2["LEFT"] = "LEFT";
  SwipeDirection2["NONE"] = "NONE";
})(SwipeDirection || (SwipeDirection = {}));
var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a2, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a2, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a2, prop, b[prop]);
    }
  return a2;
};
const _TransitionPresets = {
  easeInSine: [0.12, 0, 0.39, 0],
  easeOutSine: [0.61, 1, 0.88, 1],
  easeInOutSine: [0.37, 0, 0.63, 1],
  easeInQuad: [0.11, 0, 0.5, 0],
  easeOutQuad: [0.5, 1, 0.89, 1],
  easeInOutQuad: [0.45, 0, 0.55, 1],
  easeInCubic: [0.32, 0, 0.67, 0],
  easeOutCubic: [0.33, 1, 0.68, 1],
  easeInOutCubic: [0.65, 0, 0.35, 1],
  easeInQuart: [0.5, 0, 0.75, 0],
  easeOutQuart: [0.25, 1, 0.5, 1],
  easeInOutQuart: [0.76, 0, 0.24, 1],
  easeInQuint: [0.64, 0, 0.78, 0],
  easeOutQuint: [0.22, 1, 0.36, 1],
  easeInOutQuint: [0.83, 0, 0.17, 1],
  easeInExpo: [0.7, 0, 0.84, 0],
  easeOutExpo: [0.16, 1, 0.3, 1],
  easeInOutExpo: [0.87, 0, 0.13, 1],
  easeInCirc: [0.55, 0, 1, 0.45],
  easeOutCirc: [0, 0.55, 0.45, 1],
  easeInOutCirc: [0.85, 0, 0.15, 1],
  easeInBack: [0.36, 0, 0.66, -0.56],
  easeOutBack: [0.34, 1.56, 0.64, 1],
  easeInOutBack: [0.68, -0.6, 0.32, 1.6]
};
__spreadValues({
  linear: identity
}, _TransitionPresets);
function useWindowFocus({ window: window2 = defaultWindow } = {}) {
  if (!window2)
    return ref(false);
  const focused = ref(window2.document.hasFocus());
  useEventListener(window2, "blur", () => {
    focused.value = false;
  });
  useEventListener(window2, "focus", () => {
    focused.value = true;
  });
  return focused;
}
class ElementPlusError extends Error {
  constructor(m2) {
    super(m2);
    this.name = "ElementPlusError";
  }
}
function throwError(scope, m2) {
  throw new ElementPlusError(`[${scope}] ${m2}`);
}
function debugWarn(scope, message2) {
}
const initial = {
  current: 0
};
const zIndex = ref(0);
const defaultInitialZIndex = 2e3;
const ZINDEX_INJECTION_KEY = Symbol("elZIndexContextKey");
const zIndexContextKey = Symbol("zIndexContextKey");
const useZIndex = (zIndexOverrides) => {
  const increasingInjection = getCurrentInstance() ? inject(ZINDEX_INJECTION_KEY, initial) : initial;
  const zIndexInjection = zIndexOverrides || (getCurrentInstance() ? inject(zIndexContextKey, void 0) : void 0);
  const initialZIndex = computed(() => {
    const zIndexFromInjection = unref(zIndexInjection);
    return isNumber$2(zIndexFromInjection) ? zIndexFromInjection : defaultInitialZIndex;
  });
  const currentZIndex = computed(() => initialZIndex.value + zIndex.value);
  const nextZIndex = () => {
    increasingInjection.current++;
    zIndex.value = increasingInjection.current;
    return currentZIndex.value;
  };
  if (!isClient && !inject(ZINDEX_INJECTION_KEY))
    ;
  return {
    initialZIndex,
    currentZIndex,
    nextZIndex
  };
};
var English = {
  name: "en",
  el: {
    breadcrumb: {
      label: "Breadcrumb"
    },
    colorpicker: {
      confirm: "OK",
      clear: "Clear",
      defaultLabel: "color picker",
      description: "current color is {color}. press enter to select a new color.",
      alphaLabel: "pick alpha value"
    },
    datepicker: {
      now: "Now",
      today: "Today",
      cancel: "Cancel",
      clear: "Clear",
      confirm: "OK",
      dateTablePrompt: "Use the arrow keys and enter to select the day of the month",
      monthTablePrompt: "Use the arrow keys and enter to select the month",
      yearTablePrompt: "Use the arrow keys and enter to select the year",
      selectedDate: "Selected date",
      selectDate: "Select date",
      selectTime: "Select time",
      startDate: "Start Date",
      startTime: "Start Time",
      endDate: "End Date",
      endTime: "End Time",
      prevYear: "Previous Year",
      nextYear: "Next Year",
      prevMonth: "Previous Month",
      nextMonth: "Next Month",
      year: "",
      month1: "January",
      month2: "February",
      month3: "March",
      month4: "April",
      month5: "May",
      month6: "June",
      month7: "July",
      month8: "August",
      month9: "September",
      month10: "October",
      month11: "November",
      month12: "December",
      week: "week",
      weeks: {
        sun: "Sun",
        mon: "Mon",
        tue: "Tue",
        wed: "Wed",
        thu: "Thu",
        fri: "Fri",
        sat: "Sat"
      },
      weeksFull: {
        sun: "Sunday",
        mon: "Monday",
        tue: "Tuesday",
        wed: "Wednesday",
        thu: "Thursday",
        fri: "Friday",
        sat: "Saturday"
      },
      months: {
        jan: "Jan",
        feb: "Feb",
        mar: "Mar",
        apr: "Apr",
        may: "May",
        jun: "Jun",
        jul: "Jul",
        aug: "Aug",
        sep: "Sep",
        oct: "Oct",
        nov: "Nov",
        dec: "Dec"
      }
    },
    inputNumber: {
      decrease: "decrease number",
      increase: "increase number"
    },
    select: {
      loading: "Loading",
      noMatch: "No matching data",
      noData: "No data",
      placeholder: "Select"
    },
    mention: {
      loading: "Loading"
    },
    dropdown: {
      toggleDropdown: "Toggle Dropdown"
    },
    cascader: {
      noMatch: "No matching data",
      loading: "Loading",
      placeholder: "Select",
      noData: "No data"
    },
    pagination: {
      goto: "Go to",
      pagesize: "/page",
      total: "Total {total}",
      pageClassifier: "",
      page: "Page",
      prev: "Go to previous page",
      next: "Go to next page",
      currentPage: "page {pager}",
      prevPages: "Previous {pager} pages",
      nextPages: "Next {pager} pages",
      deprecationWarning: "Deprecated usages detected, please refer to the el-pagination documentation for more details"
    },
    dialog: {
      close: "Close this dialog"
    },
    drawer: {
      close: "Close this dialog"
    },
    messagebox: {
      title: "Message",
      confirm: "OK",
      cancel: "Cancel",
      error: "Illegal input",
      close: "Close this dialog"
    },
    upload: {
      deleteTip: "press delete to remove",
      delete: "Delete",
      preview: "Preview",
      continue: "Continue"
    },
    slider: {
      defaultLabel: "slider between {min} and {max}",
      defaultRangeStartLabel: "pick start value",
      defaultRangeEndLabel: "pick end value"
    },
    table: {
      emptyText: "No Data",
      confirmFilter: "Confirm",
      resetFilter: "Reset",
      clearFilter: "All",
      sumText: "Sum"
    },
    tour: {
      next: "Next",
      previous: "Previous",
      finish: "Finish"
    },
    tree: {
      emptyText: "No Data"
    },
    transfer: {
      noMatch: "No matching data",
      noData: "No data",
      titles: ["List 1", "List 2"],
      filterPlaceholder: "Enter keyword",
      noCheckedFormat: "{total} items",
      hasCheckedFormat: "{checked}/{total} checked"
    },
    image: {
      error: "FAILED"
    },
    pageHeader: {
      title: "Back"
    },
    popconfirm: {
      confirmButtonText: "Yes",
      cancelButtonText: "No"
    },
    carousel: {
      leftArrow: "Carousel arrow left",
      rightArrow: "Carousel arrow right",
      indicator: "Carousel switch to index {index}"
    }
  }
};
const buildTranslator = (locale) => (path, option) => translate$1(path, option, unref(locale));
const translate$1 = (path, option, locale) => get(locale, path, path).replace(/\{(\w+)\}/g, (_, key) => {
  var _a2;
  return `${(_a2 = option == null ? void 0 : option[key]) != null ? _a2 : `{${key}}`}`;
});
const buildLocaleContext = (locale) => {
  const lang = computed(() => unref(locale).name);
  const localeRef = isRef(locale) ? locale : ref(locale);
  return {
    lang,
    locale: localeRef,
    t: buildTranslator(locale)
  };
};
const localeContextKey = Symbol("localeContextKey");
const useLocale = (localeOverrides) => {
  const locale = localeOverrides || inject(localeContextKey, ref());
  return buildLocaleContext(computed(() => locale.value || English));
};
const epPropKey = "__epPropKey";
const definePropType = (val) => val;
const isEpProp = (val) => isObject$3(val) && !!val[epPropKey];
const buildProp = (prop, key) => {
  if (!isObject$3(prop) || isEpProp(prop))
    return prop;
  const { values, required: required4, default: defaultValue, type: type4, validator: validator2 } = prop;
  const _validator = values || validator2 ? (val) => {
    let valid = false;
    let allowedValues = [];
    if (values) {
      allowedValues = Array.from(values);
      if (hasOwn$1(prop, "default")) {
        allowedValues.push(defaultValue);
      }
      valid || (valid = allowedValues.includes(val));
    }
    if (validator2)
      valid || (valid = validator2(val));
    if (!valid && allowedValues.length > 0) {
      const allowValuesText = [...new Set(allowedValues)].map((value) => JSON.stringify(value)).join(", ");
      warn$2(`Invalid prop: validation failed${key ? ` for prop "${key}"` : ""}. Expected one of [${allowValuesText}], got value ${JSON.stringify(val)}.`);
    }
    return valid;
  } : void 0;
  const epProp = {
    type: type4,
    required: !!required4,
    validator: _validator,
    [epPropKey]: true
  };
  if (hasOwn$1(prop, "default"))
    epProp.default = defaultValue;
  return epProp;
};
const buildProps = (props) => fromPairs(Object.entries(props).map(([key, option]) => [
  key,
  buildProp(option, key)
]));
const componentSizes = ["", "default", "small", "large"];
const useSizeProp = buildProp({
  type: String,
  values: componentSizes,
  required: false
});
const SIZE_INJECTION_KEY = Symbol("size");
const useGlobalSize = () => {
  const injectedSize = inject(SIZE_INJECTION_KEY, {});
  return computed(() => {
    return unref(injectedSize.size) || "";
  });
};
const emptyValuesContextKey = Symbol("emptyValuesContextKey");
const DEFAULT_EMPTY_VALUES = ["", void 0, null];
const DEFAULT_VALUE_ON_CLEAR = void 0;
const useEmptyValuesProps = buildProps({
  emptyValues: Array,
  valueOnClear: {
    type: [String, Number, Boolean, Function],
    default: void 0,
    validator: (val) => isFunction$3(val) ? !val() : !val
  }
});
const useEmptyValues = (props, defaultValue) => {
  const config = getCurrentInstance() ? inject(emptyValuesContextKey, ref({})) : ref({});
  const emptyValues = computed(() => props.emptyValues || config.value.emptyValues || DEFAULT_EMPTY_VALUES);
  const valueOnClear = computed(() => {
    if (isFunction$3(props.valueOnClear)) {
      return props.valueOnClear();
    } else if (props.valueOnClear !== void 0) {
      return props.valueOnClear;
    } else if (isFunction$3(config.value.valueOnClear)) {
      return config.value.valueOnClear();
    } else if (config.value.valueOnClear !== void 0) {
      return config.value.valueOnClear;
    }
    return defaultValue !== void 0 ? defaultValue : DEFAULT_VALUE_ON_CLEAR;
  });
  const isEmptyValue2 = (value) => {
    return emptyValues.value.includes(value);
  };
  if (!emptyValues.value.includes(valueOnClear.value))
    ;
  return {
    emptyValues,
    valueOnClear,
    isEmptyValue: isEmptyValue2
  };
};
const keysOf = (arr) => Object.keys(arr);
const getProp = (obj, path, defaultValue) => {
  return {
    get value() {
      return get(obj, path, defaultValue);
    },
    set value(val) {
      set(obj, path, val);
    }
  };
};
const globalConfig = ref();
function useGlobalConfig(key, defaultValue = void 0) {
  const config = getCurrentInstance() ? inject(configProviderContextKey, globalConfig) : globalConfig;
  if (key) {
    return computed(() => {
      var _a2, _b2;
      return (_b2 = (_a2 = config.value) == null ? void 0 : _a2[key]) != null ? _b2 : defaultValue;
    });
  } else {
    return config;
  }
}
function useGlobalComponentSettings(block, sizeFallback) {
  const config = useGlobalConfig();
  const ns2 = useNamespace(block, computed(() => {
    var _a2;
    return ((_a2 = config.value) == null ? void 0 : _a2.namespace) || defaultNamespace;
  }));
  const locale = useLocale(computed(() => {
    var _a2;
    return (_a2 = config.value) == null ? void 0 : _a2.locale;
  }));
  const zIndex2 = useZIndex(computed(() => {
    var _a2;
    return ((_a2 = config.value) == null ? void 0 : _a2.zIndex) || defaultInitialZIndex;
  }));
  const size = computed(() => {
    var _a2;
    return unref(sizeFallback) || ((_a2 = config.value) == null ? void 0 : _a2.size) || "";
  });
  provideGlobalConfig(computed(() => unref(config) || {}));
  return {
    ns: ns2,
    locale,
    zIndex: zIndex2,
    size
  };
}
const provideGlobalConfig = (config, app, global2 = false) => {
  var _a2;
  const inSetup = !!getCurrentInstance();
  const oldConfig = inSetup ? useGlobalConfig() : void 0;
  const provideFn = (_a2 = app == null ? void 0 : app.provide) != null ? _a2 : inSetup ? provide : void 0;
  if (!provideFn) {
    return;
  }
  const context = computed(() => {
    const cfg = unref(config);
    if (!(oldConfig == null ? void 0 : oldConfig.value))
      return cfg;
    return mergeConfig$1(oldConfig.value, cfg);
  });
  provideFn(configProviderContextKey, context);
  provideFn(localeContextKey, computed(() => context.value.locale));
  provideFn(namespaceContextKey, computed(() => context.value.namespace));
  provideFn(zIndexContextKey, computed(() => context.value.zIndex));
  provideFn(SIZE_INJECTION_KEY, {
    size: computed(() => context.value.size || "")
  });
  provideFn(emptyValuesContextKey, computed(() => ({
    emptyValues: context.value.emptyValues,
    valueOnClear: context.value.valueOnClear
  })));
  if (global2 || !globalConfig.value) {
    globalConfig.value = context.value;
  }
  return context;
};
const mergeConfig$1 = (a2, b) => {
  const keys2 = [.../* @__PURE__ */ new Set([...keysOf(a2), ...keysOf(b)])];
  const obj = {};
  for (const key of keys2) {
    obj[key] = b[key] !== void 0 ? b[key] : a2[key];
  }
  return obj;
};
const UPDATE_MODEL_EVENT = "update:modelValue";
const CHANGE_EVENT = "change";
const INPUT_EVENT = "input";
var _export_sfc$1 = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target[key] = val;
  }
  return target;
};
const classNameToArray = (cls = "") => cls.split(" ").filter((item) => !!item.trim());
const hasClass = (el2, cls) => {
  if (!el2 || !cls)
    return false;
  if (cls.includes(" "))
    throw new Error("className should not contain space.");
  return el2.classList.contains(cls);
};
const addClass = (el2, cls) => {
  if (!el2 || !cls.trim())
    return;
  el2.classList.add(...classNameToArray(cls));
};
const removeClass = (el2, cls) => {
  if (!el2 || !cls.trim())
    return;
  el2.classList.remove(...classNameToArray(cls));
};
const getStyle = (element, styleName) => {
  var _a2;
  if (!isClient || !element || !styleName)
    return "";
  let key = camelize(styleName);
  if (key === "float")
    key = "cssFloat";
  try {
    const style = element.style[key];
    if (style)
      return style;
    const computed2 = (_a2 = document.defaultView) == null ? void 0 : _a2.getComputedStyle(element, "");
    return computed2 ? computed2[key] : "";
  } catch (e2) {
    return element.style[key];
  }
};
function addUnit(value, defaultUnit = "px") {
  if (!value)
    return "";
  if (isNumber$2(value) || isStringNumber(value)) {
    return `${value}${defaultUnit}`;
  } else if (isString$3(value)) {
    return value;
  }
}
const isScroll = (el2, isVertical) => {
  if (!isClient)
    return false;
  const key = {
    undefined: "overflow",
    true: "overflow-y",
    false: "overflow-x"
  }[String(isVertical)];
  const overflow = getStyle(el2, key);
  return ["scroll", "auto", "overlay"].some((s2) => overflow.includes(s2));
};
const getScrollContainer = (el2, isVertical) => {
  if (!isClient)
    return;
  let parent = el2;
  while (parent) {
    if ([window, document, document.documentElement].includes(parent))
      return window;
    if (isScroll(parent, isVertical))
      return parent;
    parent = parent.parentNode;
  }
  return parent;
};
let scrollBarWidth;
const getScrollBarWidth = (namespace) => {
  var _a2;
  if (!isClient)
    return 0;
  if (scrollBarWidth !== void 0)
    return scrollBarWidth;
  const outer = document.createElement("div");
  outer.className = `${namespace}-scrollbar__wrap`;
  outer.style.visibility = "hidden";
  outer.style.width = "100px";
  outer.style.position = "absolute";
  outer.style.top = "-9999px";
  document.body.appendChild(outer);
  const widthNoScroll = outer.offsetWidth;
  outer.style.overflow = "scroll";
  const inner = document.createElement("div");
  inner.style.width = "100%";
  outer.appendChild(inner);
  const widthWithScroll = inner.offsetWidth;
  (_a2 = outer.parentNode) == null ? void 0 : _a2.removeChild(outer);
  scrollBarWidth = widthNoScroll - widthWithScroll;
  return scrollBarWidth;
};
function scrollIntoView(container, selected) {
  if (!isClient)
    return;
  if (!selected) {
    container.scrollTop = 0;
    return;
  }
  const offsetParents = [];
  let pointer = selected.offsetParent;
  while (pointer !== null && container !== pointer && container.contains(pointer)) {
    offsetParents.push(pointer);
    pointer = pointer.offsetParent;
  }
  const top = selected.offsetTop + offsetParents.reduce((prev, curr) => prev + curr.offsetTop, 0);
  const bottom = top + selected.offsetHeight;
  const viewRectTop = container.scrollTop;
  const viewRectBottom = viewRectTop + container.clientHeight;
  if (top < viewRectTop) {
    container.scrollTop = top;
  } else if (bottom > viewRectBottom) {
    container.scrollTop = bottom - container.clientHeight;
  }
}
const withInstall = (main, extra) => {
  main.install = (app) => {
    for (const comp of [main, ...Object.values(extra != null ? extra : {})]) {
      app.component(comp.name, comp);
    }
  };
  if (extra) {
    for (const [key, comp] of Object.entries(extra)) {
      main[key] = comp;
    }
  }
  return main;
};
const withInstallFunction = (fn2, name) => {
  fn2.install = (app) => {
    fn2._context = app._context;
    app.config.globalProperties[name] = fn2;
  };
  return fn2;
};
const withNoopInstall = (component) => {
  component.install = NOOP;
  return component;
};
const iconProps = buildProps({
  size: {
    type: definePropType([Number, String])
  },
  color: {
    type: String
  }
});
const __default__$g = /* @__PURE__ */ defineComponent({
  name: "ElIcon",
  inheritAttrs: false
});
const _sfc_main$l = /* @__PURE__ */ defineComponent({
  ...__default__$g,
  props: iconProps,
  setup(__props) {
    const props = __props;
    const ns2 = useNamespace("icon");
    const style = computed(() => {
      const { size, color } = props;
      if (!size && !color)
        return {};
      return {
        fontSize: isUndefined$1(size) ? void 0 : addUnit(size),
        "--color": color
      };
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("i", mergeProps({
        class: unref(ns2).b(),
        style: unref(style)
      }, _ctx.$attrs), [
        renderSlot(_ctx.$slots, "default")
      ], 16);
    };
  }
});
var Icon = /* @__PURE__ */ _export_sfc$1(_sfc_main$l, [["__file", "icon.vue"]]);
const ElIcon = withInstall(Icon);
/*! Element Plus Icons Vue v2.3.1 */
var arrow_down_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "ArrowDown",
  __name: "arrow-down",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M831.872 340.864 512 652.672 192.128 340.864a30.592 30.592 0 0 0-42.752 0 29.12 29.12 0 0 0 0 41.6L489.664 714.24a32 32 0 0 0 44.672 0l340.288-331.712a29.12 29.12 0 0 0 0-41.728 30.592 30.592 0 0 0-42.752 0z"
      })
    ]));
  }
});
var arrow_down_default = arrow_down_vue_vue_type_script_setup_true_lang_default;
var arrow_left_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "ArrowLeft",
  __name: "arrow-left",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M609.408 149.376 277.76 489.6a32 32 0 0 0 0 44.672l331.648 340.352a29.12 29.12 0 0 0 41.728 0 30.592 30.592 0 0 0 0-42.752L339.264 511.936l311.872-319.872a30.592 30.592 0 0 0 0-42.688 29.12 29.12 0 0 0-41.728 0z"
      })
    ]));
  }
});
var arrow_left_default = arrow_left_vue_vue_type_script_setup_true_lang_default;
var arrow_right_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "ArrowRight",
  __name: "arrow-right",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M340.864 149.312a30.592 30.592 0 0 0 0 42.752L652.736 512 340.864 831.872a30.592 30.592 0 0 0 0 42.752 29.12 29.12 0 0 0 41.728 0L714.24 534.336a32 32 0 0 0 0-44.672L382.592 149.376a29.12 29.12 0 0 0-41.728 0z"
      })
    ]));
  }
});
var arrow_right_default = arrow_right_vue_vue_type_script_setup_true_lang_default;
var arrow_up_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "ArrowUp",
  __name: "arrow-up",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "m488.832 344.32-339.84 356.672a32 32 0 0 0 0 44.16l.384.384a29.44 29.44 0 0 0 42.688 0l320-335.872 319.872 335.872a29.44 29.44 0 0 0 42.688 0l.384-.384a32 32 0 0 0 0-44.16L535.168 344.32a32 32 0 0 0-46.336 0"
      })
    ]));
  }
});
var arrow_up_default = arrow_up_vue_vue_type_script_setup_true_lang_default;
var check_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "Check",
  __name: "check",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M406.656 706.944 195.84 496.256a32 32 0 1 0-45.248 45.248l256 256 512-512a32 32 0 0 0-45.248-45.248L406.592 706.944z"
      })
    ]));
  }
});
var check_default = check_vue_vue_type_script_setup_true_lang_default;
var circle_check_filled_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "CircleCheckFilled",
  __name: "circle-check-filled",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896m-55.808 536.384-99.52-99.584a38.4 38.4 0 1 0-54.336 54.336l126.72 126.72a38.272 38.272 0 0 0 54.336 0l262.4-262.464a38.4 38.4 0 1 0-54.272-54.336z"
      })
    ]));
  }
});
var circle_check_filled_default = circle_check_filled_vue_vue_type_script_setup_true_lang_default;
var circle_check_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "CircleCheck",
  __name: "circle-check",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 896a384 384 0 1 0 0-768 384 384 0 0 0 0 768m0 64a448 448 0 1 1 0-896 448 448 0 0 1 0 896"
      }),
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M745.344 361.344a32 32 0 0 1 45.312 45.312l-288 288a32 32 0 0 1-45.312 0l-160-160a32 32 0 1 1 45.312-45.312L480 626.752l265.344-265.408z"
      })
    ]));
  }
});
var circle_check_default = circle_check_vue_vue_type_script_setup_true_lang_default;
var circle_close_filled_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "CircleCloseFilled",
  __name: "circle-close-filled",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896m0 393.664L407.936 353.6a38.4 38.4 0 1 0-54.336 54.336L457.664 512 353.6 616.064a38.4 38.4 0 1 0 54.336 54.336L512 566.336 616.064 670.4a38.4 38.4 0 1 0 54.336-54.336L566.336 512 670.4 407.936a38.4 38.4 0 1 0-54.336-54.336z"
      })
    ]));
  }
});
var circle_close_filled_default = circle_close_filled_vue_vue_type_script_setup_true_lang_default;
var circle_close_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "CircleClose",
  __name: "circle-close",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "m466.752 512-90.496-90.496a32 32 0 0 1 45.248-45.248L512 466.752l90.496-90.496a32 32 0 1 1 45.248 45.248L557.248 512l90.496 90.496a32 32 0 1 1-45.248 45.248L512 557.248l-90.496 90.496a32 32 0 0 1-45.248-45.248z"
      }),
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 896a384 384 0 1 0 0-768 384 384 0 0 0 0 768m0 64a448 448 0 1 1 0-896 448 448 0 0 1 0 896"
      })
    ]));
  }
});
var circle_close_default = circle_close_vue_vue_type_script_setup_true_lang_default;
var circle_plus_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "CirclePlus",
  __name: "circle-plus",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M352 480h320a32 32 0 1 1 0 64H352a32 32 0 0 1 0-64"
      }),
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M480 672V352a32 32 0 1 1 64 0v320a32 32 0 0 1-64 0"
      }),
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 896a384 384 0 1 0 0-768 384 384 0 0 0 0 768m0 64a448 448 0 1 1 0-896 448 448 0 0 1 0 896"
      })
    ]));
  }
});
var circle_plus_default = circle_plus_vue_vue_type_script_setup_true_lang_default;
var close_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "Close",
  __name: "close",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M764.288 214.592 512 466.88 259.712 214.592a31.936 31.936 0 0 0-45.12 45.12L466.752 512 214.528 764.224a31.936 31.936 0 1 0 45.12 45.184L512 557.184l252.288 252.288a31.936 31.936 0 0 0 45.12-45.12L557.12 512.064l252.288-252.352a31.936 31.936 0 1 0-45.12-45.184z"
      })
    ]));
  }
});
var close_default = close_vue_vue_type_script_setup_true_lang_default;
var copy_document_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "CopyDocument",
  __name: "copy-document",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M768 832a128 128 0 0 1-128 128H192A128 128 0 0 1 64 832V384a128 128 0 0 1 128-128v64a64 64 0 0 0-64 64v448a64 64 0 0 0 64 64h448a64 64 0 0 0 64-64z"
      }),
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M384 128a64 64 0 0 0-64 64v448a64 64 0 0 0 64 64h448a64 64 0 0 0 64-64V192a64 64 0 0 0-64-64zm0-64h448a128 128 0 0 1 128 128v448a128 128 0 0 1-128 128H384a128 128 0 0 1-128-128V192A128 128 0 0 1 384 64"
      })
    ]));
  }
});
var copy_document_default = copy_document_vue_vue_type_script_setup_true_lang_default;
var delete_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "Delete",
  __name: "delete",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M160 256H96a32 32 0 0 1 0-64h256V95.936a32 32 0 0 1 32-32h256a32 32 0 0 1 32 32V192h256a32 32 0 1 1 0 64h-64v672a32 32 0 0 1-32 32H192a32 32 0 0 1-32-32zm448-64v-64H416v64zM224 896h576V256H224zm192-128a32 32 0 0 1-32-32V416a32 32 0 0 1 64 0v320a32 32 0 0 1-32 32m192 0a32 32 0 0 1-32-32V416a32 32 0 0 1 64 0v320a32 32 0 0 1-32 32"
      })
    ]));
  }
});
var delete_default = delete_vue_vue_type_script_setup_true_lang_default;
var download_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "Download",
  __name: "download",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M160 832h704a32 32 0 1 1 0 64H160a32 32 0 1 1 0-64m384-253.696 236.288-236.352 45.248 45.248L508.8 704 192 387.2l45.248-45.248L480 584.704V128h64z"
      })
    ]));
  }
});
var download_default = download_vue_vue_type_script_setup_true_lang_default;
var full_screen_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "FullScreen",
  __name: "full-screen",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "m160 96.064 192 .192a32 32 0 0 1 0 64l-192-.192V352a32 32 0 0 1-64 0V96h64zm0 831.872V928H96V672a32 32 0 1 1 64 0v191.936l192-.192a32 32 0 1 1 0 64zM864 96.064V96h64v256a32 32 0 1 1-64 0V160.064l-192 .192a32 32 0 1 1 0-64l192-.192zm0 831.872-192-.192a32 32 0 0 1 0-64l192 .192V672a32 32 0 1 1 64 0v256h-64z"
      })
    ]));
  }
});
var full_screen_default = full_screen_vue_vue_type_script_setup_true_lang_default;
var hide_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "Hide",
  __name: "hide",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M876.8 156.8c0-9.6-3.2-16-9.6-22.4-6.4-6.4-12.8-9.6-22.4-9.6-9.6 0-16 3.2-22.4 9.6L736 220.8c-64-32-137.6-51.2-224-60.8-160 16-288 73.6-377.6 176C44.8 438.4 0 496 0 512s48 73.6 134.4 176c22.4 25.6 44.8 48 73.6 67.2l-86.4 89.6c-6.4 6.4-9.6 12.8-9.6 22.4 0 9.6 3.2 16 9.6 22.4 6.4 6.4 12.8 9.6 22.4 9.6 9.6 0 16-3.2 22.4-9.6l704-710.4c3.2-6.4 6.4-12.8 6.4-22.4Zm-646.4 528c-76.8-70.4-128-128-153.6-172.8 28.8-48 80-105.6 153.6-172.8C304 272 400 230.4 512 224c64 3.2 124.8 19.2 176 44.8l-54.4 54.4C598.4 300.8 560 288 512 288c-64 0-115.2 22.4-160 64s-64 96-64 160c0 48 12.8 89.6 35.2 124.8L256 707.2c-9.6-6.4-19.2-16-25.6-22.4Zm140.8-96c-12.8-22.4-19.2-48-19.2-76.8 0-44.8 16-83.2 48-112 32-28.8 67.2-48 112-48 28.8 0 54.4 6.4 73.6 19.2zM889.599 336c-12.8-16-28.8-28.8-41.6-41.6l-48 48c73.6 67.2 124.8 124.8 150.4 169.6-28.8 48-80 105.6-153.6 172.8-73.6 67.2-172.8 108.8-284.8 115.2-51.2-3.2-99.2-12.8-140.8-28.8l-48 48c57.6 22.4 118.4 38.4 188.8 44.8 160-16 288-73.6 377.6-176C979.199 585.6 1024 528 1024 512s-48.001-73.6-134.401-176Z"
      }),
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M511.998 672c-12.8 0-25.6-3.2-38.4-6.4l-51.2 51.2c28.8 12.8 57.6 19.2 89.6 19.2 64 0 115.2-22.4 160-64 41.6-41.6 64-96 64-160 0-32-6.4-64-19.2-89.6l-51.2 51.2c3.2 12.8 6.4 25.6 6.4 38.4 0 44.8-16 83.2-48 112-32 28.8-67.2 48-112 48Z"
      })
    ]));
  }
});
var hide_default = hide_vue_vue_type_script_setup_true_lang_default;
var info_filled_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "InfoFilled",
  __name: "info-filled",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 64a448 448 0 1 1 0 896.064A448 448 0 0 1 512 64m67.2 275.072c33.28 0 60.288-23.104 60.288-57.344s-27.072-57.344-60.288-57.344c-33.28 0-60.16 23.104-60.16 57.344s26.88 57.344 60.16 57.344M590.912 699.2c0-6.848 2.368-24.64 1.024-34.752l-52.608 60.544c-10.88 11.456-24.512 19.392-30.912 17.28a12.992 12.992 0 0 1-8.256-14.72l87.68-276.992c7.168-35.136-12.544-67.2-54.336-71.296-44.096 0-108.992 44.736-148.48 101.504 0 6.784-1.28 23.68.064 33.792l52.544-60.608c10.88-11.328 23.552-19.328 29.952-17.152a12.8 12.8 0 0 1 7.808 16.128L388.48 728.576c-10.048 32.256 8.96 63.872 55.04 71.04 67.84 0 107.904-43.648 147.456-100.416z"
      })
    ]));
  }
});
var info_filled_default = info_filled_vue_vue_type_script_setup_true_lang_default;
var loading_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "Loading",
  __name: "loading",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 64a32 32 0 0 1 32 32v192a32 32 0 0 1-64 0V96a32 32 0 0 1 32-32m0 640a32 32 0 0 1 32 32v192a32 32 0 1 1-64 0V736a32 32 0 0 1 32-32m448-192a32 32 0 0 1-32 32H736a32 32 0 1 1 0-64h192a32 32 0 0 1 32 32m-640 0a32 32 0 0 1-32 32H96a32 32 0 0 1 0-64h192a32 32 0 0 1 32 32M195.2 195.2a32 32 0 0 1 45.248 0L376.32 331.008a32 32 0 0 1-45.248 45.248L195.2 240.448a32 32 0 0 1 0-45.248zm452.544 452.544a32 32 0 0 1 45.248 0L828.8 783.552a32 32 0 0 1-45.248 45.248L647.744 692.992a32 32 0 0 1 0-45.248zM828.8 195.264a32 32 0 0 1 0 45.184L692.992 376.32a32 32 0 0 1-45.248-45.248l135.808-135.808a32 32 0 0 1 45.248 0m-452.544 452.48a32 32 0 0 1 0 45.248L240.448 828.8a32 32 0 0 1-45.248-45.248l135.808-135.808a32 32 0 0 1 45.248 0z"
      })
    ]));
  }
});
var loading_default = loading_vue_vue_type_script_setup_true_lang_default;
var more_filled_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "MoreFilled",
  __name: "more-filled",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M176 416a112 112 0 1 1 0 224 112 112 0 0 1 0-224m336 0a112 112 0 1 1 0 224 112 112 0 0 1 0-224m336 0a112 112 0 1 1 0 224 112 112 0 0 1 0-224"
      })
    ]));
  }
});
var more_filled_default = more_filled_vue_vue_type_script_setup_true_lang_default;
var more_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "More",
  __name: "more",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M176 416a112 112 0 1 0 0 224 112 112 0 0 0 0-224m0 64a48 48 0 1 1 0 96 48 48 0 0 1 0-96m336-64a112 112 0 1 1 0 224 112 112 0 0 1 0-224m0 64a48 48 0 1 0 0 96 48 48 0 0 0 0-96m336-64a112 112 0 1 1 0 224 112 112 0 0 1 0-224m0 64a48 48 0 1 0 0 96 48 48 0 0 0 0-96"
      })
    ]));
  }
});
var more_default = more_vue_vue_type_script_setup_true_lang_default;
var plus_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "Plus",
  __name: "plus",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M480 480V128a32 32 0 0 1 64 0v352h352a32 32 0 1 1 0 64H544v352a32 32 0 1 1-64 0V544H128a32 32 0 0 1 0-64z"
      })
    ]));
  }
});
var plus_default = plus_vue_vue_type_script_setup_true_lang_default;
var refresh_left_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "RefreshLeft",
  __name: "refresh-left",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M289.088 296.704h92.992a32 32 0 0 1 0 64H232.96a32 32 0 0 1-32-32V179.712a32 32 0 0 1 64 0v50.56a384 384 0 0 1 643.84 282.88 384 384 0 0 1-383.936 384 384 384 0 0 1-384-384h64a320 320 0 1 0 640 0 320 320 0 0 0-555.712-216.448z"
      })
    ]));
  }
});
var refresh_left_default = refresh_left_vue_vue_type_script_setup_true_lang_default;
var refresh_right_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "RefreshRight",
  __name: "refresh-right",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M784.512 230.272v-50.56a32 32 0 1 1 64 0v149.056a32 32 0 0 1-32 32H667.52a32 32 0 1 1 0-64h92.992A320 320 0 1 0 524.8 833.152a320 320 0 0 0 320-320h64a384 384 0 0 1-384 384 384 384 0 0 1-384-384 384 384 0 0 1 643.712-282.88z"
      })
    ]));
  }
});
var refresh_right_default = refresh_right_vue_vue_type_script_setup_true_lang_default;
var refresh_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "Refresh",
  __name: "refresh",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M771.776 794.88A384 384 0 0 1 128 512h64a320 320 0 0 0 555.712 216.448H654.72a32 32 0 1 1 0-64h149.056a32 32 0 0 1 32 32v148.928a32 32 0 1 1-64 0v-50.56zM276.288 295.616h92.992a32 32 0 0 1 0 64H220.16a32 32 0 0 1-32-32V178.56a32 32 0 0 1 64 0v50.56A384 384 0 0 1 896.128 512h-64a320 320 0 0 0-555.776-216.384z"
      })
    ]));
  }
});
var refresh_default = refresh_vue_vue_type_script_setup_true_lang_default;
var remove_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "Remove",
  __name: "remove",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M352 480h320a32 32 0 1 1 0 64H352a32 32 0 0 1 0-64"
      }),
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 896a384 384 0 1 0 0-768 384 384 0 0 0 0 768m0 64a448 448 0 1 1 0-896 448 448 0 0 1 0 896"
      })
    ]));
  }
});
var remove_default = remove_vue_vue_type_script_setup_true_lang_default;
var scale_to_original_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "ScaleToOriginal",
  __name: "scale-to-original",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M813.176 180.706a60.235 60.235 0 0 1 60.236 60.235v481.883a60.235 60.235 0 0 1-60.236 60.235H210.824a60.235 60.235 0 0 1-60.236-60.235V240.94a60.235 60.235 0 0 1 60.236-60.235h602.352zm0-60.235H210.824A120.47 120.47 0 0 0 90.353 240.94v481.883a120.47 120.47 0 0 0 120.47 120.47h602.353a120.47 120.47 0 0 0 120.471-120.47V240.94a120.47 120.47 0 0 0-120.47-120.47zm-120.47 180.705a30.118 30.118 0 0 0-30.118 30.118v301.177a30.118 30.118 0 0 0 60.236 0V331.294a30.118 30.118 0 0 0-30.118-30.118zm-361.412 0a30.118 30.118 0 0 0-30.118 30.118v301.177a30.118 30.118 0 1 0 60.236 0V331.294a30.118 30.118 0 0 0-30.118-30.118M512 361.412a30.118 30.118 0 0 0-30.118 30.117v30.118a30.118 30.118 0 0 0 60.236 0V391.53A30.118 30.118 0 0 0 512 361.412M512 512a30.118 30.118 0 0 0-30.118 30.118v30.117a30.118 30.118 0 0 0 60.236 0v-30.117A30.118 30.118 0 0 0 512 512"
      })
    ]));
  }
});
var scale_to_original_default = scale_to_original_vue_vue_type_script_setup_true_lang_default;
var search_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "Search",
  __name: "search",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "m795.904 750.72 124.992 124.928a32 32 0 0 1-45.248 45.248L750.656 795.904a416 416 0 1 1 45.248-45.248zM480 832a352 352 0 1 0 0-704 352 352 0 0 0 0 704"
      })
    ]));
  }
});
var search_default = search_vue_vue_type_script_setup_true_lang_default;
var share_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "Share",
  __name: "share",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "m679.872 348.8-301.76 188.608a127.808 127.808 0 0 1 5.12 52.16l279.936 104.96a128 128 0 1 1-22.464 59.904l-279.872-104.96a128 128 0 1 1-16.64-166.272l301.696-188.608a128 128 0 1 1 33.92 54.272z"
      })
    ]));
  }
});
var share_default = share_vue_vue_type_script_setup_true_lang_default;
var star_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "Star",
  __name: "star",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "m512 747.84 228.16 119.936a6.4 6.4 0 0 0 9.28-6.72l-43.52-254.08 184.512-179.904a6.4 6.4 0 0 0-3.52-10.88l-255.104-37.12L517.76 147.904a6.4 6.4 0 0 0-11.52 0L392.192 379.072l-255.104 37.12a6.4 6.4 0 0 0-3.52 10.88L318.08 606.976l-43.584 254.08a6.4 6.4 0 0 0 9.28 6.72zM313.6 924.48a70.4 70.4 0 0 1-102.144-74.24l37.888-220.928L88.96 472.96A70.4 70.4 0 0 1 128 352.896l221.76-32.256 99.2-200.96a70.4 70.4 0 0 1 126.208 0l99.2 200.96 221.824 32.256a70.4 70.4 0 0 1 39.04 120.064L774.72 629.376l37.888 220.928a70.4 70.4 0 0 1-102.144 74.24L512 820.096l-198.4 104.32z"
      })
    ]));
  }
});
var star_default = star_vue_vue_type_script_setup_true_lang_default;
var success_filled_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "SuccessFilled",
  __name: "success-filled",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896m-55.808 536.384-99.52-99.584a38.4 38.4 0 1 0-54.336 54.336l126.72 126.72a38.272 38.272 0 0 0 54.336 0l262.4-262.464a38.4 38.4 0 1 0-54.272-54.336z"
      })
    ]));
  }
});
var success_filled_default = success_filled_vue_vue_type_script_setup_true_lang_default;
var view_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "View",
  __name: "view",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 160c320 0 512 352 512 352S832 864 512 864 0 512 0 512s192-352 512-352m0 64c-225.28 0-384.128 208.064-436.8 288 52.608 79.872 211.456 288 436.8 288 225.28 0 384.128-208.064 436.8-288-52.608-79.872-211.456-288-436.8-288zm0 64a224 224 0 1 1 0 448 224 224 0 0 1 0-448m0 64a160.192 160.192 0 0 0-160 160c0 88.192 71.744 160 160 160s160-71.808 160-160-71.744-160-160-160"
      })
    ]));
  }
});
var view_default = view_vue_vue_type_script_setup_true_lang_default;
var warning_filled_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "WarningFilled",
  __name: "warning-filled",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896m0 192a58.432 58.432 0 0 0-58.24 63.744l23.36 256.384a35.072 35.072 0 0 0 69.76 0l23.296-256.384A58.432 58.432 0 0 0 512 256m0 512a51.2 51.2 0 1 0 0-102.4 51.2 51.2 0 0 0 0 102.4"
      })
    ]));
  }
});
var warning_filled_default = warning_filled_vue_vue_type_script_setup_true_lang_default;
var zoom_in_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "ZoomIn",
  __name: "zoom-in",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "m795.904 750.72 124.992 124.928a32 32 0 0 1-45.248 45.248L750.656 795.904a416 416 0 1 1 45.248-45.248zM480 832a352 352 0 1 0 0-704 352 352 0 0 0 0 704m-32-384v-96a32 32 0 0 1 64 0v96h96a32 32 0 0 1 0 64h-96v96a32 32 0 0 1-64 0v-96h-96a32 32 0 0 1 0-64z"
      })
    ]));
  }
});
var zoom_in_default = zoom_in_vue_vue_type_script_setup_true_lang_default;
var zoom_out_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ defineComponent({
  name: "ZoomOut",
  __name: "zoom-out",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "m795.904 750.72 124.992 124.928a32 32 0 0 1-45.248 45.248L750.656 795.904a416 416 0 1 1 45.248-45.248zM480 832a352 352 0 1 0 0-704 352 352 0 0 0 0 704M352 448h256a32 32 0 0 1 0 64H352a32 32 0 0 1 0-64"
      })
    ]));
  }
});
var zoom_out_default = zoom_out_vue_vue_type_script_setup_true_lang_default;
const iconPropType = definePropType([
  String,
  Object,
  Function
]);
const CloseComponents = {
  Close: close_default
};
const TypeComponents = {
  Close: close_default,
  SuccessFilled: success_filled_default,
  InfoFilled: info_filled_default,
  WarningFilled: warning_filled_default,
  CircleCloseFilled: circle_close_filled_default
};
const TypeComponentsMap = {
  success: success_filled_default,
  warning: warning_filled_default,
  error: circle_close_filled_default,
  info: info_filled_default
};
const ValidateComponentsMap = {
  validating: loading_default,
  success: circle_check_default,
  error: circle_close_default
};
const isFirefox = () => isClient && /firefox/i.test(window.navigator.userAgent);
let hiddenTextarea = void 0;
const HIDDEN_STYLE = {
  height: "0",
  visibility: "hidden",
  overflow: isFirefox() ? "" : "hidden",
  position: "absolute",
  "z-index": "-1000",
  top: "0",
  right: "0"
};
const CONTEXT_STYLE = [
  "letter-spacing",
  "line-height",
  "padding-top",
  "padding-bottom",
  "font-family",
  "font-weight",
  "font-size",
  "text-rendering",
  "text-transform",
  "width",
  "text-indent",
  "padding-left",
  "padding-right",
  "border-width",
  "box-sizing"
];
function calculateNodeStyling(targetElement) {
  const style = window.getComputedStyle(targetElement);
  const boxSizing = style.getPropertyValue("box-sizing");
  const paddingSize = Number.parseFloat(style.getPropertyValue("padding-bottom")) + Number.parseFloat(style.getPropertyValue("padding-top"));
  const borderSize = Number.parseFloat(style.getPropertyValue("border-bottom-width")) + Number.parseFloat(style.getPropertyValue("border-top-width"));
  const contextStyle = CONTEXT_STYLE.map((name) => [
    name,
    style.getPropertyValue(name)
  ]);
  return { contextStyle, paddingSize, borderSize, boxSizing };
}
function calcTextareaHeight(targetElement, minRows = 1, maxRows) {
  var _a2;
  if (!hiddenTextarea) {
    hiddenTextarea = document.createElement("textarea");
    document.body.appendChild(hiddenTextarea);
  }
  const { paddingSize, borderSize, boxSizing, contextStyle } = calculateNodeStyling(targetElement);
  contextStyle.forEach(([key, value]) => hiddenTextarea == null ? void 0 : hiddenTextarea.style.setProperty(key, value));
  Object.entries(HIDDEN_STYLE).forEach(([key, value]) => hiddenTextarea == null ? void 0 : hiddenTextarea.style.setProperty(key, value, "important"));
  hiddenTextarea.value = targetElement.value || targetElement.placeholder || "";
  let height = hiddenTextarea.scrollHeight;
  const result = {};
  if (boxSizing === "border-box") {
    height = height + borderSize;
  } else if (boxSizing === "content-box") {
    height = height - paddingSize;
  }
  hiddenTextarea.value = "";
  const singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
  if (isNumber$2(minRows)) {
    let minHeight = singleRowHeight * minRows;
    if (boxSizing === "border-box") {
      minHeight = minHeight + paddingSize + borderSize;
    }
    height = Math.max(minHeight, height);
    result.minHeight = `${minHeight}px`;
  }
  if (isNumber$2(maxRows)) {
    let maxHeight = singleRowHeight * maxRows;
    if (boxSizing === "border-box") {
      maxHeight = maxHeight + paddingSize + borderSize;
    }
    height = Math.min(maxHeight, height);
  }
  result.height = `${height}px`;
  (_a2 = hiddenTextarea.parentNode) == null ? void 0 : _a2.removeChild(hiddenTextarea);
  hiddenTextarea = void 0;
  return result;
}
const mutable = (val) => val;
const ariaProps = buildProps({
  ariaLabel: String,
  ariaOrientation: {
    type: String,
    values: ["horizontal", "vertical", "undefined"]
  },
  ariaControls: String
});
const useAriaProps = (arias) => {
  return pick(ariaProps, arias);
};
const inputProps = buildProps({
  id: {
    type: String,
    default: void 0
  },
  size: useSizeProp,
  disabled: Boolean,
  modelValue: {
    type: definePropType([
      String,
      Number,
      Object
    ]),
    default: ""
  },
  maxlength: {
    type: [String, Number]
  },
  minlength: {
    type: [String, Number]
  },
  type: {
    type: String,
    default: "text"
  },
  resize: {
    type: String,
    values: ["none", "both", "horizontal", "vertical"]
  },
  autosize: {
    type: definePropType([Boolean, Object]),
    default: false
  },
  autocomplete: {
    type: String,
    default: "off"
  },
  formatter: {
    type: Function
  },
  parser: {
    type: Function
  },
  placeholder: {
    type: String
  },
  form: {
    type: String
  },
  readonly: Boolean,
  clearable: Boolean,
  showPassword: Boolean,
  showWordLimit: Boolean,
  suffixIcon: {
    type: iconPropType
  },
  prefixIcon: {
    type: iconPropType
  },
  containerRole: {
    type: String,
    default: void 0
  },
  tabindex: {
    type: [String, Number],
    default: 0
  },
  validateEvent: {
    type: Boolean,
    default: true
  },
  inputStyle: {
    type: definePropType([Object, Array, String]),
    default: () => mutable({})
  },
  autofocus: Boolean,
  rows: {
    type: Number,
    default: 2
  },
  ...useAriaProps(["ariaLabel"])
});
const inputEmits = {
  [UPDATE_MODEL_EVENT]: (value) => isString$3(value),
  input: (value) => isString$3(value),
  change: (value) => isString$3(value),
  focus: (evt) => evt instanceof FocusEvent,
  blur: (evt) => evt instanceof FocusEvent,
  clear: () => true,
  mouseleave: (evt) => evt instanceof MouseEvent,
  mouseenter: (evt) => evt instanceof MouseEvent,
  keydown: (evt) => evt instanceof Event,
  compositionstart: (evt) => evt instanceof CompositionEvent,
  compositionupdate: (evt) => evt instanceof CompositionEvent,
  compositionend: (evt) => evt instanceof CompositionEvent
};
const DEFAULT_EXCLUDE_KEYS = ["class", "style"];
const LISTENER_PREFIX = /^on[A-Z]/;
const useAttrs = (params = {}) => {
  const { excludeListeners = false, excludeKeys } = params;
  const allExcludeKeys = computed(() => {
    return ((excludeKeys == null ? void 0 : excludeKeys.value) || []).concat(DEFAULT_EXCLUDE_KEYS);
  });
  const instance = getCurrentInstance();
  if (!instance) {
    return computed(() => ({}));
  }
  return computed(() => {
    var _a2;
    return fromPairs(Object.entries((_a2 = instance.proxy) == null ? void 0 : _a2.$attrs).filter(([key]) => !allExcludeKeys.value.includes(key) && !(excludeListeners && LISTENER_PREFIX.test(key))));
  });
};
const formContextKey = Symbol("formContextKey");
const formItemContextKey = Symbol("formItemContextKey");
const defaultIdInjection = {
  prefix: Math.floor(Math.random() * 1e4),
  current: 0
};
const ID_INJECTION_KEY = Symbol("elIdInjection");
const useIdInjection = () => {
  return getCurrentInstance() ? inject(ID_INJECTION_KEY, defaultIdInjection) : defaultIdInjection;
};
const useId = (deterministicId) => {
  const idInjection = useIdInjection();
  const namespace = useGetDerivedNamespace();
  const idRef = computedEager(() => unref(deterministicId) || `${namespace.value}-id-${idInjection.prefix}-${idInjection.current++}`);
  return idRef;
};
const useFormItem = () => {
  const form = inject(formContextKey, void 0);
  const formItem = inject(formItemContextKey, void 0);
  return {
    form,
    formItem
  };
};
const useFormItemInputId = (props, {
  formItemContext,
  disableIdGeneration,
  disableIdManagement
}) => {
  if (!disableIdGeneration) {
    disableIdGeneration = ref(false);
  }
  if (!disableIdManagement) {
    disableIdManagement = ref(false);
  }
  const inputId = ref();
  let idUnwatch = void 0;
  const isLabeledByFormItem = computed(() => {
    var _a2;
    return !!(!(props.label || props.ariaLabel) && formItemContext && formItemContext.inputIds && ((_a2 = formItemContext.inputIds) == null ? void 0 : _a2.length) <= 1);
  });
  onMounted(() => {
    idUnwatch = watch([toRef(props, "id"), disableIdGeneration], ([id2, disableIdGeneration2]) => {
      const newId = id2 != null ? id2 : !disableIdGeneration2 ? useId().value : void 0;
      if (newId !== inputId.value) {
        if (formItemContext == null ? void 0 : formItemContext.removeInputId) {
          inputId.value && formItemContext.removeInputId(inputId.value);
          if (!(disableIdManagement == null ? void 0 : disableIdManagement.value) && !disableIdGeneration2 && newId) {
            formItemContext.addInputId(newId);
          }
        }
        inputId.value = newId;
      }
    }, { immediate: true });
  });
  onUnmounted(() => {
    idUnwatch && idUnwatch();
    if (formItemContext == null ? void 0 : formItemContext.removeInputId) {
      inputId.value && formItemContext.removeInputId(inputId.value);
    }
  });
  return {
    isLabeledByFormItem,
    inputId
  };
};
const useProp = (name) => {
  const vm2 = getCurrentInstance();
  return computed(() => {
    var _a2, _b2;
    return (_b2 = (_a2 = vm2 == null ? void 0 : vm2.proxy) == null ? void 0 : _a2.$props) == null ? void 0 : _b2[name];
  });
};
const useFormSize = (fallback, ignore = {}) => {
  const emptyRef = ref(void 0);
  const size = ignore.prop ? emptyRef : useProp("size");
  const globalConfig2 = ignore.global ? emptyRef : useGlobalSize();
  const form = ignore.form ? { size: void 0 } : inject(formContextKey, void 0);
  const formItem = ignore.formItem ? { size: void 0 } : inject(formItemContextKey, void 0);
  return computed(() => size.value || unref(fallback) || (formItem == null ? void 0 : formItem.size) || (form == null ? void 0 : form.size) || globalConfig2.value || "");
};
const useFormDisabled = (fallback) => {
  const disabled = useProp("disabled");
  const form = inject(formContextKey, void 0);
  return computed(() => disabled.value || unref(fallback) || (form == null ? void 0 : form.disabled) || false);
};
function useFocusController(target, {
  beforeFocus,
  afterFocus,
  beforeBlur,
  afterBlur
} = {}) {
  const instance = getCurrentInstance();
  const { emit: emit2 } = instance;
  const wrapperRef = shallowRef();
  const isFocused = ref(false);
  const handleFocus = (event) => {
    const cancelFocus = isFunction$3(beforeFocus) ? beforeFocus(event) : false;
    if (cancelFocus || isFocused.value)
      return;
    isFocused.value = true;
    emit2("focus", event);
    afterFocus == null ? void 0 : afterFocus();
  };
  const handleBlur = (event) => {
    var _a2;
    const cancelBlur = isFunction$3(beforeBlur) ? beforeBlur(event) : false;
    if (cancelBlur || event.relatedTarget && ((_a2 = wrapperRef.value) == null ? void 0 : _a2.contains(event.relatedTarget)))
      return;
    isFocused.value = false;
    emit2("blur", event);
    afterBlur == null ? void 0 : afterBlur();
  };
  const handleClick = () => {
    var _a2, _b2;
    if (((_a2 = wrapperRef.value) == null ? void 0 : _a2.contains(document.activeElement)) && wrapperRef.value !== document.activeElement)
      return;
    (_b2 = target.value) == null ? void 0 : _b2.focus();
  };
  watch(wrapperRef, (el2) => {
    if (el2) {
      el2.setAttribute("tabindex", "-1");
    }
  });
  useEventListener(wrapperRef, "focus", handleFocus, true);
  useEventListener(wrapperRef, "blur", handleBlur, true);
  useEventListener(wrapperRef, "click", handleClick, true);
  return {
    isFocused,
    wrapperRef,
    handleFocus,
    handleBlur
  };
}
const isKorean = (text) => /([\uAC00-\uD7AF\u3130-\u318F])+/gi.test(text);
function useComposition({
  afterComposition,
  emit: emit2
}) {
  const isComposing = ref(false);
  const handleCompositionStart = (event) => {
    emit2 == null ? void 0 : emit2("compositionstart", event);
    isComposing.value = true;
  };
  const handleCompositionUpdate = (event) => {
    var _a2;
    emit2 == null ? void 0 : emit2("compositionupdate", event);
    const text = (_a2 = event.target) == null ? void 0 : _a2.value;
    const lastCharacter = text[text.length - 1] || "";
    isComposing.value = !isKorean(lastCharacter);
  };
  const handleCompositionEnd = (event) => {
    emit2 == null ? void 0 : emit2("compositionend", event);
    if (isComposing.value) {
      isComposing.value = false;
      nextTick(() => afterComposition(event));
    }
  };
  const handleComposition = (event) => {
    event.type === "compositionend" ? handleCompositionEnd(event) : handleCompositionUpdate(event);
  };
  return {
    isComposing,
    handleComposition,
    handleCompositionStart,
    handleCompositionUpdate,
    handleCompositionEnd
  };
}
function useCursor(input) {
  let selectionInfo;
  function recordCursor() {
    if (input.value == void 0)
      return;
    const { selectionStart, selectionEnd, value } = input.value;
    if (selectionStart == null || selectionEnd == null)
      return;
    const beforeTxt = value.slice(0, Math.max(0, selectionStart));
    const afterTxt = value.slice(Math.max(0, selectionEnd));
    selectionInfo = {
      selectionStart,
      selectionEnd,
      value,
      beforeTxt,
      afterTxt
    };
  }
  function setCursor() {
    if (input.value == void 0 || selectionInfo == void 0)
      return;
    const { value } = input.value;
    const { beforeTxt, afterTxt, selectionStart } = selectionInfo;
    if (beforeTxt == void 0 || afterTxt == void 0 || selectionStart == void 0)
      return;
    let startPos = value.length;
    if (value.endsWith(afterTxt)) {
      startPos = value.length - afterTxt.length;
    } else if (value.startsWith(beforeTxt)) {
      startPos = beforeTxt.length;
    } else {
      const beforeLastChar = beforeTxt[selectionStart - 1];
      const newIndex = value.indexOf(beforeLastChar, selectionStart - 1);
      if (newIndex !== -1) {
        startPos = newIndex + 1;
      }
    }
    input.value.setSelectionRange(startPos, startPos);
  }
  return [recordCursor, setCursor];
}
const __default__$f = /* @__PURE__ */ defineComponent({
  name: "ElInput",
  inheritAttrs: false
});
const _sfc_main$k = /* @__PURE__ */ defineComponent({
  ...__default__$f,
  props: inputProps,
  emits: inputEmits,
  setup(__props, { expose, emit: emit2 }) {
    const props = __props;
    const rawAttrs = useAttrs$1();
    const attrs = useAttrs();
    const slots = useSlots();
    const containerKls = computed(() => [
      props.type === "textarea" ? nsTextarea.b() : nsInput.b(),
      nsInput.m(inputSize.value),
      nsInput.is("disabled", inputDisabled.value),
      nsInput.is("exceed", inputExceed.value),
      {
        [nsInput.b("group")]: slots.prepend || slots.append,
        [nsInput.m("prefix")]: slots.prefix || props.prefixIcon,
        [nsInput.m("suffix")]: slots.suffix || props.suffixIcon || props.clearable || props.showPassword,
        [nsInput.bm("suffix", "password-clear")]: showClear.value && showPwdVisible.value,
        [nsInput.b("hidden")]: props.type === "hidden"
      },
      rawAttrs.class
    ]);
    const wrapperKls = computed(() => [
      nsInput.e("wrapper"),
      nsInput.is("focus", isFocused.value)
    ]);
    const { form: elForm, formItem: elFormItem } = useFormItem();
    const { inputId } = useFormItemInputId(props, {
      formItemContext: elFormItem
    });
    const inputSize = useFormSize();
    const inputDisabled = useFormDisabled();
    const nsInput = useNamespace("input");
    const nsTextarea = useNamespace("textarea");
    const input = shallowRef();
    const textarea = shallowRef();
    const hovering = ref(false);
    const passwordVisible = ref(false);
    const countStyle = ref();
    const textareaCalcStyle = shallowRef(props.inputStyle);
    const _ref = computed(() => input.value || textarea.value);
    const { wrapperRef, isFocused, handleFocus, handleBlur } = useFocusController(_ref, {
      beforeFocus() {
        return inputDisabled.value;
      },
      afterBlur() {
        var _a2;
        if (props.validateEvent) {
          (_a2 = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a2.call(elFormItem, "blur").catch((err) => debugWarn());
        }
      }
    });
    const needStatusIcon = computed(() => {
      var _a2;
      return (_a2 = elForm == null ? void 0 : elForm.statusIcon) != null ? _a2 : false;
    });
    const validateState = computed(() => (elFormItem == null ? void 0 : elFormItem.validateState) || "");
    const validateIcon = computed(() => validateState.value && ValidateComponentsMap[validateState.value]);
    const passwordIcon = computed(() => passwordVisible.value ? view_default : hide_default);
    const containerStyle = computed(() => [
      rawAttrs.style
    ]);
    const textareaStyle = computed(() => [
      props.inputStyle,
      textareaCalcStyle.value,
      { resize: props.resize }
    ]);
    const nativeInputValue = computed(() => isNil(props.modelValue) ? "" : String(props.modelValue));
    const showClear = computed(() => props.clearable && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (isFocused.value || hovering.value));
    const showPwdVisible = computed(() => props.showPassword && !inputDisabled.value && !!nativeInputValue.value && (!!nativeInputValue.value || isFocused.value));
    const isWordLimitVisible = computed(() => props.showWordLimit && !!props.maxlength && (props.type === "text" || props.type === "textarea") && !inputDisabled.value && !props.readonly && !props.showPassword);
    const textLength = computed(() => nativeInputValue.value.length);
    const inputExceed = computed(() => !!isWordLimitVisible.value && textLength.value > Number(props.maxlength));
    const suffixVisible = computed(() => !!slots.suffix || !!props.suffixIcon || showClear.value || props.showPassword || isWordLimitVisible.value || !!validateState.value && needStatusIcon.value);
    const [recordCursor, setCursor] = useCursor(input);
    useResizeObserver(textarea, (entries) => {
      onceInitSizeTextarea();
      if (!isWordLimitVisible.value || props.resize !== "both")
        return;
      const entry = entries[0];
      const { width } = entry.contentRect;
      countStyle.value = {
        right: `calc(100% - ${width + 15 + 6}px)`
      };
    });
    const resizeTextarea = () => {
      const { type: type4, autosize } = props;
      if (!isClient || type4 !== "textarea" || !textarea.value)
        return;
      if (autosize) {
        const minRows = isObject$3(autosize) ? autosize.minRows : void 0;
        const maxRows = isObject$3(autosize) ? autosize.maxRows : void 0;
        const textareaStyle2 = calcTextareaHeight(textarea.value, minRows, maxRows);
        textareaCalcStyle.value = {
          overflowY: "hidden",
          ...textareaStyle2
        };
        nextTick(() => {
          textarea.value.offsetHeight;
          textareaCalcStyle.value = textareaStyle2;
        });
      } else {
        textareaCalcStyle.value = {
          minHeight: calcTextareaHeight(textarea.value).minHeight
        };
      }
    };
    const createOnceInitResize = (resizeTextarea2) => {
      let isInit = false;
      return () => {
        var _a2;
        if (isInit || !props.autosize)
          return;
        const isElHidden = ((_a2 = textarea.value) == null ? void 0 : _a2.offsetParent) === null;
        if (!isElHidden) {
          resizeTextarea2();
          isInit = true;
        }
      };
    };
    const onceInitSizeTextarea = createOnceInitResize(resizeTextarea);
    const setNativeInputValue = () => {
      const input2 = _ref.value;
      const formatterValue = props.formatter ? props.formatter(nativeInputValue.value) : nativeInputValue.value;
      if (!input2 || input2.value === formatterValue)
        return;
      input2.value = formatterValue;
    };
    const handleInput = async (event) => {
      recordCursor();
      let { value } = event.target;
      if (props.formatter && props.parser) {
        value = props.parser(value);
      }
      if (isComposing.value)
        return;
      if (value === nativeInputValue.value) {
        setNativeInputValue();
        return;
      }
      emit2(UPDATE_MODEL_EVENT, value);
      emit2("input", value);
      await nextTick();
      setNativeInputValue();
      setCursor();
    };
    const handleChange = (event) => {
      let { value } = event.target;
      if (props.formatter && props.parser) {
        value = props.parser(value);
      }
      emit2("change", value);
    };
    const {
      isComposing,
      handleCompositionStart,
      handleCompositionUpdate,
      handleCompositionEnd
    } = useComposition({ emit: emit2, afterComposition: handleInput });
    const handlePasswordVisible = () => {
      recordCursor();
      passwordVisible.value = !passwordVisible.value;
      setTimeout(setCursor);
    };
    const focus = () => {
      var _a2;
      return (_a2 = _ref.value) == null ? void 0 : _a2.focus();
    };
    const blur = () => {
      var _a2;
      return (_a2 = _ref.value) == null ? void 0 : _a2.blur();
    };
    const handleMouseLeave = (evt) => {
      hovering.value = false;
      emit2("mouseleave", evt);
    };
    const handleMouseEnter = (evt) => {
      hovering.value = true;
      emit2("mouseenter", evt);
    };
    const handleKeydown = (evt) => {
      emit2("keydown", evt);
    };
    const select = () => {
      var _a2;
      (_a2 = _ref.value) == null ? void 0 : _a2.select();
    };
    const clear = () => {
      emit2(UPDATE_MODEL_EVENT, "");
      emit2("change", "");
      emit2("clear");
      emit2("input", "");
    };
    watch(() => props.modelValue, () => {
      var _a2;
      nextTick(() => resizeTextarea());
      if (props.validateEvent) {
        (_a2 = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a2.call(elFormItem, "change").catch((err) => debugWarn());
      }
    });
    watch(nativeInputValue, () => setNativeInputValue());
    watch(() => props.type, async () => {
      await nextTick();
      setNativeInputValue();
      resizeTextarea();
    });
    onMounted(() => {
      if (!props.formatter && props.parser)
        ;
      setNativeInputValue();
      nextTick(resizeTextarea);
    });
    expose({
      input,
      textarea,
      ref: _ref,
      textareaStyle,
      autosize: toRef(props, "autosize"),
      isComposing,
      focus,
      blur,
      select,
      clear,
      resizeTextarea
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([
          unref(containerKls),
          {
            [unref(nsInput).bm("group", "append")]: _ctx.$slots.append,
            [unref(nsInput).bm("group", "prepend")]: _ctx.$slots.prepend
          }
        ]),
        style: normalizeStyle(unref(containerStyle)),
        onMouseenter: handleMouseEnter,
        onMouseleave: handleMouseLeave
      }, [
        createCommentVNode(" input "),
        _ctx.type !== "textarea" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          createCommentVNode(" prepend slot "),
          _ctx.$slots.prepend ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(unref(nsInput).be("group", "prepend"))
          }, [
            renderSlot(_ctx.$slots, "prepend")
          ], 2)) : createCommentVNode("v-if", true),
          createBaseVNode("div", {
            ref_key: "wrapperRef",
            ref: wrapperRef,
            class: normalizeClass(unref(wrapperKls))
          }, [
            createCommentVNode(" prefix slot "),
            _ctx.$slots.prefix || _ctx.prefixIcon ? (openBlock(), createElementBlock("span", {
              key: 0,
              class: normalizeClass(unref(nsInput).e("prefix"))
            }, [
              createBaseVNode("span", {
                class: normalizeClass(unref(nsInput).e("prefix-inner"))
              }, [
                renderSlot(_ctx.$slots, "prefix"),
                _ctx.prefixIcon ? (openBlock(), createBlock(unref(ElIcon), {
                  key: 0,
                  class: normalizeClass(unref(nsInput).e("icon"))
                }, {
                  default: withCtx(() => [
                    (openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon)))
                  ]),
                  _: 1
                }, 8, ["class"])) : createCommentVNode("v-if", true)
              ], 2)
            ], 2)) : createCommentVNode("v-if", true),
            createBaseVNode("input", mergeProps({
              id: unref(inputId),
              ref_key: "input",
              ref: input,
              class: unref(nsInput).e("inner")
            }, unref(attrs), {
              minlength: _ctx.minlength,
              maxlength: _ctx.maxlength,
              type: _ctx.showPassword ? passwordVisible.value ? "text" : "password" : _ctx.type,
              disabled: unref(inputDisabled),
              readonly: _ctx.readonly,
              autocomplete: _ctx.autocomplete,
              tabindex: _ctx.tabindex,
              "aria-label": _ctx.ariaLabel,
              placeholder: _ctx.placeholder,
              style: _ctx.inputStyle,
              form: _ctx.form,
              autofocus: _ctx.autofocus,
              role: _ctx.containerRole,
              onCompositionstart: unref(handleCompositionStart),
              onCompositionupdate: unref(handleCompositionUpdate),
              onCompositionend: unref(handleCompositionEnd),
              onInput: handleInput,
              onChange: handleChange,
              onKeydown: handleKeydown
            }), null, 16, ["id", "minlength", "maxlength", "type", "disabled", "readonly", "autocomplete", "tabindex", "aria-label", "placeholder", "form", "autofocus", "role", "onCompositionstart", "onCompositionupdate", "onCompositionend"]),
            createCommentVNode(" suffix slot "),
            unref(suffixVisible) ? (openBlock(), createElementBlock("span", {
              key: 1,
              class: normalizeClass(unref(nsInput).e("suffix"))
            }, [
              createBaseVNode("span", {
                class: normalizeClass(unref(nsInput).e("suffix-inner"))
              }, [
                !unref(showClear) || !unref(showPwdVisible) || !unref(isWordLimitVisible) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                  renderSlot(_ctx.$slots, "suffix"),
                  _ctx.suffixIcon ? (openBlock(), createBlock(unref(ElIcon), {
                    key: 0,
                    class: normalizeClass(unref(nsInput).e("icon"))
                  }, {
                    default: withCtx(() => [
                      (openBlock(), createBlock(resolveDynamicComponent(_ctx.suffixIcon)))
                    ]),
                    _: 1
                  }, 8, ["class"])) : createCommentVNode("v-if", true)
                ], 64)) : createCommentVNode("v-if", true),
                unref(showClear) ? (openBlock(), createBlock(unref(ElIcon), {
                  key: 1,
                  class: normalizeClass([unref(nsInput).e("icon"), unref(nsInput).e("clear")]),
                  onMousedown: withModifiers(unref(NOOP), ["prevent"]),
                  onClick: clear
                }, {
                  default: withCtx(() => [
                    createVNode(unref(circle_close_default))
                  ]),
                  _: 1
                }, 8, ["class", "onMousedown"])) : createCommentVNode("v-if", true),
                unref(showPwdVisible) ? (openBlock(), createBlock(unref(ElIcon), {
                  key: 2,
                  class: normalizeClass([unref(nsInput).e("icon"), unref(nsInput).e("password")]),
                  onClick: handlePasswordVisible
                }, {
                  default: withCtx(() => [
                    (openBlock(), createBlock(resolveDynamicComponent(unref(passwordIcon))))
                  ]),
                  _: 1
                }, 8, ["class"])) : createCommentVNode("v-if", true),
                unref(isWordLimitVisible) ? (openBlock(), createElementBlock("span", {
                  key: 3,
                  class: normalizeClass(unref(nsInput).e("count"))
                }, [
                  createBaseVNode("span", {
                    class: normalizeClass(unref(nsInput).e("count-inner"))
                  }, toDisplayString$1(unref(textLength)) + " / " + toDisplayString$1(_ctx.maxlength), 3)
                ], 2)) : createCommentVNode("v-if", true),
                unref(validateState) && unref(validateIcon) && unref(needStatusIcon) ? (openBlock(), createBlock(unref(ElIcon), {
                  key: 4,
                  class: normalizeClass([
                    unref(nsInput).e("icon"),
                    unref(nsInput).e("validateIcon"),
                    unref(nsInput).is("loading", unref(validateState) === "validating")
                  ])
                }, {
                  default: withCtx(() => [
                    (openBlock(), createBlock(resolveDynamicComponent(unref(validateIcon))))
                  ]),
                  _: 1
                }, 8, ["class"])) : createCommentVNode("v-if", true)
              ], 2)
            ], 2)) : createCommentVNode("v-if", true)
          ], 2),
          createCommentVNode(" append slot "),
          _ctx.$slots.append ? (openBlock(), createElementBlock("div", {
            key: 1,
            class: normalizeClass(unref(nsInput).be("group", "append"))
          }, [
            renderSlot(_ctx.$slots, "append")
          ], 2)) : createCommentVNode("v-if", true)
        ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          createCommentVNode(" textarea "),
          createBaseVNode("textarea", mergeProps({
            id: unref(inputId),
            ref_key: "textarea",
            ref: textarea,
            class: [unref(nsTextarea).e("inner"), unref(nsInput).is("focus", unref(isFocused))]
          }, unref(attrs), {
            minlength: _ctx.minlength,
            maxlength: _ctx.maxlength,
            tabindex: _ctx.tabindex,
            disabled: unref(inputDisabled),
            readonly: _ctx.readonly,
            autocomplete: _ctx.autocomplete,
            style: unref(textareaStyle),
            "aria-label": _ctx.ariaLabel,
            placeholder: _ctx.placeholder,
            form: _ctx.form,
            autofocus: _ctx.autofocus,
            rows: _ctx.rows,
            role: _ctx.containerRole,
            onCompositionstart: unref(handleCompositionStart),
            onCompositionupdate: unref(handleCompositionUpdate),
            onCompositionend: unref(handleCompositionEnd),
            onInput: handleInput,
            onFocus: unref(handleFocus),
            onBlur: unref(handleBlur),
            onChange: handleChange,
            onKeydown: handleKeydown
          }), null, 16, ["id", "minlength", "maxlength", "tabindex", "disabled", "readonly", "autocomplete", "aria-label", "placeholder", "form", "autofocus", "rows", "role", "onCompositionstart", "onCompositionupdate", "onCompositionend", "onFocus", "onBlur"]),
          unref(isWordLimitVisible) ? (openBlock(), createElementBlock("span", {
            key: 0,
            style: normalizeStyle(countStyle.value),
            class: normalizeClass(unref(nsInput).e("count"))
          }, toDisplayString$1(unref(textLength)) + " / " + toDisplayString$1(_ctx.maxlength), 7)) : createCommentVNode("v-if", true)
        ], 64))
      ], 38);
    };
  }
});
var Input = /* @__PURE__ */ _export_sfc$1(_sfc_main$k, [["__file", "input.vue"]]);
const ElInput = withInstall(Input);
const POPPER_INJECTION_KEY = Symbol("popper");
const POPPER_CONTENT_INJECTION_KEY = Symbol("popperContent");
const roleTypes = [
  "dialog",
  "grid",
  "group",
  "listbox",
  "menu",
  "navigation",
  "tooltip",
  "tree"
];
const popperProps = buildProps({
  role: {
    type: String,
    values: roleTypes,
    default: "tooltip"
  }
});
const __default__$e = /* @__PURE__ */ defineComponent({
  name: "ElPopper",
  inheritAttrs: false
});
const _sfc_main$j = /* @__PURE__ */ defineComponent({
  ...__default__$e,
  props: popperProps,
  setup(__props, { expose }) {
    const props = __props;
    const triggerRef = ref();
    const popperInstanceRef = ref();
    const contentRef = ref();
    const referenceRef = ref();
    const role = computed(() => props.role);
    const popperProvides = {
      triggerRef,
      popperInstanceRef,
      contentRef,
      referenceRef,
      role
    };
    expose(popperProvides);
    provide(POPPER_INJECTION_KEY, popperProvides);
    return (_ctx, _cache) => {
      return renderSlot(_ctx.$slots, "default");
    };
  }
});
var Popper = /* @__PURE__ */ _export_sfc$1(_sfc_main$j, [["__file", "popper.vue"]]);
const popperArrowProps = buildProps({
  arrowOffset: {
    type: Number,
    default: 5
  }
});
const __default__$d = /* @__PURE__ */ defineComponent({
  name: "ElPopperArrow",
  inheritAttrs: false
});
const _sfc_main$i = /* @__PURE__ */ defineComponent({
  ...__default__$d,
  props: popperArrowProps,
  setup(__props, { expose }) {
    const props = __props;
    const ns2 = useNamespace("popper");
    const { arrowOffset, arrowRef, arrowStyle } = inject(POPPER_CONTENT_INJECTION_KEY, void 0);
    watch(() => props.arrowOffset, (val) => {
      arrowOffset.value = val;
    });
    onBeforeUnmount(() => {
      arrowRef.value = void 0;
    });
    expose({
      arrowRef
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("span", {
        ref_key: "arrowRef",
        ref: arrowRef,
        class: normalizeClass(unref(ns2).e("arrow")),
        style: normalizeStyle(unref(arrowStyle)),
        "data-popper-arrow": ""
      }, null, 6);
    };
  }
});
var ElPopperArrow = /* @__PURE__ */ _export_sfc$1(_sfc_main$i, [["__file", "arrow.vue"]]);
const popperTriggerProps = buildProps({
  virtualRef: {
    type: definePropType(Object)
  },
  virtualTriggering: Boolean,
  onMouseenter: {
    type: definePropType(Function)
  },
  onMouseleave: {
    type: definePropType(Function)
  },
  onClick: {
    type: definePropType(Function)
  },
  onKeydown: {
    type: definePropType(Function)
  },
  onFocus: {
    type: definePropType(Function)
  },
  onBlur: {
    type: definePropType(Function)
  },
  onContextmenu: {
    type: definePropType(Function)
  },
  id: String,
  open: Boolean
});
const FORWARD_REF_INJECTION_KEY = Symbol("elForwardRef");
const useForwardRef = (forwardRef) => {
  const setForwardRef = (el2) => {
    forwardRef.value = el2;
  };
  provide(FORWARD_REF_INJECTION_KEY, {
    setForwardRef
  });
};
const useForwardRefDirective = (setForwardRef) => {
  return {
    mounted(el2) {
      setForwardRef(el2);
    },
    updated(el2) {
      setForwardRef(el2);
    },
    unmounted() {
      setForwardRef(null);
    }
  };
};
const FOCUSABLE_ELEMENT_SELECTORS = `a[href],button:not([disabled]),button:not([hidden]),:not([tabindex="-1"]),input:not([disabled]),input:not([type="hidden"]),select:not([disabled]),textarea:not([disabled])`;
const isVisible = (element) => {
  const computed2 = getComputedStyle(element);
  return computed2.position === "fixed" ? false : element.offsetParent !== null;
};
const obtainAllFocusableElements$1 = (element) => {
  return Array.from(element.querySelectorAll(FOCUSABLE_ELEMENT_SELECTORS)).filter((item) => isFocusable(item) && isVisible(item));
};
const isFocusable = (element) => {
  if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute("tabIndex") !== null) {
    return true;
  }
  if (element.tabIndex < 0 || element.hasAttribute("disabled") || element.getAttribute("aria-disabled") === "true") {
    return false;
  }
  switch (element.nodeName) {
    case "A": {
      return !!element.href && element.rel !== "ignore";
    }
    case "INPUT": {
      return !(element.type === "hidden" || element.type === "file");
    }
    case "BUTTON":
    case "SELECT":
    case "TEXTAREA": {
      return true;
    }
    default: {
      return false;
    }
  }
};
const triggerEvent = function(elm, name, ...opts) {
  let eventName;
  if (name.includes("mouse") || name.includes("click")) {
    eventName = "MouseEvents";
  } else if (name.includes("key")) {
    eventName = "KeyboardEvent";
  } else {
    eventName = "HTMLEvents";
  }
  const evt = document.createEvent(eventName);
  evt.initEvent(name, ...opts);
  elm.dispatchEvent(evt);
  return elm;
};
const NAME = "ElOnlyChild";
const OnlyChild = /* @__PURE__ */ defineComponent({
  name: NAME,
  setup(_, {
    slots,
    attrs
  }) {
    var _a2;
    const forwardRefInjection = inject(FORWARD_REF_INJECTION_KEY);
    const forwardRefDirective = useForwardRefDirective((_a2 = forwardRefInjection == null ? void 0 : forwardRefInjection.setForwardRef) != null ? _a2 : NOOP);
    return () => {
      var _a22;
      const defaultSlot = (_a22 = slots.default) == null ? void 0 : _a22.call(slots, attrs);
      if (!defaultSlot)
        return null;
      if (defaultSlot.length > 1) {
        return null;
      }
      const firstLegitNode = findFirstLegitChild(defaultSlot);
      if (!firstLegitNode) {
        return null;
      }
      return withDirectives(cloneVNode(firstLegitNode, attrs), [[forwardRefDirective]]);
    };
  }
});
function findFirstLegitChild(node) {
  if (!node)
    return null;
  const children = node;
  for (const child of children) {
    if (isObject$3(child)) {
      switch (child.type) {
        case Comment:
          continue;
        case Text:
        case "svg":
          return wrapTextContent(child);
        case Fragment:
          return findFirstLegitChild(child.children);
        default:
          return child;
      }
    }
    return wrapTextContent(child);
  }
  return null;
}
function wrapTextContent(s2) {
  const ns2 = useNamespace("only-child");
  return createVNode("span", {
    "class": ns2.e("content")
  }, [s2]);
}
const __default__$c = /* @__PURE__ */ defineComponent({
  name: "ElPopperTrigger",
  inheritAttrs: false
});
const _sfc_main$h = /* @__PURE__ */ defineComponent({
  ...__default__$c,
  props: popperTriggerProps,
  setup(__props, { expose }) {
    const props = __props;
    const { role, triggerRef } = inject(POPPER_INJECTION_KEY, void 0);
    useForwardRef(triggerRef);
    const ariaControls = computed(() => {
      return ariaHaspopup.value ? props.id : void 0;
    });
    const ariaDescribedby = computed(() => {
      if (role && role.value === "tooltip") {
        return props.open && props.id ? props.id : void 0;
      }
      return void 0;
    });
    const ariaHaspopup = computed(() => {
      if (role && role.value !== "tooltip") {
        return role.value;
      }
      return void 0;
    });
    const ariaExpanded = computed(() => {
      return ariaHaspopup.value ? `${props.open}` : void 0;
    });
    let virtualTriggerAriaStopWatch = void 0;
    const TRIGGER_ELE_EVENTS = [
      "onMouseenter",
      "onMouseleave",
      "onClick",
      "onKeydown",
      "onFocus",
      "onBlur",
      "onContextmenu"
    ];
    onMounted(() => {
      watch(() => props.virtualRef, (virtualEl) => {
        if (virtualEl) {
          triggerRef.value = unrefElement(virtualEl);
        }
      }, {
        immediate: true
      });
      watch(triggerRef, (el2, prevEl) => {
        virtualTriggerAriaStopWatch == null ? void 0 : virtualTriggerAriaStopWatch();
        virtualTriggerAriaStopWatch = void 0;
        if (isElement(el2)) {
          TRIGGER_ELE_EVENTS.forEach((eventName) => {
            var _a2;
            const handler2 = props[eventName];
            if (handler2) {
              el2.addEventListener(eventName.slice(2).toLowerCase(), handler2);
              (_a2 = prevEl == null ? void 0 : prevEl.removeEventListener) == null ? void 0 : _a2.call(prevEl, eventName.slice(2).toLowerCase(), handler2);
            }
          });
          if (isFocusable(el2)) {
            virtualTriggerAriaStopWatch = watch([ariaControls, ariaDescribedby, ariaHaspopup, ariaExpanded], (watches) => {
              [
                "aria-controls",
                "aria-describedby",
                "aria-haspopup",
                "aria-expanded"
              ].forEach((key, idx) => {
                isNil(watches[idx]) ? el2.removeAttribute(key) : el2.setAttribute(key, watches[idx]);
              });
            }, { immediate: true });
          }
        }
        if (isElement(prevEl) && isFocusable(prevEl)) {
          [
            "aria-controls",
            "aria-describedby",
            "aria-haspopup",
            "aria-expanded"
          ].forEach((key) => prevEl.removeAttribute(key));
        }
      }, {
        immediate: true
      });
    });
    onBeforeUnmount(() => {
      virtualTriggerAriaStopWatch == null ? void 0 : virtualTriggerAriaStopWatch();
      virtualTriggerAriaStopWatch = void 0;
      if (triggerRef.value && isElement(triggerRef.value)) {
        const el2 = triggerRef.value;
        TRIGGER_ELE_EVENTS.forEach((eventName) => {
          const handler2 = props[eventName];
          if (handler2) {
            el2.removeEventListener(eventName.slice(2).toLowerCase(), handler2);
          }
        });
        triggerRef.value = void 0;
      }
    });
    expose({
      triggerRef
    });
    return (_ctx, _cache) => {
      return !_ctx.virtualTriggering ? (openBlock(), createBlock(unref(OnlyChild), mergeProps({ key: 0 }, _ctx.$attrs, {
        "aria-controls": unref(ariaControls),
        "aria-describedby": unref(ariaDescribedby),
        "aria-expanded": unref(ariaExpanded),
        "aria-haspopup": unref(ariaHaspopup)
      }), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16, ["aria-controls", "aria-describedby", "aria-expanded", "aria-haspopup"])) : createCommentVNode("v-if", true);
    };
  }
});
var ElPopperTrigger = /* @__PURE__ */ _export_sfc$1(_sfc_main$h, [["__file", "trigger.vue"]]);
const FOCUS_AFTER_TRAPPED = "focus-trap.focus-after-trapped";
const FOCUS_AFTER_RELEASED = "focus-trap.focus-after-released";
const FOCUSOUT_PREVENTED = "focus-trap.focusout-prevented";
const FOCUS_AFTER_TRAPPED_OPTS = {
  cancelable: true,
  bubbles: false
};
const FOCUSOUT_PREVENTED_OPTS = {
  cancelable: true,
  bubbles: false
};
const ON_TRAP_FOCUS_EVT = "focusAfterTrapped";
const ON_RELEASE_FOCUS_EVT = "focusAfterReleased";
const FOCUS_TRAP_INJECTION_KEY = Symbol("elFocusTrap");
const focusReason = ref();
const lastUserFocusTimestamp = ref(0);
const lastAutomatedFocusTimestamp = ref(0);
let focusReasonUserCount = 0;
const obtainAllFocusableElements = (element) => {
  const nodes = [];
  const walker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT, {
    acceptNode: (node) => {
      const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
      if (node.disabled || node.hidden || isHiddenInput)
        return NodeFilter.FILTER_SKIP;
      return node.tabIndex >= 0 || node === document.activeElement ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  });
  while (walker.nextNode())
    nodes.push(walker.currentNode);
  return nodes;
};
const getVisibleElement = (elements, container) => {
  for (const element of elements) {
    if (!isHidden(element, container))
      return element;
  }
};
const isHidden = (element, container) => {
  if (getComputedStyle(element).visibility === "hidden")
    return true;
  while (element) {
    if (container && element === container)
      return false;
    if (getComputedStyle(element).display === "none")
      return true;
    element = element.parentElement;
  }
  return false;
};
const getEdges = (container) => {
  const focusable = obtainAllFocusableElements(container);
  const first = getVisibleElement(focusable, container);
  const last = getVisibleElement(focusable.reverse(), container);
  return [first, last];
};
const isSelectable = (element) => {
  return element instanceof HTMLInputElement && "select" in element;
};
const tryFocus = (element, shouldSelect) => {
  if (element && element.focus) {
    const prevFocusedElement = document.activeElement;
    let cleanup = false;
    if (isElement(element) && !isFocusable(element) && !element.getAttribute("tabindex")) {
      element.setAttribute("tabindex", "-1");
      cleanup = true;
    }
    element.focus({ preventScroll: true });
    lastAutomatedFocusTimestamp.value = window.performance.now();
    if (element !== prevFocusedElement && isSelectable(element) && shouldSelect) {
      element.select();
    }
    if (isElement(element) && cleanup) {
      element.removeAttribute("tabindex");
    }
  }
};
function removeFromStack(list, item) {
  const copy2 = [...list];
  const idx = list.indexOf(item);
  if (idx !== -1) {
    copy2.splice(idx, 1);
  }
  return copy2;
}
const createFocusableStack = () => {
  let stack2 = [];
  const push = (layer) => {
    const currentLayer = stack2[0];
    if (currentLayer && layer !== currentLayer) {
      currentLayer.pause();
    }
    stack2 = removeFromStack(stack2, layer);
    stack2.unshift(layer);
  };
  const remove2 = (layer) => {
    var _a2, _b2;
    stack2 = removeFromStack(stack2, layer);
    (_b2 = (_a2 = stack2[0]) == null ? void 0 : _a2.resume) == null ? void 0 : _b2.call(_a2);
  };
  return {
    push,
    remove: remove2
  };
};
const focusFirstDescendant = (elements, shouldSelect = false) => {
  const prevFocusedElement = document.activeElement;
  for (const element of elements) {
    tryFocus(element, shouldSelect);
    if (document.activeElement !== prevFocusedElement)
      return;
  }
};
const focusableStack = createFocusableStack();
const isFocusCausedByUserEvent = () => {
  return lastUserFocusTimestamp.value > lastAutomatedFocusTimestamp.value;
};
const notifyFocusReasonPointer = () => {
  focusReason.value = "pointer";
  lastUserFocusTimestamp.value = window.performance.now();
};
const notifyFocusReasonKeydown = () => {
  focusReason.value = "keyboard";
  lastUserFocusTimestamp.value = window.performance.now();
};
const useFocusReason = () => {
  onMounted(() => {
    if (focusReasonUserCount === 0) {
      document.addEventListener("mousedown", notifyFocusReasonPointer);
      document.addEventListener("touchstart", notifyFocusReasonPointer);
      document.addEventListener("keydown", notifyFocusReasonKeydown);
    }
    focusReasonUserCount++;
  });
  onBeforeUnmount(() => {
    focusReasonUserCount--;
    if (focusReasonUserCount <= 0) {
      document.removeEventListener("mousedown", notifyFocusReasonPointer);
      document.removeEventListener("touchstart", notifyFocusReasonPointer);
      document.removeEventListener("keydown", notifyFocusReasonKeydown);
    }
  });
  return {
    focusReason,
    lastUserFocusTimestamp,
    lastAutomatedFocusTimestamp
  };
};
const createFocusOutPreventedEvent = (detail) => {
  return new CustomEvent(FOCUSOUT_PREVENTED, {
    ...FOCUSOUT_PREVENTED_OPTS,
    detail
  });
};
const EVENT_CODE = {
  tab: "Tab",
  enter: "Enter",
  space: "Space",
  left: "ArrowLeft",
  up: "ArrowUp",
  right: "ArrowRight",
  down: "ArrowDown",
  esc: "Escape",
  delete: "Delete",
  backspace: "Backspace",
  numpadEnter: "NumpadEnter",
  pageUp: "PageUp",
  pageDown: "PageDown",
  home: "Home",
  end: "End"
};
let registeredEscapeHandlers = [];
const cachedHandler = (event) => {
  if (event.code === EVENT_CODE.esc) {
    registeredEscapeHandlers.forEach((registeredHandler) => registeredHandler(event));
  }
};
const useEscapeKeydown = (handler2) => {
  onMounted(() => {
    if (registeredEscapeHandlers.length === 0) {
      document.addEventListener("keydown", cachedHandler);
    }
    if (isClient)
      registeredEscapeHandlers.push(handler2);
  });
  onBeforeUnmount(() => {
    registeredEscapeHandlers = registeredEscapeHandlers.filter((registeredHandler) => registeredHandler !== handler2);
    if (registeredEscapeHandlers.length === 0) {
      if (isClient)
        document.removeEventListener("keydown", cachedHandler);
    }
  });
};
const _sfc_main$g = /* @__PURE__ */ defineComponent({
  name: "ElFocusTrap",
  inheritAttrs: false,
  props: {
    loop: Boolean,
    trapped: Boolean,
    focusTrapEl: Object,
    focusStartEl: {
      type: [Object, String],
      default: "first"
    }
  },
  emits: [
    ON_TRAP_FOCUS_EVT,
    ON_RELEASE_FOCUS_EVT,
    "focusin",
    "focusout",
    "focusout-prevented",
    "release-requested"
  ],
  setup(props, { emit: emit2 }) {
    const forwardRef = ref();
    let lastFocusBeforeTrapped;
    let lastFocusAfterTrapped;
    const { focusReason: focusReason2 } = useFocusReason();
    useEscapeKeydown((event) => {
      if (props.trapped && !focusLayer.paused) {
        emit2("release-requested", event);
      }
    });
    const focusLayer = {
      paused: false,
      pause() {
        this.paused = true;
      },
      resume() {
        this.paused = false;
      }
    };
    const onKeydown = (e2) => {
      if (!props.loop && !props.trapped)
        return;
      if (focusLayer.paused)
        return;
      const { code, altKey, ctrlKey, metaKey, currentTarget, shiftKey } = e2;
      const { loop } = props;
      const isTabbing = code === EVENT_CODE.tab && !altKey && !ctrlKey && !metaKey;
      const currentFocusingEl = document.activeElement;
      if (isTabbing && currentFocusingEl) {
        const container = currentTarget;
        const [first, last] = getEdges(container);
        const isTabbable = first && last;
        if (!isTabbable) {
          if (currentFocusingEl === container) {
            const focusoutPreventedEvent = createFocusOutPreventedEvent({
              focusReason: focusReason2.value
            });
            emit2("focusout-prevented", focusoutPreventedEvent);
            if (!focusoutPreventedEvent.defaultPrevented) {
              e2.preventDefault();
            }
          }
        } else {
          if (!shiftKey && currentFocusingEl === last) {
            const focusoutPreventedEvent = createFocusOutPreventedEvent({
              focusReason: focusReason2.value
            });
            emit2("focusout-prevented", focusoutPreventedEvent);
            if (!focusoutPreventedEvent.defaultPrevented) {
              e2.preventDefault();
              if (loop)
                tryFocus(first, true);
            }
          } else if (shiftKey && [first, container].includes(currentFocusingEl)) {
            const focusoutPreventedEvent = createFocusOutPreventedEvent({
              focusReason: focusReason2.value
            });
            emit2("focusout-prevented", focusoutPreventedEvent);
            if (!focusoutPreventedEvent.defaultPrevented) {
              e2.preventDefault();
              if (loop)
                tryFocus(last, true);
            }
          }
        }
      }
    };
    provide(FOCUS_TRAP_INJECTION_KEY, {
      focusTrapRef: forwardRef,
      onKeydown
    });
    watch(() => props.focusTrapEl, (focusTrapEl) => {
      if (focusTrapEl) {
        forwardRef.value = focusTrapEl;
      }
    }, { immediate: true });
    watch([forwardRef], ([forwardRef2], [oldForwardRef]) => {
      if (forwardRef2) {
        forwardRef2.addEventListener("keydown", onKeydown);
        forwardRef2.addEventListener("focusin", onFocusIn);
        forwardRef2.addEventListener("focusout", onFocusOut);
      }
      if (oldForwardRef) {
        oldForwardRef.removeEventListener("keydown", onKeydown);
        oldForwardRef.removeEventListener("focusin", onFocusIn);
        oldForwardRef.removeEventListener("focusout", onFocusOut);
      }
    });
    const trapOnFocus = (e2) => {
      emit2(ON_TRAP_FOCUS_EVT, e2);
    };
    const releaseOnFocus = (e2) => emit2(ON_RELEASE_FOCUS_EVT, e2);
    const onFocusIn = (e2) => {
      const trapContainer = unref(forwardRef);
      if (!trapContainer)
        return;
      const target = e2.target;
      const relatedTarget = e2.relatedTarget;
      const isFocusedInTrap = target && trapContainer.contains(target);
      if (!props.trapped) {
        const isPrevFocusedInTrap = relatedTarget && trapContainer.contains(relatedTarget);
        if (!isPrevFocusedInTrap) {
          lastFocusBeforeTrapped = relatedTarget;
        }
      }
      if (isFocusedInTrap)
        emit2("focusin", e2);
      if (focusLayer.paused)
        return;
      if (props.trapped) {
        if (isFocusedInTrap) {
          lastFocusAfterTrapped = target;
        } else {
          tryFocus(lastFocusAfterTrapped, true);
        }
      }
    };
    const onFocusOut = (e2) => {
      const trapContainer = unref(forwardRef);
      if (focusLayer.paused || !trapContainer)
        return;
      if (props.trapped) {
        const relatedTarget = e2.relatedTarget;
        if (!isNil(relatedTarget) && !trapContainer.contains(relatedTarget)) {
          setTimeout(() => {
            if (!focusLayer.paused && props.trapped) {
              const focusoutPreventedEvent = createFocusOutPreventedEvent({
                focusReason: focusReason2.value
              });
              emit2("focusout-prevented", focusoutPreventedEvent);
              if (!focusoutPreventedEvent.defaultPrevented) {
                tryFocus(lastFocusAfterTrapped, true);
              }
            }
          }, 0);
        }
      } else {
        const target = e2.target;
        const isFocusedInTrap = target && trapContainer.contains(target);
        if (!isFocusedInTrap)
          emit2("focusout", e2);
      }
    };
    async function startTrap() {
      await nextTick();
      const trapContainer = unref(forwardRef);
      if (trapContainer) {
        focusableStack.push(focusLayer);
        const prevFocusedElement = trapContainer.contains(document.activeElement) ? lastFocusBeforeTrapped : document.activeElement;
        lastFocusBeforeTrapped = prevFocusedElement;
        const isPrevFocusContained = trapContainer.contains(prevFocusedElement);
        if (!isPrevFocusContained) {
          const focusEvent = new Event(FOCUS_AFTER_TRAPPED, FOCUS_AFTER_TRAPPED_OPTS);
          trapContainer.addEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus);
          trapContainer.dispatchEvent(focusEvent);
          if (!focusEvent.defaultPrevented) {
            nextTick(() => {
              let focusStartEl = props.focusStartEl;
              if (!isString$3(focusStartEl)) {
                tryFocus(focusStartEl);
                if (document.activeElement !== focusStartEl) {
                  focusStartEl = "first";
                }
              }
              if (focusStartEl === "first") {
                focusFirstDescendant(obtainAllFocusableElements(trapContainer), true);
              }
              if (document.activeElement === prevFocusedElement || focusStartEl === "container") {
                tryFocus(trapContainer);
              }
            });
          }
        }
      }
    }
    function stopTrap() {
      const trapContainer = unref(forwardRef);
      if (trapContainer) {
        trapContainer.removeEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus);
        const releasedEvent = new CustomEvent(FOCUS_AFTER_RELEASED, {
          ...FOCUS_AFTER_TRAPPED_OPTS,
          detail: {
            focusReason: focusReason2.value
          }
        });
        trapContainer.addEventListener(FOCUS_AFTER_RELEASED, releaseOnFocus);
        trapContainer.dispatchEvent(releasedEvent);
        if (!releasedEvent.defaultPrevented && (focusReason2.value == "keyboard" || !isFocusCausedByUserEvent() || trapContainer.contains(document.activeElement))) {
          tryFocus(lastFocusBeforeTrapped != null ? lastFocusBeforeTrapped : document.body);
        }
        trapContainer.removeEventListener(FOCUS_AFTER_RELEASED, releaseOnFocus);
        focusableStack.remove(focusLayer);
      }
    }
    onMounted(() => {
      if (props.trapped) {
        startTrap();
      }
      watch(() => props.trapped, (trapped) => {
        if (trapped) {
          startTrap();
        } else {
          stopTrap();
        }
      });
    });
    onBeforeUnmount(() => {
      if (props.trapped) {
        stopTrap();
      }
      if (forwardRef.value) {
        forwardRef.value.removeEventListener("keydown", onKeydown);
        forwardRef.value.removeEventListener("focusin", onFocusIn);
        forwardRef.value.removeEventListener("focusout", onFocusOut);
        forwardRef.value = void 0;
      }
    });
    return {
      onKeydown
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return renderSlot(_ctx.$slots, "default", { handleKeydown: _ctx.onKeydown });
}
var ElFocusTrap = /* @__PURE__ */ _export_sfc$1(_sfc_main$g, [["render", _sfc_render], ["__file", "focus-trap.vue"]]);
var E = "top", R = "bottom", W = "right", P = "left", me = "auto", G = [E, R, W, P], U = "start", J = "end", Xe = "clippingParents", je = "viewport", K = "popper", Ye = "reference", De = G.reduce(function(t2, e2) {
  return t2.concat([e2 + "-" + U, e2 + "-" + J]);
}, []), Ee = [].concat(G, [me]).reduce(function(t2, e2) {
  return t2.concat([e2, e2 + "-" + U, e2 + "-" + J]);
}, []), Ge = "beforeRead", Je = "read", Ke = "afterRead", Qe = "beforeMain", Ze = "main", et = "afterMain", tt = "beforeWrite", nt = "write", rt = "afterWrite", ot = [Ge, Je, Ke, Qe, Ze, et, tt, nt, rt];
function C$1(t2) {
  return t2 ? (t2.nodeName || "").toLowerCase() : null;
}
function H(t2) {
  if (t2 == null)
    return window;
  if (t2.toString() !== "[object Window]") {
    var e2 = t2.ownerDocument;
    return e2 && e2.defaultView || window;
  }
  return t2;
}
function Q(t2) {
  var e2 = H(t2).Element;
  return t2 instanceof e2 || t2 instanceof Element;
}
function B(t2) {
  var e2 = H(t2).HTMLElement;
  return t2 instanceof e2 || t2 instanceof HTMLElement;
}
function Pe(t2) {
  if (typeof ShadowRoot == "undefined")
    return false;
  var e2 = H(t2).ShadowRoot;
  return t2 instanceof e2 || t2 instanceof ShadowRoot;
}
function Mt(t2) {
  var e2 = t2.state;
  Object.keys(e2.elements).forEach(function(n) {
    var r2 = e2.styles[n] || {}, o2 = e2.attributes[n] || {}, i2 = e2.elements[n];
    !B(i2) || !C$1(i2) || (Object.assign(i2.style, r2), Object.keys(o2).forEach(function(a2) {
      var s2 = o2[a2];
      s2 === false ? i2.removeAttribute(a2) : i2.setAttribute(a2, s2 === true ? "" : s2);
    }));
  });
}
function Rt(t2) {
  var e2 = t2.state, n = { popper: { position: e2.options.strategy, left: "0", top: "0", margin: "0" }, arrow: { position: "absolute" }, reference: {} };
  return Object.assign(e2.elements.popper.style, n.popper), e2.styles = n, e2.elements.arrow && Object.assign(e2.elements.arrow.style, n.arrow), function() {
    Object.keys(e2.elements).forEach(function(r2) {
      var o2 = e2.elements[r2], i2 = e2.attributes[r2] || {}, a2 = Object.keys(e2.styles.hasOwnProperty(r2) ? e2.styles[r2] : n[r2]), s2 = a2.reduce(function(f2, c2) {
        return f2[c2] = "", f2;
      }, {});
      !B(o2) || !C$1(o2) || (Object.assign(o2.style, s2), Object.keys(i2).forEach(function(f2) {
        o2.removeAttribute(f2);
      }));
    });
  };
}
var Ae = { name: "applyStyles", enabled: true, phase: "write", fn: Mt, effect: Rt, requires: ["computeStyles"] };
function q(t2) {
  return t2.split("-")[0];
}
var X = Math.max, ve = Math.min, Z = Math.round;
function ee(t2, e2) {
  e2 === void 0 && (e2 = false);
  var n = t2.getBoundingClientRect(), r2 = 1, o2 = 1;
  if (B(t2) && e2) {
    var i2 = t2.offsetHeight, a2 = t2.offsetWidth;
    a2 > 0 && (r2 = Z(n.width) / a2 || 1), i2 > 0 && (o2 = Z(n.height) / i2 || 1);
  }
  return { width: n.width / r2, height: n.height / o2, top: n.top / o2, right: n.right / r2, bottom: n.bottom / o2, left: n.left / r2, x: n.left / r2, y: n.top / o2 };
}
function ke(t2) {
  var e2 = ee(t2), n = t2.offsetWidth, r2 = t2.offsetHeight;
  return Math.abs(e2.width - n) <= 1 && (n = e2.width), Math.abs(e2.height - r2) <= 1 && (r2 = e2.height), { x: t2.offsetLeft, y: t2.offsetTop, width: n, height: r2 };
}
function it(t2, e2) {
  var n = e2.getRootNode && e2.getRootNode();
  if (t2.contains(e2))
    return true;
  if (n && Pe(n)) {
    var r2 = e2;
    do {
      if (r2 && t2.isSameNode(r2))
        return true;
      r2 = r2.parentNode || r2.host;
    } while (r2);
  }
  return false;
}
function N(t2) {
  return H(t2).getComputedStyle(t2);
}
function Wt(t2) {
  return ["table", "td", "th"].indexOf(C$1(t2)) >= 0;
}
function I(t2) {
  return ((Q(t2) ? t2.ownerDocument : t2.document) || window.document).documentElement;
}
function ge(t2) {
  return C$1(t2) === "html" ? t2 : t2.assignedSlot || t2.parentNode || (Pe(t2) ? t2.host : null) || I(t2);
}
function at(t2) {
  return !B(t2) || N(t2).position === "fixed" ? null : t2.offsetParent;
}
function Bt(t2) {
  var e2 = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1, n = navigator.userAgent.indexOf("Trident") !== -1;
  if (n && B(t2)) {
    var r2 = N(t2);
    if (r2.position === "fixed")
      return null;
  }
  var o2 = ge(t2);
  for (Pe(o2) && (o2 = o2.host); B(o2) && ["html", "body"].indexOf(C$1(o2)) < 0; ) {
    var i2 = N(o2);
    if (i2.transform !== "none" || i2.perspective !== "none" || i2.contain === "paint" || ["transform", "perspective"].indexOf(i2.willChange) !== -1 || e2 && i2.willChange === "filter" || e2 && i2.filter && i2.filter !== "none")
      return o2;
    o2 = o2.parentNode;
  }
  return null;
}
function se(t2) {
  for (var e2 = H(t2), n = at(t2); n && Wt(n) && N(n).position === "static"; )
    n = at(n);
  return n && (C$1(n) === "html" || C$1(n) === "body" && N(n).position === "static") ? e2 : n || Bt(t2) || e2;
}
function Le(t2) {
  return ["top", "bottom"].indexOf(t2) >= 0 ? "x" : "y";
}
function fe(t2, e2, n) {
  return X(t2, ve(e2, n));
}
function St(t2, e2, n) {
  var r2 = fe(t2, e2, n);
  return r2 > n ? n : r2;
}
function st() {
  return { top: 0, right: 0, bottom: 0, left: 0 };
}
function ft(t2) {
  return Object.assign({}, st(), t2);
}
function ct(t2, e2) {
  return e2.reduce(function(n, r2) {
    return n[r2] = t2, n;
  }, {});
}
var Tt = function(t2, e2) {
  return t2 = typeof t2 == "function" ? t2(Object.assign({}, e2.rects, { placement: e2.placement })) : t2, ft(typeof t2 != "number" ? t2 : ct(t2, G));
};
function Ht(t2) {
  var e2, n = t2.state, r2 = t2.name, o2 = t2.options, i2 = n.elements.arrow, a2 = n.modifiersData.popperOffsets, s2 = q(n.placement), f2 = Le(s2), c2 = [P, W].indexOf(s2) >= 0, u2 = c2 ? "height" : "width";
  if (!(!i2 || !a2)) {
    var m2 = Tt(o2.padding, n), v2 = ke(i2), l2 = f2 === "y" ? E : P, h2 = f2 === "y" ? R : W, p2 = n.rects.reference[u2] + n.rects.reference[f2] - a2[f2] - n.rects.popper[u2], g2 = a2[f2] - n.rects.reference[f2], x = se(i2), y = x ? f2 === "y" ? x.clientHeight || 0 : x.clientWidth || 0 : 0, $2 = p2 / 2 - g2 / 2, d2 = m2[l2], b = y - v2[u2] - m2[h2], w = y / 2 - v2[u2] / 2 + $2, O = fe(d2, w, b), j = f2;
    n.modifiersData[r2] = (e2 = {}, e2[j] = O, e2.centerOffset = O - w, e2);
  }
}
function Ct(t2) {
  var e2 = t2.state, n = t2.options, r2 = n.element, o2 = r2 === void 0 ? "[data-popper-arrow]" : r2;
  o2 != null && (typeof o2 == "string" && (o2 = e2.elements.popper.querySelector(o2), !o2) || !it(e2.elements.popper, o2) || (e2.elements.arrow = o2));
}
var pt = { name: "arrow", enabled: true, phase: "main", fn: Ht, effect: Ct, requires: ["popperOffsets"], requiresIfExists: ["preventOverflow"] };
function te(t2) {
  return t2.split("-")[1];
}
var qt = { top: "auto", right: "auto", bottom: "auto", left: "auto" };
function Vt(t2) {
  var e2 = t2.x, n = t2.y, r2 = window, o2 = r2.devicePixelRatio || 1;
  return { x: Z(e2 * o2) / o2 || 0, y: Z(n * o2) / o2 || 0 };
}
function ut(t2) {
  var e2, n = t2.popper, r2 = t2.popperRect, o2 = t2.placement, i2 = t2.variation, a2 = t2.offsets, s2 = t2.position, f2 = t2.gpuAcceleration, c2 = t2.adaptive, u2 = t2.roundOffsets, m2 = t2.isFixed, v2 = a2.x, l2 = v2 === void 0 ? 0 : v2, h2 = a2.y, p2 = h2 === void 0 ? 0 : h2, g2 = typeof u2 == "function" ? u2({ x: l2, y: p2 }) : { x: l2, y: p2 };
  l2 = g2.x, p2 = g2.y;
  var x = a2.hasOwnProperty("x"), y = a2.hasOwnProperty("y"), $2 = P, d2 = E, b = window;
  if (c2) {
    var w = se(n), O = "clientHeight", j = "clientWidth";
    if (w === H(n) && (w = I(n), N(w).position !== "static" && s2 === "absolute" && (O = "scrollHeight", j = "scrollWidth")), w = w, o2 === E || (o2 === P || o2 === W) && i2 === J) {
      d2 = R;
      var A2 = m2 && w === b && b.visualViewport ? b.visualViewport.height : w[O];
      p2 -= A2 - r2.height, p2 *= f2 ? 1 : -1;
    }
    if (o2 === P || (o2 === E || o2 === R) && i2 === J) {
      $2 = W;
      var k = m2 && w === b && b.visualViewport ? b.visualViewport.width : w[j];
      l2 -= k - r2.width, l2 *= f2 ? 1 : -1;
    }
  }
  var D = Object.assign({ position: s2 }, c2 && qt), S = u2 === true ? Vt({ x: l2, y: p2 }) : { x: l2, y: p2 };
  if (l2 = S.x, p2 = S.y, f2) {
    var L;
    return Object.assign({}, D, (L = {}, L[d2] = y ? "0" : "", L[$2] = x ? "0" : "", L.transform = (b.devicePixelRatio || 1) <= 1 ? "translate(" + l2 + "px, " + p2 + "px)" : "translate3d(" + l2 + "px, " + p2 + "px, 0)", L));
  }
  return Object.assign({}, D, (e2 = {}, e2[d2] = y ? p2 + "px" : "", e2[$2] = x ? l2 + "px" : "", e2.transform = "", e2));
}
function Nt(t2) {
  var e2 = t2.state, n = t2.options, r2 = n.gpuAcceleration, o2 = r2 === void 0 ? true : r2, i2 = n.adaptive, a2 = i2 === void 0 ? true : i2, s2 = n.roundOffsets, f2 = s2 === void 0 ? true : s2, c2 = { placement: q(e2.placement), variation: te(e2.placement), popper: e2.elements.popper, popperRect: e2.rects.popper, gpuAcceleration: o2, isFixed: e2.options.strategy === "fixed" };
  e2.modifiersData.popperOffsets != null && (e2.styles.popper = Object.assign({}, e2.styles.popper, ut(Object.assign({}, c2, { offsets: e2.modifiersData.popperOffsets, position: e2.options.strategy, adaptive: a2, roundOffsets: f2 })))), e2.modifiersData.arrow != null && (e2.styles.arrow = Object.assign({}, e2.styles.arrow, ut(Object.assign({}, c2, { offsets: e2.modifiersData.arrow, position: "absolute", adaptive: false, roundOffsets: f2 })))), e2.attributes.popper = Object.assign({}, e2.attributes.popper, { "data-popper-placement": e2.placement });
}
var Me = { name: "computeStyles", enabled: true, phase: "beforeWrite", fn: Nt, data: {} }, ye = { passive: true };
function It(t2) {
  var e2 = t2.state, n = t2.instance, r2 = t2.options, o2 = r2.scroll, i2 = o2 === void 0 ? true : o2, a2 = r2.resize, s2 = a2 === void 0 ? true : a2, f2 = H(e2.elements.popper), c2 = [].concat(e2.scrollParents.reference, e2.scrollParents.popper);
  return i2 && c2.forEach(function(u2) {
    u2.addEventListener("scroll", n.update, ye);
  }), s2 && f2.addEventListener("resize", n.update, ye), function() {
    i2 && c2.forEach(function(u2) {
      u2.removeEventListener("scroll", n.update, ye);
    }), s2 && f2.removeEventListener("resize", n.update, ye);
  };
}
var Re = { name: "eventListeners", enabled: true, phase: "write", fn: function() {
}, effect: It, data: {} }, _t = { left: "right", right: "left", bottom: "top", top: "bottom" };
function be(t2) {
  return t2.replace(/left|right|bottom|top/g, function(e2) {
    return _t[e2];
  });
}
var zt = { start: "end", end: "start" };
function lt(t2) {
  return t2.replace(/start|end/g, function(e2) {
    return zt[e2];
  });
}
function We(t2) {
  var e2 = H(t2), n = e2.pageXOffset, r2 = e2.pageYOffset;
  return { scrollLeft: n, scrollTop: r2 };
}
function Be(t2) {
  return ee(I(t2)).left + We(t2).scrollLeft;
}
function Ft(t2) {
  var e2 = H(t2), n = I(t2), r2 = e2.visualViewport, o2 = n.clientWidth, i2 = n.clientHeight, a2 = 0, s2 = 0;
  return r2 && (o2 = r2.width, i2 = r2.height, /^((?!chrome|android).)*safari/i.test(navigator.userAgent) || (a2 = r2.offsetLeft, s2 = r2.offsetTop)), { width: o2, height: i2, x: a2 + Be(t2), y: s2 };
}
function Ut(t2) {
  var e2, n = I(t2), r2 = We(t2), o2 = (e2 = t2.ownerDocument) == null ? void 0 : e2.body, i2 = X(n.scrollWidth, n.clientWidth, o2 ? o2.scrollWidth : 0, o2 ? o2.clientWidth : 0), a2 = X(n.scrollHeight, n.clientHeight, o2 ? o2.scrollHeight : 0, o2 ? o2.clientHeight : 0), s2 = -r2.scrollLeft + Be(t2), f2 = -r2.scrollTop;
  return N(o2 || n).direction === "rtl" && (s2 += X(n.clientWidth, o2 ? o2.clientWidth : 0) - i2), { width: i2, height: a2, x: s2, y: f2 };
}
function Se(t2) {
  var e2 = N(t2), n = e2.overflow, r2 = e2.overflowX, o2 = e2.overflowY;
  return /auto|scroll|overlay|hidden/.test(n + o2 + r2);
}
function dt(t2) {
  return ["html", "body", "#document"].indexOf(C$1(t2)) >= 0 ? t2.ownerDocument.body : B(t2) && Se(t2) ? t2 : dt(ge(t2));
}
function ce(t2, e2) {
  var n;
  e2 === void 0 && (e2 = []);
  var r2 = dt(t2), o2 = r2 === ((n = t2.ownerDocument) == null ? void 0 : n.body), i2 = H(r2), a2 = o2 ? [i2].concat(i2.visualViewport || [], Se(r2) ? r2 : []) : r2, s2 = e2.concat(a2);
  return o2 ? s2 : s2.concat(ce(ge(a2)));
}
function Te(t2) {
  return Object.assign({}, t2, { left: t2.x, top: t2.y, right: t2.x + t2.width, bottom: t2.y + t2.height });
}
function Xt(t2) {
  var e2 = ee(t2);
  return e2.top = e2.top + t2.clientTop, e2.left = e2.left + t2.clientLeft, e2.bottom = e2.top + t2.clientHeight, e2.right = e2.left + t2.clientWidth, e2.width = t2.clientWidth, e2.height = t2.clientHeight, e2.x = e2.left, e2.y = e2.top, e2;
}
function ht(t2, e2) {
  return e2 === je ? Te(Ft(t2)) : Q(e2) ? Xt(e2) : Te(Ut(I(t2)));
}
function Yt(t2) {
  var e2 = ce(ge(t2)), n = ["absolute", "fixed"].indexOf(N(t2).position) >= 0, r2 = n && B(t2) ? se(t2) : t2;
  return Q(r2) ? e2.filter(function(o2) {
    return Q(o2) && it(o2, r2) && C$1(o2) !== "body";
  }) : [];
}
function Gt(t2, e2, n) {
  var r2 = e2 === "clippingParents" ? Yt(t2) : [].concat(e2), o2 = [].concat(r2, [n]), i2 = o2[0], a2 = o2.reduce(function(s2, f2) {
    var c2 = ht(t2, f2);
    return s2.top = X(c2.top, s2.top), s2.right = ve(c2.right, s2.right), s2.bottom = ve(c2.bottom, s2.bottom), s2.left = X(c2.left, s2.left), s2;
  }, ht(t2, i2));
  return a2.width = a2.right - a2.left, a2.height = a2.bottom - a2.top, a2.x = a2.left, a2.y = a2.top, a2;
}
function mt(t2) {
  var e2 = t2.reference, n = t2.element, r2 = t2.placement, o2 = r2 ? q(r2) : null, i2 = r2 ? te(r2) : null, a2 = e2.x + e2.width / 2 - n.width / 2, s2 = e2.y + e2.height / 2 - n.height / 2, f2;
  switch (o2) {
    case E:
      f2 = { x: a2, y: e2.y - n.height };
      break;
    case R:
      f2 = { x: a2, y: e2.y + e2.height };
      break;
    case W:
      f2 = { x: e2.x + e2.width, y: s2 };
      break;
    case P:
      f2 = { x: e2.x - n.width, y: s2 };
      break;
    default:
      f2 = { x: e2.x, y: e2.y };
  }
  var c2 = o2 ? Le(o2) : null;
  if (c2 != null) {
    var u2 = c2 === "y" ? "height" : "width";
    switch (i2) {
      case U:
        f2[c2] = f2[c2] - (e2[u2] / 2 - n[u2] / 2);
        break;
      case J:
        f2[c2] = f2[c2] + (e2[u2] / 2 - n[u2] / 2);
        break;
    }
  }
  return f2;
}
function ne(t2, e2) {
  e2 === void 0 && (e2 = {});
  var n = e2, r2 = n.placement, o2 = r2 === void 0 ? t2.placement : r2, i2 = n.boundary, a2 = i2 === void 0 ? Xe : i2, s2 = n.rootBoundary, f2 = s2 === void 0 ? je : s2, c2 = n.elementContext, u2 = c2 === void 0 ? K : c2, m2 = n.altBoundary, v2 = m2 === void 0 ? false : m2, l2 = n.padding, h2 = l2 === void 0 ? 0 : l2, p2 = ft(typeof h2 != "number" ? h2 : ct(h2, G)), g2 = u2 === K ? Ye : K, x = t2.rects.popper, y = t2.elements[v2 ? g2 : u2], $2 = Gt(Q(y) ? y : y.contextElement || I(t2.elements.popper), a2, f2), d2 = ee(t2.elements.reference), b = mt({ reference: d2, element: x, strategy: "absolute", placement: o2 }), w = Te(Object.assign({}, x, b)), O = u2 === K ? w : d2, j = { top: $2.top - O.top + p2.top, bottom: O.bottom - $2.bottom + p2.bottom, left: $2.left - O.left + p2.left, right: O.right - $2.right + p2.right }, A2 = t2.modifiersData.offset;
  if (u2 === K && A2) {
    var k = A2[o2];
    Object.keys(j).forEach(function(D) {
      var S = [W, R].indexOf(D) >= 0 ? 1 : -1, L = [E, R].indexOf(D) >= 0 ? "y" : "x";
      j[D] += k[L] * S;
    });
  }
  return j;
}
function Jt(t2, e2) {
  e2 === void 0 && (e2 = {});
  var n = e2, r2 = n.placement, o2 = n.boundary, i2 = n.rootBoundary, a2 = n.padding, s2 = n.flipVariations, f2 = n.allowedAutoPlacements, c2 = f2 === void 0 ? Ee : f2, u2 = te(r2), m2 = u2 ? s2 ? De : De.filter(function(h2) {
    return te(h2) === u2;
  }) : G, v2 = m2.filter(function(h2) {
    return c2.indexOf(h2) >= 0;
  });
  v2.length === 0 && (v2 = m2);
  var l2 = v2.reduce(function(h2, p2) {
    return h2[p2] = ne(t2, { placement: p2, boundary: o2, rootBoundary: i2, padding: a2 })[q(p2)], h2;
  }, {});
  return Object.keys(l2).sort(function(h2, p2) {
    return l2[h2] - l2[p2];
  });
}
function Kt(t2) {
  if (q(t2) === me)
    return [];
  var e2 = be(t2);
  return [lt(t2), e2, lt(e2)];
}
function Qt(t2) {
  var e2 = t2.state, n = t2.options, r2 = t2.name;
  if (!e2.modifiersData[r2]._skip) {
    for (var o2 = n.mainAxis, i2 = o2 === void 0 ? true : o2, a2 = n.altAxis, s2 = a2 === void 0 ? true : a2, f2 = n.fallbackPlacements, c2 = n.padding, u2 = n.boundary, m2 = n.rootBoundary, v2 = n.altBoundary, l2 = n.flipVariations, h2 = l2 === void 0 ? true : l2, p2 = n.allowedAutoPlacements, g2 = e2.options.placement, x = q(g2), y = x === g2, $2 = f2 || (y || !h2 ? [be(g2)] : Kt(g2)), d2 = [g2].concat($2).reduce(function(z, V) {
      return z.concat(q(V) === me ? Jt(e2, { placement: V, boundary: u2, rootBoundary: m2, padding: c2, flipVariations: h2, allowedAutoPlacements: p2 }) : V);
    }, []), b = e2.rects.reference, w = e2.rects.popper, O = /* @__PURE__ */ new Map(), j = true, A2 = d2[0], k = 0; k < d2.length; k++) {
      var D = d2[k], S = q(D), L = te(D) === U, re = [E, R].indexOf(S) >= 0, oe = re ? "width" : "height", M = ne(e2, { placement: D, boundary: u2, rootBoundary: m2, altBoundary: v2, padding: c2 }), T = re ? L ? W : P : L ? R : E;
      b[oe] > w[oe] && (T = be(T));
      var pe = be(T), _ = [];
      if (i2 && _.push(M[S] <= 0), s2 && _.push(M[T] <= 0, M[pe] <= 0), _.every(function(z) {
        return z;
      })) {
        A2 = D, j = false;
        break;
      }
      O.set(D, _);
    }
    if (j)
      for (var ue = h2 ? 3 : 1, xe = function(z) {
        var V = d2.find(function(de) {
          var ae = O.get(de);
          if (ae)
            return ae.slice(0, z).every(function(Y) {
              return Y;
            });
        });
        if (V)
          return A2 = V, "break";
      }, ie = ue; ie > 0; ie--) {
        var le = xe(ie);
        if (le === "break")
          break;
      }
    e2.placement !== A2 && (e2.modifiersData[r2]._skip = true, e2.placement = A2, e2.reset = true);
  }
}
var vt = { name: "flip", enabled: true, phase: "main", fn: Qt, requiresIfExists: ["offset"], data: { _skip: false } };
function gt(t2, e2, n) {
  return n === void 0 && (n = { x: 0, y: 0 }), { top: t2.top - e2.height - n.y, right: t2.right - e2.width + n.x, bottom: t2.bottom - e2.height + n.y, left: t2.left - e2.width - n.x };
}
function yt(t2) {
  return [E, W, R, P].some(function(e2) {
    return t2[e2] >= 0;
  });
}
function Zt(t2) {
  var e2 = t2.state, n = t2.name, r2 = e2.rects.reference, o2 = e2.rects.popper, i2 = e2.modifiersData.preventOverflow, a2 = ne(e2, { elementContext: "reference" }), s2 = ne(e2, { altBoundary: true }), f2 = gt(a2, r2), c2 = gt(s2, o2, i2), u2 = yt(f2), m2 = yt(c2);
  e2.modifiersData[n] = { referenceClippingOffsets: f2, popperEscapeOffsets: c2, isReferenceHidden: u2, hasPopperEscaped: m2 }, e2.attributes.popper = Object.assign({}, e2.attributes.popper, { "data-popper-reference-hidden": u2, "data-popper-escaped": m2 });
}
var bt = { name: "hide", enabled: true, phase: "main", requiresIfExists: ["preventOverflow"], fn: Zt };
function en(t2, e2, n) {
  var r2 = q(t2), o2 = [P, E].indexOf(r2) >= 0 ? -1 : 1, i2 = typeof n == "function" ? n(Object.assign({}, e2, { placement: t2 })) : n, a2 = i2[0], s2 = i2[1];
  return a2 = a2 || 0, s2 = (s2 || 0) * o2, [P, W].indexOf(r2) >= 0 ? { x: s2, y: a2 } : { x: a2, y: s2 };
}
function tn(t2) {
  var e2 = t2.state, n = t2.options, r2 = t2.name, o2 = n.offset, i2 = o2 === void 0 ? [0, 0] : o2, a2 = Ee.reduce(function(u2, m2) {
    return u2[m2] = en(m2, e2.rects, i2), u2;
  }, {}), s2 = a2[e2.placement], f2 = s2.x, c2 = s2.y;
  e2.modifiersData.popperOffsets != null && (e2.modifiersData.popperOffsets.x += f2, e2.modifiersData.popperOffsets.y += c2), e2.modifiersData[r2] = a2;
}
var wt = { name: "offset", enabled: true, phase: "main", requires: ["popperOffsets"], fn: tn };
function nn(t2) {
  var e2 = t2.state, n = t2.name;
  e2.modifiersData[n] = mt({ reference: e2.rects.reference, element: e2.rects.popper, strategy: "absolute", placement: e2.placement });
}
var He = { name: "popperOffsets", enabled: true, phase: "read", fn: nn, data: {} };
function rn(t2) {
  return t2 === "x" ? "y" : "x";
}
function on(t2) {
  var e2 = t2.state, n = t2.options, r2 = t2.name, o2 = n.mainAxis, i2 = o2 === void 0 ? true : o2, a2 = n.altAxis, s2 = a2 === void 0 ? false : a2, f2 = n.boundary, c2 = n.rootBoundary, u2 = n.altBoundary, m2 = n.padding, v2 = n.tether, l2 = v2 === void 0 ? true : v2, h2 = n.tetherOffset, p2 = h2 === void 0 ? 0 : h2, g2 = ne(e2, { boundary: f2, rootBoundary: c2, padding: m2, altBoundary: u2 }), x = q(e2.placement), y = te(e2.placement), $2 = !y, d2 = Le(x), b = rn(d2), w = e2.modifiersData.popperOffsets, O = e2.rects.reference, j = e2.rects.popper, A2 = typeof p2 == "function" ? p2(Object.assign({}, e2.rects, { placement: e2.placement })) : p2, k = typeof A2 == "number" ? { mainAxis: A2, altAxis: A2 } : Object.assign({ mainAxis: 0, altAxis: 0 }, A2), D = e2.modifiersData.offset ? e2.modifiersData.offset[e2.placement] : null, S = { x: 0, y: 0 };
  if (w) {
    if (i2) {
      var L, re = d2 === "y" ? E : P, oe = d2 === "y" ? R : W, M = d2 === "y" ? "height" : "width", T = w[d2], pe = T + g2[re], _ = T - g2[oe], ue = l2 ? -j[M] / 2 : 0, xe = y === U ? O[M] : j[M], ie = y === U ? -j[M] : -O[M], le = e2.elements.arrow, z = l2 && le ? ke(le) : { width: 0, height: 0 }, V = e2.modifiersData["arrow#persistent"] ? e2.modifiersData["arrow#persistent"].padding : st(), de = V[re], ae = V[oe], Y = fe(0, O[M], z[M]), jt2 = $2 ? O[M] / 2 - ue - Y - de - k.mainAxis : xe - Y - de - k.mainAxis, Dt2 = $2 ? -O[M] / 2 + ue + Y + ae + k.mainAxis : ie + Y + ae + k.mainAxis, Oe = e2.elements.arrow && se(e2.elements.arrow), Et2 = Oe ? d2 === "y" ? Oe.clientTop || 0 : Oe.clientLeft || 0 : 0, Ce = (L = D == null ? void 0 : D[d2]) != null ? L : 0, Pt = T + jt2 - Ce - Et2, At2 = T + Dt2 - Ce, qe2 = fe(l2 ? ve(pe, Pt) : pe, T, l2 ? X(_, At2) : _);
      w[d2] = qe2, S[d2] = qe2 - T;
    }
    if (s2) {
      var Ve, kt = d2 === "x" ? E : P, Lt2 = d2 === "x" ? R : W, F = w[b], he = b === "y" ? "height" : "width", Ne = F + g2[kt], Ie = F - g2[Lt2], $e = [E, P].indexOf(x) !== -1, _e = (Ve = D == null ? void 0 : D[b]) != null ? Ve : 0, ze = $e ? Ne : F - O[he] - j[he] - _e + k.altAxis, Fe2 = $e ? F + O[he] + j[he] - _e - k.altAxis : Ie, Ue = l2 && $e ? St(ze, F, Fe2) : fe(l2 ? ze : Ne, F, l2 ? Fe2 : Ie);
      w[b] = Ue, S[b] = Ue - F;
    }
    e2.modifiersData[r2] = S;
  }
}
var xt = { name: "preventOverflow", enabled: true, phase: "main", fn: on, requiresIfExists: ["offset"] };
function an(t2) {
  return { scrollLeft: t2.scrollLeft, scrollTop: t2.scrollTop };
}
function sn(t2) {
  return t2 === H(t2) || !B(t2) ? We(t2) : an(t2);
}
function fn(t2) {
  var e2 = t2.getBoundingClientRect(), n = Z(e2.width) / t2.offsetWidth || 1, r2 = Z(e2.height) / t2.offsetHeight || 1;
  return n !== 1 || r2 !== 1;
}
function cn(t2, e2, n) {
  n === void 0 && (n = false);
  var r2 = B(e2), o2 = B(e2) && fn(e2), i2 = I(e2), a2 = ee(t2, o2), s2 = { scrollLeft: 0, scrollTop: 0 }, f2 = { x: 0, y: 0 };
  return (r2 || !r2 && !n) && ((C$1(e2) !== "body" || Se(i2)) && (s2 = sn(e2)), B(e2) ? (f2 = ee(e2, true), f2.x += e2.clientLeft, f2.y += e2.clientTop) : i2 && (f2.x = Be(i2))), { x: a2.left + s2.scrollLeft - f2.x, y: a2.top + s2.scrollTop - f2.y, width: a2.width, height: a2.height };
}
function pn(t2) {
  var e2 = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Set(), r2 = [];
  t2.forEach(function(i2) {
    e2.set(i2.name, i2);
  });
  function o2(i2) {
    n.add(i2.name);
    var a2 = [].concat(i2.requires || [], i2.requiresIfExists || []);
    a2.forEach(function(s2) {
      if (!n.has(s2)) {
        var f2 = e2.get(s2);
        f2 && o2(f2);
      }
    }), r2.push(i2);
  }
  return t2.forEach(function(i2) {
    n.has(i2.name) || o2(i2);
  }), r2;
}
function un(t2) {
  var e2 = pn(t2);
  return ot.reduce(function(n, r2) {
    return n.concat(e2.filter(function(o2) {
      return o2.phase === r2;
    }));
  }, []);
}
function ln(t2) {
  var e2;
  return function() {
    return e2 || (e2 = new Promise(function(n) {
      Promise.resolve().then(function() {
        e2 = void 0, n(t2());
      });
    })), e2;
  };
}
function dn(t2) {
  var e2 = t2.reduce(function(n, r2) {
    var o2 = n[r2.name];
    return n[r2.name] = o2 ? Object.assign({}, o2, r2, { options: Object.assign({}, o2.options, r2.options), data: Object.assign({}, o2.data, r2.data) }) : r2, n;
  }, {});
  return Object.keys(e2).map(function(n) {
    return e2[n];
  });
}
var Ot = { placement: "bottom", modifiers: [], strategy: "absolute" };
function $t() {
  for (var t2 = arguments.length, e2 = new Array(t2), n = 0; n < t2; n++)
    e2[n] = arguments[n];
  return !e2.some(function(r2) {
    return !(r2 && typeof r2.getBoundingClientRect == "function");
  });
}
function we(t2) {
  t2 === void 0 && (t2 = {});
  var e2 = t2, n = e2.defaultModifiers, r2 = n === void 0 ? [] : n, o2 = e2.defaultOptions, i2 = o2 === void 0 ? Ot : o2;
  return function(a2, s2, f2) {
    f2 === void 0 && (f2 = i2);
    var c2 = { placement: "bottom", orderedModifiers: [], options: Object.assign({}, Ot, i2), modifiersData: {}, elements: { reference: a2, popper: s2 }, attributes: {}, styles: {} }, u2 = [], m2 = false, v2 = { state: c2, setOptions: function(p2) {
      var g2 = typeof p2 == "function" ? p2(c2.options) : p2;
      h2(), c2.options = Object.assign({}, i2, c2.options, g2), c2.scrollParents = { reference: Q(a2) ? ce(a2) : a2.contextElement ? ce(a2.contextElement) : [], popper: ce(s2) };
      var x = un(dn([].concat(r2, c2.options.modifiers)));
      return c2.orderedModifiers = x.filter(function(y) {
        return y.enabled;
      }), l2(), v2.update();
    }, forceUpdate: function() {
      if (!m2) {
        var p2 = c2.elements, g2 = p2.reference, x = p2.popper;
        if ($t(g2, x)) {
          c2.rects = { reference: cn(g2, se(x), c2.options.strategy === "fixed"), popper: ke(x) }, c2.reset = false, c2.placement = c2.options.placement, c2.orderedModifiers.forEach(function(j) {
            return c2.modifiersData[j.name] = Object.assign({}, j.data);
          });
          for (var y = 0; y < c2.orderedModifiers.length; y++) {
            if (c2.reset === true) {
              c2.reset = false, y = -1;
              continue;
            }
            var $2 = c2.orderedModifiers[y], d2 = $2.fn, b = $2.options, w = b === void 0 ? {} : b, O = $2.name;
            typeof d2 == "function" && (c2 = d2({ state: c2, options: w, name: O, instance: v2 }) || c2);
          }
        }
      }
    }, update: ln(function() {
      return new Promise(function(p2) {
        v2.forceUpdate(), p2(c2);
      });
    }), destroy: function() {
      h2(), m2 = true;
    } };
    if (!$t(a2, s2))
      return v2;
    v2.setOptions(f2).then(function(p2) {
      !m2 && f2.onFirstUpdate && f2.onFirstUpdate(p2);
    });
    function l2() {
      c2.orderedModifiers.forEach(function(p2) {
        var g2 = p2.name, x = p2.options, y = x === void 0 ? {} : x, $2 = p2.effect;
        if (typeof $2 == "function") {
          var d2 = $2({ state: c2, name: g2, instance: v2, options: y }), b = function() {
          };
          u2.push(d2 || b);
        }
      });
    }
    function h2() {
      u2.forEach(function(p2) {
        return p2();
      }), u2 = [];
    }
    return v2;
  };
}
we();
var mn = [Re, He, Me, Ae];
we({ defaultModifiers: mn });
var gn = [Re, He, Me, Ae, wt, vt, xt, pt, bt], yn = we({ defaultModifiers: gn });
const POSITIONING_STRATEGIES = ["fixed", "absolute"];
const popperCoreConfigProps = buildProps({
  boundariesPadding: {
    type: Number,
    default: 0
  },
  fallbackPlacements: {
    type: definePropType(Array),
    default: void 0
  },
  gpuAcceleration: {
    type: Boolean,
    default: true
  },
  offset: {
    type: Number,
    default: 12
  },
  placement: {
    type: String,
    values: Ee,
    default: "bottom"
  },
  popperOptions: {
    type: definePropType(Object),
    default: () => ({})
  },
  strategy: {
    type: String,
    values: POSITIONING_STRATEGIES,
    default: "absolute"
  }
});
const popperContentProps = buildProps({
  ...popperCoreConfigProps,
  id: String,
  style: {
    type: definePropType([String, Array, Object])
  },
  className: {
    type: definePropType([String, Array, Object])
  },
  effect: {
    type: definePropType(String),
    default: "dark"
  },
  visible: Boolean,
  enterable: {
    type: Boolean,
    default: true
  },
  pure: Boolean,
  focusOnShow: {
    type: Boolean,
    default: false
  },
  trapping: {
    type: Boolean,
    default: false
  },
  popperClass: {
    type: definePropType([String, Array, Object])
  },
  popperStyle: {
    type: definePropType([String, Array, Object])
  },
  referenceEl: {
    type: definePropType(Object)
  },
  triggerTargetEl: {
    type: definePropType(Object)
  },
  stopPopperMouseEvent: {
    type: Boolean,
    default: true
  },
  virtualTriggering: Boolean,
  zIndex: Number,
  ...useAriaProps(["ariaLabel"])
});
const popperContentEmits = {
  mouseenter: (evt) => evt instanceof MouseEvent,
  mouseleave: (evt) => evt instanceof MouseEvent,
  focus: () => true,
  blur: () => true,
  close: () => true
};
const usePopperContentFocusTrap = (props, emit2) => {
  const trapped = ref(false);
  const focusStartRef = ref();
  const onFocusAfterTrapped = () => {
    emit2("focus");
  };
  const onFocusAfterReleased = (event) => {
    var _a2;
    if (((_a2 = event.detail) == null ? void 0 : _a2.focusReason) !== "pointer") {
      focusStartRef.value = "first";
      emit2("blur");
    }
  };
  const onFocusInTrap = (event) => {
    if (props.visible && !trapped.value) {
      if (event.target) {
        focusStartRef.value = event.target;
      }
      trapped.value = true;
    }
  };
  const onFocusoutPrevented = (event) => {
    if (!props.trapping) {
      if (event.detail.focusReason === "pointer") {
        event.preventDefault();
      }
      trapped.value = false;
    }
  };
  const onReleaseRequested = () => {
    trapped.value = false;
    emit2("close");
  };
  return {
    focusStartRef,
    trapped,
    onFocusAfterReleased,
    onFocusAfterTrapped,
    onFocusInTrap,
    onFocusoutPrevented,
    onReleaseRequested
  };
};
const buildPopperOptions = (props, modifiers = []) => {
  const { placement, strategy, popperOptions } = props;
  const options = {
    placement,
    strategy,
    ...popperOptions,
    modifiers: [...genModifiers(props), ...modifiers]
  };
  deriveExtraModifiers(options, popperOptions == null ? void 0 : popperOptions.modifiers);
  return options;
};
const unwrapMeasurableEl = ($el) => {
  if (!isClient)
    return;
  return unrefElement($el);
};
function genModifiers(options) {
  const { offset, gpuAcceleration, fallbackPlacements } = options;
  return [
    {
      name: "offset",
      options: {
        offset: [0, offset != null ? offset : 12]
      }
    },
    {
      name: "preventOverflow",
      options: {
        padding: {
          top: 2,
          bottom: 2,
          left: 5,
          right: 5
        }
      }
    },
    {
      name: "flip",
      options: {
        padding: 5,
        fallbackPlacements
      }
    },
    {
      name: "computeStyles",
      options: {
        gpuAcceleration
      }
    }
  ];
}
function deriveExtraModifiers(options, modifiers) {
  if (modifiers) {
    options.modifiers = [...options.modifiers, ...modifiers != null ? modifiers : []];
  }
}
const usePopper = (referenceElementRef, popperElementRef, opts = {}) => {
  const stateUpdater = {
    name: "updateState",
    enabled: true,
    phase: "write",
    fn: ({ state }) => {
      const derivedState = deriveState(state);
      Object.assign(states.value, derivedState);
    },
    requires: ["computeStyles"]
  };
  const options = computed(() => {
    const { onFirstUpdate, placement, strategy, modifiers } = unref(opts);
    return {
      onFirstUpdate,
      placement: placement || "bottom",
      strategy: strategy || "absolute",
      modifiers: [
        ...modifiers || [],
        stateUpdater,
        { name: "applyStyles", enabled: false }
      ]
    };
  });
  const instanceRef = shallowRef();
  const states = ref({
    styles: {
      popper: {
        position: unref(options).strategy,
        left: "0",
        top: "0"
      },
      arrow: {
        position: "absolute"
      }
    },
    attributes: {}
  });
  const destroy = () => {
    if (!instanceRef.value)
      return;
    instanceRef.value.destroy();
    instanceRef.value = void 0;
  };
  watch(options, (newOptions) => {
    const instance = unref(instanceRef);
    if (instance) {
      instance.setOptions(newOptions);
    }
  }, {
    deep: true
  });
  watch([referenceElementRef, popperElementRef], ([referenceElement, popperElement]) => {
    destroy();
    if (!referenceElement || !popperElement)
      return;
    instanceRef.value = yn(referenceElement, popperElement, unref(options));
  });
  onBeforeUnmount(() => {
    destroy();
  });
  return {
    state: computed(() => {
      var _a2;
      return { ...((_a2 = unref(instanceRef)) == null ? void 0 : _a2.state) || {} };
    }),
    styles: computed(() => unref(states).styles),
    attributes: computed(() => unref(states).attributes),
    update: () => {
      var _a2;
      return (_a2 = unref(instanceRef)) == null ? void 0 : _a2.update();
    },
    forceUpdate: () => {
      var _a2;
      return (_a2 = unref(instanceRef)) == null ? void 0 : _a2.forceUpdate();
    },
    instanceRef: computed(() => unref(instanceRef))
  };
};
function deriveState(state) {
  const elements = Object.keys(state.elements);
  const styles = fromPairs(elements.map((element) => [element, state.styles[element] || {}]));
  const attributes = fromPairs(elements.map((element) => [element, state.attributes[element]]));
  return {
    styles,
    attributes
  };
}
const DEFAULT_ARROW_OFFSET = 0;
const usePopperContent = (props) => {
  const { popperInstanceRef, contentRef, triggerRef, role } = inject(POPPER_INJECTION_KEY, void 0);
  const arrowRef = ref();
  const arrowOffset = ref();
  const eventListenerModifier = computed(() => {
    return {
      name: "eventListeners",
      enabled: !!props.visible
    };
  });
  const arrowModifier = computed(() => {
    var _a2;
    const arrowEl = unref(arrowRef);
    const offset = (_a2 = unref(arrowOffset)) != null ? _a2 : DEFAULT_ARROW_OFFSET;
    return {
      name: "arrow",
      enabled: !isUndefined$2(arrowEl),
      options: {
        element: arrowEl,
        padding: offset
      }
    };
  });
  const options = computed(() => {
    return {
      onFirstUpdate: () => {
        update();
      },
      ...buildPopperOptions(props, [
        unref(arrowModifier),
        unref(eventListenerModifier)
      ])
    };
  });
  const computedReference = computed(() => unwrapMeasurableEl(props.referenceEl) || unref(triggerRef));
  const { attributes, state, styles, update, forceUpdate, instanceRef } = usePopper(computedReference, contentRef, options);
  watch(instanceRef, (instance) => popperInstanceRef.value = instance);
  onMounted(() => {
    watch(() => {
      var _a2;
      return (_a2 = unref(computedReference)) == null ? void 0 : _a2.getBoundingClientRect();
    }, () => {
      update();
    });
  });
  return {
    attributes,
    arrowRef,
    contentRef,
    instanceRef,
    state,
    styles,
    role,
    forceUpdate,
    update
  };
};
const usePopperContentDOM = (props, {
  attributes,
  styles,
  role
}) => {
  const { nextZIndex } = useZIndex();
  const ns2 = useNamespace("popper");
  const contentAttrs = computed(() => unref(attributes).popper);
  const contentZIndex = ref(isNumber$2(props.zIndex) ? props.zIndex : nextZIndex());
  const contentClass = computed(() => [
    ns2.b(),
    ns2.is("pure", props.pure),
    ns2.is(props.effect),
    props.popperClass
  ]);
  const contentStyle = computed(() => {
    return [
      { zIndex: unref(contentZIndex) },
      unref(styles).popper,
      props.popperStyle || {}
    ];
  });
  const ariaModal = computed(() => role.value === "dialog" ? "false" : void 0);
  const arrowStyle = computed(() => unref(styles).arrow || {});
  const updateZIndex = () => {
    contentZIndex.value = isNumber$2(props.zIndex) ? props.zIndex : nextZIndex();
  };
  return {
    ariaModal,
    arrowStyle,
    contentAttrs,
    contentClass,
    contentStyle,
    contentZIndex,
    updateZIndex
  };
};
const __default__$b = /* @__PURE__ */ defineComponent({
  name: "ElPopperContent"
});
const _sfc_main$f = /* @__PURE__ */ defineComponent({
  ...__default__$b,
  props: popperContentProps,
  emits: popperContentEmits,
  setup(__props, { expose, emit: emit2 }) {
    const props = __props;
    const {
      focusStartRef,
      trapped,
      onFocusAfterReleased,
      onFocusAfterTrapped,
      onFocusInTrap,
      onFocusoutPrevented,
      onReleaseRequested
    } = usePopperContentFocusTrap(props, emit2);
    const { attributes, arrowRef, contentRef, styles, instanceRef, role, update } = usePopperContent(props);
    const {
      ariaModal,
      arrowStyle,
      contentAttrs,
      contentClass,
      contentStyle,
      updateZIndex
    } = usePopperContentDOM(props, {
      styles,
      attributes,
      role
    });
    const formItemContext = inject(formItemContextKey, void 0);
    const arrowOffset = ref();
    provide(POPPER_CONTENT_INJECTION_KEY, {
      arrowStyle,
      arrowRef,
      arrowOffset
    });
    if (formItemContext) {
      provide(formItemContextKey, {
        ...formItemContext,
        addInputId: NOOP,
        removeInputId: NOOP
      });
    }
    let triggerTargetAriaStopWatch = void 0;
    const updatePopper = (shouldUpdateZIndex = true) => {
      update();
      shouldUpdateZIndex && updateZIndex();
    };
    const togglePopperAlive = () => {
      updatePopper(false);
      if (props.visible && props.focusOnShow) {
        trapped.value = true;
      } else if (props.visible === false) {
        trapped.value = false;
      }
    };
    onMounted(() => {
      watch(() => props.triggerTargetEl, (triggerTargetEl, prevTriggerTargetEl) => {
        triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();
        triggerTargetAriaStopWatch = void 0;
        const el2 = unref(triggerTargetEl || contentRef.value);
        const prevEl = unref(prevTriggerTargetEl || contentRef.value);
        if (isElement(el2)) {
          triggerTargetAriaStopWatch = watch([role, () => props.ariaLabel, ariaModal, () => props.id], (watches) => {
            ["role", "aria-label", "aria-modal", "id"].forEach((key, idx) => {
              isNil(watches[idx]) ? el2.removeAttribute(key) : el2.setAttribute(key, watches[idx]);
            });
          }, { immediate: true });
        }
        if (prevEl !== el2 && isElement(prevEl)) {
          ["role", "aria-label", "aria-modal", "id"].forEach((key) => {
            prevEl.removeAttribute(key);
          });
        }
      }, { immediate: true });
      watch(() => props.visible, togglePopperAlive, { immediate: true });
    });
    onBeforeUnmount(() => {
      triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();
      triggerTargetAriaStopWatch = void 0;
    });
    expose({
      popperContentRef: contentRef,
      popperInstanceRef: instanceRef,
      updatePopper,
      contentStyle
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", mergeProps({
        ref_key: "contentRef",
        ref: contentRef
      }, unref(contentAttrs), {
        style: unref(contentStyle),
        class: unref(contentClass),
        tabindex: "-1",
        onMouseenter: (e2) => _ctx.$emit("mouseenter", e2),
        onMouseleave: (e2) => _ctx.$emit("mouseleave", e2)
      }), [
        createVNode(unref(ElFocusTrap), {
          trapped: unref(trapped),
          "trap-on-focus-in": true,
          "focus-trap-el": unref(contentRef),
          "focus-start-el": unref(focusStartRef),
          onFocusAfterTrapped: unref(onFocusAfterTrapped),
          onFocusAfterReleased: unref(onFocusAfterReleased),
          onFocusin: unref(onFocusInTrap),
          onFocusoutPrevented: unref(onFocusoutPrevented),
          onReleaseRequested: unref(onReleaseRequested)
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["trapped", "focus-trap-el", "focus-start-el", "onFocusAfterTrapped", "onFocusAfterReleased", "onFocusin", "onFocusoutPrevented", "onReleaseRequested"])
      ], 16, ["onMouseenter", "onMouseleave"]);
    };
  }
});
var ElPopperContent = /* @__PURE__ */ _export_sfc$1(_sfc_main$f, [["__file", "content.vue"]]);
const ElPopper = withInstall(Popper);
const TOOLTIP_INJECTION_KEY = Symbol("elTooltip");
function useTimeout() {
  let timeoutHandle;
  const registerTimeout = (fn2, delay) => {
    cancelTimeout();
    timeoutHandle = window.setTimeout(fn2, delay);
  };
  const cancelTimeout = () => window.clearTimeout(timeoutHandle);
  tryOnScopeDispose(() => cancelTimeout());
  return {
    registerTimeout,
    cancelTimeout
  };
}
const useDelayedToggleProps = buildProps({
  showAfter: {
    type: Number,
    default: 0
  },
  hideAfter: {
    type: Number,
    default: 200
  },
  autoClose: {
    type: Number,
    default: 0
  }
});
const useDelayedToggle = ({
  showAfter,
  hideAfter,
  autoClose,
  open,
  close
}) => {
  const { registerTimeout } = useTimeout();
  const {
    registerTimeout: registerTimeoutForAutoClose,
    cancelTimeout: cancelTimeoutForAutoClose
  } = useTimeout();
  const onOpen = (event) => {
    registerTimeout(() => {
      open(event);
      const _autoClose = unref(autoClose);
      if (isNumber$2(_autoClose) && _autoClose > 0) {
        registerTimeoutForAutoClose(() => {
          close(event);
        }, _autoClose);
      }
    }, unref(showAfter));
  };
  const onClose = (event) => {
    cancelTimeoutForAutoClose();
    registerTimeout(() => {
      close(event);
    }, unref(hideAfter));
  };
  return {
    onOpen,
    onClose
  };
};
const useTooltipContentProps = buildProps({
  ...useDelayedToggleProps,
  ...popperContentProps,
  appendTo: {
    type: definePropType([String, Object])
  },
  content: {
    type: String,
    default: ""
  },
  rawContent: Boolean,
  persistent: Boolean,
  visible: {
    type: definePropType(Boolean),
    default: null
  },
  transition: String,
  teleported: {
    type: Boolean,
    default: true
  },
  disabled: Boolean,
  ...useAriaProps(["ariaLabel"])
});
const useTooltipTriggerProps = buildProps({
  ...popperTriggerProps,
  disabled: Boolean,
  trigger: {
    type: definePropType([String, Array]),
    default: "hover"
  },
  triggerKeys: {
    type: definePropType(Array),
    default: () => [EVENT_CODE.enter, EVENT_CODE.numpadEnter, EVENT_CODE.space]
  }
});
const _prop = buildProp({
  type: definePropType(Boolean),
  default: null
});
const _event = buildProp({
  type: definePropType(Function)
});
const createModelToggleComposable = (name) => {
  const updateEventKey = `update:${name}`;
  const updateEventKeyRaw = `onUpdate:${name}`;
  const useModelToggleEmits2 = [updateEventKey];
  const useModelToggleProps2 = {
    [name]: _prop,
    [updateEventKeyRaw]: _event
  };
  const useModelToggle2 = ({
    indicator,
    toggleReason,
    shouldHideWhenRouteChanges,
    shouldProceed,
    onShow,
    onHide
  }) => {
    const instance = getCurrentInstance();
    const { emit: emit2 } = instance;
    const props = instance.props;
    const hasUpdateHandler = computed(() => isFunction$3(props[updateEventKeyRaw]));
    const isModelBindingAbsent = computed(() => props[name] === null);
    const doShow = (event) => {
      if (indicator.value === true) {
        return;
      }
      indicator.value = true;
      if (toggleReason) {
        toggleReason.value = event;
      }
      if (isFunction$3(onShow)) {
        onShow(event);
      }
    };
    const doHide = (event) => {
      if (indicator.value === false) {
        return;
      }
      indicator.value = false;
      if (toggleReason) {
        toggleReason.value = event;
      }
      if (isFunction$3(onHide)) {
        onHide(event);
      }
    };
    const show = (event) => {
      if (props.disabled === true || isFunction$3(shouldProceed) && !shouldProceed())
        return;
      const shouldEmit = hasUpdateHandler.value && isClient;
      if (shouldEmit) {
        emit2(updateEventKey, true);
      }
      if (isModelBindingAbsent.value || !shouldEmit) {
        doShow(event);
      }
    };
    const hide = (event) => {
      if (props.disabled === true || !isClient)
        return;
      const shouldEmit = hasUpdateHandler.value && isClient;
      if (shouldEmit) {
        emit2(updateEventKey, false);
      }
      if (isModelBindingAbsent.value || !shouldEmit) {
        doHide(event);
      }
    };
    const onChange = (val) => {
      if (!isBoolean$2(val))
        return;
      if (props.disabled && val) {
        if (hasUpdateHandler.value) {
          emit2(updateEventKey, false);
        }
      } else if (indicator.value !== val) {
        if (val) {
          doShow();
        } else {
          doHide();
        }
      }
    };
    const toggle = () => {
      if (indicator.value) {
        hide();
      } else {
        show();
      }
    };
    watch(() => props[name], onChange);
    if (shouldHideWhenRouteChanges && instance.appContext.config.globalProperties.$route !== void 0) {
      watch(() => ({
        ...instance.proxy.$route
      }), () => {
        if (shouldHideWhenRouteChanges.value && indicator.value) {
          hide();
        }
      });
    }
    onMounted(() => {
      onChange(props[name]);
    });
    return {
      hide,
      show,
      toggle,
      hasUpdateHandler
    };
  };
  return {
    useModelToggle: useModelToggle2,
    useModelToggleProps: useModelToggleProps2,
    useModelToggleEmits: useModelToggleEmits2
  };
};
createModelToggleComposable("modelValue");
const {
  useModelToggleProps: useTooltipModelToggleProps,
  useModelToggleEmits: useTooltipModelToggleEmits,
  useModelToggle: useTooltipModelToggle
} = createModelToggleComposable("visible");
const useTooltipProps = buildProps({
  ...popperProps,
  ...useTooltipModelToggleProps,
  ...useTooltipContentProps,
  ...useTooltipTriggerProps,
  ...popperArrowProps,
  showArrow: {
    type: Boolean,
    default: true
  }
});
const tooltipEmits = [
  ...useTooltipModelToggleEmits,
  "before-show",
  "before-hide",
  "show",
  "hide",
  "open",
  "close"
];
const isTriggerType = (trigger2, type4) => {
  if (isArray$4(trigger2)) {
    return trigger2.includes(type4);
  }
  return trigger2 === type4;
};
const whenTrigger = (trigger2, type4, handler2) => {
  return (e2) => {
    isTriggerType(unref(trigger2), type4) && handler2(e2);
  };
};
const composeEventHandlers = (theirsHandler, oursHandler, { checkForDefaultPrevented = true } = {}) => {
  const handleEvent = (event) => {
    const shouldPrevent = theirsHandler == null ? void 0 : theirsHandler(event);
    if (checkForDefaultPrevented === false || !shouldPrevent) {
      return oursHandler == null ? void 0 : oursHandler(event);
    }
  };
  return handleEvent;
};
const whenMouse = (handler2) => {
  return (e2) => e2.pointerType === "mouse" ? handler2(e2) : void 0;
};
const __default__$a = /* @__PURE__ */ defineComponent({
  name: "ElTooltipTrigger"
});
const _sfc_main$e = /* @__PURE__ */ defineComponent({
  ...__default__$a,
  props: useTooltipTriggerProps,
  setup(__props, { expose }) {
    const props = __props;
    const ns2 = useNamespace("tooltip");
    const { controlled, id: id2, open, onOpen, onClose, onToggle } = inject(TOOLTIP_INJECTION_KEY, void 0);
    const triggerRef = ref(null);
    const stopWhenControlledOrDisabled = () => {
      if (unref(controlled) || props.disabled) {
        return true;
      }
    };
    const trigger2 = toRef(props, "trigger");
    const onMouseenter = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger2, "hover", onOpen));
    const onMouseleave = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger2, "hover", onClose));
    const onClick = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger2, "click", (e2) => {
      if (e2.button === 0) {
        onToggle(e2);
      }
    }));
    const onFocus = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger2, "focus", onOpen));
    const onBlur = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger2, "focus", onClose));
    const onContextMenu = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger2, "contextmenu", (e2) => {
      e2.preventDefault();
      onToggle(e2);
    }));
    const onKeydown = composeEventHandlers(stopWhenControlledOrDisabled, (e2) => {
      const { code } = e2;
      if (props.triggerKeys.includes(code)) {
        e2.preventDefault();
        onToggle(e2);
      }
    });
    expose({
      triggerRef
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(ElPopperTrigger), {
        id: unref(id2),
        "virtual-ref": _ctx.virtualRef,
        open: unref(open),
        "virtual-triggering": _ctx.virtualTriggering,
        class: normalizeClass(unref(ns2).e("trigger")),
        onBlur: unref(onBlur),
        onClick: unref(onClick),
        onContextmenu: unref(onContextMenu),
        onFocus: unref(onFocus),
        onMouseenter: unref(onMouseenter),
        onMouseleave: unref(onMouseleave),
        onKeydown: unref(onKeydown)
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["id", "virtual-ref", "open", "virtual-triggering", "class", "onBlur", "onClick", "onContextmenu", "onFocus", "onMouseenter", "onMouseleave", "onKeydown"]);
    };
  }
});
var ElTooltipTrigger = /* @__PURE__ */ _export_sfc$1(_sfc_main$e, [["__file", "trigger.vue"]]);
const teleportProps = buildProps({
  to: {
    type: definePropType([String, Object]),
    required: true
  },
  disabled: Boolean
});
const _sfc_main$d = /* @__PURE__ */ defineComponent({
  __name: "teleport",
  props: teleportProps,
  setup(__props) {
    return (_ctx, _cache) => {
      return _ctx.disabled ? renderSlot(_ctx.$slots, "default", { key: 0 }) : (openBlock(), createBlock(Teleport$1, {
        key: 1,
        to: _ctx.to
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 8, ["to"]));
    };
  }
});
var Teleport = /* @__PURE__ */ _export_sfc$1(_sfc_main$d, [["__file", "teleport.vue"]]);
const ElTeleport = withInstall(Teleport);
const usePopperContainerId = () => {
  const namespace = useGetDerivedNamespace();
  const idInjection = useIdInjection();
  const id2 = computed(() => {
    return `${namespace.value}-popper-container-${idInjection.prefix}`;
  });
  const selector = computed(() => `#${id2.value}`);
  return {
    id: id2,
    selector
  };
};
const createContainer = (id2) => {
  const container = document.createElement("div");
  container.id = id2;
  document.body.appendChild(container);
  return container;
};
const usePopperContainer = () => {
  const { id: id2, selector } = usePopperContainerId();
  onBeforeMount(() => {
    if (!isClient)
      return;
    if (!document.body.querySelector(selector.value)) {
      createContainer(id2.value);
    }
  });
  return {
    id: id2,
    selector
  };
};
const __default__$9 = /* @__PURE__ */ defineComponent({
  name: "ElTooltipContent",
  inheritAttrs: false
});
const _sfc_main$c = /* @__PURE__ */ defineComponent({
  ...__default__$9,
  props: useTooltipContentProps,
  setup(__props, { expose }) {
    const props = __props;
    const { selector } = usePopperContainerId();
    const ns2 = useNamespace("tooltip");
    const contentRef = ref();
    let stopHandle;
    const {
      controlled,
      id: id2,
      open,
      trigger: trigger2,
      onClose,
      onOpen,
      onShow,
      onHide,
      onBeforeShow,
      onBeforeHide
    } = inject(TOOLTIP_INJECTION_KEY, void 0);
    const transitionClass = computed(() => {
      return props.transition || `${ns2.namespace.value}-fade-in-linear`;
    });
    const persistentRef = computed(() => {
      return props.persistent;
    });
    onBeforeUnmount(() => {
      stopHandle == null ? void 0 : stopHandle();
    });
    const shouldRender = computed(() => {
      return unref(persistentRef) ? true : unref(open);
    });
    const shouldShow = computed(() => {
      return props.disabled ? false : unref(open);
    });
    const appendTo = computed(() => {
      return props.appendTo || selector.value;
    });
    const contentStyle = computed(() => {
      var _a2;
      return (_a2 = props.style) != null ? _a2 : {};
    });
    const ariaHidden = ref(true);
    const onTransitionLeave = () => {
      onHide();
      isFocusInsideContent() && tryFocus(document.body);
      ariaHidden.value = true;
    };
    const stopWhenControlled = () => {
      if (unref(controlled))
        return true;
    };
    const onContentEnter = composeEventHandlers(stopWhenControlled, () => {
      if (props.enterable && unref(trigger2) === "hover") {
        onOpen();
      }
    });
    const onContentLeave = composeEventHandlers(stopWhenControlled, () => {
      if (unref(trigger2) === "hover") {
        onClose();
      }
    });
    const onBeforeEnter = () => {
      var _a2, _b2;
      (_b2 = (_a2 = contentRef.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b2.call(_a2);
      onBeforeShow == null ? void 0 : onBeforeShow();
    };
    const onBeforeLeave = () => {
      onBeforeHide == null ? void 0 : onBeforeHide();
    };
    const onAfterShow = () => {
      onShow();
      stopHandle = onClickOutside(computed(() => {
        var _a2;
        return (_a2 = contentRef.value) == null ? void 0 : _a2.popperContentRef;
      }), () => {
        if (unref(controlled))
          return;
        const $trigger = unref(trigger2);
        if ($trigger !== "hover") {
          onClose();
        }
      });
    };
    const onBlur = () => {
      if (!props.virtualTriggering) {
        onClose();
      }
    };
    const isFocusInsideContent = (event) => {
      var _a2;
      const popperContent = (_a2 = contentRef.value) == null ? void 0 : _a2.popperContentRef;
      const activeElement = (event == null ? void 0 : event.relatedTarget) || document.activeElement;
      return popperContent == null ? void 0 : popperContent.contains(activeElement);
    };
    watch(() => unref(open), (val) => {
      if (!val) {
        stopHandle == null ? void 0 : stopHandle();
      } else {
        ariaHidden.value = false;
      }
    }, {
      flush: "post"
    });
    watch(() => props.content, () => {
      var _a2, _b2;
      (_b2 = (_a2 = contentRef.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b2.call(_a2);
    });
    expose({
      contentRef,
      isFocusInsideContent
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(ElTeleport), {
        disabled: !_ctx.teleported,
        to: unref(appendTo)
      }, {
        default: withCtx(() => [
          createVNode(Transition, {
            name: unref(transitionClass),
            onAfterLeave: onTransitionLeave,
            onBeforeEnter,
            onAfterEnter: onAfterShow,
            onBeforeLeave
          }, {
            default: withCtx(() => [
              unref(shouldRender) ? withDirectives((openBlock(), createBlock(unref(ElPopperContent), mergeProps({
                key: 0,
                id: unref(id2),
                ref_key: "contentRef",
                ref: contentRef
              }, _ctx.$attrs, {
                "aria-label": _ctx.ariaLabel,
                "aria-hidden": ariaHidden.value,
                "boundaries-padding": _ctx.boundariesPadding,
                "fallback-placements": _ctx.fallbackPlacements,
                "gpu-acceleration": _ctx.gpuAcceleration,
                offset: _ctx.offset,
                placement: _ctx.placement,
                "popper-options": _ctx.popperOptions,
                strategy: _ctx.strategy,
                effect: _ctx.effect,
                enterable: _ctx.enterable,
                pure: _ctx.pure,
                "popper-class": _ctx.popperClass,
                "popper-style": [_ctx.popperStyle, unref(contentStyle)],
                "reference-el": _ctx.referenceEl,
                "trigger-target-el": _ctx.triggerTargetEl,
                visible: unref(shouldShow),
                "z-index": _ctx.zIndex,
                onMouseenter: unref(onContentEnter),
                onMouseleave: unref(onContentLeave),
                onBlur,
                onClose: unref(onClose)
              }), {
                default: withCtx(() => [
                  renderSlot(_ctx.$slots, "default")
                ]),
                _: 3
              }, 16, ["id", "aria-label", "aria-hidden", "boundaries-padding", "fallback-placements", "gpu-acceleration", "offset", "placement", "popper-options", "strategy", "effect", "enterable", "pure", "popper-class", "popper-style", "reference-el", "trigger-target-el", "visible", "z-index", "onMouseenter", "onMouseleave", "onClose"])), [
                [vShow, unref(shouldShow)]
              ]) : createCommentVNode("v-if", true)
            ]),
            _: 3
          }, 8, ["name"])
        ]),
        _: 3
      }, 8, ["disabled", "to"]);
    };
  }
});
var ElTooltipContent = /* @__PURE__ */ _export_sfc$1(_sfc_main$c, [["__file", "content.vue"]]);
const __default__$8 = /* @__PURE__ */ defineComponent({
  name: "ElTooltip"
});
const _sfc_main$b = /* @__PURE__ */ defineComponent({
  ...__default__$8,
  props: useTooltipProps,
  emits: tooltipEmits,
  setup(__props, { expose, emit: emit2 }) {
    const props = __props;
    usePopperContainer();
    const id2 = useId();
    const popperRef = ref();
    const contentRef = ref();
    const updatePopper = () => {
      var _a2;
      const popperComponent = unref(popperRef);
      if (popperComponent) {
        (_a2 = popperComponent.popperInstanceRef) == null ? void 0 : _a2.update();
      }
    };
    const open = ref(false);
    const toggleReason = ref();
    const { show, hide, hasUpdateHandler } = useTooltipModelToggle({
      indicator: open,
      toggleReason
    });
    const { onOpen, onClose } = useDelayedToggle({
      showAfter: toRef(props, "showAfter"),
      hideAfter: toRef(props, "hideAfter"),
      autoClose: toRef(props, "autoClose"),
      open: show,
      close: hide
    });
    const controlled = computed(() => isBoolean$2(props.visible) && !hasUpdateHandler.value);
    provide(TOOLTIP_INJECTION_KEY, {
      controlled,
      id: id2,
      open: readonly(open),
      trigger: toRef(props, "trigger"),
      onOpen: (event) => {
        onOpen(event);
      },
      onClose: (event) => {
        onClose(event);
      },
      onToggle: (event) => {
        if (unref(open)) {
          onClose(event);
        } else {
          onOpen(event);
        }
      },
      onShow: () => {
        emit2("show", toggleReason.value);
      },
      onHide: () => {
        emit2("hide", toggleReason.value);
      },
      onBeforeShow: () => {
        emit2("before-show", toggleReason.value);
      },
      onBeforeHide: () => {
        emit2("before-hide", toggleReason.value);
      },
      updatePopper
    });
    watch(() => props.disabled, (disabled) => {
      if (disabled && open.value) {
        open.value = false;
      }
    });
    const isFocusInsideContent = (event) => {
      var _a2;
      return (_a2 = contentRef.value) == null ? void 0 : _a2.isFocusInsideContent(event);
    };
    onDeactivated(() => open.value && hide());
    expose({
      popperRef,
      contentRef,
      isFocusInsideContent,
      updatePopper,
      onOpen,
      onClose,
      hide
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(ElPopper), {
        ref_key: "popperRef",
        ref: popperRef,
        role: _ctx.role
      }, {
        default: withCtx(() => [
          createVNode(ElTooltipTrigger, {
            disabled: _ctx.disabled,
            trigger: _ctx.trigger,
            "trigger-keys": _ctx.triggerKeys,
            "virtual-ref": _ctx.virtualRef,
            "virtual-triggering": _ctx.virtualTriggering
          }, {
            default: withCtx(() => [
              _ctx.$slots.default ? renderSlot(_ctx.$slots, "default", { key: 0 }) : createCommentVNode("v-if", true)
            ]),
            _: 3
          }, 8, ["disabled", "trigger", "trigger-keys", "virtual-ref", "virtual-triggering"]),
          createVNode(ElTooltipContent, {
            ref_key: "contentRef",
            ref: contentRef,
            "aria-label": _ctx.ariaLabel,
            "boundaries-padding": _ctx.boundariesPadding,
            content: _ctx.content,
            disabled: _ctx.disabled,
            effect: _ctx.effect,
            enterable: _ctx.enterable,
            "fallback-placements": _ctx.fallbackPlacements,
            "hide-after": _ctx.hideAfter,
            "gpu-acceleration": _ctx.gpuAcceleration,
            offset: _ctx.offset,
            persistent: _ctx.persistent,
            "popper-class": _ctx.popperClass,
            "popper-style": _ctx.popperStyle,
            placement: _ctx.placement,
            "popper-options": _ctx.popperOptions,
            pure: _ctx.pure,
            "raw-content": _ctx.rawContent,
            "reference-el": _ctx.referenceEl,
            "trigger-target-el": _ctx.triggerTargetEl,
            "show-after": _ctx.showAfter,
            strategy: _ctx.strategy,
            teleported: _ctx.teleported,
            transition: _ctx.transition,
            "virtual-triggering": _ctx.virtualTriggering,
            "z-index": _ctx.zIndex,
            "append-to": _ctx.appendTo
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "content", {}, () => [
                _ctx.rawContent ? (openBlock(), createElementBlock("span", {
                  key: 0,
                  innerHTML: _ctx.content
                }, null, 8, ["innerHTML"])) : (openBlock(), createElementBlock("span", { key: 1 }, toDisplayString$1(_ctx.content), 1))
              ]),
              _ctx.showArrow ? (openBlock(), createBlock(unref(ElPopperArrow), {
                key: 0,
                "arrow-offset": _ctx.arrowOffset
              }, null, 8, ["arrow-offset"])) : createCommentVNode("v-if", true)
            ]),
            _: 3
          }, 8, ["aria-label", "boundaries-padding", "content", "disabled", "effect", "enterable", "fallback-placements", "hide-after", "gpu-acceleration", "offset", "persistent", "popper-class", "popper-style", "placement", "popper-options", "pure", "raw-content", "reference-el", "trigger-target-el", "show-after", "strategy", "teleported", "transition", "virtual-triggering", "z-index", "append-to"])
        ]),
        _: 3
      }, 8, ["role"]);
    };
  }
});
var Tooltip = /* @__PURE__ */ _export_sfc$1(_sfc_main$b, [["__file", "tooltip.vue"]]);
const ElTooltip = withInstall(Tooltip);
const badgeProps = buildProps({
  value: {
    type: [String, Number],
    default: ""
  },
  max: {
    type: Number,
    default: 99
  },
  isDot: Boolean,
  hidden: Boolean,
  type: {
    type: String,
    values: ["primary", "success", "warning", "info", "danger"],
    default: "danger"
  },
  showZero: {
    type: Boolean,
    default: true
  },
  color: String,
  badgeStyle: {
    type: definePropType([String, Object, Array])
  },
  offset: {
    type: definePropType(Array),
    default: [0, 0]
  },
  badgeClass: {
    type: String
  }
});
const __default__$7 = /* @__PURE__ */ defineComponent({
  name: "ElBadge"
});
const _sfc_main$a = /* @__PURE__ */ defineComponent({
  ...__default__$7,
  props: badgeProps,
  setup(__props, { expose }) {
    const props = __props;
    const ns2 = useNamespace("badge");
    const content = computed(() => {
      if (props.isDot)
        return "";
      if (isNumber$2(props.value) && isNumber$2(props.max)) {
        return props.max < props.value ? `${props.max}+` : `${props.value}`;
      }
      return `${props.value}`;
    });
    const style = computed(() => {
      var _a2, _b2, _c2, _d2, _e;
      return [
        {
          backgroundColor: props.color,
          marginRight: addUnit(-((_b2 = (_a2 = props.offset) == null ? void 0 : _a2[0]) != null ? _b2 : 0)),
          marginTop: addUnit((_d2 = (_c2 = props.offset) == null ? void 0 : _c2[1]) != null ? _d2 : 0)
        },
        (_e = props.badgeStyle) != null ? _e : {}
      ];
    });
    expose({
      content
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(ns2).b())
      }, [
        renderSlot(_ctx.$slots, "default"),
        createVNode(Transition, {
          name: `${unref(ns2).namespace.value}-zoom-in-center`,
          persisted: ""
        }, {
          default: withCtx(() => [
            withDirectives(createBaseVNode("sup", {
              class: normalizeClass([
                unref(ns2).e("content"),
                unref(ns2).em("content", _ctx.type),
                unref(ns2).is("fixed", !!_ctx.$slots.default),
                unref(ns2).is("dot", _ctx.isDot),
                unref(ns2).is("hide-zero", !_ctx.showZero && props.value === 0),
                _ctx.badgeClass
              ]),
              style: normalizeStyle(unref(style))
            }, [
              renderSlot(_ctx.$slots, "content", { value: unref(content) }, () => [
                createTextVNode(toDisplayString$1(unref(content)), 1)
              ])
            ], 6), [
              [vShow, !_ctx.hidden && (unref(content) || _ctx.isDot || _ctx.$slots.content)]
            ])
          ]),
          _: 3
        }, 8, ["name"])
      ], 2);
    };
  }
});
var Badge = /* @__PURE__ */ _export_sfc$1(_sfc_main$a, [["__file", "badge.vue"]]);
const ElBadge = withInstall(Badge);
const buttonGroupContextKey = Symbol("buttonGroupContextKey");
const useDeprecated = ({ from, replacement, scope, version: version2, ref: ref2, type: type4 = "API" }, condition) => {
  watch(() => unref(condition), (val) => {
  }, {
    immediate: true
  });
};
const useButton = (props, emit2) => {
  useDeprecated({
    from: "type.text",
    replacement: "link",
    version: "3.0.0",
    scope: "props",
    ref: "https://element-plus.org/en-US/component/button.html#button-attributes"
  }, computed(() => props.type === "text"));
  const buttonGroupContext = inject(buttonGroupContextKey, void 0);
  const globalConfig2 = useGlobalConfig("button");
  const { form } = useFormItem();
  const _size = useFormSize(computed(() => buttonGroupContext == null ? void 0 : buttonGroupContext.size));
  const _disabled = useFormDisabled();
  const _ref = ref();
  const slots = useSlots();
  const _type = computed(() => props.type || (buttonGroupContext == null ? void 0 : buttonGroupContext.type) || "");
  const autoInsertSpace = computed(() => {
    var _a2, _b2, _c2;
    return (_c2 = (_b2 = props.autoInsertSpace) != null ? _b2 : (_a2 = globalConfig2.value) == null ? void 0 : _a2.autoInsertSpace) != null ? _c2 : false;
  });
  const _props = computed(() => {
    if (props.tag === "button") {
      return {
        ariaDisabled: _disabled.value || props.loading,
        disabled: _disabled.value || props.loading,
        autofocus: props.autofocus,
        type: props.nativeType
      };
    }
    return {};
  });
  const shouldAddSpace = computed(() => {
    var _a2;
    const defaultSlot = (_a2 = slots.default) == null ? void 0 : _a2.call(slots);
    if (autoInsertSpace.value && (defaultSlot == null ? void 0 : defaultSlot.length) === 1) {
      const slot = defaultSlot[0];
      if ((slot == null ? void 0 : slot.type) === Text) {
        const text = slot.children;
        return new RegExp("^\\p{Unified_Ideograph}{2}$", "u").test(text.trim());
      }
    }
    return false;
  });
  const handleClick = (evt) => {
    if (_disabled.value || props.loading) {
      evt.stopPropagation();
      return;
    }
    if (props.nativeType === "reset") {
      form == null ? void 0 : form.resetFields();
    }
    emit2("click", evt);
  };
  return {
    _disabled,
    _size,
    _type,
    _ref,
    _props,
    shouldAddSpace,
    handleClick
  };
};
const buttonTypes = [
  "default",
  "primary",
  "success",
  "warning",
  "info",
  "danger",
  "text",
  ""
];
const buttonNativeTypes = ["button", "submit", "reset"];
const buttonProps = buildProps({
  size: useSizeProp,
  disabled: Boolean,
  type: {
    type: String,
    values: buttonTypes,
    default: ""
  },
  icon: {
    type: iconPropType
  },
  nativeType: {
    type: String,
    values: buttonNativeTypes,
    default: "button"
  },
  loading: Boolean,
  loadingIcon: {
    type: iconPropType,
    default: () => loading_default
  },
  plain: Boolean,
  text: Boolean,
  link: Boolean,
  bg: Boolean,
  autofocus: Boolean,
  round: Boolean,
  circle: Boolean,
  color: String,
  dark: Boolean,
  autoInsertSpace: {
    type: Boolean,
    default: void 0
  },
  tag: {
    type: definePropType([String, Object]),
    default: "button"
  }
});
const buttonEmits = {
  click: (evt) => evt instanceof MouseEvent
};
function bound01(n, max) {
  if (isOnePointZero(n)) {
    n = "100%";
  }
  var isPercent = isPercentage(n);
  n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));
  if (isPercent) {
    n = parseInt(String(n * max), 10) / 100;
  }
  if (Math.abs(n - max) < 1e-6) {
    return 1;
  }
  if (max === 360) {
    n = (n < 0 ? n % max + max : n % max) / parseFloat(String(max));
  } else {
    n = n % max / parseFloat(String(max));
  }
  return n;
}
function clamp01(val) {
  return Math.min(1, Math.max(0, val));
}
function isOnePointZero(n) {
  return typeof n === "string" && n.indexOf(".") !== -1 && parseFloat(n) === 1;
}
function isPercentage(n) {
  return typeof n === "string" && n.indexOf("%") !== -1;
}
function boundAlpha(a2) {
  a2 = parseFloat(a2);
  if (isNaN(a2) || a2 < 0 || a2 > 1) {
    a2 = 1;
  }
  return a2;
}
function convertToPercentage(n) {
  if (n <= 1) {
    return "".concat(Number(n) * 100, "%");
  }
  return n;
}
function pad2(c2) {
  return c2.length === 1 ? "0" + c2 : String(c2);
}
function rgbToRgb(r2, g2, b) {
  return {
    r: bound01(r2, 255) * 255,
    g: bound01(g2, 255) * 255,
    b: bound01(b, 255) * 255
  };
}
function rgbToHsl(r2, g2, b) {
  r2 = bound01(r2, 255);
  g2 = bound01(g2, 255);
  b = bound01(b, 255);
  var max = Math.max(r2, g2, b);
  var min = Math.min(r2, g2, b);
  var h2 = 0;
  var s2 = 0;
  var l2 = (max + min) / 2;
  if (max === min) {
    s2 = 0;
    h2 = 0;
  } else {
    var d2 = max - min;
    s2 = l2 > 0.5 ? d2 / (2 - max - min) : d2 / (max + min);
    switch (max) {
      case r2:
        h2 = (g2 - b) / d2 + (g2 < b ? 6 : 0);
        break;
      case g2:
        h2 = (b - r2) / d2 + 2;
        break;
      case b:
        h2 = (r2 - g2) / d2 + 4;
        break;
    }
    h2 /= 6;
  }
  return { h: h2, s: s2, l: l2 };
}
function hue2rgb(p2, q2, t2) {
  if (t2 < 0) {
    t2 += 1;
  }
  if (t2 > 1) {
    t2 -= 1;
  }
  if (t2 < 1 / 6) {
    return p2 + (q2 - p2) * (6 * t2);
  }
  if (t2 < 1 / 2) {
    return q2;
  }
  if (t2 < 2 / 3) {
    return p2 + (q2 - p2) * (2 / 3 - t2) * 6;
  }
  return p2;
}
function hslToRgb(h2, s2, l2) {
  var r2;
  var g2;
  var b;
  h2 = bound01(h2, 360);
  s2 = bound01(s2, 100);
  l2 = bound01(l2, 100);
  if (s2 === 0) {
    g2 = l2;
    b = l2;
    r2 = l2;
  } else {
    var q2 = l2 < 0.5 ? l2 * (1 + s2) : l2 + s2 - l2 * s2;
    var p2 = 2 * l2 - q2;
    r2 = hue2rgb(p2, q2, h2 + 1 / 3);
    g2 = hue2rgb(p2, q2, h2);
    b = hue2rgb(p2, q2, h2 - 1 / 3);
  }
  return { r: r2 * 255, g: g2 * 255, b: b * 255 };
}
function rgbToHsv(r2, g2, b) {
  r2 = bound01(r2, 255);
  g2 = bound01(g2, 255);
  b = bound01(b, 255);
  var max = Math.max(r2, g2, b);
  var min = Math.min(r2, g2, b);
  var h2 = 0;
  var v2 = max;
  var d2 = max - min;
  var s2 = max === 0 ? 0 : d2 / max;
  if (max === min) {
    h2 = 0;
  } else {
    switch (max) {
      case r2:
        h2 = (g2 - b) / d2 + (g2 < b ? 6 : 0);
        break;
      case g2:
        h2 = (b - r2) / d2 + 2;
        break;
      case b:
        h2 = (r2 - g2) / d2 + 4;
        break;
    }
    h2 /= 6;
  }
  return { h: h2, s: s2, v: v2 };
}
function hsvToRgb(h2, s2, v2) {
  h2 = bound01(h2, 360) * 6;
  s2 = bound01(s2, 100);
  v2 = bound01(v2, 100);
  var i2 = Math.floor(h2);
  var f2 = h2 - i2;
  var p2 = v2 * (1 - s2);
  var q2 = v2 * (1 - f2 * s2);
  var t2 = v2 * (1 - (1 - f2) * s2);
  var mod = i2 % 6;
  var r2 = [v2, q2, p2, p2, t2, v2][mod];
  var g2 = [t2, v2, v2, q2, p2, p2][mod];
  var b = [p2, p2, t2, v2, v2, q2][mod];
  return { r: r2 * 255, g: g2 * 255, b: b * 255 };
}
function rgbToHex(r2, g2, b, allow3Char) {
  var hex2 = [
    pad2(Math.round(r2).toString(16)),
    pad2(Math.round(g2).toString(16)),
    pad2(Math.round(b).toString(16))
  ];
  if (allow3Char && hex2[0].startsWith(hex2[0].charAt(1)) && hex2[1].startsWith(hex2[1].charAt(1)) && hex2[2].startsWith(hex2[2].charAt(1))) {
    return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0);
  }
  return hex2.join("");
}
function rgbaToHex(r2, g2, b, a2, allow4Char) {
  var hex2 = [
    pad2(Math.round(r2).toString(16)),
    pad2(Math.round(g2).toString(16)),
    pad2(Math.round(b).toString(16)),
    pad2(convertDecimalToHex(a2))
  ];
  if (allow4Char && hex2[0].startsWith(hex2[0].charAt(1)) && hex2[1].startsWith(hex2[1].charAt(1)) && hex2[2].startsWith(hex2[2].charAt(1)) && hex2[3].startsWith(hex2[3].charAt(1))) {
    return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0) + hex2[3].charAt(0);
  }
  return hex2.join("");
}
function convertDecimalToHex(d2) {
  return Math.round(parseFloat(d2) * 255).toString(16);
}
function convertHexToDecimal(h2) {
  return parseIntFromHex(h2) / 255;
}
function parseIntFromHex(val) {
  return parseInt(val, 16);
}
function numberInputToObject(color) {
  return {
    r: color >> 16,
    g: (color & 65280) >> 8,
    b: color & 255
  };
}
var names = {
  aliceblue: "#f0f8ff",
  antiquewhite: "#faebd7",
  aqua: "#00ffff",
  aquamarine: "#7fffd4",
  azure: "#f0ffff",
  beige: "#f5f5dc",
  bisque: "#ffe4c4",
  black: "#000000",
  blanchedalmond: "#ffebcd",
  blue: "#0000ff",
  blueviolet: "#8a2be2",
  brown: "#a52a2a",
  burlywood: "#deb887",
  cadetblue: "#5f9ea0",
  chartreuse: "#7fff00",
  chocolate: "#d2691e",
  coral: "#ff7f50",
  cornflowerblue: "#6495ed",
  cornsilk: "#fff8dc",
  crimson: "#dc143c",
  cyan: "#00ffff",
  darkblue: "#00008b",
  darkcyan: "#008b8b",
  darkgoldenrod: "#b8860b",
  darkgray: "#a9a9a9",
  darkgreen: "#006400",
  darkgrey: "#a9a9a9",
  darkkhaki: "#bdb76b",
  darkmagenta: "#8b008b",
  darkolivegreen: "#556b2f",
  darkorange: "#ff8c00",
  darkorchid: "#9932cc",
  darkred: "#8b0000",
  darksalmon: "#e9967a",
  darkseagreen: "#8fbc8f",
  darkslateblue: "#483d8b",
  darkslategray: "#2f4f4f",
  darkslategrey: "#2f4f4f",
  darkturquoise: "#00ced1",
  darkviolet: "#9400d3",
  deeppink: "#ff1493",
  deepskyblue: "#00bfff",
  dimgray: "#696969",
  dimgrey: "#696969",
  dodgerblue: "#1e90ff",
  firebrick: "#b22222",
  floralwhite: "#fffaf0",
  forestgreen: "#228b22",
  fuchsia: "#ff00ff",
  gainsboro: "#dcdcdc",
  ghostwhite: "#f8f8ff",
  goldenrod: "#daa520",
  gold: "#ffd700",
  gray: "#808080",
  green: "#008000",
  greenyellow: "#adff2f",
  grey: "#808080",
  honeydew: "#f0fff0",
  hotpink: "#ff69b4",
  indianred: "#cd5c5c",
  indigo: "#4b0082",
  ivory: "#fffff0",
  khaki: "#f0e68c",
  lavenderblush: "#fff0f5",
  lavender: "#e6e6fa",
  lawngreen: "#7cfc00",
  lemonchiffon: "#fffacd",
  lightblue: "#add8e6",
  lightcoral: "#f08080",
  lightcyan: "#e0ffff",
  lightgoldenrodyellow: "#fafad2",
  lightgray: "#d3d3d3",
  lightgreen: "#90ee90",
  lightgrey: "#d3d3d3",
  lightpink: "#ffb6c1",
  lightsalmon: "#ffa07a",
  lightseagreen: "#20b2aa",
  lightskyblue: "#87cefa",
  lightslategray: "#778899",
  lightslategrey: "#778899",
  lightsteelblue: "#b0c4de",
  lightyellow: "#ffffe0",
  lime: "#00ff00",
  limegreen: "#32cd32",
  linen: "#faf0e6",
  magenta: "#ff00ff",
  maroon: "#800000",
  mediumaquamarine: "#66cdaa",
  mediumblue: "#0000cd",
  mediumorchid: "#ba55d3",
  mediumpurple: "#9370db",
  mediumseagreen: "#3cb371",
  mediumslateblue: "#7b68ee",
  mediumspringgreen: "#00fa9a",
  mediumturquoise: "#48d1cc",
  mediumvioletred: "#c71585",
  midnightblue: "#191970",
  mintcream: "#f5fffa",
  mistyrose: "#ffe4e1",
  moccasin: "#ffe4b5",
  navajowhite: "#ffdead",
  navy: "#000080",
  oldlace: "#fdf5e6",
  olive: "#808000",
  olivedrab: "#6b8e23",
  orange: "#ffa500",
  orangered: "#ff4500",
  orchid: "#da70d6",
  palegoldenrod: "#eee8aa",
  palegreen: "#98fb98",
  paleturquoise: "#afeeee",
  palevioletred: "#db7093",
  papayawhip: "#ffefd5",
  peachpuff: "#ffdab9",
  peru: "#cd853f",
  pink: "#ffc0cb",
  plum: "#dda0dd",
  powderblue: "#b0e0e6",
  purple: "#800080",
  rebeccapurple: "#663399",
  red: "#ff0000",
  rosybrown: "#bc8f8f",
  royalblue: "#4169e1",
  saddlebrown: "#8b4513",
  salmon: "#fa8072",
  sandybrown: "#f4a460",
  seagreen: "#2e8b57",
  seashell: "#fff5ee",
  sienna: "#a0522d",
  silver: "#c0c0c0",
  skyblue: "#87ceeb",
  slateblue: "#6a5acd",
  slategray: "#708090",
  slategrey: "#708090",
  snow: "#fffafa",
  springgreen: "#00ff7f",
  steelblue: "#4682b4",
  tan: "#d2b48c",
  teal: "#008080",
  thistle: "#d8bfd8",
  tomato: "#ff6347",
  turquoise: "#40e0d0",
  violet: "#ee82ee",
  wheat: "#f5deb3",
  white: "#ffffff",
  whitesmoke: "#f5f5f5",
  yellow: "#ffff00",
  yellowgreen: "#9acd32"
};
function inputToRGB(color) {
  var rgb = { r: 0, g: 0, b: 0 };
  var a2 = 1;
  var s2 = null;
  var v2 = null;
  var l2 = null;
  var ok = false;
  var format2 = false;
  if (typeof color === "string") {
    color = stringInputToObject(color);
  }
  if (typeof color === "object") {
    if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
      rgb = rgbToRgb(color.r, color.g, color.b);
      ok = true;
      format2 = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
      s2 = convertToPercentage(color.s);
      v2 = convertToPercentage(color.v);
      rgb = hsvToRgb(color.h, s2, v2);
      ok = true;
      format2 = "hsv";
    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
      s2 = convertToPercentage(color.s);
      l2 = convertToPercentage(color.l);
      rgb = hslToRgb(color.h, s2, l2);
      ok = true;
      format2 = "hsl";
    }
    if (Object.prototype.hasOwnProperty.call(color, "a")) {
      a2 = color.a;
    }
  }
  a2 = boundAlpha(a2);
  return {
    ok,
    format: color.format || format2,
    r: Math.min(255, Math.max(rgb.r, 0)),
    g: Math.min(255, Math.max(rgb.g, 0)),
    b: Math.min(255, Math.max(rgb.b, 0)),
    a: a2
  };
}
var CSS_INTEGER = "[-\\+]?\\d+%?";
var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
var CSS_UNIT = "(?:".concat(CSS_NUMBER, ")|(?:").concat(CSS_INTEGER, ")");
var PERMISSIVE_MATCH3 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
var PERMISSIVE_MATCH4 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
var matchers = {
  CSS_UNIT: new RegExp(CSS_UNIT),
  rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
  rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
  hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
  hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
  hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
  hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
  hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
  hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
};
function stringInputToObject(color) {
  color = color.trim().toLowerCase();
  if (color.length === 0) {
    return false;
  }
  var named = false;
  if (names[color]) {
    color = names[color];
    named = true;
  } else if (color === "transparent") {
    return { r: 0, g: 0, b: 0, a: 0, format: "name" };
  }
  var match = matchers.rgb.exec(color);
  if (match) {
    return { r: match[1], g: match[2], b: match[3] };
  }
  match = matchers.rgba.exec(color);
  if (match) {
    return { r: match[1], g: match[2], b: match[3], a: match[4] };
  }
  match = matchers.hsl.exec(color);
  if (match) {
    return { h: match[1], s: match[2], l: match[3] };
  }
  match = matchers.hsla.exec(color);
  if (match) {
    return { h: match[1], s: match[2], l: match[3], a: match[4] };
  }
  match = matchers.hsv.exec(color);
  if (match) {
    return { h: match[1], s: match[2], v: match[3] };
  }
  match = matchers.hsva.exec(color);
  if (match) {
    return { h: match[1], s: match[2], v: match[3], a: match[4] };
  }
  match = matchers.hex8.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      a: convertHexToDecimal(match[4]),
      format: named ? "name" : "hex8"
    };
  }
  match = matchers.hex6.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      format: named ? "name" : "hex"
    };
  }
  match = matchers.hex4.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1] + match[1]),
      g: parseIntFromHex(match[2] + match[2]),
      b: parseIntFromHex(match[3] + match[3]),
      a: convertHexToDecimal(match[4] + match[4]),
      format: named ? "name" : "hex8"
    };
  }
  match = matchers.hex3.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1] + match[1]),
      g: parseIntFromHex(match[2] + match[2]),
      b: parseIntFromHex(match[3] + match[3]),
      format: named ? "name" : "hex"
    };
  }
  return false;
}
function isValidCSSUnit(color) {
  return Boolean(matchers.CSS_UNIT.exec(String(color)));
}
var TinyColor = (
  /** @class */
  function() {
    function TinyColor2(color, opts) {
      if (color === void 0) {
        color = "";
      }
      if (opts === void 0) {
        opts = {};
      }
      var _a2;
      if (color instanceof TinyColor2) {
        return color;
      }
      if (typeof color === "number") {
        color = numberInputToObject(color);
      }
      this.originalInput = color;
      var rgb = inputToRGB(color);
      this.originalInput = color;
      this.r = rgb.r;
      this.g = rgb.g;
      this.b = rgb.b;
      this.a = rgb.a;
      this.roundA = Math.round(100 * this.a) / 100;
      this.format = (_a2 = opts.format) !== null && _a2 !== void 0 ? _a2 : rgb.format;
      this.gradientType = opts.gradientType;
      if (this.r < 1) {
        this.r = Math.round(this.r);
      }
      if (this.g < 1) {
        this.g = Math.round(this.g);
      }
      if (this.b < 1) {
        this.b = Math.round(this.b);
      }
      this.isValid = rgb.ok;
    }
    TinyColor2.prototype.isDark = function() {
      return this.getBrightness() < 128;
    };
    TinyColor2.prototype.isLight = function() {
      return !this.isDark();
    };
    TinyColor2.prototype.getBrightness = function() {
      var rgb = this.toRgb();
      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
    };
    TinyColor2.prototype.getLuminance = function() {
      var rgb = this.toRgb();
      var R2;
      var G2;
      var B2;
      var RsRGB = rgb.r / 255;
      var GsRGB = rgb.g / 255;
      var BsRGB = rgb.b / 255;
      if (RsRGB <= 0.03928) {
        R2 = RsRGB / 12.92;
      } else {
        R2 = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
      }
      if (GsRGB <= 0.03928) {
        G2 = GsRGB / 12.92;
      } else {
        G2 = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
      }
      if (BsRGB <= 0.03928) {
        B2 = BsRGB / 12.92;
      } else {
        B2 = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
      }
      return 0.2126 * R2 + 0.7152 * G2 + 0.0722 * B2;
    };
    TinyColor2.prototype.getAlpha = function() {
      return this.a;
    };
    TinyColor2.prototype.setAlpha = function(alpha) {
      this.a = boundAlpha(alpha);
      this.roundA = Math.round(100 * this.a) / 100;
      return this;
    };
    TinyColor2.prototype.isMonochrome = function() {
      var s2 = this.toHsl().s;
      return s2 === 0;
    };
    TinyColor2.prototype.toHsv = function() {
      var hsv = rgbToHsv(this.r, this.g, this.b);
      return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };
    };
    TinyColor2.prototype.toHsvString = function() {
      var hsv = rgbToHsv(this.r, this.g, this.b);
      var h2 = Math.round(hsv.h * 360);
      var s2 = Math.round(hsv.s * 100);
      var v2 = Math.round(hsv.v * 100);
      return this.a === 1 ? "hsv(".concat(h2, ", ").concat(s2, "%, ").concat(v2, "%)") : "hsva(".concat(h2, ", ").concat(s2, "%, ").concat(v2, "%, ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toHsl = function() {
      var hsl = rgbToHsl(this.r, this.g, this.b);
      return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };
    };
    TinyColor2.prototype.toHslString = function() {
      var hsl = rgbToHsl(this.r, this.g, this.b);
      var h2 = Math.round(hsl.h * 360);
      var s2 = Math.round(hsl.s * 100);
      var l2 = Math.round(hsl.l * 100);
      return this.a === 1 ? "hsl(".concat(h2, ", ").concat(s2, "%, ").concat(l2, "%)") : "hsla(".concat(h2, ", ").concat(s2, "%, ").concat(l2, "%, ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toHex = function(allow3Char) {
      if (allow3Char === void 0) {
        allow3Char = false;
      }
      return rgbToHex(this.r, this.g, this.b, allow3Char);
    };
    TinyColor2.prototype.toHexString = function(allow3Char) {
      if (allow3Char === void 0) {
        allow3Char = false;
      }
      return "#" + this.toHex(allow3Char);
    };
    TinyColor2.prototype.toHex8 = function(allow4Char) {
      if (allow4Char === void 0) {
        allow4Char = false;
      }
      return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);
    };
    TinyColor2.prototype.toHex8String = function(allow4Char) {
      if (allow4Char === void 0) {
        allow4Char = false;
      }
      return "#" + this.toHex8(allow4Char);
    };
    TinyColor2.prototype.toHexShortString = function(allowShortChar) {
      if (allowShortChar === void 0) {
        allowShortChar = false;
      }
      return this.a === 1 ? this.toHexString(allowShortChar) : this.toHex8String(allowShortChar);
    };
    TinyColor2.prototype.toRgb = function() {
      return {
        r: Math.round(this.r),
        g: Math.round(this.g),
        b: Math.round(this.b),
        a: this.a
      };
    };
    TinyColor2.prototype.toRgbString = function() {
      var r2 = Math.round(this.r);
      var g2 = Math.round(this.g);
      var b = Math.round(this.b);
      return this.a === 1 ? "rgb(".concat(r2, ", ").concat(g2, ", ").concat(b, ")") : "rgba(".concat(r2, ", ").concat(g2, ", ").concat(b, ", ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toPercentageRgb = function() {
      var fmt = function(x) {
        return "".concat(Math.round(bound01(x, 255) * 100), "%");
      };
      return {
        r: fmt(this.r),
        g: fmt(this.g),
        b: fmt(this.b),
        a: this.a
      };
    };
    TinyColor2.prototype.toPercentageRgbString = function() {
      var rnd = function(x) {
        return Math.round(bound01(x, 255) * 100);
      };
      return this.a === 1 ? "rgb(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%)") : "rgba(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%, ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toName = function() {
      if (this.a === 0) {
        return "transparent";
      }
      if (this.a < 1) {
        return false;
      }
      var hex2 = "#" + rgbToHex(this.r, this.g, this.b, false);
      for (var _i2 = 0, _a2 = Object.entries(names); _i2 < _a2.length; _i2++) {
        var _b2 = _a2[_i2], key = _b2[0], value = _b2[1];
        if (hex2 === value) {
          return key;
        }
      }
      return false;
    };
    TinyColor2.prototype.toString = function(format2) {
      var formatSet = Boolean(format2);
      format2 = format2 !== null && format2 !== void 0 ? format2 : this.format;
      var formattedString = false;
      var hasAlpha = this.a < 1 && this.a >= 0;
      var needsAlphaFormat = !formatSet && hasAlpha && (format2.startsWith("hex") || format2 === "name");
      if (needsAlphaFormat) {
        if (format2 === "name" && this.a === 0) {
          return this.toName();
        }
        return this.toRgbString();
      }
      if (format2 === "rgb") {
        formattedString = this.toRgbString();
      }
      if (format2 === "prgb") {
        formattedString = this.toPercentageRgbString();
      }
      if (format2 === "hex" || format2 === "hex6") {
        formattedString = this.toHexString();
      }
      if (format2 === "hex3") {
        formattedString = this.toHexString(true);
      }
      if (format2 === "hex4") {
        formattedString = this.toHex8String(true);
      }
      if (format2 === "hex8") {
        formattedString = this.toHex8String();
      }
      if (format2 === "name") {
        formattedString = this.toName();
      }
      if (format2 === "hsl") {
        formattedString = this.toHslString();
      }
      if (format2 === "hsv") {
        formattedString = this.toHsvString();
      }
      return formattedString || this.toHexString();
    };
    TinyColor2.prototype.toNumber = function() {
      return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
    };
    TinyColor2.prototype.clone = function() {
      return new TinyColor2(this.toString());
    };
    TinyColor2.prototype.lighten = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.l += amount / 100;
      hsl.l = clamp01(hsl.l);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.brighten = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var rgb = this.toRgb();
      rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
      rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
      rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
      return new TinyColor2(rgb);
    };
    TinyColor2.prototype.darken = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.l -= amount / 100;
      hsl.l = clamp01(hsl.l);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.tint = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      return this.mix("white", amount);
    };
    TinyColor2.prototype.shade = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      return this.mix("black", amount);
    };
    TinyColor2.prototype.desaturate = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.s -= amount / 100;
      hsl.s = clamp01(hsl.s);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.saturate = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.s += amount / 100;
      hsl.s = clamp01(hsl.s);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.greyscale = function() {
      return this.desaturate(100);
    };
    TinyColor2.prototype.spin = function(amount) {
      var hsl = this.toHsl();
      var hue = (hsl.h + amount) % 360;
      hsl.h = hue < 0 ? 360 + hue : hue;
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.mix = function(color, amount) {
      if (amount === void 0) {
        amount = 50;
      }
      var rgb1 = this.toRgb();
      var rgb2 = new TinyColor2(color).toRgb();
      var p2 = amount / 100;
      var rgba = {
        r: (rgb2.r - rgb1.r) * p2 + rgb1.r,
        g: (rgb2.g - rgb1.g) * p2 + rgb1.g,
        b: (rgb2.b - rgb1.b) * p2 + rgb1.b,
        a: (rgb2.a - rgb1.a) * p2 + rgb1.a
      };
      return new TinyColor2(rgba);
    };
    TinyColor2.prototype.analogous = function(results, slices) {
      if (results === void 0) {
        results = 6;
      }
      if (slices === void 0) {
        slices = 30;
      }
      var hsl = this.toHsl();
      var part = 360 / slices;
      var ret = [this];
      for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
        hsl.h = (hsl.h + part) % 360;
        ret.push(new TinyColor2(hsl));
      }
      return ret;
    };
    TinyColor2.prototype.complement = function() {
      var hsl = this.toHsl();
      hsl.h = (hsl.h + 180) % 360;
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.monochromatic = function(results) {
      if (results === void 0) {
        results = 6;
      }
      var hsv = this.toHsv();
      var h2 = hsv.h;
      var s2 = hsv.s;
      var v2 = hsv.v;
      var res = [];
      var modification = 1 / results;
      while (results--) {
        res.push(new TinyColor2({ h: h2, s: s2, v: v2 }));
        v2 = (v2 + modification) % 1;
      }
      return res;
    };
    TinyColor2.prototype.splitcomplement = function() {
      var hsl = this.toHsl();
      var h2 = hsl.h;
      return [
        this,
        new TinyColor2({ h: (h2 + 72) % 360, s: hsl.s, l: hsl.l }),
        new TinyColor2({ h: (h2 + 216) % 360, s: hsl.s, l: hsl.l })
      ];
    };
    TinyColor2.prototype.onBackground = function(background) {
      var fg2 = this.toRgb();
      var bg = new TinyColor2(background).toRgb();
      var alpha = fg2.a + bg.a * (1 - fg2.a);
      return new TinyColor2({
        r: (fg2.r * fg2.a + bg.r * bg.a * (1 - fg2.a)) / alpha,
        g: (fg2.g * fg2.a + bg.g * bg.a * (1 - fg2.a)) / alpha,
        b: (fg2.b * fg2.a + bg.b * bg.a * (1 - fg2.a)) / alpha,
        a: alpha
      });
    };
    TinyColor2.prototype.triad = function() {
      return this.polyad(3);
    };
    TinyColor2.prototype.tetrad = function() {
      return this.polyad(4);
    };
    TinyColor2.prototype.polyad = function(n) {
      var hsl = this.toHsl();
      var h2 = hsl.h;
      var result = [this];
      var increment = 360 / n;
      for (var i2 = 1; i2 < n; i2++) {
        result.push(new TinyColor2({ h: (h2 + i2 * increment) % 360, s: hsl.s, l: hsl.l }));
      }
      return result;
    };
    TinyColor2.prototype.equals = function(color) {
      return this.toRgbString() === new TinyColor2(color).toRgbString();
    };
    return TinyColor2;
  }()
);
function darken(color, amount = 20) {
  return color.mix("#141414", amount).toString();
}
function useButtonCustomStyle(props) {
  const _disabled = useFormDisabled();
  const ns2 = useNamespace("button");
  return computed(() => {
    let styles = {};
    let buttonColor = props.color;
    if (buttonColor) {
      const match = buttonColor.match(/var\((.*?)\)/);
      if (match) {
        buttonColor = window.getComputedStyle(window.document.documentElement).getPropertyValue(match[1]);
      }
      const color = new TinyColor(buttonColor);
      const activeBgColor = props.dark ? color.tint(20).toString() : darken(color, 20);
      if (props.plain) {
        styles = ns2.cssVarBlock({
          "bg-color": props.dark ? darken(color, 90) : color.tint(90).toString(),
          "text-color": buttonColor,
          "border-color": props.dark ? darken(color, 50) : color.tint(50).toString(),
          "hover-text-color": `var(${ns2.cssVarName("color-white")})`,
          "hover-bg-color": buttonColor,
          "hover-border-color": buttonColor,
          "active-bg-color": activeBgColor,
          "active-text-color": `var(${ns2.cssVarName("color-white")})`,
          "active-border-color": activeBgColor
        });
        if (_disabled.value) {
          styles[ns2.cssVarBlockName("disabled-bg-color")] = props.dark ? darken(color, 90) : color.tint(90).toString();
          styles[ns2.cssVarBlockName("disabled-text-color")] = props.dark ? darken(color, 50) : color.tint(50).toString();
          styles[ns2.cssVarBlockName("disabled-border-color")] = props.dark ? darken(color, 80) : color.tint(80).toString();
        }
      } else {
        const hoverBgColor = props.dark ? darken(color, 30) : color.tint(30).toString();
        const textColor = color.isDark() ? `var(${ns2.cssVarName("color-white")})` : `var(${ns2.cssVarName("color-black")})`;
        styles = ns2.cssVarBlock({
          "bg-color": buttonColor,
          "text-color": textColor,
          "border-color": buttonColor,
          "hover-bg-color": hoverBgColor,
          "hover-text-color": textColor,
          "hover-border-color": hoverBgColor,
          "active-bg-color": activeBgColor,
          "active-border-color": activeBgColor
        });
        if (_disabled.value) {
          const disabledButtonColor = props.dark ? darken(color, 50) : color.tint(50).toString();
          styles[ns2.cssVarBlockName("disabled-bg-color")] = disabledButtonColor;
          styles[ns2.cssVarBlockName("disabled-text-color")] = props.dark ? "rgba(255, 255, 255, 0.5)" : `var(${ns2.cssVarName("color-white")})`;
          styles[ns2.cssVarBlockName("disabled-border-color")] = disabledButtonColor;
        }
      }
    }
    return styles;
  });
}
const __default__$6 = /* @__PURE__ */ defineComponent({
  name: "ElButton"
});
const _sfc_main$9 = /* @__PURE__ */ defineComponent({
  ...__default__$6,
  props: buttonProps,
  emits: buttonEmits,
  setup(__props, { expose, emit: emit2 }) {
    const props = __props;
    const buttonStyle = useButtonCustomStyle(props);
    const ns2 = useNamespace("button");
    const { _ref, _size, _type, _disabled, _props, shouldAddSpace, handleClick } = useButton(props, emit2);
    const buttonKls = computed(() => [
      ns2.b(),
      ns2.m(_type.value),
      ns2.m(_size.value),
      ns2.is("disabled", _disabled.value),
      ns2.is("loading", props.loading),
      ns2.is("plain", props.plain),
      ns2.is("round", props.round),
      ns2.is("circle", props.circle),
      ns2.is("text", props.text),
      ns2.is("link", props.link),
      ns2.is("has-bg", props.bg)
    ]);
    expose({
      ref: _ref,
      size: _size,
      type: _type,
      disabled: _disabled,
      shouldAddSpace
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), mergeProps({
        ref_key: "_ref",
        ref: _ref
      }, unref(_props), {
        class: unref(buttonKls),
        style: unref(buttonStyle),
        onClick: unref(handleClick)
      }), {
        default: withCtx(() => [
          _ctx.loading ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            _ctx.$slots.loading ? renderSlot(_ctx.$slots, "loading", { key: 0 }) : (openBlock(), createBlock(unref(ElIcon), {
              key: 1,
              class: normalizeClass(unref(ns2).is("loading"))
            }, {
              default: withCtx(() => [
                (openBlock(), createBlock(resolveDynamicComponent(_ctx.loadingIcon)))
              ]),
              _: 1
            }, 8, ["class"]))
          ], 64)) : _ctx.icon || _ctx.$slots.icon ? (openBlock(), createBlock(unref(ElIcon), { key: 1 }, {
            default: withCtx(() => [
              _ctx.icon ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon), { key: 0 })) : renderSlot(_ctx.$slots, "icon", { key: 1 })
            ]),
            _: 3
          })) : createCommentVNode("v-if", true),
          _ctx.$slots.default ? (openBlock(), createElementBlock("span", {
            key: 2,
            class: normalizeClass({ [unref(ns2).em("text", "expand")]: unref(shouldAddSpace) })
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2)) : createCommentVNode("v-if", true)
        ]),
        _: 3
      }, 16, ["class", "style", "onClick"]);
    };
  }
});
var Button = /* @__PURE__ */ _export_sfc$1(_sfc_main$9, [["__file", "button.vue"]]);
const buttonGroupProps = {
  size: buttonProps.size,
  type: buttonProps.type
};
const __default__$5 = /* @__PURE__ */ defineComponent({
  name: "ElButtonGroup"
});
const _sfc_main$8 = /* @__PURE__ */ defineComponent({
  ...__default__$5,
  props: buttonGroupProps,
  setup(__props) {
    const props = __props;
    provide(buttonGroupContextKey, reactive({
      size: toRef(props, "size"),
      type: toRef(props, "type")
    }));
    const ns2 = useNamespace("button");
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(ns2).b("group"))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
var ButtonGroup = /* @__PURE__ */ _export_sfc$1(_sfc_main$8, [["__file", "button-group.vue"]]);
const ElButton = withInstall(Button, {
  ButtonGroup
});
withNoopInstall(ButtonGroup);
var PatchFlags = /* @__PURE__ */ ((PatchFlags2) => {
  PatchFlags2[PatchFlags2["TEXT"] = 1] = "TEXT";
  PatchFlags2[PatchFlags2["CLASS"] = 2] = "CLASS";
  PatchFlags2[PatchFlags2["STYLE"] = 4] = "STYLE";
  PatchFlags2[PatchFlags2["PROPS"] = 8] = "PROPS";
  PatchFlags2[PatchFlags2["FULL_PROPS"] = 16] = "FULL_PROPS";
  PatchFlags2[PatchFlags2["HYDRATE_EVENTS"] = 32] = "HYDRATE_EVENTS";
  PatchFlags2[PatchFlags2["STABLE_FRAGMENT"] = 64] = "STABLE_FRAGMENT";
  PatchFlags2[PatchFlags2["KEYED_FRAGMENT"] = 128] = "KEYED_FRAGMENT";
  PatchFlags2[PatchFlags2["UNKEYED_FRAGMENT"] = 256] = "UNKEYED_FRAGMENT";
  PatchFlags2[PatchFlags2["NEED_PATCH"] = 512] = "NEED_PATCH";
  PatchFlags2[PatchFlags2["DYNAMIC_SLOTS"] = 1024] = "DYNAMIC_SLOTS";
  PatchFlags2[PatchFlags2["HOISTED"] = -1] = "HOISTED";
  PatchFlags2[PatchFlags2["BAIL"] = -2] = "BAIL";
  return PatchFlags2;
})(PatchFlags || {});
const flattedChildren = (children) => {
  const vNodes = isArray$4(children) ? children : [children];
  const result = [];
  vNodes.forEach((child) => {
    var _a2;
    if (isArray$4(child)) {
      result.push(...flattedChildren(child));
    } else if (isVNode$1(child) && ((_a2 = child.component) == null ? void 0 : _a2.subTree)) {
      result.push(child, ...flattedChildren(child.component.subTree));
    } else if (isVNode$1(child) && isArray$4(child.children)) {
      result.push(...flattedChildren(child.children));
    } else if (isVNode$1(child) && child.shapeFlag === 2) {
      result.push(...flattedChildren(child.type()));
    } else {
      result.push(child);
    }
  });
  return result;
};
const configProviderProps = buildProps({
  a11y: {
    type: Boolean,
    default: true
  },
  locale: {
    type: definePropType(Object)
  },
  size: useSizeProp,
  button: {
    type: definePropType(Object)
  },
  experimentalFeatures: {
    type: definePropType(Object)
  },
  keyboardNavigation: {
    type: Boolean,
    default: true
  },
  message: {
    type: definePropType(Object)
  },
  zIndex: Number,
  namespace: {
    type: String,
    default: "el"
  },
  ...useEmptyValuesProps
});
const messageConfig = {};
const ConfigProvider = /* @__PURE__ */ defineComponent({
  name: "ElConfigProvider",
  props: configProviderProps,
  setup(props, { slots }) {
    watch(() => props.message, (val) => {
      Object.assign(messageConfig, val != null ? val : {});
    }, { immediate: true, deep: true });
    const config = provideGlobalConfig(props);
    return () => renderSlot(slots, "default", { config: config == null ? void 0 : config.value });
  }
});
const ElConfigProvider = withInstall(ConfigProvider);
const useSameTarget = (handleClick) => {
  if (!handleClick) {
    return { onClick: NOOP, onMousedown: NOOP, onMouseup: NOOP };
  }
  let mousedownTarget = false;
  let mouseupTarget = false;
  const onClick = (e2) => {
    if (mousedownTarget && mouseupTarget) {
      handleClick(e2);
    }
    mousedownTarget = mouseupTarget = false;
  };
  const onMousedown = (e2) => {
    mousedownTarget = e2.target === e2.currentTarget;
  };
  const onMouseup = (e2) => {
    mouseupTarget = e2.target === e2.currentTarget;
  };
  return { onClick, onMousedown, onMouseup };
};
const overlayProps = buildProps({
  mask: {
    type: Boolean,
    default: true
  },
  customMaskEvent: Boolean,
  overlayClass: {
    type: definePropType([
      String,
      Array,
      Object
    ])
  },
  zIndex: {
    type: definePropType([String, Number])
  }
});
const overlayEmits = {
  click: (evt) => evt instanceof MouseEvent
};
const BLOCK = "overlay";
var Overlay = /* @__PURE__ */ defineComponent({
  name: "ElOverlay",
  props: overlayProps,
  emits: overlayEmits,
  setup(props, { slots, emit: emit2 }) {
    const ns2 = useNamespace(BLOCK);
    const onMaskClick = (e2) => {
      emit2("click", e2);
    };
    const { onClick, onMousedown, onMouseup } = useSameTarget(props.customMaskEvent ? void 0 : onMaskClick);
    return () => {
      return props.mask ? createVNode("div", {
        class: [ns2.b(), props.overlayClass],
        style: {
          zIndex: props.zIndex
        },
        onClick,
        onMousedown,
        onMouseup
      }, [renderSlot(slots, "default")], PatchFlags.STYLE | PatchFlags.CLASS | PatchFlags.PROPS, ["onClick", "onMouseup", "onMousedown"]) : h$1("div", {
        class: props.overlayClass,
        style: {
          zIndex: props.zIndex,
          position: "fixed",
          top: "0px",
          right: "0px",
          bottom: "0px",
          left: "0px"
        }
      }, [renderSlot(slots, "default")]);
    };
  }
});
const ElOverlay = Overlay;
const dialogInjectionKey = Symbol("dialogInjectionKey");
const dialogContentProps = buildProps({
  center: Boolean,
  alignCenter: Boolean,
  closeIcon: {
    type: iconPropType
  },
  draggable: Boolean,
  overflow: Boolean,
  fullscreen: Boolean,
  headerClass: String,
  bodyClass: String,
  footerClass: String,
  showClose: {
    type: Boolean,
    default: true
  },
  title: {
    type: String,
    default: ""
  },
  ariaLevel: {
    type: String,
    default: "2"
  }
});
const dialogContentEmits = {
  close: () => true
};
const useDraggable = (targetRef, dragRef, draggable, overflow) => {
  let transform2 = {
    offsetX: 0,
    offsetY: 0
  };
  const onMousedown = (e2) => {
    const downX = e2.clientX;
    const downY = e2.clientY;
    const { offsetX, offsetY } = transform2;
    const targetRect = targetRef.value.getBoundingClientRect();
    const targetLeft = targetRect.left;
    const targetTop = targetRect.top;
    const targetWidth = targetRect.width;
    const targetHeight = targetRect.height;
    const clientWidth = document.documentElement.clientWidth;
    const clientHeight = document.documentElement.clientHeight;
    const minLeft = -targetLeft + offsetX;
    const minTop = -targetTop + offsetY;
    const maxLeft = clientWidth - targetLeft - targetWidth + offsetX;
    const maxTop = clientHeight - targetTop - targetHeight + offsetY;
    const onMousemove = (e22) => {
      let moveX = offsetX + e22.clientX - downX;
      let moveY = offsetY + e22.clientY - downY;
      if (!(overflow == null ? void 0 : overflow.value)) {
        moveX = Math.min(Math.max(moveX, minLeft), maxLeft);
        moveY = Math.min(Math.max(moveY, minTop), maxTop);
      }
      transform2 = {
        offsetX: moveX,
        offsetY: moveY
      };
      if (targetRef.value) {
        targetRef.value.style.transform = `translate(${addUnit(moveX)}, ${addUnit(moveY)})`;
      }
    };
    const onMouseup = () => {
      document.removeEventListener("mousemove", onMousemove);
      document.removeEventListener("mouseup", onMouseup);
    };
    document.addEventListener("mousemove", onMousemove);
    document.addEventListener("mouseup", onMouseup);
  };
  const onDraggable = () => {
    if (dragRef.value && targetRef.value) {
      dragRef.value.addEventListener("mousedown", onMousedown);
    }
  };
  const offDraggable = () => {
    if (dragRef.value && targetRef.value) {
      dragRef.value.removeEventListener("mousedown", onMousedown);
    }
  };
  const resetPosition = () => {
    transform2 = {
      offsetX: 0,
      offsetY: 0
    };
    if (targetRef.value) {
      targetRef.value.style.transform = "none";
    }
  };
  onMounted(() => {
    watchEffect(() => {
      if (draggable.value) {
        onDraggable();
      } else {
        offDraggable();
      }
    });
  });
  onBeforeUnmount(() => {
    offDraggable();
  });
  return {
    resetPosition
  };
};
const composeRefs = (...refs) => {
  return (el2) => {
    refs.forEach((ref2) => {
      if (isFunction$3(ref2)) {
        ref2(el2);
      } else {
        ref2.value = el2;
      }
    });
  };
};
const __default__$4 = /* @__PURE__ */ defineComponent({ name: "ElDialogContent" });
const _sfc_main$7 = /* @__PURE__ */ defineComponent({
  ...__default__$4,
  props: dialogContentProps,
  emits: dialogContentEmits,
  setup(__props, { expose }) {
    const props = __props;
    const { t: t2 } = useLocale();
    const { Close } = CloseComponents;
    const { dialogRef, headerRef, bodyId, ns: ns2, style } = inject(dialogInjectionKey);
    const { focusTrapRef } = inject(FOCUS_TRAP_INJECTION_KEY);
    const dialogKls = computed(() => [
      ns2.b(),
      ns2.is("fullscreen", props.fullscreen),
      ns2.is("draggable", props.draggable),
      ns2.is("align-center", props.alignCenter),
      { [ns2.m("center")]: props.center }
    ]);
    const composedDialogRef = composeRefs(focusTrapRef, dialogRef);
    const draggable = computed(() => props.draggable);
    const overflow = computed(() => props.overflow);
    const { resetPosition } = useDraggable(dialogRef, headerRef, draggable, overflow);
    expose({
      resetPosition
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref: unref(composedDialogRef),
        class: normalizeClass(unref(dialogKls)),
        style: normalizeStyle(unref(style)),
        tabindex: "-1"
      }, [
        createBaseVNode("header", {
          ref_key: "headerRef",
          ref: headerRef,
          class: normalizeClass([unref(ns2).e("header"), _ctx.headerClass, { "show-close": _ctx.showClose }])
        }, [
          renderSlot(_ctx.$slots, "header", {}, () => [
            createBaseVNode("span", {
              role: "heading",
              "aria-level": _ctx.ariaLevel,
              class: normalizeClass(unref(ns2).e("title"))
            }, toDisplayString$1(_ctx.title), 11, ["aria-level"])
          ]),
          _ctx.showClose ? (openBlock(), createElementBlock("button", {
            key: 0,
            "aria-label": unref(t2)("el.dialog.close"),
            class: normalizeClass(unref(ns2).e("headerbtn")),
            type: "button",
            onClick: ($event) => _ctx.$emit("close")
          }, [
            createVNode(unref(ElIcon), {
              class: normalizeClass(unref(ns2).e("close"))
            }, {
              default: withCtx(() => [
                (openBlock(), createBlock(resolveDynamicComponent(_ctx.closeIcon || unref(Close))))
              ]),
              _: 1
            }, 8, ["class"])
          ], 10, ["aria-label", "onClick"])) : createCommentVNode("v-if", true)
        ], 2),
        createBaseVNode("div", {
          id: unref(bodyId),
          class: normalizeClass([unref(ns2).e("body"), _ctx.bodyClass])
        }, [
          renderSlot(_ctx.$slots, "default")
        ], 10, ["id"]),
        _ctx.$slots.footer ? (openBlock(), createElementBlock("footer", {
          key: 0,
          class: normalizeClass([unref(ns2).e("footer"), _ctx.footerClass])
        }, [
          renderSlot(_ctx.$slots, "footer")
        ], 2)) : createCommentVNode("v-if", true)
      ], 6);
    };
  }
});
var ElDialogContent = /* @__PURE__ */ _export_sfc$1(_sfc_main$7, [["__file", "dialog-content.vue"]]);
const dialogProps = buildProps({
  ...dialogContentProps,
  appendToBody: Boolean,
  appendTo: {
    type: definePropType([String, Object]),
    default: "body"
  },
  beforeClose: {
    type: definePropType(Function)
  },
  destroyOnClose: Boolean,
  closeOnClickModal: {
    type: Boolean,
    default: true
  },
  closeOnPressEscape: {
    type: Boolean,
    default: true
  },
  lockScroll: {
    type: Boolean,
    default: true
  },
  modal: {
    type: Boolean,
    default: true
  },
  openDelay: {
    type: Number,
    default: 0
  },
  closeDelay: {
    type: Number,
    default: 0
  },
  top: {
    type: String
  },
  modelValue: Boolean,
  modalClass: String,
  headerClass: String,
  bodyClass: String,
  footerClass: String,
  width: {
    type: [String, Number]
  },
  zIndex: {
    type: Number
  },
  trapFocus: Boolean,
  headerAriaLevel: {
    type: String,
    default: "2"
  }
});
const dialogEmits = {
  open: () => true,
  opened: () => true,
  close: () => true,
  closed: () => true,
  [UPDATE_MODEL_EVENT]: (value) => isBoolean$2(value),
  openAutoFocus: () => true,
  closeAutoFocus: () => true
};
const useLockscreen = (trigger2, options = {}) => {
  if (!isRef(trigger2)) {
    throwError("[useLockscreen]", "You need to pass a ref param to this function");
  }
  const ns2 = options.ns || useNamespace("popup");
  const hiddenCls = computed(() => ns2.bm("parent", "hidden"));
  if (!isClient || hasClass(document.body, hiddenCls.value)) {
    return;
  }
  let scrollBarWidth2 = 0;
  let withoutHiddenClass = false;
  let bodyWidth = "0";
  const cleanup = () => {
    setTimeout(() => {
      if (typeof document === "undefined")
        return;
      if (withoutHiddenClass && document) {
        document.body.style.width = bodyWidth;
        removeClass(document.body, hiddenCls.value);
      }
    }, 200);
  };
  watch(trigger2, (val) => {
    if (!val) {
      cleanup();
      return;
    }
    withoutHiddenClass = !hasClass(document.body, hiddenCls.value);
    if (withoutHiddenClass) {
      bodyWidth = document.body.style.width;
      addClass(document.body, hiddenCls.value);
    }
    scrollBarWidth2 = getScrollBarWidth(ns2.namespace.value);
    const bodyHasOverflow = document.documentElement.clientHeight < document.body.scrollHeight;
    const bodyOverflowY = getStyle(document.body, "overflowY");
    if (scrollBarWidth2 > 0 && (bodyHasOverflow || bodyOverflowY === "scroll") && withoutHiddenClass) {
      document.body.style.width = `calc(100% - ${scrollBarWidth2}px)`;
    }
  });
  onScopeDispose(() => cleanup());
};
const useDialog = (props, targetRef) => {
  var _a2;
  const instance = getCurrentInstance();
  const emit2 = instance.emit;
  const { nextZIndex } = useZIndex();
  let lastPosition = "";
  const titleId = useId();
  const bodyId = useId();
  const visible = ref(false);
  const closed = ref(false);
  const rendered = ref(false);
  const zIndex2 = ref((_a2 = props.zIndex) != null ? _a2 : nextZIndex());
  let openTimer = void 0;
  let closeTimer = void 0;
  const namespace = useGlobalConfig("namespace", defaultNamespace);
  const style = computed(() => {
    const style2 = {};
    const varPrefix = `--${namespace.value}-dialog`;
    if (!props.fullscreen) {
      if (props.top) {
        style2[`${varPrefix}-margin-top`] = props.top;
      }
      if (props.width) {
        style2[`${varPrefix}-width`] = addUnit(props.width);
      }
    }
    return style2;
  });
  const overlayDialogStyle = computed(() => {
    if (props.alignCenter) {
      return { display: "flex" };
    }
    return {};
  });
  function afterEnter() {
    emit2("opened");
  }
  function afterLeave() {
    emit2("closed");
    emit2(UPDATE_MODEL_EVENT, false);
    if (props.destroyOnClose) {
      rendered.value = false;
    }
  }
  function beforeLeave() {
    emit2("close");
  }
  function open() {
    closeTimer == null ? void 0 : closeTimer();
    openTimer == null ? void 0 : openTimer();
    if (props.openDelay && props.openDelay > 0) {
      ({ stop: openTimer } = useTimeoutFn(() => doOpen(), props.openDelay));
    } else {
      doOpen();
    }
  }
  function close() {
    openTimer == null ? void 0 : openTimer();
    closeTimer == null ? void 0 : closeTimer();
    if (props.closeDelay && props.closeDelay > 0) {
      ({ stop: closeTimer } = useTimeoutFn(() => doClose(), props.closeDelay));
    } else {
      doClose();
    }
  }
  function handleClose() {
    function hide(shouldCancel) {
      if (shouldCancel)
        return;
      closed.value = true;
      visible.value = false;
    }
    if (props.beforeClose) {
      props.beforeClose(hide);
    } else {
      close();
    }
  }
  function onModalClick() {
    if (props.closeOnClickModal) {
      handleClose();
    }
  }
  function doOpen() {
    if (!isClient)
      return;
    visible.value = true;
  }
  function doClose() {
    visible.value = false;
  }
  function onOpenAutoFocus() {
    emit2("openAutoFocus");
  }
  function onCloseAutoFocus() {
    emit2("closeAutoFocus");
  }
  function onFocusoutPrevented(event) {
    var _a22;
    if (((_a22 = event.detail) == null ? void 0 : _a22.focusReason) === "pointer") {
      event.preventDefault();
    }
  }
  if (props.lockScroll) {
    useLockscreen(visible);
  }
  function onCloseRequested() {
    if (props.closeOnPressEscape) {
      handleClose();
    }
  }
  watch(() => props.modelValue, (val) => {
    if (val) {
      closed.value = false;
      open();
      rendered.value = true;
      zIndex2.value = isUndefined$2(props.zIndex) ? nextZIndex() : zIndex2.value++;
      nextTick(() => {
        emit2("open");
        if (targetRef.value) {
          targetRef.value.parentElement.scrollTop = 0;
          targetRef.value.parentElement.scrollLeft = 0;
          targetRef.value.scrollTop = 0;
        }
      });
    } else {
      if (visible.value) {
        close();
      }
    }
  });
  watch(() => props.fullscreen, (val) => {
    if (!targetRef.value)
      return;
    if (val) {
      lastPosition = targetRef.value.style.transform;
      targetRef.value.style.transform = "";
    } else {
      targetRef.value.style.transform = lastPosition;
    }
  });
  onMounted(() => {
    if (props.modelValue) {
      visible.value = true;
      rendered.value = true;
      open();
    }
  });
  return {
    afterEnter,
    afterLeave,
    beforeLeave,
    handleClose,
    onModalClick,
    close,
    doClose,
    onOpenAutoFocus,
    onCloseAutoFocus,
    onCloseRequested,
    onFocusoutPrevented,
    titleId,
    bodyId,
    closed,
    style,
    overlayDialogStyle,
    rendered,
    visible,
    zIndex: zIndex2
  };
};
const __default__$3 = /* @__PURE__ */ defineComponent({
  name: "ElDialog",
  inheritAttrs: false
});
const _sfc_main$6 = /* @__PURE__ */ defineComponent({
  ...__default__$3,
  props: dialogProps,
  emits: dialogEmits,
  setup(__props, { expose }) {
    const props = __props;
    const slots = useSlots();
    useDeprecated({
      scope: "el-dialog",
      from: "the title slot",
      replacement: "the header slot",
      version: "3.0.0",
      ref: "https://element-plus.org/en-US/component/dialog.html#slots"
    }, computed(() => !!slots.title));
    const ns2 = useNamespace("dialog");
    const dialogRef = ref();
    const headerRef = ref();
    const dialogContentRef = ref();
    const {
      visible,
      titleId,
      bodyId,
      style,
      overlayDialogStyle,
      rendered,
      zIndex: zIndex2,
      afterEnter,
      afterLeave,
      beforeLeave,
      handleClose,
      onModalClick,
      onOpenAutoFocus,
      onCloseAutoFocus,
      onCloseRequested,
      onFocusoutPrevented
    } = useDialog(props, dialogRef);
    provide(dialogInjectionKey, {
      dialogRef,
      headerRef,
      bodyId,
      ns: ns2,
      rendered,
      style
    });
    const overlayEvent = useSameTarget(onModalClick);
    const draggable = computed(() => props.draggable && !props.fullscreen);
    const resetPosition = () => {
      var _a2;
      (_a2 = dialogContentRef.value) == null ? void 0 : _a2.resetPosition();
    };
    expose({
      visible,
      dialogContentRef,
      resetPosition
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(ElTeleport), {
        to: _ctx.appendTo,
        disabled: _ctx.appendTo !== "body" ? false : !_ctx.appendToBody
      }, {
        default: withCtx(() => [
          createVNode(Transition, {
            name: "dialog-fade",
            onAfterEnter: unref(afterEnter),
            onAfterLeave: unref(afterLeave),
            onBeforeLeave: unref(beforeLeave),
            persisted: ""
          }, {
            default: withCtx(() => [
              withDirectives(createVNode(unref(ElOverlay), {
                "custom-mask-event": "",
                mask: _ctx.modal,
                "overlay-class": _ctx.modalClass,
                "z-index": unref(zIndex2)
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", {
                    role: "dialog",
                    "aria-modal": "true",
                    "aria-label": _ctx.title || void 0,
                    "aria-labelledby": !_ctx.title ? unref(titleId) : void 0,
                    "aria-describedby": unref(bodyId),
                    class: normalizeClass(`${unref(ns2).namespace.value}-overlay-dialog`),
                    style: normalizeStyle(unref(overlayDialogStyle)),
                    onClick: unref(overlayEvent).onClick,
                    onMousedown: unref(overlayEvent).onMousedown,
                    onMouseup: unref(overlayEvent).onMouseup
                  }, [
                    createVNode(unref(ElFocusTrap), {
                      loop: "",
                      trapped: unref(visible),
                      "focus-start-el": "container",
                      onFocusAfterTrapped: unref(onOpenAutoFocus),
                      onFocusAfterReleased: unref(onCloseAutoFocus),
                      onFocusoutPrevented: unref(onFocusoutPrevented),
                      onReleaseRequested: unref(onCloseRequested)
                    }, {
                      default: withCtx(() => [
                        unref(rendered) ? (openBlock(), createBlock(ElDialogContent, mergeProps({
                          key: 0,
                          ref_key: "dialogContentRef",
                          ref: dialogContentRef
                        }, _ctx.$attrs, {
                          center: _ctx.center,
                          "align-center": _ctx.alignCenter,
                          "close-icon": _ctx.closeIcon,
                          draggable: unref(draggable),
                          overflow: _ctx.overflow,
                          fullscreen: _ctx.fullscreen,
                          "header-class": _ctx.headerClass,
                          "body-class": _ctx.bodyClass,
                          "footer-class": _ctx.footerClass,
                          "show-close": _ctx.showClose,
                          title: _ctx.title,
                          "aria-level": _ctx.headerAriaLevel,
                          onClose: unref(handleClose)
                        }), createSlots({
                          header: withCtx(() => [
                            !_ctx.$slots.title ? renderSlot(_ctx.$slots, "header", {
                              key: 0,
                              close: unref(handleClose),
                              titleId: unref(titleId),
                              titleClass: unref(ns2).e("title")
                            }) : renderSlot(_ctx.$slots, "title", { key: 1 })
                          ]),
                          default: withCtx(() => [
                            renderSlot(_ctx.$slots, "default")
                          ]),
                          _: 2
                        }, [
                          _ctx.$slots.footer ? {
                            name: "footer",
                            fn: withCtx(() => [
                              renderSlot(_ctx.$slots, "footer")
                            ])
                          } : void 0
                        ]), 1040, ["center", "align-center", "close-icon", "draggable", "overflow", "fullscreen", "header-class", "body-class", "footer-class", "show-close", "title", "aria-level", "onClose"])) : createCommentVNode("v-if", true)
                      ]),
                      _: 3
                    }, 8, ["trapped", "onFocusAfterTrapped", "onFocusAfterReleased", "onFocusoutPrevented", "onReleaseRequested"])
                  ], 46, ["aria-label", "aria-labelledby", "aria-describedby", "onClick", "onMousedown", "onMouseup"])
                ]),
                _: 3
              }, 8, ["mask", "overlay-class", "z-index"]), [
                [vShow, unref(visible)]
              ])
            ]),
            _: 3
          }, 8, ["onAfterEnter", "onAfterLeave", "onBeforeLeave"])
        ]),
        _: 3
      }, 8, ["to", "disabled"]);
    };
  }
});
var Dialog = /* @__PURE__ */ _export_sfc$1(_sfc_main$6, [["__file", "dialog.vue"]]);
const ElDialog = withInstall(Dialog);
const formMetaProps = buildProps({
  size: {
    type: String,
    values: componentSizes
  },
  disabled: Boolean
});
const formProps = buildProps({
  ...formMetaProps,
  model: Object,
  rules: {
    type: definePropType(Object)
  },
  labelPosition: {
    type: String,
    values: ["left", "right", "top"],
    default: "right"
  },
  requireAsteriskPosition: {
    type: String,
    values: ["left", "right"],
    default: "left"
  },
  labelWidth: {
    type: [String, Number],
    default: ""
  },
  labelSuffix: {
    type: String,
    default: ""
  },
  inline: Boolean,
  inlineMessage: Boolean,
  statusIcon: Boolean,
  showMessage: {
    type: Boolean,
    default: true
  },
  validateOnRuleChange: {
    type: Boolean,
    default: true
  },
  hideRequiredAsterisk: Boolean,
  scrollToError: Boolean,
  scrollIntoViewOptions: {
    type: [Object, Boolean]
  }
});
const formEmits = {
  validate: (prop, isValid, message2) => (isArray$4(prop) || isString$3(prop)) && isBoolean$2(isValid) && isString$3(message2)
};
function useFormLabelWidth() {
  const potentialLabelWidthArr = ref([]);
  const autoLabelWidth = computed(() => {
    if (!potentialLabelWidthArr.value.length)
      return "0";
    const max = Math.max(...potentialLabelWidthArr.value);
    return max ? `${max}px` : "";
  });
  function getLabelWidthIndex(width) {
    const index = potentialLabelWidthArr.value.indexOf(width);
    if (index === -1 && autoLabelWidth.value === "0")
      ;
    return index;
  }
  function registerLabelWidth(val, oldVal) {
    if (val && oldVal) {
      const index = getLabelWidthIndex(oldVal);
      potentialLabelWidthArr.value.splice(index, 1, val);
    } else if (val) {
      potentialLabelWidthArr.value.push(val);
    }
  }
  function deregisterLabelWidth(val) {
    const index = getLabelWidthIndex(val);
    if (index > -1) {
      potentialLabelWidthArr.value.splice(index, 1);
    }
  }
  return {
    autoLabelWidth,
    registerLabelWidth,
    deregisterLabelWidth
  };
}
const filterFields = (fields, props) => {
  const normalized = castArray(props);
  return normalized.length > 0 ? fields.filter((field) => field.prop && normalized.includes(field.prop)) : fields;
};
const COMPONENT_NAME$1 = "ElForm";
const __default__$2 = /* @__PURE__ */ defineComponent({
  name: COMPONENT_NAME$1
});
const _sfc_main$5 = /* @__PURE__ */ defineComponent({
  ...__default__$2,
  props: formProps,
  emits: formEmits,
  setup(__props, { expose, emit: emit2 }) {
    const props = __props;
    const fields = [];
    const formSize = useFormSize();
    const ns2 = useNamespace("form");
    const formClasses = computed(() => {
      const { labelPosition, inline } = props;
      return [
        ns2.b(),
        ns2.m(formSize.value || "default"),
        {
          [ns2.m(`label-${labelPosition}`)]: labelPosition,
          [ns2.m("inline")]: inline
        }
      ];
    });
    const getField = (prop) => {
      return fields.find((field) => field.prop === prop);
    };
    const addField = (field) => {
      fields.push(field);
    };
    const removeField = (field) => {
      if (field.prop) {
        fields.splice(fields.indexOf(field), 1);
      }
    };
    const resetFields = (properties = []) => {
      if (!props.model) {
        return;
      }
      filterFields(fields, properties).forEach((field) => field.resetField());
    };
    const clearValidate = (props2 = []) => {
      filterFields(fields, props2).forEach((field) => field.clearValidate());
    };
    const isValidatable = computed(() => {
      const hasModel = !!props.model;
      return hasModel;
    });
    const obtainValidateFields = (props2) => {
      if (fields.length === 0)
        return [];
      const filteredFields = filterFields(fields, props2);
      if (!filteredFields.length) {
        return [];
      }
      return filteredFields;
    };
    const validate = async (callback) => validateField(void 0, callback);
    const doValidateField = async (props2 = []) => {
      if (!isValidatable.value)
        return false;
      const fields2 = obtainValidateFields(props2);
      if (fields2.length === 0)
        return true;
      let validationErrors = {};
      for (const field of fields2) {
        try {
          await field.validate("");
          if (field.validateState === "error")
            field.resetField();
        } catch (fields3) {
          validationErrors = {
            ...validationErrors,
            ...fields3
          };
        }
      }
      if (Object.keys(validationErrors).length === 0)
        return true;
      return Promise.reject(validationErrors);
    };
    const validateField = async (modelProps = [], callback) => {
      const shouldThrow = !isFunction$3(callback);
      try {
        const result = await doValidateField(modelProps);
        if (result === true) {
          await (callback == null ? void 0 : callback(result));
        }
        return result;
      } catch (e2) {
        if (e2 instanceof Error)
          throw e2;
        const invalidFields = e2;
        if (props.scrollToError) {
          scrollToField(Object.keys(invalidFields)[0]);
        }
        await (callback == null ? void 0 : callback(false, invalidFields));
        return shouldThrow && Promise.reject(invalidFields);
      }
    };
    const scrollToField = (prop) => {
      var _a2;
      const field = filterFields(fields, prop)[0];
      if (field) {
        (_a2 = field.$el) == null ? void 0 : _a2.scrollIntoView(props.scrollIntoViewOptions);
      }
    };
    watch(() => props.rules, () => {
      if (props.validateOnRuleChange) {
        validate().catch((err) => debugWarn());
      }
    }, { deep: true, flush: "post" });
    provide(formContextKey, reactive({
      ...toRefs(props),
      emit: emit2,
      resetFields,
      clearValidate,
      validateField,
      getField,
      addField,
      removeField,
      ...useFormLabelWidth()
    }));
    expose({
      validate,
      validateField,
      resetFields,
      clearValidate,
      scrollToField,
      fields
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("form", {
        class: normalizeClass(unref(formClasses))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
var Form = /* @__PURE__ */ _export_sfc$1(_sfc_main$5, [["__file", "form.vue"]]);
var define_process_env_default = {};
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o2) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o22) {
    return o22.__proto__ || Object.getPrototypeOf(o22);
  };
  return _getPrototypeOf(o2);
}
function _setPrototypeOf(o2, p2) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o22, p22) {
    o22.__proto__ = p22;
    return o22;
  };
  return _setPrototypeOf(o2, p2);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct2(Parent2, args2, Class2) {
      var a2 = [null];
      a2.push.apply(a2, args2);
      var Constructor = Function.bind.apply(Parent2, a2);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeFunction(fn2) {
  return Function.toString.call(fn2).indexOf("[native code]") !== -1;
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}
var formatRegExp = /%[sdj%]/g;
var warning = function warning2() {
};
if (typeof process !== "undefined" && define_process_env_default && false) {
  warning = function warning3(type4, errors) {
    if (typeof console !== "undefined" && console.warn && typeof ASYNC_VALIDATOR_NO_WARNING === "undefined") {
      if (errors.every(function(e2) {
        return typeof e2 === "string";
      })) {
        console.warn(type4, errors);
      }
    }
  };
}
function convertFieldsError(errors) {
  if (!errors || !errors.length)
    return null;
  var fields = {};
  errors.forEach(function(error) {
    var field = error.field;
    fields[field] = fields[field] || [];
    fields[field].push(error);
  });
  return fields;
}
function format$1(template) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  var i2 = 0;
  var len = args.length;
  if (typeof template === "function") {
    return template.apply(null, args);
  }
  if (typeof template === "string") {
    var str = template.replace(formatRegExp, function(x) {
      if (x === "%%") {
        return "%";
      }
      if (i2 >= len) {
        return x;
      }
      switch (x) {
        case "%s":
          return String(args[i2++]);
        case "%d":
          return Number(args[i2++]);
        case "%j":
          try {
            return JSON.stringify(args[i2++]);
          } catch (_) {
            return "[Circular]";
          }
          break;
        default:
          return x;
      }
    });
    return str;
  }
  return template;
}
function isNativeStringType(type4) {
  return type4 === "string" || type4 === "url" || type4 === "hex" || type4 === "email" || type4 === "date" || type4 === "pattern";
}
function isEmptyValue(value, type4) {
  if (value === void 0 || value === null) {
    return true;
  }
  if (type4 === "array" && Array.isArray(value) && !value.length) {
    return true;
  }
  if (isNativeStringType(type4) && typeof value === "string" && !value) {
    return true;
  }
  return false;
}
function asyncParallelArray(arr, func, callback) {
  var results = [];
  var total = 0;
  var arrLength = arr.length;
  function count(errors) {
    results.push.apply(results, errors || []);
    total++;
    if (total === arrLength) {
      callback(results);
    }
  }
  arr.forEach(function(a2) {
    func(a2, count);
  });
}
function asyncSerialArray(arr, func, callback) {
  var index = 0;
  var arrLength = arr.length;
  function next(errors) {
    if (errors && errors.length) {
      callback(errors);
      return;
    }
    var original = index;
    index = index + 1;
    if (original < arrLength) {
      func(arr[original], next);
    } else {
      callback([]);
    }
  }
  next([]);
}
function flattenObjArr(objArr) {
  var ret = [];
  Object.keys(objArr).forEach(function(k) {
    ret.push.apply(ret, objArr[k] || []);
  });
  return ret;
}
var AsyncValidationError = /* @__PURE__ */ function(_Error) {
  _inheritsLoose(AsyncValidationError2, _Error);
  function AsyncValidationError2(errors, fields) {
    var _this;
    _this = _Error.call(this, "Async Validation Error") || this;
    _this.errors = errors;
    _this.fields = fields;
    return _this;
  }
  return AsyncValidationError2;
}(/* @__PURE__ */ _wrapNativeSuper(Error));
function asyncMap(objArr, option, func, callback, source) {
  if (option.first) {
    var _pending = new Promise(function(resolve2, reject) {
      var next = function next2(errors) {
        callback(errors);
        return errors.length ? reject(new AsyncValidationError(errors, convertFieldsError(errors))) : resolve2(source);
      };
      var flattenArr = flattenObjArr(objArr);
      asyncSerialArray(flattenArr, func, next);
    });
    _pending["catch"](function(e2) {
      return e2;
    });
    return _pending;
  }
  var firstFields = option.firstFields === true ? Object.keys(objArr) : option.firstFields || [];
  var objArrKeys = Object.keys(objArr);
  var objArrLength = objArrKeys.length;
  var total = 0;
  var results = [];
  var pending = new Promise(function(resolve2, reject) {
    var next = function next2(errors) {
      results.push.apply(results, errors);
      total++;
      if (total === objArrLength) {
        callback(results);
        return results.length ? reject(new AsyncValidationError(results, convertFieldsError(results))) : resolve2(source);
      }
    };
    if (!objArrKeys.length) {
      callback(results);
      resolve2(source);
    }
    objArrKeys.forEach(function(key) {
      var arr = objArr[key];
      if (firstFields.indexOf(key) !== -1) {
        asyncSerialArray(arr, func, next);
      } else {
        asyncParallelArray(arr, func, next);
      }
    });
  });
  pending["catch"](function(e2) {
    return e2;
  });
  return pending;
}
function isErrorObj(obj) {
  return !!(obj && obj.message !== void 0);
}
function getValue(value, path) {
  var v2 = value;
  for (var i2 = 0; i2 < path.length; i2++) {
    if (v2 == void 0) {
      return v2;
    }
    v2 = v2[path[i2]];
  }
  return v2;
}
function complementError(rule, source) {
  return function(oe) {
    var fieldValue;
    if (rule.fullFields) {
      fieldValue = getValue(source, rule.fullFields);
    } else {
      fieldValue = source[oe.field || rule.fullField];
    }
    if (isErrorObj(oe)) {
      oe.field = oe.field || rule.fullField;
      oe.fieldValue = fieldValue;
      return oe;
    }
    return {
      message: typeof oe === "function" ? oe() : oe,
      fieldValue,
      field: oe.field || rule.fullField
    };
  };
}
function deepMerge(target, source) {
  if (source) {
    for (var s2 in source) {
      if (source.hasOwnProperty(s2)) {
        var value = source[s2];
        if (typeof value === "object" && typeof target[s2] === "object") {
          target[s2] = _extends({}, target[s2], value);
        } else {
          target[s2] = value;
        }
      }
    }
  }
  return target;
}
var required$1 = function required(rule, value, source, errors, options, type4) {
  if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value, type4 || rule.type))) {
    errors.push(format$1(options.messages.required, rule.fullField));
  }
};
var whitespace = function whitespace2(rule, value, source, errors, options) {
  if (/^\s+$/.test(value) || value === "") {
    errors.push(format$1(options.messages.whitespace, rule.fullField));
  }
};
var urlReg;
var getUrlRegex = function() {
  if (urlReg) {
    return urlReg;
  }
  var word = "[a-fA-F\\d:]";
  var b = function b2(options) {
    return options && options.includeBoundaries ? "(?:(?<=\\s|^)(?=" + word + ")|(?<=" + word + ")(?=\\s|$))" : "";
  };
  var v4 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
  var v6seg = "[a-fA-F\\d]{1,4}";
  var v6 = ("\n(?:\n(?:" + v6seg + ":){7}(?:" + v6seg + "|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:" + v6seg + ":){6}(?:" + v4 + "|:" + v6seg + "|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:" + v6seg + ":){5}(?::" + v4 + "|(?::" + v6seg + "){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:" + v6seg + ":){4}(?:(?::" + v6seg + "){0,1}:" + v4 + "|(?::" + v6seg + "){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:" + v6seg + ":){3}(?:(?::" + v6seg + "){0,2}:" + v4 + "|(?::" + v6seg + "){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:" + v6seg + ":){2}(?:(?::" + v6seg + "){0,3}:" + v4 + "|(?::" + v6seg + "){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:" + v6seg + ":){1}(?:(?::" + v6seg + "){0,4}:" + v4 + "|(?::" + v6seg + "){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::" + v6seg + "){0,5}:" + v4 + "|(?::" + v6seg + "){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n").replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
  var v46Exact = new RegExp("(?:^" + v4 + "$)|(?:^" + v6 + "$)");
  var v4exact = new RegExp("^" + v4 + "$");
  var v6exact = new RegExp("^" + v6 + "$");
  var ip2 = function ip22(options) {
    return options && options.exact ? v46Exact : new RegExp("(?:" + b(options) + v4 + b(options) + ")|(?:" + b(options) + v6 + b(options) + ")", "g");
  };
  ip2.v4 = function(options) {
    return options && options.exact ? v4exact : new RegExp("" + b(options) + v4 + b(options), "g");
  };
  ip2.v6 = function(options) {
    return options && options.exact ? v6exact : new RegExp("" + b(options) + v6 + b(options), "g");
  };
  var protocol = "(?:(?:[a-z]+:)?//)";
  var auth = "(?:\\S+(?::\\S*)?@)?";
  var ipv4 = ip2.v4().source;
  var ipv6 = ip2.v6().source;
  var host = "(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)";
  var domain = "(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*";
  var tld = "(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))";
  var port = "(?::\\d{2,5})?";
  var path = '(?:[/?#][^\\s"]*)?';
  var regex = "(?:" + protocol + "|www\\.)" + auth + "(?:localhost|" + ipv4 + "|" + ipv6 + "|" + host + domain + tld + ")" + port + path;
  urlReg = new RegExp("(?:^" + regex + "$)", "i");
  return urlReg;
};
var pattern$2 = {
  // http://emailregex.com/
  email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,
  // url: new RegExp(
  //   '^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$',
  //   'i',
  // ),
  hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
};
var types = {
  integer: function integer(value) {
    return types.number(value) && parseInt(value, 10) === value;
  },
  "float": function float(value) {
    return types.number(value) && !types.integer(value);
  },
  array: function array(value) {
    return Array.isArray(value);
  },
  regexp: function regexp(value) {
    if (value instanceof RegExp) {
      return true;
    }
    try {
      return !!new RegExp(value);
    } catch (e2) {
      return false;
    }
  },
  date: function date(value) {
    return typeof value.getTime === "function" && typeof value.getMonth === "function" && typeof value.getYear === "function" && !isNaN(value.getTime());
  },
  number: function number(value) {
    if (isNaN(value)) {
      return false;
    }
    return typeof value === "number";
  },
  object: function object(value) {
    return typeof value === "object" && !types.array(value);
  },
  method: function method(value) {
    return typeof value === "function";
  },
  email: function email(value) {
    return typeof value === "string" && value.length <= 320 && !!value.match(pattern$2.email);
  },
  url: function url(value) {
    return typeof value === "string" && value.length <= 2048 && !!value.match(getUrlRegex());
  },
  hex: function hex(value) {
    return typeof value === "string" && !!value.match(pattern$2.hex);
  }
};
var type$1 = function type(rule, value, source, errors, options) {
  if (rule.required && value === void 0) {
    required$1(rule, value, source, errors, options);
    return;
  }
  var custom = ["integer", "float", "array", "regexp", "object", "method", "email", "number", "date", "url", "hex"];
  var ruleType = rule.type;
  if (custom.indexOf(ruleType) > -1) {
    if (!types[ruleType](value)) {
      errors.push(format$1(options.messages.types[ruleType], rule.fullField, rule.type));
    }
  } else if (ruleType && typeof value !== rule.type) {
    errors.push(format$1(options.messages.types[ruleType], rule.fullField, rule.type));
  }
};
var range = function range2(rule, value, source, errors, options) {
  var len = typeof rule.len === "number";
  var min = typeof rule.min === "number";
  var max = typeof rule.max === "number";
  var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
  var val = value;
  var key = null;
  var num = typeof value === "number";
  var str = typeof value === "string";
  var arr = Array.isArray(value);
  if (num) {
    key = "number";
  } else if (str) {
    key = "string";
  } else if (arr) {
    key = "array";
  }
  if (!key) {
    return false;
  }
  if (arr) {
    val = value.length;
  }
  if (str) {
    val = value.replace(spRegexp, "_").length;
  }
  if (len) {
    if (val !== rule.len) {
      errors.push(format$1(options.messages[key].len, rule.fullField, rule.len));
    }
  } else if (min && !max && val < rule.min) {
    errors.push(format$1(options.messages[key].min, rule.fullField, rule.min));
  } else if (max && !min && val > rule.max) {
    errors.push(format$1(options.messages[key].max, rule.fullField, rule.max));
  } else if (min && max && (val < rule.min || val > rule.max)) {
    errors.push(format$1(options.messages[key].range, rule.fullField, rule.min, rule.max));
  }
};
var ENUM$1 = "enum";
var enumerable$1 = function enumerable(rule, value, source, errors, options) {
  rule[ENUM$1] = Array.isArray(rule[ENUM$1]) ? rule[ENUM$1] : [];
  if (rule[ENUM$1].indexOf(value) === -1) {
    errors.push(format$1(options.messages[ENUM$1], rule.fullField, rule[ENUM$1].join(", ")));
  }
};
var pattern$1 = function pattern(rule, value, source, errors, options) {
  if (rule.pattern) {
    if (rule.pattern instanceof RegExp) {
      rule.pattern.lastIndex = 0;
      if (!rule.pattern.test(value)) {
        errors.push(format$1(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
      }
    } else if (typeof rule.pattern === "string") {
      var _pattern = new RegExp(rule.pattern);
      if (!_pattern.test(value)) {
        errors.push(format$1(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
      }
    }
  }
};
var rules = {
  required: required$1,
  whitespace,
  type: type$1,
  range,
  "enum": enumerable$1,
  pattern: pattern$1
};
var string = function string2(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value, "string") && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options, "string");
    if (!isEmptyValue(value, "string")) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
      rules.pattern(rule, value, source, errors, options);
      if (rule.whitespace === true) {
        rules.whitespace(rule, value, source, errors, options);
      }
    }
  }
  callback(errors);
};
var method2 = function method3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var number2 = function number3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (value === "") {
      value = void 0;
    }
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var _boolean = function _boolean2(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var regexp2 = function regexp3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (!isEmptyValue(value)) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var integer2 = function integer3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var floatFn = function floatFn2(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var array2 = function array3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if ((value === void 0 || value === null) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options, "array");
    if (value !== void 0 && value !== null) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var object2 = function object3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var ENUM = "enum";
var enumerable2 = function enumerable3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules[ENUM](rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var pattern2 = function pattern3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value, "string") && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (!isEmptyValue(value, "string")) {
      rules.pattern(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var date2 = function date3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value, "date") && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (!isEmptyValue(value, "date")) {
      var dateObject;
      if (value instanceof Date) {
        dateObject = value;
      } else {
        dateObject = new Date(value);
      }
      rules.type(rule, dateObject, source, errors, options);
      if (dateObject) {
        rules.range(rule, dateObject.getTime(), source, errors, options);
      }
    }
  }
  callback(errors);
};
var required2 = function required3(rule, value, callback, source, options) {
  var errors = [];
  var type4 = Array.isArray(value) ? "array" : typeof value;
  rules.required(rule, value, source, errors, options, type4);
  callback(errors);
};
var type2 = function type3(rule, value, callback, source, options) {
  var ruleType = rule.type;
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value, ruleType) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options, ruleType);
    if (!isEmptyValue(value, ruleType)) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var any = function any2(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
  }
  callback(errors);
};
var validators$2 = {
  string,
  method: method2,
  number: number2,
  "boolean": _boolean,
  regexp: regexp2,
  integer: integer2,
  "float": floatFn,
  array: array2,
  object: object2,
  "enum": enumerable2,
  pattern: pattern2,
  date: date2,
  url: type2,
  hex: type2,
  email: type2,
  required: required2,
  any
};
function newMessages() {
  return {
    "default": "Validation error on field %s",
    required: "%s is required",
    "enum": "%s must be one of %s",
    whitespace: "%s cannot be empty",
    date: {
      format: "%s date %s is invalid for format %s",
      parse: "%s date could not be parsed, %s is invalid ",
      invalid: "%s date %s is invalid"
    },
    types: {
      string: "%s is not a %s",
      method: "%s is not a %s (function)",
      array: "%s is not an %s",
      object: "%s is not an %s",
      number: "%s is not a %s",
      date: "%s is not a %s",
      "boolean": "%s is not a %s",
      integer: "%s is not an %s",
      "float": "%s is not a %s",
      regexp: "%s is not a valid %s",
      email: "%s is not a valid %s",
      url: "%s is not a valid %s",
      hex: "%s is not a valid %s"
    },
    string: {
      len: "%s must be exactly %s characters",
      min: "%s must be at least %s characters",
      max: "%s cannot be longer than %s characters",
      range: "%s must be between %s and %s characters"
    },
    number: {
      len: "%s must equal %s",
      min: "%s cannot be less than %s",
      max: "%s cannot be greater than %s",
      range: "%s must be between %s and %s"
    },
    array: {
      len: "%s must be exactly %s in length",
      min: "%s cannot be less than %s in length",
      max: "%s cannot be greater than %s in length",
      range: "%s must be between %s and %s in length"
    },
    pattern: {
      mismatch: "%s value %s does not match pattern %s"
    },
    clone: function clone2() {
      var cloned = JSON.parse(JSON.stringify(this));
      cloned.clone = this.clone;
      return cloned;
    }
  };
}
var messages$1 = newMessages();
var Schema = /* @__PURE__ */ function() {
  function Schema2(descriptor) {
    this.rules = null;
    this._messages = messages$1;
    this.define(descriptor);
  }
  var _proto = Schema2.prototype;
  _proto.define = function define(rules2) {
    var _this = this;
    if (!rules2) {
      throw new Error("Cannot configure a schema with no rules");
    }
    if (typeof rules2 !== "object" || Array.isArray(rules2)) {
      throw new Error("Rules must be an object");
    }
    this.rules = {};
    Object.keys(rules2).forEach(function(name) {
      var item = rules2[name];
      _this.rules[name] = Array.isArray(item) ? item : [item];
    });
  };
  _proto.messages = function messages2(_messages) {
    if (_messages) {
      this._messages = deepMerge(newMessages(), _messages);
    }
    return this._messages;
  };
  _proto.validate = function validate(source_, o2, oc2) {
    var _this2 = this;
    if (o2 === void 0) {
      o2 = {};
    }
    if (oc2 === void 0) {
      oc2 = function oc22() {
      };
    }
    var source = source_;
    var options = o2;
    var callback = oc2;
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    if (!this.rules || Object.keys(this.rules).length === 0) {
      if (callback) {
        callback(null, source);
      }
      return Promise.resolve(source);
    }
    function complete(results) {
      var errors = [];
      var fields = {};
      function add(e2) {
        if (Array.isArray(e2)) {
          var _errors;
          errors = (_errors = errors).concat.apply(_errors, e2);
        } else {
          errors.push(e2);
        }
      }
      for (var i2 = 0; i2 < results.length; i2++) {
        add(results[i2]);
      }
      if (!errors.length) {
        callback(null, source);
      } else {
        fields = convertFieldsError(errors);
        callback(errors, fields);
      }
    }
    if (options.messages) {
      var messages$1$1 = this.messages();
      if (messages$1$1 === messages$1) {
        messages$1$1 = newMessages();
      }
      deepMerge(messages$1$1, options.messages);
      options.messages = messages$1$1;
    } else {
      options.messages = this.messages();
    }
    var series = {};
    var keys2 = options.keys || Object.keys(this.rules);
    keys2.forEach(function(z) {
      var arr = _this2.rules[z];
      var value = source[z];
      arr.forEach(function(r2) {
        var rule = r2;
        if (typeof rule.transform === "function") {
          if (source === source_) {
            source = _extends({}, source);
          }
          value = source[z] = rule.transform(value);
        }
        if (typeof rule === "function") {
          rule = {
            validator: rule
          };
        } else {
          rule = _extends({}, rule);
        }
        rule.validator = _this2.getValidationMethod(rule);
        if (!rule.validator) {
          return;
        }
        rule.field = z;
        rule.fullField = rule.fullField || z;
        rule.type = _this2.getType(rule);
        series[z] = series[z] || [];
        series[z].push({
          rule,
          value,
          source,
          field: z
        });
      });
    });
    var errorFields = {};
    return asyncMap(series, options, function(data, doIt) {
      var rule = data.rule;
      var deep = (rule.type === "object" || rule.type === "array") && (typeof rule.fields === "object" || typeof rule.defaultField === "object");
      deep = deep && (rule.required || !rule.required && data.value);
      rule.field = data.field;
      function addFullField(key, schema) {
        return _extends({}, schema, {
          fullField: rule.fullField + "." + key,
          fullFields: rule.fullFields ? [].concat(rule.fullFields, [key]) : [key]
        });
      }
      function cb2(e2) {
        if (e2 === void 0) {
          e2 = [];
        }
        var errorList = Array.isArray(e2) ? e2 : [e2];
        if (!options.suppressWarning && errorList.length) {
          Schema2.warning("async-validator:", errorList);
        }
        if (errorList.length && rule.message !== void 0) {
          errorList = [].concat(rule.message);
        }
        var filledErrors = errorList.map(complementError(rule, source));
        if (options.first && filledErrors.length) {
          errorFields[rule.field] = 1;
          return doIt(filledErrors);
        }
        if (!deep) {
          doIt(filledErrors);
        } else {
          if (rule.required && !data.value) {
            if (rule.message !== void 0) {
              filledErrors = [].concat(rule.message).map(complementError(rule, source));
            } else if (options.error) {
              filledErrors = [options.error(rule, format$1(options.messages.required, rule.field))];
            }
            return doIt(filledErrors);
          }
          var fieldsSchema = {};
          if (rule.defaultField) {
            Object.keys(data.value).map(function(key) {
              fieldsSchema[key] = rule.defaultField;
            });
          }
          fieldsSchema = _extends({}, fieldsSchema, data.rule.fields);
          var paredFieldsSchema = {};
          Object.keys(fieldsSchema).forEach(function(field) {
            var fieldSchema = fieldsSchema[field];
            var fieldSchemaList = Array.isArray(fieldSchema) ? fieldSchema : [fieldSchema];
            paredFieldsSchema[field] = fieldSchemaList.map(addFullField.bind(null, field));
          });
          var schema = new Schema2(paredFieldsSchema);
          schema.messages(options.messages);
          if (data.rule.options) {
            data.rule.options.messages = options.messages;
            data.rule.options.error = options.error;
          }
          schema.validate(data.value, data.rule.options || options, function(errs) {
            var finalErrors = [];
            if (filledErrors && filledErrors.length) {
              finalErrors.push.apply(finalErrors, filledErrors);
            }
            if (errs && errs.length) {
              finalErrors.push.apply(finalErrors, errs);
            }
            doIt(finalErrors.length ? finalErrors : null);
          });
        }
      }
      var res;
      if (rule.asyncValidator) {
        res = rule.asyncValidator(rule, data.value, cb2, data.source, options);
      } else if (rule.validator) {
        try {
          res = rule.validator(rule, data.value, cb2, data.source, options);
        } catch (error) {
          console.error == null ? void 0 : console.error(error);
          if (!options.suppressValidatorError) {
            setTimeout(function() {
              throw error;
            }, 0);
          }
          cb2(error.message);
        }
        if (res === true) {
          cb2();
        } else if (res === false) {
          cb2(typeof rule.message === "function" ? rule.message(rule.fullField || rule.field) : rule.message || (rule.fullField || rule.field) + " fails");
        } else if (res instanceof Array) {
          cb2(res);
        } else if (res instanceof Error) {
          cb2(res.message);
        }
      }
      if (res && res.then) {
        res.then(function() {
          return cb2();
        }, function(e2) {
          return cb2(e2);
        });
      }
    }, function(results) {
      complete(results);
    }, source);
  };
  _proto.getType = function getType(rule) {
    if (rule.type === void 0 && rule.pattern instanceof RegExp) {
      rule.type = "pattern";
    }
    if (typeof rule.validator !== "function" && rule.type && !validators$2.hasOwnProperty(rule.type)) {
      throw new Error(format$1("Unknown rule type %s", rule.type));
    }
    return rule.type || "string";
  };
  _proto.getValidationMethod = function getValidationMethod(rule) {
    if (typeof rule.validator === "function") {
      return rule.validator;
    }
    var keys2 = Object.keys(rule);
    var messageIndex = keys2.indexOf("message");
    if (messageIndex !== -1) {
      keys2.splice(messageIndex, 1);
    }
    if (keys2.length === 1 && keys2[0] === "required") {
      return validators$2.required;
    }
    return validators$2[this.getType(rule)] || void 0;
  };
  return Schema2;
}();
Schema.register = function register(type4, validator2) {
  if (typeof validator2 !== "function") {
    throw new Error("Cannot register a validator by type, validator is not a function");
  }
  validators$2[type4] = validator2;
};
Schema.warning = warning;
Schema.messages = messages$1;
Schema.validators = validators$2;
const formItemValidateStates = [
  "",
  "error",
  "validating",
  "success"
];
const formItemProps = buildProps({
  label: String,
  labelWidth: {
    type: [String, Number],
    default: ""
  },
  labelPosition: {
    type: String,
    values: ["left", "right", "top", ""],
    default: ""
  },
  prop: {
    type: definePropType([String, Array])
  },
  required: {
    type: Boolean,
    default: void 0
  },
  rules: {
    type: definePropType([Object, Array])
  },
  error: String,
  validateStatus: {
    type: String,
    values: formItemValidateStates
  },
  for: String,
  inlineMessage: {
    type: [String, Boolean],
    default: ""
  },
  showMessage: {
    type: Boolean,
    default: true
  },
  size: {
    type: String,
    values: componentSizes
  }
});
const COMPONENT_NAME = "ElLabelWrap";
var FormLabelWrap = /* @__PURE__ */ defineComponent({
  name: COMPONENT_NAME,
  props: {
    isAutoWidth: Boolean,
    updateAll: Boolean
  },
  setup(props, {
    slots
  }) {
    const formContext = inject(formContextKey, void 0);
    const formItemContext = inject(formItemContextKey);
    if (!formItemContext)
      throwError(COMPONENT_NAME, "usage: <el-form-item><label-wrap /></el-form-item>");
    const ns2 = useNamespace("form");
    const el2 = ref();
    const computedWidth = ref(0);
    const getLabelWidth = () => {
      var _a2;
      if ((_a2 = el2.value) == null ? void 0 : _a2.firstElementChild) {
        const width = window.getComputedStyle(el2.value.firstElementChild).width;
        return Math.ceil(Number.parseFloat(width));
      } else {
        return 0;
      }
    };
    const updateLabelWidth = (action = "update") => {
      nextTick(() => {
        if (slots.default && props.isAutoWidth) {
          if (action === "update") {
            computedWidth.value = getLabelWidth();
          } else if (action === "remove") {
            formContext == null ? void 0 : formContext.deregisterLabelWidth(computedWidth.value);
          }
        }
      });
    };
    const updateLabelWidthFn = () => updateLabelWidth("update");
    onMounted(() => {
      updateLabelWidthFn();
    });
    onBeforeUnmount(() => {
      updateLabelWidth("remove");
    });
    onUpdated(() => updateLabelWidthFn());
    watch(computedWidth, (val, oldVal) => {
      if (props.updateAll) {
        formContext == null ? void 0 : formContext.registerLabelWidth(val, oldVal);
      }
    });
    useResizeObserver(computed(() => {
      var _a2, _b2;
      return (_b2 = (_a2 = el2.value) == null ? void 0 : _a2.firstElementChild) != null ? _b2 : null;
    }), updateLabelWidthFn);
    return () => {
      var _a2, _b2;
      if (!slots)
        return null;
      const {
        isAutoWidth
      } = props;
      if (isAutoWidth) {
        const autoLabelWidth = formContext == null ? void 0 : formContext.autoLabelWidth;
        const hasLabel = formItemContext == null ? void 0 : formItemContext.hasLabel;
        const style = {};
        if (hasLabel && autoLabelWidth && autoLabelWidth !== "auto") {
          const marginWidth = Math.max(0, Number.parseInt(autoLabelWidth, 10) - computedWidth.value);
          const labelPosition = formItemContext.labelPosition || formContext.labelPosition;
          const marginPosition = labelPosition === "left" ? "marginRight" : "marginLeft";
          if (marginWidth) {
            style[marginPosition] = `${marginWidth}px`;
          }
        }
        return createVNode("div", {
          "ref": el2,
          "class": [ns2.be("item", "label-wrap")],
          "style": style
        }, [(_a2 = slots.default) == null ? void 0 : _a2.call(slots)]);
      } else {
        return createVNode(Fragment, {
          "ref": el2
        }, [(_b2 = slots.default) == null ? void 0 : _b2.call(slots)]);
      }
    };
  }
});
const __default__$1 = /* @__PURE__ */ defineComponent({
  name: "ElFormItem"
});
const _sfc_main$4 = /* @__PURE__ */ defineComponent({
  ...__default__$1,
  props: formItemProps,
  setup(__props, { expose }) {
    const props = __props;
    const slots = useSlots();
    const formContext = inject(formContextKey, void 0);
    const parentFormItemContext = inject(formItemContextKey, void 0);
    const _size = useFormSize(void 0, { formItem: false });
    const ns2 = useNamespace("form-item");
    const labelId = useId().value;
    const inputIds = ref([]);
    const validateState = ref("");
    const validateStateDebounced = refDebounced(validateState, 100);
    const validateMessage = ref("");
    const formItemRef = ref();
    let initialValue = void 0;
    let isResettingField = false;
    const labelPosition = computed(() => props.labelPosition || (formContext == null ? void 0 : formContext.labelPosition));
    const labelStyle = computed(() => {
      if (labelPosition.value === "top") {
        return {};
      }
      const labelWidth = addUnit(props.labelWidth || (formContext == null ? void 0 : formContext.labelWidth) || "");
      if (labelWidth)
        return { width: labelWidth };
      return {};
    });
    const contentStyle = computed(() => {
      if (labelPosition.value === "top" || (formContext == null ? void 0 : formContext.inline)) {
        return {};
      }
      if (!props.label && !props.labelWidth && isNested) {
        return {};
      }
      const labelWidth = addUnit(props.labelWidth || (formContext == null ? void 0 : formContext.labelWidth) || "");
      if (!props.label && !slots.label) {
        return { marginLeft: labelWidth };
      }
      return {};
    });
    const formItemClasses = computed(() => [
      ns2.b(),
      ns2.m(_size.value),
      ns2.is("error", validateState.value === "error"),
      ns2.is("validating", validateState.value === "validating"),
      ns2.is("success", validateState.value === "success"),
      ns2.is("required", isRequired.value || props.required),
      ns2.is("no-asterisk", formContext == null ? void 0 : formContext.hideRequiredAsterisk),
      (formContext == null ? void 0 : formContext.requireAsteriskPosition) === "right" ? "asterisk-right" : "asterisk-left",
      {
        [ns2.m("feedback")]: formContext == null ? void 0 : formContext.statusIcon,
        [ns2.m(`label-${labelPosition.value}`)]: labelPosition.value
      }
    ]);
    const _inlineMessage = computed(() => isBoolean$2(props.inlineMessage) ? props.inlineMessage : (formContext == null ? void 0 : formContext.inlineMessage) || false);
    const validateClasses = computed(() => [
      ns2.e("error"),
      { [ns2.em("error", "inline")]: _inlineMessage.value }
    ]);
    const propString = computed(() => {
      if (!props.prop)
        return "";
      return isString$3(props.prop) ? props.prop : props.prop.join(".");
    });
    const hasLabel = computed(() => {
      return !!(props.label || slots.label);
    });
    const labelFor = computed(() => {
      return props.for || (inputIds.value.length === 1 ? inputIds.value[0] : void 0);
    });
    const isGroup = computed(() => {
      return !labelFor.value && hasLabel.value;
    });
    const isNested = !!parentFormItemContext;
    const fieldValue = computed(() => {
      const model = formContext == null ? void 0 : formContext.model;
      if (!model || !props.prop) {
        return;
      }
      return getProp(model, props.prop).value;
    });
    const normalizedRules = computed(() => {
      const { required: required4 } = props;
      const rules2 = [];
      if (props.rules) {
        rules2.push(...castArray(props.rules));
      }
      const formRules = formContext == null ? void 0 : formContext.rules;
      if (formRules && props.prop) {
        const _rules = getProp(formRules, props.prop).value;
        if (_rules) {
          rules2.push(...castArray(_rules));
        }
      }
      if (required4 !== void 0) {
        const requiredRules = rules2.map((rule, i2) => [rule, i2]).filter(([rule]) => Object.keys(rule).includes("required"));
        if (requiredRules.length > 0) {
          for (const [rule, i2] of requiredRules) {
            if (rule.required === required4)
              continue;
            rules2[i2] = { ...rule, required: required4 };
          }
        } else {
          rules2.push({ required: required4 });
        }
      }
      return rules2;
    });
    const validateEnabled = computed(() => normalizedRules.value.length > 0);
    const getFilteredRule = (trigger2) => {
      const rules2 = normalizedRules.value;
      return rules2.filter((rule) => {
        if (!rule.trigger || !trigger2)
          return true;
        if (isArray$4(rule.trigger)) {
          return rule.trigger.includes(trigger2);
        } else {
          return rule.trigger === trigger2;
        }
      }).map(({ trigger: trigger22, ...rule }) => rule);
    };
    const isRequired = computed(() => normalizedRules.value.some((rule) => rule.required));
    const shouldShowError = computed(() => {
      var _a2;
      return validateStateDebounced.value === "error" && props.showMessage && ((_a2 = formContext == null ? void 0 : formContext.showMessage) != null ? _a2 : true);
    });
    const currentLabel = computed(() => `${props.label || ""}${(formContext == null ? void 0 : formContext.labelSuffix) || ""}`);
    const setValidationState = (state) => {
      validateState.value = state;
    };
    const onValidationFailed = (error) => {
      var _a2, _b2;
      const { errors, fields } = error;
      if (!errors || !fields) {
        console.error(error);
      }
      setValidationState("error");
      validateMessage.value = errors ? (_b2 = (_a2 = errors == null ? void 0 : errors[0]) == null ? void 0 : _a2.message) != null ? _b2 : `${props.prop} is required` : "";
      formContext == null ? void 0 : formContext.emit("validate", props.prop, false, validateMessage.value);
    };
    const onValidationSucceeded = () => {
      setValidationState("success");
      formContext == null ? void 0 : formContext.emit("validate", props.prop, true, "");
    };
    const doValidate = async (rules2) => {
      const modelName = propString.value;
      const validator2 = new Schema({
        [modelName]: rules2
      });
      return validator2.validate({ [modelName]: fieldValue.value }, { firstFields: true }).then(() => {
        onValidationSucceeded();
        return true;
      }).catch((err) => {
        onValidationFailed(err);
        return Promise.reject(err);
      });
    };
    const validate = async (trigger2, callback) => {
      if (isResettingField || !props.prop) {
        return false;
      }
      const hasCallback = isFunction$3(callback);
      if (!validateEnabled.value) {
        callback == null ? void 0 : callback(false);
        return false;
      }
      const rules2 = getFilteredRule(trigger2);
      if (rules2.length === 0) {
        callback == null ? void 0 : callback(true);
        return true;
      }
      setValidationState("validating");
      return doValidate(rules2).then(() => {
        callback == null ? void 0 : callback(true);
        return true;
      }).catch((err) => {
        const { fields } = err;
        callback == null ? void 0 : callback(false, fields);
        return hasCallback ? false : Promise.reject(fields);
      });
    };
    const clearValidate = () => {
      setValidationState("");
      validateMessage.value = "";
      isResettingField = false;
    };
    const resetField = async () => {
      const model = formContext == null ? void 0 : formContext.model;
      if (!model || !props.prop)
        return;
      const computedValue = getProp(model, props.prop);
      isResettingField = true;
      computedValue.value = clone(initialValue);
      await nextTick();
      clearValidate();
      isResettingField = false;
    };
    const addInputId = (id2) => {
      if (!inputIds.value.includes(id2)) {
        inputIds.value.push(id2);
      }
    };
    const removeInputId = (id2) => {
      inputIds.value = inputIds.value.filter((listId) => listId !== id2);
    };
    watch(() => props.error, (val) => {
      validateMessage.value = val || "";
      setValidationState(val ? "error" : "");
    }, { immediate: true });
    watch(() => props.validateStatus, (val) => setValidationState(val || ""));
    const context = reactive({
      ...toRefs(props),
      $el: formItemRef,
      size: _size,
      validateState,
      labelId,
      inputIds,
      isGroup,
      hasLabel,
      fieldValue,
      addInputId,
      removeInputId,
      resetField,
      clearValidate,
      validate
    });
    provide(formItemContextKey, context);
    onMounted(() => {
      if (props.prop) {
        formContext == null ? void 0 : formContext.addField(context);
        initialValue = clone(fieldValue.value);
      }
    });
    onBeforeUnmount(() => {
      formContext == null ? void 0 : formContext.removeField(context);
    });
    expose({
      size: _size,
      validateMessage,
      validateState,
      validate,
      clearValidate,
      resetField
    });
    return (_ctx, _cache) => {
      var _a2;
      return openBlock(), createElementBlock("div", {
        ref_key: "formItemRef",
        ref: formItemRef,
        class: normalizeClass(unref(formItemClasses)),
        role: unref(isGroup) ? "group" : void 0,
        "aria-labelledby": unref(isGroup) ? unref(labelId) : void 0
      }, [
        createVNode(unref(FormLabelWrap), {
          "is-auto-width": unref(labelStyle).width === "auto",
          "update-all": ((_a2 = unref(formContext)) == null ? void 0 : _a2.labelWidth) === "auto"
        }, {
          default: withCtx(() => [
            unref(hasLabel) ? (openBlock(), createBlock(resolveDynamicComponent(unref(labelFor) ? "label" : "div"), {
              key: 0,
              id: unref(labelId),
              for: unref(labelFor),
              class: normalizeClass(unref(ns2).e("label")),
              style: normalizeStyle(unref(labelStyle))
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "label", { label: unref(currentLabel) }, () => [
                  createTextVNode(toDisplayString$1(unref(currentLabel)), 1)
                ])
              ]),
              _: 3
            }, 8, ["id", "for", "class", "style"])) : createCommentVNode("v-if", true)
          ]),
          _: 3
        }, 8, ["is-auto-width", "update-all"]),
        createBaseVNode("div", {
          class: normalizeClass(unref(ns2).e("content")),
          style: normalizeStyle(unref(contentStyle))
        }, [
          renderSlot(_ctx.$slots, "default"),
          createVNode(TransitionGroup, {
            name: `${unref(ns2).namespace.value}-zoom-in-top`
          }, {
            default: withCtx(() => [
              unref(shouldShowError) ? renderSlot(_ctx.$slots, "error", {
                key: 0,
                error: validateMessage.value
              }, () => [
                createBaseVNode("div", {
                  class: normalizeClass(unref(validateClasses))
                }, toDisplayString$1(validateMessage.value), 3)
              ]) : createCommentVNode("v-if", true)
            ]),
            _: 3
          }, 8, ["name"])
        ], 6)
      ], 10, ["role", "aria-labelledby"]);
    };
  }
});
var FormItem = /* @__PURE__ */ _export_sfc$1(_sfc_main$4, [["__file", "form-item.vue"]]);
const ElForm = withInstall(Form, {
  FormItem
});
const ElFormItem = withNoopInstall(FormItem);
const messageTypes = ["success", "info", "warning", "error"];
const messageDefaults = mutable({
  customClass: "",
  center: false,
  dangerouslyUseHTMLString: false,
  duration: 3e3,
  icon: void 0,
  id: "",
  message: "",
  onClose: void 0,
  showClose: false,
  type: "info",
  plain: false,
  offset: 16,
  zIndex: 0,
  grouping: false,
  repeatNum: 1,
  appendTo: isClient ? document.body : void 0
});
const messageProps = buildProps({
  customClass: {
    type: String,
    default: messageDefaults.customClass
  },
  center: {
    type: Boolean,
    default: messageDefaults.center
  },
  dangerouslyUseHTMLString: {
    type: Boolean,
    default: messageDefaults.dangerouslyUseHTMLString
  },
  duration: {
    type: Number,
    default: messageDefaults.duration
  },
  icon: {
    type: iconPropType,
    default: messageDefaults.icon
  },
  id: {
    type: String,
    default: messageDefaults.id
  },
  message: {
    type: definePropType([
      String,
      Object,
      Function
    ]),
    default: messageDefaults.message
  },
  onClose: {
    type: definePropType(Function),
    default: messageDefaults.onClose
  },
  showClose: {
    type: Boolean,
    default: messageDefaults.showClose
  },
  type: {
    type: String,
    values: messageTypes,
    default: messageDefaults.type
  },
  plain: {
    type: Boolean,
    default: messageDefaults.plain
  },
  offset: {
    type: Number,
    default: messageDefaults.offset
  },
  zIndex: {
    type: Number,
    default: messageDefaults.zIndex
  },
  grouping: {
    type: Boolean,
    default: messageDefaults.grouping
  },
  repeatNum: {
    type: Number,
    default: messageDefaults.repeatNum
  }
});
const messageEmits = {
  destroy: () => true
};
const instances = shallowReactive([]);
const getInstance = (id2) => {
  const idx = instances.findIndex((instance) => instance.id === id2);
  const current = instances[idx];
  let prev;
  if (idx > 0) {
    prev = instances[idx - 1];
  }
  return { current, prev };
};
const getLastOffset = (id2) => {
  const { prev } = getInstance(id2);
  if (!prev)
    return 0;
  return prev.vm.exposed.bottom.value;
};
const getOffsetOrSpace = (id2, offset) => {
  const idx = instances.findIndex((instance) => instance.id === id2);
  return idx > 0 ? 16 : offset;
};
const __default__ = /* @__PURE__ */ defineComponent({
  name: "ElMessage"
});
const _sfc_main$3 = /* @__PURE__ */ defineComponent({
  ...__default__,
  props: messageProps,
  emits: messageEmits,
  setup(__props, { expose }) {
    const props = __props;
    const { Close } = TypeComponents;
    const { ns: ns2, zIndex: zIndex2 } = useGlobalComponentSettings("message");
    const { currentZIndex, nextZIndex } = zIndex2;
    const messageRef = ref();
    const visible = ref(false);
    const height = ref(0);
    let stopTimer = void 0;
    const badgeType = computed(() => props.type ? props.type === "error" ? "danger" : props.type : "info");
    const typeClass = computed(() => {
      const type4 = props.type;
      return { [ns2.bm("icon", type4)]: type4 && TypeComponentsMap[type4] };
    });
    const iconComponent = computed(() => props.icon || TypeComponentsMap[props.type] || "");
    const lastOffset = computed(() => getLastOffset(props.id));
    const offset = computed(() => getOffsetOrSpace(props.id, props.offset) + lastOffset.value);
    const bottom = computed(() => height.value + offset.value);
    const customStyle = computed(() => ({
      top: `${offset.value}px`,
      zIndex: currentZIndex.value
    }));
    function startTimer() {
      if (props.duration === 0)
        return;
      ({ stop: stopTimer } = useTimeoutFn(() => {
        close();
      }, props.duration));
    }
    function clearTimer() {
      stopTimer == null ? void 0 : stopTimer();
    }
    function close() {
      visible.value = false;
    }
    function keydown({ code }) {
      if (code === EVENT_CODE.esc) {
        close();
      }
    }
    onMounted(() => {
      startTimer();
      nextZIndex();
      visible.value = true;
    });
    watch(() => props.repeatNum, () => {
      clearTimer();
      startTimer();
    });
    useEventListener(document, "keydown", keydown);
    useResizeObserver(messageRef, () => {
      height.value = messageRef.value.getBoundingClientRect().height;
    });
    expose({
      visible,
      bottom,
      close
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(Transition, {
        name: unref(ns2).b("fade"),
        onBeforeLeave: _ctx.onClose,
        onAfterLeave: ($event) => _ctx.$emit("destroy"),
        persisted: ""
      }, {
        default: withCtx(() => [
          withDirectives(createBaseVNode("div", {
            id: _ctx.id,
            ref_key: "messageRef",
            ref: messageRef,
            class: normalizeClass([
              unref(ns2).b(),
              { [unref(ns2).m(_ctx.type)]: _ctx.type },
              unref(ns2).is("center", _ctx.center),
              unref(ns2).is("closable", _ctx.showClose),
              unref(ns2).is("plain", _ctx.plain),
              _ctx.customClass
            ]),
            style: normalizeStyle(unref(customStyle)),
            role: "alert",
            onMouseenter: clearTimer,
            onMouseleave: startTimer
          }, [
            _ctx.repeatNum > 1 ? (openBlock(), createBlock(unref(ElBadge), {
              key: 0,
              value: _ctx.repeatNum,
              type: unref(badgeType),
              class: normalizeClass(unref(ns2).e("badge"))
            }, null, 8, ["value", "type", "class"])) : createCommentVNode("v-if", true),
            unref(iconComponent) ? (openBlock(), createBlock(unref(ElIcon), {
              key: 1,
              class: normalizeClass([unref(ns2).e("icon"), unref(typeClass)])
            }, {
              default: withCtx(() => [
                (openBlock(), createBlock(resolveDynamicComponent(unref(iconComponent))))
              ]),
              _: 1
            }, 8, ["class"])) : createCommentVNode("v-if", true),
            renderSlot(_ctx.$slots, "default", {}, () => [
              !_ctx.dangerouslyUseHTMLString ? (openBlock(), createElementBlock("p", {
                key: 0,
                class: normalizeClass(unref(ns2).e("content"))
              }, toDisplayString$1(_ctx.message), 3)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                createCommentVNode(" Caution here, message could've been compromised, never use user's input as message "),
                createBaseVNode("p", {
                  class: normalizeClass(unref(ns2).e("content")),
                  innerHTML: _ctx.message
                }, null, 10, ["innerHTML"])
              ], 2112))
            ]),
            _ctx.showClose ? (openBlock(), createBlock(unref(ElIcon), {
              key: 2,
              class: normalizeClass(unref(ns2).e("closeBtn")),
              onClick: withModifiers(close, ["stop"])
            }, {
              default: withCtx(() => [
                createVNode(unref(Close))
              ]),
              _: 1
            }, 8, ["class", "onClick"])) : createCommentVNode("v-if", true)
          ], 46, ["id"]), [
            [vShow, visible.value]
          ])
        ]),
        _: 3
      }, 8, ["name", "onBeforeLeave", "onAfterLeave"]);
    };
  }
});
var MessageConstructor = /* @__PURE__ */ _export_sfc$1(_sfc_main$3, [["__file", "message.vue"]]);
let seed = 1;
const normalizeOptions = (params) => {
  const options = !params || isString$3(params) || isVNode$1(params) || isFunction$3(params) ? { message: params } : params;
  const normalized = {
    ...messageDefaults,
    ...options
  };
  if (!normalized.appendTo) {
    normalized.appendTo = document.body;
  } else if (isString$3(normalized.appendTo)) {
    let appendTo = document.querySelector(normalized.appendTo);
    if (!isElement(appendTo)) {
      appendTo = document.body;
    }
    normalized.appendTo = appendTo;
  }
  if (isBoolean$2(messageConfig.grouping) && !normalized.grouping) {
    normalized.grouping = messageConfig.grouping;
  }
  if (isNumber$2(messageConfig.duration) && normalized.duration === 3e3) {
    normalized.duration = messageConfig.duration;
  }
  if (isNumber$2(messageConfig.offset) && normalized.offset === 16) {
    normalized.offset = messageConfig.offset;
  }
  if (isBoolean$2(messageConfig.showClose) && !normalized.showClose) {
    normalized.showClose = messageConfig.showClose;
  }
  return normalized;
};
const closeMessage = (instance) => {
  const idx = instances.indexOf(instance);
  if (idx === -1)
    return;
  instances.splice(idx, 1);
  const { handler: handler2 } = instance;
  handler2.close();
};
const createMessage = ({ appendTo, ...options }, context) => {
  const id2 = `message_${seed++}`;
  const userOnClose = options.onClose;
  const container = document.createElement("div");
  const props = {
    ...options,
    id: id2,
    onClose: () => {
      userOnClose == null ? void 0 : userOnClose();
      closeMessage(instance);
    },
    onDestroy: () => {
      render(null, container);
    }
  };
  const vnode = createVNode(MessageConstructor, props, isFunction$3(props.message) || isVNode$1(props.message) ? {
    default: isFunction$3(props.message) ? props.message : () => props.message
  } : null);
  vnode.appContext = context || message._context;
  render(vnode, container);
  appendTo.appendChild(container.firstElementChild);
  const vm2 = vnode.component;
  const handler2 = {
    close: () => {
      vm2.exposed.visible.value = false;
    }
  };
  const instance = {
    id: id2,
    vnode,
    vm: vm2,
    handler: handler2,
    props: vnode.component.props
  };
  return instance;
};
const message = (options = {}, context) => {
  if (!isClient)
    return { close: () => void 0 };
  const normalized = normalizeOptions(options);
  if (normalized.grouping && instances.length) {
    const instance2 = instances.find(({ vnode: vm2 }) => {
      var _a2;
      return ((_a2 = vm2.props) == null ? void 0 : _a2.message) === normalized.message;
    });
    if (instance2) {
      instance2.props.repeatNum += 1;
      instance2.props.type = normalized.type;
      return instance2.handler;
    }
  }
  if (isNumber$2(messageConfig.max) && instances.length >= messageConfig.max) {
    return { close: () => void 0 };
  }
  const instance = createMessage(normalized, context);
  instances.push(instance);
  return instance.handler;
};
messageTypes.forEach((type4) => {
  message[type4] = (options = {}, appContext) => {
    const normalized = normalizeOptions(options);
    return message({ ...normalized, type: type4 }, appContext);
  };
});
function closeAll(type4) {
  for (const instance of instances) {
    if (!type4 || type4 === instance.props.type) {
      instance.handler.close();
    }
  }
}
message.closeAll = closeAll;
message._context = null;
const ElMessage = withInstallFunction(message, "$message");
var zhCn = {
  name: "zh-cn",
  el: {
    breadcrumb: {
      label: "面包屑"
    },
    colorpicker: {
      confirm: "确定",
      clear: "清空",
      defaultLabel: "颜色选择器",
      description: "当前颜色 {color}，按 Enter 键选择新颜色",
      alphaLabel: "选择透明度的值"
    },
    datepicker: {
      now: "此刻",
      today: "今天",
      cancel: "取消",
      clear: "清空",
      confirm: "确定",
      dateTablePrompt: "使用方向键与 Enter 键可选择日期",
      monthTablePrompt: "使用方向键与 Enter 键可选择月份",
      yearTablePrompt: "使用方向键与 Enter 键可选择年份",
      selectedDate: "已选日期",
      selectDate: "选择日期",
      selectTime: "选择时间",
      startDate: "开始日期",
      startTime: "开始时间",
      endDate: "结束日期",
      endTime: "结束时间",
      prevYear: "前一年",
      nextYear: "后一年",
      prevMonth: "上个月",
      nextMonth: "下个月",
      year: "年",
      month1: "1 月",
      month2: "2 月",
      month3: "3 月",
      month4: "4 月",
      month5: "5 月",
      month6: "6 月",
      month7: "7 月",
      month8: "8 月",
      month9: "9 月",
      month10: "10 月",
      month11: "11 月",
      month12: "12 月",
      weeks: {
        sun: "日",
        mon: "一",
        tue: "二",
        wed: "三",
        thu: "四",
        fri: "五",
        sat: "六"
      },
      weeksFull: {
        sun: "星期日",
        mon: "星期一",
        tue: "星期二",
        wed: "星期三",
        thu: "星期四",
        fri: "星期五",
        sat: "星期六"
      },
      months: {
        jan: "一月",
        feb: "二月",
        mar: "三月",
        apr: "四月",
        may: "五月",
        jun: "六月",
        jul: "七月",
        aug: "八月",
        sep: "九月",
        oct: "十月",
        nov: "十一月",
        dec: "十二月"
      }
    },
    inputNumber: {
      decrease: "减少数值",
      increase: "增加数值"
    },
    select: {
      loading: "加载中",
      noMatch: "无匹配数据",
      noData: "无数据",
      placeholder: "请选择"
    },
    dropdown: {
      toggleDropdown: "切换下拉选项"
    },
    mention: {
      loading: "加载中"
    },
    cascader: {
      noMatch: "无匹配数据",
      loading: "加载中",
      placeholder: "请选择",
      noData: "暂无数据"
    },
    pagination: {
      goto: "前往",
      pagesize: "条/页",
      total: "共 {total} 条",
      pageClassifier: "页",
      page: "页",
      prev: "上一页",
      next: "下一页",
      currentPage: "第 {pager} 页",
      prevPages: "向前 {pager} 页",
      nextPages: "向后 {pager} 页",
      deprecationWarning: "你使用了一些已被废弃的用法，请参考 el-pagination 的官方文档"
    },
    dialog: {
      close: "关闭此对话框"
    },
    drawer: {
      close: "关闭此对话框"
    },
    messagebox: {
      title: "提示",
      confirm: "确定",
      cancel: "取消",
      error: "输入的数据不合法!",
      close: "关闭此对话框"
    },
    upload: {
      deleteTip: "按 delete 键可删除",
      delete: "删除",
      preview: "查看图片",
      continue: "继续上传"
    },
    slider: {
      defaultLabel: "滑块介于 {min} 至 {max}",
      defaultRangeStartLabel: "选择起始值",
      defaultRangeEndLabel: "选择结束值"
    },
    table: {
      emptyText: "暂无数据",
      confirmFilter: "筛选",
      resetFilter: "重置",
      clearFilter: "全部",
      sumText: "合计"
    },
    tour: {
      next: "下一步",
      previous: "上一步",
      finish: "结束导览"
    },
    tree: {
      emptyText: "暂无数据"
    },
    transfer: {
      noMatch: "无匹配数据",
      noData: "无数据",
      titles: ["列表 1", "列表 2"],
      filterPlaceholder: "请输入搜索内容",
      noCheckedFormat: "共 {total} 项",
      hasCheckedFormat: "已选 {checked}/{total} 项"
    },
    image: {
      error: "加载失败"
    },
    pageHeader: {
      title: "返回"
    },
    popconfirm: {
      confirmButtonText: "确定",
      cancelButtonText: "取消"
    },
    carousel: {
      leftArrow: "上一张幻灯片",
      rightArrow: "下一张幻灯片",
      indicator: "幻灯片切换至索引 {index}"
    }
  }
};
function bind(fn2, thisArg) {
  return function wrap() {
    return fn2.apply(thisArg, arguments);
  };
}
const { toString } = Object.prototype;
const { getPrototypeOf } = Object;
const kindOf = /* @__PURE__ */ ((cache2) => (thing) => {
  const str = toString.call(thing);
  return cache2[str] || (cache2[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
const kindOfTest = (type4) => {
  type4 = type4.toLowerCase();
  return (thing) => kindOf(thing) === type4;
};
const typeOfTest = (type4) => (thing) => typeof thing === type4;
const { isArray: isArray$2 } = Array;
const isUndefined = typeOfTest("undefined");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction$1(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
const isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
const isString$1 = typeOfTest("string");
const isFunction$1 = typeOfTest("function");
const isNumber$1 = typeOfTest("number");
const isObject$1 = (thing) => thing !== null && typeof thing === "object";
const isBoolean$1 = (thing) => thing === true || thing === false;
const isPlainObject$1 = (val) => {
  if (kindOf(val) !== "object") {
    return false;
  }
  const prototype2 = getPrototypeOf(val);
  return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};
const isDate$1 = kindOfTest("Date");
const isFile = kindOfTest("File");
const isBlob = kindOfTest("Blob");
const isFileList = kindOfTest("FileList");
const isStream = (val) => isObject$1(val) && isFunction$1(val.pipe);
const isFormData = (thing) => {
  let kind;
  return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction$1(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
  kind === "object" && isFunction$1(thing.toString) && thing.toString() === "[object FormData]"));
};
const isURLSearchParams = kindOfTest("URLSearchParams");
const [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
const trim$1 = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach(obj, fn2, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i2;
  let l2;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray$2(obj)) {
    for (i2 = 0, l2 = obj.length; i2 < l2; i2++) {
      fn2.call(null, obj[i2], i2, obj);
    }
  } else {
    const keys2 = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys2.length;
    let key;
    for (i2 = 0; i2 < len; i2++) {
      key = keys2[i2];
      fn2.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys2 = Object.keys(obj);
  let i2 = keys2.length;
  let _key;
  while (i2-- > 0) {
    _key = keys2[i2];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
const _global = (() => {
  if (typeof globalThis !== "undefined")
    return globalThis;
  return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
})();
const isContextDefined = (context) => !isUndefined(context) && context !== _global;
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue2 = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject$1(result[targetKey]) && isPlainObject$1(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject$1(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray$2(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i2 = 0, l2 = arguments.length; i2 < l2; i2++) {
    arguments[i2] && forEach(arguments[i2], assignValue2);
  }
  return result;
}
const extend = (a2, b, thisArg, { allOwnKeys } = {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction$1(val)) {
      a2[key] = bind(val, thisArg);
    } else {
      a2[key] = val;
    }
  }, { allOwnKeys });
  return a2;
};
const stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
const inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, "super", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
const toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i2;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null)
    return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i2 = props.length;
    while (i2-- > 0) {
      prop = props[i2];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
const endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
const toArray = (thing) => {
  if (!thing)
    return null;
  if (isArray$2(thing))
    return thing;
  let i2 = thing.length;
  if (!isNumber$1(i2))
    return null;
  const arr = new Array(i2);
  while (i2-- > 0) {
    arr[i2] = thing[i2];
  }
  return arr;
};
const isTypedArray = /* @__PURE__ */ ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
const forEachEntry = (obj, fn2) => {
  const generator = obj && obj[Symbol.iterator];
  const iterator2 = generator.call(obj);
  let result;
  while ((result = iterator2.next()) && !result.done) {
    const pair = result.value;
    fn2.call(obj, pair[0], pair[1]);
  }
};
const matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
const isHTMLForm = kindOfTest("HTMLFormElement");
const toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[-_\s]([a-z\d])(\w*)/g,
    function replacer2(m2, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};
const hasOwnProperty$1 = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
const isRegExp$1 = kindOfTest("RegExp");
const reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
const freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (isFunction$1(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction$1(value))
      return;
    descriptor.enumerable = false;
    if ("writable" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not rewrite read-only method '" + name + "'");
      };
    }
  });
};
const toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray$2(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
  return obj;
};
const noop$1 = () => {
};
const toFiniteNumber = (value, defaultValue) => {
  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
};
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction$1(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
}
const toJSONObject = (obj) => {
  const stack2 = new Array(10);
  const visit = (source, i2) => {
    if (isObject$1(source)) {
      if (stack2.indexOf(source) >= 0) {
        return;
      }
      if (!("toJSON" in source)) {
        stack2[i2] = source;
        const target = isArray$2(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i2 + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack2[i2] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
const isAsyncFn = kindOfTest("AsyncFunction");
const isThenable = (thing) => thing && (isObject$1(thing) || isFunction$1(thing)) && isFunction$1(thing.then) && isFunction$1(thing.catch);
const _setImmediate = ((setImmediateSupported, postMessageSupported) => {
  if (setImmediateSupported) {
    return setImmediate;
  }
  return postMessageSupported ? ((token, callbacks) => {
    _global.addEventListener("message", ({ source, data }) => {
      if (source === _global && data === token) {
        callbacks.length && callbacks.shift()();
      }
    }, false);
    return (cb2) => {
      callbacks.push(cb2);
      _global.postMessage(token, "*");
    };
  })(`axios@${Math.random()}`, []) : (cb2) => setTimeout(cb2);
})(
  typeof setImmediate === "function",
  isFunction$1(_global.postMessage)
);
const asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
const utils$1 = {
  isArray: isArray$2,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString: isString$1,
  isNumber: isNumber$1,
  isBoolean: isBoolean$1,
  isObject: isObject$1,
  isPlainObject: isPlainObject$1,
  isReadableStream,
  isRequest,
  isResponse,
  isHeaders,
  isUndefined,
  isDate: isDate$1,
  isFile,
  isBlob,
  isRegExp: isRegExp$1,
  isFunction: isFunction$1,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim: trim$1,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty: hasOwnProperty$1,
  hasOwnProp: hasOwnProperty$1,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop: noop$1,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable,
  setImmediate: _setImmediate,
  asap
};
function AxiosError(message2, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message2;
  this.name = "AxiosError";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  if (response) {
    this.response = response;
    this.status = response.status ? response.status : null;
  }
}
utils$1.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils$1.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});
const prototype$1 = AxiosError.prototype;
const descriptors = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype$1, "isAxiosError", { value: true });
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype$1);
  utils$1.toFlatObject(error, axiosError, function filter2(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== "isAxiosError";
  });
  AxiosError.call(axiosError, error.message, code, config, request, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
const httpAdapter = null;
function isVisitable(thing) {
  return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
}
function removeBrackets(key) {
  return utils$1.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path)
    return key;
  return path.concat(key).map(function each(token, i2) {
    token = removeBrackets(token);
    return !dots && i2 ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils$1.isArray(arr) && !arr.some(isVisitable);
}
const predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function toFormData(obj, formData, options) {
  if (!utils$1.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new FormData();
  options = utils$1.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils$1.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
  if (!utils$1.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue(value) {
    if (value === null)
      return "";
    if (utils$1.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils$1.isBlob(value)) {
      throw new AxiosError("Blob is not supported. Use a Buffer instead.");
    }
    if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === "object") {
      if (utils$1.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, "[]")) && (arr = utils$1.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el2, index) {
          !(utils$1.isUndefined(el2) || el2 === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
            convertValue(el2)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack2 = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils$1.isUndefined(value))
      return;
    if (stack2.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path.join("."));
    }
    stack2.push(value);
    utils$1.forEach(value, function each(el2, key) {
      const result = !(utils$1.isUndefined(el2) || el2 === null) && visitor.call(
        formData,
        el2,
        utils$1.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el2, path ? path.concat(key) : [key]);
      }
    });
    stack2.pop();
  }
  if (!utils$1.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build(obj);
  return formData;
}
function encode$1(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer2(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData(params, this, options);
}
const prototype = AxiosURLSearchParams.prototype;
prototype.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype.toString = function toString2(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode$1);
  } : encode$1;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + "=" + _encode(pair[1]);
  }, "").join("&");
};
function encode(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL(url2, params, options) {
  if (!params) {
    return url2;
  }
  const _encode = options && options.encode || encode;
  if (utils$1.isFunction(options)) {
    options = {
      serialize: options
    };
  }
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url2.indexOf("#");
    if (hashmarkIndex !== -1) {
      url2 = url2.slice(0, hashmarkIndex);
    }
    url2 += (url2.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url2;
}
class InterceptorManager {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id2) {
    if (this.handlers[id2]) {
      this.handlers[id2] = null;
    }
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn2) {
    utils$1.forEach(this.handlers, function forEachHandler(h2) {
      if (h2 !== null) {
        fn2(h2);
      }
    });
  }
}
const transitionalDefaults = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};
const URLSearchParams$1 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams;
const FormData$1 = typeof FormData !== "undefined" ? FormData : null;
const Blob$1 = typeof Blob !== "undefined" ? Blob : null;
const platform$1 = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams$1,
    FormData: FormData$1,
    Blob: Blob$1
  },
  protocols: ["http", "https", "file", "blob", "url", "data"]
};
const hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
const _navigator = typeof navigator === "object" && navigator || void 0;
const hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
const hasStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
  self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();
const origin = hasBrowserEnv && window.location.href || "http://localhost";
const utils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  hasBrowserEnv,
  hasStandardBrowserEnv,
  hasStandardBrowserWebWorkerEnv,
  navigator: _navigator,
  origin
}, Symbol.toStringTag, { value: "Module" }));
const platform = {
  ...utils,
  ...platform$1
};
function toURLEncodedForm(data, options) {
  return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (platform.isNode && utils$1.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}
function parsePropPath(name) {
  return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys2 = Object.keys(arr);
  let i2;
  const len = keys2.length;
  let key;
  for (i2 = 0; i2 < len; i2++) {
    key = keys2[i2];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    if (name === "__proto__")
      return true;
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils$1.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils$1.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils$1.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils$1.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
    const obj = {};
    utils$1.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
function stringifySafely(rawValue, parser, encoder) {
  if (utils$1.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils$1.trim(rawValue);
    } catch (e2) {
      if (e2.name !== "SyntaxError") {
        throw e2;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
const defaults = {
  transitional: transitionalDefaults,
  adapter: ["xhr", "http", "fetch"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || "";
    const hasJSONContentType = contentType.indexOf("application/json") > -1;
    const isObjectPayload = utils$1.isObject(data);
    if (isObjectPayload && utils$1.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils$1.isFormData(data);
    if (isFormData2) {
      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
    }
    if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data) || utils$1.isReadableStream(data)) {
      return data;
    }
    if (utils$1.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils$1.isURLSearchParams(data)) {
      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils$1.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData(
          isFileList2 ? { "files[]": data } : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType("application/json", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === "json";
    if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {
      return data;
    }
    if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e2) {
        if (strictJSONParsing) {
          if (e2.name === "SyntaxError") {
            throw AxiosError.from(e2, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e2;
        }
      }
    }
    return data;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: platform.classes.FormData,
    Blob: platform.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*",
      "Content-Type": void 0
    }
  }
};
utils$1.forEach(["delete", "get", "head", "post", "put", "patch"], (method4) => {
  defaults.headers[method4] = {};
});
const defaults$1 = defaults;
const ignoreDuplicateOf = utils$1.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]);
const parseHeaders = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i2;
  rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
    i2 = line.indexOf(":");
    key = line.substring(0, i2).trim().toLowerCase();
    val = line.substring(i2 + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === "set-cookie") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    }
  });
  return parsed;
};
const $internals = Symbol("internals");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils$1.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils$1.isString(value))
    return;
  if (utils$1.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils$1.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils$1.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
class AxiosHeaders {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error("header name must be a non-empty string");
      }
      const key = utils$1.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders(header), valueOrRewrite);
    } else if (utils$1.isHeaders(header)) {
      for (const [key, value] of header.entries()) {
        setHeader(value, key, rewrite);
      }
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils$1.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils$1.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils$1.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils$1.findKey(this, header);
      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils$1.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils$1.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys2 = Object.keys(this);
    let i2 = keys2.length;
    let deleted = false;
    while (i2--) {
      const key = keys2[i2];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format2) {
    const self2 = this;
    const headers = {};
    utils$1.forEach(this, (value, header) => {
      const key = utils$1.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format2 ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils$1.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(", ") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed2 = new this(first);
    targets.forEach((target) => computed2.set(target));
    return computed2;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype2 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype2, _header);
        accessors[lHeader] = true;
      }
    }
    utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
}
AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
utils$1.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1);
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  };
});
utils$1.freezeMethods(AxiosHeaders);
const AxiosHeaders$1 = AxiosHeaders;
function transformData(fns, response) {
  const config = this || defaults$1;
  const context = response || config;
  const headers = AxiosHeaders$1.from(context.headers);
  let data = context.data;
  utils$1.forEach(fns, function transform2(fn2) {
    data = fn2.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}
function CanceledError(message2, config, request) {
  AxiosError.call(this, message2 == null ? "canceled" : message2, AxiosError.ERR_CANCELED, config, request);
  this.name = "CanceledError";
}
utils$1.inherits(CanceledError, AxiosError, {
  __CANCEL__: true
});
function settle(resolve2, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve2(response);
  } else {
    reject(new AxiosError(
      "Request failed with status code " + response.status,
      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}
function parseProtocol(url2) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url2);
  return match && match[1] || "";
}
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i2 = tail;
    let bytesCount = 0;
    while (i2 !== head) {
      bytesCount += bytes[i2++];
      i2 = i2 % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
function throttle(fn2, freq) {
  let timestamp = 0;
  let threshold = 1e3 / freq;
  let lastArgs;
  let timer;
  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn2.apply(null, args);
  };
  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if (passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs);
        }, threshold - passed);
      }
    }
  };
  const flush = () => lastArgs && invoke(lastArgs);
  return [throttled, flush];
}
const progressEventReducer = (listener, isDownloadStream, freq = 3) => {
  let bytesNotified = 0;
  const _speedometer = speedometer(50, 250);
  return throttle((e2) => {
    const loaded = e2.loaded;
    const total = e2.lengthComputable ? e2.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e2,
      lengthComputable: total != null,
      [isDownloadStream ? "download" : "upload"]: true
    };
    listener(data);
  }, freq);
};
const progressEventDecorator = (total, throttled) => {
  const lengthComputable = total != null;
  return [(loaded) => throttled[0]({
    lengthComputable,
    total,
    loaded
  }), throttled[1]];
};
const asyncDecorator = (fn2) => (...args) => utils$1.asap(() => fn2(...args));
const isURLSameOrigin = platform.hasStandardBrowserEnv ? /* @__PURE__ */ ((origin2, isMSIE) => (url2) => {
  url2 = new URL(url2, platform.origin);
  return origin2.protocol === url2.protocol && origin2.host === url2.host && (isMSIE || origin2.port === url2.port);
})(
  new URL(platform.origin),
  platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)
) : () => true;
const cookies = platform.hasStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + "=" + encodeURIComponent(value)];
      utils$1.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
      utils$1.isString(path) && cookie.push("path=" + path);
      utils$1.isString(domain) && cookie.push("domain=" + domain);
      secure === true && cookie.push("secure");
      document.cookie = cookie.join("; ");
    },
    read(name) {
      const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove(name) {
      this.write(name, "", Date.now() - 864e5);
    }
  }
) : (
  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  }
);
function isAbsoluteURL(url2) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url2);
}
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}
function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
  let isRelativeUrl = !isAbsoluteURL(requestedURL);
  if (baseURL && isRelativeUrl || allowAbsoluteUrls == false) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}
const headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, prop, caseless) {
    if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
      return utils$1.merge.call({ caseless }, target, source);
    } else if (utils$1.isPlainObject(source)) {
      return utils$1.merge({}, source);
    } else if (utils$1.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a2, b, prop, caseless) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(a2, b, prop, caseless);
    } else if (!utils$1.isUndefined(a2)) {
      return getMergedValue(void 0, a2, prop, caseless);
    }
  }
  function valueFromConfig2(a2, b) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(void 0, b);
    }
  }
  function defaultToConfig2(a2, b) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(void 0, b);
    } else if (!utils$1.isUndefined(a2)) {
      return getMergedValue(void 0, a2);
    }
  }
  function mergeDirectKeys(a2, b, prop) {
    if (prop in config2) {
      return getMergedValue(a2, b);
    } else if (prop in config1) {
      return getMergedValue(void 0, a2);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a2, b, prop) => mergeDeepProperties(headersToObject(a2), headersToObject(b), prop, true)
  };
  utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils$1.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}
const resolveConfig = (config) => {
  const newConfig = mergeConfig({}, config);
  let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
  newConfig.headers = headers = AxiosHeaders$1.from(headers);
  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);
  if (auth) {
    headers.set(
      "Authorization",
      "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
    );
  }
  let contentType;
  if (utils$1.isFormData(data)) {
    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
      headers.setContentType(void 0);
    } else if ((contentType = headers.getContentType()) !== false) {
      const [type4, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
      headers.setContentType([type4 || "multipart/form-data", ...tokens].join("; "));
    }
  }
  if (platform.hasStandardBrowserEnv) {
    withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
    if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {
      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);
      if (xsrfValue) {
        headers.set(xsrfHeaderName, xsrfValue);
      }
    }
  }
  return newConfig;
};
const isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
const xhrAdapter = isXHRAdapterSupported && function(config) {
  return new Promise(function dispatchXhrRequest(resolve2, reject) {
    const _config = resolveConfig(config);
    let requestData = _config.data;
    const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
    let { responseType, onUploadProgress, onDownloadProgress } = _config;
    let onCanceled;
    let uploadThrottled, downloadThrottled;
    let flushUpload, flushDownload;
    function done() {
      flushUpload && flushUpload();
      flushDownload && flushDownload();
      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
      _config.signal && _config.signal.removeEventListener("abort", onCanceled);
    }
    let request = new XMLHttpRequest();
    request.open(_config.method.toUpperCase(), _config.url, true);
    request.timeout = _config.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      const responseHeaders = AxiosHeaders$1.from(
        "getAllResponseHeaders" in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };
      settle(function _resolve(value) {
        resolve2(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request = null;
    }
    if ("onloadend" in request) {
      request.onloadend = onloadend;
    } else {
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
      request = null;
    };
    request.onerror = function handleError2() {
      reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request));
      request = null;
    };
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
      const transitional2 = _config.transitional || transitionalDefaults;
      if (_config.timeoutErrorMessage) {
        timeoutErrorMessage = _config.timeoutErrorMessage;
      }
      reject(new AxiosError(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
        config,
        request
      ));
      request = null;
    };
    requestData === void 0 && requestHeaders.setContentType(null);
    if ("setRequestHeader" in request) {
      utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }
    if (!utils$1.isUndefined(_config.withCredentials)) {
      request.withCredentials = !!_config.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request.responseType = _config.responseType;
    }
    if (onDownloadProgress) {
      [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
      request.addEventListener("progress", downloadThrottled);
    }
    if (onUploadProgress && request.upload) {
      [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
      request.upload.addEventListener("progress", uploadThrottled);
      request.upload.addEventListener("loadend", flushUpload);
    }
    if (_config.cancelToken || _config.signal) {
      onCanceled = (cancel) => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
        request.abort();
        request = null;
      };
      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
      if (_config.signal) {
        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
      }
    }
    const protocol = parseProtocol(_config.url);
    if (protocol && platform.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
      return;
    }
    request.send(requestData || null);
  });
};
const composeSignals = (signals, timeout) => {
  const { length } = signals = signals ? signals.filter(Boolean) : [];
  if (timeout || length) {
    let controller = new AbortController();
    let aborted;
    const onabort = function(reason) {
      if (!aborted) {
        aborted = true;
        unsubscribe();
        const err = reason instanceof Error ? reason : this.reason;
        controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));
      }
    };
    let timer = timeout && setTimeout(() => {
      timer = null;
      onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT));
    }, timeout);
    const unsubscribe = () => {
      if (signals) {
        timer && clearTimeout(timer);
        timer = null;
        signals.forEach((signal2) => {
          signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
        });
        signals = null;
      }
    };
    signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
    const { signal } = controller;
    signal.unsubscribe = () => utils$1.asap(unsubscribe);
    return signal;
  }
};
const composeSignals$1 = composeSignals;
const streamChunk = function* (chunk, chunkSize) {
  let len = chunk.byteLength;
  if (!chunkSize || len < chunkSize) {
    yield chunk;
    return;
  }
  let pos = 0;
  let end;
  while (pos < len) {
    end = pos + chunkSize;
    yield chunk.slice(pos, end);
    pos = end;
  }
};
const readBytes = async function* (iterable, chunkSize) {
  for await (const chunk of readStream(iterable)) {
    yield* streamChunk(chunk, chunkSize);
  }
};
const readStream = async function* (stream) {
  if (stream[Symbol.asyncIterator]) {
    yield* stream;
    return;
  }
  const reader = stream.getReader();
  try {
    for (; ; ) {
      const { done, value } = await reader.read();
      if (done) {
        break;
      }
      yield value;
    }
  } finally {
    await reader.cancel();
  }
};
const trackStream = (stream, chunkSize, onProgress, onFinish) => {
  const iterator2 = readBytes(stream, chunkSize);
  let bytes = 0;
  let done;
  let _onFinish = (e2) => {
    if (!done) {
      done = true;
      onFinish && onFinish(e2);
    }
  };
  return new ReadableStream({
    async pull(controller) {
      try {
        const { done: done2, value } = await iterator2.next();
        if (done2) {
          _onFinish();
          controller.close();
          return;
        }
        let len = value.byteLength;
        if (onProgress) {
          let loadedBytes = bytes += len;
          onProgress(loadedBytes);
        }
        controller.enqueue(new Uint8Array(value));
      } catch (err) {
        _onFinish(err);
        throw err;
      }
    },
    cancel(reason) {
      _onFinish(reason);
      return iterator2.return();
    }
  }, {
    highWaterMark: 2
  });
};
const isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
const isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
const encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
const test = (fn2, ...args) => {
  try {
    return !!fn2(...args);
  } catch (e2) {
    return false;
  }
};
const supportsRequestStream = isReadableStreamSupported && test(() => {
  let duplexAccessed = false;
  const hasContentType = new Request(platform.origin, {
    body: new ReadableStream(),
    method: "POST",
    get duplex() {
      duplexAccessed = true;
      return "half";
    }
  }).headers.has("Content-Type");
  return duplexAccessed && !hasContentType;
});
const DEFAULT_CHUNK_SIZE = 64 * 1024;
const supportsResponseStream = isReadableStreamSupported && test(() => utils$1.isReadableStream(new Response("").body));
const resolvers = {
  stream: supportsResponseStream && ((res) => res.body)
};
isFetchSupported && ((res) => {
  ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type4) => {
    !resolvers[type4] && (resolvers[type4] = utils$1.isFunction(res[type4]) ? (res2) => res2[type4]() : (_, config) => {
      throw new AxiosError(`Response type '${type4}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);
    });
  });
})(new Response());
const getBodyLength = async (body) => {
  if (body == null) {
    return 0;
  }
  if (utils$1.isBlob(body)) {
    return body.size;
  }
  if (utils$1.isSpecCompliantForm(body)) {
    const _request = new Request(platform.origin, {
      method: "POST",
      body
    });
    return (await _request.arrayBuffer()).byteLength;
  }
  if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {
    return body.byteLength;
  }
  if (utils$1.isURLSearchParams(body)) {
    body = body + "";
  }
  if (utils$1.isString(body)) {
    return (await encodeText(body)).byteLength;
  }
};
const resolveBodyLength = async (headers, body) => {
  const length = utils$1.toFiniteNumber(headers.getContentLength());
  return length == null ? getBodyLength(body) : length;
};
const fetchAdapter = isFetchSupported && (async (config) => {
  let {
    url: url2,
    method: method4,
    data,
    signal,
    cancelToken,
    timeout,
    onDownloadProgress,
    onUploadProgress,
    responseType,
    headers,
    withCredentials = "same-origin",
    fetchOptions
  } = resolveConfig(config);
  responseType = responseType ? (responseType + "").toLowerCase() : "text";
  let composedSignal = composeSignals$1([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
  let request;
  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
    composedSignal.unsubscribe();
  });
  let requestContentLength;
  try {
    if (onUploadProgress && supportsRequestStream && method4 !== "get" && method4 !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
      let _request = new Request(url2, {
        method: "POST",
        body: data,
        duplex: "half"
      });
      let contentTypeHeader;
      if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
        headers.setContentType(contentTypeHeader);
      }
      if (_request.body) {
        const [onProgress, flush] = progressEventDecorator(
          requestContentLength,
          progressEventReducer(asyncDecorator(onUploadProgress))
        );
        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
      }
    }
    if (!utils$1.isString(withCredentials)) {
      withCredentials = withCredentials ? "include" : "omit";
    }
    const isCredentialsSupported = "credentials" in Request.prototype;
    request = new Request(url2, {
      ...fetchOptions,
      signal: composedSignal,
      method: method4.toUpperCase(),
      headers: headers.normalize().toJSON(),
      body: data,
      duplex: "half",
      credentials: isCredentialsSupported ? withCredentials : void 0
    });
    let response = await fetch(request);
    const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
    if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
      const options = {};
      ["status", "statusText", "headers"].forEach((prop) => {
        options[prop] = response[prop];
      });
      const responseContentLength = utils$1.toFiniteNumber(response.headers.get("content-length"));
      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
        responseContentLength,
        progressEventReducer(asyncDecorator(onDownloadProgress), true)
      ) || [];
      response = new Response(
        trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
          flush && flush();
          unsubscribe && unsubscribe();
        }),
        options
      );
    }
    responseType = responseType || "text";
    let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || "text"](response, config);
    !isStreamResponse && unsubscribe && unsubscribe();
    return await new Promise((resolve2, reject) => {
      settle(resolve2, reject, {
        data: responseData,
        headers: AxiosHeaders$1.from(response.headers),
        status: response.status,
        statusText: response.statusText,
        config,
        request
      });
    });
  } catch (err) {
    unsubscribe && unsubscribe();
    if (err && err.name === "TypeError" && /fetch/i.test(err.message)) {
      throw Object.assign(
        new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request),
        {
          cause: err.cause || err
        }
      );
    }
    throw AxiosError.from(err, err && err.code, config, request);
  }
});
const knownAdapters = {
  http: httpAdapter,
  xhr: xhrAdapter,
  fetch: fetchAdapter
};
utils$1.forEach(knownAdapters, (fn2, value) => {
  if (fn2) {
    try {
      Object.defineProperty(fn2, "name", { value });
    } catch (e2) {
    }
    Object.defineProperty(fn2, "adapterName", { value });
  }
});
const renderReason = (reason) => `- ${reason}`;
const isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;
const adapters = {
  getAdapter: (adapters2) => {
    adapters2 = utils$1.isArray(adapters2) ? adapters2 : [adapters2];
    const { length } = adapters2;
    let nameOrAdapter;
    let adapter;
    const rejectedReasons = {};
    for (let i2 = 0; i2 < length; i2++) {
      nameOrAdapter = adapters2[i2];
      let id2;
      adapter = nameOrAdapter;
      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id2 = String(nameOrAdapter)).toLowerCase()];
        if (adapter === void 0) {
          throw new AxiosError(`Unknown adapter '${id2}'`);
        }
      }
      if (adapter) {
        break;
      }
      rejectedReasons[id2 || "#" + i2] = adapter;
    }
    if (!adapter) {
      const reasons = Object.entries(rejectedReasons).map(
        ([id2, state]) => `adapter ${id2} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
      );
      let s2 = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
      throw new AxiosError(
        `There is no suitable adapter to dispatch the request ` + s2,
        "ERR_NOT_SUPPORT"
      );
    }
    return adapter;
  },
  adapters: knownAdapters
};
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders$1.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if (["post", "put", "patch"].indexOf(config.method) !== -1) {
    config.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders$1.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}
const VERSION$2 = "1.8.3";
const validators$1 = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((type4, i2) => {
  validators$1[type4] = function validator2(thing) {
    return typeof thing === type4 || "a" + (i2 < 1 ? "n " : " ") + type4;
  };
});
const deprecatedWarnings = {};
validators$1.transitional = function transitional(validator2, version2, message2) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION$2 + "] Transitional option '" + opt + "'" + desc + (message2 ? ". " + message2 : "");
  }
  return (value, opt, opts) => {
    if (validator2 === false) {
      throw new AxiosError(
        formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")),
        AxiosError.ERR_DEPRECATED
      );
    }
    if (version2 && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version2 + " and will be removed in the near future"
        )
      );
    }
    return validator2 ? validator2(value, opt, opts) : true;
  };
};
validators$1.spelling = function spelling(correctSpelling) {
  return (value, opt) => {
    console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
    return true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
  }
  const keys2 = Object.keys(options);
  let i2 = keys2.length;
  while (i2-- > 0) {
    const opt = keys2[i2];
    const validator2 = schema[opt];
    if (validator2) {
      const value = options[opt];
      const result = value === void 0 || validator2(value, opt, options);
      if (result !== true) {
        throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
    }
  }
}
const validator = {
  assertOptions,
  validators: validators$1
};
const validators = validator.validators;
class Axios {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager(),
      response: new InterceptorManager()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy = {};
        Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
        const stack2 = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
        try {
          if (!err.stack) {
            err.stack = stack2;
          } else if (stack2 && !String(err.stack).endsWith(stack2.replace(/^.+\n.+\n/, ""))) {
            err.stack += "\n" + stack2;
          }
        } catch (e2) {
        }
      }
      throw err;
    }
  }
  _request(configOrUrl, config) {
    if (typeof configOrUrl === "string") {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig(this.defaults, config);
    const { transitional: transitional2, paramsSerializer, headers } = config;
    if (transitional2 !== void 0) {
      validator.assertOptions(transitional2, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils$1.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator.assertOptions(paramsSerializer, {
          encode: validators.function,
          serialize: validators.function
        }, true);
      }
    }
    if (config.allowAbsoluteUrls !== void 0)
      ;
    else if (this.defaults.allowAbsoluteUrls !== void 0) {
      config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
    } else {
      config.allowAbsoluteUrls = true;
    }
    validator.assertOptions(config, {
      baseUrl: validators.spelling("baseURL"),
      withXsrfToken: validators.spelling("withXSRFToken")
    }, true);
    config.method = (config.method || this.defaults.method || "get").toLowerCase();
    let contextHeaders = headers && utils$1.merge(
      headers.common,
      headers[config.method]
    );
    headers && utils$1.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (method4) => {
        delete headers[method4];
      }
    );
    config.headers = AxiosHeaders$1.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i2 = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config);
      while (i2 < len) {
        promise = promise.then(chain[i2++], chain[i2++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    i2 = 0;
    while (i2 < len) {
      const onFulfilled = requestInterceptorChain[i2++];
      const onRejected = requestInterceptorChain[i2++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i2 = 0;
    len = responseInterceptorChain.length;
    while (i2 < len) {
      promise = promise.then(responseInterceptorChain[i2++], responseInterceptorChain[i2++]);
    }
    return promise;
  }
  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
}
utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method4) {
  Axios.prototype[method4] = function(url2, config) {
    return this.request(mergeConfig(config || {}, {
      method: method4,
      url: url2,
      data: (config || {}).data
    }));
  };
});
utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData(method4) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url2, data, config) {
      return this.request(mergeConfig(config || {}, {
        method: method4,
        headers: isForm ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url: url2,
        data
      }));
    };
  }
  Axios.prototype[method4] = generateHTTPMethod();
  Axios.prototype[method4 + "Form"] = generateHTTPMethod(true);
});
const Axios$1 = Axios;
class CancelToken {
  constructor(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve2) {
      resolvePromise = resolve2;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners)
        return;
      let i2 = token._listeners.length;
      while (i2-- > 0) {
        token._listeners[i2](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve2) => {
        token.subscribe(resolve2);
        _resolve = resolve2;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message2, config, request) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError(message2, config, request);
      resolvePromise(token.reason);
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  toAbortSignal() {
    const controller = new AbortController();
    const abort = (err) => {
      controller.abort(err);
    };
    this.subscribe(abort);
    controller.signal.unsubscribe = () => this.unsubscribe(abort);
    return controller.signal;
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c2) {
      cancel = c2;
    });
    return {
      token,
      cancel
    };
  }
}
const CancelToken$1 = CancelToken;
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}
function isAxiosError(payload) {
  return utils$1.isObject(payload) && payload.isAxiosError === true;
}
const HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
const HttpStatusCode$1 = HttpStatusCode;
function createInstance(defaultConfig) {
  const context = new Axios$1(defaultConfig);
  const instance = bind(Axios$1.prototype.request, context);
  utils$1.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
  utils$1.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create2(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
const axios = createInstance(defaults$1);
axios.Axios = Axios$1;
axios.CanceledError = CanceledError;
axios.CancelToken = CancelToken$1;
axios.isCancel = isCancel;
axios.VERSION = VERSION$2;
axios.toFormData = toFormData;
axios.AxiosError = AxiosError;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders$1;
axios.formToJSON = (thing) => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.getAdapter = adapters.getAdapter;
axios.HttpStatusCode = HttpStatusCode$1;
axios.default = axios;
const isValidKeyInObject = (key = "", source = {}) => {
  return !!(key && source && Object.keys(source).length && key in source && source[key]);
};
const typeOfData = (source) => {
  return Object.prototype.toString.call(source).slice(8, -1);
};
const serialize = (source) => {
  return Object.keys(source).filter((key) => isValidKeyInObject(key, source)).sort().map((key) => {
    let value = source[key];
    if (typeOfData(value) === "object")
      value = JSON.stringify(value);
    else if (typeOfData(value) === "array")
      value = value.join(",");
    return `${key}=${value}`;
  }).join("&");
};
function t(n, t2) {
  const r2 = (65535 & n) + (65535 & t2);
  return (n >> 16) + (t2 >> 16) + (r2 >> 16) << 16 | 65535 & r2;
}
function r(n, t2) {
  return n << t2 | n >>> 32 - t2;
}
function e(n, e2, o2, u2, c2, f2) {
  return t(r(t(t(e2, n), t(u2, f2)), c2), o2);
}
function o(n, t2, r2, o2, u2, c2, f2) {
  return e(t2 & r2 | ~t2 & o2, n, t2, u2, c2, f2);
}
function u(n, t2, r2, o2, u2, c2, f2) {
  return e(t2 & o2 | r2 & ~o2, n, t2, u2, c2, f2);
}
function c(n, t2, r2, o2, u2, c2, f2) {
  return e(t2 ^ r2 ^ o2, n, t2, u2, c2, f2);
}
function f(n, t2, r2, o2, u2, c2, f2) {
  return e(r2 ^ (t2 | ~o2), n, t2, u2, c2, f2);
}
function i(n, r2) {
  n[r2 >> 5] |= 128 << r2 % 32, n[14 + (r2 + 64 >>> 9 << 4)] = r2;
  let e2;
  let i2;
  let a2;
  let d2;
  let h2;
  let l2 = 1732584193;
  let g2 = -271733879;
  let v2 = -1732584194;
  let m2 = 271733878;
  for (e2 = 0; e2 < n.length; e2 += 16) {
    i2 = l2, a2 = g2, d2 = v2, h2 = m2, g2 = f(
      g2 = f(
        g2 = f(
          g2 = f(
            g2 = c(
              g2 = c(
                g2 = c(
                  g2 = c(
                    g2 = u(
                      g2 = u(
                        g2 = u(
                          g2 = u(
                            g2 = o(
                              g2 = o(
                                g2 = o(
                                  g2 = o(
                                    g2,
                                    v2 = o(
                                      v2,
                                      m2 = o(
                                        m2,
                                        l2 = o(
                                          l2,
                                          g2,
                                          v2,
                                          m2,
                                          n[e2],
                                          7,
                                          -680876936
                                        ),
                                        g2,
                                        v2,
                                        n[e2 + 1],
                                        12,
                                        -389564586
                                      ),
                                      l2,
                                      g2,
                                      n[e2 + 2],
                                      17,
                                      606105819
                                    ),
                                    m2,
                                    l2,
                                    n[e2 + 3],
                                    22,
                                    -1044525330
                                  ),
                                  v2 = o(
                                    v2,
                                    m2 = o(
                                      m2,
                                      l2 = o(
                                        l2,
                                        g2,
                                        v2,
                                        m2,
                                        n[e2 + 4],
                                        7,
                                        -176418897
                                      ),
                                      g2,
                                      v2,
                                      n[e2 + 5],
                                      12,
                                      1200080426
                                    ),
                                    l2,
                                    g2,
                                    n[e2 + 6],
                                    17,
                                    -1473231341
                                  ),
                                  m2,
                                  l2,
                                  n[e2 + 7],
                                  22,
                                  -45705983
                                ),
                                v2 = o(
                                  v2,
                                  m2 = o(
                                    m2,
                                    l2 = o(
                                      l2,
                                      g2,
                                      v2,
                                      m2,
                                      n[e2 + 8],
                                      7,
                                      1770035416
                                    ),
                                    g2,
                                    v2,
                                    n[e2 + 9],
                                    12,
                                    -1958414417
                                  ),
                                  l2,
                                  g2,
                                  n[e2 + 10],
                                  17,
                                  -42063
                                ),
                                m2,
                                l2,
                                n[e2 + 11],
                                22,
                                -1990404162
                              ),
                              v2 = o(
                                v2,
                                m2 = o(
                                  m2,
                                  l2 = o(
                                    l2,
                                    g2,
                                    v2,
                                    m2,
                                    n[e2 + 12],
                                    7,
                                    1804603682
                                  ),
                                  g2,
                                  v2,
                                  n[e2 + 13],
                                  12,
                                  -40341101
                                ),
                                l2,
                                g2,
                                n[e2 + 14],
                                17,
                                -1502002290
                              ),
                              m2,
                              l2,
                              n[e2 + 15],
                              22,
                              1236535329
                            ),
                            v2 = u(
                              v2,
                              m2 = u(
                                m2,
                                l2 = u(l2, g2, v2, m2, n[e2 + 1], 5, -165796510),
                                g2,
                                v2,
                                n[e2 + 6],
                                9,
                                -1069501632
                              ),
                              l2,
                              g2,
                              n[e2 + 11],
                              14,
                              643717713
                            ),
                            m2,
                            l2,
                            n[e2],
                            20,
                            -373897302
                          ),
                          v2 = u(
                            v2,
                            m2 = u(
                              m2,
                              l2 = u(l2, g2, v2, m2, n[e2 + 5], 5, -701558691),
                              g2,
                              v2,
                              n[e2 + 10],
                              9,
                              38016083
                            ),
                            l2,
                            g2,
                            n[e2 + 15],
                            14,
                            -660478335
                          ),
                          m2,
                          l2,
                          n[e2 + 4],
                          20,
                          -405537848
                        ),
                        v2 = u(
                          v2,
                          m2 = u(
                            m2,
                            l2 = u(l2, g2, v2, m2, n[e2 + 9], 5, 568446438),
                            g2,
                            v2,
                            n[e2 + 14],
                            9,
                            -1019803690
                          ),
                          l2,
                          g2,
                          n[e2 + 3],
                          14,
                          -187363961
                        ),
                        m2,
                        l2,
                        n[e2 + 8],
                        20,
                        1163531501
                      ),
                      v2 = u(
                        v2,
                        m2 = u(
                          m2,
                          l2 = u(l2, g2, v2, m2, n[e2 + 13], 5, -1444681467),
                          g2,
                          v2,
                          n[e2 + 2],
                          9,
                          -51403784
                        ),
                        l2,
                        g2,
                        n[e2 + 7],
                        14,
                        1735328473
                      ),
                      m2,
                      l2,
                      n[e2 + 12],
                      20,
                      -1926607734
                    ),
                    v2 = c(
                      v2,
                      m2 = c(
                        m2,
                        l2 = c(l2, g2, v2, m2, n[e2 + 5], 4, -378558),
                        g2,
                        v2,
                        n[e2 + 8],
                        11,
                        -2022574463
                      ),
                      l2,
                      g2,
                      n[e2 + 11],
                      16,
                      1839030562
                    ),
                    m2,
                    l2,
                    n[e2 + 14],
                    23,
                    -35309556
                  ),
                  v2 = c(
                    v2,
                    m2 = c(
                      m2,
                      l2 = c(l2, g2, v2, m2, n[e2 + 1], 4, -1530992060),
                      g2,
                      v2,
                      n[e2 + 4],
                      11,
                      1272893353
                    ),
                    l2,
                    g2,
                    n[e2 + 7],
                    16,
                    -155497632
                  ),
                  m2,
                  l2,
                  n[e2 + 10],
                  23,
                  -1094730640
                ),
                v2 = c(
                  v2,
                  m2 = c(
                    m2,
                    l2 = c(l2, g2, v2, m2, n[e2 + 13], 4, 681279174),
                    g2,
                    v2,
                    n[e2],
                    11,
                    -358537222
                  ),
                  l2,
                  g2,
                  n[e2 + 3],
                  16,
                  -722521979
                ),
                m2,
                l2,
                n[e2 + 6],
                23,
                76029189
              ),
              v2 = c(
                v2,
                m2 = c(
                  m2,
                  l2 = c(l2, g2, v2, m2, n[e2 + 9], 4, -640364487),
                  g2,
                  v2,
                  n[e2 + 12],
                  11,
                  -421815835
                ),
                l2,
                g2,
                n[e2 + 15],
                16,
                530742520
              ),
              m2,
              l2,
              n[e2 + 2],
              23,
              -995338651
            ),
            v2 = f(
              v2,
              m2 = f(
                m2,
                l2 = f(l2, g2, v2, m2, n[e2], 6, -198630844),
                g2,
                v2,
                n[e2 + 7],
                10,
                1126891415
              ),
              l2,
              g2,
              n[e2 + 14],
              15,
              -1416354905
            ),
            m2,
            l2,
            n[e2 + 5],
            21,
            -57434055
          ),
          v2 = f(
            v2,
            m2 = f(
              m2,
              l2 = f(l2, g2, v2, m2, n[e2 + 12], 6, 1700485571),
              g2,
              v2,
              n[e2 + 3],
              10,
              -1894986606
            ),
            l2,
            g2,
            n[e2 + 10],
            15,
            -1051523
          ),
          m2,
          l2,
          n[e2 + 1],
          21,
          -2054922799
        ),
        v2 = f(
          v2,
          m2 = f(
            m2,
            l2 = f(l2, g2, v2, m2, n[e2 + 8], 6, 1873313359),
            g2,
            v2,
            n[e2 + 15],
            10,
            -30611744
          ),
          l2,
          g2,
          n[e2 + 6],
          15,
          -1560198380
        ),
        m2,
        l2,
        n[e2 + 13],
        21,
        1309151649
      ),
      v2 = f(
        v2,
        m2 = f(
          m2,
          l2 = f(l2, g2, v2, m2, n[e2 + 4], 6, -145523070),
          g2,
          v2,
          n[e2 + 11],
          10,
          -1120210379
        ),
        l2,
        g2,
        n[e2 + 2],
        15,
        718787259
      ),
      m2,
      l2,
      n[e2 + 9],
      21,
      -343485551
    ), l2 = t(l2, i2), g2 = t(g2, a2), v2 = t(v2, d2), m2 = t(m2, h2);
  }
  return [l2, g2, v2, m2];
}
function a(n) {
  let t2;
  let r2 = "";
  const e2 = 32 * n.length;
  for (t2 = 0; t2 < e2; t2 += 8)
    r2 += String.fromCharCode(n[t2 >> 5] >>> t2 % 32 & 255);
  return r2;
}
function d(n) {
  let t2;
  const r2 = [];
  for (r2[(n.length >> 2) - 1] = void 0, t2 = 0; t2 < r2.length; t2 += 1)
    r2[t2] = 0;
  const e2 = 8 * n.length;
  for (t2 = 0; t2 < e2; t2 += 8)
    r2[t2 >> 5] |= (255 & n.charCodeAt(t2 / 8)) << t2 % 32;
  return r2;
}
function h(n) {
  return a(i(d(n), 8 * n.length));
}
function l(n, t2) {
  let r2;
  let e2;
  let o2 = d(n);
  const u2 = [];
  const c2 = [];
  for (u2[15] = c2[15] = void 0, o2.length > 16 && (o2 = i(o2, 8 * n.length)), r2 = 0; r2 < 16; r2 += 1)
    u2[r2] = 909522486 ^ o2[r2], c2[r2] = 1549556828 ^ o2[r2];
  return e2 = i(u2.concat(d(t2)), 512 + 8 * t2.length), a(i(c2.concat(e2), 640));
}
function g(n) {
  let t2;
  let r2;
  let e2 = "";
  for (r2 = 0; r2 < n.length; r2 += 1) {
    t2 = n.charCodeAt(r2), e2 += "0123456789abcdef".charAt(t2 >>> 4 & 15) + "0123456789abcdef".charAt(15 & t2);
  }
  return e2;
}
function v(n) {
  return unescape(encodeURIComponent(n));
}
function m(n) {
  return h(v(n));
}
function p(n) {
  return g(m(n));
}
function s(n, t2) {
  return l(v(n), v(t2));
}
function C(n, t2) {
  return g(s(n, t2));
}
function A(n, t2, r2) {
  return t2 ? r2 ? s(t2, n) : C(t2, n) : r2 ? m(n) : p(n);
}
function generateSignParams(params = {}) {
  const authkey = "c3a39e4eeacf4542d6a488e19037fa45";
  params = Object.assign({}, params, {
    timestamp: Math.floor(Date.now() / 1e3),
    platform: "web"
  });
  const strForSign = serialize(params);
  const sign = A(strForSign + authkey);
  return {
    sign,
    method: "md5",
    ...params
  };
}
function generateIbosSignParams() {
  const authkey = "c3a39e4eeacf4542d6a488e19037fa45";
  const platform2 = "web";
  const createtime = Math.floor(Date.now() / 1e3);
  const token = A(authkey + createtime);
  return {
    token,
    platform: platform2,
    createtime
  };
}
var ResponseCode = /* @__PURE__ */ ((ResponseCode2) => {
  ResponseCode2[ResponseCode2["SUCCESS"] = 0] = "SUCCESS";
  ResponseCode2[ResponseCode2["PARAM_ERROR"] = 1] = "PARAM_ERROR";
  ResponseCode2[ResponseCode2["DATABASE_ERROR"] = 2] = "DATABASE_ERROR";
  ResponseCode2[ResponseCode2["NETWORK_ERROR"] = 3] = "NETWORK_ERROR";
  ResponseCode2[ResponseCode2["SYSTEM_ERROR"] = 4] = "SYSTEM_ERROR";
  ResponseCode2[ResponseCode2["AUTH_ERROR"] = 5] = "AUTH_ERROR";
  ResponseCode2[ResponseCode2["NOT_FOUND_ERROR"] = 6] = "NOT_FOUND_ERROR";
  ResponseCode2[ResponseCode2["UNAUTHORIZED_ERROR"] = 7] = "UNAUTHORIZED_ERROR";
  ResponseCode2[ResponseCode2["FILE_ERROR"] = 8] = "FILE_ERROR";
  ResponseCode2[ResponseCode2["FORBIDDEN_ERROR"] = 9] = "FORBIDDEN_ERROR";
  ResponseCode2[ResponseCode2["AGENT_ERROR"] = 10] = "AGENT_ERROR";
  ResponseCode2[ResponseCode2["TOKEN_EXPIRED_ERROR"] = 11] = "TOKEN_EXPIRED_ERROR";
  ResponseCode2[ResponseCode2["VERIFICATION_CODE_ERROR"] = -14] = "VERIFICATION_CODE_ERROR";
  return ResponseCode2;
})(ResponseCode || {});
var ReseponseMessage = /* @__PURE__ */ ((ReseponseMessage2) => {
  ReseponseMessage2["Canceled"] = "canceled";
  return ReseponseMessage2;
})(ReseponseMessage || {});
const RESPONSE_CODE_MESSAGE_MAP = /* @__PURE__ */ new Map([
  [0, "response_code.success"],
  [1, "response_code.param_error"],
  [2, "response_code.database_error"],
  [3, "response_code.network_error"],
  [4, "response_code.system_error"],
  [5, "response_code.auth_error"],
  [6, "response_code.not_found_error"],
  [7, "response_code.unauthorized_error"],
  [8, "response_code.file_error"],
  [9, "response_code.forbidden_error"],
  [10, "response_code.agent_error"],
  [11, "response_code.token_expired_error"],
  [-14, "response_code.verification_code_error"]
]);
const ERROR_MESSAGES = /* @__PURE__ */ new Map([
  [400, "response_status.400"],
  [401, "response_status.401"],
  [403, "response_status.403"],
  [404, "response_status.404"],
  [503, "response_status.500"],
  [502, "response_status.502"],
  [500, "response_status.503"],
  [504, "response_status.504"]
]);
const RESPONSE_MESSAGE_MAP = /* @__PURE__ */ new Map([
  // ['unauthorized: user not found', 'response_message.user_not_found'],
  ["unauthorized: user not found", "not_tip"],
  ["unauthorized: record not found", "not_tip"],
  ["param error: username already exists", "response_message.username_already_exists"],
  ["Invalid or expired verification code", "response_message.username_or_password_is_incorrect"],
  ["unauthorized: username or password is incorrect", "response_message.username_or_password_is_incorrect"]
]);
const service = axios.create({
  baseURL: window.api_host
});
service.interceptors.request.use(
  (config) => {
    config.params = config.params || {};
    const access_token = config.params.access_token || localStorage.getItem("access_token") || "";
    if (access_token)
      config.headers.set("Authorization", access_token);
    if (config.ibos_sign) {
      const { token, platform: platform2, createtime } = generateIbosSignParams();
      config.headers.set("token", token);
      config.headers.set("platform", platform2);
      config.headers.set("createtime", createtime);
    }
    if (config.sign) {
      config.params = generateSignParams(config.params);
    }
    return config;
  },
  (error) => {
    return Promise.reject(error.response);
  }
);
service.interceptors.response.use(
  (response) => {
    const data = response.data || {};
    if ([ResponseCode.FORBIDDEN_ERROR].includes(Number(data.code))) {
      return Promise.reject(data);
    }
    if ([200, 201, 204].includes(response.status))
      return response.data;
    throw new Error(response.status.toString());
  },
  (error) => {
    return Promise.reject(error);
  }
);
function handleError(error) {
  if (error.message === ReseponseMessage.Canceled) {
    return Promise.reject(error);
  }
  const response = error.response || {};
  const data = response.data || error || {};
  const status = response.status || 500;
  const code = data.code;
  let message2 = data.message;
  const messageMatch = RESPONSE_MESSAGE_MAP.get(message2 || "");
  if (messageMatch) {
    if (messageMatch === "not_tip") {
      message2 = "";
    } else {
      message2 = window.$t(messageMatch);
    }
  } else {
    message2 = (code !== void 0 && RESPONSE_CODE_MESSAGE_MAP.get(code) ? window.$t(RESPONSE_CODE_MESSAGE_MAP.get(code)) : "") || ERROR_MESSAGES.get[status] || error.message || window.$t("response_message.unknown_error");
  }
  if (message2) {
    ElMessage.error(message2);
  }
  if (code === ResponseCode.TOKEN_EXPIRED_ERROR) {
    localStorage.removeItem("access_token");
    location.reload(true);
  }
  return Promise.reject(error);
}
const WEEK_TEXT_LIST = [
  "星期日",
  "星期一",
  "星期二",
  "星期三",
  "星期四",
  "星期五",
  "星期六"
];
const getSimpleDateFormatString = ({
  date: date4,
  format: format2 = "YYYY-MM-DD hh:mm:ss",
  fillZero = true
} = { date: /* @__PURE__ */ new Date() }) => {
  if (!date4)
    date4 = /* @__PURE__ */ new Date();
  if (typeof date4 === "string")
    date4 = date4.replace(/-/gm, "/");
  date4 = new Date(date4);
  const [year, month, day, hour, minute, second, week] = [
    `${date4.getFullYear()}`,
    `${date4.getMonth() + 1}`,
    `${date4.getDate()}`,
    `${date4.getHours()}`,
    `${date4.getMinutes()}`,
    `${date4.getSeconds()}`,
    date4.getDay()
  ];
  return format2.replace("YYYY", year).replace("YY", year.substring(2)).replace("MM", month.length === 1 && fillZero ? `0${month}` : month).replace("DD", day.length === 1 && fillZero ? `0${day}` : day).replace("hh", hour.length === 1 && fillZero ? `0${hour}` : hour).replace("mm", minute.length === 1 && fillZero ? `0${minute}` : minute).replace("ss", second.length === 1 && fillZero ? `0${second}` : second).replace("week", WEEK_TEXT_LIST[week] || "");
};
const PAYMENT_TYPE_WECHAT = 1;
const PAYMENT_TYPE_MANUAL = 2;
const PAYMENT_TYPE_PAYPAL = 3;
const PAYMENT_TYPE_LABEL_MAP = {
  [PAYMENT_TYPE_WECHAT]: "wechat_pay",
  [PAYMENT_TYPE_MANUAL]: "manual_pay",
  [PAYMENT_TYPE_PAYPAL]: "paypal"
};
const settingApi = {
  group: {
    get(group_name) {
      return service.get(`/api/settings/group/${group_name}`).catch(handleError);
    }
  },
  payment: {
    async get() {
      const { data: { pay_settings = [] } = {} } = await service.get("/api/pay_settings").catch(handleError);
      return pay_settings.map((item = {}) => {
        item.pay_setting_id = +item.pay_setting_id || 0;
        item.pay_type = +item.pay_type || 0;
        item.pay_label = PAYMENT_TYPE_LABEL_MAP[item.pay_type];
        item.pay_status = !!+item.pay_status;
        item.pay_config = item.pay_config || "{}";
        item.pay_config = typeof item.pay_config === "string" ? JSON.parse(item.pay_config) : item.pay_config;
        item.extra_config = item.extra_config || "{}";
        item.extra_config = typeof item.extra_config === "string" ? JSON.parse(item.extra_config) : item.extra_config;
        item.created_time = +item.created_time || 0;
        if (item.created_time)
          item.created_time = getSimpleDateFormatString({ date: item.created_time });
        item.updated_time = +item.updated_time || 0;
        if (item.updated_time)
          item.updated_time = getSimpleDateFormatString({ date: item.updated_time });
        return item;
      });
    }
  }
};
const _sfc_main$2 = /* @__PURE__ */ defineComponent({
  __name: "App",
  setup(__props) {
    const insertStyle = (content) => {
      if (!content)
        return;
      const trimmed = content.trim();
      const type4 = "style";
      const tag = `<${type4}`;
      try {
        if (trimmed.toLowerCase().startsWith(tag)) {
          document.head.insertAdjacentHTML("beforeend", trimmed);
        } else {
          const element = document.createElement(type4);
          element.innerHTML = trimmed;
          document.head.appendChild(element);
        }
      } catch (error) {
        console.error(`Failed to insert ${type4} content:`, error);
      }
    };
    const insertScript = (content) => {
      if (!content)
        return;
      const trimmed = content.trim();
      const node = document.createElement("div");
      node.innerHTML = trimmed;
      const scripts = node.querySelectorAll("script");
      if (scripts.length) {
        scripts.forEach((script) => {
          const newScript = document.createElement("script");
          if (script.src) {
            newScript.src = script.src;
          } else {
            newScript.type = "text/javascript";
            newScript.appendChild(document.createTextNode(script.innerHTML));
          }
          document.body.appendChild(newScript);
        });
      } else {
        const newScript = document.createElement("script");
        newScript.type = "text/javascript";
        newScript.appendChild(document.createTextNode(content));
        document.body.appendChild(newScript);
      }
    };
    onMounted(() => {
      settingApi.group.get("third_party_statistic").then((res) => {
        const items = {
          style: res.data.find((item) => item.key === "third_party_statistic_css")?.value || "",
          script: res.data.find((item) => item.key === "third_party_statistic_header")?.value || ""
        };
        insertStyle(items.style);
        insertScript(items.script);
      }).catch((error) => {
        console.error("Failed to fetch third party statistic settings:", error);
      });
    });
    return (_ctx, _cache) => {
      const _component_RouterView = resolveComponent("RouterView");
      return openBlock(), createBlock(unref(ElConfigProvider), {
        locale: unref(zhCn),
        input: { spellcheck: false }
      }, {
        default: withCtx(() => [
          createVNode(_component_RouterView)
        ]),
        _: 1
      }, 8, ["locale"]);
    };
  }
});
/*!
  * shared v11.1.5
  * (c) 2025 kazuya kawaguchi
  * Released under the MIT License.
  */
const inBrowser = typeof window !== "undefined";
const makeSymbol = (name, shareable = false) => !shareable ? Symbol(name) : Symbol.for(name);
const generateFormatCacheKey = (locale, key, source) => friendlyJSONstringify({ l: locale, k: key, s: source });
const friendlyJSONstringify = (json) => JSON.stringify(json).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029").replace(/\u0027/g, "\\u0027");
const isNumber = (val) => typeof val === "number" && isFinite(val);
const isDate = (val) => toTypeString(val) === "[object Date]";
const isRegExp = (val) => toTypeString(val) === "[object RegExp]";
const isEmptyObject = (val) => isPlainObject(val) && Object.keys(val).length === 0;
const assign$1 = Object.assign;
const _create = Object.create;
const create = (obj = null) => _create(obj);
let _globalThis;
const getGlobalThis = () => {
  return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : create());
};
function escapeHtml(rawText) {
  return rawText.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;");
}
const hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}
const isArray$1 = Array.isArray;
const isFunction = (val) => typeof val === "function";
const isString = (val) => typeof val === "string";
const isBoolean = (val) => typeof val === "boolean";
const isObject = (val) => val !== null && typeof val === "object";
const isPromise = (val) => {
  return isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value) => objectToString.call(value);
const isPlainObject = (val) => toTypeString(val) === "[object Object]";
const toDisplayString = (val) => {
  return val == null ? "" : isArray$1(val) || isPlainObject(val) && val.toString === objectToString ? JSON.stringify(val, null, 2) : String(val);
};
function join(items, separator = "") {
  return items.reduce((str, item, index) => index === 0 ? str + item : str + separator + item, "");
}
function warn(msg, err) {
  if (typeof console !== "undefined") {
    console.warn(`[intlify] ` + msg);
    if (err) {
      console.warn(err.stack);
    }
  }
}
const isNotObjectOrIsArray = (val) => !isObject(val) || isArray$1(val);
function deepCopy(src, des) {
  if (isNotObjectOrIsArray(src) || isNotObjectOrIsArray(des)) {
    throw new Error("Invalid value");
  }
  const stack2 = [{ src, des }];
  while (stack2.length) {
    const { src: src2, des: des2 } = stack2.pop();
    Object.keys(src2).forEach((key) => {
      if (key === "__proto__") {
        return;
      }
      if (isObject(src2[key]) && !isObject(des2[key])) {
        des2[key] = Array.isArray(src2[key]) ? [] : create();
      }
      if (isNotObjectOrIsArray(des2[key]) || isNotObjectOrIsArray(src2[key])) {
        des2[key] = src2[key];
      } else {
        stack2.push({ src: src2[key], des: des2[key] });
      }
    });
  }
}
/*!
  * message-compiler v11.1.5
  * (c) 2025 kazuya kawaguchi
  * Released under the MIT License.
  */
function createPosition(line, column, offset) {
  return { line, column, offset };
}
function createLocation(start, end, source) {
  const loc = { start, end };
  if (source != null) {
    loc.source = source;
  }
  return loc;
}
const CompileErrorCodes = {
  // tokenizer error codes
  EXPECTED_TOKEN: 1,
  INVALID_TOKEN_IN_PLACEHOLDER: 2,
  UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER: 3,
  UNKNOWN_ESCAPE_SEQUENCE: 4,
  INVALID_UNICODE_ESCAPE_SEQUENCE: 5,
  UNBALANCED_CLOSING_BRACE: 6,
  UNTERMINATED_CLOSING_BRACE: 7,
  EMPTY_PLACEHOLDER: 8,
  NOT_ALLOW_NEST_PLACEHOLDER: 9,
  INVALID_LINKED_FORMAT: 10,
  // parser error codes
  MUST_HAVE_MESSAGES_IN_PLURAL: 11,
  UNEXPECTED_EMPTY_LINKED_MODIFIER: 12,
  UNEXPECTED_EMPTY_LINKED_KEY: 13,
  UNEXPECTED_LEXICAL_ANALYSIS: 14,
  // generator error codes
  UNHANDLED_CODEGEN_NODE_TYPE: 15,
  // minifier error codes
  UNHANDLED_MINIFIER_NODE_TYPE: 16
};
const COMPILE_ERROR_CODES_EXTEND_POINT = 17;
function createCompileError(code, loc, options = {}) {
  const { domain, messages: messages2, args } = options;
  const msg = code;
  const error = new SyntaxError(String(msg));
  error.code = code;
  if (loc) {
    error.location = loc;
  }
  error.domain = domain;
  return error;
}
function defaultOnError(error) {
  throw error;
}
const CHAR_SP = " ";
const CHAR_CR = "\r";
const CHAR_LF = "\n";
const CHAR_LS = String.fromCharCode(8232);
const CHAR_PS = String.fromCharCode(8233);
function createScanner(str) {
  const _buf = str;
  let _index = 0;
  let _line = 1;
  let _column = 1;
  let _peekOffset = 0;
  const isCRLF = (index2) => _buf[index2] === CHAR_CR && _buf[index2 + 1] === CHAR_LF;
  const isLF = (index2) => _buf[index2] === CHAR_LF;
  const isPS = (index2) => _buf[index2] === CHAR_PS;
  const isLS = (index2) => _buf[index2] === CHAR_LS;
  const isLineEnd = (index2) => isCRLF(index2) || isLF(index2) || isPS(index2) || isLS(index2);
  const index = () => _index;
  const line = () => _line;
  const column = () => _column;
  const peekOffset = () => _peekOffset;
  const charAt = (offset) => isCRLF(offset) || isPS(offset) || isLS(offset) ? CHAR_LF : _buf[offset];
  const currentChar = () => charAt(_index);
  const currentPeek = () => charAt(_index + _peekOffset);
  function next() {
    _peekOffset = 0;
    if (isLineEnd(_index)) {
      _line++;
      _column = 0;
    }
    if (isCRLF(_index)) {
      _index++;
    }
    _index++;
    _column++;
    return _buf[_index];
  }
  function peek() {
    if (isCRLF(_index + _peekOffset)) {
      _peekOffset++;
    }
    _peekOffset++;
    return _buf[_index + _peekOffset];
  }
  function reset() {
    _index = 0;
    _line = 1;
    _column = 1;
    _peekOffset = 0;
  }
  function resetPeek(offset = 0) {
    _peekOffset = offset;
  }
  function skipToPeek() {
    const target = _index + _peekOffset;
    while (target !== _index) {
      next();
    }
    _peekOffset = 0;
  }
  return {
    index,
    line,
    column,
    peekOffset,
    charAt,
    currentChar,
    currentPeek,
    next,
    peek,
    reset,
    resetPeek,
    skipToPeek
  };
}
const EOF = void 0;
const DOT = ".";
const LITERAL_DELIMITER = "'";
const ERROR_DOMAIN$3 = "tokenizer";
function createTokenizer(source, options = {}) {
  const location2 = options.location !== false;
  const _scnr = createScanner(source);
  const currentOffset = () => _scnr.index();
  const currentPosition = () => createPosition(_scnr.line(), _scnr.column(), _scnr.index());
  const _initLoc = currentPosition();
  const _initOffset = currentOffset();
  const _context = {
    currentType: 13,
    offset: _initOffset,
    startLoc: _initLoc,
    endLoc: _initLoc,
    lastType: 13,
    lastOffset: _initOffset,
    lastStartLoc: _initLoc,
    lastEndLoc: _initLoc,
    braceNest: 0,
    inLinked: false,
    text: ""
  };
  const context = () => _context;
  const { onError } = options;
  function emitError(code, pos, offset, ...args) {
    const ctx = context();
    pos.column += offset;
    pos.offset += offset;
    if (onError) {
      const loc = location2 ? createLocation(ctx.startLoc, pos) : null;
      const err = createCompileError(code, loc, {
        domain: ERROR_DOMAIN$3,
        args
      });
      onError(err);
    }
  }
  function getToken(context2, type4, value) {
    context2.endLoc = currentPosition();
    context2.currentType = type4;
    const token = { type: type4 };
    if (location2) {
      token.loc = createLocation(context2.startLoc, context2.endLoc);
    }
    if (value != null) {
      token.value = value;
    }
    return token;
  }
  const getEndToken = (context2) => getToken(
    context2,
    13
    /* TokenTypes.EOF */
  );
  function eat(scnr, ch2) {
    if (scnr.currentChar() === ch2) {
      scnr.next();
      return ch2;
    } else {
      emitError(CompileErrorCodes.EXPECTED_TOKEN, currentPosition(), 0, ch2);
      return "";
    }
  }
  function peekSpaces(scnr) {
    let buf = "";
    while (scnr.currentPeek() === CHAR_SP || scnr.currentPeek() === CHAR_LF) {
      buf += scnr.currentPeek();
      scnr.peek();
    }
    return buf;
  }
  function skipSpaces(scnr) {
    const buf = peekSpaces(scnr);
    scnr.skipToPeek();
    return buf;
  }
  function isIdentifierStart(ch2) {
    if (ch2 === EOF) {
      return false;
    }
    const cc2 = ch2.charCodeAt(0);
    return cc2 >= 97 && cc2 <= 122 || // a-z
    cc2 >= 65 && cc2 <= 90 || // A-Z
    cc2 === 95;
  }
  function isNumberStart(ch2) {
    if (ch2 === EOF) {
      return false;
    }
    const cc2 = ch2.charCodeAt(0);
    return cc2 >= 48 && cc2 <= 57;
  }
  function isNamedIdentifierStart(scnr, context2) {
    const { currentType } = context2;
    if (currentType !== 2) {
      return false;
    }
    peekSpaces(scnr);
    const ret = isIdentifierStart(scnr.currentPeek());
    scnr.resetPeek();
    return ret;
  }
  function isListIdentifierStart(scnr, context2) {
    const { currentType } = context2;
    if (currentType !== 2) {
      return false;
    }
    peekSpaces(scnr);
    const ch2 = scnr.currentPeek() === "-" ? scnr.peek() : scnr.currentPeek();
    const ret = isNumberStart(ch2);
    scnr.resetPeek();
    return ret;
  }
  function isLiteralStart(scnr, context2) {
    const { currentType } = context2;
    if (currentType !== 2) {
      return false;
    }
    peekSpaces(scnr);
    const ret = scnr.currentPeek() === LITERAL_DELIMITER;
    scnr.resetPeek();
    return ret;
  }
  function isLinkedDotStart(scnr, context2) {
    const { currentType } = context2;
    if (currentType !== 7) {
      return false;
    }
    peekSpaces(scnr);
    const ret = scnr.currentPeek() === ".";
    scnr.resetPeek();
    return ret;
  }
  function isLinkedModifierStart(scnr, context2) {
    const { currentType } = context2;
    if (currentType !== 8) {
      return false;
    }
    peekSpaces(scnr);
    const ret = isIdentifierStart(scnr.currentPeek());
    scnr.resetPeek();
    return ret;
  }
  function isLinkedDelimiterStart(scnr, context2) {
    const { currentType } = context2;
    if (!(currentType === 7 || currentType === 11)) {
      return false;
    }
    peekSpaces(scnr);
    const ret = scnr.currentPeek() === ":";
    scnr.resetPeek();
    return ret;
  }
  function isLinkedReferStart(scnr, context2) {
    const { currentType } = context2;
    if (currentType !== 9) {
      return false;
    }
    const fn2 = () => {
      const ch2 = scnr.currentPeek();
      if (ch2 === "{") {
        return isIdentifierStart(scnr.peek());
      } else if (ch2 === "@" || ch2 === "|" || ch2 === ":" || ch2 === "." || ch2 === CHAR_SP || !ch2) {
        return false;
      } else if (ch2 === CHAR_LF) {
        scnr.peek();
        return fn2();
      } else {
        return isTextStart(scnr, false);
      }
    };
    const ret = fn2();
    scnr.resetPeek();
    return ret;
  }
  function isPluralStart(scnr) {
    peekSpaces(scnr);
    const ret = scnr.currentPeek() === "|";
    scnr.resetPeek();
    return ret;
  }
  function isTextStart(scnr, reset = true) {
    const fn2 = (hasSpace = false, prev = "") => {
      const ch2 = scnr.currentPeek();
      if (ch2 === "{") {
        return hasSpace;
      } else if (ch2 === "@" || !ch2) {
        return hasSpace;
      } else if (ch2 === "|") {
        return !(prev === CHAR_SP || prev === CHAR_LF);
      } else if (ch2 === CHAR_SP) {
        scnr.peek();
        return fn2(true, CHAR_SP);
      } else if (ch2 === CHAR_LF) {
        scnr.peek();
        return fn2(true, CHAR_LF);
      } else {
        return true;
      }
    };
    const ret = fn2();
    reset && scnr.resetPeek();
    return ret;
  }
  function takeChar(scnr, fn2) {
    const ch2 = scnr.currentChar();
    if (ch2 === EOF) {
      return EOF;
    }
    if (fn2(ch2)) {
      scnr.next();
      return ch2;
    }
    return null;
  }
  function isIdentifier(ch2) {
    const cc2 = ch2.charCodeAt(0);
    return cc2 >= 97 && cc2 <= 122 || // a-z
    cc2 >= 65 && cc2 <= 90 || // A-Z
    cc2 >= 48 && cc2 <= 57 || // 0-9
    cc2 === 95 || // _
    cc2 === 36;
  }
  function takeIdentifierChar(scnr) {
    return takeChar(scnr, isIdentifier);
  }
  function isNamedIdentifier(ch2) {
    const cc2 = ch2.charCodeAt(0);
    return cc2 >= 97 && cc2 <= 122 || // a-z
    cc2 >= 65 && cc2 <= 90 || // A-Z
    cc2 >= 48 && cc2 <= 57 || // 0-9
    cc2 === 95 || // _
    cc2 === 36 || // $
    cc2 === 45;
  }
  function takeNamedIdentifierChar(scnr) {
    return takeChar(scnr, isNamedIdentifier);
  }
  function isDigit(ch2) {
    const cc2 = ch2.charCodeAt(0);
    return cc2 >= 48 && cc2 <= 57;
  }
  function takeDigit(scnr) {
    return takeChar(scnr, isDigit);
  }
  function isHexDigit(ch2) {
    const cc2 = ch2.charCodeAt(0);
    return cc2 >= 48 && cc2 <= 57 || // 0-9
    cc2 >= 65 && cc2 <= 70 || // A-F
    cc2 >= 97 && cc2 <= 102;
  }
  function takeHexDigit(scnr) {
    return takeChar(scnr, isHexDigit);
  }
  function getDigits(scnr) {
    let ch2 = "";
    let num = "";
    while (ch2 = takeDigit(scnr)) {
      num += ch2;
    }
    return num;
  }
  function readText(scnr) {
    let buf = "";
    while (true) {
      const ch2 = scnr.currentChar();
      if (ch2 === "{" || ch2 === "}" || ch2 === "@" || ch2 === "|" || !ch2) {
        break;
      } else if (ch2 === CHAR_SP || ch2 === CHAR_LF) {
        if (isTextStart(scnr)) {
          buf += ch2;
          scnr.next();
        } else if (isPluralStart(scnr)) {
          break;
        } else {
          buf += ch2;
          scnr.next();
        }
      } else {
        buf += ch2;
        scnr.next();
      }
    }
    return buf;
  }
  function readNamedIdentifier(scnr) {
    skipSpaces(scnr);
    let ch2 = "";
    let name = "";
    while (ch2 = takeNamedIdentifierChar(scnr)) {
      name += ch2;
    }
    if (scnr.currentChar() === EOF) {
      emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);
    }
    return name;
  }
  function readListIdentifier(scnr) {
    skipSpaces(scnr);
    let value = "";
    if (scnr.currentChar() === "-") {
      scnr.next();
      value += `-${getDigits(scnr)}`;
    } else {
      value += getDigits(scnr);
    }
    if (scnr.currentChar() === EOF) {
      emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);
    }
    return value;
  }
  function isLiteral2(ch2) {
    return ch2 !== LITERAL_DELIMITER && ch2 !== CHAR_LF;
  }
  function readLiteral(scnr) {
    skipSpaces(scnr);
    eat(scnr, `'`);
    let ch2 = "";
    let literal = "";
    while (ch2 = takeChar(scnr, isLiteral2)) {
      if (ch2 === "\\") {
        literal += readEscapeSequence(scnr);
      } else {
        literal += ch2;
      }
    }
    const current = scnr.currentChar();
    if (current === CHAR_LF || current === EOF) {
      emitError(CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER, currentPosition(), 0);
      if (current === CHAR_LF) {
        scnr.next();
        eat(scnr, `'`);
      }
      return literal;
    }
    eat(scnr, `'`);
    return literal;
  }
  function readEscapeSequence(scnr) {
    const ch2 = scnr.currentChar();
    switch (ch2) {
      case "\\":
      case `'`:
        scnr.next();
        return `\\${ch2}`;
      case "u":
        return readUnicodeEscapeSequence(scnr, ch2, 4);
      case "U":
        return readUnicodeEscapeSequence(scnr, ch2, 6);
      default:
        emitError(CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE, currentPosition(), 0, ch2);
        return "";
    }
  }
  function readUnicodeEscapeSequence(scnr, unicode, digits) {
    eat(scnr, unicode);
    let sequence = "";
    for (let i2 = 0; i2 < digits; i2++) {
      const ch2 = takeHexDigit(scnr);
      if (!ch2) {
        emitError(CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE, currentPosition(), 0, `\\${unicode}${sequence}${scnr.currentChar()}`);
        break;
      }
      sequence += ch2;
    }
    return `\\${unicode}${sequence}`;
  }
  function isInvalidIdentifier(ch2) {
    return ch2 !== "{" && ch2 !== "}" && ch2 !== CHAR_SP && ch2 !== CHAR_LF;
  }
  function readInvalidIdentifier(scnr) {
    skipSpaces(scnr);
    let ch2 = "";
    let identifiers = "";
    while (ch2 = takeChar(scnr, isInvalidIdentifier)) {
      identifiers += ch2;
    }
    return identifiers;
  }
  function readLinkedModifier(scnr) {
    let ch2 = "";
    let name = "";
    while (ch2 = takeIdentifierChar(scnr)) {
      name += ch2;
    }
    return name;
  }
  function readLinkedRefer(scnr) {
    const fn2 = (buf) => {
      const ch2 = scnr.currentChar();
      if (ch2 === "{" || ch2 === "@" || ch2 === "|" || ch2 === "(" || ch2 === ")" || !ch2) {
        return buf;
      } else if (ch2 === CHAR_SP) {
        return buf;
      } else if (ch2 === CHAR_LF || ch2 === DOT) {
        buf += ch2;
        scnr.next();
        return fn2(buf);
      } else {
        buf += ch2;
        scnr.next();
        return fn2(buf);
      }
    };
    return fn2("");
  }
  function readPlural(scnr) {
    skipSpaces(scnr);
    const plural = eat(
      scnr,
      "|"
      /* TokenChars.Pipe */
    );
    skipSpaces(scnr);
    return plural;
  }
  function readTokenInPlaceholder(scnr, context2) {
    let token = null;
    const ch2 = scnr.currentChar();
    switch (ch2) {
      case "{":
        if (context2.braceNest >= 1) {
          emitError(CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER, currentPosition(), 0);
        }
        scnr.next();
        token = getToken(
          context2,
          2,
          "{"
          /* TokenChars.BraceLeft */
        );
        skipSpaces(scnr);
        context2.braceNest++;
        return token;
      case "}":
        if (context2.braceNest > 0 && context2.currentType === 2) {
          emitError(CompileErrorCodes.EMPTY_PLACEHOLDER, currentPosition(), 0);
        }
        scnr.next();
        token = getToken(
          context2,
          3,
          "}"
          /* TokenChars.BraceRight */
        );
        context2.braceNest--;
        context2.braceNest > 0 && skipSpaces(scnr);
        if (context2.inLinked && context2.braceNest === 0) {
          context2.inLinked = false;
        }
        return token;
      case "@":
        if (context2.braceNest > 0) {
          emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);
        }
        token = readTokenInLinked(scnr, context2) || getEndToken(context2);
        context2.braceNest = 0;
        return token;
      default: {
        let validNamedIdentifier = true;
        let validListIdentifier = true;
        let validLiteral = true;
        if (isPluralStart(scnr)) {
          if (context2.braceNest > 0) {
            emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);
          }
          token = getToken(context2, 1, readPlural(scnr));
          context2.braceNest = 0;
          context2.inLinked = false;
          return token;
        }
        if (context2.braceNest > 0 && (context2.currentType === 4 || context2.currentType === 5 || context2.currentType === 6)) {
          emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);
          context2.braceNest = 0;
          return readToken(scnr, context2);
        }
        if (validNamedIdentifier = isNamedIdentifierStart(scnr, context2)) {
          token = getToken(context2, 4, readNamedIdentifier(scnr));
          skipSpaces(scnr);
          return token;
        }
        if (validListIdentifier = isListIdentifierStart(scnr, context2)) {
          token = getToken(context2, 5, readListIdentifier(scnr));
          skipSpaces(scnr);
          return token;
        }
        if (validLiteral = isLiteralStart(scnr, context2)) {
          token = getToken(context2, 6, readLiteral(scnr));
          skipSpaces(scnr);
          return token;
        }
        if (!validNamedIdentifier && !validListIdentifier && !validLiteral) {
          token = getToken(context2, 12, readInvalidIdentifier(scnr));
          emitError(CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER, currentPosition(), 0, token.value);
          skipSpaces(scnr);
          return token;
        }
        break;
      }
    }
    return token;
  }
  function readTokenInLinked(scnr, context2) {
    const { currentType } = context2;
    let token = null;
    const ch2 = scnr.currentChar();
    if ((currentType === 7 || currentType === 8 || currentType === 11 || currentType === 9) && (ch2 === CHAR_LF || ch2 === CHAR_SP)) {
      emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);
    }
    switch (ch2) {
      case "@":
        scnr.next();
        token = getToken(
          context2,
          7,
          "@"
          /* TokenChars.LinkedAlias */
        );
        context2.inLinked = true;
        return token;
      case ".":
        skipSpaces(scnr);
        scnr.next();
        return getToken(
          context2,
          8,
          "."
          /* TokenChars.LinkedDot */
        );
      case ":":
        skipSpaces(scnr);
        scnr.next();
        return getToken(
          context2,
          9,
          ":"
          /* TokenChars.LinkedDelimiter */
        );
      default:
        if (isPluralStart(scnr)) {
          token = getToken(context2, 1, readPlural(scnr));
          context2.braceNest = 0;
          context2.inLinked = false;
          return token;
        }
        if (isLinkedDotStart(scnr, context2) || isLinkedDelimiterStart(scnr, context2)) {
          skipSpaces(scnr);
          return readTokenInLinked(scnr, context2);
        }
        if (isLinkedModifierStart(scnr, context2)) {
          skipSpaces(scnr);
          return getToken(context2, 11, readLinkedModifier(scnr));
        }
        if (isLinkedReferStart(scnr, context2)) {
          skipSpaces(scnr);
          if (ch2 === "{") {
            return readTokenInPlaceholder(scnr, context2) || token;
          } else {
            return getToken(context2, 10, readLinkedRefer(scnr));
          }
        }
        if (currentType === 7) {
          emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);
        }
        context2.braceNest = 0;
        context2.inLinked = false;
        return readToken(scnr, context2);
    }
  }
  function readToken(scnr, context2) {
    let token = {
      type: 13
      /* TokenTypes.EOF */
    };
    if (context2.braceNest > 0) {
      return readTokenInPlaceholder(scnr, context2) || getEndToken(context2);
    }
    if (context2.inLinked) {
      return readTokenInLinked(scnr, context2) || getEndToken(context2);
    }
    const ch2 = scnr.currentChar();
    switch (ch2) {
      case "{":
        return readTokenInPlaceholder(scnr, context2) || getEndToken(context2);
      case "}":
        emitError(CompileErrorCodes.UNBALANCED_CLOSING_BRACE, currentPosition(), 0);
        scnr.next();
        return getToken(
          context2,
          3,
          "}"
          /* TokenChars.BraceRight */
        );
      case "@":
        return readTokenInLinked(scnr, context2) || getEndToken(context2);
      default: {
        if (isPluralStart(scnr)) {
          token = getToken(context2, 1, readPlural(scnr));
          context2.braceNest = 0;
          context2.inLinked = false;
          return token;
        }
        if (isTextStart(scnr)) {
          return getToken(context2, 0, readText(scnr));
        }
        break;
      }
    }
    return token;
  }
  function nextToken() {
    const { currentType, offset, startLoc, endLoc } = _context;
    _context.lastType = currentType;
    _context.lastOffset = offset;
    _context.lastStartLoc = startLoc;
    _context.lastEndLoc = endLoc;
    _context.offset = currentOffset();
    _context.startLoc = currentPosition();
    if (_scnr.currentChar() === EOF) {
      return getToken(
        _context,
        13
        /* TokenTypes.EOF */
      );
    }
    return readToken(_scnr, _context);
  }
  return {
    nextToken,
    currentOffset,
    currentPosition,
    context
  };
}
const ERROR_DOMAIN$2 = "parser";
const KNOWN_ESCAPES = /(?:\\\\|\\'|\\u([0-9a-fA-F]{4})|\\U([0-9a-fA-F]{6}))/g;
function fromEscapeSequence(match, codePoint4, codePoint6) {
  switch (match) {
    case `\\\\`:
      return `\\`;
    case `\\'`:
      return `'`;
    default: {
      const codePoint = parseInt(codePoint4 || codePoint6, 16);
      if (codePoint <= 55295 || codePoint >= 57344) {
        return String.fromCodePoint(codePoint);
      }
      return "�";
    }
  }
}
function createParser(options = {}) {
  const location2 = options.location !== false;
  const { onError } = options;
  function emitError(tokenzer, code, start, offset, ...args) {
    const end = tokenzer.currentPosition();
    end.offset += offset;
    end.column += offset;
    if (onError) {
      const loc = location2 ? createLocation(start, end) : null;
      const err = createCompileError(code, loc, {
        domain: ERROR_DOMAIN$2,
        args
      });
      onError(err);
    }
  }
  function startNode(type4, offset, loc) {
    const node = { type: type4 };
    if (location2) {
      node.start = offset;
      node.end = offset;
      node.loc = { start: loc, end: loc };
    }
    return node;
  }
  function endNode(node, offset, pos, type4) {
    if (location2) {
      node.end = offset;
      if (node.loc) {
        node.loc.end = pos;
      }
    }
  }
  function parseText(tokenizer, value) {
    const context = tokenizer.context();
    const node = startNode(3, context.offset, context.startLoc);
    node.value = value;
    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
    return node;
  }
  function parseList(tokenizer, index) {
    const context = tokenizer.context();
    const { lastOffset: offset, lastStartLoc: loc } = context;
    const node = startNode(5, offset, loc);
    node.index = parseInt(index, 10);
    tokenizer.nextToken();
    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
    return node;
  }
  function parseNamed(tokenizer, key) {
    const context = tokenizer.context();
    const { lastOffset: offset, lastStartLoc: loc } = context;
    const node = startNode(4, offset, loc);
    node.key = key;
    tokenizer.nextToken();
    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
    return node;
  }
  function parseLiteral(tokenizer, value) {
    const context = tokenizer.context();
    const { lastOffset: offset, lastStartLoc: loc } = context;
    const node = startNode(9, offset, loc);
    node.value = value.replace(KNOWN_ESCAPES, fromEscapeSequence);
    tokenizer.nextToken();
    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
    return node;
  }
  function parseLinkedModifier(tokenizer) {
    const token = tokenizer.nextToken();
    const context = tokenizer.context();
    const { lastOffset: offset, lastStartLoc: loc } = context;
    const node = startNode(8, offset, loc);
    if (token.type !== 11) {
      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER, context.lastStartLoc, 0);
      node.value = "";
      endNode(node, offset, loc);
      return {
        nextConsumeToken: token,
        node
      };
    }
    if (token.value == null) {
      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));
    }
    node.value = token.value || "";
    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
    return {
      node
    };
  }
  function parseLinkedKey(tokenizer, value) {
    const context = tokenizer.context();
    const node = startNode(7, context.offset, context.startLoc);
    node.value = value;
    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
    return node;
  }
  function parseLinked(tokenizer) {
    const context = tokenizer.context();
    const linkedNode = startNode(6, context.offset, context.startLoc);
    let token = tokenizer.nextToken();
    if (token.type === 8) {
      const parsed = parseLinkedModifier(tokenizer);
      linkedNode.modifier = parsed.node;
      token = parsed.nextConsumeToken || tokenizer.nextToken();
    }
    if (token.type !== 9) {
      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));
    }
    token = tokenizer.nextToken();
    if (token.type === 2) {
      token = tokenizer.nextToken();
    }
    switch (token.type) {
      case 10:
        if (token.value == null) {
          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));
        }
        linkedNode.key = parseLinkedKey(tokenizer, token.value || "");
        break;
      case 4:
        if (token.value == null) {
          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));
        }
        linkedNode.key = parseNamed(tokenizer, token.value || "");
        break;
      case 5:
        if (token.value == null) {
          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));
        }
        linkedNode.key = parseList(tokenizer, token.value || "");
        break;
      case 6:
        if (token.value == null) {
          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));
        }
        linkedNode.key = parseLiteral(tokenizer, token.value || "");
        break;
      default: {
        emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY, context.lastStartLoc, 0);
        const nextContext = tokenizer.context();
        const emptyLinkedKeyNode = startNode(7, nextContext.offset, nextContext.startLoc);
        emptyLinkedKeyNode.value = "";
        endNode(emptyLinkedKeyNode, nextContext.offset, nextContext.startLoc);
        linkedNode.key = emptyLinkedKeyNode;
        endNode(linkedNode, nextContext.offset, nextContext.startLoc);
        return {
          nextConsumeToken: token,
          node: linkedNode
        };
      }
    }
    endNode(linkedNode, tokenizer.currentOffset(), tokenizer.currentPosition());
    return {
      node: linkedNode
    };
  }
  function parseMessage(tokenizer) {
    const context = tokenizer.context();
    const startOffset = context.currentType === 1 ? tokenizer.currentOffset() : context.offset;
    const startLoc = context.currentType === 1 ? context.endLoc : context.startLoc;
    const node = startNode(2, startOffset, startLoc);
    node.items = [];
    let nextToken = null;
    do {
      const token = nextToken || tokenizer.nextToken();
      nextToken = null;
      switch (token.type) {
        case 0:
          if (token.value == null) {
            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));
          }
          node.items.push(parseText(tokenizer, token.value || ""));
          break;
        case 5:
          if (token.value == null) {
            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));
          }
          node.items.push(parseList(tokenizer, token.value || ""));
          break;
        case 4:
          if (token.value == null) {
            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));
          }
          node.items.push(parseNamed(tokenizer, token.value || ""));
          break;
        case 6:
          if (token.value == null) {
            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));
          }
          node.items.push(parseLiteral(tokenizer, token.value || ""));
          break;
        case 7: {
          const parsed = parseLinked(tokenizer);
          node.items.push(parsed.node);
          nextToken = parsed.nextConsumeToken || null;
          break;
        }
      }
    } while (context.currentType !== 13 && context.currentType !== 1);
    const endOffset = context.currentType === 1 ? context.lastOffset : tokenizer.currentOffset();
    const endLoc = context.currentType === 1 ? context.lastEndLoc : tokenizer.currentPosition();
    endNode(node, endOffset, endLoc);
    return node;
  }
  function parsePlural(tokenizer, offset, loc, msgNode) {
    const context = tokenizer.context();
    let hasEmptyMessage = msgNode.items.length === 0;
    const node = startNode(1, offset, loc);
    node.cases = [];
    node.cases.push(msgNode);
    do {
      const msg = parseMessage(tokenizer);
      if (!hasEmptyMessage) {
        hasEmptyMessage = msg.items.length === 0;
      }
      node.cases.push(msg);
    } while (context.currentType !== 13);
    if (hasEmptyMessage) {
      emitError(tokenizer, CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL, loc, 0);
    }
    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
    return node;
  }
  function parseResource(tokenizer) {
    const context = tokenizer.context();
    const { offset, startLoc } = context;
    const msgNode = parseMessage(tokenizer);
    if (context.currentType === 13) {
      return msgNode;
    } else {
      return parsePlural(tokenizer, offset, startLoc, msgNode);
    }
  }
  function parse2(source) {
    const tokenizer = createTokenizer(source, assign$1({}, options));
    const context = tokenizer.context();
    const node = startNode(0, context.offset, context.startLoc);
    if (location2 && node.loc) {
      node.loc.source = source;
    }
    node.body = parseResource(tokenizer);
    if (options.onCacheKey) {
      node.cacheKey = options.onCacheKey(source);
    }
    if (context.currentType !== 13) {
      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, source[context.offset] || "");
    }
    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
    return node;
  }
  return { parse: parse2 };
}
function getTokenCaption(token) {
  if (token.type === 13) {
    return "EOF";
  }
  const name = (token.value || "").replace(/\r?\n/gu, "\\n");
  return name.length > 10 ? name.slice(0, 9) + "…" : name;
}
function createTransformer(ast, options = {}) {
  const _context = {
    ast,
    helpers: /* @__PURE__ */ new Set()
  };
  const context = () => _context;
  const helper = (name) => {
    _context.helpers.add(name);
    return name;
  };
  return { context, helper };
}
function traverseNodes(nodes, transformer) {
  for (let i2 = 0; i2 < nodes.length; i2++) {
    traverseNode(nodes[i2], transformer);
  }
}
function traverseNode(node, transformer) {
  switch (node.type) {
    case 1:
      traverseNodes(node.cases, transformer);
      transformer.helper(
        "plural"
        /* HelperNameMap.PLURAL */
      );
      break;
    case 2:
      traverseNodes(node.items, transformer);
      break;
    case 6: {
      const linked = node;
      traverseNode(linked.key, transformer);
      transformer.helper(
        "linked"
        /* HelperNameMap.LINKED */
      );
      transformer.helper(
        "type"
        /* HelperNameMap.TYPE */
      );
      break;
    }
    case 5:
      transformer.helper(
        "interpolate"
        /* HelperNameMap.INTERPOLATE */
      );
      transformer.helper(
        "list"
        /* HelperNameMap.LIST */
      );
      break;
    case 4:
      transformer.helper(
        "interpolate"
        /* HelperNameMap.INTERPOLATE */
      );
      transformer.helper(
        "named"
        /* HelperNameMap.NAMED */
      );
      break;
  }
}
function transform(ast, options = {}) {
  const transformer = createTransformer(ast);
  transformer.helper(
    "normalize"
    /* HelperNameMap.NORMALIZE */
  );
  ast.body && traverseNode(ast.body, transformer);
  const context = transformer.context();
  ast.helpers = Array.from(context.helpers);
}
function optimize(ast) {
  const body = ast.body;
  if (body.type === 2) {
    optimizeMessageNode(body);
  } else {
    body.cases.forEach((c2) => optimizeMessageNode(c2));
  }
  return ast;
}
function optimizeMessageNode(message2) {
  if (message2.items.length === 1) {
    const item = message2.items[0];
    if (item.type === 3 || item.type === 9) {
      message2.static = item.value;
      delete item.value;
    }
  } else {
    const values = [];
    for (let i2 = 0; i2 < message2.items.length; i2++) {
      const item = message2.items[i2];
      if (!(item.type === 3 || item.type === 9)) {
        break;
      }
      if (item.value == null) {
        break;
      }
      values.push(item.value);
    }
    if (values.length === message2.items.length) {
      message2.static = join(values);
      for (let i2 = 0; i2 < message2.items.length; i2++) {
        const item = message2.items[i2];
        if (item.type === 3 || item.type === 9) {
          delete item.value;
        }
      }
    }
  }
}
function minify(node) {
  node.t = node.type;
  switch (node.type) {
    case 0: {
      const resource = node;
      minify(resource.body);
      resource.b = resource.body;
      delete resource.body;
      break;
    }
    case 1: {
      const plural = node;
      const cases = plural.cases;
      for (let i2 = 0; i2 < cases.length; i2++) {
        minify(cases[i2]);
      }
      plural.c = cases;
      delete plural.cases;
      break;
    }
    case 2: {
      const message2 = node;
      const items = message2.items;
      for (let i2 = 0; i2 < items.length; i2++) {
        minify(items[i2]);
      }
      message2.i = items;
      delete message2.items;
      if (message2.static) {
        message2.s = message2.static;
        delete message2.static;
      }
      break;
    }
    case 3:
    case 9:
    case 8:
    case 7: {
      const valueNode = node;
      if (valueNode.value) {
        valueNode.v = valueNode.value;
        delete valueNode.value;
      }
      break;
    }
    case 6: {
      const linked = node;
      minify(linked.key);
      linked.k = linked.key;
      delete linked.key;
      if (linked.modifier) {
        minify(linked.modifier);
        linked.m = linked.modifier;
        delete linked.modifier;
      }
      break;
    }
    case 5: {
      const list = node;
      list.i = list.index;
      delete list.index;
      break;
    }
    case 4: {
      const named = node;
      named.k = named.key;
      delete named.key;
      break;
    }
  }
  delete node.type;
}
function createCodeGenerator(ast, options) {
  const { sourceMap, filename, breakLineCode, needIndent: _needIndent } = options;
  const location2 = options.location !== false;
  const _context = {
    filename,
    code: "",
    column: 1,
    line: 1,
    offset: 0,
    map: void 0,
    breakLineCode,
    needIndent: _needIndent,
    indentLevel: 0
  };
  if (location2 && ast.loc) {
    _context.source = ast.loc.source;
  }
  const context = () => _context;
  function push(code, node) {
    _context.code += code;
  }
  function _newline(n, withBreakLine = true) {
    const _breakLineCode = withBreakLine ? breakLineCode : "";
    push(_needIndent ? _breakLineCode + `  `.repeat(n) : _breakLineCode);
  }
  function indent(withNewLine = true) {
    const level = ++_context.indentLevel;
    withNewLine && _newline(level);
  }
  function deindent(withNewLine = true) {
    const level = --_context.indentLevel;
    withNewLine && _newline(level);
  }
  function newline() {
    _newline(_context.indentLevel);
  }
  const helper = (key) => `_${key}`;
  const needIndent = () => _context.needIndent;
  return {
    context,
    push,
    indent,
    deindent,
    newline,
    helper,
    needIndent
  };
}
function generateLinkedNode(generator, node) {
  const { helper } = generator;
  generator.push(`${helper(
    "linked"
    /* HelperNameMap.LINKED */
  )}(`);
  generateNode(generator, node.key);
  if (node.modifier) {
    generator.push(`, `);
    generateNode(generator, node.modifier);
    generator.push(`, _type`);
  } else {
    generator.push(`, undefined, _type`);
  }
  generator.push(`)`);
}
function generateMessageNode(generator, node) {
  const { helper, needIndent } = generator;
  generator.push(`${helper(
    "normalize"
    /* HelperNameMap.NORMALIZE */
  )}([`);
  generator.indent(needIndent());
  const length = node.items.length;
  for (let i2 = 0; i2 < length; i2++) {
    generateNode(generator, node.items[i2]);
    if (i2 === length - 1) {
      break;
    }
    generator.push(", ");
  }
  generator.deindent(needIndent());
  generator.push("])");
}
function generatePluralNode(generator, node) {
  const { helper, needIndent } = generator;
  if (node.cases.length > 1) {
    generator.push(`${helper(
      "plural"
      /* HelperNameMap.PLURAL */
    )}([`);
    generator.indent(needIndent());
    const length = node.cases.length;
    for (let i2 = 0; i2 < length; i2++) {
      generateNode(generator, node.cases[i2]);
      if (i2 === length - 1) {
        break;
      }
      generator.push(", ");
    }
    generator.deindent(needIndent());
    generator.push(`])`);
  }
}
function generateResource(generator, node) {
  if (node.body) {
    generateNode(generator, node.body);
  } else {
    generator.push("null");
  }
}
function generateNode(generator, node) {
  const { helper } = generator;
  switch (node.type) {
    case 0:
      generateResource(generator, node);
      break;
    case 1:
      generatePluralNode(generator, node);
      break;
    case 2:
      generateMessageNode(generator, node);
      break;
    case 6:
      generateLinkedNode(generator, node);
      break;
    case 8:
      generator.push(JSON.stringify(node.value), node);
      break;
    case 7:
      generator.push(JSON.stringify(node.value), node);
      break;
    case 5:
      generator.push(`${helper(
        "interpolate"
        /* HelperNameMap.INTERPOLATE */
      )}(${helper(
        "list"
        /* HelperNameMap.LIST */
      )}(${node.index}))`, node);
      break;
    case 4:
      generator.push(`${helper(
        "interpolate"
        /* HelperNameMap.INTERPOLATE */
      )}(${helper(
        "named"
        /* HelperNameMap.NAMED */
      )}(${JSON.stringify(node.key)}))`, node);
      break;
    case 9:
      generator.push(JSON.stringify(node.value), node);
      break;
    case 3:
      generator.push(JSON.stringify(node.value), node);
      break;
  }
}
const generate = (ast, options = {}) => {
  const mode = isString(options.mode) ? options.mode : "normal";
  const filename = isString(options.filename) ? options.filename : "message.intl";
  const sourceMap = !!options.sourceMap;
  const breakLineCode = options.breakLineCode != null ? options.breakLineCode : mode === "arrow" ? ";" : "\n";
  const needIndent = options.needIndent ? options.needIndent : mode !== "arrow";
  const helpers = ast.helpers || [];
  const generator = createCodeGenerator(ast, {
    mode,
    filename,
    sourceMap,
    breakLineCode,
    needIndent
  });
  generator.push(mode === "normal" ? `function __msg__ (ctx) {` : `(ctx) => {`);
  generator.indent(needIndent);
  if (helpers.length > 0) {
    generator.push(`const { ${join(helpers.map((s2) => `${s2}: _${s2}`), ", ")} } = ctx`);
    generator.newline();
  }
  generator.push(`return `);
  generateNode(generator, ast);
  generator.deindent(needIndent);
  generator.push(`}`);
  delete ast.helpers;
  const { code, map } = generator.context();
  return {
    ast,
    code,
    map: map ? map.toJSON() : void 0
    // eslint-disable-line @typescript-eslint/no-explicit-any
  };
};
function baseCompile$1(source, options = {}) {
  const assignedOptions = assign$1({}, options);
  const jit = !!assignedOptions.jit;
  const enalbeMinify = !!assignedOptions.minify;
  const enambeOptimize = assignedOptions.optimize == null ? true : assignedOptions.optimize;
  const parser = createParser(assignedOptions);
  const ast = parser.parse(source);
  if (!jit) {
    transform(ast, assignedOptions);
    return generate(ast, assignedOptions);
  } else {
    enambeOptimize && optimize(ast);
    enalbeMinify && minify(ast);
    return { ast, code: "" };
  }
}
/*!
  * core-base v11.1.5
  * (c) 2025 kazuya kawaguchi
  * Released under the MIT License.
  */
function initFeatureFlags$1() {
  if (typeof __INTLIFY_PROD_DEVTOOLS__ !== "boolean") {
    getGlobalThis().__INTLIFY_PROD_DEVTOOLS__ = false;
  }
  if (typeof __INTLIFY_DROP_MESSAGE_COMPILER__ !== "boolean") {
    getGlobalThis().__INTLIFY_DROP_MESSAGE_COMPILER__ = false;
  }
}
function isMessageAST(val) {
  return isObject(val) && resolveType(val) === 0 && (hasOwn(val, "b") || hasOwn(val, "body"));
}
const PROPS_BODY = ["b", "body"];
function resolveBody(node) {
  return resolveProps(node, PROPS_BODY);
}
const PROPS_CASES = ["c", "cases"];
function resolveCases(node) {
  return resolveProps(node, PROPS_CASES, []);
}
const PROPS_STATIC = ["s", "static"];
function resolveStatic(node) {
  return resolveProps(node, PROPS_STATIC);
}
const PROPS_ITEMS = ["i", "items"];
function resolveItems(node) {
  return resolveProps(node, PROPS_ITEMS, []);
}
const PROPS_TYPE = ["t", "type"];
function resolveType(node) {
  return resolveProps(node, PROPS_TYPE);
}
const PROPS_VALUE = ["v", "value"];
function resolveValue$1(node, type4) {
  const resolved = resolveProps(node, PROPS_VALUE);
  if (resolved != null) {
    return resolved;
  } else {
    throw createUnhandleNodeError(type4);
  }
}
const PROPS_MODIFIER = ["m", "modifier"];
function resolveLinkedModifier(node) {
  return resolveProps(node, PROPS_MODIFIER);
}
const PROPS_KEY = ["k", "key"];
function resolveLinkedKey(node) {
  const resolved = resolveProps(node, PROPS_KEY);
  if (resolved) {
    return resolved;
  } else {
    throw createUnhandleNodeError(
      6
      /* NodeTypes.Linked */
    );
  }
}
function resolveProps(node, props, defaultValue) {
  for (let i2 = 0; i2 < props.length; i2++) {
    const prop = props[i2];
    if (hasOwn(node, prop) && node[prop] != null) {
      return node[prop];
    }
  }
  return defaultValue;
}
const AST_NODE_PROPS_KEYS = [
  ...PROPS_BODY,
  ...PROPS_CASES,
  ...PROPS_STATIC,
  ...PROPS_ITEMS,
  ...PROPS_KEY,
  ...PROPS_MODIFIER,
  ...PROPS_VALUE,
  ...PROPS_TYPE
];
function createUnhandleNodeError(type4) {
  return new Error(`unhandled node type: ${type4}`);
}
function format(ast) {
  const msg = (ctx) => formatParts(ctx, ast);
  return msg;
}
function formatParts(ctx, ast) {
  const body = resolveBody(ast);
  if (body == null) {
    throw createUnhandleNodeError(
      0
      /* NodeTypes.Resource */
    );
  }
  const type4 = resolveType(body);
  if (type4 === 1) {
    const plural = body;
    const cases = resolveCases(plural);
    return ctx.plural(cases.reduce((messages2, c2) => [
      ...messages2,
      formatMessageParts(ctx, c2)
    ], []));
  } else {
    return formatMessageParts(ctx, body);
  }
}
function formatMessageParts(ctx, node) {
  const static_ = resolveStatic(node);
  if (static_ != null) {
    return ctx.type === "text" ? static_ : ctx.normalize([static_]);
  } else {
    const messages2 = resolveItems(node).reduce((acm, c2) => [...acm, formatMessagePart(ctx, c2)], []);
    return ctx.normalize(messages2);
  }
}
function formatMessagePart(ctx, node) {
  const type4 = resolveType(node);
  switch (type4) {
    case 3: {
      return resolveValue$1(node, type4);
    }
    case 9: {
      return resolveValue$1(node, type4);
    }
    case 4: {
      const named = node;
      if (hasOwn(named, "k") && named.k) {
        return ctx.interpolate(ctx.named(named.k));
      }
      if (hasOwn(named, "key") && named.key) {
        return ctx.interpolate(ctx.named(named.key));
      }
      throw createUnhandleNodeError(type4);
    }
    case 5: {
      const list = node;
      if (hasOwn(list, "i") && isNumber(list.i)) {
        return ctx.interpolate(ctx.list(list.i));
      }
      if (hasOwn(list, "index") && isNumber(list.index)) {
        return ctx.interpolate(ctx.list(list.index));
      }
      throw createUnhandleNodeError(type4);
    }
    case 6: {
      const linked = node;
      const modifier = resolveLinkedModifier(linked);
      const key = resolveLinkedKey(linked);
      return ctx.linked(formatMessagePart(ctx, key), modifier ? formatMessagePart(ctx, modifier) : void 0, ctx.type);
    }
    case 7: {
      return resolveValue$1(node, type4);
    }
    case 8: {
      return resolveValue$1(node, type4);
    }
    default:
      throw new Error(`unhandled node on format message part: ${type4}`);
  }
}
const defaultOnCacheKey = (message2) => message2;
let compileCache = create();
function baseCompile(message2, options = {}) {
  let detectError = false;
  const onError = options.onError || defaultOnError;
  options.onError = (err) => {
    detectError = true;
    onError(err);
  };
  return { ...baseCompile$1(message2, options), detectError };
}
// @__NO_SIDE_EFFECTS__
function compile(message2, context) {
  if (!__INTLIFY_DROP_MESSAGE_COMPILER__ && isString(message2)) {
    isBoolean(context.warnHtmlMessage) ? context.warnHtmlMessage : true;
    const onCacheKey = context.onCacheKey || defaultOnCacheKey;
    const cacheKey = onCacheKey(message2);
    const cached = compileCache[cacheKey];
    if (cached) {
      return cached;
    }
    const { ast, detectError } = baseCompile(message2, {
      ...context,
      location: false,
      jit: true
    });
    const msg = format(ast);
    return !detectError ? compileCache[cacheKey] = msg : msg;
  } else {
    const cacheKey = message2.cacheKey;
    if (cacheKey) {
      const cached = compileCache[cacheKey];
      if (cached) {
        return cached;
      }
      return compileCache[cacheKey] = format(message2);
    } else {
      return format(message2);
    }
  }
}
let devtools = null;
function setDevToolsHook(hook) {
  devtools = hook;
}
function initI18nDevTools(i18n2, version2, meta) {
  devtools && devtools.emit("i18n:init", {
    timestamp: Date.now(),
    i18n: i18n2,
    version: version2,
    meta
  });
}
const translateDevTools = /* @__PURE__ */ createDevToolsHook("function:translate");
function createDevToolsHook(hook) {
  return (payloads) => devtools && devtools.emit(hook, payloads);
}
const CoreErrorCodes = {
  INVALID_ARGUMENT: COMPILE_ERROR_CODES_EXTEND_POINT,
  // 17
  INVALID_DATE_ARGUMENT: 18,
  INVALID_ISO_DATE_ARGUMENT: 19,
  NOT_SUPPORT_NON_STRING_MESSAGE: 20,
  NOT_SUPPORT_LOCALE_PROMISE_VALUE: 21,
  NOT_SUPPORT_LOCALE_ASYNC_FUNCTION: 22,
  NOT_SUPPORT_LOCALE_TYPE: 23
};
const CORE_ERROR_CODES_EXTEND_POINT = 24;
function createCoreError(code) {
  return createCompileError(code, null, void 0);
}
function getLocale(context, options) {
  return options.locale != null ? resolveLocale(options.locale) : resolveLocale(context.locale);
}
let _resolveLocale;
function resolveLocale(locale) {
  if (isString(locale)) {
    return locale;
  } else {
    if (isFunction(locale)) {
      if (locale.resolvedOnce && _resolveLocale != null) {
        return _resolveLocale;
      } else if (locale.constructor.name === "Function") {
        const resolve2 = locale();
        if (isPromise(resolve2)) {
          throw createCoreError(CoreErrorCodes.NOT_SUPPORT_LOCALE_PROMISE_VALUE);
        }
        return _resolveLocale = resolve2;
      } else {
        throw createCoreError(CoreErrorCodes.NOT_SUPPORT_LOCALE_ASYNC_FUNCTION);
      }
    } else {
      throw createCoreError(CoreErrorCodes.NOT_SUPPORT_LOCALE_TYPE);
    }
  }
}
function fallbackWithSimple(ctx, fallback, start) {
  return [.../* @__PURE__ */ new Set([
    start,
    ...isArray$1(fallback) ? fallback : isObject(fallback) ? Object.keys(fallback) : isString(fallback) ? [fallback] : [start]
  ])];
}
function fallbackWithLocaleChain(ctx, fallback, start) {
  const startLocale = isString(start) ? start : DEFAULT_LOCALE;
  const context = ctx;
  if (!context.__localeChainCache) {
    context.__localeChainCache = /* @__PURE__ */ new Map();
  }
  let chain = context.__localeChainCache.get(startLocale);
  if (!chain) {
    chain = [];
    let block = [start];
    while (isArray$1(block)) {
      block = appendBlockToChain(chain, block, fallback);
    }
    const defaults2 = isArray$1(fallback) || !isPlainObject(fallback) ? fallback : fallback["default"] ? fallback["default"] : null;
    block = isString(defaults2) ? [defaults2] : defaults2;
    if (isArray$1(block)) {
      appendBlockToChain(chain, block, false);
    }
    context.__localeChainCache.set(startLocale, chain);
  }
  return chain;
}
function appendBlockToChain(chain, block, blocks) {
  let follow = true;
  for (let i2 = 0; i2 < block.length && isBoolean(follow); i2++) {
    const locale = block[i2];
    if (isString(locale)) {
      follow = appendLocaleToChain(chain, block[i2], blocks);
    }
  }
  return follow;
}
function appendLocaleToChain(chain, locale, blocks) {
  let follow;
  const tokens = locale.split("-");
  do {
    const target = tokens.join("-");
    follow = appendItemToChain(chain, target, blocks);
    tokens.splice(-1, 1);
  } while (tokens.length && follow === true);
  return follow;
}
function appendItemToChain(chain, target, blocks) {
  let follow = false;
  if (!chain.includes(target)) {
    follow = true;
    if (target) {
      follow = target[target.length - 1] !== "!";
      const locale = target.replace(/!/g, "");
      chain.push(locale);
      if ((isArray$1(blocks) || isPlainObject(blocks)) && blocks[locale]) {
        follow = blocks[locale];
      }
    }
  }
  return follow;
}
const pathStateMachine = [];
pathStateMachine[
  0
  /* States.BEFORE_PATH */
] = {
  [
    "w"
    /* PathCharTypes.WORKSPACE */
  ]: [
    0
    /* States.BEFORE_PATH */
  ],
  [
    "i"
    /* PathCharTypes.IDENT */
  ]: [
    3,
    0
    /* Actions.APPEND */
  ],
  [
    "["
    /* PathCharTypes.LEFT_BRACKET */
  ]: [
    4
    /* States.IN_SUB_PATH */
  ],
  [
    "o"
    /* PathCharTypes.END_OF_FAIL */
  ]: [
    7
    /* States.AFTER_PATH */
  ]
};
pathStateMachine[
  1
  /* States.IN_PATH */
] = {
  [
    "w"
    /* PathCharTypes.WORKSPACE */
  ]: [
    1
    /* States.IN_PATH */
  ],
  [
    "."
    /* PathCharTypes.DOT */
  ]: [
    2
    /* States.BEFORE_IDENT */
  ],
  [
    "["
    /* PathCharTypes.LEFT_BRACKET */
  ]: [
    4
    /* States.IN_SUB_PATH */
  ],
  [
    "o"
    /* PathCharTypes.END_OF_FAIL */
  ]: [
    7
    /* States.AFTER_PATH */
  ]
};
pathStateMachine[
  2
  /* States.BEFORE_IDENT */
] = {
  [
    "w"
    /* PathCharTypes.WORKSPACE */
  ]: [
    2
    /* States.BEFORE_IDENT */
  ],
  [
    "i"
    /* PathCharTypes.IDENT */
  ]: [
    3,
    0
    /* Actions.APPEND */
  ],
  [
    "0"
    /* PathCharTypes.ZERO */
  ]: [
    3,
    0
    /* Actions.APPEND */
  ]
};
pathStateMachine[
  3
  /* States.IN_IDENT */
] = {
  [
    "i"
    /* PathCharTypes.IDENT */
  ]: [
    3,
    0
    /* Actions.APPEND */
  ],
  [
    "0"
    /* PathCharTypes.ZERO */
  ]: [
    3,
    0
    /* Actions.APPEND */
  ],
  [
    "w"
    /* PathCharTypes.WORKSPACE */
  ]: [
    1,
    1
    /* Actions.PUSH */
  ],
  [
    "."
    /* PathCharTypes.DOT */
  ]: [
    2,
    1
    /* Actions.PUSH */
  ],
  [
    "["
    /* PathCharTypes.LEFT_BRACKET */
  ]: [
    4,
    1
    /* Actions.PUSH */
  ],
  [
    "o"
    /* PathCharTypes.END_OF_FAIL */
  ]: [
    7,
    1
    /* Actions.PUSH */
  ]
};
pathStateMachine[
  4
  /* States.IN_SUB_PATH */
] = {
  [
    "'"
    /* PathCharTypes.SINGLE_QUOTE */
  ]: [
    5,
    0
    /* Actions.APPEND */
  ],
  [
    '"'
    /* PathCharTypes.DOUBLE_QUOTE */
  ]: [
    6,
    0
    /* Actions.APPEND */
  ],
  [
    "["
    /* PathCharTypes.LEFT_BRACKET */
  ]: [
    4,
    2
    /* Actions.INC_SUB_PATH_DEPTH */
  ],
  [
    "]"
    /* PathCharTypes.RIGHT_BRACKET */
  ]: [
    1,
    3
    /* Actions.PUSH_SUB_PATH */
  ],
  [
    "o"
    /* PathCharTypes.END_OF_FAIL */
  ]: 8,
  [
    "l"
    /* PathCharTypes.ELSE */
  ]: [
    4,
    0
    /* Actions.APPEND */
  ]
};
pathStateMachine[
  5
  /* States.IN_SINGLE_QUOTE */
] = {
  [
    "'"
    /* PathCharTypes.SINGLE_QUOTE */
  ]: [
    4,
    0
    /* Actions.APPEND */
  ],
  [
    "o"
    /* PathCharTypes.END_OF_FAIL */
  ]: 8,
  [
    "l"
    /* PathCharTypes.ELSE */
  ]: [
    5,
    0
    /* Actions.APPEND */
  ]
};
pathStateMachine[
  6
  /* States.IN_DOUBLE_QUOTE */
] = {
  [
    '"'
    /* PathCharTypes.DOUBLE_QUOTE */
  ]: [
    4,
    0
    /* Actions.APPEND */
  ],
  [
    "o"
    /* PathCharTypes.END_OF_FAIL */
  ]: 8,
  [
    "l"
    /* PathCharTypes.ELSE */
  ]: [
    6,
    0
    /* Actions.APPEND */
  ]
};
const literalValueRE = /^\s?(?:true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;
function isLiteral(exp) {
  return literalValueRE.test(exp);
}
function stripQuotes(str) {
  const a2 = str.charCodeAt(0);
  const b = str.charCodeAt(str.length - 1);
  return a2 === b && (a2 === 34 || a2 === 39) ? str.slice(1, -1) : str;
}
function getPathCharType(ch2) {
  if (ch2 === void 0 || ch2 === null) {
    return "o";
  }
  const code = ch2.charCodeAt(0);
  switch (code) {
    case 91:
    case 93:
    case 46:
    case 34:
    case 39:
      return ch2;
    case 95:
    case 36:
    case 45:
      return "i";
    case 9:
    case 10:
    case 13:
    case 160:
    case 65279:
    case 8232:
    case 8233:
      return "w";
  }
  return "i";
}
function formatSubPath(path) {
  const trimmed = path.trim();
  if (path.charAt(0) === "0" && isNaN(parseInt(path))) {
    return false;
  }
  return isLiteral(trimmed) ? stripQuotes(trimmed) : "*" + trimmed;
}
function parse(path) {
  const keys2 = [];
  let index = -1;
  let mode = 0;
  let subPathDepth = 0;
  let c2;
  let key;
  let newChar;
  let type4;
  let transition;
  let action;
  let typeMap;
  const actions = [];
  actions[
    0
    /* Actions.APPEND */
  ] = () => {
    if (key === void 0) {
      key = newChar;
    } else {
      key += newChar;
    }
  };
  actions[
    1
    /* Actions.PUSH */
  ] = () => {
    if (key !== void 0) {
      keys2.push(key);
      key = void 0;
    }
  };
  actions[
    2
    /* Actions.INC_SUB_PATH_DEPTH */
  ] = () => {
    actions[
      0
      /* Actions.APPEND */
    ]();
    subPathDepth++;
  };
  actions[
    3
    /* Actions.PUSH_SUB_PATH */
  ] = () => {
    if (subPathDepth > 0) {
      subPathDepth--;
      mode = 4;
      actions[
        0
        /* Actions.APPEND */
      ]();
    } else {
      subPathDepth = 0;
      if (key === void 0) {
        return false;
      }
      key = formatSubPath(key);
      if (key === false) {
        return false;
      } else {
        actions[
          1
          /* Actions.PUSH */
        ]();
      }
    }
  };
  function maybeUnescapeQuote() {
    const nextChar = path[index + 1];
    if (mode === 5 && nextChar === "'" || mode === 6 && nextChar === '"') {
      index++;
      newChar = "\\" + nextChar;
      actions[
        0
        /* Actions.APPEND */
      ]();
      return true;
    }
  }
  while (mode !== null) {
    index++;
    c2 = path[index];
    if (c2 === "\\" && maybeUnescapeQuote()) {
      continue;
    }
    type4 = getPathCharType(c2);
    typeMap = pathStateMachine[mode];
    transition = typeMap[type4] || typeMap[
      "l"
      /* PathCharTypes.ELSE */
    ] || 8;
    if (transition === 8) {
      return;
    }
    mode = transition[0];
    if (transition[1] !== void 0) {
      action = actions[transition[1]];
      if (action) {
        newChar = c2;
        if (action() === false) {
          return;
        }
      }
    }
    if (mode === 7) {
      return keys2;
    }
  }
}
const cache = /* @__PURE__ */ new Map();
function resolveWithKeyValue(obj, path) {
  return isObject(obj) ? obj[path] : null;
}
function resolveValue(obj, path) {
  if (!isObject(obj)) {
    return null;
  }
  let hit = cache.get(path);
  if (!hit) {
    hit = parse(path);
    if (hit) {
      cache.set(path, hit);
    }
  }
  if (!hit) {
    return null;
  }
  const len = hit.length;
  let last = obj;
  let i2 = 0;
  while (i2 < len) {
    const key = hit[i2];
    if (AST_NODE_PROPS_KEYS.includes(key) && isMessageAST(last)) {
      return null;
    }
    const val = last[key];
    if (val === void 0) {
      return null;
    }
    if (isFunction(last)) {
      return null;
    }
    last = val;
    i2++;
  }
  return last;
}
const VERSION$1 = "11.1.5";
const NOT_REOSLVED = -1;
const DEFAULT_LOCALE = "en-US";
const MISSING_RESOLVE_VALUE = "";
const capitalize = (str) => `${str.charAt(0).toLocaleUpperCase()}${str.substr(1)}`;
function getDefaultLinkedModifiers() {
  return {
    upper: (val, type4) => {
      return type4 === "text" && isString(val) ? val.toUpperCase() : type4 === "vnode" && isObject(val) && "__v_isVNode" in val ? val.children.toUpperCase() : val;
    },
    lower: (val, type4) => {
      return type4 === "text" && isString(val) ? val.toLowerCase() : type4 === "vnode" && isObject(val) && "__v_isVNode" in val ? val.children.toLowerCase() : val;
    },
    capitalize: (val, type4) => {
      return type4 === "text" && isString(val) ? capitalize(val) : type4 === "vnode" && isObject(val) && "__v_isVNode" in val ? capitalize(val.children) : val;
    }
  };
}
let _compiler;
function registerMessageCompiler(compiler) {
  _compiler = compiler;
}
let _resolver;
function registerMessageResolver(resolver) {
  _resolver = resolver;
}
let _fallbacker;
function registerLocaleFallbacker(fallbacker) {
  _fallbacker = fallbacker;
}
let _additionalMeta = null;
const setAdditionalMeta = /* @__NO_SIDE_EFFECTS__ */ (meta) => {
  _additionalMeta = meta;
};
const getAdditionalMeta = /* @__NO_SIDE_EFFECTS__ */ () => _additionalMeta;
let _fallbackContext = null;
const setFallbackContext = (context) => {
  _fallbackContext = context;
};
const getFallbackContext = () => _fallbackContext;
let _cid = 0;
function createCoreContext(options = {}) {
  const onWarn = isFunction(options.onWarn) ? options.onWarn : warn;
  const version2 = isString(options.version) ? options.version : VERSION$1;
  const locale = isString(options.locale) || isFunction(options.locale) ? options.locale : DEFAULT_LOCALE;
  const _locale = isFunction(locale) ? DEFAULT_LOCALE : locale;
  const fallbackLocale = isArray$1(options.fallbackLocale) || isPlainObject(options.fallbackLocale) || isString(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : _locale;
  const messages2 = isPlainObject(options.messages) ? options.messages : createResources(_locale);
  const datetimeFormats = isPlainObject(options.datetimeFormats) ? options.datetimeFormats : createResources(_locale);
  const numberFormats = isPlainObject(options.numberFormats) ? options.numberFormats : createResources(_locale);
  const modifiers = assign$1(create(), options.modifiers, getDefaultLinkedModifiers());
  const pluralRules = options.pluralRules || create();
  const missing = isFunction(options.missing) ? options.missing : null;
  const missingWarn = isBoolean(options.missingWarn) || isRegExp(options.missingWarn) ? options.missingWarn : true;
  const fallbackWarn = isBoolean(options.fallbackWarn) || isRegExp(options.fallbackWarn) ? options.fallbackWarn : true;
  const fallbackFormat = !!options.fallbackFormat;
  const unresolving = !!options.unresolving;
  const postTranslation = isFunction(options.postTranslation) ? options.postTranslation : null;
  const processor = isPlainObject(options.processor) ? options.processor : null;
  const warnHtmlMessage = isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;
  const escapeParameter = !!options.escapeParameter;
  const messageCompiler = isFunction(options.messageCompiler) ? options.messageCompiler : _compiler;
  const messageResolver = isFunction(options.messageResolver) ? options.messageResolver : _resolver || resolveWithKeyValue;
  const localeFallbacker = isFunction(options.localeFallbacker) ? options.localeFallbacker : _fallbacker || fallbackWithSimple;
  const fallbackContext = isObject(options.fallbackContext) ? options.fallbackContext : void 0;
  const internalOptions = options;
  const __datetimeFormatters = isObject(internalOptions.__datetimeFormatters) ? internalOptions.__datetimeFormatters : /* @__PURE__ */ new Map();
  const __numberFormatters = isObject(internalOptions.__numberFormatters) ? internalOptions.__numberFormatters : /* @__PURE__ */ new Map();
  const __meta = isObject(internalOptions.__meta) ? internalOptions.__meta : {};
  _cid++;
  const context = {
    version: version2,
    cid: _cid,
    locale,
    fallbackLocale,
    messages: messages2,
    modifiers,
    pluralRules,
    missing,
    missingWarn,
    fallbackWarn,
    fallbackFormat,
    unresolving,
    postTranslation,
    processor,
    warnHtmlMessage,
    escapeParameter,
    messageCompiler,
    messageResolver,
    localeFallbacker,
    fallbackContext,
    onWarn,
    __meta
  };
  {
    context.datetimeFormats = datetimeFormats;
    context.numberFormats = numberFormats;
    context.__datetimeFormatters = __datetimeFormatters;
    context.__numberFormatters = __numberFormatters;
  }
  if (__INTLIFY_PROD_DEVTOOLS__) {
    initI18nDevTools(context, version2, __meta);
  }
  return context;
}
const createResources = (locale) => ({ [locale]: create() });
function handleMissing(context, key, locale, missingWarn, type4) {
  const { missing, onWarn } = context;
  if (missing !== null) {
    const ret = missing(context, locale, key, type4);
    return isString(ret) ? ret : key;
  } else {
    return key;
  }
}
function updateFallbackLocale(ctx, locale, fallback) {
  const context = ctx;
  context.__localeChainCache = /* @__PURE__ */ new Map();
  ctx.localeFallbacker(ctx, fallback, locale);
}
function isAlmostSameLocale(locale, compareLocale) {
  if (locale === compareLocale)
    return false;
  return locale.split("-")[0] === compareLocale.split("-")[0];
}
function isImplicitFallback(targetLocale, locales) {
  const index = locales.indexOf(targetLocale);
  if (index === -1) {
    return false;
  }
  for (let i2 = index + 1; i2 < locales.length; i2++) {
    if (isAlmostSameLocale(targetLocale, locales[i2])) {
      return true;
    }
  }
  return false;
}
function datetime(context, ...args) {
  const { datetimeFormats, unresolving, fallbackLocale, onWarn, localeFallbacker } = context;
  const { __datetimeFormatters } = context;
  const [key, value, options, overrides] = parseDateTimeArgs(...args);
  const missingWarn = isBoolean(options.missingWarn) ? options.missingWarn : context.missingWarn;
  isBoolean(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;
  const part = !!options.part;
  const locale = getLocale(context, options);
  const locales = localeFallbacker(
    context,
    // eslint-disable-line @typescript-eslint/no-explicit-any
    fallbackLocale,
    locale
  );
  if (!isString(key) || key === "") {
    return new Intl.DateTimeFormat(locale, overrides).format(value);
  }
  let datetimeFormat = {};
  let targetLocale;
  let format2 = null;
  const type4 = "datetime format";
  for (let i2 = 0; i2 < locales.length; i2++) {
    targetLocale = locales[i2];
    datetimeFormat = datetimeFormats[targetLocale] || {};
    format2 = datetimeFormat[key];
    if (isPlainObject(format2))
      break;
    handleMissing(context, key, targetLocale, missingWarn, type4);
  }
  if (!isPlainObject(format2) || !isString(targetLocale)) {
    return unresolving ? NOT_REOSLVED : key;
  }
  let id2 = `${targetLocale}__${key}`;
  if (!isEmptyObject(overrides)) {
    id2 = `${id2}__${JSON.stringify(overrides)}`;
  }
  let formatter = __datetimeFormatters.get(id2);
  if (!formatter) {
    formatter = new Intl.DateTimeFormat(targetLocale, assign$1({}, format2, overrides));
    __datetimeFormatters.set(id2, formatter);
  }
  return !part ? formatter.format(value) : formatter.formatToParts(value);
}
const DATETIME_FORMAT_OPTIONS_KEYS = [
  "localeMatcher",
  "weekday",
  "era",
  "year",
  "month",
  "day",
  "hour",
  "minute",
  "second",
  "timeZoneName",
  "formatMatcher",
  "hour12",
  "timeZone",
  "dateStyle",
  "timeStyle",
  "calendar",
  "dayPeriod",
  "numberingSystem",
  "hourCycle",
  "fractionalSecondDigits"
];
function parseDateTimeArgs(...args) {
  const [arg1, arg2, arg3, arg4] = args;
  const options = create();
  let overrides = create();
  let value;
  if (isString(arg1)) {
    const matches = arg1.match(/(\d{4}-\d{2}-\d{2})(T|\s)?(.*)/);
    if (!matches) {
      throw createCoreError(CoreErrorCodes.INVALID_ISO_DATE_ARGUMENT);
    }
    const dateTime = matches[3] ? matches[3].trim().startsWith("T") ? `${matches[1].trim()}${matches[3].trim()}` : `${matches[1].trim()}T${matches[3].trim()}` : matches[1].trim();
    value = new Date(dateTime);
    try {
      value.toISOString();
    } catch {
      throw createCoreError(CoreErrorCodes.INVALID_ISO_DATE_ARGUMENT);
    }
  } else if (isDate(arg1)) {
    if (isNaN(arg1.getTime())) {
      throw createCoreError(CoreErrorCodes.INVALID_DATE_ARGUMENT);
    }
    value = arg1;
  } else if (isNumber(arg1)) {
    value = arg1;
  } else {
    throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT);
  }
  if (isString(arg2)) {
    options.key = arg2;
  } else if (isPlainObject(arg2)) {
    Object.keys(arg2).forEach((key) => {
      if (DATETIME_FORMAT_OPTIONS_KEYS.includes(key)) {
        overrides[key] = arg2[key];
      } else {
        options[key] = arg2[key];
      }
    });
  }
  if (isString(arg3)) {
    options.locale = arg3;
  } else if (isPlainObject(arg3)) {
    overrides = arg3;
  }
  if (isPlainObject(arg4)) {
    overrides = arg4;
  }
  return [options.key || "", value, options, overrides];
}
function clearDateTimeFormat(ctx, locale, format2) {
  const context = ctx;
  for (const key in format2) {
    const id2 = `${locale}__${key}`;
    if (!context.__datetimeFormatters.has(id2)) {
      continue;
    }
    context.__datetimeFormatters.delete(id2);
  }
}
function number4(context, ...args) {
  const { numberFormats, unresolving, fallbackLocale, onWarn, localeFallbacker } = context;
  const { __numberFormatters } = context;
  const [key, value, options, overrides] = parseNumberArgs(...args);
  const missingWarn = isBoolean(options.missingWarn) ? options.missingWarn : context.missingWarn;
  isBoolean(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;
  const part = !!options.part;
  const locale = getLocale(context, options);
  const locales = localeFallbacker(
    context,
    // eslint-disable-line @typescript-eslint/no-explicit-any
    fallbackLocale,
    locale
  );
  if (!isString(key) || key === "") {
    return new Intl.NumberFormat(locale, overrides).format(value);
  }
  let numberFormat = {};
  let targetLocale;
  let format2 = null;
  const type4 = "number format";
  for (let i2 = 0; i2 < locales.length; i2++) {
    targetLocale = locales[i2];
    numberFormat = numberFormats[targetLocale] || {};
    format2 = numberFormat[key];
    if (isPlainObject(format2))
      break;
    handleMissing(context, key, targetLocale, missingWarn, type4);
  }
  if (!isPlainObject(format2) || !isString(targetLocale)) {
    return unresolving ? NOT_REOSLVED : key;
  }
  let id2 = `${targetLocale}__${key}`;
  if (!isEmptyObject(overrides)) {
    id2 = `${id2}__${JSON.stringify(overrides)}`;
  }
  let formatter = __numberFormatters.get(id2);
  if (!formatter) {
    formatter = new Intl.NumberFormat(targetLocale, assign$1({}, format2, overrides));
    __numberFormatters.set(id2, formatter);
  }
  return !part ? formatter.format(value) : formatter.formatToParts(value);
}
const NUMBER_FORMAT_OPTIONS_KEYS = [
  "localeMatcher",
  "style",
  "currency",
  "currencyDisplay",
  "currencySign",
  "useGrouping",
  "minimumIntegerDigits",
  "minimumFractionDigits",
  "maximumFractionDigits",
  "minimumSignificantDigits",
  "maximumSignificantDigits",
  "compactDisplay",
  "notation",
  "signDisplay",
  "unit",
  "unitDisplay",
  "roundingMode",
  "roundingPriority",
  "roundingIncrement",
  "trailingZeroDisplay"
];
function parseNumberArgs(...args) {
  const [arg1, arg2, arg3, arg4] = args;
  const options = create();
  let overrides = create();
  if (!isNumber(arg1)) {
    throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT);
  }
  const value = arg1;
  if (isString(arg2)) {
    options.key = arg2;
  } else if (isPlainObject(arg2)) {
    Object.keys(arg2).forEach((key) => {
      if (NUMBER_FORMAT_OPTIONS_KEYS.includes(key)) {
        overrides[key] = arg2[key];
      } else {
        options[key] = arg2[key];
      }
    });
  }
  if (isString(arg3)) {
    options.locale = arg3;
  } else if (isPlainObject(arg3)) {
    overrides = arg3;
  }
  if (isPlainObject(arg4)) {
    overrides = arg4;
  }
  return [options.key || "", value, options, overrides];
}
function clearNumberFormat(ctx, locale, format2) {
  const context = ctx;
  for (const key in format2) {
    const id2 = `${locale}__${key}`;
    if (!context.__numberFormatters.has(id2)) {
      continue;
    }
    context.__numberFormatters.delete(id2);
  }
}
const DEFAULT_MODIFIER = (str) => str;
const DEFAULT_MESSAGE = (ctx) => "";
const DEFAULT_MESSAGE_DATA_TYPE = "text";
const DEFAULT_NORMALIZE = (values) => values.length === 0 ? "" : join(values);
const DEFAULT_INTERPOLATE = toDisplayString;
function pluralDefault(choice, choicesLength) {
  choice = Math.abs(choice);
  if (choicesLength === 2) {
    return choice ? choice > 1 ? 1 : 0 : 1;
  }
  return choice ? Math.min(choice, 2) : 0;
}
function getPluralIndex(options) {
  const index = isNumber(options.pluralIndex) ? options.pluralIndex : -1;
  return options.named && (isNumber(options.named.count) || isNumber(options.named.n)) ? isNumber(options.named.count) ? options.named.count : isNumber(options.named.n) ? options.named.n : index : index;
}
function normalizeNamed(pluralIndex, props) {
  if (!props.count) {
    props.count = pluralIndex;
  }
  if (!props.n) {
    props.n = pluralIndex;
  }
}
function createMessageContext(options = {}) {
  const locale = options.locale;
  const pluralIndex = getPluralIndex(options);
  const pluralRule = isObject(options.pluralRules) && isString(locale) && isFunction(options.pluralRules[locale]) ? options.pluralRules[locale] : pluralDefault;
  const orgPluralRule = isObject(options.pluralRules) && isString(locale) && isFunction(options.pluralRules[locale]) ? pluralDefault : void 0;
  const plural = (messages2) => {
    return messages2[pluralRule(pluralIndex, messages2.length, orgPluralRule)];
  };
  const _list = options.list || [];
  const list = (index) => _list[index];
  const _named = options.named || create();
  isNumber(options.pluralIndex) && normalizeNamed(pluralIndex, _named);
  const named = (key) => _named[key];
  function message2(key, useLinked) {
    const msg = isFunction(options.messages) ? options.messages(key, !!useLinked) : isObject(options.messages) ? options.messages[key] : false;
    return !msg ? options.parent ? options.parent.message(key) : DEFAULT_MESSAGE : msg;
  }
  const _modifier = (name) => options.modifiers ? options.modifiers[name] : DEFAULT_MODIFIER;
  const normalize = isPlainObject(options.processor) && isFunction(options.processor.normalize) ? options.processor.normalize : DEFAULT_NORMALIZE;
  const interpolate = isPlainObject(options.processor) && isFunction(options.processor.interpolate) ? options.processor.interpolate : DEFAULT_INTERPOLATE;
  const type4 = isPlainObject(options.processor) && isString(options.processor.type) ? options.processor.type : DEFAULT_MESSAGE_DATA_TYPE;
  const linked = (key, ...args) => {
    const [arg1, arg2] = args;
    let type22 = "text";
    let modifier = "";
    if (args.length === 1) {
      if (isObject(arg1)) {
        modifier = arg1.modifier || modifier;
        type22 = arg1.type || type22;
      } else if (isString(arg1)) {
        modifier = arg1 || modifier;
      }
    } else if (args.length === 2) {
      if (isString(arg1)) {
        modifier = arg1 || modifier;
      }
      if (isString(arg2)) {
        type22 = arg2 || type22;
      }
    }
    const ret = message2(key, true)(ctx);
    const msg = (
      // The message in vnode resolved with linked are returned as an array by processor.nomalize
      type22 === "vnode" && isArray$1(ret) && modifier ? ret[0] : ret
    );
    return modifier ? _modifier(modifier)(msg, type22) : msg;
  };
  const ctx = {
    [
      "list"
      /* HelperNameMap.LIST */
    ]: list,
    [
      "named"
      /* HelperNameMap.NAMED */
    ]: named,
    [
      "plural"
      /* HelperNameMap.PLURAL */
    ]: plural,
    [
      "linked"
      /* HelperNameMap.LINKED */
    ]: linked,
    [
      "message"
      /* HelperNameMap.MESSAGE */
    ]: message2,
    [
      "type"
      /* HelperNameMap.TYPE */
    ]: type4,
    [
      "interpolate"
      /* HelperNameMap.INTERPOLATE */
    ]: interpolate,
    [
      "normalize"
      /* HelperNameMap.NORMALIZE */
    ]: normalize,
    [
      "values"
      /* HelperNameMap.VALUES */
    ]: assign$1(create(), _list, _named)
  };
  return ctx;
}
const NOOP_MESSAGE_FUNCTION = () => "";
const isMessageFunction = (val) => isFunction(val);
function translate(context, ...args) {
  const { fallbackFormat, postTranslation, unresolving, messageCompiler, fallbackLocale, messages: messages2 } = context;
  const [key, options] = parseTranslateArgs(...args);
  const missingWarn = isBoolean(options.missingWarn) ? options.missingWarn : context.missingWarn;
  const fallbackWarn = isBoolean(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;
  const escapeParameter = isBoolean(options.escapeParameter) ? options.escapeParameter : context.escapeParameter;
  const resolvedMessage = !!options.resolvedMessage;
  const defaultMsgOrKey = isString(options.default) || isBoolean(options.default) ? !isBoolean(options.default) ? options.default : !messageCompiler ? () => key : key : fallbackFormat ? !messageCompiler ? () => key : key : null;
  const enableDefaultMsg = fallbackFormat || defaultMsgOrKey != null && (isString(defaultMsgOrKey) || isFunction(defaultMsgOrKey));
  const locale = getLocale(context, options);
  escapeParameter && escapeParams(options);
  let [formatScope, targetLocale, message2] = !resolvedMessage ? resolveMessageFormat(context, key, locale, fallbackLocale, fallbackWarn, missingWarn) : [
    key,
    locale,
    messages2[locale] || create()
  ];
  let format2 = formatScope;
  let cacheBaseKey = key;
  if (!resolvedMessage && !(isString(format2) || isMessageAST(format2) || isMessageFunction(format2))) {
    if (enableDefaultMsg) {
      format2 = defaultMsgOrKey;
      cacheBaseKey = format2;
    }
  }
  if (!resolvedMessage && (!(isString(format2) || isMessageAST(format2) || isMessageFunction(format2)) || !isString(targetLocale))) {
    return unresolving ? NOT_REOSLVED : key;
  }
  let occurred = false;
  const onError = () => {
    occurred = true;
  };
  const msg = !isMessageFunction(format2) ? compileMessageFormat(context, key, targetLocale, format2, cacheBaseKey, onError) : format2;
  if (occurred) {
    return format2;
  }
  const ctxOptions = getMessageContextOptions(context, targetLocale, message2, options);
  const msgContext = createMessageContext(ctxOptions);
  const messaged = evaluateMessage(context, msg, msgContext);
  const ret = postTranslation ? postTranslation(messaged, key) : messaged;
  if (__INTLIFY_PROD_DEVTOOLS__) {
    const payloads = {
      timestamp: Date.now(),
      key: isString(key) ? key : isMessageFunction(format2) ? format2.key : "",
      locale: targetLocale || (isMessageFunction(format2) ? format2.locale : ""),
      format: isString(format2) ? format2 : isMessageFunction(format2) ? format2.source : "",
      message: ret
    };
    payloads.meta = assign$1({}, context.__meta, /* @__PURE__ */ getAdditionalMeta() || {});
    translateDevTools(payloads);
  }
  return ret;
}
function escapeParams(options) {
  if (isArray$1(options.list)) {
    options.list = options.list.map((item) => isString(item) ? escapeHtml(item) : item);
  } else if (isObject(options.named)) {
    Object.keys(options.named).forEach((key) => {
      if (isString(options.named[key])) {
        options.named[key] = escapeHtml(options.named[key]);
      }
    });
  }
}
function resolveMessageFormat(context, key, locale, fallbackLocale, fallbackWarn, missingWarn) {
  const { messages: messages2, onWarn, messageResolver: resolveValue2, localeFallbacker } = context;
  const locales = localeFallbacker(context, fallbackLocale, locale);
  let message2 = create();
  let targetLocale;
  let format2 = null;
  const type4 = "translate";
  for (let i2 = 0; i2 < locales.length; i2++) {
    targetLocale = locales[i2];
    message2 = messages2[targetLocale] || create();
    if ((format2 = resolveValue2(message2, key)) === null) {
      format2 = message2[key];
    }
    if (isString(format2) || isMessageAST(format2) || isMessageFunction(format2)) {
      break;
    }
    if (!isImplicitFallback(targetLocale, locales)) {
      const missingRet = handleMissing(
        context,
        // eslint-disable-line @typescript-eslint/no-explicit-any
        key,
        targetLocale,
        missingWarn,
        type4
      );
      if (missingRet !== key) {
        format2 = missingRet;
      }
    }
  }
  return [format2, targetLocale, message2];
}
function compileMessageFormat(context, key, targetLocale, format2, cacheBaseKey, onError) {
  const { messageCompiler, warnHtmlMessage } = context;
  if (isMessageFunction(format2)) {
    const msg2 = format2;
    msg2.locale = msg2.locale || targetLocale;
    msg2.key = msg2.key || key;
    return msg2;
  }
  if (messageCompiler == null) {
    const msg2 = () => format2;
    msg2.locale = targetLocale;
    msg2.key = key;
    return msg2;
  }
  const msg = messageCompiler(format2, getCompileContext(context, targetLocale, cacheBaseKey, format2, warnHtmlMessage, onError));
  msg.locale = targetLocale;
  msg.key = key;
  msg.source = format2;
  return msg;
}
function evaluateMessage(context, msg, msgCtx) {
  const messaged = msg(msgCtx);
  return messaged;
}
function parseTranslateArgs(...args) {
  const [arg1, arg2, arg3] = args;
  const options = create();
  if (!isString(arg1) && !isNumber(arg1) && !isMessageFunction(arg1) && !isMessageAST(arg1)) {
    throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT);
  }
  const key = isNumber(arg1) ? String(arg1) : isMessageFunction(arg1) ? arg1 : arg1;
  if (isNumber(arg2)) {
    options.plural = arg2;
  } else if (isString(arg2)) {
    options.default = arg2;
  } else if (isPlainObject(arg2) && !isEmptyObject(arg2)) {
    options.named = arg2;
  } else if (isArray$1(arg2)) {
    options.list = arg2;
  }
  if (isNumber(arg3)) {
    options.plural = arg3;
  } else if (isString(arg3)) {
    options.default = arg3;
  } else if (isPlainObject(arg3)) {
    assign$1(options, arg3);
  }
  return [key, options];
}
function getCompileContext(context, locale, key, source, warnHtmlMessage, onError) {
  return {
    locale,
    key,
    warnHtmlMessage,
    onError: (err) => {
      onError && onError(err);
      {
        throw err;
      }
    },
    onCacheKey: (source2) => generateFormatCacheKey(locale, key, source2)
  };
}
function getMessageContextOptions(context, locale, message2, options) {
  const { modifiers, pluralRules, messageResolver: resolveValue2, fallbackLocale, fallbackWarn, missingWarn, fallbackContext } = context;
  const resolveMessage = (key, useLinked) => {
    let val = resolveValue2(message2, key);
    if (val == null && (fallbackContext || useLinked)) {
      const [, , message22] = resolveMessageFormat(
        fallbackContext || context,
        // NOTE: if has fallbackContext, fallback to root, else if use linked, fallback to local context
        key,
        locale,
        fallbackLocale,
        fallbackWarn,
        missingWarn
      );
      val = resolveValue2(message22, key);
    }
    if (isString(val) || isMessageAST(val)) {
      let occurred = false;
      const onError = () => {
        occurred = true;
      };
      const msg = compileMessageFormat(context, key, locale, val, key, onError);
      return !occurred ? msg : NOOP_MESSAGE_FUNCTION;
    } else if (isMessageFunction(val)) {
      return val;
    } else {
      return NOOP_MESSAGE_FUNCTION;
    }
  };
  const ctxOptions = {
    locale,
    modifiers,
    pluralRules,
    messages: resolveMessage
  };
  if (context.processor) {
    ctxOptions.processor = context.processor;
  }
  if (options.list) {
    ctxOptions.list = options.list;
  }
  if (options.named) {
    ctxOptions.named = options.named;
  }
  if (isNumber(options.plural)) {
    ctxOptions.pluralIndex = options.plural;
  }
  return ctxOptions;
}
{
  initFeatureFlags$1();
}
/*!
  * vue-i18n v11.1.5
  * (c) 2025 kazuya kawaguchi
  * Released under the MIT License.
  */
const VERSION = "11.1.5";
function initFeatureFlags() {
  if (typeof __VUE_I18N_FULL_INSTALL__ !== "boolean") {
    getGlobalThis().__VUE_I18N_FULL_INSTALL__ = true;
  }
  if (typeof __VUE_I18N_LEGACY_API__ !== "boolean") {
    getGlobalThis().__VUE_I18N_LEGACY_API__ = true;
  }
  if (typeof __INTLIFY_DROP_MESSAGE_COMPILER__ !== "boolean") {
    getGlobalThis().__INTLIFY_DROP_MESSAGE_COMPILER__ = false;
  }
  if (typeof __INTLIFY_PROD_DEVTOOLS__ !== "boolean") {
    getGlobalThis().__INTLIFY_PROD_DEVTOOLS__ = false;
  }
}
const I18nErrorCodes = {
  // composer module errors
  UNEXPECTED_RETURN_TYPE: CORE_ERROR_CODES_EXTEND_POINT,
  // 24
  // legacy module errors
  INVALID_ARGUMENT: 25,
  // i18n module errors
  MUST_BE_CALL_SETUP_TOP: 26,
  NOT_INSTALLED: 27,
  // directive module errors
  REQUIRED_VALUE: 28,
  INVALID_VALUE: 29,
  // vue-devtools errors
  CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN: 30,
  NOT_INSTALLED_WITH_PROVIDE: 31,
  // unexpected error
  UNEXPECTED_ERROR: 32,
  // not compatible legacy vue-i18n constructor
  NOT_COMPATIBLE_LEGACY_VUE_I18N: 33,
  // Not available Compostion API in Legacy API mode. Please make sure that the legacy API mode is working properly
  NOT_AVAILABLE_COMPOSITION_IN_LEGACY: 34
};
function createI18nError(code, ...args) {
  return createCompileError(code, null, void 0);
}
const TranslateVNodeSymbol = /* @__PURE__ */ makeSymbol("__translateVNode");
const DatetimePartsSymbol = /* @__PURE__ */ makeSymbol("__datetimeParts");
const NumberPartsSymbol = /* @__PURE__ */ makeSymbol("__numberParts");
const SetPluralRulesSymbol = makeSymbol("__setPluralRules");
const InejctWithOptionSymbol = /* @__PURE__ */ makeSymbol("__injectWithOption");
const DisposeSymbol = /* @__PURE__ */ makeSymbol("__dispose");
function handleFlatJson(obj) {
  if (!isObject(obj)) {
    return obj;
  }
  if (isMessageAST(obj)) {
    return obj;
  }
  for (const key in obj) {
    if (!hasOwn(obj, key)) {
      continue;
    }
    if (!key.includes(".")) {
      if (isObject(obj[key])) {
        handleFlatJson(obj[key]);
      }
    } else {
      const subKeys = key.split(".");
      const lastIndex = subKeys.length - 1;
      let currentObj = obj;
      let hasStringValue = false;
      for (let i2 = 0; i2 < lastIndex; i2++) {
        if (subKeys[i2] === "__proto__") {
          throw new Error(`unsafe key: ${subKeys[i2]}`);
        }
        if (!(subKeys[i2] in currentObj)) {
          currentObj[subKeys[i2]] = create();
        }
        if (!isObject(currentObj[subKeys[i2]])) {
          hasStringValue = true;
          break;
        }
        currentObj = currentObj[subKeys[i2]];
      }
      if (!hasStringValue) {
        if (!isMessageAST(currentObj)) {
          currentObj[subKeys[lastIndex]] = obj[key];
          delete obj[key];
        } else {
          if (!AST_NODE_PROPS_KEYS.includes(subKeys[lastIndex])) {
            delete obj[key];
          }
        }
      }
      if (!isMessageAST(currentObj)) {
        const target = currentObj[subKeys[lastIndex]];
        if (isObject(target)) {
          handleFlatJson(target);
        }
      }
    }
  }
  return obj;
}
function getLocaleMessages(locale, options) {
  const { messages: messages2, __i18n, messageResolver, flatJson } = options;
  const ret = isPlainObject(messages2) ? messages2 : isArray$1(__i18n) ? create() : { [locale]: create() };
  if (isArray$1(__i18n)) {
    __i18n.forEach((custom) => {
      if ("locale" in custom && "resource" in custom) {
        const { locale: locale2, resource } = custom;
        if (locale2) {
          ret[locale2] = ret[locale2] || create();
          deepCopy(resource, ret[locale2]);
        } else {
          deepCopy(resource, ret);
        }
      } else {
        isString(custom) && deepCopy(JSON.parse(custom), ret);
      }
    });
  }
  if (messageResolver == null && flatJson) {
    for (const key in ret) {
      if (hasOwn(ret, key)) {
        handleFlatJson(ret[key]);
      }
    }
  }
  return ret;
}
function getComponentOptions(instance) {
  return instance.type;
}
function adjustI18nResources(gl, options, componentOptions) {
  let messages2 = isObject(options.messages) ? options.messages : create();
  if ("__i18nGlobal" in componentOptions) {
    messages2 = getLocaleMessages(gl.locale.value, {
      messages: messages2,
      __i18n: componentOptions.__i18nGlobal
    });
  }
  const locales = Object.keys(messages2);
  if (locales.length) {
    locales.forEach((locale) => {
      gl.mergeLocaleMessage(locale, messages2[locale]);
    });
  }
  {
    if (isObject(options.datetimeFormats)) {
      const locales2 = Object.keys(options.datetimeFormats);
      if (locales2.length) {
        locales2.forEach((locale) => {
          gl.mergeDateTimeFormat(locale, options.datetimeFormats[locale]);
        });
      }
    }
    if (isObject(options.numberFormats)) {
      const locales2 = Object.keys(options.numberFormats);
      if (locales2.length) {
        locales2.forEach((locale) => {
          gl.mergeNumberFormat(locale, options.numberFormats[locale]);
        });
      }
    }
  }
}
function createTextNode(key) {
  return createVNode(Text, null, key, 0);
}
const DEVTOOLS_META = "__INTLIFY_META__";
const NOOP_RETURN_ARRAY = () => [];
const NOOP_RETURN_FALSE = () => false;
let composerID = 0;
function defineCoreMissingHandler(missing) {
  return (ctx, locale, key, type4) => {
    return missing(locale, key, getCurrentInstance() || void 0, type4);
  };
}
const getMetaInfo = /* @__NO_SIDE_EFFECTS__ */ () => {
  const instance = getCurrentInstance();
  let meta = null;
  return instance && (meta = getComponentOptions(instance)[DEVTOOLS_META]) ? { [DEVTOOLS_META]: meta } : null;
};
function createComposer(options = {}) {
  const { __root, __injectWithOption } = options;
  const _isGlobal = __root === void 0;
  const flatJson = options.flatJson;
  const _ref = inBrowser ? ref : shallowRef;
  let _inheritLocale = isBoolean(options.inheritLocale) ? options.inheritLocale : true;
  const _locale = _ref(
    // prettier-ignore
    __root && _inheritLocale ? __root.locale.value : isString(options.locale) ? options.locale : DEFAULT_LOCALE
  );
  const _fallbackLocale = _ref(
    // prettier-ignore
    __root && _inheritLocale ? __root.fallbackLocale.value : isString(options.fallbackLocale) || isArray$1(options.fallbackLocale) || isPlainObject(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : _locale.value
  );
  const _messages = _ref(getLocaleMessages(_locale.value, options));
  const _datetimeFormats = _ref(isPlainObject(options.datetimeFormats) ? options.datetimeFormats : { [_locale.value]: {} });
  const _numberFormats = _ref(isPlainObject(options.numberFormats) ? options.numberFormats : { [_locale.value]: {} });
  let _missingWarn = __root ? __root.missingWarn : isBoolean(options.missingWarn) || isRegExp(options.missingWarn) ? options.missingWarn : true;
  let _fallbackWarn = __root ? __root.fallbackWarn : isBoolean(options.fallbackWarn) || isRegExp(options.fallbackWarn) ? options.fallbackWarn : true;
  let _fallbackRoot = __root ? __root.fallbackRoot : isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;
  let _fallbackFormat = !!options.fallbackFormat;
  let _missing = isFunction(options.missing) ? options.missing : null;
  let _runtimeMissing = isFunction(options.missing) ? defineCoreMissingHandler(options.missing) : null;
  let _postTranslation = isFunction(options.postTranslation) ? options.postTranslation : null;
  let _warnHtmlMessage = __root ? __root.warnHtmlMessage : isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;
  let _escapeParameter = !!options.escapeParameter;
  const _modifiers = __root ? __root.modifiers : isPlainObject(options.modifiers) ? options.modifiers : {};
  let _pluralRules = options.pluralRules || __root && __root.pluralRules;
  let _context;
  const getCoreContext = () => {
    _isGlobal && setFallbackContext(null);
    const ctxOptions = {
      version: VERSION,
      locale: _locale.value,
      fallbackLocale: _fallbackLocale.value,
      messages: _messages.value,
      modifiers: _modifiers,
      pluralRules: _pluralRules,
      missing: _runtimeMissing === null ? void 0 : _runtimeMissing,
      missingWarn: _missingWarn,
      fallbackWarn: _fallbackWarn,
      fallbackFormat: _fallbackFormat,
      unresolving: true,
      postTranslation: _postTranslation === null ? void 0 : _postTranslation,
      warnHtmlMessage: _warnHtmlMessage,
      escapeParameter: _escapeParameter,
      messageResolver: options.messageResolver,
      messageCompiler: options.messageCompiler,
      __meta: { framework: "vue" }
    };
    {
      ctxOptions.datetimeFormats = _datetimeFormats.value;
      ctxOptions.numberFormats = _numberFormats.value;
      ctxOptions.__datetimeFormatters = isPlainObject(_context) ? _context.__datetimeFormatters : void 0;
      ctxOptions.__numberFormatters = isPlainObject(_context) ? _context.__numberFormatters : void 0;
    }
    const ctx = createCoreContext(ctxOptions);
    _isGlobal && setFallbackContext(ctx);
    return ctx;
  };
  _context = getCoreContext();
  updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
  function trackReactivityValues() {
    return [
      _locale.value,
      _fallbackLocale.value,
      _messages.value,
      _datetimeFormats.value,
      _numberFormats.value
    ];
  }
  const locale = computed({
    get: () => _locale.value,
    set: (val) => {
      _context.locale = val;
      _locale.value = val;
    }
  });
  const fallbackLocale = computed({
    get: () => _fallbackLocale.value,
    set: (val) => {
      _context.fallbackLocale = val;
      _fallbackLocale.value = val;
      updateFallbackLocale(_context, _locale.value, val);
    }
  });
  const messages2 = computed(() => _messages.value);
  const datetimeFormats = /* @__PURE__ */ computed(() => _datetimeFormats.value);
  const numberFormats = /* @__PURE__ */ computed(() => _numberFormats.value);
  function getPostTranslationHandler() {
    return isFunction(_postTranslation) ? _postTranslation : null;
  }
  function setPostTranslationHandler(handler2) {
    _postTranslation = handler2;
    _context.postTranslation = handler2;
  }
  function getMissingHandler() {
    return _missing;
  }
  function setMissingHandler(handler2) {
    if (handler2 !== null) {
      _runtimeMissing = defineCoreMissingHandler(handler2);
    }
    _missing = handler2;
    _context.missing = _runtimeMissing;
  }
  const wrapWithDeps = (fn2, argumentParser, warnType, fallbackSuccess, fallbackFail, successCondition) => {
    trackReactivityValues();
    let ret;
    try {
      if (__INTLIFY_PROD_DEVTOOLS__) {
        /* @__PURE__ */ setAdditionalMeta(/* @__PURE__ */ getMetaInfo());
      }
      if (!_isGlobal) {
        _context.fallbackContext = __root ? getFallbackContext() : void 0;
      }
      ret = fn2(_context);
    } finally {
      if (__INTLIFY_PROD_DEVTOOLS__)
        ;
      if (!_isGlobal) {
        _context.fallbackContext = void 0;
      }
    }
    if (warnType !== "translate exists" && // for not `te` (e.g `t`)
    isNumber(ret) && ret === NOT_REOSLVED || warnType === "translate exists" && !ret) {
      const [key, arg2] = argumentParser();
      return __root && _fallbackRoot ? fallbackSuccess(__root) : fallbackFail(key);
    } else if (successCondition(ret)) {
      return ret;
    } else {
      throw createI18nError(I18nErrorCodes.UNEXPECTED_RETURN_TYPE);
    }
  };
  function t2(...args) {
    return wrapWithDeps((context) => Reflect.apply(translate, null, [context, ...args]), () => parseTranslateArgs(...args), "translate", (root2) => Reflect.apply(root2.t, root2, [...args]), (key) => key, (val) => isString(val));
  }
  function rt2(...args) {
    const [arg1, arg2, arg3] = args;
    if (arg3 && !isObject(arg3)) {
      throw createI18nError(I18nErrorCodes.INVALID_ARGUMENT);
    }
    return t2(...[arg1, arg2, assign$1({ resolvedMessage: true }, arg3 || {})]);
  }
  function d2(...args) {
    return wrapWithDeps((context) => Reflect.apply(datetime, null, [context, ...args]), () => parseDateTimeArgs(...args), "datetime format", (root2) => Reflect.apply(root2.d, root2, [...args]), () => MISSING_RESOLVE_VALUE, (val) => isString(val) || isArray$1(val));
  }
  function n(...args) {
    return wrapWithDeps((context) => Reflect.apply(number4, null, [context, ...args]), () => parseNumberArgs(...args), "number format", (root2) => Reflect.apply(root2.n, root2, [...args]), () => MISSING_RESOLVE_VALUE, (val) => isString(val) || isArray$1(val));
  }
  function normalize(values) {
    return values.map((val) => isString(val) || isNumber(val) || isBoolean(val) ? createTextNode(String(val)) : val);
  }
  const interpolate = (val) => val;
  const processor = {
    normalize,
    interpolate,
    type: "vnode"
  };
  function translateVNode(...args) {
    return wrapWithDeps((context) => {
      let ret;
      const _context2 = context;
      try {
        _context2.processor = processor;
        ret = Reflect.apply(translate, null, [_context2, ...args]);
      } finally {
        _context2.processor = null;
      }
      return ret;
    }, () => parseTranslateArgs(...args), "translate", (root2) => root2[TranslateVNodeSymbol](...args), (key) => [createTextNode(key)], (val) => isArray$1(val));
  }
  function numberParts(...args) {
    return wrapWithDeps((context) => Reflect.apply(number4, null, [context, ...args]), () => parseNumberArgs(...args), "number format", (root2) => root2[NumberPartsSymbol](...args), NOOP_RETURN_ARRAY, (val) => isString(val) || isArray$1(val));
  }
  function datetimeParts(...args) {
    return wrapWithDeps((context) => Reflect.apply(datetime, null, [context, ...args]), () => parseDateTimeArgs(...args), "datetime format", (root2) => root2[DatetimePartsSymbol](...args), NOOP_RETURN_ARRAY, (val) => isString(val) || isArray$1(val));
  }
  function setPluralRules(rules2) {
    _pluralRules = rules2;
    _context.pluralRules = _pluralRules;
  }
  function te2(key, locale2) {
    return wrapWithDeps(() => {
      if (!key) {
        return false;
      }
      const targetLocale = isString(locale2) ? locale2 : _locale.value;
      const message2 = getLocaleMessage(targetLocale);
      const resolved = _context.messageResolver(message2, key);
      return isMessageAST(resolved) || isMessageFunction(resolved) || isString(resolved);
    }, () => [key], "translate exists", (root2) => {
      return Reflect.apply(root2.te, root2, [key, locale2]);
    }, NOOP_RETURN_FALSE, (val) => isBoolean(val));
  }
  function resolveMessages(key) {
    let messages22 = null;
    const locales = fallbackWithLocaleChain(_context, _fallbackLocale.value, _locale.value);
    for (let i2 = 0; i2 < locales.length; i2++) {
      const targetLocaleMessages = _messages.value[locales[i2]] || {};
      const messageValue = _context.messageResolver(targetLocaleMessages, key);
      if (messageValue != null) {
        messages22 = messageValue;
        break;
      }
    }
    return messages22;
  }
  function tm2(key) {
    const messages22 = resolveMessages(key);
    return messages22 != null ? messages22 : __root ? __root.tm(key) || {} : {};
  }
  function getLocaleMessage(locale2) {
    return _messages.value[locale2] || {};
  }
  function setLocaleMessage(locale2, message2) {
    if (flatJson) {
      const _message = { [locale2]: message2 };
      for (const key in _message) {
        if (hasOwn(_message, key)) {
          handleFlatJson(_message[key]);
        }
      }
      message2 = _message[locale2];
    }
    _messages.value[locale2] = message2;
    _context.messages = _messages.value;
  }
  function mergeLocaleMessage(locale2, message2) {
    _messages.value[locale2] = _messages.value[locale2] || {};
    const _message = { [locale2]: message2 };
    if (flatJson) {
      for (const key in _message) {
        if (hasOwn(_message, key)) {
          handleFlatJson(_message[key]);
        }
      }
    }
    message2 = _message[locale2];
    deepCopy(message2, _messages.value[locale2]);
    _context.messages = _messages.value;
  }
  function getDateTimeFormat(locale2) {
    return _datetimeFormats.value[locale2] || {};
  }
  function setDateTimeFormat(locale2, format2) {
    _datetimeFormats.value[locale2] = format2;
    _context.datetimeFormats = _datetimeFormats.value;
    clearDateTimeFormat(_context, locale2, format2);
  }
  function mergeDateTimeFormat(locale2, format2) {
    _datetimeFormats.value[locale2] = assign$1(_datetimeFormats.value[locale2] || {}, format2);
    _context.datetimeFormats = _datetimeFormats.value;
    clearDateTimeFormat(_context, locale2, format2);
  }
  function getNumberFormat(locale2) {
    return _numberFormats.value[locale2] || {};
  }
  function setNumberFormat(locale2, format2) {
    _numberFormats.value[locale2] = format2;
    _context.numberFormats = _numberFormats.value;
    clearNumberFormat(_context, locale2, format2);
  }
  function mergeNumberFormat(locale2, format2) {
    _numberFormats.value[locale2] = assign$1(_numberFormats.value[locale2] || {}, format2);
    _context.numberFormats = _numberFormats.value;
    clearNumberFormat(_context, locale2, format2);
  }
  composerID++;
  if (__root && inBrowser) {
    watch(__root.locale, (val) => {
      if (_inheritLocale) {
        _locale.value = val;
        _context.locale = val;
        updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
      }
    });
    watch(__root.fallbackLocale, (val) => {
      if (_inheritLocale) {
        _fallbackLocale.value = val;
        _context.fallbackLocale = val;
        updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
      }
    });
  }
  const composer = {
    id: composerID,
    locale,
    fallbackLocale,
    get inheritLocale() {
      return _inheritLocale;
    },
    set inheritLocale(val) {
      _inheritLocale = val;
      if (val && __root) {
        _locale.value = __root.locale.value;
        _fallbackLocale.value = __root.fallbackLocale.value;
        updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
      }
    },
    get availableLocales() {
      return Object.keys(_messages.value).sort();
    },
    messages: messages2,
    get modifiers() {
      return _modifiers;
    },
    get pluralRules() {
      return _pluralRules || {};
    },
    get isGlobal() {
      return _isGlobal;
    },
    get missingWarn() {
      return _missingWarn;
    },
    set missingWarn(val) {
      _missingWarn = val;
      _context.missingWarn = _missingWarn;
    },
    get fallbackWarn() {
      return _fallbackWarn;
    },
    set fallbackWarn(val) {
      _fallbackWarn = val;
      _context.fallbackWarn = _fallbackWarn;
    },
    get fallbackRoot() {
      return _fallbackRoot;
    },
    set fallbackRoot(val) {
      _fallbackRoot = val;
    },
    get fallbackFormat() {
      return _fallbackFormat;
    },
    set fallbackFormat(val) {
      _fallbackFormat = val;
      _context.fallbackFormat = _fallbackFormat;
    },
    get warnHtmlMessage() {
      return _warnHtmlMessage;
    },
    set warnHtmlMessage(val) {
      _warnHtmlMessage = val;
      _context.warnHtmlMessage = val;
    },
    get escapeParameter() {
      return _escapeParameter;
    },
    set escapeParameter(val) {
      _escapeParameter = val;
      _context.escapeParameter = val;
    },
    t: t2,
    getLocaleMessage,
    setLocaleMessage,
    mergeLocaleMessage,
    getPostTranslationHandler,
    setPostTranslationHandler,
    getMissingHandler,
    setMissingHandler,
    [SetPluralRulesSymbol]: setPluralRules
  };
  {
    composer.datetimeFormats = datetimeFormats;
    composer.numberFormats = numberFormats;
    composer.rt = rt2;
    composer.te = te2;
    composer.tm = tm2;
    composer.d = d2;
    composer.n = n;
    composer.getDateTimeFormat = getDateTimeFormat;
    composer.setDateTimeFormat = setDateTimeFormat;
    composer.mergeDateTimeFormat = mergeDateTimeFormat;
    composer.getNumberFormat = getNumberFormat;
    composer.setNumberFormat = setNumberFormat;
    composer.mergeNumberFormat = mergeNumberFormat;
    composer[InejctWithOptionSymbol] = __injectWithOption;
    composer[TranslateVNodeSymbol] = translateVNode;
    composer[DatetimePartsSymbol] = datetimeParts;
    composer[NumberPartsSymbol] = numberParts;
  }
  return composer;
}
function convertComposerOptions(options) {
  const locale = isString(options.locale) ? options.locale : DEFAULT_LOCALE;
  const fallbackLocale = isString(options.fallbackLocale) || isArray$1(options.fallbackLocale) || isPlainObject(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : locale;
  const missing = isFunction(options.missing) ? options.missing : void 0;
  const missingWarn = isBoolean(options.silentTranslationWarn) || isRegExp(options.silentTranslationWarn) ? !options.silentTranslationWarn : true;
  const fallbackWarn = isBoolean(options.silentFallbackWarn) || isRegExp(options.silentFallbackWarn) ? !options.silentFallbackWarn : true;
  const fallbackRoot = isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;
  const fallbackFormat = !!options.formatFallbackMessages;
  const modifiers = isPlainObject(options.modifiers) ? options.modifiers : {};
  const pluralizationRules = options.pluralizationRules;
  const postTranslation = isFunction(options.postTranslation) ? options.postTranslation : void 0;
  const warnHtmlMessage = isString(options.warnHtmlInMessage) ? options.warnHtmlInMessage !== "off" : true;
  const escapeParameter = !!options.escapeParameterHtml;
  const inheritLocale = isBoolean(options.sync) ? options.sync : true;
  let messages2 = options.messages;
  if (isPlainObject(options.sharedMessages)) {
    const sharedMessages = options.sharedMessages;
    const locales = Object.keys(sharedMessages);
    messages2 = locales.reduce((messages22, locale2) => {
      const message2 = messages22[locale2] || (messages22[locale2] = {});
      assign$1(message2, sharedMessages[locale2]);
      return messages22;
    }, messages2 || {});
  }
  const { __i18n, __root, __injectWithOption } = options;
  const datetimeFormats = options.datetimeFormats;
  const numberFormats = options.numberFormats;
  const flatJson = options.flatJson;
  return {
    locale,
    fallbackLocale,
    messages: messages2,
    flatJson,
    datetimeFormats,
    numberFormats,
    missing,
    missingWarn,
    fallbackWarn,
    fallbackRoot,
    fallbackFormat,
    modifiers,
    pluralRules: pluralizationRules,
    postTranslation,
    warnHtmlMessage,
    escapeParameter,
    messageResolver: options.messageResolver,
    inheritLocale,
    __i18n,
    __root,
    __injectWithOption
  };
}
function createVueI18n(options = {}) {
  const composer = createComposer(convertComposerOptions(options));
  const { __extender } = options;
  const vueI18n = {
    // id
    id: composer.id,
    // locale
    get locale() {
      return composer.locale.value;
    },
    set locale(val) {
      composer.locale.value = val;
    },
    // fallbackLocale
    get fallbackLocale() {
      return composer.fallbackLocale.value;
    },
    set fallbackLocale(val) {
      composer.fallbackLocale.value = val;
    },
    // messages
    get messages() {
      return composer.messages.value;
    },
    // datetimeFormats
    get datetimeFormats() {
      return composer.datetimeFormats.value;
    },
    // numberFormats
    get numberFormats() {
      return composer.numberFormats.value;
    },
    // availableLocales
    get availableLocales() {
      return composer.availableLocales;
    },
    // missing
    get missing() {
      return composer.getMissingHandler();
    },
    set missing(handler2) {
      composer.setMissingHandler(handler2);
    },
    // silentTranslationWarn
    get silentTranslationWarn() {
      return isBoolean(composer.missingWarn) ? !composer.missingWarn : composer.missingWarn;
    },
    set silentTranslationWarn(val) {
      composer.missingWarn = isBoolean(val) ? !val : val;
    },
    // silentFallbackWarn
    get silentFallbackWarn() {
      return isBoolean(composer.fallbackWarn) ? !composer.fallbackWarn : composer.fallbackWarn;
    },
    set silentFallbackWarn(val) {
      composer.fallbackWarn = isBoolean(val) ? !val : val;
    },
    // modifiers
    get modifiers() {
      return composer.modifiers;
    },
    // formatFallbackMessages
    get formatFallbackMessages() {
      return composer.fallbackFormat;
    },
    set formatFallbackMessages(val) {
      composer.fallbackFormat = val;
    },
    // postTranslation
    get postTranslation() {
      return composer.getPostTranslationHandler();
    },
    set postTranslation(handler2) {
      composer.setPostTranslationHandler(handler2);
    },
    // sync
    get sync() {
      return composer.inheritLocale;
    },
    set sync(val) {
      composer.inheritLocale = val;
    },
    // warnInHtmlMessage
    get warnHtmlInMessage() {
      return composer.warnHtmlMessage ? "warn" : "off";
    },
    set warnHtmlInMessage(val) {
      composer.warnHtmlMessage = val !== "off";
    },
    // escapeParameterHtml
    get escapeParameterHtml() {
      return composer.escapeParameter;
    },
    set escapeParameterHtml(val) {
      composer.escapeParameter = val;
    },
    // pluralizationRules
    get pluralizationRules() {
      return composer.pluralRules || {};
    },
    // for internal
    __composer: composer,
    // t
    t(...args) {
      return Reflect.apply(composer.t, composer, [...args]);
    },
    // rt
    rt(...args) {
      return Reflect.apply(composer.rt, composer, [...args]);
    },
    // te
    te(key, locale) {
      return composer.te(key, locale);
    },
    // tm
    tm(key) {
      return composer.tm(key);
    },
    // getLocaleMessage
    getLocaleMessage(locale) {
      return composer.getLocaleMessage(locale);
    },
    // setLocaleMessage
    setLocaleMessage(locale, message2) {
      composer.setLocaleMessage(locale, message2);
    },
    // mergeLocaleMessage
    mergeLocaleMessage(locale, message2) {
      composer.mergeLocaleMessage(locale, message2);
    },
    // d
    d(...args) {
      return Reflect.apply(composer.d, composer, [...args]);
    },
    // getDateTimeFormat
    getDateTimeFormat(locale) {
      return composer.getDateTimeFormat(locale);
    },
    // setDateTimeFormat
    setDateTimeFormat(locale, format2) {
      composer.setDateTimeFormat(locale, format2);
    },
    // mergeDateTimeFormat
    mergeDateTimeFormat(locale, format2) {
      composer.mergeDateTimeFormat(locale, format2);
    },
    // n
    n(...args) {
      return Reflect.apply(composer.n, composer, [...args]);
    },
    // getNumberFormat
    getNumberFormat(locale) {
      return composer.getNumberFormat(locale);
    },
    // setNumberFormat
    setNumberFormat(locale, format2) {
      composer.setNumberFormat(locale, format2);
    },
    // mergeNumberFormat
    mergeNumberFormat(locale, format2) {
      composer.mergeNumberFormat(locale, format2);
    }
  };
  vueI18n.__extender = __extender;
  return vueI18n;
}
function defineMixin(vuei18n, composer, i18n2) {
  return {
    beforeCreate() {
      const instance = getCurrentInstance();
      if (!instance) {
        throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);
      }
      const options = this.$options;
      if (options.i18n) {
        const optionsI18n = options.i18n;
        if (options.__i18n) {
          optionsI18n.__i18n = options.__i18n;
        }
        optionsI18n.__root = composer;
        if (this === this.$root) {
          this.$i18n = mergeToGlobal(vuei18n, optionsI18n);
        } else {
          optionsI18n.__injectWithOption = true;
          optionsI18n.__extender = i18n2.__vueI18nExtend;
          this.$i18n = createVueI18n(optionsI18n);
          const _vueI18n = this.$i18n;
          if (_vueI18n.__extender) {
            _vueI18n.__disposer = _vueI18n.__extender(this.$i18n);
          }
        }
      } else if (options.__i18n) {
        if (this === this.$root) {
          this.$i18n = mergeToGlobal(vuei18n, options);
        } else {
          this.$i18n = createVueI18n({
            __i18n: options.__i18n,
            __injectWithOption: true,
            __extender: i18n2.__vueI18nExtend,
            __root: composer
          });
          const _vueI18n = this.$i18n;
          if (_vueI18n.__extender) {
            _vueI18n.__disposer = _vueI18n.__extender(this.$i18n);
          }
        }
      } else {
        this.$i18n = vuei18n;
      }
      if (options.__i18nGlobal) {
        adjustI18nResources(composer, options, options);
      }
      this.$t = (...args) => this.$i18n.t(...args);
      this.$rt = (...args) => this.$i18n.rt(...args);
      this.$te = (key, locale) => this.$i18n.te(key, locale);
      this.$d = (...args) => this.$i18n.d(...args);
      this.$n = (...args) => this.$i18n.n(...args);
      this.$tm = (key) => this.$i18n.tm(key);
      i18n2.__setInstance(instance, this.$i18n);
    },
    mounted() {
    },
    unmounted() {
      const instance = getCurrentInstance();
      if (!instance) {
        throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);
      }
      const _vueI18n = this.$i18n;
      delete this.$t;
      delete this.$rt;
      delete this.$te;
      delete this.$d;
      delete this.$n;
      delete this.$tm;
      if (_vueI18n.__disposer) {
        _vueI18n.__disposer();
        delete _vueI18n.__disposer;
        delete _vueI18n.__extender;
      }
      i18n2.__deleteInstance(instance);
      delete this.$i18n;
    }
  };
}
function mergeToGlobal(g2, options) {
  g2.locale = options.locale || g2.locale;
  g2.fallbackLocale = options.fallbackLocale || g2.fallbackLocale;
  g2.missing = options.missing || g2.missing;
  g2.silentTranslationWarn = options.silentTranslationWarn || g2.silentFallbackWarn;
  g2.silentFallbackWarn = options.silentFallbackWarn || g2.silentFallbackWarn;
  g2.formatFallbackMessages = options.formatFallbackMessages || g2.formatFallbackMessages;
  g2.postTranslation = options.postTranslation || g2.postTranslation;
  g2.warnHtmlInMessage = options.warnHtmlInMessage || g2.warnHtmlInMessage;
  g2.escapeParameterHtml = options.escapeParameterHtml || g2.escapeParameterHtml;
  g2.sync = options.sync || g2.sync;
  g2.__composer[SetPluralRulesSymbol](options.pluralizationRules || g2.pluralizationRules);
  const messages2 = getLocaleMessages(g2.locale, {
    messages: options.messages,
    __i18n: options.__i18n
  });
  Object.keys(messages2).forEach((locale) => g2.mergeLocaleMessage(locale, messages2[locale]));
  if (options.datetimeFormats) {
    Object.keys(options.datetimeFormats).forEach((locale) => g2.mergeDateTimeFormat(locale, options.datetimeFormats[locale]));
  }
  if (options.numberFormats) {
    Object.keys(options.numberFormats).forEach((locale) => g2.mergeNumberFormat(locale, options.numberFormats[locale]));
  }
  return g2;
}
const baseFormatProps = {
  tag: {
    type: [String, Object]
  },
  locale: {
    type: String
  },
  scope: {
    type: String,
    // NOTE: avoid https://github.com/microsoft/rushstack/issues/1050
    validator: (val) => val === "parent" || val === "global",
    default: "parent"
    /* ComponentI18nScope */
  },
  i18n: {
    type: Object
  }
};
function getInterpolateArg({ slots }, keys2) {
  if (keys2.length === 1 && keys2[0] === "default") {
    const ret = slots.default ? slots.default() : [];
    return ret.reduce((slot, current) => {
      return [
        ...slot,
        // prettier-ignore
        ...current.type === Fragment ? current.children : [current]
      ];
    }, []);
  } else {
    return keys2.reduce((arg, key) => {
      const slot = slots[key];
      if (slot) {
        arg[key] = slot();
      }
      return arg;
    }, create());
  }
}
function getFragmentableTag() {
  return Fragment;
}
const TranslationImpl = /* @__PURE__ */ defineComponent({
  /* eslint-disable */
  name: "i18n-t",
  props: assign$1({
    keypath: {
      type: String,
      required: true
    },
    plural: {
      type: [Number, String],
      validator: (val) => isNumber(val) || !isNaN(val)
    }
  }, baseFormatProps),
  /* eslint-enable */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  setup(props, context) {
    const { slots, attrs } = context;
    const i18n2 = props.i18n || useI18n({
      useScope: props.scope,
      __useComponent: true
    });
    return () => {
      const keys2 = Object.keys(slots).filter((key) => key[0] !== "_");
      const options = create();
      if (props.locale) {
        options.locale = props.locale;
      }
      if (props.plural !== void 0) {
        options.plural = isString(props.plural) ? +props.plural : props.plural;
      }
      const arg = getInterpolateArg(context, keys2);
      const children = i18n2[TranslateVNodeSymbol](props.keypath, arg, options);
      const assignedAttrs = assign$1(create(), attrs);
      const tag = isString(props.tag) || isObject(props.tag) ? props.tag : getFragmentableTag();
      return h$1(tag, assignedAttrs, children);
    };
  }
});
const Translation = TranslationImpl;
function isVNode(target) {
  return isArray$1(target) && !isString(target[0]);
}
function renderFormatter(props, context, slotKeys, partFormatter) {
  const { slots, attrs } = context;
  return () => {
    const options = { part: true };
    let overrides = create();
    if (props.locale) {
      options.locale = props.locale;
    }
    if (isString(props.format)) {
      options.key = props.format;
    } else if (isObject(props.format)) {
      if (isString(props.format.key)) {
        options.key = props.format.key;
      }
      overrides = Object.keys(props.format).reduce((options2, prop) => {
        return slotKeys.includes(prop) ? assign$1(create(), options2, { [prop]: props.format[prop] }) : options2;
      }, create());
    }
    const parts = partFormatter(...[props.value, options, overrides]);
    let children = [options.key];
    if (isArray$1(parts)) {
      children = parts.map((part, index) => {
        const slot = slots[part.type];
        const node = slot ? slot({ [part.type]: part.value, index, parts }) : [part.value];
        if (isVNode(node)) {
          node[0].key = `${part.type}-${index}`;
        }
        return node;
      });
    } else if (isString(parts)) {
      children = [parts];
    }
    const assignedAttrs = assign$1(create(), attrs);
    const tag = isString(props.tag) || isObject(props.tag) ? props.tag : getFragmentableTag();
    return h$1(tag, assignedAttrs, children);
  };
}
const NumberFormatImpl = /* @__PURE__ */ defineComponent({
  /* eslint-disable */
  name: "i18n-n",
  props: assign$1({
    value: {
      type: Number,
      required: true
    },
    format: {
      type: [String, Object]
    }
  }, baseFormatProps),
  /* eslint-enable */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  setup(props, context) {
    const i18n2 = props.i18n || useI18n({
      useScope: props.scope,
      __useComponent: true
    });
    return renderFormatter(props, context, NUMBER_FORMAT_OPTIONS_KEYS, (...args) => (
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      i18n2[NumberPartsSymbol](...args)
    ));
  }
});
const NumberFormat = NumberFormatImpl;
function getComposer$1(i18n2, instance) {
  const i18nInternal = i18n2;
  if (i18n2.mode === "composition") {
    return i18nInternal.__getInstance(instance) || i18n2.global;
  } else {
    const vueI18n = i18nInternal.__getInstance(instance);
    return vueI18n != null ? vueI18n.__composer : i18n2.global.__composer;
  }
}
function vTDirective(i18n2) {
  const _process = (binding) => {
    const { instance, value } = binding;
    if (!instance || !instance.$) {
      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);
    }
    const composer = getComposer$1(i18n2, instance.$);
    const parsedValue = parseValue(value);
    return [
      Reflect.apply(composer.t, composer, [...makeParams(parsedValue)]),
      composer
    ];
  };
  const register2 = (el2, binding) => {
    const [textContent, composer] = _process(binding);
    if (inBrowser && i18n2.global === composer) {
      el2.__i18nWatcher = watch(composer.locale, () => {
        binding.instance && binding.instance.$forceUpdate();
      });
    }
    el2.__composer = composer;
    el2.textContent = textContent;
  };
  const unregister = (el2) => {
    if (inBrowser && el2.__i18nWatcher) {
      el2.__i18nWatcher();
      el2.__i18nWatcher = void 0;
      delete el2.__i18nWatcher;
    }
    if (el2.__composer) {
      el2.__composer = void 0;
      delete el2.__composer;
    }
  };
  const update = (el2, { value }) => {
    if (el2.__composer) {
      const composer = el2.__composer;
      const parsedValue = parseValue(value);
      el2.textContent = Reflect.apply(composer.t, composer, [
        ...makeParams(parsedValue)
      ]);
    }
  };
  const getSSRProps = (binding) => {
    const [textContent] = _process(binding);
    return { textContent };
  };
  return {
    created: register2,
    unmounted: unregister,
    beforeUpdate: update,
    getSSRProps
  };
}
function parseValue(value) {
  if (isString(value)) {
    return { path: value };
  } else if (isPlainObject(value)) {
    if (!("path" in value)) {
      throw createI18nError(I18nErrorCodes.REQUIRED_VALUE, "path");
    }
    return value;
  } else {
    throw createI18nError(I18nErrorCodes.INVALID_VALUE);
  }
}
function makeParams(value) {
  const { path, locale, args, choice, plural } = value;
  const options = {};
  const named = args || {};
  if (isString(locale)) {
    options.locale = locale;
  }
  if (isNumber(choice)) {
    options.plural = choice;
  }
  if (isNumber(plural)) {
    options.plural = plural;
  }
  return [path, named, options];
}
function apply(app, i18n2, ...options) {
  const pluginOptions = isPlainObject(options[0]) ? options[0] : {};
  const globalInstall = isBoolean(pluginOptions.globalInstall) ? pluginOptions.globalInstall : true;
  if (globalInstall) {
    [Translation.name, "I18nT"].forEach((name) => app.component(name, Translation));
    [NumberFormat.name, "I18nN"].forEach((name) => app.component(name, NumberFormat));
    [DatetimeFormat.name, "I18nD"].forEach((name) => app.component(name, DatetimeFormat));
  }
  {
    app.directive("t", vTDirective(i18n2));
  }
}
const I18nInjectionKey = /* @__PURE__ */ makeSymbol("global-vue-i18n");
function createI18n(options = {}) {
  const __legacyMode = __VUE_I18N_LEGACY_API__ && isBoolean(options.legacy) ? options.legacy : __VUE_I18N_LEGACY_API__;
  const __globalInjection = isBoolean(options.globalInjection) ? options.globalInjection : true;
  const __instances = /* @__PURE__ */ new Map();
  const [globalScope, __global] = createGlobal(options, __legacyMode);
  const symbol = /* @__PURE__ */ makeSymbol("");
  function __getInstance(component) {
    return __instances.get(component) || null;
  }
  function __setInstance(component, instance) {
    __instances.set(component, instance);
  }
  function __deleteInstance(component) {
    __instances.delete(component);
  }
  const i18n2 = {
    // mode
    get mode() {
      return __VUE_I18N_LEGACY_API__ && __legacyMode ? "legacy" : "composition";
    },
    // install plugin
    async install(app, ...options2) {
      app.__VUE_I18N_SYMBOL__ = symbol;
      app.provide(app.__VUE_I18N_SYMBOL__, i18n2);
      if (isPlainObject(options2[0])) {
        const opts = options2[0];
        i18n2.__composerExtend = opts.__composerExtend;
        i18n2.__vueI18nExtend = opts.__vueI18nExtend;
      }
      let globalReleaseHandler = null;
      if (!__legacyMode && __globalInjection) {
        globalReleaseHandler = injectGlobalFields(app, i18n2.global);
      }
      if (__VUE_I18N_FULL_INSTALL__) {
        apply(app, i18n2, ...options2);
      }
      if (__VUE_I18N_LEGACY_API__ && __legacyMode) {
        app.mixin(defineMixin(__global, __global.__composer, i18n2));
      }
      const unmountApp = app.unmount;
      app.unmount = () => {
        globalReleaseHandler && globalReleaseHandler();
        i18n2.dispose();
        unmountApp();
      };
    },
    // global accessor
    get global() {
      return __global;
    },
    dispose() {
      globalScope.stop();
    },
    // @internal
    __instances,
    // @internal
    __getInstance,
    // @internal
    __setInstance,
    // @internal
    __deleteInstance
  };
  return i18n2;
}
function useI18n(options = {}) {
  const instance = getCurrentInstance();
  if (instance == null) {
    throw createI18nError(I18nErrorCodes.MUST_BE_CALL_SETUP_TOP);
  }
  if (!instance.isCE && instance.appContext.app != null && !instance.appContext.app.__VUE_I18N_SYMBOL__) {
    throw createI18nError(I18nErrorCodes.NOT_INSTALLED);
  }
  const i18n2 = getI18nInstance(instance);
  const gl = getGlobalComposer(i18n2);
  const componentOptions = getComponentOptions(instance);
  const scope = getScope(options, componentOptions);
  if (scope === "global") {
    adjustI18nResources(gl, options, componentOptions);
    return gl;
  }
  if (scope === "parent") {
    let composer2 = getComposer(i18n2, instance, options.__useComponent);
    if (composer2 == null) {
      composer2 = gl;
    }
    return composer2;
  }
  const i18nInternal = i18n2;
  let composer = i18nInternal.__getInstance(instance);
  if (composer == null) {
    const composerOptions = assign$1({}, options);
    if ("__i18n" in componentOptions) {
      composerOptions.__i18n = componentOptions.__i18n;
    }
    if (gl) {
      composerOptions.__root = gl;
    }
    composer = createComposer(composerOptions);
    if (i18nInternal.__composerExtend) {
      composer[DisposeSymbol] = i18nInternal.__composerExtend(composer);
    }
    setupLifeCycle(i18nInternal, instance, composer);
    i18nInternal.__setInstance(instance, composer);
  }
  return composer;
}
function createGlobal(options, legacyMode) {
  const scope = effectScope();
  const obj = __VUE_I18N_LEGACY_API__ && legacyMode ? scope.run(() => createVueI18n(options)) : scope.run(() => createComposer(options));
  if (obj == null) {
    throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);
  }
  return [scope, obj];
}
function getI18nInstance(instance) {
  const i18n2 = inject(!instance.isCE ? instance.appContext.app.__VUE_I18N_SYMBOL__ : I18nInjectionKey);
  if (!i18n2) {
    throw createI18nError(!instance.isCE ? I18nErrorCodes.UNEXPECTED_ERROR : I18nErrorCodes.NOT_INSTALLED_WITH_PROVIDE);
  }
  return i18n2;
}
function getScope(options, componentOptions) {
  return isEmptyObject(options) ? "__i18n" in componentOptions ? "local" : "global" : !options.useScope ? "local" : options.useScope;
}
function getGlobalComposer(i18n2) {
  return i18n2.mode === "composition" ? i18n2.global : i18n2.global.__composer;
}
function getComposer(i18n2, target, useComponent = false) {
  let composer = null;
  const root2 = target.root;
  let current = getParentComponentInstance(target, useComponent);
  while (current != null) {
    const i18nInternal = i18n2;
    if (i18n2.mode === "composition") {
      composer = i18nInternal.__getInstance(current);
    } else {
      if (__VUE_I18N_LEGACY_API__) {
        const vueI18n = i18nInternal.__getInstance(current);
        if (vueI18n != null) {
          composer = vueI18n.__composer;
          if (useComponent && composer && !composer[InejctWithOptionSymbol]) {
            composer = null;
          }
        }
      }
    }
    if (composer != null) {
      break;
    }
    if (root2 === current) {
      break;
    }
    current = current.parent;
  }
  return composer;
}
function getParentComponentInstance(target, useComponent = false) {
  if (target == null) {
    return null;
  }
  return !useComponent ? target.parent : target.vnode.ctx || target.parent;
}
function setupLifeCycle(i18n2, target, composer) {
  onMounted(() => {
  }, target);
  onUnmounted(() => {
    const _composer = composer;
    i18n2.__deleteInstance(target);
    const dispose = _composer[DisposeSymbol];
    if (dispose) {
      dispose();
      delete _composer[DisposeSymbol];
    }
  }, target);
}
const globalExportProps = [
  "locale",
  "fallbackLocale",
  "availableLocales"
];
const globalExportMethods = ["t", "rt", "d", "n", "tm", "te"];
function injectGlobalFields(app, composer) {
  const i18n2 = /* @__PURE__ */ Object.create(null);
  globalExportProps.forEach((prop) => {
    const desc = Object.getOwnPropertyDescriptor(composer, prop);
    if (!desc) {
      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);
    }
    const wrap = isRef(desc.value) ? {
      get() {
        return desc.value.value;
      },
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      set(val) {
        desc.value.value = val;
      }
    } : {
      get() {
        return desc.get && desc.get();
      }
    };
    Object.defineProperty(i18n2, prop, wrap);
  });
  app.config.globalProperties.$i18n = i18n2;
  globalExportMethods.forEach((method4) => {
    const desc = Object.getOwnPropertyDescriptor(composer, method4);
    if (!desc || !desc.value) {
      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);
    }
    Object.defineProperty(app.config.globalProperties, `$${method4}`, desc);
  });
  const dispose = () => {
    delete app.config.globalProperties.$i18n;
    globalExportMethods.forEach((method4) => {
      delete app.config.globalProperties[`$${method4}`];
    });
  };
  return dispose;
}
const DatetimeFormatImpl = /* @__PURE__ */ defineComponent({
  /* eslint-disable */
  name: "i18n-d",
  props: assign$1({
    value: {
      type: [Number, Date],
      required: true
    },
    format: {
      type: [String, Object]
    }
  }, baseFormatProps),
  /* eslint-enable */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  setup(props, context) {
    const i18n2 = props.i18n || useI18n({
      useScope: props.scope,
      __useComponent: true
    });
    return renderFormatter(props, context, DATETIME_FORMAT_OPTIONS_KEYS, (...args) => (
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      i18n2[DatetimePartsSymbol](...args)
    ));
  }
});
const DatetimeFormat = DatetimeFormatImpl;
{
  initFeatureFlags();
}
registerMessageCompiler(compile);
registerMessageResolver(resolveValue);
registerLocaleFallbacker(fallbackWithLocaleChain);
if (__INTLIFY_PROD_DEVTOOLS__) {
  const target = getGlobalThis();
  target.__INTLIFY__ = true;
  setDevToolsHook(target.__INTLIFY_DEVTOOLS_GLOBAL_HOOK__);
}
var zhTw = {
  name: "zh-tw",
  el: {
    breadcrumb: {
      label: "面包屑"
    },
    colorpicker: {
      confirm: "確認",
      clear: "清空",
      defaultLabel: "色彩選擇器",
      description: "目前色彩為 {color}。按一下 Enter 以選擇新色彩。",
      alphaLabel: "選擇透明度的值"
    },
    datepicker: {
      now: "現在",
      today: "今天",
      cancel: "取消",
      clear: "清空",
      confirm: "確認",
      dateTablePrompt: "使用方向鍵與 Enter 鍵以選擇日期",
      monthTablePrompt: "使用方向鍵與 Enter 鍵以選擇月份",
      yearTablePrompt: "使用方向鍵與 Enter 鍵以選擇年份",
      selectedDate: "已選日期",
      selectDate: "選擇日期",
      selectTime: "選擇時間",
      startDate: "開始日期",
      startTime: "開始時間",
      endDate: "結束日期",
      endTime: "結束時間",
      prevYear: "前一年",
      nextYear: "後一年",
      prevMonth: "上個月",
      nextMonth: "下個月",
      year: "年",
      month1: "1 月",
      month2: "2 月",
      month3: "3 月",
      month4: "4 月",
      month5: "5 月",
      month6: "6 月",
      month7: "7 月",
      month8: "8 月",
      month9: "9 月",
      month10: "10 月",
      month11: "11 月",
      month12: "12 月",
      weeks: {
        sun: "日",
        mon: "一",
        tue: "二",
        wed: "三",
        thu: "四",
        fri: "五",
        sat: "六"
      },
      weeksFull: {
        sun: "星期日",
        mon: "星期一",
        tue: "星期二",
        wed: "星期三",
        thu: "星期四",
        fri: "星期五",
        sat: "星期六"
      },
      months: {
        jan: "一月",
        feb: "二月",
        mar: "三月",
        apr: "四月",
        may: "五月",
        jun: "六月",
        jul: "七月",
        aug: "八月",
        sep: "九月",
        oct: "十月",
        nov: "十一月",
        dec: "十二月"
      }
    },
    inputNumber: {
      decrease: "減少數值",
      increase: "增加數值"
    },
    select: {
      loading: "載入中",
      noMatch: "無相符資料",
      noData: "無資料",
      placeholder: "請選擇"
    },
    mention: {
      loading: "載入中"
    },
    dropdown: {
      toggleDropdown: "切換下拉選單"
    },
    cascader: {
      noMatch: "無相符資料",
      loading: "載入中",
      placeholder: "請選擇",
      noData: "無資料"
    },
    pagination: {
      goto: "前往",
      pagesize: "項/頁",
      total: "共 {total} 項",
      pageClassifier: "頁",
      page: "頁",
      prev: "上一頁",
      next: "下一頁",
      currentPage: "第 {pager} 頁",
      prevPages: "向前 {pager} 頁",
      nextPages: "向後 {pager} 頁",
      deprecationWarning: "偵測到已過時的使用方式，請參閱 el-pagination 說明文件以了解更多資訊"
    },
    dialog: {
      close: "關閉此對話框"
    },
    drawer: {
      close: "關閉此對話框"
    },
    messagebox: {
      title: "提示",
      confirm: "確定",
      cancel: "取消",
      error: "輸入的資料不符規定!",
      close: "關閉此對話框"
    },
    upload: {
      deleteTip: "按一下 Delete 鍵以刪除",
      delete: "刪除",
      preview: "查看圖片",
      continue: "繼續上傳"
    },
    slider: {
      defaultLabel: "滑桿介於 {min} 至 {max}",
      defaultRangeStartLabel: "選擇起始值",
      defaultRangeEndLabel: "選擇結束值"
    },
    table: {
      emptyText: "暫無資料",
      confirmFilter: "篩選",
      resetFilter: "重置",
      clearFilter: "全部",
      sumText: "合計"
    },
    tour: {
      next: "下一步",
      previous: "上一步",
      finish: "結束導覽"
    },
    tree: {
      emptyText: "暫無資料"
    },
    transfer: {
      noMatch: "無相符資料",
      noData: "無資料",
      titles: ["列表 1", "列表 2"],
      filterPlaceholder: "請輸入搜尋內容",
      noCheckedFormat: "共 {total} 項",
      hasCheckedFormat: "已選 {checked}/{total} 項"
    },
    image: {
      error: "載入失敗"
    },
    pageHeader: {
      title: "返回"
    },
    popconfirm: {
      confirmButtonText: "確認",
      cancelButtonText: "取消"
    },
    carousel: {
      leftArrow: "上一張投影片",
      rightArrow: "下一張投影片",
      indicator: "投影片切換至索引 {index}"
    }
  }
};
var ja = {
  name: "ja",
  el: {
    breadcrumb: {
      label: "Breadcrumb"
    },
    colorpicker: {
      confirm: "OK",
      clear: "クリア"
    },
    datepicker: {
      now: "現在",
      today: "今日",
      cancel: "キャンセル",
      clear: "クリア",
      confirm: "OK",
      selectDate: "日付を選択",
      selectTime: "時間を選択",
      startDate: "開始日",
      startTime: "開始時間",
      endDate: "終了日",
      endTime: "終了時間",
      prevYear: "前年",
      nextYear: "翌年",
      prevMonth: "前月",
      nextMonth: "翌月",
      year: "年",
      month1: "1月",
      month2: "2月",
      month3: "3月",
      month4: "4月",
      month5: "5月",
      month6: "6月",
      month7: "7月",
      month8: "8月",
      month9: "9月",
      month10: "10月",
      month11: "11月",
      month12: "12月",
      weeks: {
        sun: "日",
        mon: "月",
        tue: "火",
        wed: "水",
        thu: "木",
        fri: "金",
        sat: "土"
      },
      months: {
        jan: "1月",
        feb: "2月",
        mar: "3月",
        apr: "4月",
        may: "5月",
        jun: "6月",
        jul: "7月",
        aug: "8月",
        sep: "9月",
        oct: "10月",
        nov: "11月",
        dec: "12月"
      }
    },
    select: {
      loading: "ロード中",
      noMatch: "データなし",
      noData: "データなし",
      placeholder: "選択してください"
    },
    mention: {
      loading: "ロード中"
    },
    cascader: {
      noMatch: "データなし",
      loading: "ロード中",
      placeholder: "選択してください",
      noData: "データなし"
    },
    pagination: {
      goto: "",
      pagesize: "件/ページ",
      total: "総計 {total} 件",
      pageClassifier: "ページ目へ",
      page: "Page",
      prev: "Go to previous page",
      next: "Go to next page",
      currentPage: "page {pager}",
      prevPages: "Previous {pager} pages",
      nextPages: "Next {pager} pages"
    },
    messagebox: {
      title: "メッセージ",
      confirm: "OK",
      cancel: "キャンセル",
      error: "正しくない入力"
    },
    upload: {
      deleteTip: "Delキーを押して削除する",
      delete: "削除する",
      preview: "プレビュー",
      continue: "続行する"
    },
    table: {
      emptyText: "データなし",
      confirmFilter: "確認",
      resetFilter: "初期化",
      clearFilter: "すべて",
      sumText: "合計"
    },
    tour: {
      next: "次へ",
      previous: "前へ",
      finish: "ツアー終了"
    },
    tree: {
      emptyText: "データなし"
    },
    transfer: {
      noMatch: "データなし",
      noData: "データなし",
      titles: ["リスト 1", "リスト 2"],
      filterPlaceholder: "キーワードを入力",
      noCheckedFormat: "総計 {total} 件",
      hasCheckedFormat: "{checked}/{total} を選択した"
    },
    image: {
      error: "失敗"
    },
    pageHeader: {
      title: "戻る"
    },
    popconfirm: {
      confirmButtonText: "はい",
      cancelButtonText: "いいえ"
    },
    carousel: {
      leftArrow: "Carousel arrow left",
      rightArrow: "Carousel arrow right",
      indicator: "Carousel switch to index {index}"
    }
  }
};
const zhLocale = {
  // 模块导航
  module: {
    index: "首页",
    toolbox: "AI导航",
    tool: "AI工具",
    agent: "智能体",
    chat: "聊天",
    app: "应用",
    find: "发现",
    // AI导航
    library: "知识库",
    crop_space: "企业空间"
  },
  // 浏览器相关
  browser: {
    newTab: "新标签页",
    search_placeholder: "在百度AI中搜索，或者输入一个网址",
    knowledge_clean: "知识清洗",
    load_error: "加载失败",
    reload: "重新加载",
    not_logged_in: "未登录",
    login: "立即登录",
    window_position: "窗口位置",
    leftWindow: "左侧小窗",
    centerWindow: "居中大窗",
    rightWindow: "右侧小窗",
    alwaysOnTop: "窗口置顶"
  },
  // 清洗功能
  clean: {
    content: "内容抽取",
    knowledge: "知识整理",
    summarize: "知识萃取"
  },
  // 更新相关
  updater: {
    newVersion: "发现新版本，是否立即更新？",
    newVersionTitle: "更新提示",
    downloading: "正在下载更新",
    completed: "更新完成，是否立即重启？",
    completedTitle: "更新提示",
    noUpdate: "当前已是最新版本",
    currentVersion: "当前版本 v{version}",
    checkUpdate: "检查更新"
  },
  // 通用文本
  common: {
    new_friend: "新手指引",
    help_feedback: "帮助与反馈",
    attach: "附件",
    screenshot: "截图",
    title: "标题",
    desc: "描述",
    create_time: "创建时间",
    update_time: "更新时间",
    recently_updated: "最近更新",
    loading: "加载中",
    // 加载更多
    load_more: "加载更多",
    load_new: "加载新消息",
    no_data: "暂无数据",
    unknown: "未知",
    usual: "常用",
    render: "渲染",
    preview: "预览",
    code: "代码",
    split: "分屏",
    all: "全部",
    recently_visit: "最近访问",
    confirm_delete: "确定删除该项？",
    copied: "已复制",
    image_cropper: "图片裁剪",
    back_home: "返回首页",
    go_admin: "去后台"
  },
  // 状态提示
  status: {
    error: "错误",
    warning: "警告",
    info: "信息",
    success: "成功",
    updated: "已更新",
    sent: "已发送",
    login_success: "已登录",
    logout_success: "已退出登录",
    not_found_account: "未找到账号，验证后直接登录"
  },
  // 操作按钮
  action: {
    login: "登录",
    logout: "退出登录",
    search: "搜索",
    setting: "设置",
    confirm: "确认",
    cancel: "取消",
    close: "关闭",
    open: "打开",
    ok: "确定",
    and: "和",
    copy: "复制",
    upload: "上传",
    download: "下载",
    del: "删除",
    add: "添加",
    create: "创建",
    edit: "编辑",
    save: "保存",
    fixed: "固定",
    unfixed: "取消固定",
    collapse: "收起",
    expand: "展开",
    back: "返回",
    share: "分享",
    favorite: "收藏",
    unfavorite: "取消收藏",
    more: "更多",
    refresh: "刷新",
    apply: "应用",
    reset: "重置",
    submit: "提交",
    manage: "管理",
    rename: "重命名",
    find: "发现",
    preview: "预览",
    reupload: "重新上传",
    send: "发送",
    stop: "停止",
    pay: "去支付",
    ok_v2: "好的"
  },
  // 表单相关
  form: {
    icon: "图标",
    name: "名称",
    desc: "描述",
    input_placeholder: "请输入",
    select_placeholder: "请选择",
    icon_placeholder: "为保证显示效果，请上传宽高比 1:1 的图片",
    required: "必填项",
    optional: "选填项",
    // 知识库公开范围
    library_view_scope: "知识库公开范围",
    library_view_public: "公开访问",
    library_view_team: "团队空间成员可访问",
    library_view_member: "知识库成员可访问",
    avatar: "头像",
    nickname: "昵称",
    select_verify: "请选择验证方式",
    email_verify: "邮箱验证",
    mobile_verify: "手机验证",
    account: "账号",
    account_alias: "手机",
    password: "密码",
    email: "邮箱",
    mobile: "手机号",
    verify_code: "验证码",
    get_verify_code: "获取验证码",
    new_password: "新密码",
    new_password_placeholder: "请输入新密码",
    new_password_confirm: "确认新密码",
    new_password_confirm_placeholder: "请再次输入新密码",
    email_format: "请输入正确的邮箱",
    mobile_format: "请输入正确手机号",
    verify_code_format: "请输入正确的验证码",
    username_length: "账号长度必须在 5-20 个字符之间",
    password_length: "密码长度必须在 8-20 个字符之间",
    password_format: "密码必须包含大小写字母和数字",
    password_not_match: "两次输入的密码不一致",
    change: "修改"
  },
  // 首页相关
  index: {
    agent_recommend: "智能体精选",
    use_history: "{count}人聊过"
  },
  // 登录相关
  login: {
    agree: "登录即视您同意",
    terms_of_service: "条款和条件",
    privacy_policy: "隐私政策",
    password_login: "密码登录",
    unregistered_account_desc: "未注册的账号验证后自动登录",
    quit: "退出"
  },
  // 聊天相关
  chat: {
    search_placholder: "搜索智能体",
    collapse_side_bar: "收起侧边栏",
    expand_side_bar: "展开侧边栏",
    history: "历史对话",
    new_conversation: "新对话",
    edit_conversation: "编辑对话名称",
    conversation_confirm_delete: "删除后，聊天记录将不可恢复。",
    input: "输入",
    output: "输出",
    start_generate: "开始生成",
    regenerate: "重新生成",
    like: "点赞",
    dislike: "取消点赞",
    input_placeholder: "发送消息",
    usage_guide: "使用指引",
    completion_empty_desc: "采用AI大模型智能生成内容，输入需求即可一键成文，快去试试吧",
    usage_case: "使用案例",
    usage_scene: "使用场景",
    online_search: "联网搜索",
    completion_generating: "内容生成中，请稍候...",
    completion_rendering: "内容渲染中...",
    // 暂无可用的智能体
    no_available_agent: "暂无可用的智能体",
    completion_completed: "已完成深度思考",
    completion_thinking: "深度思考中..."
  },
  // 知识库相关
  library: {
    home: "首页",
    name: "知识库",
    create: "创建知识库",
    all_spaces: "全员空间",
    space_name: "空间名称",
    chat: "知识库问答",
    file_count: "{count}个文件",
    upload_file: "上传文件",
    manage: "管理知识库",
    search: "搜索知识库",
    all_libraries: "全部知识库",
    empty_desc: "创建企业知识库，沉淀团队知识，提升协作效率",
    create_md: "新建知识",
    local_upload: "本地上传",
    create_folder: "新建文件夹",
    tmpl_create: "模板创建",
    github_import: "从Github导入",
    docs_qq_import: "从腾讯文档导入",
    docs_feishu_import: "从钉钉文档导入",
    docs_dingtalk_import: "从飞书文档导入"
  },
  toolbox: {
    name: "AI聚合问答",
    title: "准备好了吗？开始体验AI聚合问答啦！",
    input_placeholder: "多个AI解答你输入的问题，Shift+Enter换行，Enter发送",
    max_agent_count: "最多只能选择{count}个模型",
    search_placeholder: "搜索网站"
  },
  // 空间相关
  space: {
    create: "创建空间",
    join: "加入空间",
    manage: "管理空间",
    member: "成员管理",
    settings: "空间设置",
    space_usage: "已用 {used} / {total}",
    expand: "扩容"
  },
  // 时间相关
  time: {
    just_now: "刚刚",
    minutes_ago: "{count}分钟前",
    hours_ago: "{count}小时前",
    days_ago: "{count}天前",
    yesterday: "昨天",
    today: "今天",
    week_last: "一周内",
    week_ago: "一周前"
  },
  profile: {
    info: "个人信息",
    profile: "个人资料",
    change_password: "修改密码",
    // 已绑定的账户
    bind_accounts: "已绑定的账户",
    unbind_account: "未绑定",
    bind_mobile: "手机号",
    bind_email: "电子邮箱",
    bind_google: "谷歌账号",
    bind_wechat: "微信OpenId",
    bind: "绑定",
    unbind: "解绑",
    logined_devices: "已登录的设备",
    used_devices: "曾用设备",
    current_device: "当前设备"
  },
  "response_status": {
    "400": "请求参数错误",
    "401": "未授权，请登录",
    "403": "拒绝访问",
    "404": "请求资源不存在",
    "500": "服务器错误",
    "502": "网关错误",
    "504": "网关超时",
    "503": "服务不可用"
  },
  "response_code": {
    "success": "成功",
    "param_error": "参数错误",
    "database_error": "数据库错误",
    "network_error": "网络错误，请重新尝试",
    "system_error": "系统错误",
    "auth_error": "认证错误",
    "not_found_error": "未找到错误",
    "unauthorized_error": "身份认证错误",
    "file_error": "文件错误",
    "forbidden_error": "用户已禁用，请联系管理员 ",
    "agent_error": "智能体错误",
    "token_expired_error": "身份过期错误",
    "verification_code_error": "验证码错误"
  },
  "response_message": {
    "unknown_error": "未知错误",
    "user_not_found": "用户不存在",
    "username_or_password_is_incorrect": "用户名或密码错误",
    "username_already_exists": "用户名已存在"
  },
  "subscription": {
    "free": "免费版",
    "upgrade": "升级",
    "version_title": "选择版本",
    "time_title": "选择购买时长",
    "month": "月",
    "year": "年",
    "credit_month_amount": "每月{amount}积分",
    "agent_bots_title": "可使用智能体",
    "ai_assistant_title": "跨平台的 AI 助手",
    "time_unit_month": "1个月",
    "time_unit_year": "1年",
    "aside_title": "新订单购买详情",
    "aside_desc": "为以下用户购买",
    "payment": "支付方式",
    "payment_wechat": "微信",
    "payment_manual": "手动转账",
    "total": "总计",
    "order_title": "订单支付",
    "pay_amount": "支付金额",
    "pay_by_wechat": "使用 微信扫码 支付",
    "pay_policy": "支付即视为你同意相关 {policy}",
    "pay_success": "支付成功"
  }
};
const zhTwLocale = {
  // 模塊導航
  module: {
    index: "首頁",
    toolbox: "百寶箱",
    tool: "AI工具",
    agent: "智能體",
    chat: "聊天",
    app: "應用",
    find: "發現",
    library: "知識庫",
    crop_space: "企業空間"
  },
  // 瀏覽器相關
  browser: {
    newTab: "新標籤頁",
    search_placeholder: "在百度AI中搜索，或者輸入一個網址",
    knowledge_clean: "知識清洗",
    load_error: "載入失敗",
    reload: "重新載入",
    not_logged_in: "未登入",
    login: "立即登入",
    window_position: "視窗位置",
    leftWindow: "左側小窗",
    centerWindow: "居中大窗",
    rightWindow: "右側小窗",
    alwaysOnTop: "視窗置頂"
  },
  // 清洗功能
  clean: {
    content: "內容抽取",
    knowledge: "知識整理",
    summarize: "知識萃取"
  },
  // 更新相關
  updater: {
    newVersion: "發現新版本，是否立即更新？",
    newVersionTitle: "更新提示",
    downloading: "正在下載更新",
    completed: "更新完成，是否立即重啟？",
    completedTitle: "更新提示",
    noUpdate: "當前已是最新版本",
    currentVersion: "當前版本 v{version}",
    checkUpdate: "檢查更新"
  },
  // 通用文本
  common: {
    new_friend: "新手指引",
    help_feedback: "幫助與反饋",
    attach: "附件",
    screenshot: "截圖",
    title: "標題",
    desc: "描述",
    create_time: "創建時間",
    update_time: "更新時間",
    recently_updated: "最近更新",
    loading: "載入中",
    // 加載更多
    load_more: "載入更多",
    load_new: "載入新訊息",
    no_data: "暫無數據",
    unknown: "未知",
    usual: "常用",
    render: "渲染",
    preview: "預覽",
    code: "代碼",
    split: "分屏",
    all: "全部",
    recently_visit: "最近訪問",
    confirm_delete: "確定刪除該項？",
    copied: "已複製",
    image_cropper: "圖片裁剪",
    back_home: "返回首頁",
    go_admin: "去後台"
  },
  // 狀態提示
  status: {
    error: "錯誤",
    warning: "警告",
    info: "信息",
    success: "成功",
    updated: "已更新",
    sent: "已發送",
    login_success: "已登入",
    logout_success: "已退出登入",
    not_found_account: "未找到賬號，驗證後直接登入"
  },
  // 操作按鈕
  action: {
    login: "登入",
    logout: "退出登入",
    search: "搜索",
    setting: "設置",
    confirm: "確認",
    cancel: "取消",
    close: "關閉",
    open: "打開",
    ok: "確定",
    and: "和",
    copy: "複製",
    upload: "上傳",
    download: "下載",
    del: "刪除",
    add: "添加",
    create: "創建",
    edit: "編輯",
    save: "保存",
    fixed: "固定",
    unfixed: "取消固定",
    collapse: "收起",
    expand: "展開",
    back: "返回",
    share: "分享",
    favorite: "收藏",
    unfavorite: "取消收藏",
    more: "更多",
    refresh: "刷新",
    apply: "應用",
    reset: "重置",
    submit: "提交",
    manage: "管理",
    rename: "重命名",
    find: "發現",
    preview: "預覽",
    reupload: "重新上傳",
    send: "發送",
    stop: "停止",
    pay: "去支付",
    ok_v2: "好的"
  },
  // 表單相關
  form: {
    icon: "圖標",
    name: "名稱",
    desc: "描述",
    input_placeholder: "請輸入",
    select_placeholder: "請選擇",
    icon_placeholder: "為保證顯示效果，請上傳寬高比 1:1 的圖片",
    required: "必填項",
    optional: "選填項",
    // 知識庫公開範圍
    library_view_scope: "知識庫公開範圍",
    library_view_public: "公開訪問",
    library_view_team: "團隊空間成員可訪問",
    library_view_member: "知識庫成員可訪問",
    avatar: "頭像",
    nickname: "暱稱",
    select_verify: "請選擇驗證方式",
    email_verify: "郵箱驗證",
    mobile_verify: "手機驗證",
    account: "賬號",
    account_alias: "手機",
    password: "密碼",
    email: "郵箱",
    mobile: "手機號",
    verify_code: "驗證碼",
    get_verify_code: "獲取驗證碼",
    new_password: "新密碼",
    new_password_placeholder: "請輸入新密碼",
    new_password_confirm: "確認新密碼",
    new_password_confirm_placeholder: "請再次輸入新密碼",
    mobile_format: "請輸入正確手機號",
    email_format: "請輸入正確的郵箱",
    verify_code_format: "請輸入正確的驗證碼",
    password_length: "密碼長度必須在 8-20 個字符之間",
    password_format: "密碼必須包含大小寫字母和數字",
    password_not_match: "兩次輸入的密碼不一致",
    change: "修改"
  },
  // 首頁相關
  index: {
    agent_recommend: "智能體精選",
    use_history: "{count}人聊過"
  },
  // 登入相關
  login: {
    agree: "登入即視您同意",
    terms_of_service: "條款和條件",
    privacy_policy: "隱私政策",
    password_login: "密碼登入",
    unregistered_account_desc: "未註冊的賬號驗證後自動登入",
    quit: "退出"
  },
  // 聊天相關
  chat: {
    search_placholder: "搜索智能體",
    collapse_side_bar: "收起側邊欄",
    expand_side_bar: "展開側邊欄",
    history: "對話記錄",
    new_conversation: "新對話",
    edit_conversation: "編輯對話名稱",
    conversation_confirm_delete: "刪除後，聊天記錄將不可恢復。",
    input: "輸入",
    output: "輸出",
    start_generate: "開始生成",
    regenerate: "重新生成",
    like: "點讚",
    dislike: "取消點讚",
    input_placeholder: "發送訊息",
    usage_guide: "使用指引",
    completion_empty_desc: "採用AI大模型智能生成內容，輸入需求即可一鍵成文，快去試試吧",
    usage_case: "使用案例",
    usage_scene: "使用場景",
    online_search: "聯網搜索",
    completion_generating: "內容生成中，請稍候...",
    completion_rendering: "內容渲染中...",
    // 暫無可用的智能體
    no_available_agent: "暫無可用的智能體",
    completion_completed: "已完成深度思考",
    completion_thinking: "深度思考中..."
  },
  // 知識庫相關
  library: {
    home: "首頁",
    name: "知識庫",
    create: "創建知識庫",
    all_spaces: "全員空間",
    space_name: "空間名稱",
    chat: "知識庫問答",
    file_count: "{count}個文件",
    upload_file: "上傳文件",
    manage: "管理知識庫",
    search: "搜索知識庫",
    all_libraries: "全部知識庫",
    empty_desc: "創建企業知識庫，沉澱團隊知識，提升協作效率",
    create_md: "新建知識",
    local_upload: "本地上傳",
    create_folder: "新建文件夾",
    tmpl_create: "模板創建",
    github_import: "從Github導入",
    docs_qq_import: "從騰訊文檔導入",
    docs_feishu_import: "從釘釘文檔導入",
    docs_dingtalk_import: "從飛書文檔導入"
  },
  toolbox: {
    // AI聚合问答
    name: "AI聚合问答",
    title: "準備好了嗎？開始體驗百寶箱吧！",
    input_placeholder: "百寶箱可以讓你快速找到你需要的答案，Shift+Enter换行，Enter发送",
    max_agent_count: "最多只能选择{count}个模型",
    search_placeholder: "搜索網站"
  },
  // 空間相關
  space: {
    create: "創建空間",
    join: "加入空間",
    manage: "管理空間",
    member: "成員管理",
    settings: "空間設置",
    space_usage: "已用 {used} / {total}",
    expand: "擴容"
  },
  // 時間相關
  time: {
    just_now: "剛剛",
    minutes_ago: "{count}分鐘前",
    hours_ago: "{count}小時前",
    days_ago: "{count}天前",
    yesterday: "昨天",
    today: "今天",
    week_last: "一週內",
    week_ago: "一週前"
  },
  profile: {
    info: "個人信息",
    profile: "個人資料",
    change_password: "修改密碼",
    // 已綁定的賬戶
    bind_accounts: "已綁定的賬戶",
    unbind_account: "未綁定",
    bind_mobile: "手機號",
    bind_email: "電子郵箱",
    bind_google: "谷歌賬號",
    bind_wechat: "微信OpenId",
    bind: "綁定",
    unbind: "解綁",
    logined_devices: "已登入的設備",
    used_devices: "曾用設備",
    current_device: "當前設備"
  },
  "response_status": {
    "400": "請求參數錯誤",
    "401": "未授權，請登入",
    "403": "拒絕訪問",
    "404": "請求資源不存在",
    "500": "伺服器錯誤",
    "502": "網關錯誤",
    "504": "網關超時",
    "503": "服務不可用"
  },
  "response_code": {
    "success": "成功",
    "param_error": "參數錯誤",
    "database_error": "數據庫錯誤",
    "network_error": "網絡錯誤，請重新嘗試",
    "system_error": "系統錯誤",
    "auth_error": "認證錯誤",
    "not_found_error": "未找到錯誤",
    "unauthorized_error": "身份認證錯誤",
    "file_error": "文件錯誤",
    "forbidden_error": "用戶已禁用，請聯繫管理員",
    "agent_error": "智能體錯誤",
    "token_expired_error": "身份過期錯誤",
    "verification_code_error": "驗證碼錯誤"
  },
  "response_message": {
    "unknown_error": "未知錯誤",
    "user_not_found": "用戶不存在",
    "username_or_password_is_incorrect": "用戶名或密碼錯誤",
    "username_already_exists": "用戶名已存在"
  },
  "subscription": {
    "free": "免費版",
    "upgrade": "升級",
    "version_title": "選擇版本",
    "time_title": "選擇購買時長",
    "month": "月",
    "year": "年",
    "credit_month_amount": "每月{amount}積分",
    "agent_bots_title": "可使用智能體",
    "ai_assistant_title": "跨平台的 AI 助手",
    "time_unit_month": "1個月",
    "time_unit_year": "1年",
    "aside_title": "新訂單購買詳情",
    "aside_desc": "為以下用戶購買",
    "payment": "支付方式",
    "payment_wechat": "微信",
    "payment_manual": "手動轉賬",
    "total": "總計",
    "order_title": "訂單支付",
    "pay_amount": "支付金額",
    "pay_by_wechat": "使用 微信掃碼 支付",
    "pay_policy": "支付即視為你同意相關 {policy}",
    "pay_success": "支付成功"
  }
};
const enLocale = {
  // Module Navigation
  module: {
    index: "Home",
    toolbox: "Toolbox",
    tool: "Tool",
    agent: "Agent",
    chat: "Chat",
    app: "App",
    find: "Discover",
    library: "Knowledge Base",
    crop_space: "Enterprise Space"
  },
  // Browser Related
  browser: {
    newTab: "New Tab",
    search_placeholder: "Search in Baidu AI, or enter a URL",
    knowledge_clean: "Knowledge Cleaning",
    load_error: "Loading Failed",
    reload: "Reload",
    not_logged_in: "Not Logged In",
    login: "Login Now",
    window_position: "Window Position",
    leftWindow: "Left Small Window",
    centerWindow: "Center Large Window",
    rightWindow: "Right Small Window",
    alwaysOnTop: "Always On Top"
  },
  // Cleaning Features
  clean: {
    content: "Content Extraction",
    knowledge: "Knowledge Organization",
    summarize: "Knowledge Extraction"
  },
  // Update Related
  updater: {
    newVersion: "New version found, update now?",
    newVersionTitle: "Update Notification",
    downloading: "Downloading update",
    completed: "Update completed, restart now?",
    completedTitle: "Update Notification",
    noUpdate: "Current version is up to date",
    currentVersion: "Current version v{version}",
    checkUpdate: "Check for Updates"
  },
  // Common Text
  common: {
    new_friend: "Beginner Guide",
    help_feedback: "Help & Feedback",
    attach: "Attachment",
    screenshot: "Screenshot",
    title: "Title",
    desc: "Description",
    create_time: "Creation Time",
    update_time: "Update Time",
    recently_updated: "Recently Updated",
    loading: "Loading",
    // Load more
    load_more: "Load More",
    load_new: "Load New Messages",
    no_data: "No Data",
    unknown: "Unknown",
    usual: "Frequently Used",
    render: "Render",
    preview: "Preview",
    code: "Code",
    split: "Split Screen",
    all: "All",
    recently_visit: "Recently Visited",
    confirm_delete: "Are you sure you want to delete this item?",
    copied: "Copied",
    image_cropper: "Image Cropper",
    back_home: "Back to Home",
    go_admin: "Go to Admin"
  },
  // Status Prompts
  status: {
    error: "Error",
    warning: "Warning",
    info: "Information",
    success: "Success",
    updated: "Updated",
    sent: "Sent",
    login_success: "Logged In",
    logout_success: "Logged Out",
    not_found_account: "Account not found, login directly after verification"
  },
  // Action Buttons
  action: {
    login: "Login",
    logout: "Logout",
    search: "Search",
    setting: "Settings",
    confirm: "Confirm",
    cancel: "Cancel",
    close: "Close",
    open: "Open",
    ok: "OK",
    and: "and",
    copy: "Copy",
    upload: "Upload",
    download: "Download",
    del: "Delete",
    add: "Add",
    create: "Create",
    edit: "Edit",
    save: "Save",
    fixed: "Pin",
    unfixed: "Unpin",
    collapse: "Collapse",
    expand: "Expand",
    back: "Back",
    share: "Share",
    favorite: "Favorite",
    unfavorite: "Unfavorite",
    more: "More",
    refresh: "Refresh",
    apply: "Apply",
    reset: "Reset",
    submit: "Submit",
    manage: "Manage",
    rename: "Rename",
    find: "Find",
    preview: "Preview",
    reupload: "Re-upload",
    send: "Send",
    stop: "Stop",
    pay: "Pay",
    ok_v2: "OK"
  },
  // Form Related
  form: {
    icon: "Icon",
    name: "Name",
    desc: "Description",
    input_placeholder: "Please enter",
    select_placeholder: "Please select",
    icon_placeholder: "For best display, please upload an image with a 1:1 aspect ratio",
    required: "Required",
    optional: "Optional",
    // Knowledge Base Public Scope
    library_view_scope: "Knowledge Base Access Scope",
    library_view_public: "Public Access",
    library_view_team: "Team Space Members Access",
    library_view_member: "Knowledge Base Members Access",
    avatar: "Avatar",
    nickname: "Nickname",
    select_verify: "Please select verification method",
    email_verify: "Email Verification",
    mobile_verify: "Mobile Verification",
    account: "Account",
    account_alias: "Mobile",
    password: "Password",
    email: "Email",
    mobile: "Mobile",
    verify_code: "Verification Code",
    get_verify_code: "Get Verification Code",
    new_password: "New Password",
    new_password_placeholder: "Please enter new password",
    new_password_confirm: "Confirm New Password",
    new_password_confirm_placeholder: "Please re-enter new password",
    mobile_format: "Please enter a valid mobile number",
    email_format: "Please enter a valid email",
    verify_code_format: "Please enter a valid verification code",
    password_length: "Password must be between 8-20 characters",
    password_format: "Password must contain uppercase, lowercase letters and numbers",
    password_not_match: "The two passwords do not match",
    change: "Change"
  },
  // Home Related
  index: {
    agent_recommend: "Featured Agents",
    use_history: "{count} people have chatted"
  },
  // Login Related
  login: {
    agree: "By logging in, you agree to",
    terms_of_service: "Terms and Conditions",
    privacy_policy: "Privacy Policy",
    password_login: "Password Login",
    unregistered_account_desc: "Unregistered accounts will be automatically logged in after verification",
    quit: "Quit"
  },
  // Chat Related
  chat: {
    search_placholder: "Search agents",
    collapse_side_bar: "Collapse Sidebar",
    expand_side_bar: "Expand Sidebar",
    history: "Conversation History",
    new_conversation: "New Conversation",
    edit_conversation: "Edit Conversation Name",
    conversation_confirm_delete: "After deletion, chat history cannot be recovered.",
    input: "Input",
    output: "Output",
    start_generate: "Start Generating",
    regenerate: "Regenerate",
    like: "Like",
    dislike: "Unlike",
    input_placeholder: "Send a message",
    usage_guide: "Usage Guide",
    completion_empty_desc: "Using AI large model to intelligently generate content, just input your requirements for one-click content creation",
    usage_case: "Use Cases",
    usage_scene: "Usage Scenarios",
    online_search: "Online Search",
    completion_generating: "Content generating, please wait...",
    completion_rendering: "Content rendering...",
    // No available agents
    no_available_agent: "No available agents",
    completion_completed: "Deep thinking completed",
    completion_thinking: "Deep thinking..."
  },
  // Knowledge Base Related
  library: {
    home: "Home",
    name: "Knowledge Base",
    create: "Create Knowledge Base",
    all_spaces: "All Member Space",
    space_name: "Space Name",
    chat: "Knowledge Base Q&A",
    file_count: "{count} files",
    upload_file: "Upload File",
    manage: "Manage Knowledge Base",
    search: "Search Knowledge Base",
    all_libraries: "All Knowledge Bases",
    empty_desc: "Create enterprise knowledge base, accumulate team knowledge, improve collaboration efficiency",
    create_md: "New Knowledge",
    local_upload: "Local Upload",
    create_folder: "New Folder",
    tmpl_create: "Template Creation",
    github_import: "Import from Github",
    docs_qq_import: "Import from Tencent Docs",
    docs_feishu_import: "Import from DingTalk Docs",
    docs_dingtalk_import: "Import from Feishu Docs"
  },
  toolbox: {
    // AI聚合问答
    name: "AI Aggregation",
    title: "Use AI large model to intelligently generate content, just input your requirements for one-click content creation",
    input_placeholder: "Send a message",
    max_agent_count: "You can only select {count} agents",
    search_placeholder: "Search website"
  },
  // Space Related
  space: {
    create: "Create Space",
    join: "Join Space",
    manage: "Manage Space",
    member: "Member Management",
    settings: "Space Settings",
    space_usage: "Used {used} / {total}",
    expand: "Expand Capacity"
  },
  // Time Related
  time: {
    just_now: "Just now",
    minutes_ago: "{count} minutes ago",
    hours_ago: "{count} hours ago",
    days_ago: "{count} days ago",
    yesterday: "Yesterday",
    today: "Today",
    week_last: "Within a week",
    week_ago: "A week ago"
  },
  profile: {
    info: "Personal Information",
    profile: "Profile",
    change_password: "Change Password",
    // Bound accounts
    bind_accounts: "Bound Accounts",
    unbind_account: "Not Bound",
    bind_mobile: "Mobile Number",
    bind_email: "Email",
    bind_google: "Google",
    bind_wechat: "WeChat",
    bind: "Bind",
    unbind: "Unbind",
    logined_devices: "Logged-in Devices",
    used_devices: "Previously Used Devices",
    current_device: "Current Device"
  },
  "response_status": {
    "400": "Request parameter error",
    "401": "Unauthorized, please login",
    "403": "Access denied",
    "404": "Requested resource does not exist",
    "500": "Server error",
    "502": "Gateway error",
    "504": "Gateway timeout",
    "503": "Service unavailable"
  },
  "response_code": {
    "success": "Success",
    "param_error": "Parameter error",
    "database_error": "Database error",
    "network_error": "Network error, please try again",
    "system_error": "System error",
    "auth_error": "Authentication error",
    "not_found_error": "Not found error",
    "unauthorized_error": "Authentication error",
    "file_error": "File error",
    "forbidden_error": "User is disabled, please contact the administrator",
    "agent_error": "Agent error",
    "token_expired_error": "Token expired error",
    "verification_code_error": "Verification code error"
  },
  "response_message": {
    "unknown_error": "Unknown error",
    "user_not_found": "User does not exist",
    "username_or_password_is_incorrect": "Username or password is incorrect",
    "username_already_exists": "Username already exists"
  },
  "subscription": {
    "free": "Free",
    "upgrade": "Upgrade",
    "version_title": "Select Version",
    "time_title": "Select Purchase Duration",
    "month": "Month",
    "year": "Year",
    "credit_month_amount": "Monthly {amount} credits",
    "agent_bots_title": "Available Agents",
    "ai_assistant_title": "Cross-platform AI Assistant",
    "time_unit_month": "One Month",
    "time_unit_year": "One Year",
    "aside_title": "New Order Purchase Details",
    "aside_desc": "Purchase for the following users",
    "payment": "Payment Method",
    "payment_wechat": "WeChat Payment",
    "payment_manual": "Manual Transfer",
    "total": "Total",
    "order_title": "Order Payment",
    "pay_amount": "Payment Amount",
    "pay_by_wechat": "Use WeChat QR Code to Pay",
    "pay_policy": "Payment is deemed to agree to the relevant {policy}",
    "pay_success": "Payment Successful"
  }
};
const jpLocale = {
  // モジュールナビゲーション
  module: {
    index: "ホーム",
    toolbox: "ツールボックス",
    tool: "AIツール",
    agent: "エージェント",
    chat: "チャット",
    app: "アプリ",
    find: "発見",
    library: "ナレッジベース",
    crop_space: "企業スペース"
  },
  // ブラウザ関連
  browser: {
    newTab: "新しいタブ",
    search_placeholder: "Baidu AIで検索、またはURLを入力",
    knowledge_clean: "ナレッジクリーニング",
    load_error: "読み込みに失敗しました",
    reload: "再読み込み",
    not_logged_in: "ログインしていません",
    login: "今すぐログイン",
    window_position: "ウィンドウ位置",
    leftWindow: "左側小窓",
    centerWindow: "中央大窓",
    rightWindow: "右側小窓",
    alwaysOnTop: "ウィンドウを常に前面に表示"
  },
  // クリーニング機能
  clean: {
    content: "コンテンツ抽出",
    knowledge: "ナレッジ整理",
    summarize: "ナレッジ抽出"
  },
  // アップデート関連
  updater: {
    newVersion: "新しいバージョンが見つかりました。今すぐ更新しますか？",
    newVersionTitle: "更新通知",
    downloading: "更新をダウンロード中",
    completed: "更新が完了しました。今すぐ再起動しますか？",
    completedTitle: "更新通知",
    noUpdate: "現在最新バージョンです",
    currentVersion: "現在のバージョン v{version}",
    checkUpdate: "更新を確認"
  },
  // 一般テキスト
  common: {
    new_friend: "初心者ガイド",
    help_feedback: "ヘルプとフィードバック",
    attach: "添付ファイル",
    screenshot: "スクリーンショット",
    title: "タイトル",
    desc: "説明",
    create_time: "作成日時",
    update_time: "更新日時",
    recently_updated: "最近の更新",
    loading: "読み込み中",
    load_more: "もっと読み込む",
    load_new: "新しいメッセージを読み込む",
    no_data: "データがありません",
    unknown: "不明",
    usual: "よく使う",
    render: "レンダリング",
    preview: "プレビュー",
    code: "コード",
    split: "分割画面",
    all: "すべて",
    recently_visit: "最近のアクセス",
    confirm_delete: "このアイテムを削除しますか？",
    copied: "コピーしました",
    image_cropper: "画像トリミング",
    back_home: "ホームに戻る",
    go_admin: "管理画面に移動"
  },
  // ステータス通知
  status: {
    error: "エラー",
    warning: "警告",
    info: "情報",
    success: "成功",
    updated: "更新済み",
    sent: "送信済み",
    login_success: "ログインしました",
    logout_success: "ログアウトしました",
    not_found_account: "アカウントが見つかりません。認証後に直接ログインします"
  },
  // アクションボタン
  action: {
    login: "ログイン",
    logout: "ログアウト",
    search: "検索",
    setting: "設定",
    confirm: "確認",
    cancel: "キャンセル",
    close: "閉じる",
    open: "開く",
    ok: "OK",
    and: "と",
    copy: "コピー",
    upload: "アップロード",
    download: "ダウンロード",
    del: "削除",
    add: "追加",
    create: "作成",
    edit: "編集",
    save: "保存",
    fixed: "固定",
    unfixed: "固定解除",
    collapse: "折りたたむ",
    expand: "展開",
    back: "戻る",
    share: "共有",
    favorite: "お気に入り",
    unfavorite: "お気に入り解除",
    more: "もっと見る",
    refresh: "更新",
    apply: "適用",
    reset: "リセット",
    submit: "送信",
    manage: "管理",
    rename: "名前変更",
    find: "発見",
    preview: "プレビュー",
    reupload: "再アップロード",
    send: "送信",
    stop: "停止",
    pay: "支払いに進む",
    ok_v2: "OK"
  },
  // フォーム関連
  form: {
    icon: "アイコン",
    name: "名前",
    desc: "説明",
    input_placeholder: "入力してください",
    select_placeholder: "選択してください",
    icon_placeholder: "表示効果を確保するため、縦横比1:1の画像をアップロードしてください",
    required: "必須項目",
    optional: "任意項目",
    // ナレッジベース公開範囲
    library_view_scope: "ナレッジベース公開範囲",
    library_view_public: "公開アクセス",
    library_view_team: "チームスペースメンバーがアクセス可能",
    library_view_member: "ナレッジベースメンバーがアクセス可能",
    avatar: "アバター",
    nickname: "ニックネーム",
    select_verify: "認証方法を選択してください",
    email_verify: "メール認証",
    mobile_verify: "電話認証",
    account: "アカウント",
    account_alias: "電話番号",
    password: "パスワード",
    email: "メールアドレス",
    mobile: "電話番号",
    verify_code: "認証コード",
    get_verify_code: "認証コードを取得",
    new_password: "新しいパスワード",
    new_password_placeholder: "新しいパスワードを入力してください",
    new_password_confirm: "パスワードの確認",
    new_password_confirm_placeholder: "新しいパスワードを再入力してください",
    mobile_format: "正しい電話番号を入力してください",
    email_format: "正しいメールアドレスを入力してください",
    verify_code_format: "正しい認証コードを入力してください",
    password_length: "パスワードは8〜20文字である必要があります",
    password_format: "パスワードは大文字、小文字、数字を含む必要があります",
    password_not_match: "入力されたパスワードが一致しません",
    change: "変更"
  },
  // ホーム関連
  index: {
    agent_recommend: "おすすめエージェント",
    use_history: "{count}人が利用"
  },
  // ログイン関連
  login: {
    agree: "ログインすると、以下に同意したことになります",
    terms_of_service: "利用規約",
    privacy_policy: "プライバシーポリシー",
    password_login: "パスワードでログイン",
    unregistered_account_desc: "未登録のアカウントは認証後に自動的にログインします",
    quit: "終了"
  },
  // チャット関連
  chat: {
    search_placholder: "エージェントとチャットを検索",
    collapse_side_bar: "サイドバーを折りたたむ",
    expand_side_bar: "サイドバーを展開",
    history: "会話履歴",
    new_conversation: "新しい会話",
    edit_conversation: "会話名を編集",
    conversation_confirm_delete: "削除すると、チャット履歴は復元できません。",
    input: "入力",
    output: "出力",
    start_generate: "生成開始",
    regenerate: "再生成",
    like: "いいね",
    dislike: "いいねを取り消す",
    input_placeholder: "メッセージを送信",
    usage_guide: "使用ガイド",
    completion_empty_desc: "AI大規模モデルによるインテリジェントコンテンツ生成。要件を入力するだけでワンクリックで文章が作成できます",
    usage_case: "使用例",
    usage_scene: "使用シーン",
    online_search: "オンライン検索",
    completion_generating: "コンテンツ生成中、お待ちください...",
    completion_rendering: "コンテンツレンダリング中...",
    // 利用可能なエージェントがありません
    no_available_agent: "利用可能なエージェントがありません",
    completion_completed: "深層思考が完了しました",
    completion_thinking: "深度思考中..."
  },
  // ナレッジベース関連
  library: {
    home: "ホーム",
    name: "ナレッジベース",
    create: "ナレッジベースを作成",
    all_spaces: "全員スペース",
    space_name: "スペース名",
    chat: "ナレッジベースQ&A",
    file_count: "{count}ファイル",
    upload_file: "ファイルをアップロード",
    manage: "ナレッジベースを管理",
    search: "ナレッジベースを検索",
    all_libraries: "すべてのナレッジベース",
    empty_desc: "企業ナレッジベースを作成し、チームの知識を蓄積して協力効率を向上させる",
    create_md: "新しい知識を作成",
    local_upload: "ローカルからアップロード",
    create_folder: "新しいフォルダを作成",
    tmpl_create: "テンプレートから作成",
    github_import: "Githubからインポート",
    docs_qq_import: "テンセントドキュメントからインポート",
    docs_feishu_import: "DingTalkドキュメントからインポート",
    docs_dingtalk_import: "Feishuドキュメントからインポート"
  },
  toolbox: {
    name: "ツールボックス",
    title: "AIの世界を拡大しよう",
    input_placeholder: "AIの世界を拡大しよう",
    max_agent_count: "最大で{count}つのモデルを選択できます",
    search_placeholder: "ウェブサイトを検索"
  },
  // スペース関連
  space: {
    create: "スペースを作成",
    join: "スペースに参加",
    manage: "スペースを管理",
    member: "メンバー管理",
    settings: "スペース設定",
    space_usage: "使用中 {used} / {total}",
    expand: "容量拡張"
  },
  // 時間関連
  time: {
    just_now: "たった今",
    minutes_ago: "{count}分前",
    hours_ago: "{count}時間前",
    days_ago: "{count}日前",
    yesterday: "昨日",
    today: "今日",
    week_last: "1週間以内",
    week_ago: "1週間前"
  },
  profile: {
    info: "個人情報",
    profile: "プロフィール",
    change_password: "パスワード変更",
    bind_accounts: "連携済みアカウント",
    unbind_account: "未連携",
    bind_mobile: "電話番号",
    bind_email: "メールアドレス",
    bind_google: "Googleアカウント",
    bind_wechat: "WeChatOpenId",
    bind: "連携",
    unbind: "連携解除",
    logined_devices: "ログイン済みデバイス",
    used_devices: "過去に使用したデバイス",
    current_device: "現在のデバイス"
  },
  "response_status": {
    "400": "リクエストパラメータエラー",
    "401": "認証されていません、ログインしてください",
    "403": "アクセス拒否",
    "404": "リソースが見つかりません",
    "500": "サーバーエラー",
    "502": "ゲートウェイエラー",
    "504": "ゲートウェイタイムアウト",
    "503": "サービス利用不可"
  },
  "response_code": {
    "success": "成功",
    "param_error": "パラメータエラー",
    "database_error": "データベースエラー",
    "network_error": "ネットワークエラー、再試行してください",
    "system_error": "システムエラー",
    "auth_error": "認証エラー",
    "not_found_error": "見つかりませんエラー",
    "unauthorized_error": "認証エラー",
    "file_error": "ファイルエラー",
    "forbidden_error": "ユーザーが無効になっています、管理者に連絡してください",
    "agent_error": "エージェントエラー",
    "token_expired_error": "認証期限切れエラー",
    "verification_code_error": "認証コードエラー"
  },
  "response_message": {
    "unknown_error": "不明なエラー",
    "user_not_found": "ユーザーが存在しません",
    "username_or_password_is_incorrect": "ユーザー名またはパスワードが間違っています",
    "username_already_exists": "ユーザー名が既に存在します"
  },
  "subscription": {
    "free": "無料版",
    "upgrade": "アップグレード",
    "version_title": "バージョンを選択",
    "time_title": "購入期間を選択",
    "month": "月",
    "year": "年",
    "credit_month_amount": "毎月{amount}積分",
    "agent_bots_title": "使用可能なエージェント",
    "ai_assistant_title": "クロスプラットフォームの AI アシスタント",
    "time_unit_month": "1ヶ月",
    "time_unit_year": "1年",
    "aside_title": "新しい注文購入詳細",
    "aside_desc": "以下のユーザーに購入",
    "payment": "支払方法",
    "payment_wechat": "WeChat支払い",
    "payment_manual": "手動支払い",
    "total": "総計",
    "order_title": "注文支払い",
    "pay_amount": "支払金額",
    "pay_by_wechat": "WeChat支払い",
    "pay_policy": "支払いは関連する {policy} に同意したことを意味します",
    "pay_success": "支払い成功"
  }
};
const messages = {
  "zh-cn": {
    ...zhLocale,
    ...zhCn
  },
  "zh-tw": {
    ...zhTwLocale,
    ...zhTw
  },
  "en": {
    ...enLocale,
    ...English
  },
  "jp": {
    ...jpLocale,
    ...ja
  }
};
const i18n = createI18n({
  legacy: false,
  globalInjection: true,
  // 全局模式，可以直接使用 $t
  locale: "zh-cn",
  messages
});
window.$t = i18n.global.t;
const setupI18n = (app) => {
  app.use(i18n);
};
/*!
  * vue-router v4.5.0
  * (c) 2024 Eduardo San Martin Morote
  * @license MIT
  */
const isBrowser = typeof document !== "undefined";
function isRouteComponent(component) {
  return typeof component === "object" || "displayName" in component || "props" in component || "__vccOpts" in component;
}
function isESModule(obj) {
  return obj.__esModule || obj[Symbol.toStringTag] === "Module" || // support CF with dynamic imports that do not
  // add the Module string tag
  obj.default && isRouteComponent(obj.default);
}
const assign = Object.assign;
function applyToParams(fn2, params) {
  const newParams = {};
  for (const key in params) {
    const value = params[key];
    newParams[key] = isArray(value) ? value.map(fn2) : fn2(value);
  }
  return newParams;
}
const noop = () => {
};
const isArray = Array.isArray;
const HASH_RE = /#/g;
const AMPERSAND_RE = /&/g;
const SLASH_RE = /\//g;
const EQUAL_RE = /=/g;
const IM_RE = /\?/g;
const PLUS_RE = /\+/g;
const ENC_BRACKET_OPEN_RE = /%5B/g;
const ENC_BRACKET_CLOSE_RE = /%5D/g;
const ENC_CARET_RE = /%5E/g;
const ENC_BACKTICK_RE = /%60/g;
const ENC_CURLY_OPEN_RE = /%7B/g;
const ENC_PIPE_RE = /%7C/g;
const ENC_CURLY_CLOSE_RE = /%7D/g;
const ENC_SPACE_RE = /%20/g;
function commonEncode(text) {
  return encodeURI("" + text).replace(ENC_PIPE_RE, "|").replace(ENC_BRACKET_OPEN_RE, "[").replace(ENC_BRACKET_CLOSE_RE, "]");
}
function encodeHash(text) {
  return commonEncode(text).replace(ENC_CURLY_OPEN_RE, "{").replace(ENC_CURLY_CLOSE_RE, "}").replace(ENC_CARET_RE, "^");
}
function encodeQueryValue(text) {
  return commonEncode(text).replace(PLUS_RE, "%2B").replace(ENC_SPACE_RE, "+").replace(HASH_RE, "%23").replace(AMPERSAND_RE, "%26").replace(ENC_BACKTICK_RE, "`").replace(ENC_CURLY_OPEN_RE, "{").replace(ENC_CURLY_CLOSE_RE, "}").replace(ENC_CARET_RE, "^");
}
function encodeQueryKey(text) {
  return encodeQueryValue(text).replace(EQUAL_RE, "%3D");
}
function encodePath(text) {
  return commonEncode(text).replace(HASH_RE, "%23").replace(IM_RE, "%3F");
}
function encodeParam(text) {
  return text == null ? "" : encodePath(text).replace(SLASH_RE, "%2F");
}
function decode(text) {
  try {
    return decodeURIComponent("" + text);
  } catch (err) {
  }
  return "" + text;
}
const TRAILING_SLASH_RE = /\/$/;
const removeTrailingSlash = (path) => path.replace(TRAILING_SLASH_RE, "");
function parseURL(parseQuery2, location2, currentLocation = "/") {
  let path, query = {}, searchString = "", hash = "";
  const hashPos = location2.indexOf("#");
  let searchPos = location2.indexOf("?");
  if (hashPos < searchPos && hashPos >= 0) {
    searchPos = -1;
  }
  if (searchPos > -1) {
    path = location2.slice(0, searchPos);
    searchString = location2.slice(searchPos + 1, hashPos > -1 ? hashPos : location2.length);
    query = parseQuery2(searchString);
  }
  if (hashPos > -1) {
    path = path || location2.slice(0, hashPos);
    hash = location2.slice(hashPos, location2.length);
  }
  path = resolveRelativePath(path != null ? path : location2, currentLocation);
  return {
    fullPath: path + (searchString && "?") + searchString + hash,
    path,
    query,
    hash: decode(hash)
  };
}
function stringifyURL(stringifyQuery2, location2) {
  const query = location2.query ? stringifyQuery2(location2.query) : "";
  return location2.path + (query && "?") + query + (location2.hash || "");
}
function stripBase(pathname, base) {
  if (!base || !pathname.toLowerCase().startsWith(base.toLowerCase()))
    return pathname;
  return pathname.slice(base.length) || "/";
}
function isSameRouteLocation(stringifyQuery2, a2, b) {
  const aLastIndex = a2.matched.length - 1;
  const bLastIndex = b.matched.length - 1;
  return aLastIndex > -1 && aLastIndex === bLastIndex && isSameRouteRecord(a2.matched[aLastIndex], b.matched[bLastIndex]) && isSameRouteLocationParams(a2.params, b.params) && stringifyQuery2(a2.query) === stringifyQuery2(b.query) && a2.hash === b.hash;
}
function isSameRouteRecord(a2, b) {
  return (a2.aliasOf || a2) === (b.aliasOf || b);
}
function isSameRouteLocationParams(a2, b) {
  if (Object.keys(a2).length !== Object.keys(b).length)
    return false;
  for (const key in a2) {
    if (!isSameRouteLocationParamsValue(a2[key], b[key]))
      return false;
  }
  return true;
}
function isSameRouteLocationParamsValue(a2, b) {
  return isArray(a2) ? isEquivalentArray(a2, b) : isArray(b) ? isEquivalentArray(b, a2) : a2 === b;
}
function isEquivalentArray(a2, b) {
  return isArray(b) ? a2.length === b.length && a2.every((value, i2) => value === b[i2]) : a2.length === 1 && a2[0] === b;
}
function resolveRelativePath(to2, from) {
  if (to2.startsWith("/"))
    return to2;
  if (!to2)
    return from;
  const fromSegments = from.split("/");
  const toSegments = to2.split("/");
  const lastToSegment = toSegments[toSegments.length - 1];
  if (lastToSegment === ".." || lastToSegment === ".") {
    toSegments.push("");
  }
  let position = fromSegments.length - 1;
  let toPosition;
  let segment;
  for (toPosition = 0; toPosition < toSegments.length; toPosition++) {
    segment = toSegments[toPosition];
    if (segment === ".")
      continue;
    if (segment === "..") {
      if (position > 1)
        position--;
    } else
      break;
  }
  return fromSegments.slice(0, position).join("/") + "/" + toSegments.slice(toPosition).join("/");
}
const START_LOCATION_NORMALIZED = {
  path: "/",
  // TODO: could we use a symbol in the future?
  name: void 0,
  params: {},
  query: {},
  hash: "",
  fullPath: "/",
  matched: [],
  meta: {},
  redirectedFrom: void 0
};
var NavigationType;
(function(NavigationType2) {
  NavigationType2["pop"] = "pop";
  NavigationType2["push"] = "push";
})(NavigationType || (NavigationType = {}));
var NavigationDirection;
(function(NavigationDirection2) {
  NavigationDirection2["back"] = "back";
  NavigationDirection2["forward"] = "forward";
  NavigationDirection2["unknown"] = "";
})(NavigationDirection || (NavigationDirection = {}));
function normalizeBase(base) {
  if (!base) {
    if (isBrowser) {
      const baseEl = document.querySelector("base");
      base = baseEl && baseEl.getAttribute("href") || "/";
      base = base.replace(/^\w+:\/\/[^\/]+/, "");
    } else {
      base = "/";
    }
  }
  if (base[0] !== "/" && base[0] !== "#")
    base = "/" + base;
  return removeTrailingSlash(base);
}
const BEFORE_HASH_RE = /^[^#]+#/;
function createHref(base, location2) {
  return base.replace(BEFORE_HASH_RE, "#") + location2;
}
function getElementPosition(el2, offset) {
  const docRect = document.documentElement.getBoundingClientRect();
  const elRect = el2.getBoundingClientRect();
  return {
    behavior: offset.behavior,
    left: elRect.left - docRect.left - (offset.left || 0),
    top: elRect.top - docRect.top - (offset.top || 0)
  };
}
const computeScrollPosition = () => ({
  left: window.scrollX,
  top: window.scrollY
});
function scrollToPosition(position) {
  let scrollToOptions;
  if ("el" in position) {
    const positionEl = position.el;
    const isIdSelector = typeof positionEl === "string" && positionEl.startsWith("#");
    const el2 = typeof positionEl === "string" ? isIdSelector ? document.getElementById(positionEl.slice(1)) : document.querySelector(positionEl) : positionEl;
    if (!el2) {
      return;
    }
    scrollToOptions = getElementPosition(el2, position);
  } else {
    scrollToOptions = position;
  }
  if ("scrollBehavior" in document.documentElement.style)
    window.scrollTo(scrollToOptions);
  else {
    window.scrollTo(scrollToOptions.left != null ? scrollToOptions.left : window.scrollX, scrollToOptions.top != null ? scrollToOptions.top : window.scrollY);
  }
}
function getScrollKey(path, delta) {
  const position = history.state ? history.state.position - delta : -1;
  return position + path;
}
const scrollPositions = /* @__PURE__ */ new Map();
function saveScrollPosition(key, scrollPosition) {
  scrollPositions.set(key, scrollPosition);
}
function getSavedScrollPosition(key) {
  const scroll = scrollPositions.get(key);
  scrollPositions.delete(key);
  return scroll;
}
let createBaseLocation = () => location.protocol + "//" + location.host;
function createCurrentLocation(base, location2) {
  const { pathname, search, hash } = location2;
  const hashPos = base.indexOf("#");
  if (hashPos > -1) {
    let slicePos = hash.includes(base.slice(hashPos)) ? base.slice(hashPos).length : 1;
    let pathFromHash = hash.slice(slicePos);
    if (pathFromHash[0] !== "/")
      pathFromHash = "/" + pathFromHash;
    return stripBase(pathFromHash, "");
  }
  const path = stripBase(pathname, base);
  return path + search + hash;
}
function useHistoryListeners(base, historyState, currentLocation, replace) {
  let listeners = [];
  let teardowns = [];
  let pauseState = null;
  const popStateHandler = ({ state }) => {
    const to2 = createCurrentLocation(base, location);
    const from = currentLocation.value;
    const fromState = historyState.value;
    let delta = 0;
    if (state) {
      currentLocation.value = to2;
      historyState.value = state;
      if (pauseState && pauseState === from) {
        pauseState = null;
        return;
      }
      delta = fromState ? state.position - fromState.position : 0;
    } else {
      replace(to2);
    }
    listeners.forEach((listener) => {
      listener(currentLocation.value, from, {
        delta,
        type: NavigationType.pop,
        direction: delta ? delta > 0 ? NavigationDirection.forward : NavigationDirection.back : NavigationDirection.unknown
      });
    });
  };
  function pauseListeners() {
    pauseState = currentLocation.value;
  }
  function listen(callback) {
    listeners.push(callback);
    const teardown = () => {
      const index = listeners.indexOf(callback);
      if (index > -1)
        listeners.splice(index, 1);
    };
    teardowns.push(teardown);
    return teardown;
  }
  function beforeUnloadListener() {
    const { history: history2 } = window;
    if (!history2.state)
      return;
    history2.replaceState(assign({}, history2.state, { scroll: computeScrollPosition() }), "");
  }
  function destroy() {
    for (const teardown of teardowns)
      teardown();
    teardowns = [];
    window.removeEventListener("popstate", popStateHandler);
    window.removeEventListener("beforeunload", beforeUnloadListener);
  }
  window.addEventListener("popstate", popStateHandler);
  window.addEventListener("beforeunload", beforeUnloadListener, {
    passive: true
  });
  return {
    pauseListeners,
    listen,
    destroy
  };
}
function buildState(back, current, forward, replaced = false, computeScroll = false) {
  return {
    back,
    current,
    forward,
    replaced,
    position: window.history.length,
    scroll: computeScroll ? computeScrollPosition() : null
  };
}
function useHistoryStateNavigation(base) {
  const { history: history2, location: location2 } = window;
  const currentLocation = {
    value: createCurrentLocation(base, location2)
  };
  const historyState = { value: history2.state };
  if (!historyState.value) {
    changeLocation(currentLocation.value, {
      back: null,
      current: currentLocation.value,
      forward: null,
      // the length is off by one, we need to decrease it
      position: history2.length - 1,
      replaced: true,
      // don't add a scroll as the user may have an anchor, and we want
      // scrollBehavior to be triggered without a saved position
      scroll: null
    }, true);
  }
  function changeLocation(to2, state, replace2) {
    const hashIndex = base.indexOf("#");
    const url2 = hashIndex > -1 ? (location2.host && document.querySelector("base") ? base : base.slice(hashIndex)) + to2 : createBaseLocation() + base + to2;
    try {
      history2[replace2 ? "replaceState" : "pushState"](state, "", url2);
      historyState.value = state;
    } catch (err) {
      {
        console.error(err);
      }
      location2[replace2 ? "replace" : "assign"](url2);
    }
  }
  function replace(to2, data) {
    const state = assign({}, history2.state, buildState(
      historyState.value.back,
      // keep back and forward entries but override current position
      to2,
      historyState.value.forward,
      true
    ), data, { position: historyState.value.position });
    changeLocation(to2, state, true);
    currentLocation.value = to2;
  }
  function push(to2, data) {
    const currentState = assign(
      {},
      // use current history state to gracefully handle a wrong call to
      // history.replaceState
      // https://github.com/vuejs/router/issues/366
      historyState.value,
      history2.state,
      {
        forward: to2,
        scroll: computeScrollPosition()
      }
    );
    changeLocation(currentState.current, currentState, true);
    const state = assign({}, buildState(currentLocation.value, to2, null), { position: currentState.position + 1 }, data);
    changeLocation(to2, state, false);
    currentLocation.value = to2;
  }
  return {
    location: currentLocation,
    state: historyState,
    push,
    replace
  };
}
function createWebHistory(base) {
  base = normalizeBase(base);
  const historyNavigation = useHistoryStateNavigation(base);
  const historyListeners = useHistoryListeners(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace);
  function go2(delta, triggerListeners = true) {
    if (!triggerListeners)
      historyListeners.pauseListeners();
    history.go(delta);
  }
  const routerHistory = assign({
    // it's overridden right after
    location: "",
    base,
    go: go2,
    createHref: createHref.bind(null, base)
  }, historyNavigation, historyListeners);
  Object.defineProperty(routerHistory, "location", {
    enumerable: true,
    get: () => historyNavigation.location.value
  });
  Object.defineProperty(routerHistory, "state", {
    enumerable: true,
    get: () => historyNavigation.state.value
  });
  return routerHistory;
}
function createWebHashHistory(base) {
  base = location.host ? base || location.pathname + location.search : "";
  if (!base.includes("#"))
    base += "#";
  return createWebHistory(base);
}
function isRouteLocation(route) {
  return typeof route === "string" || route && typeof route === "object";
}
function isRouteName(name) {
  return typeof name === "string" || typeof name === "symbol";
}
const NavigationFailureSymbol = Symbol("");
var NavigationFailureType;
(function(NavigationFailureType2) {
  NavigationFailureType2[NavigationFailureType2["aborted"] = 4] = "aborted";
  NavigationFailureType2[NavigationFailureType2["cancelled"] = 8] = "cancelled";
  NavigationFailureType2[NavigationFailureType2["duplicated"] = 16] = "duplicated";
})(NavigationFailureType || (NavigationFailureType = {}));
function createRouterError(type4, params) {
  {
    return assign(new Error(), {
      type: type4,
      [NavigationFailureSymbol]: true
    }, params);
  }
}
function isNavigationFailure(error, type4) {
  return error instanceof Error && NavigationFailureSymbol in error && (type4 == null || !!(error.type & type4));
}
const BASE_PARAM_PATTERN = "[^/]+?";
const BASE_PATH_PARSER_OPTIONS = {
  sensitive: false,
  strict: false,
  start: true,
  end: true
};
const REGEX_CHARS_RE = /[.+*?^${}()[\]/\\]/g;
function tokensToParser(segments, extraOptions) {
  const options = assign({}, BASE_PATH_PARSER_OPTIONS, extraOptions);
  const score = [];
  let pattern4 = options.start ? "^" : "";
  const keys2 = [];
  for (const segment of segments) {
    const segmentScores = segment.length ? [] : [
      90
      /* PathScore.Root */
    ];
    if (options.strict && !segment.length)
      pattern4 += "/";
    for (let tokenIndex = 0; tokenIndex < segment.length; tokenIndex++) {
      const token = segment[tokenIndex];
      let subSegmentScore = 40 + (options.sensitive ? 0.25 : 0);
      if (token.type === 0) {
        if (!tokenIndex)
          pattern4 += "/";
        pattern4 += token.value.replace(REGEX_CHARS_RE, "\\$&");
        subSegmentScore += 40;
      } else if (token.type === 1) {
        const { value, repeatable, optional, regexp: regexp4 } = token;
        keys2.push({
          name: value,
          repeatable,
          optional
        });
        const re2 = regexp4 ? regexp4 : BASE_PARAM_PATTERN;
        if (re2 !== BASE_PARAM_PATTERN) {
          subSegmentScore += 10;
          try {
            new RegExp(`(${re2})`);
          } catch (err) {
            throw new Error(`Invalid custom RegExp for param "${value}" (${re2}): ` + err.message);
          }
        }
        let subPattern = repeatable ? `((?:${re2})(?:/(?:${re2}))*)` : `(${re2})`;
        if (!tokenIndex)
          subPattern = // avoid an optional / if there are more segments e.g. /:p?-static
          // or /:p?-:p2
          optional && segment.length < 2 ? `(?:/${subPattern})` : "/" + subPattern;
        if (optional)
          subPattern += "?";
        pattern4 += subPattern;
        subSegmentScore += 20;
        if (optional)
          subSegmentScore += -8;
        if (repeatable)
          subSegmentScore += -20;
        if (re2 === ".*")
          subSegmentScore += -50;
      }
      segmentScores.push(subSegmentScore);
    }
    score.push(segmentScores);
  }
  if (options.strict && options.end) {
    const i2 = score.length - 1;
    score[i2][score[i2].length - 1] += 0.7000000000000001;
  }
  if (!options.strict)
    pattern4 += "/?";
  if (options.end)
    pattern4 += "$";
  else if (options.strict && !pattern4.endsWith("/"))
    pattern4 += "(?:/|$)";
  const re = new RegExp(pattern4, options.sensitive ? "" : "i");
  function parse2(path) {
    const match = path.match(re);
    const params = {};
    if (!match)
      return null;
    for (let i2 = 1; i2 < match.length; i2++) {
      const value = match[i2] || "";
      const key = keys2[i2 - 1];
      params[key.name] = value && key.repeatable ? value.split("/") : value;
    }
    return params;
  }
  function stringify(params) {
    let path = "";
    let avoidDuplicatedSlash = false;
    for (const segment of segments) {
      if (!avoidDuplicatedSlash || !path.endsWith("/"))
        path += "/";
      avoidDuplicatedSlash = false;
      for (const token of segment) {
        if (token.type === 0) {
          path += token.value;
        } else if (token.type === 1) {
          const { value, repeatable, optional } = token;
          const param = value in params ? params[value] : "";
          if (isArray(param) && !repeatable) {
            throw new Error(`Provided param "${value}" is an array but it is not repeatable (* or + modifiers)`);
          }
          const text = isArray(param) ? param.join("/") : param;
          if (!text) {
            if (optional) {
              if (segment.length < 2) {
                if (path.endsWith("/"))
                  path = path.slice(0, -1);
                else
                  avoidDuplicatedSlash = true;
              }
            } else
              throw new Error(`Missing required param "${value}"`);
          }
          path += text;
        }
      }
    }
    return path || "/";
  }
  return {
    re,
    score,
    keys: keys2,
    parse: parse2,
    stringify
  };
}
function compareScoreArray(a2, b) {
  let i2 = 0;
  while (i2 < a2.length && i2 < b.length) {
    const diff = b[i2] - a2[i2];
    if (diff)
      return diff;
    i2++;
  }
  if (a2.length < b.length) {
    return a2.length === 1 && a2[0] === 40 + 40 ? -1 : 1;
  } else if (a2.length > b.length) {
    return b.length === 1 && b[0] === 40 + 40 ? 1 : -1;
  }
  return 0;
}
function comparePathParserScore(a2, b) {
  let i2 = 0;
  const aScore = a2.score;
  const bScore = b.score;
  while (i2 < aScore.length && i2 < bScore.length) {
    const comp = compareScoreArray(aScore[i2], bScore[i2]);
    if (comp)
      return comp;
    i2++;
  }
  if (Math.abs(bScore.length - aScore.length) === 1) {
    if (isLastScoreNegative(aScore))
      return 1;
    if (isLastScoreNegative(bScore))
      return -1;
  }
  return bScore.length - aScore.length;
}
function isLastScoreNegative(score) {
  const last = score[score.length - 1];
  return score.length > 0 && last[last.length - 1] < 0;
}
const ROOT_TOKEN = {
  type: 0,
  value: ""
};
const VALID_PARAM_RE = /[a-zA-Z0-9_]/;
function tokenizePath(path) {
  if (!path)
    return [[]];
  if (path === "/")
    return [[ROOT_TOKEN]];
  if (!path.startsWith("/")) {
    throw new Error(`Invalid path "${path}"`);
  }
  function crash(message2) {
    throw new Error(`ERR (${state})/"${buffer}": ${message2}`);
  }
  let state = 0;
  let previousState = state;
  const tokens = [];
  let segment;
  function finalizeSegment() {
    if (segment)
      tokens.push(segment);
    segment = [];
  }
  let i2 = 0;
  let char;
  let buffer = "";
  let customRe = "";
  function consumeBuffer() {
    if (!buffer)
      return;
    if (state === 0) {
      segment.push({
        type: 0,
        value: buffer
      });
    } else if (state === 1 || state === 2 || state === 3) {
      if (segment.length > 1 && (char === "*" || char === "+"))
        crash(`A repeatable param (${buffer}) must be alone in its segment. eg: '/:ids+.`);
      segment.push({
        type: 1,
        value: buffer,
        regexp: customRe,
        repeatable: char === "*" || char === "+",
        optional: char === "*" || char === "?"
      });
    } else {
      crash("Invalid state to consume buffer");
    }
    buffer = "";
  }
  function addCharToBuffer() {
    buffer += char;
  }
  while (i2 < path.length) {
    char = path[i2++];
    if (char === "\\" && state !== 2) {
      previousState = state;
      state = 4;
      continue;
    }
    switch (state) {
      case 0:
        if (char === "/") {
          if (buffer) {
            consumeBuffer();
          }
          finalizeSegment();
        } else if (char === ":") {
          consumeBuffer();
          state = 1;
        } else {
          addCharToBuffer();
        }
        break;
      case 4:
        addCharToBuffer();
        state = previousState;
        break;
      case 1:
        if (char === "(") {
          state = 2;
        } else if (VALID_PARAM_RE.test(char)) {
          addCharToBuffer();
        } else {
          consumeBuffer();
          state = 0;
          if (char !== "*" && char !== "?" && char !== "+")
            i2--;
        }
        break;
      case 2:
        if (char === ")") {
          if (customRe[customRe.length - 1] == "\\")
            customRe = customRe.slice(0, -1) + char;
          else
            state = 3;
        } else {
          customRe += char;
        }
        break;
      case 3:
        consumeBuffer();
        state = 0;
        if (char !== "*" && char !== "?" && char !== "+")
          i2--;
        customRe = "";
        break;
      default:
        crash("Unknown state");
        break;
    }
  }
  if (state === 2)
    crash(`Unfinished custom RegExp for param "${buffer}"`);
  consumeBuffer();
  finalizeSegment();
  return tokens;
}
function createRouteRecordMatcher(record, parent, options) {
  const parser = tokensToParser(tokenizePath(record.path), options);
  const matcher = assign(parser, {
    record,
    parent,
    // these needs to be populated by the parent
    children: [],
    alias: []
  });
  if (parent) {
    if (!matcher.record.aliasOf === !parent.record.aliasOf)
      parent.children.push(matcher);
  }
  return matcher;
}
function createRouterMatcher(routes2, globalOptions) {
  const matchers2 = [];
  const matcherMap = /* @__PURE__ */ new Map();
  globalOptions = mergeOptions({ strict: false, end: true, sensitive: false }, globalOptions);
  function getRecordMatcher(name) {
    return matcherMap.get(name);
  }
  function addRoute(record, parent, originalRecord) {
    const isRootAdd = !originalRecord;
    const mainNormalizedRecord = normalizeRouteRecord(record);
    mainNormalizedRecord.aliasOf = originalRecord && originalRecord.record;
    const options = mergeOptions(globalOptions, record);
    const normalizedRecords = [mainNormalizedRecord];
    if ("alias" in record) {
      const aliases = typeof record.alias === "string" ? [record.alias] : record.alias;
      for (const alias of aliases) {
        normalizedRecords.push(
          // we need to normalize again to ensure the `mods` property
          // being non enumerable
          normalizeRouteRecord(assign({}, mainNormalizedRecord, {
            // this allows us to hold a copy of the `components` option
            // so that async components cache is hold on the original record
            components: originalRecord ? originalRecord.record.components : mainNormalizedRecord.components,
            path: alias,
            // we might be the child of an alias
            aliasOf: originalRecord ? originalRecord.record : mainNormalizedRecord
            // the aliases are always of the same kind as the original since they
            // are defined on the same record
          }))
        );
      }
    }
    let matcher;
    let originalMatcher;
    for (const normalizedRecord of normalizedRecords) {
      const { path } = normalizedRecord;
      if (parent && path[0] !== "/") {
        const parentPath = parent.record.path;
        const connectingSlash = parentPath[parentPath.length - 1] === "/" ? "" : "/";
        normalizedRecord.path = parent.record.path + (path && connectingSlash + path);
      }
      matcher = createRouteRecordMatcher(normalizedRecord, parent, options);
      if (originalRecord) {
        originalRecord.alias.push(matcher);
      } else {
        originalMatcher = originalMatcher || matcher;
        if (originalMatcher !== matcher)
          originalMatcher.alias.push(matcher);
        if (isRootAdd && record.name && !isAliasRecord(matcher)) {
          removeRoute(record.name);
        }
      }
      if (isMatchable(matcher)) {
        insertMatcher(matcher);
      }
      if (mainNormalizedRecord.children) {
        const children = mainNormalizedRecord.children;
        for (let i2 = 0; i2 < children.length; i2++) {
          addRoute(children[i2], matcher, originalRecord && originalRecord.children[i2]);
        }
      }
      originalRecord = originalRecord || matcher;
    }
    return originalMatcher ? () => {
      removeRoute(originalMatcher);
    } : noop;
  }
  function removeRoute(matcherRef) {
    if (isRouteName(matcherRef)) {
      const matcher = matcherMap.get(matcherRef);
      if (matcher) {
        matcherMap.delete(matcherRef);
        matchers2.splice(matchers2.indexOf(matcher), 1);
        matcher.children.forEach(removeRoute);
        matcher.alias.forEach(removeRoute);
      }
    } else {
      const index = matchers2.indexOf(matcherRef);
      if (index > -1) {
        matchers2.splice(index, 1);
        if (matcherRef.record.name)
          matcherMap.delete(matcherRef.record.name);
        matcherRef.children.forEach(removeRoute);
        matcherRef.alias.forEach(removeRoute);
      }
    }
  }
  function getRoutes() {
    return matchers2;
  }
  function insertMatcher(matcher) {
    const index = findInsertionIndex(matcher, matchers2);
    matchers2.splice(index, 0, matcher);
    if (matcher.record.name && !isAliasRecord(matcher))
      matcherMap.set(matcher.record.name, matcher);
  }
  function resolve2(location2, currentLocation) {
    let matcher;
    let params = {};
    let path;
    let name;
    if ("name" in location2 && location2.name) {
      matcher = matcherMap.get(location2.name);
      if (!matcher)
        throw createRouterError(1, {
          location: location2
        });
      name = matcher.record.name;
      params = assign(
        // paramsFromLocation is a new object
        paramsFromLocation(
          currentLocation.params,
          // only keep params that exist in the resolved location
          // only keep optional params coming from a parent record
          matcher.keys.filter((k) => !k.optional).concat(matcher.parent ? matcher.parent.keys.filter((k) => k.optional) : []).map((k) => k.name)
        ),
        // discard any existing params in the current location that do not exist here
        // #1497 this ensures better active/exact matching
        location2.params && paramsFromLocation(location2.params, matcher.keys.map((k) => k.name))
      );
      path = matcher.stringify(params);
    } else if (location2.path != null) {
      path = location2.path;
      matcher = matchers2.find((m2) => m2.re.test(path));
      if (matcher) {
        params = matcher.parse(path);
        name = matcher.record.name;
      }
    } else {
      matcher = currentLocation.name ? matcherMap.get(currentLocation.name) : matchers2.find((m2) => m2.re.test(currentLocation.path));
      if (!matcher)
        throw createRouterError(1, {
          location: location2,
          currentLocation
        });
      name = matcher.record.name;
      params = assign({}, currentLocation.params, location2.params);
      path = matcher.stringify(params);
    }
    const matched = [];
    let parentMatcher = matcher;
    while (parentMatcher) {
      matched.unshift(parentMatcher.record);
      parentMatcher = parentMatcher.parent;
    }
    return {
      name,
      path,
      params,
      matched,
      meta: mergeMetaFields(matched)
    };
  }
  routes2.forEach((route) => addRoute(route));
  function clearRoutes() {
    matchers2.length = 0;
    matcherMap.clear();
  }
  return {
    addRoute,
    resolve: resolve2,
    removeRoute,
    clearRoutes,
    getRoutes,
    getRecordMatcher
  };
}
function paramsFromLocation(params, keys2) {
  const newParams = {};
  for (const key of keys2) {
    if (key in params)
      newParams[key] = params[key];
  }
  return newParams;
}
function normalizeRouteRecord(record) {
  const normalized = {
    path: record.path,
    redirect: record.redirect,
    name: record.name,
    meta: record.meta || {},
    aliasOf: record.aliasOf,
    beforeEnter: record.beforeEnter,
    props: normalizeRecordProps(record),
    children: record.children || [],
    instances: {},
    leaveGuards: /* @__PURE__ */ new Set(),
    updateGuards: /* @__PURE__ */ new Set(),
    enterCallbacks: {},
    // must be declared afterwards
    // mods: {},
    components: "components" in record ? record.components || null : record.component && { default: record.component }
  };
  Object.defineProperty(normalized, "mods", {
    value: {}
  });
  return normalized;
}
function normalizeRecordProps(record) {
  const propsObject = {};
  const props = record.props || false;
  if ("component" in record) {
    propsObject.default = props;
  } else {
    for (const name in record.components)
      propsObject[name] = typeof props === "object" ? props[name] : props;
  }
  return propsObject;
}
function isAliasRecord(record) {
  while (record) {
    if (record.record.aliasOf)
      return true;
    record = record.parent;
  }
  return false;
}
function mergeMetaFields(matched) {
  return matched.reduce((meta, record) => assign(meta, record.meta), {});
}
function mergeOptions(defaults2, partialOptions) {
  const options = {};
  for (const key in defaults2) {
    options[key] = key in partialOptions ? partialOptions[key] : defaults2[key];
  }
  return options;
}
function findInsertionIndex(matcher, matchers2) {
  let lower = 0;
  let upper = matchers2.length;
  while (lower !== upper) {
    const mid = lower + upper >> 1;
    const sortOrder = comparePathParserScore(matcher, matchers2[mid]);
    if (sortOrder < 0) {
      upper = mid;
    } else {
      lower = mid + 1;
    }
  }
  const insertionAncestor = getInsertionAncestor(matcher);
  if (insertionAncestor) {
    upper = matchers2.lastIndexOf(insertionAncestor, upper - 1);
  }
  return upper;
}
function getInsertionAncestor(matcher) {
  let ancestor = matcher;
  while (ancestor = ancestor.parent) {
    if (isMatchable(ancestor) && comparePathParserScore(matcher, ancestor) === 0) {
      return ancestor;
    }
  }
  return;
}
function isMatchable({ record }) {
  return !!(record.name || record.components && Object.keys(record.components).length || record.redirect);
}
function parseQuery(search) {
  const query = {};
  if (search === "" || search === "?")
    return query;
  const hasLeadingIM = search[0] === "?";
  const searchParams = (hasLeadingIM ? search.slice(1) : search).split("&");
  for (let i2 = 0; i2 < searchParams.length; ++i2) {
    const searchParam = searchParams[i2].replace(PLUS_RE, " ");
    const eqPos = searchParam.indexOf("=");
    const key = decode(eqPos < 0 ? searchParam : searchParam.slice(0, eqPos));
    const value = eqPos < 0 ? null : decode(searchParam.slice(eqPos + 1));
    if (key in query) {
      let currentValue = query[key];
      if (!isArray(currentValue)) {
        currentValue = query[key] = [currentValue];
      }
      currentValue.push(value);
    } else {
      query[key] = value;
    }
  }
  return query;
}
function stringifyQuery(query) {
  let search = "";
  for (let key in query) {
    const value = query[key];
    key = encodeQueryKey(key);
    if (value == null) {
      if (value !== void 0) {
        search += (search.length ? "&" : "") + key;
      }
      continue;
    }
    const values = isArray(value) ? value.map((v2) => v2 && encodeQueryValue(v2)) : [value && encodeQueryValue(value)];
    values.forEach((value2) => {
      if (value2 !== void 0) {
        search += (search.length ? "&" : "") + key;
        if (value2 != null)
          search += "=" + value2;
      }
    });
  }
  return search;
}
function normalizeQuery(query) {
  const normalizedQuery = {};
  for (const key in query) {
    const value = query[key];
    if (value !== void 0) {
      normalizedQuery[key] = isArray(value) ? value.map((v2) => v2 == null ? null : "" + v2) : value == null ? value : "" + value;
    }
  }
  return normalizedQuery;
}
const matchedRouteKey = Symbol("");
const viewDepthKey = Symbol("");
const routerKey = Symbol("");
const routeLocationKey = Symbol("");
const routerViewLocationKey = Symbol("");
function useCallbacks() {
  let handlers = [];
  function add(handler2) {
    handlers.push(handler2);
    return () => {
      const i2 = handlers.indexOf(handler2);
      if (i2 > -1)
        handlers.splice(i2, 1);
    };
  }
  function reset() {
    handlers = [];
  }
  return {
    add,
    list: () => handlers.slice(),
    reset
  };
}
function guardToPromiseFn(guard, to2, from, record, name, runWithContext = (fn2) => fn2()) {
  const enterCallbackArray = record && // name is defined if record is because of the function overload
  (record.enterCallbacks[name] = record.enterCallbacks[name] || []);
  return () => new Promise((resolve2, reject) => {
    const next = (valid) => {
      if (valid === false) {
        reject(createRouterError(4, {
          from,
          to: to2
        }));
      } else if (valid instanceof Error) {
        reject(valid);
      } else if (isRouteLocation(valid)) {
        reject(createRouterError(2, {
          from: to2,
          to: valid
        }));
      } else {
        if (enterCallbackArray && // since enterCallbackArray is truthy, both record and name also are
        record.enterCallbacks[name] === enterCallbackArray && typeof valid === "function") {
          enterCallbackArray.push(valid);
        }
        resolve2();
      }
    };
    const guardReturn = runWithContext(() => guard.call(record && record.instances[name], to2, from, next));
    let guardCall = Promise.resolve(guardReturn);
    if (guard.length < 3)
      guardCall = guardCall.then(next);
    guardCall.catch((err) => reject(err));
  });
}
function extractComponentsGuards(matched, guardType, to2, from, runWithContext = (fn2) => fn2()) {
  const guards = [];
  for (const record of matched) {
    for (const name in record.components) {
      let rawComponent = record.components[name];
      if (guardType !== "beforeRouteEnter" && !record.instances[name])
        continue;
      if (isRouteComponent(rawComponent)) {
        const options = rawComponent.__vccOpts || rawComponent;
        const guard = options[guardType];
        guard && guards.push(guardToPromiseFn(guard, to2, from, record, name, runWithContext));
      } else {
        let componentPromise = rawComponent();
        guards.push(() => componentPromise.then((resolved) => {
          if (!resolved)
            throw new Error(`Couldn't resolve component "${name}" at "${record.path}"`);
          const resolvedComponent = isESModule(resolved) ? resolved.default : resolved;
          record.mods[name] = resolved;
          record.components[name] = resolvedComponent;
          const options = resolvedComponent.__vccOpts || resolvedComponent;
          const guard = options[guardType];
          return guard && guardToPromiseFn(guard, to2, from, record, name, runWithContext)();
        }));
      }
    }
  }
  return guards;
}
function useLink(props) {
  const router2 = inject(routerKey);
  const currentRoute = inject(routeLocationKey);
  const route = computed(() => {
    const to2 = unref(props.to);
    return router2.resolve(to2);
  });
  const activeRecordIndex = computed(() => {
    const { matched } = route.value;
    const { length } = matched;
    const routeMatched = matched[length - 1];
    const currentMatched = currentRoute.matched;
    if (!routeMatched || !currentMatched.length)
      return -1;
    const index = currentMatched.findIndex(isSameRouteRecord.bind(null, routeMatched));
    if (index > -1)
      return index;
    const parentRecordPath = getOriginalPath(matched[length - 2]);
    return (
      // we are dealing with nested routes
      length > 1 && // if the parent and matched route have the same path, this link is
      // referring to the empty child. Or we currently are on a different
      // child of the same parent
      getOriginalPath(routeMatched) === parentRecordPath && // avoid comparing the child with its parent
      currentMatched[currentMatched.length - 1].path !== parentRecordPath ? currentMatched.findIndex(isSameRouteRecord.bind(null, matched[length - 2])) : index
    );
  });
  const isActive = computed(() => activeRecordIndex.value > -1 && includesParams(currentRoute.params, route.value.params));
  const isExactActive = computed(() => activeRecordIndex.value > -1 && activeRecordIndex.value === currentRoute.matched.length - 1 && isSameRouteLocationParams(currentRoute.params, route.value.params));
  function navigate(e2 = {}) {
    if (guardEvent(e2)) {
      const p2 = router2[unref(props.replace) ? "replace" : "push"](
        unref(props.to)
        // avoid uncaught errors are they are logged anyway
      ).catch(noop);
      if (props.viewTransition && typeof document !== "undefined" && "startViewTransition" in document) {
        document.startViewTransition(() => p2);
      }
      return p2;
    }
    return Promise.resolve();
  }
  return {
    route,
    href: computed(() => route.value.href),
    isActive,
    isExactActive,
    navigate
  };
}
function preferSingleVNode(vnodes) {
  return vnodes.length === 1 ? vnodes[0] : vnodes;
}
const RouterLinkImpl = /* @__PURE__ */ defineComponent({
  name: "RouterLink",
  compatConfig: { MODE: 3 },
  props: {
    to: {
      type: [String, Object],
      required: true
    },
    replace: Boolean,
    activeClass: String,
    // inactiveClass: String,
    exactActiveClass: String,
    custom: Boolean,
    ariaCurrentValue: {
      type: String,
      default: "page"
    }
  },
  useLink,
  setup(props, { slots }) {
    const link = reactive(useLink(props));
    const { options } = inject(routerKey);
    const elClass = computed(() => ({
      [getLinkClass(props.activeClass, options.linkActiveClass, "router-link-active")]: link.isActive,
      // [getLinkClass(
      //   props.inactiveClass,
      //   options.linkInactiveClass,
      //   'router-link-inactive'
      // )]: !link.isExactActive,
      [getLinkClass(props.exactActiveClass, options.linkExactActiveClass, "router-link-exact-active")]: link.isExactActive
    }));
    return () => {
      const children = slots.default && preferSingleVNode(slots.default(link));
      return props.custom ? children : h$1("a", {
        "aria-current": link.isExactActive ? props.ariaCurrentValue : null,
        href: link.href,
        // this would override user added attrs but Vue will still add
        // the listener, so we end up triggering both
        onClick: link.navigate,
        class: elClass.value
      }, children);
    };
  }
});
const RouterLink = RouterLinkImpl;
function guardEvent(e2) {
  if (e2.metaKey || e2.altKey || e2.ctrlKey || e2.shiftKey)
    return;
  if (e2.defaultPrevented)
    return;
  if (e2.button !== void 0 && e2.button !== 0)
    return;
  if (e2.currentTarget && e2.currentTarget.getAttribute) {
    const target = e2.currentTarget.getAttribute("target");
    if (/\b_blank\b/i.test(target))
      return;
  }
  if (e2.preventDefault)
    e2.preventDefault();
  return true;
}
function includesParams(outer, inner) {
  for (const key in inner) {
    const innerValue = inner[key];
    const outerValue = outer[key];
    if (typeof innerValue === "string") {
      if (innerValue !== outerValue)
        return false;
    } else {
      if (!isArray(outerValue) || outerValue.length !== innerValue.length || innerValue.some((value, i2) => value !== outerValue[i2]))
        return false;
    }
  }
  return true;
}
function getOriginalPath(record) {
  return record ? record.aliasOf ? record.aliasOf.path : record.path : "";
}
const getLinkClass = (propClass, globalClass, defaultClass) => propClass != null ? propClass : globalClass != null ? globalClass : defaultClass;
const RouterViewImpl = /* @__PURE__ */ defineComponent({
  name: "RouterView",
  // #674 we manually inherit them
  inheritAttrs: false,
  props: {
    name: {
      type: String,
      default: "default"
    },
    route: Object
  },
  // Better compat for @vue/compat users
  // https://github.com/vuejs/router/issues/1315
  compatConfig: { MODE: 3 },
  setup(props, { attrs, slots }) {
    const injectedRoute = inject(routerViewLocationKey);
    const routeToDisplay = computed(() => props.route || injectedRoute.value);
    const injectedDepth = inject(viewDepthKey, 0);
    const depth = computed(() => {
      let initialDepth = unref(injectedDepth);
      const { matched } = routeToDisplay.value;
      let matchedRoute;
      while ((matchedRoute = matched[initialDepth]) && !matchedRoute.components) {
        initialDepth++;
      }
      return initialDepth;
    });
    const matchedRouteRef = computed(() => routeToDisplay.value.matched[depth.value]);
    provide(viewDepthKey, computed(() => depth.value + 1));
    provide(matchedRouteKey, matchedRouteRef);
    provide(routerViewLocationKey, routeToDisplay);
    const viewRef = ref();
    watch(() => [viewRef.value, matchedRouteRef.value, props.name], ([instance, to2, name], [oldInstance, from, oldName]) => {
      if (to2) {
        to2.instances[name] = instance;
        if (from && from !== to2 && instance && instance === oldInstance) {
          if (!to2.leaveGuards.size) {
            to2.leaveGuards = from.leaveGuards;
          }
          if (!to2.updateGuards.size) {
            to2.updateGuards = from.updateGuards;
          }
        }
      }
      if (instance && to2 && // if there is no instance but to and from are the same this might be
      // the first visit
      (!from || !isSameRouteRecord(to2, from) || !oldInstance)) {
        (to2.enterCallbacks[name] || []).forEach((callback) => callback(instance));
      }
    }, { flush: "post" });
    return () => {
      const route = routeToDisplay.value;
      const currentName = props.name;
      const matchedRoute = matchedRouteRef.value;
      const ViewComponent = matchedRoute && matchedRoute.components[currentName];
      if (!ViewComponent) {
        return normalizeSlot(slots.default, { Component: ViewComponent, route });
      }
      const routePropsOption = matchedRoute.props[currentName];
      const routeProps = routePropsOption ? routePropsOption === true ? route.params : typeof routePropsOption === "function" ? routePropsOption(route) : routePropsOption : null;
      const onVnodeUnmounted = (vnode) => {
        if (vnode.component.isUnmounted) {
          matchedRoute.instances[currentName] = null;
        }
      };
      const component = h$1(ViewComponent, assign({}, routeProps, attrs, {
        onVnodeUnmounted,
        ref: viewRef
      }));
      return (
        // pass the vnode to the slot as a prop.
        // h and <component :is="..."> both accept vnodes
        normalizeSlot(slots.default, { Component: component, route }) || component
      );
    };
  }
});
function normalizeSlot(slot, data) {
  if (!slot)
    return null;
  const slotContent = slot(data);
  return slotContent.length === 1 ? slotContent[0] : slotContent;
}
const RouterView = RouterViewImpl;
function createRouter(options) {
  const matcher = createRouterMatcher(options.routes, options);
  const parseQuery$1 = options.parseQuery || parseQuery;
  const stringifyQuery$1 = options.stringifyQuery || stringifyQuery;
  const routerHistory = options.history;
  const beforeGuards = useCallbacks();
  const beforeResolveGuards = useCallbacks();
  const afterGuards = useCallbacks();
  const currentRoute = shallowRef(START_LOCATION_NORMALIZED);
  let pendingLocation = START_LOCATION_NORMALIZED;
  if (isBrowser && options.scrollBehavior && "scrollRestoration" in history) {
    history.scrollRestoration = "manual";
  }
  const normalizeParams = applyToParams.bind(null, (paramValue) => "" + paramValue);
  const encodeParams = applyToParams.bind(null, encodeParam);
  const decodeParams = (
    // @ts-expect-error: intentionally avoid the type check
    applyToParams.bind(null, decode)
  );
  function addRoute(parentOrRoute, route) {
    let parent;
    let record;
    if (isRouteName(parentOrRoute)) {
      parent = matcher.getRecordMatcher(parentOrRoute);
      record = route;
    } else {
      record = parentOrRoute;
    }
    return matcher.addRoute(record, parent);
  }
  function removeRoute(name) {
    const recordMatcher = matcher.getRecordMatcher(name);
    if (recordMatcher) {
      matcher.removeRoute(recordMatcher);
    }
  }
  function getRoutes() {
    return matcher.getRoutes().map((routeMatcher) => routeMatcher.record);
  }
  function hasRoute(name) {
    return !!matcher.getRecordMatcher(name);
  }
  function resolve2(rawLocation, currentLocation) {
    currentLocation = assign({}, currentLocation || currentRoute.value);
    if (typeof rawLocation === "string") {
      const locationNormalized = parseURL(parseQuery$1, rawLocation, currentLocation.path);
      const matchedRoute2 = matcher.resolve({ path: locationNormalized.path }, currentLocation);
      const href2 = routerHistory.createHref(locationNormalized.fullPath);
      return assign(locationNormalized, matchedRoute2, {
        params: decodeParams(matchedRoute2.params),
        hash: decode(locationNormalized.hash),
        redirectedFrom: void 0,
        href: href2
      });
    }
    let matcherLocation;
    if (rawLocation.path != null) {
      matcherLocation = assign({}, rawLocation, {
        path: parseURL(parseQuery$1, rawLocation.path, currentLocation.path).path
      });
    } else {
      const targetParams = assign({}, rawLocation.params);
      for (const key in targetParams) {
        if (targetParams[key] == null) {
          delete targetParams[key];
        }
      }
      matcherLocation = assign({}, rawLocation, {
        params: encodeParams(targetParams)
      });
      currentLocation.params = encodeParams(currentLocation.params);
    }
    const matchedRoute = matcher.resolve(matcherLocation, currentLocation);
    const hash = rawLocation.hash || "";
    matchedRoute.params = normalizeParams(decodeParams(matchedRoute.params));
    const fullPath = stringifyURL(stringifyQuery$1, assign({}, rawLocation, {
      hash: encodeHash(hash),
      path: matchedRoute.path
    }));
    const href = routerHistory.createHref(fullPath);
    return assign({
      fullPath,
      // keep the hash encoded so fullPath is effectively path + encodedQuery +
      // hash
      hash,
      query: (
        // if the user is using a custom query lib like qs, we might have
        // nested objects, so we keep the query as is, meaning it can contain
        // numbers at `$route.query`, but at the point, the user will have to
        // use their own type anyway.
        // https://github.com/vuejs/router/issues/328#issuecomment-649481567
        stringifyQuery$1 === stringifyQuery ? normalizeQuery(rawLocation.query) : rawLocation.query || {}
      )
    }, matchedRoute, {
      redirectedFrom: void 0,
      href
    });
  }
  function locationAsObject(to2) {
    return typeof to2 === "string" ? parseURL(parseQuery$1, to2, currentRoute.value.path) : assign({}, to2);
  }
  function checkCanceledNavigation(to2, from) {
    if (pendingLocation !== to2) {
      return createRouterError(8, {
        from,
        to: to2
      });
    }
  }
  function push(to2) {
    return pushWithRedirect(to2);
  }
  function replace(to2) {
    return push(assign(locationAsObject(to2), { replace: true }));
  }
  function handleRedirectRecord(to2) {
    const lastMatched = to2.matched[to2.matched.length - 1];
    if (lastMatched && lastMatched.redirect) {
      const { redirect } = lastMatched;
      let newTargetLocation = typeof redirect === "function" ? redirect(to2) : redirect;
      if (typeof newTargetLocation === "string") {
        newTargetLocation = newTargetLocation.includes("?") || newTargetLocation.includes("#") ? newTargetLocation = locationAsObject(newTargetLocation) : (
          // force empty params
          { path: newTargetLocation }
        );
        newTargetLocation.params = {};
      }
      return assign({
        query: to2.query,
        hash: to2.hash,
        // avoid transferring params if the redirect has a path
        params: newTargetLocation.path != null ? {} : to2.params
      }, newTargetLocation);
    }
  }
  function pushWithRedirect(to2, redirectedFrom) {
    const targetLocation = pendingLocation = resolve2(to2);
    const from = currentRoute.value;
    const data = to2.state;
    const force = to2.force;
    const replace2 = to2.replace === true;
    const shouldRedirect = handleRedirectRecord(targetLocation);
    if (shouldRedirect)
      return pushWithRedirect(
        assign(locationAsObject(shouldRedirect), {
          state: typeof shouldRedirect === "object" ? assign({}, data, shouldRedirect.state) : data,
          force,
          replace: replace2
        }),
        // keep original redirectedFrom if it exists
        redirectedFrom || targetLocation
      );
    const toLocation = targetLocation;
    toLocation.redirectedFrom = redirectedFrom;
    let failure;
    if (!force && isSameRouteLocation(stringifyQuery$1, from, targetLocation)) {
      failure = createRouterError(16, { to: toLocation, from });
      handleScroll(
        from,
        from,
        // this is a push, the only way for it to be triggered from a
        // history.listen is with a redirect, which makes it become a push
        true,
        // This cannot be the first navigation because the initial location
        // cannot be manually navigated to
        false
      );
    }
    return (failure ? Promise.resolve(failure) : navigate(toLocation, from)).catch((error) => isNavigationFailure(error) ? (
      // navigation redirects still mark the router as ready
      isNavigationFailure(
        error,
        2
        /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
      ) ? error : markAsReady(error)
    ) : (
      // reject any unknown error
      triggerError(error, toLocation, from)
    )).then((failure2) => {
      if (failure2) {
        if (isNavigationFailure(
          failure2,
          2
          /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
        )) {
          return pushWithRedirect(
            // keep options
            assign({
              // preserve an existing replacement but allow the redirect to override it
              replace: replace2
            }, locationAsObject(failure2.to), {
              state: typeof failure2.to === "object" ? assign({}, data, failure2.to.state) : data,
              force
            }),
            // preserve the original redirectedFrom if any
            redirectedFrom || toLocation
          );
        }
      } else {
        failure2 = finalizeNavigation(toLocation, from, true, replace2, data);
      }
      triggerAfterEach(toLocation, from, failure2);
      return failure2;
    });
  }
  function checkCanceledNavigationAndReject(to2, from) {
    const error = checkCanceledNavigation(to2, from);
    return error ? Promise.reject(error) : Promise.resolve();
  }
  function runWithContext(fn2) {
    const app = installedApps.values().next().value;
    return app && typeof app.runWithContext === "function" ? app.runWithContext(fn2) : fn2();
  }
  function navigate(to2, from) {
    let guards;
    const [leavingRecords, updatingRecords, enteringRecords] = extractChangingRecords(to2, from);
    guards = extractComponentsGuards(leavingRecords.reverse(), "beforeRouteLeave", to2, from);
    for (const record of leavingRecords) {
      record.leaveGuards.forEach((guard) => {
        guards.push(guardToPromiseFn(guard, to2, from));
      });
    }
    const canceledNavigationCheck = checkCanceledNavigationAndReject.bind(null, to2, from);
    guards.push(canceledNavigationCheck);
    return runGuardQueue(guards).then(() => {
      guards = [];
      for (const guard of beforeGuards.list()) {
        guards.push(guardToPromiseFn(guard, to2, from));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = extractComponentsGuards(updatingRecords, "beforeRouteUpdate", to2, from);
      for (const record of updatingRecords) {
        record.updateGuards.forEach((guard) => {
          guards.push(guardToPromiseFn(guard, to2, from));
        });
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = [];
      for (const record of enteringRecords) {
        if (record.beforeEnter) {
          if (isArray(record.beforeEnter)) {
            for (const beforeEnter of record.beforeEnter)
              guards.push(guardToPromiseFn(beforeEnter, to2, from));
          } else {
            guards.push(guardToPromiseFn(record.beforeEnter, to2, from));
          }
        }
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      to2.matched.forEach((record) => record.enterCallbacks = {});
      guards = extractComponentsGuards(enteringRecords, "beforeRouteEnter", to2, from, runWithContext);
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = [];
      for (const guard of beforeResolveGuards.list()) {
        guards.push(guardToPromiseFn(guard, to2, from));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).catch((err) => isNavigationFailure(
      err,
      8
      /* ErrorTypes.NAVIGATION_CANCELLED */
    ) ? err : Promise.reject(err));
  }
  function triggerAfterEach(to2, from, failure) {
    afterGuards.list().forEach((guard) => runWithContext(() => guard(to2, from, failure)));
  }
  function finalizeNavigation(toLocation, from, isPush, replace2, data) {
    const error = checkCanceledNavigation(toLocation, from);
    if (error)
      return error;
    const isFirstNavigation = from === START_LOCATION_NORMALIZED;
    const state = !isBrowser ? {} : history.state;
    if (isPush) {
      if (replace2 || isFirstNavigation)
        routerHistory.replace(toLocation.fullPath, assign({
          scroll: isFirstNavigation && state && state.scroll
        }, data));
      else
        routerHistory.push(toLocation.fullPath, data);
    }
    currentRoute.value = toLocation;
    handleScroll(toLocation, from, isPush, isFirstNavigation);
    markAsReady();
  }
  let removeHistoryListener;
  function setupListeners() {
    if (removeHistoryListener)
      return;
    removeHistoryListener = routerHistory.listen((to2, _from, info) => {
      if (!router2.listening)
        return;
      const toLocation = resolve2(to2);
      const shouldRedirect = handleRedirectRecord(toLocation);
      if (shouldRedirect) {
        pushWithRedirect(assign(shouldRedirect, { replace: true, force: true }), toLocation).catch(noop);
        return;
      }
      pendingLocation = toLocation;
      const from = currentRoute.value;
      if (isBrowser) {
        saveScrollPosition(getScrollKey(from.fullPath, info.delta), computeScrollPosition());
      }
      navigate(toLocation, from).catch((error) => {
        if (isNavigationFailure(
          error,
          4 | 8
          /* ErrorTypes.NAVIGATION_CANCELLED */
        )) {
          return error;
        }
        if (isNavigationFailure(
          error,
          2
          /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
        )) {
          pushWithRedirect(
            assign(locationAsObject(error.to), {
              force: true
            }),
            toLocation
            // avoid an uncaught rejection, let push call triggerError
          ).then((failure) => {
            if (isNavigationFailure(
              failure,
              4 | 16
              /* ErrorTypes.NAVIGATION_DUPLICATED */
            ) && !info.delta && info.type === NavigationType.pop) {
              routerHistory.go(-1, false);
            }
          }).catch(noop);
          return Promise.reject();
        }
        if (info.delta) {
          routerHistory.go(-info.delta, false);
        }
        return triggerError(error, toLocation, from);
      }).then((failure) => {
        failure = failure || finalizeNavigation(
          // after navigation, all matched components are resolved
          toLocation,
          from,
          false
        );
        if (failure) {
          if (info.delta && // a new navigation has been triggered, so we do not want to revert, that will change the current history
          // entry while a different route is displayed
          !isNavigationFailure(
            failure,
            8
            /* ErrorTypes.NAVIGATION_CANCELLED */
          )) {
            routerHistory.go(-info.delta, false);
          } else if (info.type === NavigationType.pop && isNavigationFailure(
            failure,
            4 | 16
            /* ErrorTypes.NAVIGATION_DUPLICATED */
          )) {
            routerHistory.go(-1, false);
          }
        }
        triggerAfterEach(toLocation, from, failure);
      }).catch(noop);
    });
  }
  let readyHandlers = useCallbacks();
  let errorListeners = useCallbacks();
  let ready;
  function triggerError(error, to2, from) {
    markAsReady(error);
    const list = errorListeners.list();
    if (list.length) {
      list.forEach((handler2) => handler2(error, to2, from));
    } else {
      console.error(error);
    }
    return Promise.reject(error);
  }
  function isReady() {
    if (ready && currentRoute.value !== START_LOCATION_NORMALIZED)
      return Promise.resolve();
    return new Promise((resolve22, reject) => {
      readyHandlers.add([resolve22, reject]);
    });
  }
  function markAsReady(err) {
    if (!ready) {
      ready = !err;
      setupListeners();
      readyHandlers.list().forEach(([resolve22, reject]) => err ? reject(err) : resolve22());
      readyHandlers.reset();
    }
    return err;
  }
  function handleScroll(to2, from, isPush, isFirstNavigation) {
    const { scrollBehavior } = options;
    if (!isBrowser || !scrollBehavior)
      return Promise.resolve();
    const scrollPosition = !isPush && getSavedScrollPosition(getScrollKey(to2.fullPath, 0)) || (isFirstNavigation || !isPush) && history.state && history.state.scroll || null;
    return nextTick().then(() => scrollBehavior(to2, from, scrollPosition)).then((position) => position && scrollToPosition(position)).catch((err) => triggerError(err, to2, from));
  }
  const go2 = (delta) => routerHistory.go(delta);
  let started;
  const installedApps = /* @__PURE__ */ new Set();
  const router2 = {
    currentRoute,
    listening: true,
    addRoute,
    removeRoute,
    clearRoutes: matcher.clearRoutes,
    hasRoute,
    getRoutes,
    resolve: resolve2,
    options,
    push,
    replace,
    go: go2,
    back: () => go2(-1),
    forward: () => go2(1),
    beforeEach: beforeGuards.add,
    beforeResolve: beforeResolveGuards.add,
    afterEach: afterGuards.add,
    onError: errorListeners.add,
    isReady,
    install(app) {
      const router22 = this;
      app.component("RouterLink", RouterLink);
      app.component("RouterView", RouterView);
      app.config.globalProperties.$router = router22;
      Object.defineProperty(app.config.globalProperties, "$route", {
        enumerable: true,
        get: () => unref(currentRoute)
      });
      if (isBrowser && // used for the initial navigation client side to avoid pushing
      // multiple times when the router is used in multiple apps
      !started && currentRoute.value === START_LOCATION_NORMALIZED) {
        started = true;
        push(routerHistory.location).catch((err) => {
        });
      }
      const reactiveRoute = {};
      for (const key in START_LOCATION_NORMALIZED) {
        Object.defineProperty(reactiveRoute, key, {
          get: () => currentRoute.value[key],
          enumerable: true
        });
      }
      app.provide(routerKey, router22);
      app.provide(routeLocationKey, shallowReactive(reactiveRoute));
      app.provide(routerViewLocationKey, currentRoute);
      const unmountApp = app.unmount;
      installedApps.add(app);
      app.unmount = function() {
        installedApps.delete(app);
        if (installedApps.size < 1) {
          pendingLocation = START_LOCATION_NORMALIZED;
          removeHistoryListener && removeHistoryListener();
          removeHistoryListener = null;
          currentRoute.value = START_LOCATION_NORMALIZED;
          started = false;
          ready = false;
        }
        unmountApp();
      };
    }
  };
  function runGuardQueue(guards) {
    return guards.reduce((promise, guard) => promise.then(() => runWithContext(guard)), Promise.resolve());
  }
  return router2;
}
function extractChangingRecords(to2, from) {
  const leavingRecords = [];
  const updatingRecords = [];
  const enteringRecords = [];
  const len = Math.max(from.matched.length, to2.matched.length);
  for (let i2 = 0; i2 < len; i2++) {
    const recordFrom = from.matched[i2];
    if (recordFrom) {
      if (to2.matched.find((record) => isSameRouteRecord(record, recordFrom)))
        updatingRecords.push(recordFrom);
      else
        leavingRecords.push(recordFrom);
    }
    const recordTo = to2.matched[i2];
    if (recordTo) {
      if (!from.matched.find((record) => isSameRouteRecord(record, recordTo))) {
        enteringRecords.push(recordTo);
      }
    }
  }
  return [leavingRecords, updatingRecords, enteringRecords];
}
function useRoute(_name) {
  return inject(routeLocationKey);
}
const userApi = {
  login(data) {
    return service.post("/api/login", data).catch(handleError);
  },
  register(data) {
    return service.post("/api/register", data).catch(handleError);
  },
  me() {
    return service.get("/api/users/me").catch(handleError);
  },
  update(data) {
    return service.put(`/api/users/me`, data).catch(handleError);
  },
  updatePassword(data) {
    return service.put(`/api/users/password`, data).catch(handleError);
  },
  checkUsername(account) {
    return service.post(`/api/check_account`, {
      account
    }).catch(handleError);
  }
};
const CURRENCY_SYMBOL_MAP = /* @__PURE__ */ new Map([
  ["CNY", "¥"],
  ["USD", "$"],
  ["EUR", "€"],
  ["GBP", "£"],
  ["JPY", "¥"]
]);
const getOrderCache = ({ key = "" } = {}) => {
  let temporary_order_data = JSON.parse(localStorage.getItem("temporary_order_data") || "{}");
  let order_data = temporary_order_data[key];
  if (!order_data)
    return temporary_order_data;
  if (!Number(order_data.payment_expired_time) || Number(order_data.payment_expired_time) < Date.now()) {
    setOrderCache({ key, value: {} });
    return {};
  }
  return order_data;
};
const setOrderCache = ({ key = "", value = {} } = {}) => {
  let temporary_order_data = getOrderCache();
  temporary_order_data[key] = value;
  localStorage.setItem("temporary_order_data", JSON.stringify(temporary_order_data));
};
let subscription_list = [];
const subscriptionApi = {
  async list({ reset = false } = {}) {
    if (reset)
      subscription_list = [];
    if (subscription_list.length)
      return { count: subscription_list.length, list: subscription_list };
    const { data: { count = 0, settings = [] } = {} } = await service.get(`/api/subscriptions/settings`).catch(handleError);
    subscription_list = settings.map((item = {}, index) => {
      item.group = item.group || {};
      item.setting = item.setting || {};
      item = {
        ...item,
        ...item.group,
        ...item.setting
      };
      item.logo = item.logo || item.setting.logo_url || "";
      item.delete = Boolean(item.delete) || false;
      item.group_id = item.group_id || 0;
      item.setting_id = item.setting_id || 0;
      item.sort = item.sort || settings.length - index || 0;
      item.group_name = item.group_name || "";
      item.logo_url = item.logo_url || "";
      item.ai_enabled = Boolean(item.ai_enabled) || false;
      item.relations = item.relations || [];
      item.year_info = JSON.parse(JSON.stringify(item.relations.find((row = {}) => row.type == 1 && row.time_unit === "year") || {}));
      item.year_info.amount = (Number(item.year_info.amount || 0) / 100).toFixed(2).replace(".00", "");
      item.year_info.currency = item.year_info.currency || "CNY";
      item.year_info.currency_symbol = CURRENCY_SYMBOL_MAP.get(item.year_info.currency) || "¥";
      item.year_info.relation_id = item.year_info.relation_id || 0;
      item.year_info.time_unit = item.year_info.time_unit || "year";
      item.year_info.type = item.year_info.type || 1;
      item.month_info = JSON.parse(JSON.stringify(item.relations.find((row = {}) => row.type == 1 && row.time_unit === "month") || {}));
      item.month_info.amount = (Number(item.month_info.amount || 0) / 100).toFixed(2).replace(".00", "");
      item.month_info.currency = item.month_info.currency || "CNY";
      item.month_info.currency_symbol = CURRENCY_SYMBOL_MAP.get(item.month_info.currency) || "¥";
      item.month_info.relation_id = item.month_info.relation_id || 0;
      item.month_info.time_unit = item.month_info.time_unit || "month";
      item.month_info.type = item.month_info.type || 1;
      item.credit_month_info = JSON.parse(JSON.stringify(item.relations.find((row = {}) => row.type == 2) || {}));
      item.credit_month_info.amount = Number(item.credit_month_info.amount || 0).toFixed(2).replace(".00", "");
      item.credit_month_info.currency = item.credit_month_info.currency || "";
      item.credit_month_info.currency_symbol = CURRENCY_SYMBOL_MAP.get(item.credit_month_info.currency) || "";
      item.credit_month_info.relation_id = item.credit_month_info.relation_id || 0;
      item.credit_month_info.time_unit = item.credit_month_info.time_unit || "month";
      item.credit_month_info.type = item.credit_month_info.type || 2;
      item.agents = item.agents || [];
      return item;
    });
    return {
      count,
      list: subscription_list
    };
  },
  getFormatOrderData(data = {}) {
    data.order = data.order || {};
    data.payment_info = data.payment_info || {};
    data = {
      ...data,
      ...data.order,
      ...data.payment_info
    };
    data.order_id = +data.order.id || 0;
    data.payment_expired_time = +data.payment_info.expired_time || 0;
    if (data.payment_expired_time)
      data.payment_expired_time -= 1e3 * 60 * 10;
    data.payment_order_id = data.payment_info.order_id || 0;
    return data;
  },
  async createOrder({ params = {}, cache_disabled = false } = {}) {
    params = {
      user_id: 0,
      nickname: "",
      subscription_id: 0,
      subscription_name: "",
      pay_type: PAYMENT_TYPE_WECHAT,
      amount: 0,
      currency: "CNY",
      duration: 0,
      time_unit: "month",
      ...params
    };
    const storage_key = A(JSON.stringify(params));
    const order_data = getOrderCache({ key: storage_key });
    if (order_data && +order_data.order_id > 0)
      return order_data;
    let { data = {} } = await service.post(`/api/orders`, params).catch(handleError);
    data = this.getFormatOrderData(data);
    setOrderCache({ key: storage_key, value: data });
    return data;
  },
  async getOrderStatus(params) {
    const { data = {} } = await service.get(`/api/orders/status/${params.order_id}`).catch(handleError);
    return data;
  }
};
const eventBus = {
  events: {},
  /**
   * 触发事件
   * @param eventName 事件名称
   * @param data 事件数据
   */
  emit(eventName, data) {
    if (this.events[eventName]) {
      this.events[eventName].forEach((callback) => callback(data));
    }
    return this;
  },
  /**
   * 监听事件
   * @param eventName 事件名称
   * @param callback 回调函数
   */
  on(eventName, callback) {
    this.events[eventName] = this.events[eventName] || [];
    this.events[eventName].push(callback);
    return this;
  },
  /**
   * 监听事件一次（触发后自动移除）
   * @param eventName 事件名称
   * @param callback 回调函数
   */
  once(eventName, callback) {
    const onceWrapper = (data) => {
      callback(data);
      this.off(eventName, onceWrapper);
    };
    return this.on(eventName, onceWrapper);
  },
  /**
   * 移除事件监听
   * @param eventName 事件名称
   * @param callback 可选的回调函数，如果不提供则移除该事件的所有监听器
   */
  off(eventName, callback) {
    if (this.events[eventName]) {
      if (callback) {
        this.events[eventName] = this.events[eventName].filter((cb2) => cb2 !== callback);
      } else {
        delete this.events[eventName];
      }
    }
    return this;
  },
  /**
   * 获取指定事件的监听器数量
   * @param eventName 事件名称
   */
  listenerCount(eventName) {
    return this.events[eventName]?.length || 0;
  },
  /**
   * 移除所有事件监听器
   */
  clear() {
    this.events = {};
    return this;
  }
};
const EVENT_NAMES = {
  // 支付相关事件
  LOGIN_SUCCESS: "login:success"
};
const DEFAULT_GROUP_NAME = "免费版";
const DEFAULT_GROUP_ICON = "vip-1";
const TOKEN_KEY = "access_token";
const DEFAULT_USER = {
  access_token: localStorage.getItem(TOKEN_KEY) || "",
  user_id: "",
  username: "",
  nickname: "",
  avatar: "",
  email: "",
  eid: 0,
  role: 0,
  mobile: "",
  group_id: 0,
  group_name: DEFAULT_GROUP_NAME,
  group_icon: DEFAULT_GROUP_ICON,
  is_internal: false
};
const useUserStore = /* @__PURE__ */ defineStore("user-store", {
  state: () => ({
    info: { ...DEFAULT_USER },
    is_login: !!DEFAULT_USER.access_token
  }),
  actions: {
    async login(data) {
      try {
        const res = await userApi.login(data);
        this.setAccessToken(res.data.access_token);
        await this.getUserInfo();
        eventBus.emit(EVENT_NAMES.LOGIN_SUCCESS);
      } catch (error) {
        throw error;
      }
    },
    async register(data) {
      const registerData = {
        ...data,
        nickname: data.nickname || data.username
      };
      const res = await userApi.register(registerData);
      this.setAccessToken(res.data.access_token);
      await this.getUserInfo();
    },
    async update(data) {
      const res = await userApi.update(data);
      Object.assign(this.info, {
        avatar: res.data.avatar,
        nickname: res.data.nickname
      });
    },
    async getUserInfo() {
      if (!localStorage.getItem(TOKEN_KEY))
        return;
      try {
        const [res, { list: subscription_list2 = [] }] = await Promise.all([
          userApi.me(),
          subscriptionApi.list()
        ]);
        this.info = {
          access_token: res.data.access_token || "",
          user_id: res.data.user_id || "",
          username: res.data.username || "",
          nickname: res.data.nickname || "",
          avatar: res.data.avatar.replace(/^(\/\/)/, "http://") || "https://chat.53ai.com/images/robot_avatar.png",
          email: res.data.email || "",
          eid: res.data.eid || 0,
          role: res.data.role || 0,
          mobile: res.data.mobile || "",
          group_id: res.data.group_id || 0,
          group_name: res.data.group_name || DEFAULT_GROUP_NAME,
          group_icon: res.data.group_icon || DEFAULT_GROUP_ICON,
          is_internal: res.data.type == 2
        };
        const subscription_data = subscription_list2.find((item = {}) => item.group_id == this.info.group_id);
        if (subscription_data) {
          this.info.group_name = subscription_data.group_name || DEFAULT_GROUP_NAME;
          this.info.group_icon = subscription_data.logo_url || DEFAULT_GROUP_ICON;
        }
        this.is_login = true;
        if (window.$chat53ai)
          window.$chat53ai.$win({ type: "agenthub_login", data: JSON.stringify({ ...this.info }) });
      } catch (error) {
        const response = error.response || {};
        const data = response.data || error || {};
        const message2 = data.message;
        if (["token expired", "forbidden"].includes(message2)) {
          this.logout({ redirectDisabled: true });
        }
        throw error;
      }
    },
    setGroupName(group_name) {
      this.info.group_name = group_name || DEFAULT_GROUP_NAME;
    },
    setGroupIcon(group_icon) {
      this.info.group_icon = group_icon || DEFAULT_GROUP_ICON;
    },
    setAccessToken(token) {
      localStorage.setItem(TOKEN_KEY, token);
      this.info.access_token = token;
    },
    updateInfo(data) {
      this.info = {
        ...this.info,
        ...data
      };
      this.is_login = true;
    },
    logout({ redirectDisabled = false } = {}) {
      this.info = { ...DEFAULT_USER };
      this.is_login = false;
      localStorage.removeItem(TOKEN_KEY);
      setTimeout(() => {
        if (!redirectDisabled && !window.$isElectron) {
          location.href = "/";
        }
      }, 800);
    }
  }
});
const group = {
  list(group_type) {
    return service.get(`/api/groups/type/current/${group_type}`).catch(handleError);
  }
};
const agent = {
  async list() {
    const userStore = useUserStore();
    if (!userStore.info.user_id)
      await userStore.getUserInfo();
    const is_internal = userStore.info.is_internal;
    return service.get(is_internal ? `/api/agents/internal_users` : `/api/agents/current`).catch(handleError);
  }
};
const AGENT_TYPE = 3;
const useAgentStore = /* @__PURE__ */ defineStore("agent-store", {
  state: () => ({
    categorys: [],
    agentList: []
  }),
  actions: {
    async loadAgentList() {
      try {
        const res = await agent.list();
        this.agentList = res.data.agents.map((item) => {
          item.custom_config_obj = item.custom_config ? JSON.parse(item.custom_config) : {};
          return item;
        });
        return this.agentList;
      } catch (error) {
        return [];
      }
    },
    async loadCategorys() {
      const res = await group.list(AGENT_TYPE);
      this.categorys = [{ group_id: 0, group_name: window.$t("common.all") }].concat(res.data);
    }
  }
});
const getPasswordRules = () => {
  return {
    validator: (rule, value) => {
      if (value.length < 8 || value.length > 20) {
        return Promise.reject(window.$t("form.password_length"));
      }
      return Promise.resolve();
    },
    trigger: "blur"
  };
};
const getMobileRules = () => {
  return {
    validator: (rule, value) => {
      const phoneRegex = /^1[3-9]\d{9}$/;
      if (!phoneRegex.test(value)) {
        return Promise.reject(window.$t("form.mobile_format"));
      }
      return Promise.resolve();
    },
    trigger: "blur"
  };
};
const getEmailRules = () => {
  return {
    validator: (rule, value) => {
      if (!value) {
        return Promise.resolve();
      }
      const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
      if (!emailRegex.test(value)) {
        return Promise.reject(window.$t("form.email_format"));
      }
      return Promise.resolve();
    },
    trigger: "blur"
  };
};
var define_import_meta_env_default = { BASE_URL: "./", MODE: "production", DEV: false, PROD: true, SSR: false };
function useEnv() {
  const isOpLocalEnv = ref(define_import_meta_env_default.VITE_PLATFORM === "op-local");
  return {
    isOpLocalEnv
  };
}
const qyy_host = window.qyy_host || "http://testapi.qunyingyong.net";
const common = {
  sendcode(data) {
    return service.post(`${qyy_host}/v3/users/sendcode`, data, {
      sign: true,
      baseURL: ""
    }).catch(handleError);
  },
  verifycode(data) {
    return service.post(`${qyy_host}/v4/xbot/checkverificationcode`, data, {
      ibos_sign: true,
      baseURL: ""
    }).then((res) => {
      if (res.code !== 0) {
        return Promise.reject({ response: { data: res } });
      }
      return res;
    }).catch(handleError);
  }
};
function isChinaMobile(phone) {
  let cleaned = phone.replace(/\D/g, "");
  if (cleaned.length > 11)
    cleaned = cleaned.slice(-11);
  if (cleaned.length !== 11 || !cleaned.startsWith("1"))
    return false;
  const mobilePattern = /^1(3[5-9]|34[0-8]|440|4(7|8[0-9])|5[0-27-9]|7[28]|8[2-47-8]|9[58]|20)/;
  return mobilePattern.test(cleaned);
}
const useMobile = () => {
  const codeCount = ref(0);
  const codeRule = {
    validator: (rule, value, callback) => {
      if (/^\d{4}$/.test(value))
        callback();
      else
        callback(new Error(window.$t("form.verify_code_format")));
    },
    trigger: ["blur", "change"]
  };
  let _countTimer;
  const countdown = () => {
    clearTimeout(_countTimer);
    _countTimer = setTimeout(() => {
      codeCount.value -= 1;
      if (codeCount.value <= 0)
        return;
      countdown();
    }, 1e3);
  };
  const sendcode = (mobile) => {
    if (!mobile.trim())
      return;
    common.sendcode({
      mobile,
      source: isChinaMobile(mobile) ? "companyibos" : "53ai"
    }).then(() => {
      codeCount.value = 60;
      countdown();
      ElMessage.success(window.$t("status.sent"));
    });
  };
  return {
    codeCount,
    codeRule,
    sendcode
  };
};
const _hoisted_1$1 = { class: "py-2" };
const _hoisted_2 = { class: "text-3xl text-[#1D1E1F] font-bold text-center mb-3" };
const _hoisted_3 = { class: "text-sm text-[#9A9A9A] text-center" };
const _hoisted_4 = {
  key: 0,
  class: "text-base pl-3 border-ltext-[#9A9A9A] cursor-not-allowed"
};
const _hoisted_5 = { class: "text-xs text-[#9A9A9A] text-center mt-5" };
const _hoisted_6 = { class: "text-[#4F5052] cursor-pointer" };
const _hoisted_7 = { class: "text-[#4F5052] cursor-pointer" };
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  __name: "index",
  emits: ["login", "close"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const { isOpLocalEnv } = useEnv();
    const userStore = useUserStore();
    const agentStore = useAgentStore();
    const { sendcode, codeRule, codeCount } = useMobile();
    const formRef = ref();
    const isVisible2 = ref(false);
    const isMobile = computed(() => {
      return /^1[3-9]\d{9}$/.test(form.username);
    });
    const emit2 = __emit;
    const rules2 = computed(() => {
      return {
        username: isOpLocalEnv.value ? [getEmailRules()] : [getMobileRules()],
        password: [getPasswordRules()],
        verify_code: [codeRule]
      };
    });
    const form = reactive({
      username: "",
      password: "",
      verify_code: ""
    });
    const usernameCache = reactive(/* @__PURE__ */ new Map());
    const isRegister = ref(false);
    const open = () => {
      isRegister.value = false;
      isVisible2.value = true;
    };
    const close = () => {
      isVisible2.value = false;
      emit2("close");
    };
    const onUsernameBlur = () => {
      if (!isMobile.value)
        return;
      if (usernameCache.has(form.username)) {
        const cachedResult = usernameCache.get(form.username);
        if (Date.now() - cachedResult.timestamp < 2 * 60 * 1e3) {
          isRegister.value = !cachedResult.exists;
          return;
        }
      }
      userApi.checkUsername(form.username).then((res) => {
        isRegister.value = !res.data.exists;
        usernameCache.set(form.username, {
          exists: res.data.exists,
          timestamp: Date.now()
        });
      });
    };
    const handleGetCode = () => {
      if (!isMobile.value)
        return;
      sendcode(form.username);
    };
    const handleSubmit = () => {
      return formRef.value?.validate().then(async (valid) => {
        if (!valid)
          return;
        try {
          if (isRegister.value) {
            await common.verifycode({
              mobile: form.username,
              verifycode: form.verify_code,
              type: "1"
            });
            await userStore.register({
              username: form.username,
              password: form.password,
              verify_code: form.verify_code
            });
          } else {
            await userStore.login({
              username: form.username,
              password: form.password
            });
          }
          ElMessage.success(window.$t("status.login_success"));
          agentStore.loadAgentList();
          close();
        } catch (error) {
          const response = error.response || {};
          const data = response.data || {};
          const message2 = data.message || "";
          if (message2.includes("record not found")) {
            if (isOpLocalEnv.value) {
              await userStore.register({
                username: form.username,
                password: form.password
              });
              ElMessage.success(window.$t("status.login_success"));
              agentStore.loadAgentList();
            } else {
              isRegister.value = true;
              ElMessage.warning(window.$t("status.not_found_account"));
            }
          }
          console.log(error);
        }
      });
    };
    __expose({
      open,
      close
    });
    return (_ctx, _cache) => {
      const _component_el_input = ElInput;
      const _component_el_form_item = ElFormItem;
      const _component_el_button = ElButton;
      const _component_el_form = ElForm;
      const _component_el_dialog = ElDialog;
      const _directive_trim = resolveDirective("trim");
      const _directive_debounce = resolveDirective("debounce");
      return openBlock(), createBlock(_component_el_dialog, {
        modelValue: isVisible2.value,
        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => isVisible2.value = $event),
        width: "504px",
        "destroy-on-close": "",
        style: normalizeStyle([{ "--el-dialog-border-radius": "16px", "background-size": "cover" }, {
          backgroundImage: `url(${_ctx.$getPublicPath("/images/login_bg.png")})`
        }]),
        "close-on-click-modal": false,
        center: ""
      }, {
        default: withCtx(() => [
          createBaseVNode("div", _hoisted_1$1, [
            createBaseVNode("h4", _hoisted_2, toDisplayString$1(_ctx.$t("login.password_login")), 1),
            createBaseVNode("p", _hoisted_3, toDisplayString$1(_ctx.$t("login.unregistered_account_desc")), 1),
            createVNode(_component_el_form, {
              ref_key: "formRef",
              ref: formRef,
              "label-position": "top",
              model: form,
              rules: rules2.value,
              class: "px-2 mt-7",
              onKeyup: withKeys(handleSubmit, ["enter"])
            }, {
              default: withCtx(() => [
                createVNode(_component_el_form_item, {
                  label: _ctx.$t("form.account"),
                  prop: "username"
                }, {
                  default: withCtx(() => [
                    unref(isOpLocalEnv) ? withDirectives((openBlock(), createBlock(_component_el_input, {
                      key: 0,
                      modelValue: form.username,
                      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => form.username = $event),
                      size: "large",
                      style: { "--el-input-bg-color": "#f5f5f5", "--el-input-border-color": "transparent", "--el-input-height": "44px" },
                      placeholder: _ctx.$t("form.input_placeholder") + _ctx.$t("form.account"),
                      clearable: ""
                    }, null, 8, ["modelValue", "placeholder"])), [
                      [_directive_trim]
                    ]) : withDirectives((openBlock(), createBlock(_component_el_input, {
                      key: 1,
                      modelValue: form.username,
                      "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => form.username = $event),
                      size: "large",
                      style: { "--el-input-bg-color": "#f5f5f5", "--el-input-border-color": "transparent", "--el-input-height": "44px" },
                      placeholder: _ctx.$t("form.input_placeholder") + _ctx.$t("form.account_alias"),
                      clearable: "",
                      onBlur: onUsernameBlur
                    }, null, 8, ["modelValue", "placeholder"])), [
                      [_directive_trim]
                    ])
                  ]),
                  _: 1
                }, 8, ["label"]),
                createVNode(_component_el_form_item, {
                  label: _ctx.$t("form.password"),
                  prop: "password"
                }, {
                  default: withCtx(() => [
                    withDirectives(createVNode(_component_el_input, {
                      modelValue: form.password,
                      "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => form.password = $event),
                      size: "large",
                      type: "password",
                      style: { "--el-input-bg-color": "#f5f5f5", "--el-input-border-color": "transparent", "--el-input-height": "44px" },
                      placeholder: _ctx.$t("form.input_placeholder") + _ctx.$t("form.password"),
                      "show-password": true,
                      clearable: ""
                    }, null, 8, ["modelValue", "placeholder"]), [
                      [_directive_trim]
                    ])
                  ]),
                  _: 1
                }, 8, ["label"]),
                isRegister.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 0,
                  label: _ctx.$t("form.verify_code"),
                  prop: "verify_code"
                }, {
                  default: withCtx(() => [
                    withDirectives((openBlock(), createBlock(_component_el_input, {
                      modelValue: form.verify_code,
                      "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => form.verify_code = $event),
                      size: "large",
                      style: { "--el-input-bg-color": "#f5f5f5", "--el-input-border-color": "transparent", "--el-input-height": "44px" },
                      placeholder: _ctx.$t("form.input_placeholder") + _ctx.$t("form.verify_code")
                    }, {
                      suffix: withCtx(() => [
                        unref(codeCount) ? (openBlock(), createElementBlock("div", _hoisted_4, toDisplayString$1(unref(codeCount)) + "s ", 1)) : withDirectives((openBlock(), createElementBlock("div", {
                          key: 1,
                          class: normalizeClass(["text-base pl-3 border-l", [
                            isMobile.value ? "text-[#2563EB] cursor-pointer" : "text-[#9A9A9A] cursor-not-allowed"
                          ]]),
                          onClick: withModifiers(handleGetCode, ["stop"])
                        }, [
                          createTextVNode(toDisplayString$1(_ctx.$t("form.get_verify_code")), 1)
                        ], 2)), [
                          [_directive_debounce]
                        ])
                      ]),
                      _: 1
                    }, 8, ["modelValue", "placeholder"])), [
                      [_directive_trim]
                    ])
                  ]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true),
                withDirectives((openBlock(), createBlock(_component_el_button, {
                  type: "primary",
                  onClick: handleSubmit,
                  round: "",
                  class: "w-full mt-2 !h-10"
                }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString$1(_ctx.$t("action.login")), 1)
                  ]),
                  _: 1
                })), [
                  [_directive_debounce]
                ])
              ]),
              _: 1
            }, 8, ["model", "rules"]),
            createBaseVNode("div", _hoisted_5, [
              createTextVNode(toDisplayString$1(_ctx.$t("login.agree")) + " ", 1),
              createBaseVNode("a", _hoisted_6, toDisplayString$1(_ctx.$t("login.terms_of_service")), 1),
              createTextVNode(" " + toDisplayString$1(_ctx.$t("action.and")) + " ", 1),
              createBaseVNode("a", _hoisted_7, toDisplayString$1(_ctx.$t("login.privacy_policy")), 1)
            ])
          ])
        ]),
        _: 1
      }, 8, ["modelValue", "style"]);
    };
  }
});
function setupGlobal(app) {
  window.$noop = function() {
  };
  window.$isElectron = !!window.electron;
  if (!window.$chat53ai) {
    window.$chat53ai = {
      getPublicPath: (path) => {
        return path;
      },
      getPreloadPath: () => {
        return "";
      },
      $on() {
      },
      $updater() {
      },
      $win() {
      }
    };
  }
  window.$getPublicPath = window.$chat53ai.getPublicPath;
  app.config.globalProperties.$isElectron = window.$isElectron;
  app.config.globalProperties.$noop = window.$noop;
  app.config.globalProperties.$getPublicPath = window.$getPublicPath;
}
const trim = {
  mounted(el2, binding) {
    const element = el2.querySelector("input") || el2.querySelector("textarea");
    if (!element)
      return;
    const trimValue = () => {
      if (element.value) {
        element.value = element.value.trim();
        element.dispatchEvent(new Event("input", { bubbles: true }));
      }
    };
    const handlers = {
      blur: trimValue,
      change: trimValue,
      input: () => {
        if (binding.modifiers.immediate) {
          trimValue();
        }
      }
    };
    Object.entries(handlers).forEach(([event, handler2]) => {
      element.addEventListener(event, handler2);
    });
    el2._trimHandlers = { element, handlers };
  },
  unmounted(el2) {
    const stored = el2._trimHandlers;
    if (stored) {
      const { element, handlers } = stored;
      Object.entries(handlers).forEach(([event, handler2]) => {
        element.removeEventListener(event, handler2);
      });
      delete el2._trimHandlers;
    }
  }
};
function copyToClip(text) {
  return new Promise((resolve2, reject) => {
    try {
      const input = document.createElement("textarea");
      input.setAttribute("readonly", "readonly");
      input.value = text;
      document.body.appendChild(input);
      input.select();
      if (document.execCommand("copy"))
        document.execCommand("copy");
      document.body.removeChild(input);
      resolve2(text);
    } catch (error) {
      reject(error);
    }
  });
}
const handler$1 = (el2, binding) => {
  el2._copyText = binding.value;
  if (!el2._copyHandler) {
    el2._copyHandler = function() {
      copyToClip(this._copyText).then(() => {
        ElMessage.success(window.$t("common.copied"));
      });
    };
  }
  el2.removeEventListener("click", el2._copyHandler);
  el2.addEventListener("click", el2._copyHandler);
};
const copy = {
  mounted: handler$1,
  updated: handler$1,
  unmounted: (el2) => {
    el2.removeEventListener("click", el2._copyHandler);
  }
};
const destroyTooltip = (el2) => {
  if (el2._tipapp) {
    el2._tipapp.unmount();
    el2._tiproot && el2._tiproot.remove();
    el2._tipapp = null;
    el2._tiproot = null;
  }
};
const createTooltip = (el2, binding) => {
  const bindingValue = binding.value || {};
  const isShow = typeof bindingValue === "object" ? true : autoShowToolTip(el2);
  destroyTooltip(el2);
  if (isShow) {
    const elRoot = document.querySelector("#agenthub_tooltip_root");
    if (elRoot) {
      elRoot.remove();
    }
    el2._tiproot = null;
    el2._tipapp = null;
    const id2 = "agenthub_tooltip_root";
    const _tiproot = document.createElement("div");
    _tiproot.id = id2;
    _tiproot.classList.add("_tiproot");
    const content = typeof bindingValue === "object" && bindingValue.content ? bindingValue.content : el2.innerHTML;
    const placement = typeof bindingValue === "object" && bindingValue.placement ? bindingValue.placement : "top";
    const effect = typeof bindingValue === "object" && bindingValue.effect ? bindingValue.effect : "dark";
    const trigger2 = typeof bindingValue === "object" && bindingValue.trigger ? bindingValue.trigger : "hover";
    const _tipapp = createApp(ElTooltip, {
      trigger: trigger2,
      virtualRef: el2,
      rawContent: true,
      placement,
      effect,
      virtualTriggering: true,
      content
    });
    el2._tiproot = _tiproot;
    el2._tipapp = _tipapp;
    document.body.appendChild(_tiproot);
    if (_tipapp && _tiproot) {
      el2._tipapp.mount("#" + id2);
    }
  }
};
const autoShowToolTip = (el2, binding) => {
  const range3 = document.createRange();
  range3.setStart(el2, 0);
  if (el2 && el2.childNodes.length) {
    range3.setEnd(el2, el2.childNodes.length);
  }
  let rangeWidth = range3.getBoundingClientRect().width;
  let rangeHeight = range3.getBoundingClientRect().height;
  const offsetWidth = rangeWidth - Math.floor(rangeWidth);
  const offsetHeight = rangeHeight - Math.floor(rangeHeight);
  if (offsetWidth < 1e-3) {
    rangeWidth = Math.floor(rangeWidth);
  }
  if (offsetHeight < 1e-3) {
    rangeHeight = Math.floor(rangeHeight);
  }
  const style = window.getComputedStyle(el2, null);
  const maxWidth = parseInt(style["width"] || style["width"]) || 0;
  const maxHeight = parseInt(style["height"]);
  const pLeft = style["padding-left"];
  const pRight = style["padding-right"];
  const pTop = style["padding-top"];
  const pBottom = style["padding-bottom"];
  const finalWidth = rangeWidth + parseInt(pLeft) + parseInt(pRight);
  const finalHeight = rangeHeight + parseInt(pTop) + parseInt(pBottom);
  if (finalWidth > maxWidth || finalHeight > maxHeight) {
    return true;
  }
  return false;
};
const tooltip = {
  mounted(el2, binding) {
    createTooltip(el2, binding);
  },
  updated(el2, binding) {
    createTooltip(el2, binding);
  },
  unmounted(el2) {
    destroyTooltip(el2);
  }
};
function AOP(func, beforeFn, afterFn) {
  return function(...args) {
    beforeFn.apply(this, args);
    const ret = func.apply(this, args);
    const handleAfterFn = () => {
      setTimeout(() => {
        afterFn.apply(this, args);
      }, 600);
    };
    if (ret && typeof ret.then === "function" && typeof ret.catch === "function") {
      ret.finally(handleAfterFn);
    } else {
      handleAfterFn();
    }
    return ret;
  };
}
function createFunctionCopy(originalFn) {
  if (!originalFn)
    return function() {
    };
  return function(...args) {
    return originalFn.apply(this, args);
  };
}
function updateComponentState(ctx) {
  if (ctx.proxy && typeof ctx.proxy.$forceUpdate === "function")
    ctx.proxy.$forceUpdate();
}
function handleElButton(ctx) {
  const click = ctx.vnode.props?.onClick ?? null;
  if (!ctx.vnode.props._onClick) {
    ctx.vnode.props._onClick = click;
    ctx.vnode.key = `debounce_${Math.random().toString(36).slice(2, 11)}`;
  }
  ctx.props.loading = ctx.vnode.loading || false;
  const debouncedClick = createFunctionCopy(ctx.vnode.props._onClick);
  ctx.vnode.props.onClick = AOP(
    (e2) => {
      e2?.stopPropagation();
      return debouncedClick.apply(this, [e2]);
    },
    () => {
      ctx.props.loading = true;
      ctx.vnode.loading = true;
      updateComponentState(ctx);
    },
    () => {
      ctx.props.loading = false;
      ctx.vnode.loading = false;
      updateComponentState(ctx);
    }
  );
}
function handleNormalElement(el2, binding, ctx) {
  if (el2.dListener)
    el2.removeEventListener("click", el2.dListener);
  el2.dListener = (ev2) => {
    ev2?.stopPropagation();
    if (el2.disabled)
      return;
    ctx.props.loading = true;
    el2.disabled = true;
    const originalClick = binding.value?.handler || binding.value;
    if (typeof originalClick === "function") {
      const result = originalClick(ev2);
      const resetState = () => {
        setTimeout(() => {
          el2.disabled = false;
          ctx.props.loading = false;
        }, 1e3);
      };
      if (result && typeof result.then === "function")
        result.finally(resetState);
      else
        resetState();
    } else {
      setTimeout(() => {
        el2.disabled = false;
        ctx.props.loading = false;
      }, 1e3);
    }
  };
  el2.addEventListener("click", el2.dListener);
}
const handler = (el2, binding, vnode) => {
  const ctx = vnode.ctx;
  if (ctx.type.name === "ElButton")
    handleElButton(ctx);
  else
    handleNormalElement(el2, binding, ctx);
};
const debounce = {
  mounted: handler,
  updated: handler
};
function setupDirective(app) {
  app.directive("trim", trim);
  app.directive("copy", copy);
  app.directive("tooltip", tooltip);
  app.directive("debounce", debounce);
}
let mountNode = null;
function LoginModal(options = {}) {
  try {
    if (mountNode) {
      mountNode.remove();
      mountNode = null;
    }
    mountNode = document.createElement("div");
    document.body.appendChild(mountNode);
    const app = createApp(_sfc_main$1, options);
    setupGlobal(app);
    setupDirective(app);
    setupI18n(app);
    return app.mount(mountNode);
  } catch (error) {
    console.error("LoginModal setup failed:", error);
    return {
      destroy: () => {
      }
    };
  }
}
const routes = [
  {
    path: "/",
    name: "Home",
    redirect: () => {
      return window.electron ? "/toolbox" : "/index";
    },
    component: () => __vitePreload(() => import("./index-HEyD9hs7.js"), true ? __vite__mapDeps([9,10,11,12,13,14,15,16,17,18,19]) : void 0, import.meta.url),
    children: [
      {
        path: "/index",
        name: "Index",
        component: () => __vitePreload(() => import("./layout-GKZAdT8H.js"), true ? __vite__mapDeps([20,21,22,23,12,13,14,24,25,26,27,17,15,28,29,30,31]) : void 0, import.meta.url),
        children: [
          {
            path: "/index",
            name: "HomeIndex",
            component: () => __vitePreload(() => import("./index-c1zGsFPG.js"), true ? __vite__mapDeps([32,33,12,13,14,10,11,34,35,29,36,37]) : void 0, import.meta.url)
          },
          {
            path: "/index/agent",
            name: "HomeAgent",
            component: () => __vitePreload(() => import("./agent-5_BbzAr9.js"), true ? __vite__mapDeps([33,12,13,14,10,11,34,35,29,36,37]) : void 0, import.meta.url)
          },
          {
            path: "/index/toolbox",
            name: "HomeToolbox",
            component: () => __vitePreload(() => import("./toolbox-Kk2oQQcT.js"), true ? __vite__mapDeps([38,39,24,25,12,13,14,34,35,29,36,18,40]) : void 0, import.meta.url)
          }
        ]
      },
      {
        path: "/chat",
        name: "Chat",
        component: () => __vitePreload(() => import("./index-LEpgchrH.js"), true ? __vite__mapDeps([41,16,42]) : void 0, import.meta.url),
        meta: {
          auth: true
        }
      },
      // {
      //   path: '/agent',
      //   name: 'Agent',
      //   component: () => import('@/views/agent/index.vue'),
      //   meta: {
      //     auth: true
      //   }
      // },
      {
        path: "/discover",
        name: "Discover",
        component: () => __vitePreload(() => import("./index-EjEV8-a4.js"), true ? __vite__mapDeps([43,12,13,14,10,11,34,35,29,36,23,21,22,24,25,26,27,17,15,28,44]) : void 0, import.meta.url),
        meta: {
          auth: true
        }
      },
      {
        path: "/profile",
        name: "Profile",
        component: () => __vitePreload(() => import("./index-_KL5Zetu.js"), true ? __vite__mapDeps([45,17,21,22,46,47,48,35,13,30,26,27,49,50,51]) : void 0, import.meta.url),
        meta: {
          auth: window.$isElectron ? false : true
        }
      },
      {
        path: "/toolbox",
        name: "Toolbox",
        component: () => __vitePreload(() => import("./index-zGAtWxS4.js"), true ? __vite__mapDeps([52,39,24,25,12,13,14,34,35,29,36,18,40,23,21,22,26,27,17,15,28]) : void 0, import.meta.url)
      }
    ]
  },
  {
    path: "/desktop",
    name: "Desktop",
    component: () => __vitePreload(() => import("./index-BNP-9dGW.js"), true ? __vite__mapDeps([53,21,22,46,24,25,47,48,54]) : void 0, import.meta.url)
  },
  {
    path: "/svglist",
    name: "Svg",
    component: () => __vitePreload(() => import("./index-PFZI07PF.js"), true ? __vite__mapDeps([]) : void 0, import.meta.url)
  },
  {
    path: "/:pathMatch(.*)*",
    name: "NotFound",
    redirect: "/404"
  }
];
const router = createRouter({
  history: createWebHashHistory(),
  routes,
  scrollBehavior: () => ({ left: 0, top: 0 })
});
router.beforeEach((to2, _from, next) => {
  const userStore = useUserStore();
  const isLoggedIn = localStorage.getItem("access_token");
  if (isLoggedIn) {
    userStore.getUserInfo();
  }
  if (to2.meta.auth) {
    if (isLoggedIn)
      ;
    else {
      LoginModal().open();
      next("/");
      return;
    }
  }
  next();
});
async function setupRouter(app) {
  app.use(router);
  await router.isReady();
}
const _hoisted_1 = ["xlink:href"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "SvgIcon",
  props: {
    name: { default: "" },
    color: {},
    size: { default: 16 }
  },
  setup(__props) {
    useCssVars((_ctx) => ({
      "545aa3b5": _ctx.color
    }));
    const props = __props;
    const symbolId = computed(() => `#icon-${props.name}`);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("svg", {
        style: normalizeStyle({ width: _ctx.size + "px", height: _ctx.size + "px" }),
        class: normalizeClass({ "custom-color": _ctx.color }),
        "aria-hidden": "true"
      }, [
        createBaseVNode("use", { "xlink:href": symbolId.value }, null, 8, _hoisted_1)
      ], 6);
    };
  }
});
const _export_sfc = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target[key] = val;
  }
  return target;
};
const SvgIcon = /* @__PURE__ */ _export_sfc(_sfc_main, [["__scopeId", "data-v-df5f39ba"]]);
if (typeof window !== "undefined") {
  let loadSvg = function() {
    var body = document.body;
    var svgDom = document.getElementById("__svg__icons__dom__");
    if (!svgDom) {
      svgDom = document.createElementNS("http://www.w3.org/2000/svg", "svg");
      svgDom.style.position = "absolute";
      svgDom.style.width = "0";
      svgDom.style.height = "0";
      svgDom.id = "__svg__icons__dom__";
      svgDom.setAttribute("xmlns", "http://www.w3.org/2000/svg");
      svgDom.setAttribute("xmlns:link", "http://www.w3.org/1999/xlink");
    }
    svgDom.innerHTML = '<symbol  viewBox="0 0 24 24" id="icon-app"><title>color_filter_line</title><g id="icon-app_color_filter_line" fill-rule="evenodd"><path d="M12 2a6 6 0 0 1 5.58 8.21A6 6 0 1 1 12 20.472 6 6 0 1 1 6.42 10.21 6 6 0 0 1 12 2m4 10a3.984 3.984 0 0 0-2.75 1.095c.478.86.75 1.852.75 2.905a5.972 5.972 0 0 1-.75 2.906A4 4 0 1 0 16 12m-8.45.025a4 4 0 1 0 3.9 1.95 5.986 5.986 0 0 1-3.9-1.95M12 4a4 4 0 0 0-.45 7.975 5.989 5.989 0 0 1 3.9-1.95A4 4 0 0 0 12 4" /></g></symbol><symbol viewBox="0 0 1024 1024"  id="icon-arrow-down"><path d="M597.333333 640V85.333333c0-23.68-19.285333-42.666667-43.093333-42.666666h-84.48A42.666667 42.666667 0 0 0 426.666667 85.333333v554.666667H341.717333c-47.232 0-62.805333 30.549333-34.56 68.266667l153.642667 204.8c28.501333 37.973333 74.112 37.717333 102.4 0l153.6-204.8c28.501333-37.973333 12.8-68.266667-34.517333-68.266667H597.333333z" p-id="2441" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-attach"><path d="M862.7 218.8c-72.2-72.2-189.4-72.2-261.6 0l-31.8 31.8-261.7 261.6-28.3 28.3c-46.9 46.9-46.9 122.8 0 169.7 46.9 46.9 122.8 46.9 169.7 0l282.8-282.8c3.9-3.9 3.9-10.2 0-14.1l-35.4-35.4c-3.9-3.9-10.2-3.9-14.1 0L399.5 660.7c-19.5 19.5-51.2 19.5-70.7 0s-19.5-51.2 0-70.7l28.3-28.3 261.6-261.6 31.8-31.8c44.9-44.9 117.7-44.9 162.6 0 44.9 44.9 44.9 117.7 0 162.6l-10.6 10.6-282.7 282.8-35.4 35.4c-70.3 70.3-184.3 70.3-254.6 0-70.3-70.3-70.3-184.3 0-254.6L541 194c3.9-3.9 3.9-10.2 0-14.1l-35.4-35.4c-3.9-3.9-10.2-3.9-14.1 0L180.3 455.6c-97.6 97.6-97.6 255.9 0 353.6 97.6 97.6 255.9 97.6 353.6 0l35.4-35.4L852.1 491l10.6-10.6c72.2-72.3 72.2-189.4 0-261.6z" p-id="2461" /></symbol><symbol  viewBox="0 0 24 24" id="icon-chat"><g id="icon-chat_message_3_line"><path d="M13.5 3a8.5 8.5 0 0 1 0 17H13v.99A1.01 1.01 0 0 1 11.989 22c-2.46-.002-4.952-.823-6.843-2.504C3.238 17.798 2.002 15.275 2 12.009V11.5A8.5 8.5 0 0 1 10.5 3zm0 2h-3A6.5 6.5 0 0 0 4 11.5l.001.665c.04 2.642 1.041 4.562 2.475 5.836C7.714 19.103 9.317 19.76 11 19.945v-.935c0-.558.452-1.01 1.01-1.01h1.49a6.5 6.5 0 1 0 0-13m-5 5a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3m7 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3" /></g></symbol><symbol viewBox="0 0 1024 1024"  id="icon-chrome"><path d="M123.648 178.346667C361.642667-98.602667 802.986667-43.946667 967.936 279.68h-396.501333c-71.424 0-117.546667-1.621333-167.509334 24.661333-58.709333 30.933333-102.997333 88.234667-118.485333 155.52L123.648 178.389333z" p-id="2233" /><path d="M341.674667 512c0 93.866667 76.330667 170.24 170.154666 170.24 93.866667 0 170.154667-76.373333 170.154667-170.24s-76.330667-170.24-170.154667-170.24c-93.866667 0-170.154667 76.373333-170.154666 170.24z" p-id="2234" /><path d="M577.877333 734.848c-95.530667 28.373333-207.274667-3.114667-268.501333-108.8-46.762667-80.64-170.24-295.765333-226.346667-393.557333-196.565333 301.226667-27.136 711.808 329.685334 781.866666l165.12-279.509333z" p-id="2235" /><path d="M669.866667 341.76a233.130667 233.130667 0 0 1 43.008 286.634667c-40.576 69.973333-170.154667 288.682667-232.96 394.581333 367.658667 22.656 635.733333-337.664 514.645333-681.258667H669.866667z" p-id="2236" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-clean"><path d="M725.312 48a48 48 0 0 1 48 48v554.688a48 48 0 0 1-41.472 47.552l-6.528 0.448H256a80.192 80.192 0 0 0-80 80c0 41.408 31.488 75.52 71.808 79.552l8.192 0.448 549.312-0.064V138.624a48 48 0 0 1 41.536-47.488l6.464-0.448a48 48 0 0 1 47.552 41.472l0.448 6.528v768a48 48 0 0 1-41.472 47.552l-6.528 0.448H256a176 176 0 0 1-176-176V224A176 176 0 0 1 256 48zM704 730.688a48 48 0 0 1 6.528 95.552l-6.528 0.448H277.312a48 48 0 0 1-6.464-95.552l6.464-0.448H704z m-26.688-586.688H256c-44.16 0-80 35.84-80 80v397.888l6.912-3.392c1.28-0.64 2.624-1.152 3.968-1.728l3.584-1.472c8.064-3.2 16.32-5.888 24.896-7.936l2.496-0.512a164.544 164.544 0 0 1 27.456-3.84l-13.504 1.28c4.48-0.64 8.96-1.024 13.44-1.28L256 602.688l421.312-0.064V144z" p-id="35698" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-close"><path d="M542.173333 512l347.58-347.58a21.333333 21.333333 0 1 0-30.173333-30.173333L512 481.826667 164.42 134.246667a21.333333 21.333333 0 0 0-30.173333 30.173333L481.826667 512l-347.58 347.58a21.333333 21.333333 0 0 0 30.173333 30.173333L512 542.173333l347.58 347.58a21.333333 21.333333 0 0 0 30.173333-30.173333z" p-id="7636" /></symbol><symbol  viewBox="0 0 24 24" id="icon-compass"><g id="icon-compass_compass_line"><path d="M12 2c5.523 0 10 4.477 10 10s-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2m0 2a8 8 0 1 0 0 16 8 8 0 0 0 0-16m4.95 3.05c.395.396.397.98.336 1.51l-.037.283c-.16 1.12-.605 2.775-1.242 4.156-.31.672-.7 1.351-1.179 1.83-.478.477-1.156.868-1.83 1.178-1.38.637-3.035 1.082-4.155 1.242l-.282.037c-.53.06-1.118.056-1.51-.336-.357-.357-.393-.875-.351-1.365l.032-.29.019-.138c.16-1.12.605-2.775 1.242-4.156.31-.672.7-1.351 1.179-1.83.478-.478 1.157-.868 1.83-1.178 1.38-.637 3.035-1.082 4.155-1.242l.282-.037c.53-.06 1.115-.06 1.51.336Zm-1.712 1.712c-.908.155-2.323.55-3.4 1.047-.597.276-1.023.548-1.252.777-.23.229-.501.655-.777 1.252-.496 1.077-.892 2.492-1.047 3.4.908-.155 2.323-.55 3.4-1.047.597-.276 1.023-.548 1.252-.777.23-.229.502-.655.777-1.252.496-1.077.893-2.492 1.047-3.4M12 11a1 1 0 1 1 0 2 1 1 0 0 1 0-2" /></g></symbol><symbol  viewBox="0 0 24 24" id="icon-conversation"><path d="M16 14h.5c.827 0 1.5-.673 1.5-1.5v-9c0-.827-.673-1.5-1.5-1.5h-13C2.673 2 2 2.673 2 3.5V18l5.333-4zm-9.333-2L4 14V4h12v8z" /><path d="M20.5 8H20v6.001c0 1.1-.893 1.993-1.99 1.999H8v.5c0 .827.673 1.5 1.5 1.5h7.167L22 22V9.5c0-.827-.673-1.5-1.5-1.5" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-copy"><path d="M761.088 715.3152a38.7072 38.7072 0 0 1 0-77.4144 37.4272 37.4272 0 0 0 37.4272-37.4272V265.0112a37.4272 37.4272 0 0 0-37.4272-37.4272H425.6256a37.4272 37.4272 0 0 0-37.4272 37.4272 38.7072 38.7072 0 1 1-77.4144 0 115.0976 115.0976 0 0 1 114.8416-114.8416h335.4624a115.0976 115.0976 0 0 1 114.8416 114.8416v335.4624a115.0976 115.0976 0 0 1-114.8416 114.8416z" p-id="3478" /><path d="M589.4656 883.0976H268.1856a121.1392 121.1392 0 0 1-121.2928-121.2928v-322.56a121.1392 121.1392 0 0 1 121.2928-121.344h321.28a121.1392 121.1392 0 0 1 121.2928 121.2928v322.56c1.28 67.1232-54.1696 121.344-121.2928 121.344zM268.1856 395.3152a43.52 43.52 0 0 0-43.8784 43.8784v322.56a43.52 43.52 0 0 0 43.8784 43.8784h321.28a43.52 43.52 0 0 0 43.8784-43.8784v-322.56a43.52 43.52 0 0 0-43.8784-43.8784z" p-id="3479" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-crop_space"><path d="M128 279.253333v531.456H85.333333q-4.181333 0-8.32 0.853334-4.138667 0.810667-8.021333 2.389333-3.84 1.621333-7.381333 3.968-3.456 2.346667-6.442667 5.290667-2.986667 2.986667-5.290667 6.485333-2.346667 3.498667-3.968 7.381333-1.621333 3.84-2.432 7.978667-0.810667 4.138667-0.810666 8.32 0 4.224 0.853333 8.32 0.768 4.138667 2.389333 8.021333 1.621333 3.882667 3.968 7.381334 2.304 3.498667 5.290667 6.485333 2.986667 2.986667 6.442667 5.290667 3.498667 2.346667 7.381333 3.925333 3.882667 1.621333 8.021333 2.432 4.138667 0.853333 8.32 0.853333h853.333334q4.224 0 8.32-0.853333 4.138667-0.810667 8.021333-2.432 3.84-1.578667 7.381333-3.925333 3.456-2.346667 6.442667-5.290667 2.986667-2.986667 5.290667-6.485333 2.346667-3.498667 3.968-7.381334 1.621333-3.84 2.432-8.021333 0.810667-4.096 0.810666-8.32 0-4.181333-0.853333-8.32-0.768-4.096-2.389333-7.978667-1.621333-3.882667-3.968-7.381333-2.304-3.498667-5.290667-6.485333-2.986667-2.986667-6.442667-5.290667-3.498667-2.346667-7.381333-3.968-3.882667-1.578667-8.021333-2.389333Q942.933333 810.666667 938.666667 810.666667h-42.666667v-359.466667a42.837333 42.837333 0 0 0-29.184-40.533333L597.333333 320.597333V106.666667a21.461333 21.461333 0 0 0-28.629333-20.053334L156.074667 239.018667A42.666667 42.666667 0 0 0 128 279.253333z m384 531.456H213.333333V309.248l298.666667-108.885333V810.666667z m298.666667-328.618666v328.618666h-213.333334V410.794667l213.333334 71.296z" p-id="38862" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-cut"><path d="M889.472 148.266667a42.666667 42.666667 0 0 1-13.568 58.794666l-282.88 176.725334 171.306667 107.008 2.261333 0.085333a202.666667 202.666667 0 1 1-115.413333 29.781333l-138.624-86.570666-139.178667 86.912a202.666667 202.666667 0 1 1-112.554667-30.293334l171.221334-106.922666-282.794667-176.725334a42.666667 42.666667 0 0 1-15.957333-54.4l2.389333-4.394666a42.666667 42.666667 0 0 1 58.794667-13.568l318.08 198.784 318.122666-198.784a42.666667 42.666667 0 0 1 58.794667 13.568zM266.666667 576a117.333333 117.333333 0 1 0 0 234.666667 117.333333 117.333333 0 0 0 0-234.666667z m490.666666 0a117.333333 117.333333 0 1 0 0 234.666667 117.333333 117.333333 0 0 0 0-234.666667z" p-id="6279" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-del"><path d="M804.8128 239.035733A34.133333 34.133333 0 0 1 836.266667 273.2032l-0.1024 2.56-48.725334 617.079467a68.266667 68.266667 0 0 1-64.6144 62.805333l-3.4304 0.085333H304.605867a68.266667 68.266667 0 0 1-67.703467-59.477333l-0.341333-3.413333-48.725334-617.096534a34.133333 34.133333 0 0 1 67.754667-7.901866l0.3072 2.542933L304.605867 887.466667h414.788266l48.708267-617.079467A34.133333 34.133333 0 0 1 802.269867 238.933333l2.56 0.1024z" p-id="1504" /><path d="M887.466667 204.8a34.133333 34.133333 0 0 1 2.56 68.181333L887.466667 273.066667H136.533333a34.133333 34.133333 0 0 1-2.56-68.181334L136.533333 204.8h750.933334z" p-id="1505" /><path d="M597.333333 68.266667a102.4 102.4 0 0 1 102.331734 98.56L699.733333 170.666667v68.266666a34.133333 34.133333 0 0 1-68.181333 2.56L631.466667 238.933333v-68.266666a34.133333 34.133333 0 0 0-31.573334-34.048L597.333333 136.533333H426.666667a34.133333 34.133333 0 0 0-34.048 31.573334L392.533333 170.666667v68.266666a34.133333 34.133333 0 0 1-68.181333 2.56L324.266667 238.933333v-68.266666a102.4 102.4 0 0 1 98.56-102.331734L426.666667 68.266667h170.666666z" p-id="1506" /><path d="M682.666667 750.933333v34.133334a34.133333 34.133333 0 0 1-34.133334 34.133333H375.466667a34.133333 34.133333 0 0 1-34.133334-34.133333v-34.133334h341.333334z" p-id="1507" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-dislike"><path d="M460.074667 831.573333c14.08 36.394667 46.336 54.613333 82.090666 53.76 27.989333-0.725333 54.058667-13.397333 73.301334-39.850666 26.666667-36.565333 27.221333-84.992 25.429333-126.293334-0.896-20.309333-6.186667-42.069333-11.946667-60.714666a18.816 18.816 0 0 1 2.432-15.786667c2.901333-4.394667 6.656-6.144 10.325334-6.144h131.242666a96 96 0 0 0 93.525334-117.546667l-56.746667-246.613333a117.333333 117.333333 0 0 0-114.346667-91.050667H256A74.666667 74.666667 0 0 0 181.333333 256v289.28c0 41.258667 33.450667 74.666667 74.666667 74.666667h62.592l5.12 1.450666c5.632 1.621333 13.44 4.010667 22.016 7.125334 18.218667 6.613333 36.138667 14.976 46.293333 23.594666 25.898667 22.016 34.986667 40.576 48.384 78.933334 5.461333 15.701333 6.826667 28.842667 8.32 44.586666l0.128 1.28c1.450667 15.274667 3.2 34.048 11.221334 54.698667z m-169.386667-275.626666H256a10.666667 10.666667 0 0 1-10.666667-10.666667V256A10.666667 10.666667 0 0 1 256 245.333333h34.688v310.613334z m64-310.613334h340.650667a53.333333 53.333333 0 0 1 52.010666 41.386667l56.746667 246.613333a32 32 0 0 1-31.146667 39.210667H641.706667c-56.448 0-88.533333 57.514667-73.898667 104.832 5.12 16.64 8.618667 32.341333 9.130667 44.586667 1.877333 42.88-1.237333 69.418667-13.226667 85.845333-7.68 10.581333-15.36 13.312-23.125333 13.525333-11.434667 0.256-17.408-4.053333-20.821334-12.885333-4.650667-11.904-5.802667-22.741333-7.338666-38.869333l-0.042667-0.469334c-1.493333-15.786667-3.413333-35.669333-11.52-59.050666-14.890667-42.752-28.8-73.941333-67.413333-106.752-19.413333-16.426667-46.506667-27.946667-65.92-34.986667a403.669333 403.669333 0 0 0-12.842667-4.352V245.333333z" p-id="1210" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-documents"><path d="M896 93.866667H469.333333c-17.066667 0-34.133333 12.8-34.133333 34.133333v768c0 17.066667 12.8 34.133333 34.133333 34.133333h426.666667c17.066667 0 34.133333-12.8 34.133333-34.133333V128c0-17.066667-17.066667-34.133333-34.133333-34.133333z m-392.533333 68.266666h149.333333v704h-149.333333V162.133333z m358.4 699.733334h-149.333334V162.133333h149.333334v699.733334zM388.266667 119.466667l-170.666667-21.333334c-8.533333 0-17.066667 0-25.6 8.533334-4.266667 0-8.533333 8.533333-8.533333 17.066666l-85.333334 746.666667c0 17.066667 8.533333 34.133333 29.866667 34.133333l179.2 21.333334h4.266667c8.533333 0 12.8-4.266667 21.333333-8.533334 4.266667 0 8.533333-8.533333 8.533333-17.066666L413.866667 153.6c4.266667-17.066667-8.533333-34.133333-25.6-34.133333zM281.6 861.866667l-115.2-12.8 76.8-682.666667 106.666667 12.8-68.266667 682.666667z" p-id="15532" /><path d="M789.333333 418.133333c17.066667 0 34.133333-12.8 34.133334-34.133333V320c0-17.066667-12.8-34.133333-34.133334-34.133333s-34.133333 12.8-34.133333 34.133333V384c4.266667 17.066667 17.066667 34.133333 34.133333 34.133333zM576 290.133333c-17.066667 0-34.133333 12.8-34.133333 34.133334V384c0 17.066667 12.8 34.133333 34.133333 34.133333s34.133333-12.8 34.133333-34.133333V320c-4.266667-17.066667-17.066667-29.866667-34.133333-29.866667z" p-id="15533" /></symbol><symbol  viewBox="0 0 24 24" id="icon-down"><path d="M11.475 14.475L7.85 10.85q-.075-.075-.112-.162T7.7 10.5q0-.2.138-.35T8.2 10h7.6q.225 0 .363.15t.137.35q0 .05-.15.35l-3.625 3.625q-.125.125-.25.175T12 14.7t-.275-.05t-.25-.175" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-drag"><path d="M368 672a64 64 0 1 1 0 128 64 64 0 0 1 0-128z m288 0a64 64 0 1 1 0 128 64 64 0 0 1 0-128zM368 448a64 64 0 1 1 0 128 64 64 0 0 1 0-128z m288 0a64 64 0 1 1 0 128 64 64 0 0 1 0-128z m-288-224a64 64 0 1 1 0 128 64 64 0 0 1 0-128z m288 0a64 64 0 1 1 0 128 64 64 0 0 1 0-128z" p-id="2493" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-edit"><path d="M46.545455 884.363636h930.90909v69.818182H46.545455zM230.120727 568.32l2.420364-8.750545 467.781818-469.178182 172.450909 170.682182-464.337454 465.92-7.633455 2.606545c-122.507636 42.170182-164.957091 52.410182-189.253818 29.323636-24.157091-22.993455-16.384-66.048 18.571636-190.557091z m41.890909 127.953455c23.04-5.538909 55.901091-15.592727 98.397091-30.068364l403.456-404.805818-73.216-72.471273-405.783272 407.04c-11.822545 42.821818-19.874909 75.869091-24.017455 99.002182a389.492364 389.492364 0 0 0-0.325818 1.675636l1.536-0.372363z" p-id="12957" /></symbol><symbol  viewBox="0 0 20 20" id="icon-file_upload"><path d="M16.839 15h-2.865v-3.046a.7.7 0 0 0-.193-.498a.62.62 0 0 0-.468-.205a.62.62 0 0 0-.469.205a.7.7 0 0 0-.193.498v3.047H9.933a.62.62 0 0 0-.468.205a.7.7 0 0 0-.193.498a.7.7 0 0 0 .193.498a.62.62 0 0 0 .468.205h2.718v2.89a.7.7 0 0 0 .193.498a.62.62 0 0 0 .469.205q.275 0 .468-.205a.7.7 0 0 0 .193-.498v-2.89h2.865q.276 0 .468-.205a.7.7 0 0 0 .193-.498a.7.7 0 0 0-.193-.498a.62.62 0 0 0-.468-.205m.516-9.973L13.33.481l-.44-.479H3.78c-.17 0-.36-.01-.526.017A.83.83 0 0 0 2.742.3c-.281.318-.24.717-.24 1.108v17.185c0 .391-.045.814.24 1.11s.476.296.843.296H8.61q.276 0 .469-.205a.7.7 0 0 0 .193-.498a.7.7 0 0 0-.193-.498a.62.62 0 0 0-.469-.205H3.845L3.839 1.364h7.275v3.593c0 .391.152.743.391.996s.57.41.937.41h3.735v4.185a.7.7 0 0 0 .193.498a.62.62 0 0 0 .468.205q.276 0 .469-.205a.7.7 0 0 0 .192-.498V5.475l.001-.279zm-4.837-.172q-.062-.08-.075-.28V1.52l3.059 3.437H12.76q-.18-.024-.242-.103" /></symbol><symbol  viewBox="0 0 24 24" id="icon-folder_upload"><g id="icon-folder_upload_folder_upload_line"><path d="M9.52 3a2 2 0 0 1 1.561.75l1.4 1.75H20a2 2 0 0 1 2 2V19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2zm0 2H4v14h16V7.5h-7.52a2 2 0 0 1-1.561-.75zm3.187 5.173 2.121 2.121a1 1 0 1 1-1.414 1.414L13 13.294V16a1 1 0 1 1-2 0v-2.706l-.414.414a1 1 0 1 1-1.414-1.414l2.12-2.121a1 1 0 0 1 1.415 0" /></g></symbol><symbol  viewBox="0 0 24 24" id="icon-help"><path d="M11.95 18q.525 0 .888-.363t.362-.887t-.362-.888t-.888-.362t-.887.363t-.363.887t.363.888t.887.362m-.9-3.85h1.85q0-.825.188-1.3t1.062-1.3q.65-.65 1.025-1.238T15.55 8.9q0-1.4-1.025-2.15T12.1 6q-1.425 0-2.312.75T8.55 8.55l1.65.65q.125-.45.563-.975T12.1 7.7q.8 0 1.2.438t.4.962q0 .5-.3.938t-.75.812q-1.1.975-1.35 1.475t-.25 1.825M12 22q-2.075 0-3.9-.787t-3.175-2.138T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22m0-2q3.35 0 5.675-2.325T20 12t-2.325-5.675T12 4T6.325 6.325T4 12t2.325 5.675T12 20m0-8" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-history"><path d="M554.453333 128c-212.266667 0-383.786667 171.946667-383.786667 384l-128 0 166.186667 166.186667 2.986667 6.186667 172.16-172.373333-128 0c0-164.906667 133.76-298.666667 298.666667-298.666667s298.666667 133.76 298.666667 298.666667-133.76 298.666667-298.666667 298.666667c-82.56 0-157.013333-33.706667-210.986667-87.68l-60.373333 60.373333c69.333333 69.546667 165.12 112.64 271.146667 112.64 212.266667 0 384.213333-171.946667 384.213333-384s-171.946667-384-384.213333-384zM512 341.333333l0 213.333333 182.613333 108.373333 30.72-51.84-149.333333-88.533333 0-181.333333-64 0z" opacity="0.899999976158142" p-id="2623" /></symbol><symbol  viewBox="0 0 24 24" id="icon-hot"><path d="M16.5 8c0 1.5-.5 3.5-2.9 4.3c.7-1.7.8-3.4.3-5c-.7-2.1-3-3.7-4.6-4.6c-.4-.3-1.1.1-1 .7c0 1.1-.3 2.7-2 4.4C4.1 10 3 12.3 3 14.5C3 17.4 5 21 9 21c-4-4-1-7.5-1-7.5c.8 5.9 5 7.5 7 7.5c1.7 0 5-1.2 5-6.4c0-3.1-1.3-5.5-2.4-6.9c-.3-.5-1-.2-1.1.3" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-inbox"><path d="M971.3 656.4c-19.7-2.5-20.4-14-20.4-29.9 0.1-140.2-0.5-280.3-0.8-420.5-0.2-76.4-38.1-115-113.5-115-216.6 0-433.1 0-649.7 0.1-74 0-112.4 38.8-112.6 113.1-0.4 141.1-0.9 282.1-1 423.2 0 14 1.3 26.1-18.5 28.3-15.8 1.8-25.4 13.2-24.8 30.2 0.7 17.1 8.4 30.1 26.4 32.2 16.5 1.9 17 11.6 16.9 24.4-0.1 38.6 0.6 77.2 0.9 115.9 0.5 68.4 40.4 108.3 109.3 108.4 109.6 0.2 219.3 0.1 328.9 0.1 111.4 0 222.9 0.3 334.3-0.1 61.5-0.3 102.5-41.9 103.4-103.4 0.6-39.5 1.3-79.1 0.9-118.6-0.1-15.2 1.4-25 20.1-27.5 16-2.1 23.1-15.5 23-31.9-0.2-15.5-7.6-27-22.8-29zM838 900.3c-109.6 0.2-219.1 0.1-328.7 0.1H191.4c-40.5 0-50.6-10.2-50.5-51.1 0.1-36.8 1.2-73.6 0.8-110.4-0.1-13.9 4.2-19 18.5-18.8 37.7 0.8 75.4 0.7 113.2 0 13-0.2 18.9 5.8 24.3 16.6 42.9 85.3 19.5 73 122.9 73.7 78.1 0.5 156.3-0.7 234.4 0.5 26.2 0.4 44.5-8.6 51.4-33.4 13.6-49.1 44.5-65.9 93.6-57.7 20.1 3.3 41.3 1.6 61.9 0.2 17.2-1.1 21.2 6 20.9 21.9-0.6 37.7 0.8 75.4 0.7 113.1-0.1 33.6-11.7 45.2-45.5 45.3z m45-273.5c0.1 21.9-6.6 27.1-27.3 26.4-42.2-1.5-84.5 0.3-126.7-0.8-24.5-0.6-43.2 7-50.3 31.2-14.7 50.3-46.7 64.6-97.9 60.1-59.8-5.2-120.3-1.8-180.6-0.9-17.2 0.3-26.9-4-35.2-20.8-38.4-77.9-23.7-68.9-113-69.2-30.6-0.1-61.1-0.6-91.7 0.2-14 0.4-18.7-4.1-18.7-18.3 0-145.6-0.7-291.2-0.7-436.8 0-28.9 13.3-40.2 45-40.3 108.8-0.2 217.5-0.1 326.3-0.1h320.9c40.4 0 50.5 10.3 50.4 51.3-0.3 139.4-1.2 278.7-0.5 418z" p-id="29365" /><path d="M511.5 360.8c-47.6 0-95.2 0.1-142.7 0-31.8-0.1-47.6-11.9-47.2-34.8 0.4-21.9 15.8-33.5 45.8-33.5 97-0.1 193.9-0.2 290.9 0 29.4 0.1 44.9 12.5 44.5 34.8-0.4 21.9-15.8 33.4-45.8 33.5-48.5 0.1-97 0-145.5 0zM513.2 540c-50.2 0-100.5-0.3-150.7 0.1-22.9 0.2-38.9-7.6-40.6-32.5-1.4-21.9 13.4-34.3 41.3-34.4 99.6-0.3 199.2 0 298.7-0.2 22.7 0 39.1 7.5 40.6 32.6 1.3 21.8-13.8 34.2-41.3 34.3-49.3 0.3-98.7 0.1-148 0.1z" p-id="29366" /></symbol><symbol  viewBox="0 0 24 24" id="icon-index"><path d="M21 20a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V9.49a1 1 0 0 1 .386-.79l8-6.223a1 1 0 0 1 1.228 0l8 6.223a1 1 0 0 1 .386.79zm-2-1V9.978l-7-5.444l-7 5.444V19zM7 15h10v2H7z" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-info"><path d="M629.328 896H394.672C247.632 896 128 776.368 128 629.328V394.672C128 247.632 247.632 128 394.672 128h234.672C776.368 128 896 247.632 896 394.672v234.672C896 776.368 776.368 896 629.328 896zM394.672 192C282.912 192 192 282.912 192 394.672v234.672C192 741.072 282.912 832 394.672 832h234.672C741.072 832 832 741.072 832 629.328V394.672C832 282.912 741.072 192 629.328 192H394.672z" p-id="24912" /><path d="M549.248 388.048c32.128 0 56.704-27.072 56.704-56.224 0-23.392-14.176-43.808-42.528-43.808-37.328 0-55.984 32.128-55.984 55.504-0.72 27.712 14.976 44.528 41.808 44.528z m-2.96 277.792c-5.2 0-7.456-7.296-2.24-28.512l29.472-119.904c11.216-43.888 7.456-72.336-14.896-72.336-26.832 0-89.552 28.672-144.016 77.696l11.216 19.712c17.216-12.416 46.304-25.072 52.944-25.072 5.2 0 4.48 7.296 0 25.552l-25.712 114.064C437.344 721.344 453.76 736 476.192 736s80.256-21.952 133.2-78.976l-12.656-18.256c-21.696 18.256-43.728 27.072-50.448 27.072z" p-id="24913" /></symbol><symbol viewBox="0 0 1024 1024"   id="icon-ios"><path d="M769.597 525.909c1.291 132.878 125.137 177.014 126.564 177.674-1.125 2.992-19.845 62.994-65.354 124.945-39.361 53.498-80.094 106.773-144.379 107.844-63.214 1.125-83.525-34.886-155.797-34.886-72.244 0-94.806 33.815-154.589 36.012-62.005 2.196-109.273-57.751-148.962-111.11-81.083-109.079-143.006-308.218-59.782-442.604 41.254-66.754 115.063-109.024 195.212-110.15 60.934-1.017 118.494 38.263 155.686 38.263 37.302 0 107.213-47.184 180.665-40.267 30.77 1.18 117.149 11.527 172.567 86.985-4.364 2.662-103.068 56.022-101.833 167.297l0 0zM510.786 261.611c-7.164-50.478 19.543-102.959 50.066-135.923 34.063-37.137 91.54-64.751 138.997-66.508 6.066 51.438-16.194 103.068-49.105 140.234-32.965 37.109-87.01 66.013-139.958 62.197l0 0z" p-id="3894" /></symbol><symbol  viewBox="0 0 24 24" id="icon-jump"><path d="M3 21V3h7.09v2H5v14h14v-5.09h2V21zm7.586-9l7-7H13V3h8v8h-2V6.414l-7 7z" /></symbol><symbol   viewBox="0 0 16 16" id="icon-justify-center"><path d="M2 2.33333L14 2.33333C14.9205 2.33333 15.6667 3.07953 15.6667 4L15.6667 12C15.6667 12.9205 14.9205 13.6667 14 13.6667L2 13.6667C1.07953 13.6667 0.333333 12.9205 0.333333 12L0.333333 4C0.333333 3.07953 1.07953 2.33333 2 2.33333ZM2 3.66667C1.81591 3.66667 1.66667 3.81591 1.66667 4L1.66667 12C1.66667 12.1841 1.81591 12.3333 2 12.3333L14 12.3333C14.1841 12.3333 14.3333 12.1841 14.3333 12L14.3333 4C14.3333 3.81591 14.1841 3.66667 14 3.66667L2 3.66667Z" /><rect x="4" y="6" width="8" height="4" rx="1" /></symbol><symbol   viewBox="0 0 16 16" id="icon-justify-left"><path d="M2 2.33333L14 2.33333C14.9205 2.33333 15.6667 3.07953 15.6667 4L15.6667 12C15.6667 12.9205 14.9205 13.6667 14 13.6667L2 13.6667C1.07953 13.6667 0.333333 12.9205 0.333333 12L0.333333 4C0.333333 3.07953 1.07953 2.33333 2 2.33333ZM2 3.66667C1.81591 3.66667 1.66667 3.81591 1.66667 4L1.66667 12C1.66667 12.1841 1.81591 12.3333 2 12.3333L14 12.3333C14.1841 12.3333 14.3333 12.1841 14.3333 12L14.3333 4C14.3333 3.81591 14.1841 3.66667 14 3.66667L2 3.66667Z" /><rect x="4" y="6" width="2" height="4" rx="1" /></symbol><symbol   viewBox="0 0 16 16" id="icon-justify-right"><path d="M2 2.33333L14 2.33333C14.9205 2.33333 15.6667 3.07953 15.6667 4L15.6667 12C15.6667 12.9205 14.9205 13.6667 14 13.6667L2 13.6667C1.07953 13.6667 0.333333 12.9205 0.333333 12L0.333333 4C0.333333 3.07953 1.07953 2.33333 2 2.33333ZM2 3.66667C1.81591 3.66667 1.66667 3.81591 1.66667 4L1.66667 12C1.66667 12.1841 1.81591 12.3333 2 12.3333L14 12.3333C14.1841 12.3333 14.3333 12.1841 14.3333 12L14.3333 4C14.3333 3.81591 14.1841 3.66667 14 3.66667L2 3.66667Z" /><rect x="10" y="6" width="2" height="4" rx="1" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-layout-left"><path d="M896 128a42.666667 42.666667 0 0 1 42.666667 42.666667v682.666666a42.666667 42.666667 0 0 1-42.666667 42.666667H128a42.666667 42.666667 0 0 1-42.666667-42.666667V170.666667a42.666667 42.666667 0 0 1 42.666667-42.666667h768zM298.666667 213.333333H170.666667v597.333334h128V213.333333z m554.666666 0H384v597.333334h469.333333V213.333333z" p-id="2601" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-layout-split"><path d="M896 128a42.666667 42.666667 0 0 1 42.666667 42.666667v682.666666a42.666667 42.666667 0 0 1-42.666667 42.666667H128a42.666667 42.666667 0 0 1-42.666667-42.666667V170.666667a42.666667 42.666667 0 0 1 42.666667-42.666667h768zM482 213.333333H170.666667v597.333334h311.333333V213.333333z m371.333333 0H584.666667v597.333334h268.666666V213.333333z" p-id="2601" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-library"><path d="M571.057003 923.902248H452.941656a100.097752 100.097752 0 0 1-100.097752-100.097751c0-37.036168-19.018573-70.068426-51.049853-90.087977A396.387097 396.387097 0 0 1 115.612233 396.387097a396.387097 396.387097 0 1 1 741.72434 195.190616 399.390029 399.390029 0 0 1-135.131965 141.13783c-32.031281 20.01955-51.049853 53.051808-51.049853 90.087976a100.097752 100.097752 0 0 1-100.097752 101.098729zM511.999329 80.078201C337.829241 80.078201 195.690434 222.217009 195.690434 396.387097c0 110.107527 56.054741 210.205279 149.14565 268.261974a189.184751 189.184751 0 0 1 64.062561 68.066472 186.181818 186.181818 0 0 1 24.02346 91.088954 20.01955 20.01955 0 0 0 20.019551 20.01955h118.115347a20.01955 20.01955 0 0 0 20.01955-20.01955 186.181818 186.181818 0 0 1 24.023461-91.088954 189.184751 189.184751 0 0 1 64.062561-68.066472c93.090909-58.056696 149.14565-158.154448 149.14565-268.261974 0-174.170088-142.138807-316.308895-316.308896-316.308896zM633.117609 1024H390.88105a40.039101 40.039101 0 0 1 0-80.078201h242.236559a40.039101 40.039101 0 1 1 0 80.078201z" p-id="26169" /><path d="M612.097081 818.799609H411.901578a40.039101 40.039101 0 0 1 0-80.078201h200.195503a40.039101 40.039101 0 0 1 0 80.078201z" p-id="26170" /><path d="M511.999329 779.761486a40.039101 40.039101 0 0 1-40.0391-40.039101V457.446725a40.039101 40.039101 0 0 1 15.014662-31.030303l103.100685-85.083089a40.179238 40.179238 0 0 1 51.049853 62.060606l-89.086999 73.071359v263.257087a40.039101 40.039101 0 0 1-40.039101 40.039101z" p-id="26171" /><path d="M513.000307 495.483871a40.039101 40.039101 0 0 1-24.023461-8.00782l-112.109481-83.081134a40.039101 40.039101 0 0 1 48.04692-64.062561l112.109482 83.081134a40.039101 40.039101 0 0 1-24.02346 72.070381z" p-id="26172" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-like"><path d="M460.074667 192.426667c14.08-36.394667 46.336-54.613333 82.090666-53.76 27.989333 0.725333 54.058667 13.397333 73.301334 39.850666 26.666667 36.565333 27.221333 84.992 25.429333 126.293334-0.896 20.309333-6.186667 42.069333-11.946667 60.714666a18.816 18.816 0 0 0 2.432 15.786667c2.901333 4.394667 6.656 6.144 10.325334 6.144h131.242666a96 96 0 0 1 93.525334 117.546667l-56.746667 246.613333a117.333333 117.333333 0 0 1-114.346667 91.050667H256A74.666667 74.666667 0 0 1 181.333333 768v-289.28c0-41.258667 33.450667-74.666667 74.666667-74.666667h62.592l5.12-1.450666c5.632-1.621333 13.44-4.010667 22.016-7.125334 18.218667-6.613333 36.138667-14.976 46.293333-23.594666 25.898667-22.016 34.986667-40.576 48.384-78.933334 5.461333-15.701333 6.826667-28.842667 8.32-44.586666l0.128-1.28c1.450667-15.274667 3.2-34.048 11.221334-54.698667z m-169.386667 275.626666H256a10.666667 10.666667 0 0 0-10.666667 10.666667V768c0 5.888 4.778667 10.666667 10.666667 10.666667h34.688v-310.613334z m64 310.613334h340.650667a53.333333 53.333333 0 0 0 52.010666-41.386667l56.746667-246.613333a32 32 0 0 0-31.146667-39.210667H641.706667c-56.448 0-88.533333-57.514667-73.898667-104.874667 5.12-16.554667 8.618667-32.298667 9.130667-44.544 1.877333-42.88-1.237333-69.418667-13.226667-85.845333-7.68-10.581333-15.36-13.312-23.125333-13.525333-11.434667-0.256-17.408 4.053333-20.821334 12.885333-4.650667 11.904-5.802667 22.741333-7.338666 38.869333l-0.042667 0.469334c-1.493333 15.786667-3.413333 35.669333-11.52 59.050666-14.890667 42.752-28.8 73.941333-67.413333 106.709334-19.413333 16.469333-46.506667 27.946667-65.92 34.986666a403.669333 403.669333 0 0 1-12.842667 4.394667v318.634667z" p-id="1050" /></symbol><symbol viewBox="0 0 1059 1024"  id="icon-live-photo"><path d="M520.163139 172.713346c23.654711 0 38.071069 16.368721 42.923681 35.765018 5.489251 27.460403-14.600276 49.049572-41.905057 49.049572-25.140204 0-36.85438-14.600276-41.905057-34.746394-3.367118-16.83559 4.060348-28.57806 12.26593-36.783642 7.356728-7.356728 14.671014-13.284554 28.620503-13.284554z m-164.521912 123.649627c-25.309975 0-42.923681-17.627853-42.923681-42.92368 0-23.42835 13.907046-36.175297 32.694999-40.872286 4.088643-1.018624 8.177287-2.051395 9.19591-2.051395 24.234761 0 41.905057 17.910804 41.905057 42.923681 0 21.829677-8.96955 31.563194-23.499088 38.835037-6.125891 3.070019-7.158663 4.088643-17.373197 4.088643z m374.033048-42.92368c0 25.309975-17.627853 42.923681-42.923681 42.92368-25.39486 0-40.872285-17.146836-40.872285-42.92368 0-24.277204 12.237635-36.019674 31.676375-40.872286 4.088643-1.018624 8.177287-2.051395 9.19591-2.051395a42.654877 42.654877 0 0 1 42.923681 42.923681z m-466.0063 106.290577c0 25.309975-17.627853 42.923681-42.923681 42.923681-13.638243 0-19.184084-2.843658-25.550484-9.195911-8.049959-8.049959-16.354573-17.387345-16.354573-33.72777 0-19.169936 11.799061-33.911688 26.569108-38.835037 3.070019-1.018624 6.125891-3.070019 9.19591-3.07002h10.214535c22.310694 0 38.835037 18.632329 38.835037 41.905057z m557.979552 42.909533c-25.309975 0-42.923681-17.627853-42.923681-42.92368 0-18.193755 8.644156-26.017353 17.373197-34.746394 3.466151-3.452003 13.765571-7.158663 19.410445-7.158663h9.195911c22.254103 0 38.835037 19.254822 38.835037 41.905057 0 16.071622-8.361205 25.734402-16.354573 33.72777-6.309809 6.309809-11.982979 9.19591-25.550484 9.19591z m-296.362973-58.245482c58.853827 0 100.419342 16.524344 136.93418 40.872285 29.087372 19.396297 51.907378 43.121746 71.530036 72.562808 25.451451 38.170102 41.905057 78.3916 41.905057 141.022824 0 18.391821 0 26.569107-1.018624 35.765017-10.313567 61.867256-35.75087 108.313678-72.562807 145.111468-27.432108 27.432108-56.236529 48.625145-97.08052 60.296877-24.121581 6.889859-45.144847 14.303178-75.618679 14.303178-89.143741 0-145.988616-32.553523-191.105167-77.670075-18.901133-18.901133-33.911688-38.24084-45.9937-65.404144-15.873556-35.722575-25.550484-60.22614-25.550484-112.416469 0-61.471125 15.661343-103.206411 40.872286-141.022824 19.396297-29.087372 43.121746-51.907378 72.562807-71.530036 21.419398-14.28903 52.926002-30.968997 81.758718-35.765018 10.667256-1.782592 28.493175-6.125891 38.835037-6.125891h24.53186z m11.233158 84.828737h-27.587731c-24.376237 0-45.654159 8.516828-63.366897 17.373197-34.902017 17.443935-59.193368 41.749434-76.651451 76.651451-8.997845 18.009837-17.373197 38.651119-17.373197 63.366897v24.531859c0 24.800663 8.3895 45.399503 17.373197 63.366897 15.392539 30.799226 36.656314 51.001934 64.385521 69.492788 18.023985 12.011274 46.474717 24.53186 75.618679 24.53186h24.53186c24.192318 0 45.838077-8.615861 63.366897-17.373197 30.799226-15.392539 51.001934-36.656314 69.492788-64.385521 12.011274-18.023985 24.53186-46.474717 24.531859-75.618679v-24.53186c0-40.971318-21.320365-70.313346-37.816413-95.043271-19.127494-28.691241-57.637137-51.383918-97.080519-59.278254-5.107267-1.018624-14.303178-3.070019-19.410445-3.070019zM148.181487 471.113567c14.444653 0 22.834153 6.47958 30.65775 14.303178 7.201105 7.201105 11.247306 13.058193 11.247306 26.569107 0 17.203426-5.814645 25.22509-14.303177 33.727771-13.128931 13.128931-43.659353 13.567505-57.226859 0-6.762531-5.078972-13.284554-18.462559-13.284553-29.639127 0-17.373197 5.814645-25.22509 14.303177-33.72777 3.197347-3.197347 13.525062-10.214534 18.391821-10.214535 2.051395 0 7.158663-1.018624 10.214535-1.018624z m748.066095 0c17.260017 0 25.352418 11.04924 33.72777 19.410445 5.220448 5.220448 7.158663 14.92567 7.158663 25.550484 0 17.189279-11.74247 32.525228-24.53186 36.783642-32.256424 10.752141-60.296878-8.219729-60.296877-40.872286 0-13.53921 4.017905-19.353855 11.247306-26.569107 8.785631-8.785631 15.463277-14.303178 32.709146-14.303178z m-373.014424 42.923681c19.169936 0 26.356894 2.730478 38.835038 10.214534 25.22509 14.416358 42.923681 35.298149 42.92368 74.600056 0 39.202874-17.656148 60.16955-42.92368 74.600055-13.440177 8.064106-19.778281 9.19591-40.872286 9.19591-33.78436 0-45.258027-9.493009-62.334125-26.569107-14.317325-14.317325-21.46184-29.426914-21.46184-57.226858 0-21.46184 1.697707-24.871401 8.177286-37.816414 2.051395-4.088643 4.088643-9.19591 6.125891-12.26593 6.621056-9.917436 23.018071-23.683006 34.746394-27.587731l12.26593-4.088643c3.070019-1.018624 7.158663-2.051395 8.177287-2.051396s8.177287-1.018624 16.354573-1.018624zM105.257806 686.750594c0-27.064272 16.750705-44.960928 43.942305-44.960928 23.569826 0 40.872285 18.759657 40.872285 42.92368 0 19.297264-10.525781 31.322686-23.499088 37.816414-4.088643 2.051395-10.214534 4.088643-13.284554 4.088643h-11.247306c-18.85869 0-36.783642-20.570544-36.783642-39.853661z m747.047472-2.051395c0-25.111909 17.316607-42.923681 41.905056-42.923681 26.512517 0 42.923681 18.519149 42.923681 44.960929 0 19.297264-17.924952 39.853661-36.783642 39.853661h-11.247306c-20.146118 0-36.783642-21.277922-36.783642-41.905057zM179.857861 838.0021c0-25.352418 16.595082-42.923681 40.872285-42.923681 24.942139 0 42.923681 17.076098 42.923681 42.923681 0 21.334512-10.327715 31.732965-24.53186 38.835037-4.088643 2.051395-9.19591 4.088643-14.303177 4.088644-28.153634 0-44.960928-15.633048-44.960929-42.923681z m598.865985 0c0-27.050124 18.391821-42.923681 44.960929-42.923681 22.777563 0 38.835037 19.580216 38.835037 42.923681 0 27.290633-16.821442 42.923681-44.960928 42.923681-22.239956 0-38.835037-19.849019-38.835038-42.923681zM355.641227 987.202211c-25.790992 0-41.905057-16.25554-41.905057-42.923681 0-24.659188 11.813208-34.590771 30.657751-40.872285 3.070019-1.018624 8.177287-2.051395 10.214534-2.051396 10.384305 0 26.979387 6.239072 31.676375 13.284554 4.484775 6.720088 11.247306 16.793147 11.247306 27.587732 0 26.837911-15.859409 44.960928-41.905057 44.960928z m331.109367 0c-25.111909 0-40.872285-16.89218-40.872285-42.923681 0-24.659188 11.813208-34.590771 30.657751-40.872285 3.070019-1.018624 8.177287-2.051395 10.214534-2.051396 10.384305 0 26.979387 6.239072 31.676375 13.284554 4.484775 6.720088 11.247306 16.793147 11.247306 27.587732 0 27.432108-16.14236 44.960928-42.923681 44.960928z m-166.587455-48.030948c-23.95181 0-46.304946 22.933186-40.872285 50.082343 4.923349 19.665101 16.83559 34.746394 41.905056 34.746394 25.140204 0 36.85438-14.586129 41.905057-34.746394 5.361923-26.837911-13.921194-42.456811-33.72777-49.049572-3.070019-1.018624-7.158663-1.018624-9.19591-1.018624z" p-id="6318" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-lock"><path d="M793.6 314.5216h-32.9216a263.3216 263.3216 0 0 0-526.6432 0H201.216A98.7648 98.7648 0 0 0 102.4 413.184v460.8C102.4 928.6144 146.5856 972.8 201.1648 972.8H793.6a98.7648 98.7648 0 0 0 98.7648-98.7648v-460.8A98.7648 98.7648 0 0 0 793.6 314.5216zM497.3568 117.0432a197.4784 197.4784 0 0 1 197.4784 197.4784H299.8784a197.4784 197.4784 0 0 1 197.4784-197.4784z m329.1648 756.992a32.9216 32.9216 0 0 1-32.9216 32.9216H201.1648a32.9216 32.9216 0 0 1-32.9216-32.9216v-460.8c0-18.176 14.7456-32.8704 32.9216-32.8704H793.6c18.176 0 32.9216 14.6944 32.9216 32.8704v460.8z m-296.2432-286.3104V479.0784H464.4352v108.6464a65.8432 65.8432 0 0 0 0 111.872v108.6464h65.8432v-108.6464a65.8432 65.8432 0 0 0 0-111.872z" p-id="33633" /></symbol><symbol  viewBox="0 0 24 24" id="icon-menu"><path d="M4 18q-.425 0-.712-.288T3 17t.288-.712T4 16h16q.425 0 .713.288T21 17t-.288.713T20 18zm0-5q-.425 0-.712-.288T3 12t.288-.712T4 11h16q.425 0 .713.288T21 12t-.288.713T20 13zm0-5q-.425 0-.712-.288T3 7t.288-.712T4 6h16q.425 0 .713.288T21 7t-.288.713T20 8z" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-mini"><path d="M917.333333 554.666667H106.666667a21.333333 21.333333 0 0 1 0-42.666667h810.666666a21.333333 21.333333 0 0 1 0 42.666667z" p-id="7472" /></symbol><symbol  viewBox="0 0 24 24" id="icon-more-h"><g><path d="m12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035q-.016-.005-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427q-.004-.016-.017-.018m.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093q.019.005.029-.008l.004-.014l-.034-.614q-.005-.018-.02-.022m-.715.002a.02.02 0 0 0-.027.006l-.006.014l-.034.614q.001.018.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01z" /><path d="M12 16.5a1.5 1.5 0 1 1 0 3a1.5 1.5 0 0 1 0-3m0-6a1.5 1.5 0 1 1 0 3a1.5 1.5 0 0 1 0-3m0-6a1.5 1.5 0 1 1 0 3a1.5 1.5 0 0 1 0-3" /></g></symbol><symbol  viewBox="0 0 24 24" id="icon-more-v"><g><path d="m12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035q-.016-.005-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427q-.004-.016-.017-.018m.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093q.019.005.029-.008l.004-.014l-.034-.614q-.005-.018-.02-.022m-.715.002a.02.02 0 0 0-.027.006l-.006.014l-.034.614q.001.018.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01z" /><path d="M6 10.5a1.5 1.5 0 1 1 0 3a1.5 1.5 0 0 1 0-3m6 0a1.5 1.5 0 1 1 0 3a1.5 1.5 0 0 1 0-3m6 0a1.5 1.5 0 1 1 0 3a1.5 1.5 0 0 1 0-3" /></g></symbol><symbol viewBox="0 0 1024 1024"  id="icon-mouse"><path d="M187.5 187.6l693.1 230.7L696 515.4l-76.9 40.5 61.5 61.4L885 821.4l-63.4 63.6-204.2-204.5-61.5-61.6-40.5 77-96.8 184.3L187.5 187.6M155.9 111.9c-4.5 0-9.2 0.7-13.9 2.1-23 7.4-35.4 32-28 55.6l258.4 774.5c3.1 10.8 10.6 20.8 21.4 26.7 6.6 3.6 13.6 5.3 20.6 5.3 15.7 0 30.9-8.7 38.4-23.3l119.2-227 216.4 216.8 2.5 2.2c8.4 8.4 19.6 12.6 30.8 12.6s22.4-4.2 30.7-12.6l92.2-92.5c17.1-17.1 17.1-44.4 0-61.5l-218.9-218.6 226.7-119.2c10-5.6 17.4-13.6 21.1-25.2 7.8-23-5-47.5-27.3-54.9L169 114C164.8 112.6 160.4 111.9 155.9 111.9L155.9 111.9z" p-id="26754" /></symbol><symbol  viewBox="0 0 24 24" id="icon-network"><g id="icon-network_earth_2_line" fill-rule="evenodd"><path d="M12 2c5.523 0 10 4.477 10 10s-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2m1.482 14.94a18.214 18.214 0 0 1-2.964 0c.093.397.197.765.31 1.102.251.755.53 1.293.79 1.622.127.162.23.248.3.29l.051.028.03.008.032-.008.051-.027a1.21 1.21 0 0 0 .3-.29c.26-.33.539-.868.79-1.623.113-.337.217-.705.31-1.102m-8.675-1.435a8.026 8.026 0 0 0 4.441 4.01 10.52 10.52 0 0 1-.318-.84 15.818 15.818 0 0 1-.52-2.033 17.87 17.87 0 0 1-3.603-1.137m14.387 0c-1.145.5-2.351.883-3.605 1.137a15.63 15.63 0 0 1-.52 2.034c-.096.29-.202.572-.318.838a8.027 8.027 0 0 0 4.443-4.01Zm-5.218-4.634a15.119 15.119 0 0 1-3.952 0 26.02 26.02 0 0 0 .141 4.025 16.195 16.195 0 0 0 3.67 0A25.04 25.04 0 0 0 14 12c0-.384-.008-.76-.024-1.13ZM4.568 9.032a7.978 7.978 0 0 0-.52 3.856 15.893 15.893 0 0 0 4.067 1.637 27.889 27.889 0 0 1-.074-4.053 14.915 14.915 0 0 1-3.473-1.44m14.864 0a14.916 14.916 0 0 1-3.473 1.44 27.879 27.879 0 0 1-.074 4.053 15.892 15.892 0 0 0 4.066-1.637 7.978 7.978 0 0 0-.52-3.855Zm-7.416-5.02-.011-.002-.02.003-.038.015a1.233 1.233 0 0 0-.33.307c-.26.33-.538.868-.79 1.622-.27.808-.488 1.8-.633 2.919a13.123 13.123 0 0 0 3.612 0c-.145-1.12-.364-2.111-.633-2.919-.252-.754-.53-1.293-.79-1.622a1.233 1.233 0 0 0-.3-.29l-.067-.032Zm-2.768.474a8.022 8.022 0 0 0-3.71 2.797c.843.484 1.746.876 2.695 1.163.16-1.164.397-2.223.697-3.122.097-.291.203-.572.318-.838m5.504 0c.115.266.22.547.318.838.3.9.537 1.958.697 3.122a12.927 12.927 0 0 0 2.695-1.163 8.021 8.021 0 0 0-3.71-2.797" /></g></symbol><symbol viewBox="0 0 1024 1024"  id="icon-peoples"><path d="M405.333333 460.8c98.133333 0 179.2-81.066667 179.2-179.2s-81.066667-179.2-179.2-179.2-183.466667 76.8-183.466666 174.933333 85.333333 183.466667 183.466666 183.466667z m0-298.666667c64 0 119.466667 51.2 119.466667 119.466667S469.333333 392.533333 405.333333 392.533333 290.133333 341.333333 290.133333 277.333333 341.333333 162.133333 405.333333 162.133333zM712.533333 123.733333c-17.066667-8.533333-34.133333-4.266667-42.666666 12.8-8.533333 17.066667-4.266667 34.133333 12.8 42.666667 34.133333 21.333333 55.466667 59.733333 55.466666 102.4S716.8 362.666667 682.666667 384c-17.066667 8.533333-21.333333 29.866667-12.8 42.666667 4.266667 8.533333 17.066667 17.066667 25.6 17.066666 4.266667 0 12.8 0 17.066666-4.266666 55.466667-38.4 89.6-98.133333 89.6-162.133334s-34.133333-123.733333-89.6-153.6zM648.533333 588.8c-42.666667-21.333333-93.866667-21.333333-196.266666-21.333333H358.4c-102.4 0-149.333333 0-196.266667 21.333333-38.4 21.333333-68.266667 51.2-89.6 89.6-21.333333 42.666667-21.333333 93.866667-21.333333 196.266667v21.333333c0 17.066667 12.8 34.133333 34.133333 34.133333h640c17.066667 0 34.133333-12.8 34.133334-34.133333v-25.6c0-102.4 0-149.333333-21.333334-196.266667-21.333333-38.4-51.2-68.266667-89.6-85.333333zM119.466667 861.866667c0-85.333333 0-128 17.066666-157.866667 12.8-25.6 34.133333-46.933333 59.733334-59.733333 29.866667-17.066667 76.8-17.066667 166.4-17.066667h93.866666c89.6 0 136.533333 0 166.4 17.066667 25.6 12.8 46.933333 34.133333 59.733334 59.733333 12.8 29.866667 17.066667 72.533333 17.066666 157.866667H119.466667zM947.2 674.133333c-21.333333-38.4-51.2-68.266667-89.6-89.6-17.066667-8.533333-34.133333 0-42.666667 12.8-8.533333 17.066667 0 34.133333 12.8 42.666667 25.6 12.8 46.933333 34.133333 59.733334 59.733333 17.066667 29.866667 17.066667 76.8 17.066666 166.4v29.866667c0 17.066667 12.8 34.133333 34.133334 34.133333s34.133333-12.8 34.133333-34.133333v-25.6c0-102.4 0-149.333333-25.6-196.266667z" p-id="14506" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-person"><path d="M870.314 877.39C777.938 967.975 651.552 1024 512 1024 229.24 1024 0.018 794.742 0.018 511.981 0.018 229.221 229.24 0 512 0s511.982 229.222 511.982 511.982c0 143.21-58.914 272.485-153.668 365.41zM512 950.86c103.932 0 199.307-36.314 274.496-96.728C746.45 740.398 639.447 658.262 512 658.262c-127.447 0-234.451 82.136-274.496 195.87C312.693 914.546 408.068 950.86 512 950.86z m0-877.684c-242.35 0-438.842 196.492-438.842 438.842 0 109.528 40.374 209.4 106.712 286.308C237.724 672.597 364.513 585.158 512 585.158c147.45 0 274.276 87.44 332.13 213.168 66.338-76.87 106.712-176.78 106.712-286.308 0-242.35-196.492-438.842-438.842-438.842z m0 475.412c-101.007 0-182.85-81.88-182.85-182.85 0-101.007 81.843-182.851 182.85-182.851 100.97 0 182.85 81.844 182.85 182.85 0 100.97-81.88 182.851-182.85 182.851z m0-292.561c-60.597 0-109.71 49.114-109.71 109.674 0 60.596 49.113 109.71 109.71 109.71 60.597 0 109.71-49.114 109.71-109.71 0-60.56-49.113-109.674-109.71-109.674z" p-id="30756" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-plus"><path d="M474 152m8 0l60 0q8 0 8 8l0 704q0 8-8 8l-60 0q-8 0-8-8l0-704q0-8 8-8Z" p-id="5597" /><path d="M168 474m8 0l672 0q8 0 8 8l0 60q0 8-8 8l-672 0q-8 0-8-8l0-60q0-8 8-8Z" p-id="5598" /></symbol><symbol  viewBox="0 0 24 24" id="icon-preview"><path d="M5.616 20q-.667 0-1.141-.475T4 18.386V5.615q0-.666.475-1.14T5.615 4h12.77q.666 0 1.14.475T20 5.615v12.77q0 .666-.475 1.14t-1.14.475zm0-1h12.769q.269 0 .442-.173t.173-.442V7H5v11.385q0 .269.173.442t.443.173M12 16q-1.627 0-2.932-.834Q7.763 14.333 7.096 13q.667-1.333 1.972-2.166Q10.373 10 12 10t2.932.834T16.904 13q-.667 1.333-1.972 2.166Q13.627 16 12 16m-.004-1.884q-.467 0-.79-.327q-.321-.327-.321-.793q0-.467.326-.79q.327-.321.793-.321q.467 0 .79.326q.322.327.322.793q0 .467-.327.79q-.327.322-.793.322m.004.769q.78 0 1.333-.552T13.885 13t-.552-1.333q-.552-.552-1.333-.552t-1.333.552T10.115 13t.552 1.333t1.333.552" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-question"><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64z m0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" p-id="3437" /><path d="M623.6 316.7C593.6 290.4 554 276 512 276s-81.6 14.5-111.6 40.7C369.2 344 352 380.7 352 420v7.6c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V420c0-44.1 43.1-80 96-80s96 35.9 96 80c0 31.1-22 59.6-56.1 72.7-21.2 8.1-39.2 22.3-52.1 40.9-13.1 19-19.9 41.8-19.9 64.9V620c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-22.7c0-19.7 12.4-37.7 30.9-44.8 59-22.7 97.1-74.7 97.1-132.5 0.1-39.3-17.1-76-48.3-103.3z" p-id="3438" /><path d="M512 732m-40 0a40 40 0 1 0 80 0 40 40 0 1 0-80 0Z" p-id="3439" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-quit"><path d="M273.066667 512a42.666667 42.666667 0 0 1 42.666666-42.666667h494.293334l-97.834667-97.834666a42.666667 42.666667 0 1 1 60.373333-60.330667l141.098667 141.098667a85.333333 85.333333 0 0 1 1.237333 119.466666l-134.826666 140.458667a42.666667 42.666667 0 1 1-61.568-59.093333L812.970667 554.666667H315.733333a42.666667 42.666667 0 0 1-42.666666-42.666667zM426.666667 42.666667a42.666667 42.666667 0 1 1 0 85.333333H170.666667v768h246.357333a42.666667 42.666667 0 0 1 0 85.333333H170.666667a85.333333 85.333333 0 0 1-85.333334-85.333333V128a85.333333 85.333333 0 0 1 85.333334-85.333333h256z" p-id="1481" /></symbol><symbol  viewBox="0 0 48 48" id="icon-send-one"><g stroke-linejoin="round" stroke-width="4"><path d="M42 6L4 20.138l20 3.87L29.005 44z" /><path stroke-linecap="round" d="m24.008 24.008l5.657-5.656" /></g></symbol><symbol viewBox="0 0 1092 1024"  id="icon-send"><path d="M259.413333 477.866667h320.853334c20.48 0 34.133333 13.653333 34.133333 34.133333s-13.653333 34.133333-34.133333 34.133333H259.413333c0 6.826667-6.826667 13.653333-6.826666 27.306667L68.266667 955.733333l955.733333-443.733333L68.266667 68.266667l184.32 382.293333c6.826667 13.653333 6.826667 20.48 6.826666 27.306667z m791.893334 95.573333l-955.733334 443.733333c-34.133333 13.653333-75.093333 0-88.746666-34.133333-6.826667-20.48-6.826667-40.96 0-61.44l184.32-382.293333c6.826667-20.48 6.826667-40.96 0-61.44L6.826667 95.573333C-6.826667 61.44 6.826667 20.48 40.96 6.826667c13.653333-6.826667 40.96-6.826667 54.613333 0l955.733334 443.733333c34.133333 13.653333 47.786667 54.613333 34.133333 88.746667-6.826667 13.653333-20.48 27.306667-34.133333 34.133333z" p-id="6759" /></symbol><symbol  viewBox="0 0 24 24" id="icon-send_plane"><path d="m21.727 2.957l-5.454 19.086c-.15.529-.475.553-.717.07L11 13L1.923 9.37c-.51-.205-.503-.51.034-.689L21.043 2.32c.529-.176.832.12.684.638m-2.692 2.14L6.812 9.17l5.637 2.255l3.04 6.08z" /></symbol><symbol  viewBox="0 0 24 24" id="icon-setting"><path d="M10.825 22q-.675 0-1.162-.45t-.588-1.1L8.85 18.8q-.325-.125-.612-.3t-.563-.375l-1.55.65q-.625.275-1.25.05t-.975-.8l-1.175-2.05q-.35-.575-.2-1.225t.675-1.075l1.325-1Q4.5 12.5 4.5 12.337v-.675q0-.162.025-.337l-1.325-1Q2.675 9.9 2.525 9.25t.2-1.225L3.9 5.975q.35-.575.975-.8t1.25.05l1.55.65q.275-.2.575-.375t.6-.3l.225-1.65q.1-.65.588-1.1T10.825 2h2.35q.675 0 1.163.45t.587 1.1l.225 1.65q.325.125.613.3t.562.375l1.55-.65q.625-.275 1.25-.05t.975.8l1.175 2.05q.35.575.2 1.225t-.675 1.075l-1.325 1q.025.175.025.338v.674q0 .163-.05.338l1.325 1q.525.425.675 1.075t-.2 1.225l-1.2 2.05q-.35.575-.975.8t-1.25-.05l-1.5-.65q-.275.2-.575.375t-.6.3l-.225 1.65q-.1.65-.587 1.1t-1.163.45zM11 20h1.975l.35-2.65q.775-.2 1.438-.587t1.212-.938l2.475 1.025l.975-1.7l-2.15-1.625q.125-.35.175-.737T17.5 12t-.05-.787t-.175-.738l2.15-1.625l-.975-1.7l-2.475 1.05q-.55-.575-1.212-.962t-1.438-.588L13 4h-1.975l-.35 2.65q-.775.2-1.437.588t-1.213.937L5.55 7.15l-.975 1.7l2.15 1.6q-.125.375-.175.75t-.05.8q0 .4.05.775t.175.75l-2.15 1.625l.975 1.7l2.475-1.05q.55.575 1.213.963t1.437.587zm1.05-4.5q1.45 0 2.475-1.025T15.55 12t-1.025-2.475T12.05 8.5q-1.475 0-2.487 1.025T8.55 12t1.013 2.475T12.05 15.5M12 12" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-setting2"><path d="M701.866667 955.306667H328.746667A117.333333 117.333333 0 0 1 227.2 896L40.533333 573.653333a118.186667 118.186667 0 0 1 0-117.333333l186.666667-322.986667a117.333333 117.333333 0 0 1 101.546667-58.666666H701.866667a117.546667 117.546667 0 0 1 101.546666 58.666666l186.453334 322.986667a117.546667 117.546667 0 0 1 0 117.333333L803.413333 896a117.546667 117.546667 0 0 1-101.546666 59.306667zM328.746667 138.666667a53.76 53.76 0 0 0-46.293334 26.666666L96 488.32a53.973333 53.973333 0 0 0 0 53.333333l186.453333 322.986667a53.76 53.76 0 0 0 46.293334 26.666667H701.866667a53.333333 53.333333 0 0 0 46.08-26.666667l186.453333-322.986667a52.906667 52.906667 0 0 0 0-53.333333L747.946667 165.333333A53.333333 53.333333 0 0 0 701.866667 138.666667z" p-id="32630" /><path d="M515.2 698.666667a183.68 183.68 0 1 1 183.68-183.68 183.68 183.68 0 0 1-183.68 183.68z m0-303.36a119.68 119.68 0 1 0 119.68 119.68 119.68 119.68 0 0 0-119.68-119.68z" p-id="32631" /></symbol><symbol  viewBox="0 0 48 48" id="icon-share-three"><g stroke-linecap="round" stroke-linejoin="round" stroke-width="4"><path d="M42 38v4H6v-4M30 6l10 10l-10 10" /><path d="M40 16C20 16 6 19 6 32" /></g></symbol><symbol  viewBox="0 0 48 48" id="icon-share-two"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="4" d="m26 4l18 18l-18 17V28C12 28 6 43 6 43c0-17 5-28 20-28z" /></symbol><symbol viewBox="0 0 1170 1024"  id="icon-sitemap"><path d="M1097.142857 694.857143h-54.857143v-146.285714a73.142857 73.142857 0 0 0-73.142857-73.142858H621.714286v-146.285714h54.857143a73.142857 73.142857 0 0 0 73.142857-73.142857V73.142857a73.142857 73.142857 0 0 0-73.142857-73.142857h-182.857143a73.142857 73.142857 0 0 0-73.142857 73.142857v182.857143a73.142857 73.142857 0 0 0 73.142857 73.142857h54.857143v146.285714H201.142857a73.142857 73.142857 0 0 0-73.142857 73.142858v146.285714H73.142857a73.142857 73.142857 0 0 0-73.142857 73.142857V950.857143a73.142857 73.142857 0 0 0 73.142857 73.142857h182.857143a73.142857 73.142857 0 0 0 73.142857-73.142857v-182.857143a73.142857 73.142857 0 0 0-73.142857-73.142857h-54.857143v-146.285714H548.571429v146.285714h-54.857143a73.142857 73.142857 0 0 0-73.142857 73.142857V950.857143a73.142857 73.142857 0 0 0 73.142857 73.142857h182.857143a73.142857 73.142857 0 0 0 73.142857-73.142857v-182.857143a73.142857 73.142857 0 0 0-73.142857-73.142857H621.714286v-146.285714h347.428571v146.285714h-54.857143a73.142857 73.142857 0 0 0-73.142857 73.142857V950.857143a73.142857 73.142857 0 0 0 73.142857 73.142857H1097.142857a73.142857 73.142857 0 0 0 73.142857-73.142857v-182.857143a73.142857 73.142857 0 0 0-73.142857-73.142857z m-603.428571-438.857143V73.142857h182.857143v182.857143zM256 950.857143H73.142857v-182.857143h182.857143z m420.571429-182.857143V950.857143h-182.857143v-182.857143zM1097.142857 950.857143h-182.857143v-182.857143H1097.142857z" p-id="5304" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-star-link"><path d="M512 42.666667a128 128 0 0 1 125.866667 151.424l88.405333 51.029333a128 128 0 1 1 124.032 217.984v97.834667a128.042667 128.042667 0 1 1-124.032 217.941333l-88.405333 51.029333a128 128 0 1 1-251.733334 0.042667l-88.448-51.029333a128 128 0 1 1-123.989333-218.026667v-97.834667a128.042667 128.042667 0 1 1 123.989333-218.026666L386.133333 194.090667A128 128 0 0 1 512 42.666667z m0 768a42.666667 42.666667 0 1 0 0 85.333333 42.666667 42.666667 0 0 0 0-85.333333z m0-512a127.488 127.488 0 0 1-83.2-30.72L339.541333 319.573333a128.042667 128.042667 0 0 1-80.384 141.354667v102.144a128.042667 128.042667 0 0 1 80.384 141.397333l89.344 51.584A127.488 127.488 0 0 1 512 725.333333c31.744 0 60.757333 11.52 83.114667 30.677334l89.386666-51.541334a128.042667 128.042667 0 0 1 80.384-141.354666v-102.186667a128.042667 128.042667 0 0 1-80.384-141.397333l-89.386666-51.541334A127.488 127.488 0 0 1 512 298.666667z m298.666667 341.333333a42.666667 42.666667 0 1 0 0 85.333333 42.666667 42.666667 0 0 0 0-85.333333zM213.333333 640a42.666667 42.666667 0 1 0 0 85.333333 42.666667 42.666667 0 0 0 0-85.333333z m298.666667-256a128 128 0 1 1 0 256 128 128 0 0 1 0-256z m0 85.333333a42.666667 42.666667 0 1 0 0 85.333334 42.666667 42.666667 0 0 0 0-85.333334z m298.666667-170.666666a42.666667 42.666667 0 1 0 0 85.333333 42.666667 42.666667 0 0 0 0-85.333333zM213.333333 298.666667a42.666667 42.666667 0 1 0 0 85.333333 42.666667 42.666667 0 0 0 0-85.333333z m298.666667-170.666667a42.666667 42.666667 0 1 0 0 85.333333 42.666667 42.666667 0 0 0 0-85.333333z" p-id="7554" /></symbol><symbol  viewBox="0 0 24 24" id="icon-tab"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2zm0 5h18M10 3v18" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-tips"><path d="M512.5 54C718.773 54 886 221.08 886 427.2c0 148.717-87.867 280.98-220.374 340.492l-12.883 154.415c-2.283 27.367-24.964 48.467-52.33 48.887l-0.83 0.006h-174.16c-27.46 0-50.394-20.83-53.082-48.066l-0.075-0.827-12.885-154.412C226.87 708.185 139 575.92 139 427.2 139 221.08 306.227 54 512.5 54z m88.067 723.659H424.438l10.789 129.34H589.78l10.787-129.34zM512.5 118C341.56 118 203 256.439 203 427.2c0 126.364 76.577 238.4 191.103 285.78l1.672 0.679h233.449l1.673-0.68c113.357-46.895 189.536-157.136 191.08-281.915L822 427.2C822 256.439 683.44 118 512.5 118z m128.063 213.225c17.496 0 31.713 14.042 31.995 31.47l0.005 0.53v127.95c0 23.545-24.527 38.945-45.662 28.938l-0.64-0.311L512.5 462.97l-113.76 56.832c-21.064 10.522-45.801-4.537-46.294-27.916l-0.007-0.711v-127.95c0-17.673 14.326-32 32-32 17.496 0 31.713 14.042 31.995 31.47l0.005 0.53-0.001 76.193 81.762-40.845a32 32 0 0 1 28.135-0.228l0.467 0.228 81.761 40.845v-76.193c0-17.496 14.042-31.713 31.471-31.996l0.53-0.004z" p-id="4613" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-toolbox"><path d="M421.888 460.8h-337.92a35.84 35.84 0 0 1-35.84-35.84V87.04a35.84 35.84 0 0 1 35.84-35.84h337.92a35.84 35.84 0 0 1 35.84 35.84v337.92a35.84 35.84 0 0 1-35.84 35.84z m-322.56-51.2h307.2V102.4h-307.2zM933.888 460.8h-337.92a35.84 35.84 0 0 1-35.84-35.84V87.04a35.84 35.84 0 0 1 35.84-35.84h337.92a35.84 35.84 0 0 1 35.84 35.84v337.92a35.84 35.84 0 0 1-35.84 35.84z m-322.56-51.2h307.2V102.4h-307.2zM421.888 972.8h-337.92a35.84 35.84 0 0 1-35.84-35.84v-337.92a35.84 35.84 0 0 1 35.84-35.84h337.92a35.84 35.84 0 0 1 35.84 35.84v337.92a35.84 35.84 0 0 1-35.84 35.84z m-322.56-51.2h307.2v-307.2h-307.2zM933.888 972.8h-337.92a35.84 35.84 0 0 1-35.84-35.84v-337.92a35.84 35.84 0 0 1 35.84-35.84h337.92a35.84 35.84 0 0 1 35.84 35.84v337.92a35.84 35.84 0 0 1-35.84 35.84z m-322.56-51.2h307.2v-307.2h-307.2z" p-id="36134" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-top"><path d="M711.68 406.016L631.466667 143.36l74.581333-55.978667a25.6 25.6 0 0 0-15.36-46.08h-356.693333a25.6 25.6 0 0 0-15.36 46.08L392.533333 143.36l-80.384 263.509333c-31.914667 22.698667-136.533333 104.277333-136.533333 194.218667a25.6 25.6 0 0 0 25.6 25.6h201.728l84.309333 336.725333A25.258667 25.258667 0 0 0 512 982.698667a25.6 25.6 0 0 0 24.917333-19.285334l84.138667-336.725333h202.581333a25.6 25.6 0 0 0 25.6-25.6c0-94.890667-82.432-161.28-137.557333-195.072z" p-id="2699" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-web"><path d="M848 113c35.346 0 64 28.654 64 64v672c0 35.346-28.654 64-64 64H176c-35.346 0-64-28.654-64-64V177c0-35.346 28.654-64 64-64h672z m0 248.999H176V849h672V361.999zM296 177H176v120.999h120V177z m552 0H360v120.999h488V177z" p-id="27891" /></symbol><symbol viewBox="0 0 1024 1024"   id="icon-windows"><path d="M0 139.392L409.429333 81.92l0.170667 407.210667-409.216 2.389333L0 139.392z m409.301333 395.818667L409.6 942.08 0 884.181333V532.48l409.301333 2.730667z m41.258667-454.186667L1024 0v487.125333l-573.44 4.394667V81.024zM1024 533.333333L1023.872 1024l-572.501333-79.274667-0.810667-412.245333 573.44 0.896z" p-id="2934" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-zoom-in"><path d="M842.666667 896H181.333333a53.393333 53.393333 0 0 1-53.333333-53.333333V181.333333a53.393333 53.393333 0 0 1 53.333333-53.333333h661.333334a53.393333 53.393333 0 0 1 53.333333 53.333333v661.333334a53.393333 53.393333 0 0 1-53.333333 53.333333zM181.333333 170.666667a10.666667 10.666667 0 0 0-10.666666 10.666666v661.333334a10.666667 10.666667 0 0 0 10.666666 10.666666h661.333334a10.666667 10.666667 0 0 0 10.666666-10.666666V181.333333a10.666667 10.666667 0 0 0-10.666666-10.666666z" p-id="7308" /></symbol><symbol viewBox="0 0 1024 1024"  id="icon-zoom-out"><path d="M885.333333 85.333333H309.333333a53.393333 53.393333 0 0 0-53.333333 53.333334v117.333333H138.666667a53.393333 53.393333 0 0 0-53.333334 53.333333v576a53.393333 53.393333 0 0 0 53.333334 53.333334h576a53.393333 53.393333 0 0 0 53.333333-53.333334v-117.333333h117.333333a53.393333 53.393333 0 0 0 53.333334-53.333333V138.666667a53.393333 53.393333 0 0 0-53.333334-53.333334z m-160 800a10.666667 10.666667 0 0 1-10.666666 10.666667H138.666667a10.666667 10.666667 0 0 1-10.666667-10.666667V309.333333a10.666667 10.666667 0 0 1 10.666667-10.666666h576a10.666667 10.666667 0 0 1 10.666666 10.666666z m170.666667-170.666666a10.666667 10.666667 0 0 1-10.666667 10.666666h-117.333333V309.333333a53.393333 53.393333 0 0 0-53.333333-53.333333H298.666667V138.666667a10.666667 10.666667 0 0 1 10.666666-10.666667h576a10.666667 10.666667 0 0 1 10.666667 10.666667z" p-id="8493" /></symbol>';
    body.insertBefore(svgDom, body.lastChild);
  };
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", loadSvg);
  } else {
    loadSvg();
  }
}
const pinia = createPinia();
async function bootstrap() {
  const app = createApp(_sfc_main$2);
  setupGlobal(app);
  setupI18n(app);
  setupDirective(app);
  setupRouter(app);
  app.component("SvgIcon", SvgIcon);
  app.use(pinia);
  app.use(Ev);
  app.mount("#app");
}
bootstrap();
export {
  nextTick as $,
  At as A,
  createTextVNode as B,
  service as C,
  Dl as D,
  E0 as E,
  handleError as F,
  group as G,
  Fragment as H,
  renderList as I,
  reactive as J,
  resolveDirective as K,
  useRoute as L,
  useAgentStore as M,
  computed as N,
  unref as O,
  defineAsyncComponent as P,
  _export_sfc as Q,
  Rn as R,
  getSimpleDateFormatString as S,
  Transition as T,
  TransitionGroup as U,
  ElInput as V,
  search_default as W,
  normalizeStyle as X,
  watch as Y,
  renderSlot as Z,
  __vitePreload as _,
  onUnmounted as a,
  inject as a$,
  withKeys as a0,
  withModifiers as a1,
  circle_check_filled_default as a2,
  ElMessage as a3,
  ElIcon as a4,
  ElButton as a5,
  createApp as a6,
  toRefs as a7,
  useGlobalComponentSettings as a8,
  h$1 as a9,
  mutable as aA,
  markRaw as aB,
  full_screen_default as aC,
  scale_to_original_default as aD,
  useZIndex as aE,
  effectScope as aF,
  useEventListener as aG,
  ElFocusTrap as aH,
  close_default as aI,
  arrow_left_default as aJ,
  arrow_right_default as aK,
  zoom_out_default as aL,
  zoom_in_default as aM,
  refresh_left_default as aN,
  refresh_right_default as aO,
  ElTeleport as aP,
  EVENT_CODE as aQ,
  keysOf as aR,
  useAttrs$1 as aS,
  fromPairs as aT,
  useAttrs as aU,
  mergeProps as aV,
  normalizeProps as aW,
  guardReactiveProps as aX,
  getScrollContainer as aY,
  useThrottleFn as aZ,
  getCurrentInstance as a_,
  removeClass as aa,
  isString$3 as ab,
  getStyle as ac,
  addClass as ad,
  isObject$3 as ae,
  isRef as af,
  hyphenate as ag,
  onClickOutside as ah,
  arrow_up_default as ai,
  arrow_down_default as aj,
  useUserStore as ak,
  resolveDynamicComponent as al,
  useNamespace as am,
  useId as an,
  _export_sfc$1 as ao,
  buildProps as ap,
  useLocale as aq,
  addUnit as ar,
  withInstall as as,
  isSymbol as at,
  isObject$2 as au,
  root as av,
  componentSizes as aw,
  isNumber$2 as ax,
  iconPropType as ay,
  definePropType as az,
  openBlock as b,
  OnlyChild as b$,
  throwError as b0,
  useResizeObserver as b1,
  onBeforeUnmount as b2,
  useDocumentVisibility as b3,
  useWindowFocus as b4,
  onUpdated as b5,
  provide as b6,
  plus_default as b7,
  UPDATE_MODEL_EVENT as b8,
  isUndefined$1 as b9,
  warning_filled_default as bA,
  circle_check_default as bB,
  circle_close_default as bC,
  check_default as bD,
  isFunction$3 as bE,
  TypeComponentsMap as bF,
  CloseComponents as bG,
  useTimeoutFn as bH,
  render as bI,
  withInstallFunction as bJ,
  loading_default as bK,
  more_filled_default as bL,
  success_filled_default as bM,
  subscriptionApi as bN,
  setOrderCache as bO,
  A as bP,
  PAYMENT_TYPE_WECHAT as bQ,
  useI18n as bR,
  eventBus as bS,
  EVENT_NAMES as bT,
  LoginModal as bU,
  Ev as bV,
  readonly as bW,
  composeEventHandlers as bX,
  useTooltipTriggerProps as bY,
  useTooltipContentProps as bZ,
  roleTypes as b_,
  useSlots as ba,
  computedEager as bb,
  withNoopInstall as bc,
  dialogProps as bd,
  dialogEmits as be,
  useDeprecated as bf,
  useDialog as bg,
  ElOverlay as bh,
  ElTooltip as bi,
  ElDialog as bj,
  copy_document_default as bk,
  createSlots as bl,
  refresh_default as bm,
  useSizeProp as bn,
  isBoolean$2 as bo,
  CHANGE_EVENT as bp,
  isPropAbsent as bq,
  useFormSize as br,
  useFormDisabled as bs,
  vModelRadio as bt,
  useAriaProps as bu,
  useFormItem as bv,
  useFormItemInputId as bw,
  debugWarn as bx,
  toRef as by,
  onActivated as bz,
  createElementBlock as c,
  castArray as c0,
  composeRefs as c1,
  whenMouse as c2,
  FOCUS_TRAP_INJECTION_KEY as c3,
  obtainAllFocusableElements$1 as c4,
  TypeComponents as c5,
  useDraggable as c6,
  useLockscreen as c7,
  useSameTarget as c8,
  hasOwn$1 as c9,
  useFocusController as cA,
  useEmptyValues as cB,
  ValidateComponentsMap as cC,
  isIOS as cD,
  isPlainObject$3 as cE,
  scrollIntoView as cF,
  Ee as cG,
  useEmptyValuesProps as cH,
  vModelText as cI,
  toHandlerKey as cJ,
  useMutationObserver as cK,
  INPUT_EVENT as cL,
  isPromise$1 as cM,
  delete_default as cN,
  ElFormItem as cO,
  ElForm as cP,
  getPasswordRules as cQ,
  userApi as cR,
  circle_plus_default as cS,
  remove_default as cT,
  download_default as cU,
  createStaticVNode as cV,
  share_default as cW,
  star_default as cX,
  toHandlers as ca,
  triggerEvent as cb,
  hasClass as cc,
  TinyColor as cd,
  more_default as ce,
  isNil as cf,
  MapCache as cg,
  Symbol$1 as ch,
  eq as ci,
  Uint8Array$1 as cj,
  getAllKeys as ck,
  getTag$1 as cl,
  isBuffer$1 as cm,
  Stack as cn,
  isTypedArray$1 as co,
  isArray$3 as cp,
  isObjectLike as cq,
  keys as cr,
  isKey as cs,
  toKey as ct,
  get as cu,
  hasIn as cv,
  baseGet as cw,
  identity$1 as cx,
  toRaw as cy,
  useComposition as cz,
  createBaseVNode as d,
  createCommentVNode as e,
  createVNode as f,
  withDirectives as g,
  createBlock as h,
  withCtx as i,
  gt$1 as j,
  isClient as k,
  isArray$4 as l,
  isElement as m,
  normalizeClass as n,
  onMounted as o,
  defineStore as p,
  flattedChildren as q,
  ref as r,
  shallowRef as s,
  toDisplayString$1 as t,
  isVNode$1 as u,
  vShow as v,
  watchEffect as w,
  capitalize$1 as x,
  defineComponent as y,
  resolveComponent as z
};
function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = ["./code-BoIKZXAb-ylVGVqg3.js","./copy-BS31ARP0-eab1H3tb.js","./mermaid-j5R1o_wi-dCQhMK9F.js","./helper-7WMIPux3-FiO_G2IV.js","./mindmap-BtUtvkhq-GdS60v6X.js","./min-DLf0xQMm-nalJLjBu.js","./ordinal-DfAQgscy-u5KZJLIt.js","./init-DjUOC4st-2EPjLC0T.js","./colors-BD7LS4qt-GuCNWxZ4.js","./index-HEyD9hs7.js","./el-empty-iR7uizlV.js","./el-empty-N-6r8Eh9.css","./el-image-viewer-l__UzqmW.js","./debounce-Aw5yKx-N.js","./el-image-viewer-XYf3mlAR.css","./global-kvMtX63s.js","./conversation-KofNRSJn.js","./enterprise-EiZTO-a9.js","./links-hplqNGHr.js","./index-3qMrRERU.css","./layout-GKZAdT8H.js","./el-scrollbar-Ngsny-f4.js","./el-scrollbar-MGPS7OqT.css","./main-header.vue_vue_type_script_setup_true_lang-hK95iFpc.js","./el-loading-bLs-AQkn.js","./el-loading-zBRdopto.css","./el-radio-uShQVp49.js","./el-radio-P9nymJDg.css","./main-header-8k4nnvTs.css","./index-UhiCyIRr.js","./index-IGBoDB1x.js","./layout-AmRc8xE1.css","./index-c1zGsFPG.js","./agent-5_BbzAr9.js","./el-tab-pane-c5Z0Dsok.js","./strings-gmAHSTq5.js","./el-tab-pane-Gk50KD-6.css","./agent-JglzmTZQ.css","./toolbox-Kk2oQQcT.js","./toolbox-ii-CjmFe.js","./toolbox-sncAZkmi.css","./index-LEpgchrH.js","./index-S2sbhwWE.css","./index-EjEV8-a4.js","./index-i-s4-gr7.css","./index-_KL5Zetu.js","./browser-setting-mkdXkMac.js","./el-dropdown-item-NOVRjZ1y.js","./el-dropdown-item-2HWGmYcF.css","./upload-U3GEMIbU.js","./upload-EpRhXtGe.css","./index-fFBRgUxU.css","./index-zGAtWxS4.js","./index-BNP-9dGW.js","./index-W09RKRAc.css"]
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}
