import { aP as q, aQ as V, aR as H, y as A, aS as O, aT as U, Y as b, r as C, aU as M, aV as Y, aW as j, aX as G, b as o, j as Q, w as l, f as d, T as W, u as e, m as X, aY as Z, aZ as J, d as E, a3 as K, x as _, q as t, c as i, s as u, t as x, e as r, G as ee, a2 as ae, p as se, a_ as te, a$ as oe, b0 as re } from "./index-8579fe4a.js";
const le = q({ ...V, direction: { type: String, default: "rtl", values: ["ltr", "rtl", "ttb", "btt"] }, size: { type: [String, Number], default: "30%" }, withHeader: { type: Boolean, default: true }, modalFade: { type: Boolean, default: true }, headerAriaLevel: { type: String, default: "2" } }), de = H, ie = A({ name: "ElDrawer", inheritAttrs: false }), ne = A({ ...ie, props: le, emits: de, setup(R, { expose: S }) {
  const n = R, g = O();
  U({ scope: "el-drawer", from: "the title slot", replacement: "the header slot", version: "3.0.0", ref: "https://element-plus.org/en-US/component/drawer.html#slots" }, b(() => !!g.title));
  const f = C(), m = C(), s = M("drawer"), { t: T } = Y(), { afterEnter: y, afterLeave: h, beforeLeave: F, visible: c, rendered: D, titleId: p, bodyId: w, zIndex: L, onModalClick: B, onOpenAutoFocus: P, onCloseAutoFocus: $, onFocusoutPrevented: z, onCloseRequested: I, handleClose: v } = j(n, f), N = b(() => n.direction === "rtl" || n.direction === "ltr"), k = b(() => G(n.size));
  return S({ handleClose: v, afterEnter: y, afterLeave: h }), (a, fe) => (o(), Q(e(te), { to: a.appendTo, disabled: a.appendTo !== "body" ? false : !a.appendToBody }, { default: l(() => [d(W, { name: e(s).b("fade"), onAfterEnter: e(y), onAfterLeave: e(h), onBeforeLeave: e(F), persisted: "" }, { default: l(() => [X(d(e(Z), { mask: a.modal, "overlay-class": a.modalClass, "z-index": e(L), onClick: e(B) }, { default: l(() => [d(e(J), { loop: "", trapped: e(c), "focus-trap-el": f.value, "focus-start-el": m.value, onFocusAfterTrapped: e(P), onFocusAfterReleased: e($), onFocusoutPrevented: e(z), onReleaseRequested: e(I) }, { default: l(() => [E("div", K({ ref_key: "drawerRef", ref: f, "aria-modal": "true", "aria-label": a.title || void 0, "aria-labelledby": a.title ? void 0 : e(p), "aria-describedby": e(w) }, a.$attrs, { class: [e(s).b(), a.direction, e(c) && "open"], style: e(N) ? "width: " + e(k) : "height: " + e(k), role: "dialog", onClick: _(() => {
  }, ["stop"]) }), [E("span", { ref_key: "focusStartRef", ref: m, class: t(e(s).e("sr-focus")), tabindex: "-1" }, null, 2), a.withHeader ? (o(), i("header", { key: 0, class: t([e(s).e("header"), a.headerClass]) }, [a.$slots.title ? u(a.$slots, "title", { key: 1 }, () => [r(" DEPRECATED SLOT ")]) : u(a.$slots, "header", { key: 0, close: e(v), titleId: e(p), titleClass: e(s).e("title") }, () => [a.$slots.title ? r("v-if", true) : (o(), i("span", { key: 0, id: e(p), role: "heading", "aria-level": a.headerAriaLevel, class: t(e(s).e("title")) }, x(a.title), 11, ["id", "aria-level"]))]), a.showClose ? (o(), i("button", { key: 2, "aria-label": e(T)("el.drawer.close"), class: t(e(s).e("close-btn")), type: "button", onClick: e(v) }, [d(e(ee), { class: t(e(s).e("close")) }, { default: l(() => [d(e(ae))]), _: 1 }, 8, ["class"])], 10, ["aria-label", "onClick"])) : r("v-if", true)], 2)) : r("v-if", true), e(D) ? (o(), i("div", { key: 1, id: e(w), class: t([e(s).e("body"), a.bodyClass]) }, [u(a.$slots, "default")], 10, ["id"])) : r("v-if", true), a.$slots.footer ? (o(), i("div", { key: 2, class: t([e(s).e("footer"), a.footerClass]) }, [u(a.$slots, "footer")], 2)) : r("v-if", true)], 16, ["aria-label", "aria-labelledby", "aria-describedby", "onClick"])]), _: 3 }, 8, ["trapped", "focus-trap-el", "focus-start-el", "onFocusAfterTrapped", "onFocusAfterReleased", "onFocusoutPrevented", "onReleaseRequested"])]), _: 3 }, 8, ["mask", "overlay-class", "z-index", "onClick"]), [[se, e(c)]])]), _: 3 }, 8, ["name", "onAfterEnter", "onAfterLeave", "onBeforeLeave"])]), _: 3 }, 8, ["to", "disabled"]));
} });
var ue = oe(ne, [["__file", "drawer.vue"]]);
const pe = re(ue);
export {
  pe as E
};
